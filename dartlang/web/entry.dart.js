var self = Object.create(this);
self.require = require;
self.module = module;
self.window = window;
self.atom = atom;
self.exports = exports;
self.Object = Object;
self.Promise = Promise;
self.setTimeout = function(f, millis) { return window.setTimeout(f, millis); };
self.clearTimeout = function(id) { window.clearTimeout(id); };
self.setInterval = function(f, millis) { return window.setInterval(f, millis); };
self.clearInterval = function(id) { window.clearInterval(id); };

// Work around interop issues.
self.getTextEditorForElement = function(element) { return element.o.getModel(); };
self.uncrackDart2js = function(obj) { return obj.o; };

self._domHoist = function(element, targetQuery) {
  var target = document.querySelector(targetQuery);
  target.appendChild(element);
};

self._domRemove = function(element) {
  element.parentNode.removeChild(element);
};
// Generated by dart2js (CSP), the Dart to JavaScript compiler version: 1.21.0-dev.5.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  init.precompiled = function($collectedClasses$) {
    // ::norenaming::
    var $desc;
    function JS_CONST(code) {
      this.code = code;
      this.$deferredAction();
    }
    JS_CONST.builtin$cls = "JS_CONST";
    if (!("name" in JS_CONST))
      JS_CONST.name = "JS_CONST";
    $desc = $collectedClasses$.JS_CONST[1];
    JS_CONST.prototype = $desc;
    JS_CONST.$__fields__ = ["code"];
    JS_CONST.prototype.get$code = function(receiver) {
      return this.code;
    };
    function Interceptor() {
      this.$deferredAction();
    }
    Interceptor.builtin$cls = "Interceptor";
    if (!("name" in Interceptor))
      Interceptor.name = "Interceptor";
    $desc = $collectedClasses$.Interceptor[1];
    Interceptor.prototype = $desc;
    Interceptor.$__fields__ = [];
    function JSBool() {
      this.$deferredAction();
    }
    JSBool.builtin$cls = "JSBool";
    if (!("name" in JSBool))
      JSBool.name = "JSBool";
    $desc = $collectedClasses$.JSBool[1];
    JSBool.prototype = $desc;
    JSBool.$__fields__ = [];
    function JSNull() {
      this.$deferredAction();
    }
    JSNull.builtin$cls = "JSNull";
    if (!("name" in JSNull))
      JSNull.name = "JSNull";
    $desc = $collectedClasses$.JSNull[1];
    JSNull.prototype = $desc;
    JSNull.$__fields__ = [];
    function JavaScriptObject() {
      this.$deferredAction();
    }
    JavaScriptObject.builtin$cls = "JavaScriptObject";
    if (!("name" in JavaScriptObject))
      JavaScriptObject.name = "JavaScriptObject";
    $desc = $collectedClasses$.JavaScriptObject[1];
    JavaScriptObject.prototype = $desc;
    JavaScriptObject.$__fields__ = [];
    function PlainJavaScriptObject() {
      this.$deferredAction();
    }
    PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
    if (!("name" in PlainJavaScriptObject))
      PlainJavaScriptObject.name = "PlainJavaScriptObject";
    $desc = $collectedClasses$.PlainJavaScriptObject[1];
    PlainJavaScriptObject.prototype = $desc;
    PlainJavaScriptObject.$__fields__ = [];
    function UnknownJavaScriptObject() {
      this.$deferredAction();
    }
    UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
    if (!("name" in UnknownJavaScriptObject))
      UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
    $desc = $collectedClasses$.UnknownJavaScriptObject[1];
    UnknownJavaScriptObject.prototype = $desc;
    UnknownJavaScriptObject.$__fields__ = [];
    function JavaScriptFunction() {
      this.$deferredAction();
    }
    JavaScriptFunction.builtin$cls = "JavaScriptFunction";
    if (!("name" in JavaScriptFunction))
      JavaScriptFunction.name = "JavaScriptFunction";
    $desc = $collectedClasses$.JavaScriptFunction[1];
    JavaScriptFunction.prototype = $desc;
    JavaScriptFunction.$__fields__ = [];
    function JSArray($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    JSArray.builtin$cls = "JSArray";
    if (!("name" in JSArray))
      JSArray.name = "JSArray";
    $desc = $collectedClasses$.JSArray[1];
    JSArray.prototype = $desc;
    JSArray.$__fields__ = [];
    function JSUnmodifiableArray($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    JSUnmodifiableArray.builtin$cls = "JSUnmodifiableArray";
    if (!("name" in JSUnmodifiableArray))
      JSUnmodifiableArray.name = "JSUnmodifiableArray";
    $desc = $collectedClasses$.JSUnmodifiableArray[1];
    JSUnmodifiableArray.prototype = $desc;
    JSUnmodifiableArray.$__fields__ = [];
    function ArrayIterator(__interceptors$_iterable, __interceptors$_length, __interceptors$_index, __interceptors$_current, $ti) {
      this.__interceptors$_iterable = __interceptors$_iterable;
      this.__interceptors$_length = __interceptors$_length;
      this.__interceptors$_index = __interceptors$_index;
      this.__interceptors$_current = __interceptors$_current;
      this.$ti = $ti;
      this.$deferredAction();
    }
    ArrayIterator.builtin$cls = "ArrayIterator";
    if (!("name" in ArrayIterator))
      ArrayIterator.name = "ArrayIterator";
    $desc = $collectedClasses$.ArrayIterator[1];
    ArrayIterator.prototype = $desc;
    ArrayIterator.$__fields__ = ["__interceptors$_iterable", "__interceptors$_length", "__interceptors$_index", "__interceptors$_current"];
    function JSNumber() {
      this.$deferredAction();
    }
    JSNumber.builtin$cls = "JSNumber";
    if (!("name" in JSNumber))
      JSNumber.name = "JSNumber";
    $desc = $collectedClasses$.JSNumber[1];
    JSNumber.prototype = $desc;
    JSNumber.$__fields__ = [];
    function JSInt() {
      this.$deferredAction();
    }
    JSInt.builtin$cls = "JSInt";
    if (!("name" in JSInt))
      JSInt.name = "JSInt";
    $desc = $collectedClasses$.JSInt[1];
    JSInt.prototype = $desc;
    JSInt.$__fields__ = [];
    function JSDouble() {
      this.$deferredAction();
    }
    JSDouble.builtin$cls = "JSDouble";
    if (!("name" in JSDouble))
      JSDouble.name = "JSDouble";
    $desc = $collectedClasses$.JSDouble[1];
    JSDouble.prototype = $desc;
    JSDouble.$__fields__ = [];
    function JSString() {
      this.$deferredAction();
    }
    JSString.builtin$cls = "JSString";
    if (!("name" in JSString))
      JSString.name = "JSString";
    $desc = $collectedClasses$.JSString[1];
    JSString.prototype = $desc;
    JSString.$__fields__ = [];
    function CodeUnits(__internal$_string) {
      this.__internal$_string = __internal$_string;
      this.$deferredAction();
    }
    CodeUnits.builtin$cls = "CodeUnits";
    if (!("name" in CodeUnits))
      CodeUnits.name = "CodeUnits";
    $desc = $collectedClasses$.CodeUnits[1];
    CodeUnits.prototype = $desc;
    CodeUnits.$__fields__ = ["__internal$_string"];
    function ListIterable($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    ListIterable.builtin$cls = "ListIterable";
    if (!("name" in ListIterable))
      ListIterable.name = "ListIterable";
    $desc = $collectedClasses$.ListIterable[1];
    ListIterable.prototype = $desc;
    ListIterable.$__fields__ = [];
    function SubListIterable(_iterable, __internal$_start, _endOrLength, $ti) {
      this._iterable = _iterable;
      this.__internal$_start = __internal$_start;
      this._endOrLength = _endOrLength;
      this.$ti = $ti;
      this.$deferredAction();
    }
    SubListIterable.builtin$cls = "SubListIterable";
    if (!("name" in SubListIterable))
      SubListIterable.name = "SubListIterable";
    $desc = $collectedClasses$.SubListIterable[1];
    SubListIterable.prototype = $desc;
    SubListIterable.$__fields__ = ["_iterable", "__internal$_start", "_endOrLength"];
    function ListIterator(_iterable, __internal$_length, _index, __internal$_current, $ti) {
      this._iterable = _iterable;
      this.__internal$_length = __internal$_length;
      this._index = _index;
      this.__internal$_current = __internal$_current;
      this.$ti = $ti;
      this.$deferredAction();
    }
    ListIterator.builtin$cls = "ListIterator";
    if (!("name" in ListIterator))
      ListIterator.name = "ListIterator";
    $desc = $collectedClasses$.ListIterator[1];
    ListIterator.prototype = $desc;
    ListIterator.$__fields__ = ["_iterable", "__internal$_length", "_index", "__internal$_current"];
    function MappedIterable(_iterable, _f, $ti) {
      this._iterable = _iterable;
      this._f = _f;
      this.$ti = $ti;
      this.$deferredAction();
    }
    MappedIterable.builtin$cls = "MappedIterable";
    if (!("name" in MappedIterable))
      MappedIterable.name = "MappedIterable";
    $desc = $collectedClasses$.MappedIterable[1];
    MappedIterable.prototype = $desc;
    MappedIterable.$__fields__ = ["_iterable", "_f"];
    function EfficientLengthMappedIterable(_iterable, _f, $ti) {
      this._iterable = _iterable;
      this._f = _f;
      this.$ti = $ti;
      this.$deferredAction();
    }
    EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
    if (!("name" in EfficientLengthMappedIterable))
      EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
    $desc = $collectedClasses$.EfficientLengthMappedIterable[1];
    EfficientLengthMappedIterable.prototype = $desc;
    EfficientLengthMappedIterable.$__fields__ = ["_iterable", "_f"];
    function MappedIterator(__internal$_current, _iterator, _f, $ti) {
      this.__internal$_current = __internal$_current;
      this._iterator = _iterator;
      this._f = _f;
      this.$ti = $ti;
      this.$deferredAction();
    }
    MappedIterator.builtin$cls = "MappedIterator";
    if (!("name" in MappedIterator))
      MappedIterator.name = "MappedIterator";
    $desc = $collectedClasses$.MappedIterator[1];
    MappedIterator.prototype = $desc;
    MappedIterator.$__fields__ = ["__internal$_current", "_iterator", "_f"];
    function MappedListIterable(_source, _f, $ti) {
      this._source = _source;
      this._f = _f;
      this.$ti = $ti;
      this.$deferredAction();
    }
    MappedListIterable.builtin$cls = "MappedListIterable";
    if (!("name" in MappedListIterable))
      MappedListIterable.name = "MappedListIterable";
    $desc = $collectedClasses$.MappedListIterable[1];
    MappedListIterable.prototype = $desc;
    MappedListIterable.$__fields__ = ["_source", "_f"];
    function WhereIterable(_iterable, _f, $ti) {
      this._iterable = _iterable;
      this._f = _f;
      this.$ti = $ti;
      this.$deferredAction();
    }
    WhereIterable.builtin$cls = "WhereIterable";
    if (!("name" in WhereIterable))
      WhereIterable.name = "WhereIterable";
    $desc = $collectedClasses$.WhereIterable[1];
    WhereIterable.prototype = $desc;
    WhereIterable.$__fields__ = ["_iterable", "_f"];
    function WhereIterator(_iterator, _f, $ti) {
      this._iterator = _iterator;
      this._f = _f;
      this.$ti = $ti;
      this.$deferredAction();
    }
    WhereIterator.builtin$cls = "WhereIterator";
    if (!("name" in WhereIterator))
      WhereIterator.name = "WhereIterator";
    $desc = $collectedClasses$.WhereIterator[1];
    WhereIterator.prototype = $desc;
    WhereIterator.$__fields__ = ["_iterator", "_f"];
    function ExpandIterable(_iterable, _f, $ti) {
      this._iterable = _iterable;
      this._f = _f;
      this.$ti = $ti;
      this.$deferredAction();
    }
    ExpandIterable.builtin$cls = "ExpandIterable";
    if (!("name" in ExpandIterable))
      ExpandIterable.name = "ExpandIterable";
    $desc = $collectedClasses$.ExpandIterable[1];
    ExpandIterable.prototype = $desc;
    ExpandIterable.$__fields__ = ["_iterable", "_f"];
    function ExpandIterator(_iterator, _f, _currentExpansion, __internal$_current, $ti) {
      this._iterator = _iterator;
      this._f = _f;
      this._currentExpansion = _currentExpansion;
      this.__internal$_current = __internal$_current;
      this.$ti = $ti;
      this.$deferredAction();
    }
    ExpandIterator.builtin$cls = "ExpandIterator";
    if (!("name" in ExpandIterator))
      ExpandIterator.name = "ExpandIterator";
    $desc = $collectedClasses$.ExpandIterator[1];
    ExpandIterator.prototype = $desc;
    ExpandIterator.$__fields__ = ["_iterator", "_f", "_currentExpansion", "__internal$_current"];
    function TakeIterable(_iterable, _takeCount, $ti) {
      this._iterable = _iterable;
      this._takeCount = _takeCount;
      this.$ti = $ti;
      this.$deferredAction();
    }
    TakeIterable.builtin$cls = "TakeIterable";
    if (!("name" in TakeIterable))
      TakeIterable.name = "TakeIterable";
    $desc = $collectedClasses$.TakeIterable[1];
    TakeIterable.prototype = $desc;
    TakeIterable.$__fields__ = ["_iterable", "_takeCount"];
    function EfficientLengthTakeIterable(_iterable, _takeCount, $ti) {
      this._iterable = _iterable;
      this._takeCount = _takeCount;
      this.$ti = $ti;
      this.$deferredAction();
    }
    EfficientLengthTakeIterable.builtin$cls = "EfficientLengthTakeIterable";
    if (!("name" in EfficientLengthTakeIterable))
      EfficientLengthTakeIterable.name = "EfficientLengthTakeIterable";
    $desc = $collectedClasses$.EfficientLengthTakeIterable[1];
    EfficientLengthTakeIterable.prototype = $desc;
    EfficientLengthTakeIterable.$__fields__ = ["_iterable", "_takeCount"];
    function TakeIterator(_iterator, _remaining, $ti) {
      this._iterator = _iterator;
      this._remaining = _remaining;
      this.$ti = $ti;
      this.$deferredAction();
    }
    TakeIterator.builtin$cls = "TakeIterator";
    if (!("name" in TakeIterator))
      TakeIterator.name = "TakeIterator";
    $desc = $collectedClasses$.TakeIterator[1];
    TakeIterator.prototype = $desc;
    TakeIterator.$__fields__ = ["_iterator", "_remaining"];
    function SkipIterable(_iterable, _skipCount, $ti) {
      this._iterable = _iterable;
      this._skipCount = _skipCount;
      this.$ti = $ti;
      this.$deferredAction();
    }
    SkipIterable.builtin$cls = "SkipIterable";
    if (!("name" in SkipIterable))
      SkipIterable.name = "SkipIterable";
    $desc = $collectedClasses$.SkipIterable[1];
    SkipIterable.prototype = $desc;
    SkipIterable.$__fields__ = ["_iterable", "_skipCount"];
    function EfficientLengthSkipIterable(_iterable, _skipCount, $ti) {
      this._iterable = _iterable;
      this._skipCount = _skipCount;
      this.$ti = $ti;
      this.$deferredAction();
    }
    EfficientLengthSkipIterable.builtin$cls = "EfficientLengthSkipIterable";
    if (!("name" in EfficientLengthSkipIterable))
      EfficientLengthSkipIterable.name = "EfficientLengthSkipIterable";
    $desc = $collectedClasses$.EfficientLengthSkipIterable[1];
    EfficientLengthSkipIterable.prototype = $desc;
    EfficientLengthSkipIterable.$__fields__ = ["_iterable", "_skipCount"];
    function SkipIterator(_iterator, _skipCount, $ti) {
      this._iterator = _iterator;
      this._skipCount = _skipCount;
      this.$ti = $ti;
      this.$deferredAction();
    }
    SkipIterator.builtin$cls = "SkipIterator";
    if (!("name" in SkipIterator))
      SkipIterator.name = "SkipIterator";
    $desc = $collectedClasses$.SkipIterator[1];
    SkipIterator.prototype = $desc;
    SkipIterator.$__fields__ = ["_iterator", "_skipCount"];
    function EmptyIterable($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    EmptyIterable.builtin$cls = "EmptyIterable";
    if (!("name" in EmptyIterable))
      EmptyIterable.name = "EmptyIterable";
    $desc = $collectedClasses$.EmptyIterable[1];
    EmptyIterable.prototype = $desc;
    EmptyIterable.$__fields__ = [];
    function EmptyIterator($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    EmptyIterator.builtin$cls = "EmptyIterator";
    if (!("name" in EmptyIterator))
      EmptyIterator.name = "EmptyIterator";
    $desc = $collectedClasses$.EmptyIterator[1];
    EmptyIterator.prototype = $desc;
    EmptyIterator.$__fields__ = [];
    function FixedLengthListMixin($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
    if (!("name" in FixedLengthListMixin))
      FixedLengthListMixin.name = "FixedLengthListMixin";
    $desc = $collectedClasses$.FixedLengthListMixin[1];
    FixedLengthListMixin.prototype = $desc;
    FixedLengthListMixin.$__fields__ = [];
    function UnmodifiableListMixin($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    UnmodifiableListMixin.builtin$cls = "UnmodifiableListMixin";
    if (!("name" in UnmodifiableListMixin))
      UnmodifiableListMixin.name = "UnmodifiableListMixin";
    $desc = $collectedClasses$.UnmodifiableListMixin[1];
    UnmodifiableListMixin.prototype = $desc;
    UnmodifiableListMixin.$__fields__ = [];
    function UnmodifiableListBase($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    UnmodifiableListBase.builtin$cls = "UnmodifiableListBase";
    if (!("name" in UnmodifiableListBase))
      UnmodifiableListBase.name = "UnmodifiableListBase";
    $desc = $collectedClasses$.UnmodifiableListBase[1];
    UnmodifiableListBase.prototype = $desc;
    UnmodifiableListBase.$__fields__ = [];
    function ReversedListIterable(_source, $ti) {
      this._source = _source;
      this.$ti = $ti;
      this.$deferredAction();
    }
    ReversedListIterable.builtin$cls = "ReversedListIterable";
    if (!("name" in ReversedListIterable))
      ReversedListIterable.name = "ReversedListIterable";
    $desc = $collectedClasses$.ReversedListIterable[1];
    ReversedListIterable.prototype = $desc;
    ReversedListIterable.$__fields__ = ["_source"];
    function Symbol(__internal$_name) {
      this.__internal$_name = __internal$_name;
      this.$deferredAction();
    }
    Symbol.builtin$cls = "Symbol";
    if (!("name" in Symbol))
      Symbol.name = "Symbol";
    $desc = $collectedClasses$.Symbol[1];
    Symbol.prototype = $desc;
    Symbol.$__fields__ = ["__internal$_name"];
    Symbol.prototype.get$__internal$_name = function() {
      return this.__internal$_name;
    };
    function startRootIsolate_closure(_box_0, entry) {
      this._box_0 = _box_0;
      this.entry = entry;
      this.$deferredAction();
    }
    startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
    if (!("name" in startRootIsolate_closure))
      startRootIsolate_closure.name = "startRootIsolate_closure";
    $desc = $collectedClasses$.startRootIsolate_closure[1];
    startRootIsolate_closure.prototype = $desc;
    startRootIsolate_closure.$__fields__ = ["_box_0", "entry"];
    function startRootIsolate_closure0(_box_0, entry) {
      this._box_0 = _box_0;
      this.entry = entry;
      this.$deferredAction();
    }
    startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
    if (!("name" in startRootIsolate_closure0))
      startRootIsolate_closure0.name = "startRootIsolate_closure0";
    $desc = $collectedClasses$.startRootIsolate_closure0[1];
    startRootIsolate_closure0.prototype = $desc;
    startRootIsolate_closure0.$__fields__ = ["_box_0", "entry"];
    function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
      this.nextIsolateId = nextIsolateId;
      this.currentManagerId = currentManagerId;
      this.nextManagerId = nextManagerId;
      this.currentContext = currentContext;
      this.rootContext = rootContext;
      this.topEventLoop = topEventLoop;
      this.fromCommandLine = fromCommandLine;
      this.isWorker = isWorker;
      this.supportsWorkers = supportsWorkers;
      this.isolates = isolates;
      this.mainManager = mainManager;
      this.managers = managers;
      this.entry = entry;
      this.$deferredAction();
    }
    _Manager.builtin$cls = "_Manager";
    if (!("name" in _Manager))
      _Manager.name = "_Manager";
    $desc = $collectedClasses$._Manager[1];
    _Manager.prototype = $desc;
    _Manager.$__fields__ = ["nextIsolateId", "currentManagerId", "nextManagerId", "currentContext", "rootContext", "topEventLoop", "fromCommandLine", "isWorker", "supportsWorkers", "isolates", "mainManager", "managers", "entry"];
    _Manager.prototype.get$isolates = function() {
      return this.isolates;
    };
    function _IsolateContext(id, ports, weakPorts, isolateStatics, controlPort, pauseCapability, terminateCapability, initialized, isPaused, delayedEvents, pauseTokens, doneHandlers, _scheduledControlEvents, _isExecutingEvent, errorsAreFatal, errorPorts) {
      this.id = id;
      this.ports = ports;
      this.weakPorts = weakPorts;
      this.isolateStatics = isolateStatics;
      this.controlPort = controlPort;
      this.pauseCapability = pauseCapability;
      this.terminateCapability = terminateCapability;
      this.initialized = initialized;
      this.isPaused = isPaused;
      this.delayedEvents = delayedEvents;
      this.pauseTokens = pauseTokens;
      this.doneHandlers = doneHandlers;
      this._scheduledControlEvents = _scheduledControlEvents;
      this._isExecutingEvent = _isExecutingEvent;
      this.errorsAreFatal = errorsAreFatal;
      this.errorPorts = errorPorts;
      this.$deferredAction();
    }
    _IsolateContext.builtin$cls = "_IsolateContext";
    if (!("name" in _IsolateContext))
      _IsolateContext.name = "_IsolateContext";
    $desc = $collectedClasses$._IsolateContext[1];
    _IsolateContext.prototype = $desc;
    _IsolateContext.$__fields__ = ["id", "ports", "weakPorts", "isolateStatics", "controlPort", "pauseCapability", "terminateCapability", "initialized", "isPaused", "delayedEvents", "pauseTokens", "doneHandlers", "_scheduledControlEvents", "_isExecutingEvent", "errorsAreFatal", "errorPorts"];
    _IsolateContext.prototype.get$id = function(receiver) {
      return this.id;
    };
    _IsolateContext.prototype.get$isolateStatics = function() {
      return this.isolateStatics;
    };
    _IsolateContext.prototype.get$controlPort = function() {
      return this.controlPort;
    };
    _IsolateContext.prototype.set$initialized = function(v) {
      return this.initialized = v;
    };
    _IsolateContext.prototype.get$isPaused = function() {
      return this.isPaused;
    };
    _IsolateContext.prototype.get$delayedEvents = function() {
      return this.delayedEvents;
    };
    function _IsolateContext_handlePing_respond(responsePort, response) {
      this.responsePort = responsePort;
      this.response = response;
      this.$deferredAction();
    }
    _IsolateContext_handlePing_respond.builtin$cls = "_IsolateContext_handlePing_respond";
    if (!("name" in _IsolateContext_handlePing_respond))
      _IsolateContext_handlePing_respond.name = "_IsolateContext_handlePing_respond";
    $desc = $collectedClasses$._IsolateContext_handlePing_respond[1];
    _IsolateContext_handlePing_respond.prototype = $desc;
    _IsolateContext_handlePing_respond.$__fields__ = ["responsePort", "response"];
    function _EventLoop(events, _activeJsAsyncCount) {
      this.events = events;
      this._activeJsAsyncCount = _activeJsAsyncCount;
      this.$deferredAction();
    }
    _EventLoop.builtin$cls = "_EventLoop";
    if (!("name" in _EventLoop))
      _EventLoop.name = "_EventLoop";
    $desc = $collectedClasses$._EventLoop[1];
    _EventLoop.prototype = $desc;
    _EventLoop.$__fields__ = ["events", "_activeJsAsyncCount"];
    function _EventLoop__runHelper_next($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
    if (!("name" in _EventLoop__runHelper_next))
      _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
    $desc = $collectedClasses$._EventLoop__runHelper_next[1];
    _EventLoop__runHelper_next.prototype = $desc;
    _EventLoop__runHelper_next.$__fields__ = ["$this"];
    function _IsolateEvent(isolate, fn, message) {
      this.isolate = isolate;
      this.fn = fn;
      this.message = message;
      this.$deferredAction();
    }
    _IsolateEvent.builtin$cls = "_IsolateEvent";
    if (!("name" in _IsolateEvent))
      _IsolateEvent.name = "_IsolateEvent";
    $desc = $collectedClasses$._IsolateEvent[1];
    _IsolateEvent.prototype = $desc;
    _IsolateEvent.$__fields__ = ["isolate", "fn", "message"];
    _IsolateEvent.prototype.get$isolate = function() {
      return this.isolate;
    };
    _IsolateEvent.prototype.get$message = function(receiver) {
      return this.message;
    };
    function _MainManagerStub() {
      this.$deferredAction();
    }
    _MainManagerStub.builtin$cls = "_MainManagerStub";
    if (!("name" in _MainManagerStub))
      _MainManagerStub.name = "_MainManagerStub";
    $desc = $collectedClasses$._MainManagerStub[1];
    _MainManagerStub.prototype = $desc;
    _MainManagerStub.$__fields__ = [];
    function IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo) {
      this.entryPoint = entryPoint;
      this.args = args;
      this.message = message;
      this.isSpawnUri = isSpawnUri;
      this.startPaused = startPaused;
      this.replyTo = replyTo;
      this.$deferredAction();
    }
    IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
    if (!("name" in IsolateNatives__processWorkerMessage_closure))
      IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
    $desc = $collectedClasses$.IsolateNatives__processWorkerMessage_closure[1];
    IsolateNatives__processWorkerMessage_closure.prototype = $desc;
    IsolateNatives__processWorkerMessage_closure.$__fields__ = ["entryPoint", "args", "message", "isSpawnUri", "startPaused", "replyTo"];
    function IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context) {
      this.topLevel = topLevel;
      this.args = args;
      this.message = message;
      this.isSpawnUri = isSpawnUri;
      this.context = context;
      this.$deferredAction();
    }
    IsolateNatives__startIsolate_runStartFunction.builtin$cls = "IsolateNatives__startIsolate_runStartFunction";
    if (!("name" in IsolateNatives__startIsolate_runStartFunction))
      IsolateNatives__startIsolate_runStartFunction.name = "IsolateNatives__startIsolate_runStartFunction";
    $desc = $collectedClasses$.IsolateNatives__startIsolate_runStartFunction[1];
    IsolateNatives__startIsolate_runStartFunction.prototype = $desc;
    IsolateNatives__startIsolate_runStartFunction.$__fields__ = ["topLevel", "args", "message", "isSpawnUri", "context"];
    function _BaseSendPort() {
      this.$deferredAction();
    }
    _BaseSendPort.builtin$cls = "_BaseSendPort";
    if (!("name" in _BaseSendPort))
      _BaseSendPort.name = "_BaseSendPort";
    $desc = $collectedClasses$._BaseSendPort[1];
    _BaseSendPort.prototype = $desc;
    _BaseSendPort.$__fields__ = [];
    function _NativeJsSendPort(_receivePort, _isolateId) {
      this._receivePort = _receivePort;
      this._isolateId = _isolateId;
      this.$deferredAction();
    }
    _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
    if (!("name" in _NativeJsSendPort))
      _NativeJsSendPort.name = "_NativeJsSendPort";
    $desc = $collectedClasses$._NativeJsSendPort[1];
    _NativeJsSendPort.prototype = $desc;
    _NativeJsSendPort.$__fields__ = ["_receivePort", "_isolateId"];
    function _NativeJsSendPort_send_closure($this, msg) {
      this.$this = $this;
      this.msg = msg;
      this.$deferredAction();
    }
    _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
    if (!("name" in _NativeJsSendPort_send_closure))
      _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
    $desc = $collectedClasses$._NativeJsSendPort_send_closure[1];
    _NativeJsSendPort_send_closure.prototype = $desc;
    _NativeJsSendPort_send_closure.$__fields__ = ["$this", "msg"];
    function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
      this._workerId = _workerId;
      this._receivePortId = _receivePortId;
      this._isolateId = _isolateId;
      this.$deferredAction();
    }
    _WorkerSendPort.builtin$cls = "_WorkerSendPort";
    if (!("name" in _WorkerSendPort))
      _WorkerSendPort.name = "_WorkerSendPort";
    $desc = $collectedClasses$._WorkerSendPort[1];
    _WorkerSendPort.prototype = $desc;
    _WorkerSendPort.$__fields__ = ["_workerId", "_receivePortId", "_isolateId"];
    function RawReceivePortImpl(_id, _handler, _isClosed) {
      this._id = _id;
      this._handler = _handler;
      this._isClosed = _isClosed;
      this.$deferredAction();
    }
    RawReceivePortImpl.builtin$cls = "RawReceivePortImpl";
    if (!("name" in RawReceivePortImpl))
      RawReceivePortImpl.name = "RawReceivePortImpl";
    $desc = $collectedClasses$.RawReceivePortImpl[1];
    RawReceivePortImpl.prototype = $desc;
    RawReceivePortImpl.$__fields__ = ["_id", "_handler", "_isClosed"];
    RawReceivePortImpl.prototype.get$_id = function() {
      return this._id;
    };
    RawReceivePortImpl.prototype.get$_isClosed = function() {
      return this._isClosed;
    };
    function TimerImpl(_once, _inEventLoop, _handle) {
      this._once = _once;
      this._inEventLoop = _inEventLoop;
      this._handle = _handle;
      this.$deferredAction();
    }
    TimerImpl.builtin$cls = "TimerImpl";
    if (!("name" in TimerImpl))
      TimerImpl.name = "TimerImpl";
    $desc = $collectedClasses$.TimerImpl[1];
    TimerImpl.prototype = $desc;
    TimerImpl.$__fields__ = ["_once", "_inEventLoop", "_handle"];
    function TimerImpl_internalCallback($this, callback) {
      this.$this = $this;
      this.callback = callback;
      this.$deferredAction();
    }
    TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
    if (!("name" in TimerImpl_internalCallback))
      TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
    $desc = $collectedClasses$.TimerImpl_internalCallback[1];
    TimerImpl_internalCallback.prototype = $desc;
    TimerImpl_internalCallback.$__fields__ = ["$this", "callback"];
    function TimerImpl_internalCallback0($this, callback) {
      this.$this = $this;
      this.callback = callback;
      this.$deferredAction();
    }
    TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
    if (!("name" in TimerImpl_internalCallback0))
      TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
    $desc = $collectedClasses$.TimerImpl_internalCallback0[1];
    TimerImpl_internalCallback0.prototype = $desc;
    TimerImpl_internalCallback0.$__fields__ = ["$this", "callback"];
    function TimerImpl$periodic_closure($this, callback) {
      this.$this = $this;
      this.callback = callback;
      this.$deferredAction();
    }
    TimerImpl$periodic_closure.builtin$cls = "TimerImpl$periodic_closure";
    if (!("name" in TimerImpl$periodic_closure))
      TimerImpl$periodic_closure.name = "TimerImpl$periodic_closure";
    $desc = $collectedClasses$.TimerImpl$periodic_closure[1];
    TimerImpl$periodic_closure.prototype = $desc;
    TimerImpl$periodic_closure.$__fields__ = ["$this", "callback"];
    function CapabilityImpl(_id) {
      this._id = _id;
      this.$deferredAction();
    }
    CapabilityImpl.builtin$cls = "CapabilityImpl";
    if (!("name" in CapabilityImpl))
      CapabilityImpl.name = "CapabilityImpl";
    $desc = $collectedClasses$.CapabilityImpl[1];
    CapabilityImpl.prototype = $desc;
    CapabilityImpl.$__fields__ = ["_id"];
    CapabilityImpl.prototype.get$_id = function() {
      return this._id;
    };
    function _Serializer(_serializeSendPorts, serializedObjectIds) {
      this._serializeSendPorts = _serializeSendPorts;
      this.serializedObjectIds = serializedObjectIds;
      this.$deferredAction();
    }
    _Serializer.builtin$cls = "_Serializer";
    if (!("name" in _Serializer))
      _Serializer.name = "_Serializer";
    $desc = $collectedClasses$._Serializer[1];
    _Serializer.prototype = $desc;
    _Serializer.$__fields__ = ["_serializeSendPorts", "serializedObjectIds"];
    function _Deserializer(_adjustSendPorts, deserializedObjects) {
      this._adjustSendPorts = _adjustSendPorts;
      this.deserializedObjects = deserializedObjects;
      this.$deferredAction();
    }
    _Deserializer.builtin$cls = "_Deserializer";
    if (!("name" in _Deserializer))
      _Deserializer.name = "_Deserializer";
    $desc = $collectedClasses$._Deserializer[1];
    _Deserializer.prototype = $desc;
    _Deserializer.$__fields__ = ["_adjustSendPorts", "deserializedObjects"];
    function ConstantMapView(_collection$_map, $ti) {
      this._collection$_map = _collection$_map;
      this.$ti = $ti;
      this.$deferredAction();
    }
    ConstantMapView.builtin$cls = "ConstantMapView";
    if (!("name" in ConstantMapView))
      ConstantMapView.name = "ConstantMapView";
    $desc = $collectedClasses$.ConstantMapView[1];
    ConstantMapView.prototype = $desc;
    ConstantMapView.$__fields__ = ["_collection$_map"];
    function ConstantMap($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    ConstantMap.builtin$cls = "ConstantMap";
    if (!("name" in ConstantMap))
      ConstantMap.name = "ConstantMap";
    $desc = $collectedClasses$.ConstantMap[1];
    ConstantMap.prototype = $desc;
    ConstantMap.$__fields__ = [];
    function ConstantStringMap(_length, __js_helper$_jsObject, _keys, $ti) {
      this._length = _length;
      this.__js_helper$_jsObject = __js_helper$_jsObject;
      this._keys = _keys;
      this.$ti = $ti;
      this.$deferredAction();
    }
    ConstantStringMap.builtin$cls = "ConstantStringMap";
    if (!("name" in ConstantStringMap))
      ConstantStringMap.name = "ConstantStringMap";
    $desc = $collectedClasses$.ConstantStringMap[1];
    ConstantStringMap.prototype = $desc;
    ConstantStringMap.$__fields__ = ["_length", "__js_helper$_jsObject", "_keys"];
    function ConstantStringMap_values_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ConstantStringMap_values_closure.builtin$cls = "ConstantStringMap_values_closure";
    if (!("name" in ConstantStringMap_values_closure))
      ConstantStringMap_values_closure.name = "ConstantStringMap_values_closure";
    $desc = $collectedClasses$.ConstantStringMap_values_closure[1];
    ConstantStringMap_values_closure.prototype = $desc;
    ConstantStringMap_values_closure.$__fields__ = ["$this"];
    function _ConstantMapKeyIterable(_map, $ti) {
      this._map = _map;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _ConstantMapKeyIterable.builtin$cls = "_ConstantMapKeyIterable";
    if (!("name" in _ConstantMapKeyIterable))
      _ConstantMapKeyIterable.name = "_ConstantMapKeyIterable";
    $desc = $collectedClasses$._ConstantMapKeyIterable[1];
    _ConstantMapKeyIterable.prototype = $desc;
    _ConstantMapKeyIterable.$__fields__ = ["_map"];
    function GeneralConstantMap(_jsData, $ti) {
      this._jsData = _jsData;
      this.$ti = $ti;
      this.$deferredAction();
    }
    GeneralConstantMap.builtin$cls = "GeneralConstantMap";
    if (!("name" in GeneralConstantMap))
      GeneralConstantMap.name = "GeneralConstantMap";
    $desc = $collectedClasses$.GeneralConstantMap[1];
    GeneralConstantMap.prototype = $desc;
    GeneralConstantMap.$__fields__ = ["_jsData"];
    function JSInvocationMirror(__js_helper$_memberName, _internalName, _kind, _arguments, _namedArgumentNames, _namedIndices) {
      this.__js_helper$_memberName = __js_helper$_memberName;
      this._internalName = _internalName;
      this._kind = _kind;
      this._arguments = _arguments;
      this._namedArgumentNames = _namedArgumentNames;
      this._namedIndices = _namedIndices;
      this.$deferredAction();
    }
    JSInvocationMirror.builtin$cls = "JSInvocationMirror";
    if (!("name" in JSInvocationMirror))
      JSInvocationMirror.name = "JSInvocationMirror";
    $desc = $collectedClasses$.JSInvocationMirror[1];
    JSInvocationMirror.prototype = $desc;
    JSInvocationMirror.$__fields__ = ["__js_helper$_memberName", "_internalName", "_kind", "_arguments", "_namedArgumentNames", "_namedIndices"];
    function ReflectionInfo(jsFunction, data, isAccessor, requiredParameterCount, optionalParameterCount, areOptionalParametersNamed, functionType, cachedSortedIndices) {
      this.jsFunction = jsFunction;
      this.data = data;
      this.isAccessor = isAccessor;
      this.requiredParameterCount = requiredParameterCount;
      this.optionalParameterCount = optionalParameterCount;
      this.areOptionalParametersNamed = areOptionalParametersNamed;
      this.functionType = functionType;
      this.cachedSortedIndices = cachedSortedIndices;
      this.$deferredAction();
    }
    ReflectionInfo.builtin$cls = "ReflectionInfo";
    if (!("name" in ReflectionInfo))
      ReflectionInfo.name = "ReflectionInfo";
    $desc = $collectedClasses$.ReflectionInfo[1];
    ReflectionInfo.prototype = $desc;
    ReflectionInfo.$__fields__ = ["jsFunction", "data", "isAccessor", "requiredParameterCount", "optionalParameterCount", "areOptionalParametersNamed", "functionType", "cachedSortedIndices"];
    ReflectionInfo.prototype.get$data = function(receiver) {
      return this.data;
    };
    ReflectionInfo.prototype.get$requiredParameterCount = function() {
      return this.requiredParameterCount;
    };
    function Primitives_initTicker_closure(performance) {
      this.performance = performance;
      this.$deferredAction();
    }
    Primitives_initTicker_closure.builtin$cls = "Primitives_initTicker_closure";
    if (!("name" in Primitives_initTicker_closure))
      Primitives_initTicker_closure.name = "Primitives_initTicker_closure";
    $desc = $collectedClasses$.Primitives_initTicker_closure[1];
    Primitives_initTicker_closure.prototype = $desc;
    Primitives_initTicker_closure.$__fields__ = ["performance"];
    function Primitives_functionNoSuchMethod_closure(_box_0, $arguments, namedArgumentList) {
      this._box_0 = _box_0;
      this.$arguments = $arguments;
      this.namedArgumentList = namedArgumentList;
      this.$deferredAction();
    }
    Primitives_functionNoSuchMethod_closure.builtin$cls = "Primitives_functionNoSuchMethod_closure";
    if (!("name" in Primitives_functionNoSuchMethod_closure))
      Primitives_functionNoSuchMethod_closure.name = "Primitives_functionNoSuchMethod_closure";
    $desc = $collectedClasses$.Primitives_functionNoSuchMethod_closure[1];
    Primitives_functionNoSuchMethod_closure.prototype = $desc;
    Primitives_functionNoSuchMethod_closure.$__fields__ = ["_box_0", "$arguments", "namedArgumentList"];
    function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
      this._pattern = _pattern;
      this._arguments = _arguments;
      this._argumentsExpr = _argumentsExpr;
      this._expr = _expr;
      this._method = _method;
      this._receiver = _receiver;
      this.$deferredAction();
    }
    TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
    if (!("name" in TypeErrorDecoder))
      TypeErrorDecoder.name = "TypeErrorDecoder";
    $desc = $collectedClasses$.TypeErrorDecoder[1];
    TypeErrorDecoder.prototype = $desc;
    TypeErrorDecoder.$__fields__ = ["_pattern", "_arguments", "_argumentsExpr", "_expr", "_method", "_receiver"];
    function NullError(_message, _method) {
      this._message = _message;
      this._method = _method;
      this.$deferredAction();
    }
    NullError.builtin$cls = "NullError";
    if (!("name" in NullError))
      NullError.name = "NullError";
    $desc = $collectedClasses$.NullError[1];
    NullError.prototype = $desc;
    NullError.$__fields__ = ["_message", "_method"];
    function JsNoSuchMethodError(_message, _method, _receiver) {
      this._message = _message;
      this._method = _method;
      this._receiver = _receiver;
      this.$deferredAction();
    }
    JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
    if (!("name" in JsNoSuchMethodError))
      JsNoSuchMethodError.name = "JsNoSuchMethodError";
    $desc = $collectedClasses$.JsNoSuchMethodError[1];
    JsNoSuchMethodError.prototype = $desc;
    JsNoSuchMethodError.$__fields__ = ["_message", "_method", "_receiver"];
    function UnknownJsTypeError(_message) {
      this._message = _message;
      this.$deferredAction();
    }
    UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
    if (!("name" in UnknownJsTypeError))
      UnknownJsTypeError.name = "UnknownJsTypeError";
    $desc = $collectedClasses$.UnknownJsTypeError[1];
    UnknownJsTypeError.prototype = $desc;
    UnknownJsTypeError.$__fields__ = ["_message"];
    function ExceptionAndStackTrace(dartException, stackTrace) {
      this.dartException = dartException;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    ExceptionAndStackTrace.builtin$cls = "ExceptionAndStackTrace";
    if (!("name" in ExceptionAndStackTrace))
      ExceptionAndStackTrace.name = "ExceptionAndStackTrace";
    $desc = $collectedClasses$.ExceptionAndStackTrace[1];
    ExceptionAndStackTrace.prototype = $desc;
    ExceptionAndStackTrace.$__fields__ = ["dartException", "stackTrace"];
    ExceptionAndStackTrace.prototype.get$stackTrace = function() {
      return this.stackTrace;
    };
    function unwrapException_saveStackTrace(ex) {
      this.ex = ex;
      this.$deferredAction();
    }
    unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
    if (!("name" in unwrapException_saveStackTrace))
      unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
    $desc = $collectedClasses$.unwrapException_saveStackTrace[1];
    unwrapException_saveStackTrace.prototype = $desc;
    unwrapException_saveStackTrace.$__fields__ = ["ex"];
    function _StackTrace(_exception, _trace) {
      this._exception = _exception;
      this._trace = _trace;
      this.$deferredAction();
    }
    _StackTrace.builtin$cls = "_StackTrace";
    if (!("name" in _StackTrace))
      _StackTrace.name = "_StackTrace";
    $desc = $collectedClasses$._StackTrace[1];
    _StackTrace.prototype = $desc;
    _StackTrace.$__fields__ = ["_exception", "_trace"];
    function invokeClosure_closure(closure) {
      this.closure = closure;
      this.$deferredAction();
    }
    invokeClosure_closure.builtin$cls = "invokeClosure_closure";
    if (!("name" in invokeClosure_closure))
      invokeClosure_closure.name = "invokeClosure_closure";
    $desc = $collectedClasses$.invokeClosure_closure[1];
    invokeClosure_closure.prototype = $desc;
    invokeClosure_closure.$__fields__ = ["closure"];
    function invokeClosure_closure0(closure, arg1) {
      this.closure = closure;
      this.arg1 = arg1;
      this.$deferredAction();
    }
    invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
    if (!("name" in invokeClosure_closure0))
      invokeClosure_closure0.name = "invokeClosure_closure0";
    $desc = $collectedClasses$.invokeClosure_closure0[1];
    invokeClosure_closure0.prototype = $desc;
    invokeClosure_closure0.$__fields__ = ["closure", "arg1"];
    function invokeClosure_closure1(closure, arg1, arg2) {
      this.closure = closure;
      this.arg1 = arg1;
      this.arg2 = arg2;
      this.$deferredAction();
    }
    invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
    if (!("name" in invokeClosure_closure1))
      invokeClosure_closure1.name = "invokeClosure_closure1";
    $desc = $collectedClasses$.invokeClosure_closure1[1];
    invokeClosure_closure1.prototype = $desc;
    invokeClosure_closure1.$__fields__ = ["closure", "arg1", "arg2"];
    function invokeClosure_closure2(closure, arg1, arg2, arg3) {
      this.closure = closure;
      this.arg1 = arg1;
      this.arg2 = arg2;
      this.arg3 = arg3;
      this.$deferredAction();
    }
    invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
    if (!("name" in invokeClosure_closure2))
      invokeClosure_closure2.name = "invokeClosure_closure2";
    $desc = $collectedClasses$.invokeClosure_closure2[1];
    invokeClosure_closure2.prototype = $desc;
    invokeClosure_closure2.$__fields__ = ["closure", "arg1", "arg2", "arg3"];
    function invokeClosure_closure3(closure, arg1, arg2, arg3, arg4) {
      this.closure = closure;
      this.arg1 = arg1;
      this.arg2 = arg2;
      this.arg3 = arg3;
      this.arg4 = arg4;
      this.$deferredAction();
    }
    invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
    if (!("name" in invokeClosure_closure3))
      invokeClosure_closure3.name = "invokeClosure_closure3";
    $desc = $collectedClasses$.invokeClosure_closure3[1];
    invokeClosure_closure3.prototype = $desc;
    invokeClosure_closure3.$__fields__ = ["closure", "arg1", "arg2", "arg3", "arg4"];
    function Closure() {
      this.$deferredAction();
    }
    Closure.builtin$cls = "Closure";
    if (!("name" in Closure))
      Closure.name = "Closure";
    $desc = $collectedClasses$.Closure[1];
    Closure.prototype = $desc;
    Closure.$__fields__ = [];
    function TearOffClosure() {
      this.$deferredAction();
    }
    TearOffClosure.builtin$cls = "TearOffClosure";
    if (!("name" in TearOffClosure))
      TearOffClosure.name = "TearOffClosure";
    $desc = $collectedClasses$.TearOffClosure[1];
    TearOffClosure.prototype = $desc;
    TearOffClosure.$__fields__ = [];
    function StaticClosure() {
      this.$deferredAction();
    }
    StaticClosure.builtin$cls = "StaticClosure";
    if (!("name" in StaticClosure))
      StaticClosure.name = "StaticClosure";
    $desc = $collectedClasses$.StaticClosure[1];
    StaticClosure.prototype = $desc;
    StaticClosure.$__fields__ = [];
    function BoundClosure(_self, _target, _receiver, _name) {
      this._self = _self;
      this._target = _target;
      this._receiver = _receiver;
      this._name = _name;
      this.$deferredAction();
    }
    BoundClosure.builtin$cls = "BoundClosure";
    if (!("name" in BoundClosure))
      BoundClosure.name = "BoundClosure";
    $desc = $collectedClasses$.BoundClosure[1];
    BoundClosure.prototype = $desc;
    BoundClosure.$__fields__ = ["_self", "_target", "_receiver", "_name"];
    function CastErrorImplementation(message) {
      this.message = message;
      this.$deferredAction();
    }
    CastErrorImplementation.builtin$cls = "CastErrorImplementation";
    if (!("name" in CastErrorImplementation))
      CastErrorImplementation.name = "CastErrorImplementation";
    $desc = $collectedClasses$.CastErrorImplementation[1];
    CastErrorImplementation.prototype = $desc;
    CastErrorImplementation.$__fields__ = ["message"];
    CastErrorImplementation.prototype.get$message = function(receiver) {
      return this.message;
    };
    function RuntimeError(message) {
      this.message = message;
      this.$deferredAction();
    }
    RuntimeError.builtin$cls = "RuntimeError";
    if (!("name" in RuntimeError))
      RuntimeError.name = "RuntimeError";
    $desc = $collectedClasses$.RuntimeError[1];
    RuntimeError.prototype = $desc;
    RuntimeError.$__fields__ = ["message"];
    RuntimeError.prototype.get$message = function(receiver) {
      return this.message;
    };
    function RuntimeType() {
      this.$deferredAction();
    }
    RuntimeType.builtin$cls = "RuntimeType";
    if (!("name" in RuntimeType))
      RuntimeType.name = "RuntimeType";
    $desc = $collectedClasses$.RuntimeType[1];
    RuntimeType.prototype = $desc;
    RuntimeType.$__fields__ = [];
    function RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, namedParameters) {
      this.returnType = returnType;
      this.parameterTypes = parameterTypes;
      this.optionalParameterTypes = optionalParameterTypes;
      this.namedParameters = namedParameters;
      this.$deferredAction();
    }
    RuntimeFunctionType.builtin$cls = "RuntimeFunctionType";
    if (!("name" in RuntimeFunctionType))
      RuntimeFunctionType.name = "RuntimeFunctionType";
    $desc = $collectedClasses$.RuntimeFunctionType[1];
    RuntimeFunctionType.prototype = $desc;
    RuntimeFunctionType.$__fields__ = ["returnType", "parameterTypes", "optionalParameterTypes", "namedParameters"];
    RuntimeFunctionType.prototype.get$returnType = function() {
      return this.returnType;
    };
    function DynamicRuntimeType() {
      this.$deferredAction();
    }
    DynamicRuntimeType.builtin$cls = "DynamicRuntimeType";
    if (!("name" in DynamicRuntimeType))
      DynamicRuntimeType.name = "DynamicRuntimeType";
    $desc = $collectedClasses$.DynamicRuntimeType[1];
    DynamicRuntimeType.prototype = $desc;
    DynamicRuntimeType.$__fields__ = [];
    function RuntimeTypePlain(_jsConstructorName) {
      this._jsConstructorName = _jsConstructorName;
      this.$deferredAction();
    }
    RuntimeTypePlain.builtin$cls = "RuntimeTypePlain";
    if (!("name" in RuntimeTypePlain))
      RuntimeTypePlain.name = "RuntimeTypePlain";
    $desc = $collectedClasses$.RuntimeTypePlain[1];
    RuntimeTypePlain.prototype = $desc;
    RuntimeTypePlain.$__fields__ = ["_jsConstructorName"];
    function RuntimeTypeGeneric(_jsConstructorName, $arguments, rti) {
      this._jsConstructorName = _jsConstructorName;
      this.$arguments = $arguments;
      this.rti = rti;
      this.$deferredAction();
    }
    RuntimeTypeGeneric.builtin$cls = "RuntimeTypeGeneric";
    if (!("name" in RuntimeTypeGeneric))
      RuntimeTypeGeneric.name = "RuntimeTypeGeneric";
    $desc = $collectedClasses$.RuntimeTypeGeneric[1];
    RuntimeTypeGeneric.prototype = $desc;
    RuntimeTypeGeneric.$__fields__ = ["_jsConstructorName", "$arguments", "rti"];
    function TypeImpl(_typeName, _unmangledName) {
      this._typeName = _typeName;
      this._unmangledName = _unmangledName;
      this.$deferredAction();
    }
    TypeImpl.builtin$cls = "TypeImpl";
    if (!("name" in TypeImpl))
      TypeImpl.name = "TypeImpl";
    $desc = $collectedClasses$.TypeImpl[1];
    TypeImpl.prototype = $desc;
    TypeImpl.$__fields__ = ["_typeName", "_unmangledName"];
    function JsLinkedHashMap(_length, _strings, _nums, _rest, _first, _last, _modifications, $ti) {
      this._length = _length;
      this._strings = _strings;
      this._nums = _nums;
      this._rest = _rest;
      this._first = _first;
      this._last = _last;
      this._modifications = _modifications;
      this.$ti = $ti;
      this.$deferredAction();
    }
    JsLinkedHashMap.builtin$cls = "JsLinkedHashMap";
    if (!("name" in JsLinkedHashMap))
      JsLinkedHashMap.name = "JsLinkedHashMap";
    $desc = $collectedClasses$.JsLinkedHashMap[1];
    JsLinkedHashMap.prototype = $desc;
    JsLinkedHashMap.$__fields__ = ["_length", "_strings", "_nums", "_rest", "_first", "_last", "_modifications"];
    function JsLinkedHashMap_values_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    JsLinkedHashMap_values_closure.builtin$cls = "JsLinkedHashMap_values_closure";
    if (!("name" in JsLinkedHashMap_values_closure))
      JsLinkedHashMap_values_closure.name = "JsLinkedHashMap_values_closure";
    $desc = $collectedClasses$.JsLinkedHashMap_values_closure[1];
    JsLinkedHashMap_values_closure.prototype = $desc;
    JsLinkedHashMap_values_closure.$__fields__ = ["$this"];
    function JsLinkedHashMap_addAll_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    JsLinkedHashMap_addAll_closure.builtin$cls = "JsLinkedHashMap_addAll_closure";
    if (!("name" in JsLinkedHashMap_addAll_closure))
      JsLinkedHashMap_addAll_closure.name = "JsLinkedHashMap_addAll_closure";
    $desc = $collectedClasses$.JsLinkedHashMap_addAll_closure[1];
    JsLinkedHashMap_addAll_closure.prototype = $desc;
    JsLinkedHashMap_addAll_closure.$__fields__ = ["$this"];
    function LinkedHashMapCell(hashMapCellKey, hashMapCellValue, _next, _previous, $ti) {
      this.hashMapCellKey = hashMapCellKey;
      this.hashMapCellValue = hashMapCellValue;
      this._next = _next;
      this._previous = _previous;
      this.$ti = $ti;
      this.$deferredAction();
    }
    LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
    if (!("name" in LinkedHashMapCell))
      LinkedHashMapCell.name = "LinkedHashMapCell";
    $desc = $collectedClasses$.LinkedHashMapCell[1];
    LinkedHashMapCell.prototype = $desc;
    LinkedHashMapCell.$__fields__ = ["hashMapCellKey", "hashMapCellValue", "_next", "_previous"];
    LinkedHashMapCell.prototype.get$hashMapCellKey = function() {
      return this.hashMapCellKey;
    };
    LinkedHashMapCell.prototype.get$hashMapCellValue = function() {
      return this.hashMapCellValue;
    };
    LinkedHashMapCell.prototype.set$hashMapCellValue = function(v) {
      return this.hashMapCellValue = v;
    };
    LinkedHashMapCell.prototype.get$_next = function() {
      return this._next;
    };
    LinkedHashMapCell.prototype.get$_previous = function() {
      return this._previous;
    };
    function LinkedHashMapKeyIterable(_map, $ti) {
      this._map = _map;
      this.$ti = $ti;
      this.$deferredAction();
    }
    LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
    if (!("name" in LinkedHashMapKeyIterable))
      LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
    $desc = $collectedClasses$.LinkedHashMapKeyIterable[1];
    LinkedHashMapKeyIterable.prototype = $desc;
    LinkedHashMapKeyIterable.$__fields__ = ["_map"];
    function LinkedHashMapKeyIterator(_map, _modifications, _cell, __js_helper$_current, $ti) {
      this._map = _map;
      this._modifications = _modifications;
      this._cell = _cell;
      this.__js_helper$_current = __js_helper$_current;
      this.$ti = $ti;
      this.$deferredAction();
    }
    LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
    if (!("name" in LinkedHashMapKeyIterator))
      LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
    $desc = $collectedClasses$.LinkedHashMapKeyIterator[1];
    LinkedHashMapKeyIterator.prototype = $desc;
    LinkedHashMapKeyIterator.$__fields__ = ["_map", "_modifications", "_cell", "__js_helper$_current"];
    function initHooks_closure(getTag) {
      this.getTag = getTag;
      this.$deferredAction();
    }
    initHooks_closure.builtin$cls = "initHooks_closure";
    if (!("name" in initHooks_closure))
      initHooks_closure.name = "initHooks_closure";
    $desc = $collectedClasses$.initHooks_closure[1];
    initHooks_closure.prototype = $desc;
    initHooks_closure.$__fields__ = ["getTag"];
    function initHooks_closure0(getUnknownTag) {
      this.getUnknownTag = getUnknownTag;
      this.$deferredAction();
    }
    initHooks_closure0.builtin$cls = "initHooks_closure0";
    if (!("name" in initHooks_closure0))
      initHooks_closure0.name = "initHooks_closure0";
    $desc = $collectedClasses$.initHooks_closure0[1];
    initHooks_closure0.prototype = $desc;
    initHooks_closure0.$__fields__ = ["getUnknownTag"];
    function initHooks_closure1(prototypeForTag) {
      this.prototypeForTag = prototypeForTag;
      this.$deferredAction();
    }
    initHooks_closure1.builtin$cls = "initHooks_closure1";
    if (!("name" in initHooks_closure1))
      initHooks_closure1.name = "initHooks_closure1";
    $desc = $collectedClasses$.initHooks_closure1[1];
    initHooks_closure1.prototype = $desc;
    initHooks_closure1.$__fields__ = ["prototypeForTag"];
    function JSSyntaxRegExp(pattern, _nativeRegExp, _nativeGlobalRegExp, _nativeAnchoredRegExp) {
      this.pattern = pattern;
      this._nativeRegExp = _nativeRegExp;
      this._nativeGlobalRegExp = _nativeGlobalRegExp;
      this._nativeAnchoredRegExp = _nativeAnchoredRegExp;
      this.$deferredAction();
    }
    JSSyntaxRegExp.builtin$cls = "JSSyntaxRegExp";
    if (!("name" in JSSyntaxRegExp))
      JSSyntaxRegExp.name = "JSSyntaxRegExp";
    $desc = $collectedClasses$.JSSyntaxRegExp[1];
    JSSyntaxRegExp.prototype = $desc;
    JSSyntaxRegExp.$__fields__ = ["pattern", "_nativeRegExp", "_nativeGlobalRegExp", "_nativeAnchoredRegExp"];
    function _MatchImplementation(pattern, _match) {
      this.pattern = pattern;
      this._match = _match;
      this.$deferredAction();
    }
    _MatchImplementation.builtin$cls = "_MatchImplementation";
    if (!("name" in _MatchImplementation))
      _MatchImplementation.name = "_MatchImplementation";
    $desc = $collectedClasses$._MatchImplementation[1];
    _MatchImplementation.prototype = $desc;
    _MatchImplementation.$__fields__ = ["pattern", "_match"];
    _MatchImplementation.prototype.get$_match = function() {
      return this._match;
    };
    function _AllMatchesIterable(_re, _string, _start) {
      this._re = _re;
      this._string = _string;
      this._start = _start;
      this.$deferredAction();
    }
    _AllMatchesIterable.builtin$cls = "_AllMatchesIterable";
    if (!("name" in _AllMatchesIterable))
      _AllMatchesIterable.name = "_AllMatchesIterable";
    $desc = $collectedClasses$._AllMatchesIterable[1];
    _AllMatchesIterable.prototype = $desc;
    _AllMatchesIterable.$__fields__ = ["_re", "_string", "_start"];
    function _AllMatchesIterator(_regExp, _string, _nextIndex, __js_helper$_current) {
      this._regExp = _regExp;
      this._string = _string;
      this._nextIndex = _nextIndex;
      this.__js_helper$_current = __js_helper$_current;
      this.$deferredAction();
    }
    _AllMatchesIterator.builtin$cls = "_AllMatchesIterator";
    if (!("name" in _AllMatchesIterator))
      _AllMatchesIterator.name = "_AllMatchesIterator";
    $desc = $collectedClasses$._AllMatchesIterator[1];
    _AllMatchesIterator.prototype = $desc;
    _AllMatchesIterator.$__fields__ = ["_regExp", "_string", "_nextIndex", "__js_helper$_current"];
    function StringMatch(start, input, pattern) {
      this.start = start;
      this.input = input;
      this.pattern = pattern;
      this.$deferredAction();
    }
    StringMatch.builtin$cls = "StringMatch";
    if (!("name" in StringMatch))
      StringMatch.name = "StringMatch";
    $desc = $collectedClasses$.StringMatch[1];
    StringMatch.prototype = $desc;
    StringMatch.$__fields__ = ["start", "input", "pattern"];
    StringMatch.prototype.get$start = function(receiver) {
      return this.start;
    };
    function _StringAllMatchesIterable(_input, _pattern, __js_helper$_index) {
      this._input = _input;
      this._pattern = _pattern;
      this.__js_helper$_index = __js_helper$_index;
      this.$deferredAction();
    }
    _StringAllMatchesIterable.builtin$cls = "_StringAllMatchesIterable";
    if (!("name" in _StringAllMatchesIterable))
      _StringAllMatchesIterable.name = "_StringAllMatchesIterable";
    $desc = $collectedClasses$._StringAllMatchesIterable[1];
    _StringAllMatchesIterable.prototype = $desc;
    _StringAllMatchesIterable.$__fields__ = ["_input", "_pattern", "__js_helper$_index"];
    function _StringAllMatchesIterator(_input, _pattern, __js_helper$_index, __js_helper$_current) {
      this._input = _input;
      this._pattern = _pattern;
      this.__js_helper$_index = __js_helper$_index;
      this.__js_helper$_current = __js_helper$_current;
      this.$deferredAction();
    }
    _StringAllMatchesIterator.builtin$cls = "_StringAllMatchesIterator";
    if (!("name" in _StringAllMatchesIterator))
      _StringAllMatchesIterator.name = "_StringAllMatchesIterator";
    $desc = $collectedClasses$._StringAllMatchesIterator[1];
    _StringAllMatchesIterator.prototype = $desc;
    _StringAllMatchesIterator.$__fields__ = ["_input", "_pattern", "__js_helper$_index", "__js_helper$_current"];
    function NativeByteBuffer() {
      this.$deferredAction();
    }
    NativeByteBuffer.builtin$cls = "NativeByteBuffer";
    if (!("name" in NativeByteBuffer))
      NativeByteBuffer.name = "NativeByteBuffer";
    $desc = $collectedClasses$.NativeByteBuffer[1];
    NativeByteBuffer.prototype = $desc;
    NativeByteBuffer.$__fields__ = [];
    function NativeTypedData() {
      this.$deferredAction();
    }
    NativeTypedData.builtin$cls = "NativeTypedData";
    if (!("name" in NativeTypedData))
      NativeTypedData.name = "NativeTypedData";
    $desc = $collectedClasses$.NativeTypedData[1];
    NativeTypedData.prototype = $desc;
    NativeTypedData.$__fields__ = [];
    function NativeByteData() {
      this.$deferredAction();
    }
    NativeByteData.builtin$cls = "NativeByteData";
    if (!("name" in NativeByteData))
      NativeByteData.name = "NativeByteData";
    $desc = $collectedClasses$.NativeByteData[1];
    NativeByteData.prototype = $desc;
    NativeByteData.$__fields__ = [];
    function NativeTypedArray() {
      this.$deferredAction();
    }
    NativeTypedArray.builtin$cls = "NativeTypedArray";
    if (!("name" in NativeTypedArray))
      NativeTypedArray.name = "NativeTypedArray";
    $desc = $collectedClasses$.NativeTypedArray[1];
    NativeTypedArray.prototype = $desc;
    NativeTypedArray.$__fields__ = [];
    function NativeTypedArrayOfDouble() {
      this.$deferredAction();
    }
    NativeTypedArrayOfDouble.builtin$cls = "NativeTypedArrayOfDouble";
    if (!("name" in NativeTypedArrayOfDouble))
      NativeTypedArrayOfDouble.name = "NativeTypedArrayOfDouble";
    $desc = $collectedClasses$.NativeTypedArrayOfDouble[1];
    NativeTypedArrayOfDouble.prototype = $desc;
    NativeTypedArrayOfDouble.$__fields__ = [];
    function NativeTypedArray_ListMixin() {
      this.$deferredAction();
    }
    NativeTypedArray_ListMixin.builtin$cls = "NativeTypedArray_ListMixin";
    if (!("name" in NativeTypedArray_ListMixin))
      NativeTypedArray_ListMixin.name = "NativeTypedArray_ListMixin";
    $desc = $collectedClasses$.NativeTypedArray_ListMixin[1];
    NativeTypedArray_ListMixin.prototype = $desc;
    NativeTypedArray_ListMixin.$__fields__ = [];
    function NativeTypedArray_ListMixin_FixedLengthListMixin() {
      this.$deferredAction();
    }
    NativeTypedArray_ListMixin_FixedLengthListMixin.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin";
    if (!("name" in NativeTypedArray_ListMixin_FixedLengthListMixin))
      NativeTypedArray_ListMixin_FixedLengthListMixin.name = "NativeTypedArray_ListMixin_FixedLengthListMixin";
    $desc = $collectedClasses$.NativeTypedArray_ListMixin_FixedLengthListMixin[1];
    NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = $desc;
    NativeTypedArray_ListMixin_FixedLengthListMixin.$__fields__ = [];
    function NativeTypedArrayOfInt() {
      this.$deferredAction();
    }
    NativeTypedArrayOfInt.builtin$cls = "NativeTypedArrayOfInt";
    if (!("name" in NativeTypedArrayOfInt))
      NativeTypedArrayOfInt.name = "NativeTypedArrayOfInt";
    $desc = $collectedClasses$.NativeTypedArrayOfInt[1];
    NativeTypedArrayOfInt.prototype = $desc;
    NativeTypedArrayOfInt.$__fields__ = [];
    function NativeTypedArray_ListMixin0() {
      this.$deferredAction();
    }
    NativeTypedArray_ListMixin0.builtin$cls = "NativeTypedArray_ListMixin0";
    if (!("name" in NativeTypedArray_ListMixin0))
      NativeTypedArray_ListMixin0.name = "NativeTypedArray_ListMixin0";
    $desc = $collectedClasses$.NativeTypedArray_ListMixin0[1];
    NativeTypedArray_ListMixin0.prototype = $desc;
    NativeTypedArray_ListMixin0.$__fields__ = [];
    function NativeTypedArray_ListMixin_FixedLengthListMixin0() {
      this.$deferredAction();
    }
    NativeTypedArray_ListMixin_FixedLengthListMixin0.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
    if (!("name" in NativeTypedArray_ListMixin_FixedLengthListMixin0))
      NativeTypedArray_ListMixin_FixedLengthListMixin0.name = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
    $desc = $collectedClasses$.NativeTypedArray_ListMixin_FixedLengthListMixin0[1];
    NativeTypedArray_ListMixin_FixedLengthListMixin0.prototype = $desc;
    NativeTypedArray_ListMixin_FixedLengthListMixin0.$__fields__ = [];
    function NativeFloat32List() {
      this.$deferredAction();
    }
    NativeFloat32List.builtin$cls = "NativeFloat32List";
    if (!("name" in NativeFloat32List))
      NativeFloat32List.name = "NativeFloat32List";
    $desc = $collectedClasses$.NativeFloat32List[1];
    NativeFloat32List.prototype = $desc;
    NativeFloat32List.$__fields__ = [];
    function NativeFloat64List() {
      this.$deferredAction();
    }
    NativeFloat64List.builtin$cls = "NativeFloat64List";
    if (!("name" in NativeFloat64List))
      NativeFloat64List.name = "NativeFloat64List";
    $desc = $collectedClasses$.NativeFloat64List[1];
    NativeFloat64List.prototype = $desc;
    NativeFloat64List.$__fields__ = [];
    function NativeInt16List() {
      this.$deferredAction();
    }
    NativeInt16List.builtin$cls = "NativeInt16List";
    if (!("name" in NativeInt16List))
      NativeInt16List.name = "NativeInt16List";
    $desc = $collectedClasses$.NativeInt16List[1];
    NativeInt16List.prototype = $desc;
    NativeInt16List.$__fields__ = [];
    function NativeInt32List() {
      this.$deferredAction();
    }
    NativeInt32List.builtin$cls = "NativeInt32List";
    if (!("name" in NativeInt32List))
      NativeInt32List.name = "NativeInt32List";
    $desc = $collectedClasses$.NativeInt32List[1];
    NativeInt32List.prototype = $desc;
    NativeInt32List.$__fields__ = [];
    function NativeInt8List() {
      this.$deferredAction();
    }
    NativeInt8List.builtin$cls = "NativeInt8List";
    if (!("name" in NativeInt8List))
      NativeInt8List.name = "NativeInt8List";
    $desc = $collectedClasses$.NativeInt8List[1];
    NativeInt8List.prototype = $desc;
    NativeInt8List.$__fields__ = [];
    function NativeUint16List() {
      this.$deferredAction();
    }
    NativeUint16List.builtin$cls = "NativeUint16List";
    if (!("name" in NativeUint16List))
      NativeUint16List.name = "NativeUint16List";
    $desc = $collectedClasses$.NativeUint16List[1];
    NativeUint16List.prototype = $desc;
    NativeUint16List.$__fields__ = [];
    function NativeUint32List() {
      this.$deferredAction();
    }
    NativeUint32List.builtin$cls = "NativeUint32List";
    if (!("name" in NativeUint32List))
      NativeUint32List.name = "NativeUint32List";
    $desc = $collectedClasses$.NativeUint32List[1];
    NativeUint32List.prototype = $desc;
    NativeUint32List.$__fields__ = [];
    function NativeUint8ClampedList() {
      this.$deferredAction();
    }
    NativeUint8ClampedList.builtin$cls = "NativeUint8ClampedList";
    if (!("name" in NativeUint8ClampedList))
      NativeUint8ClampedList.name = "NativeUint8ClampedList";
    $desc = $collectedClasses$.NativeUint8ClampedList[1];
    NativeUint8ClampedList.prototype = $desc;
    NativeUint8ClampedList.$__fields__ = [];
    function NativeUint8List() {
      this.$deferredAction();
    }
    NativeUint8List.builtin$cls = "NativeUint8List";
    if (!("name" in NativeUint8List))
      NativeUint8List.name = "NativeUint8List";
    $desc = $collectedClasses$.NativeUint8List[1];
    NativeUint8List.prototype = $desc;
    NativeUint8List.$__fields__ = [];
    function _AsyncRun__initializeScheduleImmediate_internalCallback(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    _AsyncRun__initializeScheduleImmediate_internalCallback.builtin$cls = "_AsyncRun__initializeScheduleImmediate_internalCallback";
    if (!("name" in _AsyncRun__initializeScheduleImmediate_internalCallback))
      _AsyncRun__initializeScheduleImmediate_internalCallback.name = "_AsyncRun__initializeScheduleImmediate_internalCallback";
    $desc = $collectedClasses$._AsyncRun__initializeScheduleImmediate_internalCallback[1];
    _AsyncRun__initializeScheduleImmediate_internalCallback.prototype = $desc;
    _AsyncRun__initializeScheduleImmediate_internalCallback.$__fields__ = ["_box_0"];
    function _AsyncRun__initializeScheduleImmediate_closure(_box_0, div, span) {
      this._box_0 = _box_0;
      this.div = div;
      this.span = span;
      this.$deferredAction();
    }
    _AsyncRun__initializeScheduleImmediate_closure.builtin$cls = "_AsyncRun__initializeScheduleImmediate_closure";
    if (!("name" in _AsyncRun__initializeScheduleImmediate_closure))
      _AsyncRun__initializeScheduleImmediate_closure.name = "_AsyncRun__initializeScheduleImmediate_closure";
    $desc = $collectedClasses$._AsyncRun__initializeScheduleImmediate_closure[1];
    _AsyncRun__initializeScheduleImmediate_closure.prototype = $desc;
    _AsyncRun__initializeScheduleImmediate_closure.$__fields__ = ["_box_0", "div", "span"];
    function _AsyncRun__scheduleImmediateJsOverride_internalCallback(callback) {
      this.callback = callback;
      this.$deferredAction();
    }
    _AsyncRun__scheduleImmediateJsOverride_internalCallback.builtin$cls = "_AsyncRun__scheduleImmediateJsOverride_internalCallback";
    if (!("name" in _AsyncRun__scheduleImmediateJsOverride_internalCallback))
      _AsyncRun__scheduleImmediateJsOverride_internalCallback.name = "_AsyncRun__scheduleImmediateJsOverride_internalCallback";
    $desc = $collectedClasses$._AsyncRun__scheduleImmediateJsOverride_internalCallback[1];
    _AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = $desc;
    _AsyncRun__scheduleImmediateJsOverride_internalCallback.$__fields__ = ["callback"];
    function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback) {
      this.callback = callback;
      this.$deferredAction();
    }
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.builtin$cls = "_AsyncRun__scheduleImmediateWithSetImmediate_internalCallback";
    if (!("name" in _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback))
      _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.name = "_AsyncRun__scheduleImmediateWithSetImmediate_internalCallback";
    $desc = $collectedClasses$._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback[1];
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = $desc;
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.$__fields__ = ["callback"];
    function _awaitOnObject_closure(bodyFunction) {
      this.bodyFunction = bodyFunction;
      this.$deferredAction();
    }
    _awaitOnObject_closure.builtin$cls = "_awaitOnObject_closure";
    if (!("name" in _awaitOnObject_closure))
      _awaitOnObject_closure.name = "_awaitOnObject_closure";
    $desc = $collectedClasses$._awaitOnObject_closure[1];
    _awaitOnObject_closure.prototype = $desc;
    _awaitOnObject_closure.$__fields__ = ["bodyFunction"];
    function _awaitOnObject_closure0(bodyFunction) {
      this.bodyFunction = bodyFunction;
      this.$deferredAction();
    }
    _awaitOnObject_closure0.builtin$cls = "_awaitOnObject_closure0";
    if (!("name" in _awaitOnObject_closure0))
      _awaitOnObject_closure0.name = "_awaitOnObject_closure0";
    $desc = $collectedClasses$._awaitOnObject_closure0[1];
    _awaitOnObject_closure0.prototype = $desc;
    _awaitOnObject_closure0.$__fields__ = ["bodyFunction"];
    function _wrapJsFunctionForAsync_closure($protected) {
      this.$protected = $protected;
      this.$deferredAction();
    }
    _wrapJsFunctionForAsync_closure.builtin$cls = "_wrapJsFunctionForAsync_closure";
    if (!("name" in _wrapJsFunctionForAsync_closure))
      _wrapJsFunctionForAsync_closure.name = "_wrapJsFunctionForAsync_closure";
    $desc = $collectedClasses$._wrapJsFunctionForAsync_closure[1];
    _wrapJsFunctionForAsync_closure.prototype = $desc;
    _wrapJsFunctionForAsync_closure.$__fields__ = ["$protected"];
    function _IterationMarker(value, state) {
      this.value = value;
      this.state = state;
      this.$deferredAction();
    }
    _IterationMarker.builtin$cls = "_IterationMarker";
    if (!("name" in _IterationMarker))
      _IterationMarker.name = "_IterationMarker";
    $desc = $collectedClasses$._IterationMarker[1];
    _IterationMarker.prototype = $desc;
    _IterationMarker.$__fields__ = ["value", "state"];
    _IterationMarker.prototype.get$value = function(receiver) {
      return this.value;
    };
    function _SyncStarIterator(_body, _async$_current, _nestedIterator, _suspendedBodies) {
      this._body = _body;
      this._async$_current = _async$_current;
      this._nestedIterator = _nestedIterator;
      this._suspendedBodies = _suspendedBodies;
      this.$deferredAction();
    }
    _SyncStarIterator.builtin$cls = "_SyncStarIterator";
    if (!("name" in _SyncStarIterator))
      _SyncStarIterator.name = "_SyncStarIterator";
    $desc = $collectedClasses$._SyncStarIterator[1];
    _SyncStarIterator.prototype = $desc;
    _SyncStarIterator.$__fields__ = ["_body", "_async$_current", "_nestedIterator", "_suspendedBodies"];
    function _SyncStarIterable(_outerHelper) {
      this._outerHelper = _outerHelper;
      this.$deferredAction();
    }
    _SyncStarIterable.builtin$cls = "_SyncStarIterable";
    if (!("name" in _SyncStarIterable))
      _SyncStarIterable.name = "_SyncStarIterable";
    $desc = $collectedClasses$._SyncStarIterable[1];
    _SyncStarIterable.prototype = $desc;
    _SyncStarIterable.$__fields__ = ["_outerHelper"];
    function _BroadcastStream(_async$_controller, $ti) {
      this._async$_controller = _async$_controller;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _BroadcastStream.builtin$cls = "_BroadcastStream";
    if (!("name" in _BroadcastStream))
      _BroadcastStream.name = "_BroadcastStream";
    $desc = $collectedClasses$._BroadcastStream[1];
    _BroadcastStream.prototype = $desc;
    _BroadcastStream.$__fields__ = ["_async$_controller"];
    function _BroadcastSubscription(_eventState, _async$_next, _async$_previous, _async$_controller, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending, $ti) {
      this._eventState = _eventState;
      this._async$_next = _async$_next;
      this._async$_previous = _async$_previous;
      this._async$_controller = _async$_controller;
      this._onData = _onData;
      this._onError = _onError;
      this._onDone = _onDone;
      this._zone = _zone;
      this._state = _state;
      this._cancelFuture = _cancelFuture;
      this._pending = _pending;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _BroadcastSubscription.builtin$cls = "_BroadcastSubscription";
    if (!("name" in _BroadcastSubscription))
      _BroadcastSubscription.name = "_BroadcastSubscription";
    $desc = $collectedClasses$._BroadcastSubscription[1];
    _BroadcastSubscription.prototype = $desc;
    _BroadcastSubscription.$__fields__ = ["_eventState", "_async$_next", "_async$_previous", "_async$_controller", "_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
    _BroadcastSubscription.prototype.get$_eventState = function() {
      return this._eventState;
    };
    _BroadcastSubscription.prototype.set$_eventState = function(v) {
      return this._eventState = v;
    };
    _BroadcastSubscription.prototype.get$_async$_next = function() {
      return this._async$_next;
    };
    _BroadcastSubscription.prototype.set$_async$_next = function(v) {
      return this._async$_next = v;
    };
    _BroadcastSubscription.prototype.get$_async$_previous = function() {
      return this._async$_previous;
    };
    _BroadcastSubscription.prototype.set$_async$_previous = function(v) {
      return this._async$_previous = v;
    };
    function _BroadcastStreamController(_state, $ti) {
      this._state = _state;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _BroadcastStreamController.builtin$cls = "_BroadcastStreamController";
    if (!("name" in _BroadcastStreamController))
      _BroadcastStreamController.name = "_BroadcastStreamController";
    $desc = $collectedClasses$._BroadcastStreamController[1];
    _BroadcastStreamController.prototype = $desc;
    _BroadcastStreamController.$__fields__ = ["_state"];
    _BroadcastStreamController.prototype.get$_state = function() {
      return this._state;
    };
    function _SyncBroadcastStreamController(onListen, onCancel, _state, _firstSubscription, _lastSubscription, _addStreamState, _doneFuture, $ti) {
      this.onListen = onListen;
      this.onCancel = onCancel;
      this._state = _state;
      this._firstSubscription = _firstSubscription;
      this._lastSubscription = _lastSubscription;
      this._addStreamState = _addStreamState;
      this._doneFuture = _doneFuture;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _SyncBroadcastStreamController.builtin$cls = "_SyncBroadcastStreamController";
    if (!("name" in _SyncBroadcastStreamController))
      _SyncBroadcastStreamController.name = "_SyncBroadcastStreamController";
    $desc = $collectedClasses$._SyncBroadcastStreamController[1];
    _SyncBroadcastStreamController.prototype = $desc;
    _SyncBroadcastStreamController.$__fields__ = ["onListen", "onCancel", "_state", "_firstSubscription", "_lastSubscription", "_addStreamState", "_doneFuture"];
    function _SyncBroadcastStreamController__sendData_closure($this, data) {
      this.$this = $this;
      this.data = data;
      this.$deferredAction();
    }
    _SyncBroadcastStreamController__sendData_closure.builtin$cls = "_SyncBroadcastStreamController__sendData_closure";
    if (!("name" in _SyncBroadcastStreamController__sendData_closure))
      _SyncBroadcastStreamController__sendData_closure.name = "_SyncBroadcastStreamController__sendData_closure";
    $desc = $collectedClasses$._SyncBroadcastStreamController__sendData_closure[1];
    _SyncBroadcastStreamController__sendData_closure.prototype = $desc;
    _SyncBroadcastStreamController__sendData_closure.$__fields__ = ["$this", "data"];
    function _SyncBroadcastStreamController__sendError_closure($this, error, stackTrace) {
      this.$this = $this;
      this.error = error;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    _SyncBroadcastStreamController__sendError_closure.builtin$cls = "_SyncBroadcastStreamController__sendError_closure";
    if (!("name" in _SyncBroadcastStreamController__sendError_closure))
      _SyncBroadcastStreamController__sendError_closure.name = "_SyncBroadcastStreamController__sendError_closure";
    $desc = $collectedClasses$._SyncBroadcastStreamController__sendError_closure[1];
    _SyncBroadcastStreamController__sendError_closure.prototype = $desc;
    _SyncBroadcastStreamController__sendError_closure.$__fields__ = ["$this", "error", "stackTrace"];
    function _SyncBroadcastStreamController__sendDone_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _SyncBroadcastStreamController__sendDone_closure.builtin$cls = "_SyncBroadcastStreamController__sendDone_closure";
    if (!("name" in _SyncBroadcastStreamController__sendDone_closure))
      _SyncBroadcastStreamController__sendDone_closure.name = "_SyncBroadcastStreamController__sendDone_closure";
    $desc = $collectedClasses$._SyncBroadcastStreamController__sendDone_closure[1];
    _SyncBroadcastStreamController__sendDone_closure.prototype = $desc;
    _SyncBroadcastStreamController__sendDone_closure.$__fields__ = ["$this"];
    function _AsyncBroadcastStreamController(onListen, onCancel, _state, _firstSubscription, _lastSubscription, _addStreamState, _doneFuture, $ti) {
      this.onListen = onListen;
      this.onCancel = onCancel;
      this._state = _state;
      this._firstSubscription = _firstSubscription;
      this._lastSubscription = _lastSubscription;
      this._addStreamState = _addStreamState;
      this._doneFuture = _doneFuture;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _AsyncBroadcastStreamController.builtin$cls = "_AsyncBroadcastStreamController";
    if (!("name" in _AsyncBroadcastStreamController))
      _AsyncBroadcastStreamController.name = "_AsyncBroadcastStreamController";
    $desc = $collectedClasses$._AsyncBroadcastStreamController[1];
    _AsyncBroadcastStreamController.prototype = $desc;
    _AsyncBroadcastStreamController.$__fields__ = ["onListen", "onCancel", "_state", "_firstSubscription", "_lastSubscription", "_addStreamState", "_doneFuture"];
    function Future($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    Future.builtin$cls = "Future";
    if (!("name" in Future))
      Future.name = "Future";
    $desc = $collectedClasses$.Future[1];
    Future.prototype = $desc;
    Future.$__fields__ = [];
    function closure0(computation, result) {
      this.computation = computation;
      this.result = result;
      this.$deferredAction();
    }
    closure0.builtin$cls = "closure0";
    if (!("name" in closure0))
      closure0.name = "closure0";
    $desc = $collectedClasses$.closure0[1];
    closure0.prototype = $desc;
    closure0.$__fields__ = ["computation", "result"];
    function Future_wait_handleError(_box_0, eagerError, cleanUp, result) {
      this._box_0 = _box_0;
      this.eagerError = eagerError;
      this.cleanUp = cleanUp;
      this.result = result;
      this.$deferredAction();
    }
    Future_wait_handleError.builtin$cls = "Future_wait_handleError";
    if (!("name" in Future_wait_handleError))
      Future_wait_handleError.name = "Future_wait_handleError";
    $desc = $collectedClasses$.Future_wait_handleError[1];
    Future_wait_handleError.prototype = $desc;
    Future_wait_handleError.$__fields__ = ["_box_0", "eagerError", "cleanUp", "result"];
    function Future_wait_closure(_box_0, eagerError, cleanUp, result, pos) {
      this._box_0 = _box_0;
      this.eagerError = eagerError;
      this.cleanUp = cleanUp;
      this.result = result;
      this.pos = pos;
      this.$deferredAction();
    }
    Future_wait_closure.builtin$cls = "Future_wait_closure";
    if (!("name" in Future_wait_closure))
      Future_wait_closure.name = "Future_wait_closure";
    $desc = $collectedClasses$.Future_wait_closure[1];
    Future_wait_closure.prototype = $desc;
    Future_wait_closure.$__fields__ = ["_box_0", "eagerError", "cleanUp", "result", "pos"];
    function Future_forEach_closure(f, iterator) {
      this.f = f;
      this.iterator = iterator;
      this.$deferredAction();
    }
    Future_forEach_closure.builtin$cls = "Future_forEach_closure";
    if (!("name" in Future_forEach_closure))
      Future_forEach_closure.name = "Future_forEach_closure";
    $desc = $collectedClasses$.Future_forEach_closure[1];
    Future_forEach_closure.prototype = $desc;
    Future_forEach_closure.$__fields__ = ["f", "iterator"];
    function Future_forEach__closure(f, iterator) {
      this.f = f;
      this.iterator = iterator;
      this.$deferredAction();
    }
    Future_forEach__closure.builtin$cls = "Future_forEach__closure";
    if (!("name" in Future_forEach__closure))
      Future_forEach__closure.name = "Future_forEach__closure";
    $desc = $collectedClasses$.Future_forEach__closure[1];
    Future_forEach__closure.prototype = $desc;
    Future_forEach__closure.$__fields__ = ["f", "iterator"];
    function Future_forEach__closure0() {
      this.$deferredAction();
    }
    Future_forEach__closure0.builtin$cls = "Future_forEach__closure0";
    if (!("name" in Future_forEach__closure0))
      Future_forEach__closure0.name = "Future_forEach__closure0";
    $desc = $collectedClasses$.Future_forEach__closure0[1];
    Future_forEach__closure0.prototype = $desc;
    Future_forEach__closure0.$__fields__ = [];
    function Future_doWhile_closure(_box_0, f, doneSignal) {
      this._box_0 = _box_0;
      this.f = f;
      this.doneSignal = doneSignal;
      this.$deferredAction();
    }
    Future_doWhile_closure.builtin$cls = "Future_doWhile_closure";
    if (!("name" in Future_doWhile_closure))
      Future_doWhile_closure.name = "Future_doWhile_closure";
    $desc = $collectedClasses$.Future_doWhile_closure[1];
    Future_doWhile_closure.prototype = $desc;
    Future_doWhile_closure.$__fields__ = ["_box_0", "f", "doneSignal"];
    function TimeoutException(message, duration) {
      this.message = message;
      this.duration = duration;
      this.$deferredAction();
    }
    TimeoutException.builtin$cls = "TimeoutException";
    if (!("name" in TimeoutException))
      TimeoutException.name = "TimeoutException";
    $desc = $collectedClasses$.TimeoutException[1];
    TimeoutException.prototype = $desc;
    TimeoutException.$__fields__ = ["message", "duration"];
    TimeoutException.prototype.get$message = function(receiver) {
      return this.message;
    };
    function _Completer(future, $ti) {
      this.future = future;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _Completer.builtin$cls = "_Completer";
    if (!("name" in _Completer))
      _Completer.name = "_Completer";
    $desc = $collectedClasses$._Completer[1];
    _Completer.prototype = $desc;
    _Completer.$__fields__ = ["future"];
    _Completer.prototype.get$future = function() {
      return this.future;
    };
    function _AsyncCompleter(future, $ti) {
      this.future = future;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _AsyncCompleter.builtin$cls = "_AsyncCompleter";
    if (!("name" in _AsyncCompleter))
      _AsyncCompleter.name = "_AsyncCompleter";
    $desc = $collectedClasses$._AsyncCompleter[1];
    _AsyncCompleter.prototype = $desc;
    _AsyncCompleter.$__fields__ = ["future"];
    function _SyncCompleter(future, $ti) {
      this.future = future;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _SyncCompleter.builtin$cls = "_SyncCompleter";
    if (!("name" in _SyncCompleter))
      _SyncCompleter.name = "_SyncCompleter";
    $desc = $collectedClasses$._SyncCompleter[1];
    _SyncCompleter.prototype = $desc;
    _SyncCompleter.$__fields__ = ["future"];
    function _FutureListener(_nextListener, result, state, callback, errorCallback, $ti) {
      this._nextListener = _nextListener;
      this.result = result;
      this.state = state;
      this.callback = callback;
      this.errorCallback = errorCallback;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _FutureListener.builtin$cls = "_FutureListener";
    if (!("name" in _FutureListener))
      _FutureListener.name = "_FutureListener";
    $desc = $collectedClasses$._FutureListener[1];
    _FutureListener.prototype = $desc;
    _FutureListener.$__fields__ = ["_nextListener", "result", "state", "callback", "errorCallback"];
    _FutureListener.prototype.get$_nextListener = function() {
      return this._nextListener;
    };
    _FutureListener.prototype.set$_nextListener = function(v) {
      return this._nextListener = v;
    };
    _FutureListener.prototype.get$result = function(receiver) {
      return this.result;
    };
    _FutureListener.prototype.get$callback = function() {
      return this.callback;
    };
    function _Future(_state, _zone, _resultOrListeners, $ti) {
      this._state = _state;
      this._zone = _zone;
      this._resultOrListeners = _resultOrListeners;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _Future.builtin$cls = "_Future";
    if (!("name" in _Future))
      _Future.name = "_Future";
    $desc = $collectedClasses$._Future[1];
    _Future.prototype = $desc;
    _Future.$__fields__ = ["_state", "_zone", "_resultOrListeners"];
    _Future.prototype.get$_state = function() {
      return this._state;
    };
    _Future.prototype.get$_zone = function() {
      return this._zone;
    };
    _Future.prototype.get$_resultOrListeners = function() {
      return this._resultOrListeners;
    };
    function _Future__addListener_closure($this, listener) {
      this.$this = $this;
      this.listener = listener;
      this.$deferredAction();
    }
    _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
    if (!("name" in _Future__addListener_closure))
      _Future__addListener_closure.name = "_Future__addListener_closure";
    $desc = $collectedClasses$._Future__addListener_closure[1];
    _Future__addListener_closure.prototype = $desc;
    _Future__addListener_closure.$__fields__ = ["$this", "listener"];
    function _Future__prependListeners_closure(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    _Future__prependListeners_closure.builtin$cls = "_Future__prependListeners_closure";
    if (!("name" in _Future__prependListeners_closure))
      _Future__prependListeners_closure.name = "_Future__prependListeners_closure";
    $desc = $collectedClasses$._Future__prependListeners_closure[1];
    _Future__prependListeners_closure.prototype = $desc;
    _Future__prependListeners_closure.$__fields__ = ["_box_0", "$this"];
    function _Future__chainForeignFuture_closure(target) {
      this.target = target;
      this.$deferredAction();
    }
    _Future__chainForeignFuture_closure.builtin$cls = "_Future__chainForeignFuture_closure";
    if (!("name" in _Future__chainForeignFuture_closure))
      _Future__chainForeignFuture_closure.name = "_Future__chainForeignFuture_closure";
    $desc = $collectedClasses$._Future__chainForeignFuture_closure[1];
    _Future__chainForeignFuture_closure.prototype = $desc;
    _Future__chainForeignFuture_closure.$__fields__ = ["target"];
    function _Future__chainForeignFuture_closure0(target) {
      this.target = target;
      this.$deferredAction();
    }
    _Future__chainForeignFuture_closure0.builtin$cls = "_Future__chainForeignFuture_closure0";
    if (!("name" in _Future__chainForeignFuture_closure0))
      _Future__chainForeignFuture_closure0.name = "_Future__chainForeignFuture_closure0";
    $desc = $collectedClasses$._Future__chainForeignFuture_closure0[1];
    _Future__chainForeignFuture_closure0.prototype = $desc;
    _Future__chainForeignFuture_closure0.$__fields__ = ["target"];
    function _Future__chainForeignFuture_closure1(target, e, s) {
      this.target = target;
      this.e = e;
      this.s = s;
      this.$deferredAction();
    }
    _Future__chainForeignFuture_closure1.builtin$cls = "_Future__chainForeignFuture_closure1";
    if (!("name" in _Future__chainForeignFuture_closure1))
      _Future__chainForeignFuture_closure1.name = "_Future__chainForeignFuture_closure1";
    $desc = $collectedClasses$._Future__chainForeignFuture_closure1[1];
    _Future__chainForeignFuture_closure1.prototype = $desc;
    _Future__chainForeignFuture_closure1.$__fields__ = ["target", "e", "s"];
    function _Future__asyncComplete_closure($this, coreFuture) {
      this.$this = $this;
      this.coreFuture = coreFuture;
      this.$deferredAction();
    }
    _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
    if (!("name" in _Future__asyncComplete_closure))
      _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
    $desc = $collectedClasses$._Future__asyncComplete_closure[1];
    _Future__asyncComplete_closure.prototype = $desc;
    _Future__asyncComplete_closure.$__fields__ = ["$this", "coreFuture"];
    function _Future__asyncComplete_closure0($this, typedValue) {
      this.$this = $this;
      this.typedValue = typedValue;
      this.$deferredAction();
    }
    _Future__asyncComplete_closure0.builtin$cls = "_Future__asyncComplete_closure0";
    if (!("name" in _Future__asyncComplete_closure0))
      _Future__asyncComplete_closure0.name = "_Future__asyncComplete_closure0";
    $desc = $collectedClasses$._Future__asyncComplete_closure0[1];
    _Future__asyncComplete_closure0.prototype = $desc;
    _Future__asyncComplete_closure0.$__fields__ = ["$this", "typedValue"];
    function _Future__asyncCompleteError_closure($this, error, stackTrace) {
      this.$this = $this;
      this.error = error;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
    if (!("name" in _Future__asyncCompleteError_closure))
      _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
    $desc = $collectedClasses$._Future__asyncCompleteError_closure[1];
    _Future__asyncCompleteError_closure.prototype = $desc;
    _Future__asyncCompleteError_closure.$__fields__ = ["$this", "error", "stackTrace"];
    function _Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, hasError, listener) {
      this._box_1 = _box_1;
      this._box_0 = _box_0;
      this.hasError = hasError;
      this.listener = listener;
      this.$deferredAction();
    }
    _Future__propagateToListeners_handleWhenCompleteCallback.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback";
    if (!("name" in _Future__propagateToListeners_handleWhenCompleteCallback))
      _Future__propagateToListeners_handleWhenCompleteCallback.name = "_Future__propagateToListeners_handleWhenCompleteCallback";
    $desc = $collectedClasses$._Future__propagateToListeners_handleWhenCompleteCallback[1];
    _Future__propagateToListeners_handleWhenCompleteCallback.prototype = $desc;
    _Future__propagateToListeners_handleWhenCompleteCallback.$__fields__ = ["_box_1", "_box_0", "hasError", "listener"];
    function _Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource) {
      this.originalSource = originalSource;
      this.$deferredAction();
    }
    _Future__propagateToListeners_handleWhenCompleteCallback_closure.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
    if (!("name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure))
      _Future__propagateToListeners_handleWhenCompleteCallback_closure.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
    $desc = $collectedClasses$._Future__propagateToListeners_handleWhenCompleteCallback_closure[1];
    _Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = $desc;
    _Future__propagateToListeners_handleWhenCompleteCallback_closure.$__fields__ = ["originalSource"];
    function _Future__propagateToListeners_handleValueCallback(_box_0, listener, sourceResult) {
      this._box_0 = _box_0;
      this.listener = listener;
      this.sourceResult = sourceResult;
      this.$deferredAction();
    }
    _Future__propagateToListeners_handleValueCallback.builtin$cls = "_Future__propagateToListeners_handleValueCallback";
    if (!("name" in _Future__propagateToListeners_handleValueCallback))
      _Future__propagateToListeners_handleValueCallback.name = "_Future__propagateToListeners_handleValueCallback";
    $desc = $collectedClasses$._Future__propagateToListeners_handleValueCallback[1];
    _Future__propagateToListeners_handleValueCallback.prototype = $desc;
    _Future__propagateToListeners_handleValueCallback.$__fields__ = ["_box_0", "listener", "sourceResult"];
    function _Future__propagateToListeners_handleError(_box_1, _box_0, listener) {
      this._box_1 = _box_1;
      this._box_0 = _box_0;
      this.listener = listener;
      this.$deferredAction();
    }
    _Future__propagateToListeners_handleError.builtin$cls = "_Future__propagateToListeners_handleError";
    if (!("name" in _Future__propagateToListeners_handleError))
      _Future__propagateToListeners_handleError.name = "_Future__propagateToListeners_handleError";
    $desc = $collectedClasses$._Future__propagateToListeners_handleError[1];
    _Future__propagateToListeners_handleError.prototype = $desc;
    _Future__propagateToListeners_handleError.$__fields__ = ["_box_1", "_box_0", "listener"];
    function _Future_timeout_closure(_box_0, result, zone) {
      this._box_0 = _box_0;
      this.result = result;
      this.zone = zone;
      this.$deferredAction();
    }
    _Future_timeout_closure.builtin$cls = "_Future_timeout_closure";
    if (!("name" in _Future_timeout_closure))
      _Future_timeout_closure.name = "_Future_timeout_closure";
    $desc = $collectedClasses$._Future_timeout_closure[1];
    _Future_timeout_closure.prototype = $desc;
    _Future_timeout_closure.$__fields__ = ["_box_0", "result", "zone"];
    function _Future_timeout_closure0(_box_0, $this, result) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.result = result;
      this.$deferredAction();
    }
    _Future_timeout_closure0.builtin$cls = "_Future_timeout_closure0";
    if (!("name" in _Future_timeout_closure0))
      _Future_timeout_closure0.name = "_Future_timeout_closure0";
    $desc = $collectedClasses$._Future_timeout_closure0[1];
    _Future_timeout_closure0.prototype = $desc;
    _Future_timeout_closure0.$__fields__ = ["_box_0", "$this", "result"];
    function _Future_timeout_closure1(_box_0, result) {
      this._box_0 = _box_0;
      this.result = result;
      this.$deferredAction();
    }
    _Future_timeout_closure1.builtin$cls = "_Future_timeout_closure1";
    if (!("name" in _Future_timeout_closure1))
      _Future_timeout_closure1.name = "_Future_timeout_closure1";
    $desc = $collectedClasses$._Future_timeout_closure1[1];
    _Future_timeout_closure1.prototype = $desc;
    _Future_timeout_closure1.$__fields__ = ["_box_0", "result"];
    function _AsyncCallbackEntry(callback, next) {
      this.callback = callback;
      this.next = next;
      this.$deferredAction();
    }
    _AsyncCallbackEntry.builtin$cls = "_AsyncCallbackEntry";
    if (!("name" in _AsyncCallbackEntry))
      _AsyncCallbackEntry.name = "_AsyncCallbackEntry";
    $desc = $collectedClasses$._AsyncCallbackEntry[1];
    _AsyncCallbackEntry.prototype = $desc;
    _AsyncCallbackEntry.$__fields__ = ["callback", "next"];
    _AsyncCallbackEntry.prototype.get$callback = function() {
      return this.callback;
    };
    _AsyncCallbackEntry.prototype.get$next = function(receiver) {
      return this.next;
    };
    _AsyncCallbackEntry.prototype.set$next = function(receiver, v) {
      return this.next = v;
    };
    function Stream($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    Stream.builtin$cls = "Stream";
    if (!("name" in Stream))
      Stream.name = "Stream";
    $desc = $collectedClasses$.Stream[1];
    Stream.prototype = $desc;
    Stream.$__fields__ = [];
    function Stream_reduce_closure(_box_0, $this, combine, result) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.combine = combine;
      this.result = result;
      this.$deferredAction();
    }
    Stream_reduce_closure.builtin$cls = "Stream_reduce_closure";
    if (!("name" in Stream_reduce_closure))
      Stream_reduce_closure.name = "Stream_reduce_closure";
    $desc = $collectedClasses$.Stream_reduce_closure[1];
    Stream_reduce_closure.prototype = $desc;
    Stream_reduce_closure.$__fields__ = ["_box_0", "$this", "combine", "result"];
    function Stream_reduce__closure(_box_0, combine, element) {
      this._box_0 = _box_0;
      this.combine = combine;
      this.element = element;
      this.$deferredAction();
    }
    Stream_reduce__closure.builtin$cls = "Stream_reduce__closure";
    if (!("name" in Stream_reduce__closure))
      Stream_reduce__closure.name = "Stream_reduce__closure";
    $desc = $collectedClasses$.Stream_reduce__closure[1];
    Stream_reduce__closure.prototype = $desc;
    Stream_reduce__closure.$__fields__ = ["_box_0", "combine", "element"];
    function Stream_reduce__closure0(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    Stream_reduce__closure0.builtin$cls = "Stream_reduce__closure0";
    if (!("name" in Stream_reduce__closure0))
      Stream_reduce__closure0.name = "Stream_reduce__closure0";
    $desc = $collectedClasses$.Stream_reduce__closure0[1];
    Stream_reduce__closure0.prototype = $desc;
    Stream_reduce__closure0.$__fields__ = ["_box_0", "$this"];
    function Stream_reduce_closure0(_box_0, result) {
      this._box_0 = _box_0;
      this.result = result;
      this.$deferredAction();
    }
    Stream_reduce_closure0.builtin$cls = "Stream_reduce_closure0";
    if (!("name" in Stream_reduce_closure0))
      Stream_reduce_closure0.name = "Stream_reduce_closure0";
    $desc = $collectedClasses$.Stream_reduce_closure0[1];
    Stream_reduce_closure0.prototype = $desc;
    Stream_reduce_closure0.$__fields__ = ["_box_0", "result"];
    function Stream_contains_closure(_box_0, $this, needle, future) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.needle = needle;
      this.future = future;
      this.$deferredAction();
    }
    Stream_contains_closure.builtin$cls = "Stream_contains_closure";
    if (!("name" in Stream_contains_closure))
      Stream_contains_closure.name = "Stream_contains_closure";
    $desc = $collectedClasses$.Stream_contains_closure[1];
    Stream_contains_closure.prototype = $desc;
    Stream_contains_closure.$__fields__ = ["_box_0", "$this", "needle", "future"];
    function Stream_contains__closure(needle, element) {
      this.needle = needle;
      this.element = element;
      this.$deferredAction();
    }
    Stream_contains__closure.builtin$cls = "Stream_contains__closure";
    if (!("name" in Stream_contains__closure))
      Stream_contains__closure.name = "Stream_contains__closure";
    $desc = $collectedClasses$.Stream_contains__closure[1];
    Stream_contains__closure.prototype = $desc;
    Stream_contains__closure.$__fields__ = ["needle", "element"];
    function Stream_contains__closure0(_box_0, future) {
      this._box_0 = _box_0;
      this.future = future;
      this.$deferredAction();
    }
    Stream_contains__closure0.builtin$cls = "Stream_contains__closure0";
    if (!("name" in Stream_contains__closure0))
      Stream_contains__closure0.name = "Stream_contains__closure0";
    $desc = $collectedClasses$.Stream_contains__closure0[1];
    Stream_contains__closure0.prototype = $desc;
    Stream_contains__closure0.$__fields__ = ["_box_0", "future"];
    function Stream_contains_closure0(future) {
      this.future = future;
      this.$deferredAction();
    }
    Stream_contains_closure0.builtin$cls = "Stream_contains_closure0";
    if (!("name" in Stream_contains_closure0))
      Stream_contains_closure0.name = "Stream_contains_closure0";
    $desc = $collectedClasses$.Stream_contains_closure0[1];
    Stream_contains_closure0.prototype = $desc;
    Stream_contains_closure0.$__fields__ = ["future"];
    function Stream_forEach_closure(_box_0, $this, action, future) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.action = action;
      this.future = future;
      this.$deferredAction();
    }
    Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
    if (!("name" in Stream_forEach_closure))
      Stream_forEach_closure.name = "Stream_forEach_closure";
    $desc = $collectedClasses$.Stream_forEach_closure[1];
    Stream_forEach_closure.prototype = $desc;
    Stream_forEach_closure.$__fields__ = ["_box_0", "$this", "action", "future"];
    function Stream_forEach__closure(action, element) {
      this.action = action;
      this.element = element;
      this.$deferredAction();
    }
    Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
    if (!("name" in Stream_forEach__closure))
      Stream_forEach__closure.name = "Stream_forEach__closure";
    $desc = $collectedClasses$.Stream_forEach__closure[1];
    Stream_forEach__closure.prototype = $desc;
    Stream_forEach__closure.$__fields__ = ["action", "element"];
    function Stream_forEach__closure0() {
      this.$deferredAction();
    }
    Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
    if (!("name" in Stream_forEach__closure0))
      Stream_forEach__closure0.name = "Stream_forEach__closure0";
    $desc = $collectedClasses$.Stream_forEach__closure0[1];
    Stream_forEach__closure0.prototype = $desc;
    Stream_forEach__closure0.$__fields__ = [];
    function Stream_forEach_closure0(future) {
      this.future = future;
      this.$deferredAction();
    }
    Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
    if (!("name" in Stream_forEach_closure0))
      Stream_forEach_closure0.name = "Stream_forEach_closure0";
    $desc = $collectedClasses$.Stream_forEach_closure0[1];
    Stream_forEach_closure0.prototype = $desc;
    Stream_forEach_closure0.$__fields__ = ["future"];
    function Stream_length_closure(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    Stream_length_closure.builtin$cls = "Stream_length_closure";
    if (!("name" in Stream_length_closure))
      Stream_length_closure.name = "Stream_length_closure";
    $desc = $collectedClasses$.Stream_length_closure[1];
    Stream_length_closure.prototype = $desc;
    Stream_length_closure.$__fields__ = ["_box_0"];
    function Stream_length_closure0(_box_0, future) {
      this._box_0 = _box_0;
      this.future = future;
      this.$deferredAction();
    }
    Stream_length_closure0.builtin$cls = "Stream_length_closure0";
    if (!("name" in Stream_length_closure0))
      Stream_length_closure0.name = "Stream_length_closure0";
    $desc = $collectedClasses$.Stream_length_closure0[1];
    Stream_length_closure0.prototype = $desc;
    Stream_length_closure0.$__fields__ = ["_box_0", "future"];
    function Stream_isEmpty_closure(_box_0, future) {
      this._box_0 = _box_0;
      this.future = future;
      this.$deferredAction();
    }
    Stream_isEmpty_closure.builtin$cls = "Stream_isEmpty_closure";
    if (!("name" in Stream_isEmpty_closure))
      Stream_isEmpty_closure.name = "Stream_isEmpty_closure";
    $desc = $collectedClasses$.Stream_isEmpty_closure[1];
    Stream_isEmpty_closure.prototype = $desc;
    Stream_isEmpty_closure.$__fields__ = ["_box_0", "future"];
    function Stream_isEmpty_closure0(future) {
      this.future = future;
      this.$deferredAction();
    }
    Stream_isEmpty_closure0.builtin$cls = "Stream_isEmpty_closure0";
    if (!("name" in Stream_isEmpty_closure0))
      Stream_isEmpty_closure0.name = "Stream_isEmpty_closure0";
    $desc = $collectedClasses$.Stream_isEmpty_closure0[1];
    Stream_isEmpty_closure0.prototype = $desc;
    Stream_isEmpty_closure0.$__fields__ = ["future"];
    function Stream_toList_closure($this, result) {
      this.$this = $this;
      this.result = result;
      this.$deferredAction();
    }
    Stream_toList_closure.builtin$cls = "Stream_toList_closure";
    if (!("name" in Stream_toList_closure))
      Stream_toList_closure.name = "Stream_toList_closure";
    $desc = $collectedClasses$.Stream_toList_closure[1];
    Stream_toList_closure.prototype = $desc;
    Stream_toList_closure.$__fields__ = ["$this", "result"];
    function Stream_toList_closure0(result, future) {
      this.result = result;
      this.future = future;
      this.$deferredAction();
    }
    Stream_toList_closure0.builtin$cls = "Stream_toList_closure0";
    if (!("name" in Stream_toList_closure0))
      Stream_toList_closure0.name = "Stream_toList_closure0";
    $desc = $collectedClasses$.Stream_toList_closure0[1];
    Stream_toList_closure0.prototype = $desc;
    Stream_toList_closure0.$__fields__ = ["result", "future"];
    function Stream_first_closure(_box_0, $this, future) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.future = future;
      this.$deferredAction();
    }
    Stream_first_closure.builtin$cls = "Stream_first_closure";
    if (!("name" in Stream_first_closure))
      Stream_first_closure.name = "Stream_first_closure";
    $desc = $collectedClasses$.Stream_first_closure[1];
    Stream_first_closure.prototype = $desc;
    Stream_first_closure.$__fields__ = ["_box_0", "$this", "future"];
    function Stream_first_closure0(future) {
      this.future = future;
      this.$deferredAction();
    }
    Stream_first_closure0.builtin$cls = "Stream_first_closure0";
    if (!("name" in Stream_first_closure0))
      Stream_first_closure0.name = "Stream_first_closure0";
    $desc = $collectedClasses$.Stream_first_closure0[1];
    Stream_first_closure0.prototype = $desc;
    Stream_first_closure0.$__fields__ = ["future"];
    function StreamSubscription($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    StreamSubscription.builtin$cls = "StreamSubscription";
    if (!("name" in StreamSubscription))
      StreamSubscription.name = "StreamSubscription";
    $desc = $collectedClasses$.StreamSubscription[1];
    StreamSubscription.prototype = $desc;
    StreamSubscription.$__fields__ = [];
    function EventSink($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    EventSink.builtin$cls = "EventSink";
    if (!("name" in EventSink))
      EventSink.name = "EventSink";
    $desc = $collectedClasses$.EventSink[1];
    EventSink.prototype = $desc;
    EventSink.$__fields__ = [];
    function _StreamController(_state, $ti) {
      this._state = _state;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _StreamController.builtin$cls = "_StreamController";
    if (!("name" in _StreamController))
      _StreamController.name = "_StreamController";
    $desc = $collectedClasses$._StreamController[1];
    _StreamController.prototype = $desc;
    _StreamController.$__fields__ = ["_state"];
    _StreamController.prototype.get$_state = function() {
      return this._state;
    };
    function _StreamController__subscribe_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _StreamController__subscribe_closure.builtin$cls = "_StreamController__subscribe_closure";
    if (!("name" in _StreamController__subscribe_closure))
      _StreamController__subscribe_closure.name = "_StreamController__subscribe_closure";
    $desc = $collectedClasses$._StreamController__subscribe_closure[1];
    _StreamController__subscribe_closure.prototype = $desc;
    _StreamController__subscribe_closure.$__fields__ = ["$this"];
    function _StreamController__recordCancel_complete($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _StreamController__recordCancel_complete.builtin$cls = "_StreamController__recordCancel_complete";
    if (!("name" in _StreamController__recordCancel_complete))
      _StreamController__recordCancel_complete.name = "_StreamController__recordCancel_complete";
    $desc = $collectedClasses$._StreamController__recordCancel_complete[1];
    _StreamController__recordCancel_complete.prototype = $desc;
    _StreamController__recordCancel_complete.$__fields__ = ["$this"];
    function _SyncStreamControllerDispatch($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    _SyncStreamControllerDispatch.builtin$cls = "_SyncStreamControllerDispatch";
    if (!("name" in _SyncStreamControllerDispatch))
      _SyncStreamControllerDispatch.name = "_SyncStreamControllerDispatch";
    $desc = $collectedClasses$._SyncStreamControllerDispatch[1];
    _SyncStreamControllerDispatch.prototype = $desc;
    _SyncStreamControllerDispatch.$__fields__ = [];
    function _AsyncStreamControllerDispatch($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    _AsyncStreamControllerDispatch.builtin$cls = "_AsyncStreamControllerDispatch";
    if (!("name" in _AsyncStreamControllerDispatch))
      _AsyncStreamControllerDispatch.name = "_AsyncStreamControllerDispatch";
    $desc = $collectedClasses$._AsyncStreamControllerDispatch[1];
    _AsyncStreamControllerDispatch.prototype = $desc;
    _AsyncStreamControllerDispatch.$__fields__ = [];
    function _AsyncStreamController(_varData, _state, _doneFuture, onListen, onPause, onResume, onCancel, $ti) {
      this._varData = _varData;
      this._state = _state;
      this._doneFuture = _doneFuture;
      this.onListen = onListen;
      this.onPause = onPause;
      this.onResume = onResume;
      this.onCancel = onCancel;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _AsyncStreamController.builtin$cls = "_AsyncStreamController";
    if (!("name" in _AsyncStreamController))
      _AsyncStreamController.name = "_AsyncStreamController";
    $desc = $collectedClasses$._AsyncStreamController[1];
    _AsyncStreamController.prototype = $desc;
    _AsyncStreamController.$__fields__ = ["_varData", "_state", "_doneFuture", "onListen", "onPause", "onResume", "onCancel"];
    function _SyncStreamController(_varData, _state, _doneFuture, onListen, onPause, onResume, onCancel, $ti) {
      this._varData = _varData;
      this._state = _state;
      this._doneFuture = _doneFuture;
      this.onListen = onListen;
      this.onPause = onPause;
      this.onResume = onResume;
      this.onCancel = onCancel;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _SyncStreamController.builtin$cls = "_SyncStreamController";
    if (!("name" in _SyncStreamController))
      _SyncStreamController.name = "_SyncStreamController";
    $desc = $collectedClasses$._SyncStreamController[1];
    _SyncStreamController.prototype = $desc;
    _SyncStreamController.$__fields__ = ["_varData", "_state", "_doneFuture", "onListen", "onPause", "onResume", "onCancel"];
    function _ControllerStream(_async$_controller, $ti) {
      this._async$_controller = _async$_controller;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _ControllerStream.builtin$cls = "_ControllerStream";
    if (!("name" in _ControllerStream))
      _ControllerStream.name = "_ControllerStream";
    $desc = $collectedClasses$._ControllerStream[1];
    _ControllerStream.prototype = $desc;
    _ControllerStream.$__fields__ = ["_async$_controller"];
    function _ControllerSubscription(_async$_controller, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending, $ti) {
      this._async$_controller = _async$_controller;
      this._onData = _onData;
      this._onError = _onError;
      this._onDone = _onDone;
      this._zone = _zone;
      this._state = _state;
      this._cancelFuture = _cancelFuture;
      this._pending = _pending;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _ControllerSubscription.builtin$cls = "_ControllerSubscription";
    if (!("name" in _ControllerSubscription))
      _ControllerSubscription.name = "_ControllerSubscription";
    $desc = $collectedClasses$._ControllerSubscription[1];
    _ControllerSubscription.prototype = $desc;
    _ControllerSubscription.$__fields__ = ["_async$_controller", "_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
    function _EventSink($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    _EventSink.builtin$cls = "_EventSink";
    if (!("name" in _EventSink))
      _EventSink.name = "_EventSink";
    $desc = $collectedClasses$._EventSink[1];
    _EventSink.prototype = $desc;
    _EventSink.$__fields__ = [];
    function _BufferingStreamSubscription(_zone, _state, $ti) {
      this._zone = _zone;
      this._state = _state;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
    if (!("name" in _BufferingStreamSubscription))
      _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
    $desc = $collectedClasses$._BufferingStreamSubscription[1];
    _BufferingStreamSubscription.prototype = $desc;
    _BufferingStreamSubscription.$__fields__ = ["_zone", "_state"];
    _BufferingStreamSubscription.prototype.get$_zone = function() {
      return this._zone;
    };
    _BufferingStreamSubscription.prototype.get$_state = function() {
      return this._state;
    };
    function _BufferingStreamSubscription__sendError_sendError($this, error, stackTrace) {
      this.$this = $this;
      this.error = error;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    _BufferingStreamSubscription__sendError_sendError.builtin$cls = "_BufferingStreamSubscription__sendError_sendError";
    if (!("name" in _BufferingStreamSubscription__sendError_sendError))
      _BufferingStreamSubscription__sendError_sendError.name = "_BufferingStreamSubscription__sendError_sendError";
    $desc = $collectedClasses$._BufferingStreamSubscription__sendError_sendError[1];
    _BufferingStreamSubscription__sendError_sendError.prototype = $desc;
    _BufferingStreamSubscription__sendError_sendError.$__fields__ = ["$this", "error", "stackTrace"];
    function _BufferingStreamSubscription__sendDone_sendDone($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
    if (!("name" in _BufferingStreamSubscription__sendDone_sendDone))
      _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
    $desc = $collectedClasses$._BufferingStreamSubscription__sendDone_sendDone[1];
    _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
    _BufferingStreamSubscription__sendDone_sendDone.$__fields__ = ["$this"];
    function _StreamImpl($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    _StreamImpl.builtin$cls = "_StreamImpl";
    if (!("name" in _StreamImpl))
      _StreamImpl.name = "_StreamImpl";
    $desc = $collectedClasses$._StreamImpl[1];
    _StreamImpl.prototype = $desc;
    _StreamImpl.$__fields__ = [];
    function _DelayedEvent(next, $ti) {
      this.next = next;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _DelayedEvent.builtin$cls = "_DelayedEvent";
    if (!("name" in _DelayedEvent))
      _DelayedEvent.name = "_DelayedEvent";
    $desc = $collectedClasses$._DelayedEvent[1];
    _DelayedEvent.prototype = $desc;
    _DelayedEvent.$__fields__ = ["next"];
    _DelayedEvent.prototype.get$next = function(receiver) {
      return this.next;
    };
    _DelayedEvent.prototype.set$next = function(receiver, v) {
      return this.next = v;
    };
    function _DelayedData(value, next, $ti) {
      this.value = value;
      this.next = next;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _DelayedData.builtin$cls = "_DelayedData";
    if (!("name" in _DelayedData))
      _DelayedData.name = "_DelayedData";
    $desc = $collectedClasses$._DelayedData[1];
    _DelayedData.prototype = $desc;
    _DelayedData.$__fields__ = ["value", "next"];
    _DelayedData.prototype.get$value = function(receiver) {
      return this.value;
    };
    function _DelayedError(error, stackTrace, next) {
      this.error = error;
      this.stackTrace = stackTrace;
      this.next = next;
      this.$deferredAction();
    }
    _DelayedError.builtin$cls = "_DelayedError";
    if (!("name" in _DelayedError))
      _DelayedError.name = "_DelayedError";
    $desc = $collectedClasses$._DelayedError[1];
    _DelayedError.prototype = $desc;
    _DelayedError.$__fields__ = ["error", "stackTrace", "next"];
    _DelayedError.prototype.get$error = function(receiver) {
      return this.error;
    };
    _DelayedError.prototype.get$stackTrace = function() {
      return this.stackTrace;
    };
    function _DelayedDone() {
      this.$deferredAction();
    }
    _DelayedDone.builtin$cls = "_DelayedDone";
    if (!("name" in _DelayedDone))
      _DelayedDone.name = "_DelayedDone";
    $desc = $collectedClasses$._DelayedDone[1];
    _DelayedDone.prototype = $desc;
    _DelayedDone.$__fields__ = [];
    function _PendingEvents(_state, $ti) {
      this._state = _state;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _PendingEvents.builtin$cls = "_PendingEvents";
    if (!("name" in _PendingEvents))
      _PendingEvents.name = "_PendingEvents";
    $desc = $collectedClasses$._PendingEvents[1];
    _PendingEvents.prototype = $desc;
    _PendingEvents.$__fields__ = ["_state"];
    _PendingEvents.prototype.get$_state = function() {
      return this._state;
    };
    function _PendingEvents_schedule_closure($this, dispatch) {
      this.$this = $this;
      this.dispatch = dispatch;
      this.$deferredAction();
    }
    _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
    if (!("name" in _PendingEvents_schedule_closure))
      _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
    $desc = $collectedClasses$._PendingEvents_schedule_closure[1];
    _PendingEvents_schedule_closure.prototype = $desc;
    _PendingEvents_schedule_closure.$__fields__ = ["$this", "dispatch"];
    function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state, $ti) {
      this.firstPendingEvent = firstPendingEvent;
      this.lastPendingEvent = lastPendingEvent;
      this._state = _state;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _StreamImplEvents.builtin$cls = "_StreamImplEvents";
    if (!("name" in _StreamImplEvents))
      _StreamImplEvents.name = "_StreamImplEvents";
    $desc = $collectedClasses$._StreamImplEvents[1];
    _StreamImplEvents.prototype = $desc;
    _StreamImplEvents.$__fields__ = ["firstPendingEvent", "lastPendingEvent", "_state"];
    function _DoneStreamSubscription(_zone, _state, _onDone, $ti) {
      this._zone = _zone;
      this._state = _state;
      this._onDone = _onDone;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _DoneStreamSubscription.builtin$cls = "_DoneStreamSubscription";
    if (!("name" in _DoneStreamSubscription))
      _DoneStreamSubscription.name = "_DoneStreamSubscription";
    $desc = $collectedClasses$._DoneStreamSubscription[1];
    _DoneStreamSubscription.prototype = $desc;
    _DoneStreamSubscription.$__fields__ = ["_zone", "_state", "_onDone"];
    _DoneStreamSubscription.prototype.get$_zone = function() {
      return this._zone;
    };
    _DoneStreamSubscription.prototype.get$_state = function() {
      return this._state;
    };
    function _StreamIterator(_subscription, _stateData, _isPaused, $ti) {
      this._subscription = _subscription;
      this._stateData = _stateData;
      this._isPaused = _isPaused;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _StreamIterator.builtin$cls = "_StreamIterator";
    if (!("name" in _StreamIterator))
      _StreamIterator.name = "_StreamIterator";
    $desc = $collectedClasses$._StreamIterator[1];
    _StreamIterator.prototype = $desc;
    _StreamIterator.$__fields__ = ["_subscription", "_stateData", "_isPaused"];
    function _cancelAndError_closure(future, error, stackTrace) {
      this.future = future;
      this.error = error;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
    if (!("name" in _cancelAndError_closure))
      _cancelAndError_closure.name = "_cancelAndError_closure";
    $desc = $collectedClasses$._cancelAndError_closure[1];
    _cancelAndError_closure.prototype = $desc;
    _cancelAndError_closure.$__fields__ = ["future", "error", "stackTrace"];
    function _cancelAndErrorClosure_closure(subscription, future) {
      this.subscription = subscription;
      this.future = future;
      this.$deferredAction();
    }
    _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
    if (!("name" in _cancelAndErrorClosure_closure))
      _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
    $desc = $collectedClasses$._cancelAndErrorClosure_closure[1];
    _cancelAndErrorClosure_closure.prototype = $desc;
    _cancelAndErrorClosure_closure.$__fields__ = ["subscription", "future"];
    function _cancelAndValue_closure(future, value) {
      this.future = future;
      this.value = value;
      this.$deferredAction();
    }
    _cancelAndValue_closure.builtin$cls = "_cancelAndValue_closure";
    if (!("name" in _cancelAndValue_closure))
      _cancelAndValue_closure.name = "_cancelAndValue_closure";
    $desc = $collectedClasses$._cancelAndValue_closure[1];
    _cancelAndValue_closure.prototype = $desc;
    _cancelAndValue_closure.$__fields__ = ["future", "value"];
    function _ForwardingStream($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    _ForwardingStream.builtin$cls = "_ForwardingStream";
    if (!("name" in _ForwardingStream))
      _ForwardingStream.name = "_ForwardingStream";
    $desc = $collectedClasses$._ForwardingStream[1];
    _ForwardingStream.prototype = $desc;
    _ForwardingStream.$__fields__ = [];
    function _ForwardingStreamSubscription(_stream, _subscription, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending, $ti) {
      this._stream = _stream;
      this._subscription = _subscription;
      this._onData = _onData;
      this._onError = _onError;
      this._onDone = _onDone;
      this._zone = _zone;
      this._state = _state;
      this._cancelFuture = _cancelFuture;
      this._pending = _pending;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _ForwardingStreamSubscription.builtin$cls = "_ForwardingStreamSubscription";
    if (!("name" in _ForwardingStreamSubscription))
      _ForwardingStreamSubscription.name = "_ForwardingStreamSubscription";
    $desc = $collectedClasses$._ForwardingStreamSubscription[1];
    _ForwardingStreamSubscription.prototype = $desc;
    _ForwardingStreamSubscription.$__fields__ = ["_stream", "_subscription", "_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
    function _WhereStream(_test, _async$_source, $ti) {
      this._test = _test;
      this._async$_source = _async$_source;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _WhereStream.builtin$cls = "_WhereStream";
    if (!("name" in _WhereStream))
      _WhereStream.name = "_WhereStream";
    $desc = $collectedClasses$._WhereStream[1];
    _WhereStream.prototype = $desc;
    _WhereStream.$__fields__ = ["_test", "_async$_source"];
    function _MapStream(_transform, _async$_source, $ti) {
      this._transform = _transform;
      this._async$_source = _async$_source;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _MapStream.builtin$cls = "_MapStream";
    if (!("name" in _MapStream))
      _MapStream.name = "_MapStream";
    $desc = $collectedClasses$._MapStream[1];
    _MapStream.prototype = $desc;
    _MapStream.$__fields__ = ["_transform", "_async$_source"];
    function _HandleErrorStream(_transform, _test, _async$_source, $ti) {
      this._transform = _transform;
      this._test = _test;
      this._async$_source = _async$_source;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _HandleErrorStream.builtin$cls = "_HandleErrorStream";
    if (!("name" in _HandleErrorStream))
      _HandleErrorStream.name = "_HandleErrorStream";
    $desc = $collectedClasses$._HandleErrorStream[1];
    _HandleErrorStream.prototype = $desc;
    _HandleErrorStream.$__fields__ = ["_transform", "_test", "_async$_source"];
    function _StateStreamSubscription(_sharedState, _stream, _subscription, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending, $ti) {
      this._sharedState = _sharedState;
      this._stream = _stream;
      this._subscription = _subscription;
      this._onData = _onData;
      this._onError = _onError;
      this._onDone = _onDone;
      this._zone = _zone;
      this._state = _state;
      this._cancelFuture = _cancelFuture;
      this._pending = _pending;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _StateStreamSubscription.builtin$cls = "_StateStreamSubscription";
    if (!("name" in _StateStreamSubscription))
      _StateStreamSubscription.name = "_StateStreamSubscription";
    $desc = $collectedClasses$._StateStreamSubscription[1];
    _StateStreamSubscription.prototype = $desc;
    _StateStreamSubscription.$__fields__ = ["_sharedState", "_stream", "_subscription", "_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
    function _SkipStream(_count, _async$_source, $ti) {
      this._count = _count;
      this._async$_source = _async$_source;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _SkipStream.builtin$cls = "_SkipStream";
    if (!("name" in _SkipStream))
      _SkipStream.name = "_SkipStream";
    $desc = $collectedClasses$._SkipStream[1];
    _SkipStream.prototype = $desc;
    _SkipStream.$__fields__ = ["_count", "_async$_source"];
    function _EventSinkWrapper(_async$_sink, $ti) {
      this._async$_sink = _async$_sink;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _EventSinkWrapper.builtin$cls = "_EventSinkWrapper";
    if (!("name" in _EventSinkWrapper))
      _EventSinkWrapper.name = "_EventSinkWrapper";
    $desc = $collectedClasses$._EventSinkWrapper[1];
    _EventSinkWrapper.prototype = $desc;
    _EventSinkWrapper.$__fields__ = ["_async$_sink"];
    function _SinkTransformerStreamSubscription(_transformerSink, _subscription, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending, $ti) {
      this._transformerSink = _transformerSink;
      this._subscription = _subscription;
      this._onData = _onData;
      this._onError = _onError;
      this._onDone = _onDone;
      this._zone = _zone;
      this._state = _state;
      this._cancelFuture = _cancelFuture;
      this._pending = _pending;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _SinkTransformerStreamSubscription.builtin$cls = "_SinkTransformerStreamSubscription";
    if (!("name" in _SinkTransformerStreamSubscription))
      _SinkTransformerStreamSubscription.name = "_SinkTransformerStreamSubscription";
    $desc = $collectedClasses$._SinkTransformerStreamSubscription[1];
    _SinkTransformerStreamSubscription.prototype = $desc;
    _SinkTransformerStreamSubscription.$__fields__ = ["_transformerSink", "_subscription", "_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
    function _BoundSinkStream(_sinkMapper, _stream, $ti) {
      this._sinkMapper = _sinkMapper;
      this._stream = _stream;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _BoundSinkStream.builtin$cls = "_BoundSinkStream";
    if (!("name" in _BoundSinkStream))
      _BoundSinkStream.name = "_BoundSinkStream";
    $desc = $collectedClasses$._BoundSinkStream[1];
    _BoundSinkStream.prototype = $desc;
    _BoundSinkStream.$__fields__ = ["_sinkMapper", "_stream"];
    function AsyncError(error, stackTrace) {
      this.error = error;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    AsyncError.builtin$cls = "AsyncError";
    if (!("name" in AsyncError))
      AsyncError.name = "AsyncError";
    $desc = $collectedClasses$.AsyncError[1];
    AsyncError.prototype = $desc;
    AsyncError.$__fields__ = ["error", "stackTrace"];
    AsyncError.prototype.get$error = function(receiver) {
      return this.error;
    };
    AsyncError.prototype.get$stackTrace = function() {
      return this.stackTrace;
    };
    function Zone() {
      this.$deferredAction();
    }
    Zone.builtin$cls = "Zone";
    if (!("name" in Zone))
      Zone.name = "Zone";
    $desc = $collectedClasses$.Zone[1];
    Zone.prototype = $desc;
    Zone.$__fields__ = [];
    function _Zone() {
      this.$deferredAction();
    }
    _Zone.builtin$cls = "_Zone";
    if (!("name" in _Zone))
      _Zone.name = "_Zone";
    $desc = $collectedClasses$._Zone[1];
    _Zone.prototype = $desc;
    _Zone.$__fields__ = [];
    function _rootHandleUncaughtError_closure(_box_0, stackTrace) {
      this._box_0 = _box_0;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
    if (!("name" in _rootHandleUncaughtError_closure))
      _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
    $desc = $collectedClasses$._rootHandleUncaughtError_closure[1];
    _rootHandleUncaughtError_closure.prototype = $desc;
    _rootHandleUncaughtError_closure.$__fields__ = ["_box_0", "stackTrace"];
    function _RootZone() {
      this.$deferredAction();
    }
    _RootZone.builtin$cls = "_RootZone";
    if (!("name" in _RootZone))
      _RootZone.name = "_RootZone";
    $desc = $collectedClasses$._RootZone[1];
    _RootZone.prototype = $desc;
    _RootZone.$__fields__ = [];
    function _RootZone_bindCallback_closure($this, f) {
      this.$this = $this;
      this.f = f;
      this.$deferredAction();
    }
    _RootZone_bindCallback_closure.builtin$cls = "_RootZone_bindCallback_closure";
    if (!("name" in _RootZone_bindCallback_closure))
      _RootZone_bindCallback_closure.name = "_RootZone_bindCallback_closure";
    $desc = $collectedClasses$._RootZone_bindCallback_closure[1];
    _RootZone_bindCallback_closure.prototype = $desc;
    _RootZone_bindCallback_closure.$__fields__ = ["$this", "f"];
    function _RootZone_bindCallback_closure0($this, f) {
      this.$this = $this;
      this.f = f;
      this.$deferredAction();
    }
    _RootZone_bindCallback_closure0.builtin$cls = "_RootZone_bindCallback_closure0";
    if (!("name" in _RootZone_bindCallback_closure0))
      _RootZone_bindCallback_closure0.name = "_RootZone_bindCallback_closure0";
    $desc = $collectedClasses$._RootZone_bindCallback_closure0[1];
    _RootZone_bindCallback_closure0.prototype = $desc;
    _RootZone_bindCallback_closure0.$__fields__ = ["$this", "f"];
    function _RootZone_bindUnaryCallback_closure($this, f) {
      this.$this = $this;
      this.f = f;
      this.$deferredAction();
    }
    _RootZone_bindUnaryCallback_closure.builtin$cls = "_RootZone_bindUnaryCallback_closure";
    if (!("name" in _RootZone_bindUnaryCallback_closure))
      _RootZone_bindUnaryCallback_closure.name = "_RootZone_bindUnaryCallback_closure";
    $desc = $collectedClasses$._RootZone_bindUnaryCallback_closure[1];
    _RootZone_bindUnaryCallback_closure.prototype = $desc;
    _RootZone_bindUnaryCallback_closure.$__fields__ = ["$this", "f"];
    function _HashMap($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    _HashMap.builtin$cls = "_HashMap";
    if (!("name" in _HashMap))
      _HashMap.name = "_HashMap";
    $desc = $collectedClasses$._HashMap[1];
    _HashMap.prototype = $desc;
    _HashMap.$__fields__ = [];
    function _HashMap_values_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
    if (!("name" in _HashMap_values_closure))
      _HashMap_values_closure.name = "_HashMap_values_closure";
    $desc = $collectedClasses$._HashMap_values_closure[1];
    _HashMap_values_closure.prototype = $desc;
    _HashMap_values_closure.$__fields__ = ["$this"];
    function _HashMap_addAll_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _HashMap_addAll_closure.builtin$cls = "_HashMap_addAll_closure";
    if (!("name" in _HashMap_addAll_closure))
      _HashMap_addAll_closure.name = "_HashMap_addAll_closure";
    $desc = $collectedClasses$._HashMap_addAll_closure[1];
    _HashMap_addAll_closure.prototype = $desc;
    _HashMap_addAll_closure.$__fields__ = ["$this"];
    function _IdentityHashMap(_collection$_length, _collection$_strings, _collection$_nums, _collection$_rest, _collection$_keys, $ti) {
      this._collection$_length = _collection$_length;
      this._collection$_strings = _collection$_strings;
      this._collection$_nums = _collection$_nums;
      this._collection$_rest = _collection$_rest;
      this._collection$_keys = _collection$_keys;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _IdentityHashMap.builtin$cls = "_IdentityHashMap";
    if (!("name" in _IdentityHashMap))
      _IdentityHashMap.name = "_IdentityHashMap";
    $desc = $collectedClasses$._IdentityHashMap[1];
    _IdentityHashMap.prototype = $desc;
    _IdentityHashMap.$__fields__ = ["_collection$_length", "_collection$_strings", "_collection$_nums", "_collection$_rest", "_collection$_keys"];
    function _CustomHashMap(_equals, _hashCode, _validKey, _collection$_length, _collection$_strings, _collection$_nums, _collection$_rest, _collection$_keys, $ti) {
      this._equals = _equals;
      this._hashCode = _hashCode;
      this._validKey = _validKey;
      this._collection$_length = _collection$_length;
      this._collection$_strings = _collection$_strings;
      this._collection$_nums = _collection$_nums;
      this._collection$_rest = _collection$_rest;
      this._collection$_keys = _collection$_keys;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _CustomHashMap.builtin$cls = "_CustomHashMap";
    if (!("name" in _CustomHashMap))
      _CustomHashMap.name = "_CustomHashMap";
    $desc = $collectedClasses$._CustomHashMap[1];
    _CustomHashMap.prototype = $desc;
    _CustomHashMap.$__fields__ = ["_equals", "_hashCode", "_validKey", "_collection$_length", "_collection$_strings", "_collection$_nums", "_collection$_rest", "_collection$_keys"];
    function _CustomHashMap_closure(K) {
      this.K = K;
      this.$deferredAction();
    }
    _CustomHashMap_closure.builtin$cls = "_CustomHashMap_closure";
    if (!("name" in _CustomHashMap_closure))
      _CustomHashMap_closure.name = "_CustomHashMap_closure";
    $desc = $collectedClasses$._CustomHashMap_closure[1];
    _CustomHashMap_closure.prototype = $desc;
    _CustomHashMap_closure.$__fields__ = ["K"];
    function _HashMapKeyIterable(_collection$_map, $ti) {
      this._collection$_map = _collection$_map;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _HashMapKeyIterable.builtin$cls = "_HashMapKeyIterable";
    if (!("name" in _HashMapKeyIterable))
      _HashMapKeyIterable.name = "_HashMapKeyIterable";
    $desc = $collectedClasses$._HashMapKeyIterable[1];
    _HashMapKeyIterable.prototype = $desc;
    _HashMapKeyIterable.$__fields__ = ["_collection$_map"];
    function _HashMapKeyIterator(_collection$_map, _collection$_keys, _offset, _collection$_current, $ti) {
      this._collection$_map = _collection$_map;
      this._collection$_keys = _collection$_keys;
      this._offset = _offset;
      this._collection$_current = _collection$_current;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _HashMapKeyIterator.builtin$cls = "_HashMapKeyIterator";
    if (!("name" in _HashMapKeyIterator))
      _HashMapKeyIterator.name = "_HashMapKeyIterator";
    $desc = $collectedClasses$._HashMapKeyIterator[1];
    _HashMapKeyIterator.prototype = $desc;
    _HashMapKeyIterator.$__fields__ = ["_collection$_map", "_collection$_keys", "_offset", "_collection$_current"];
    function _LinkedIdentityHashMap(_length, _strings, _nums, _rest, _first, _last, _modifications, $ti) {
      this._length = _length;
      this._strings = _strings;
      this._nums = _nums;
      this._rest = _rest;
      this._first = _first;
      this._last = _last;
      this._modifications = _modifications;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _LinkedIdentityHashMap.builtin$cls = "_LinkedIdentityHashMap";
    if (!("name" in _LinkedIdentityHashMap))
      _LinkedIdentityHashMap.name = "_LinkedIdentityHashMap";
    $desc = $collectedClasses$._LinkedIdentityHashMap[1];
    _LinkedIdentityHashMap.prototype = $desc;
    _LinkedIdentityHashMap.$__fields__ = ["_length", "_strings", "_nums", "_rest", "_first", "_last", "_modifications"];
    function _LinkedHashSet(_collection$_length, _collection$_strings, _collection$_nums, _collection$_rest, _collection$_first, _collection$_last, _collection$_modifications, $ti) {
      this._collection$_length = _collection$_length;
      this._collection$_strings = _collection$_strings;
      this._collection$_nums = _collection$_nums;
      this._collection$_rest = _collection$_rest;
      this._collection$_first = _collection$_first;
      this._collection$_last = _collection$_last;
      this._collection$_modifications = _collection$_modifications;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _LinkedHashSet.builtin$cls = "_LinkedHashSet";
    if (!("name" in _LinkedHashSet))
      _LinkedHashSet.name = "_LinkedHashSet";
    $desc = $collectedClasses$._LinkedHashSet[1];
    _LinkedHashSet.prototype = $desc;
    _LinkedHashSet.$__fields__ = ["_collection$_length", "_collection$_strings", "_collection$_nums", "_collection$_rest", "_collection$_first", "_collection$_last", "_collection$_modifications"];
    function _LinkedHashSetCell(_element, _collection$_next, _collection$_previous) {
      this._element = _element;
      this._collection$_next = _collection$_next;
      this._collection$_previous = _collection$_previous;
      this.$deferredAction();
    }
    _LinkedHashSetCell.builtin$cls = "_LinkedHashSetCell";
    if (!("name" in _LinkedHashSetCell))
      _LinkedHashSetCell.name = "_LinkedHashSetCell";
    $desc = $collectedClasses$._LinkedHashSetCell[1];
    _LinkedHashSetCell.prototype = $desc;
    _LinkedHashSetCell.$__fields__ = ["_element", "_collection$_next", "_collection$_previous"];
    _LinkedHashSetCell.prototype.get$_element = function() {
      return this._element;
    };
    _LinkedHashSetCell.prototype.get$_collection$_next = function() {
      return this._collection$_next;
    };
    _LinkedHashSetCell.prototype.get$_collection$_previous = function() {
      return this._collection$_previous;
    };
    _LinkedHashSetCell.prototype.set$_collection$_previous = function(v) {
      return this._collection$_previous = v;
    };
    function _LinkedHashSetIterator(_set, _collection$_modifications, _collection$_cell, _collection$_current, $ti) {
      this._set = _set;
      this._collection$_modifications = _collection$_modifications;
      this._collection$_cell = _collection$_cell;
      this._collection$_current = _collection$_current;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _LinkedHashSetIterator.builtin$cls = "_LinkedHashSetIterator";
    if (!("name" in _LinkedHashSetIterator))
      _LinkedHashSetIterator.name = "_LinkedHashSetIterator";
    $desc = $collectedClasses$._LinkedHashSetIterator[1];
    _LinkedHashSetIterator.prototype = $desc;
    _LinkedHashSetIterator.$__fields__ = ["_set", "_collection$_modifications", "_collection$_cell", "_collection$_current"];
    function UnmodifiableListView(_collection$_source, $ti) {
      this._collection$_source = _collection$_source;
      this.$ti = $ti;
      this.$deferredAction();
    }
    UnmodifiableListView.builtin$cls = "UnmodifiableListView";
    if (!("name" in UnmodifiableListView))
      UnmodifiableListView.name = "UnmodifiableListView";
    $desc = $collectedClasses$.UnmodifiableListView[1];
    UnmodifiableListView.prototype = $desc;
    UnmodifiableListView.$__fields__ = ["_collection$_source"];
    function _HashSetBase($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    _HashSetBase.builtin$cls = "_HashSetBase";
    if (!("name" in _HashSetBase))
      _HashSetBase.name = "_HashSetBase";
    $desc = $collectedClasses$._HashSetBase[1];
    _HashSetBase.prototype = $desc;
    _HashSetBase.$__fields__ = [];
    function IterableBase($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    IterableBase.builtin$cls = "IterableBase";
    if (!("name" in IterableBase))
      IterableBase.name = "IterableBase";
    $desc = $collectedClasses$.IterableBase[1];
    IterableBase.prototype = $desc;
    IterableBase.$__fields__ = [];
    function closure5(result) {
      this.result = result;
      this.$deferredAction();
    }
    closure5.builtin$cls = "closure5";
    if (!("name" in closure5))
      closure5.name = "closure5";
    $desc = $collectedClasses$.closure5[1];
    closure5.prototype = $desc;
    closure5.$__fields__ = ["result"];
    function ListBase($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    ListBase.builtin$cls = "ListBase";
    if (!("name" in ListBase))
      ListBase.name = "ListBase";
    $desc = $collectedClasses$.ListBase[1];
    ListBase.prototype = $desc;
    ListBase.$__fields__ = [];
    function Object_ListMixin($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    Object_ListMixin.builtin$cls = "Object_ListMixin";
    if (!("name" in Object_ListMixin))
      Object_ListMixin.name = "Object_ListMixin";
    $desc = $collectedClasses$.Object_ListMixin[1];
    Object_ListMixin.prototype = $desc;
    Object_ListMixin.$__fields__ = [];
    function ListMixin($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    ListMixin.builtin$cls = "ListMixin";
    if (!("name" in ListMixin))
      ListMixin.name = "ListMixin";
    $desc = $collectedClasses$.ListMixin[1];
    ListMixin.prototype = $desc;
    ListMixin.$__fields__ = [];
    function MapMixin($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    MapMixin.builtin$cls = "MapMixin";
    if (!("name" in MapMixin))
      MapMixin.name = "MapMixin";
    $desc = $collectedClasses$.MapMixin[1];
    MapMixin.prototype = $desc;
    MapMixin.$__fields__ = [];
    function _MapBaseValueIterable(_collection$_map, $ti) {
      this._collection$_map = _collection$_map;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _MapBaseValueIterable.builtin$cls = "_MapBaseValueIterable";
    if (!("name" in _MapBaseValueIterable))
      _MapBaseValueIterable.name = "_MapBaseValueIterable";
    $desc = $collectedClasses$._MapBaseValueIterable[1];
    _MapBaseValueIterable.prototype = $desc;
    _MapBaseValueIterable.$__fields__ = ["_collection$_map"];
    function _MapBaseValueIterator(_collection$_keys, _collection$_map, _collection$_current, $ti) {
      this._collection$_keys = _collection$_keys;
      this._collection$_map = _collection$_map;
      this._collection$_current = _collection$_current;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _MapBaseValueIterator.builtin$cls = "_MapBaseValueIterator";
    if (!("name" in _MapBaseValueIterator))
      _MapBaseValueIterator.name = "_MapBaseValueIterator";
    $desc = $collectedClasses$._MapBaseValueIterator[1];
    _MapBaseValueIterator.prototype = $desc;
    _MapBaseValueIterator.$__fields__ = ["_collection$_keys", "_collection$_map", "_collection$_current"];
    function _UnmodifiableMapMixin($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    _UnmodifiableMapMixin.builtin$cls = "_UnmodifiableMapMixin";
    if (!("name" in _UnmodifiableMapMixin))
      _UnmodifiableMapMixin.name = "_UnmodifiableMapMixin";
    $desc = $collectedClasses$._UnmodifiableMapMixin[1];
    _UnmodifiableMapMixin.prototype = $desc;
    _UnmodifiableMapMixin.$__fields__ = [];
    function MapView($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    MapView.builtin$cls = "MapView";
    if (!("name" in MapView))
      MapView.name = "MapView";
    $desc = $collectedClasses$.MapView[1];
    MapView.prototype = $desc;
    MapView.$__fields__ = [];
    function UnmodifiableMapView(_collection$_map, $ti) {
      this._collection$_map = _collection$_map;
      this.$ti = $ti;
      this.$deferredAction();
    }
    UnmodifiableMapView.builtin$cls = "UnmodifiableMapView";
    if (!("name" in UnmodifiableMapView))
      UnmodifiableMapView.name = "UnmodifiableMapView";
    $desc = $collectedClasses$.UnmodifiableMapView[1];
    UnmodifiableMapView.prototype = $desc;
    UnmodifiableMapView.$__fields__ = ["_collection$_map"];
    function Maps_mapToString_closure(_box_0, result) {
      this._box_0 = _box_0;
      this.result = result;
      this.$deferredAction();
    }
    Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
    if (!("name" in Maps_mapToString_closure))
      Maps_mapToString_closure.name = "Maps_mapToString_closure";
    $desc = $collectedClasses$.Maps_mapToString_closure[1];
    Maps_mapToString_closure.prototype = $desc;
    Maps_mapToString_closure.$__fields__ = ["_box_0", "result"];
    function ListQueue(_table, _head, _tail, _modificationCount, $ti) {
      this._table = _table;
      this._head = _head;
      this._tail = _tail;
      this._modificationCount = _modificationCount;
      this.$ti = $ti;
      this.$deferredAction();
    }
    ListQueue.builtin$cls = "ListQueue";
    if (!("name" in ListQueue))
      ListQueue.name = "ListQueue";
    $desc = $collectedClasses$.ListQueue[1];
    ListQueue.prototype = $desc;
    ListQueue.$__fields__ = ["_table", "_head", "_tail", "_modificationCount"];
    function _ListQueueIterator(_queue, _collection$_end, _modificationCount, _collection$_position, _collection$_current, $ti) {
      this._queue = _queue;
      this._collection$_end = _collection$_end;
      this._modificationCount = _modificationCount;
      this._collection$_position = _collection$_position;
      this._collection$_current = _collection$_current;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _ListQueueIterator.builtin$cls = "_ListQueueIterator";
    if (!("name" in _ListQueueIterator))
      _ListQueueIterator.name = "_ListQueueIterator";
    $desc = $collectedClasses$._ListQueueIterator[1];
    _ListQueueIterator.prototype = $desc;
    _ListQueueIterator.$__fields__ = ["_queue", "_collection$_end", "_modificationCount", "_collection$_position", "_collection$_current"];
    function SetMixin($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    SetMixin.builtin$cls = "SetMixin";
    if (!("name" in SetMixin))
      SetMixin.name = "SetMixin";
    $desc = $collectedClasses$.SetMixin[1];
    SetMixin.prototype = $desc;
    SetMixin.$__fields__ = [];
    function SetBase($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    SetBase.builtin$cls = "SetBase";
    if (!("name" in SetBase))
      SetBase.name = "SetBase";
    $desc = $collectedClasses$.SetBase[1];
    SetBase.prototype = $desc;
    SetBase.$__fields__ = [];
    function _JsonMap(_original, _processed, _data) {
      this._original = _original;
      this._processed = _processed;
      this._data = _data;
      this.$deferredAction();
    }
    _JsonMap.builtin$cls = "_JsonMap";
    if (!("name" in _JsonMap))
      _JsonMap.name = "_JsonMap";
    $desc = $collectedClasses$._JsonMap[1];
    _JsonMap.prototype = $desc;
    _JsonMap.$__fields__ = ["_original", "_processed", "_data"];
    function _JsonMap_values_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _JsonMap_values_closure.builtin$cls = "_JsonMap_values_closure";
    if (!("name" in _JsonMap_values_closure))
      _JsonMap_values_closure.name = "_JsonMap_values_closure";
    $desc = $collectedClasses$._JsonMap_values_closure[1];
    _JsonMap_values_closure.prototype = $desc;
    _JsonMap_values_closure.$__fields__ = ["$this"];
    function _JsonMap_addAll_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _JsonMap_addAll_closure.builtin$cls = "_JsonMap_addAll_closure";
    if (!("name" in _JsonMap_addAll_closure))
      _JsonMap_addAll_closure.name = "_JsonMap_addAll_closure";
    $desc = $collectedClasses$._JsonMap_addAll_closure[1];
    _JsonMap_addAll_closure.prototype = $desc;
    _JsonMap_addAll_closure.$__fields__ = ["$this"];
    function _JsonMapKeyIterable(_parent) {
      this._parent = _parent;
      this.$deferredAction();
    }
    _JsonMapKeyIterable.builtin$cls = "_JsonMapKeyIterable";
    if (!("name" in _JsonMapKeyIterable))
      _JsonMapKeyIterable.name = "_JsonMapKeyIterable";
    $desc = $collectedClasses$._JsonMapKeyIterable[1];
    _JsonMapKeyIterable.prototype = $desc;
    _JsonMapKeyIterable.$__fields__ = ["_parent"];
    function Base64Codec(_encoder) {
      this._encoder = _encoder;
      this.$deferredAction();
    }
    Base64Codec.builtin$cls = "Base64Codec";
    if (!("name" in Base64Codec))
      Base64Codec.name = "Base64Codec";
    $desc = $collectedClasses$.Base64Codec[1];
    Base64Codec.prototype = $desc;
    Base64Codec.$__fields__ = ["_encoder"];
    function Base64Encoder(_urlSafe) {
      this._urlSafe = _urlSafe;
      this.$deferredAction();
    }
    Base64Encoder.builtin$cls = "Base64Encoder";
    if (!("name" in Base64Encoder))
      Base64Encoder.name = "Base64Encoder";
    $desc = $collectedClasses$.Base64Encoder[1];
    Base64Encoder.prototype = $desc;
    Base64Encoder.$__fields__ = ["_urlSafe"];
    function Base64Decoder() {
      this.$deferredAction();
    }
    Base64Decoder.builtin$cls = "Base64Decoder";
    if (!("name" in Base64Decoder))
      Base64Decoder.name = "Base64Decoder";
    $desc = $collectedClasses$.Base64Decoder[1];
    Base64Decoder.prototype = $desc;
    Base64Decoder.$__fields__ = [];
    function _Base64Decoder(_convert$_state) {
      this._convert$_state = _convert$_state;
      this.$deferredAction();
    }
    _Base64Decoder.builtin$cls = "_Base64Decoder";
    if (!("name" in _Base64Decoder))
      _Base64Decoder.name = "_Base64Decoder";
    $desc = $collectedClasses$._Base64Decoder[1];
    _Base64Decoder.prototype = $desc;
    _Base64Decoder.$__fields__ = ["_convert$_state"];
    function Codec($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    Codec.builtin$cls = "Codec";
    if (!("name" in Codec))
      Codec.name = "Codec";
    $desc = $collectedClasses$.Codec[1];
    Codec.prototype = $desc;
    Codec.$__fields__ = [];
    function Converter($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    Converter.builtin$cls = "Converter";
    if (!("name" in Converter))
      Converter.name = "Converter";
    $desc = $collectedClasses$.Converter[1];
    Converter.prototype = $desc;
    Converter.$__fields__ = [];
    function Encoding() {
      this.$deferredAction();
    }
    Encoding.builtin$cls = "Encoding";
    if (!("name" in Encoding))
      Encoding.name = "Encoding";
    $desc = $collectedClasses$.Encoding[1];
    Encoding.prototype = $desc;
    Encoding.$__fields__ = [];
    function JsonUnsupportedObjectError(unsupportedObject, cause) {
      this.unsupportedObject = unsupportedObject;
      this.cause = cause;
      this.$deferredAction();
    }
    JsonUnsupportedObjectError.builtin$cls = "JsonUnsupportedObjectError";
    if (!("name" in JsonUnsupportedObjectError))
      JsonUnsupportedObjectError.name = "JsonUnsupportedObjectError";
    $desc = $collectedClasses$.JsonUnsupportedObjectError[1];
    JsonUnsupportedObjectError.prototype = $desc;
    JsonUnsupportedObjectError.$__fields__ = ["unsupportedObject", "cause"];
    function JsonCyclicError(unsupportedObject, cause) {
      this.unsupportedObject = unsupportedObject;
      this.cause = cause;
      this.$deferredAction();
    }
    JsonCyclicError.builtin$cls = "JsonCyclicError";
    if (!("name" in JsonCyclicError))
      JsonCyclicError.name = "JsonCyclicError";
    $desc = $collectedClasses$.JsonCyclicError[1];
    JsonCyclicError.prototype = $desc;
    JsonCyclicError.$__fields__ = ["unsupportedObject", "cause"];
    function JsonCodec(_reviver, _toEncodable) {
      this._reviver = _reviver;
      this._toEncodable = _toEncodable;
      this.$deferredAction();
    }
    JsonCodec.builtin$cls = "JsonCodec";
    if (!("name" in JsonCodec))
      JsonCodec.name = "JsonCodec";
    $desc = $collectedClasses$.JsonCodec[1];
    JsonCodec.prototype = $desc;
    JsonCodec.$__fields__ = ["_reviver", "_toEncodable"];
    function JsonEncoder(indent, _toEncodable) {
      this.indent = indent;
      this._toEncodable = _toEncodable;
      this.$deferredAction();
    }
    JsonEncoder.builtin$cls = "JsonEncoder";
    if (!("name" in JsonEncoder))
      JsonEncoder.name = "JsonEncoder";
    $desc = $collectedClasses$.JsonEncoder[1];
    JsonEncoder.prototype = $desc;
    JsonEncoder.$__fields__ = ["indent", "_toEncodable"];
    function JsonDecoder(_reviver) {
      this._reviver = _reviver;
      this.$deferredAction();
    }
    JsonDecoder.builtin$cls = "JsonDecoder";
    if (!("name" in JsonDecoder))
      JsonDecoder.name = "JsonDecoder";
    $desc = $collectedClasses$.JsonDecoder[1];
    JsonDecoder.prototype = $desc;
    JsonDecoder.$__fields__ = ["_reviver"];
    function _JsonStringifier() {
      this.$deferredAction();
    }
    _JsonStringifier.builtin$cls = "_JsonStringifier";
    if (!("name" in _JsonStringifier))
      _JsonStringifier.name = "_JsonStringifier";
    $desc = $collectedClasses$._JsonStringifier[1];
    _JsonStringifier.prototype = $desc;
    _JsonStringifier.$__fields__ = [];
    function _JsonStringifier_writeMap_closure(_box_0, keyValueList) {
      this._box_0 = _box_0;
      this.keyValueList = keyValueList;
      this.$deferredAction();
    }
    _JsonStringifier_writeMap_closure.builtin$cls = "_JsonStringifier_writeMap_closure";
    if (!("name" in _JsonStringifier_writeMap_closure))
      _JsonStringifier_writeMap_closure.name = "_JsonStringifier_writeMap_closure";
    $desc = $collectedClasses$._JsonStringifier_writeMap_closure[1];
    _JsonStringifier_writeMap_closure.prototype = $desc;
    _JsonStringifier_writeMap_closure.$__fields__ = ["_box_0", "keyValueList"];
    function _JsonStringStringifier(_sink, _seen, _toEncodable) {
      this._sink = _sink;
      this._seen = _seen;
      this._toEncodable = _toEncodable;
      this.$deferredAction();
    }
    _JsonStringStringifier.builtin$cls = "_JsonStringStringifier";
    if (!("name" in _JsonStringStringifier))
      _JsonStringStringifier.name = "_JsonStringStringifier";
    $desc = $collectedClasses$._JsonStringStringifier[1];
    _JsonStringStringifier.prototype = $desc;
    _JsonStringStringifier.$__fields__ = ["_sink", "_seen", "_toEncodable"];
    function LineSplitter() {
      this.$deferredAction();
    }
    LineSplitter.builtin$cls = "LineSplitter";
    if (!("name" in LineSplitter))
      LineSplitter.name = "LineSplitter";
    $desc = $collectedClasses$.LineSplitter[1];
    LineSplitter.prototype = $desc;
    LineSplitter.$__fields__ = [];
    function LineSplitter_bind_closure() {
      this.$deferredAction();
    }
    LineSplitter_bind_closure.builtin$cls = "LineSplitter_bind_closure";
    if (!("name" in LineSplitter_bind_closure))
      LineSplitter_bind_closure.name = "LineSplitter_bind_closure";
    $desc = $collectedClasses$.LineSplitter_bind_closure[1];
    LineSplitter_bind_closure.prototype = $desc;
    LineSplitter_bind_closure.$__fields__ = [];
    function _LineSplitterSink() {
      this.$deferredAction();
    }
    _LineSplitterSink.builtin$cls = "_LineSplitterSink";
    if (!("name" in _LineSplitterSink))
      _LineSplitterSink.name = "_LineSplitterSink";
    $desc = $collectedClasses$._LineSplitterSink[1];
    _LineSplitterSink.prototype = $desc;
    _LineSplitterSink.$__fields__ = [];
    function _LineSplitterEventSink(_eventSink, _sink, _carry, _skipLeadingLF) {
      this._eventSink = _eventSink;
      this._sink = _sink;
      this._carry = _carry;
      this._skipLeadingLF = _skipLeadingLF;
      this.$deferredAction();
    }
    _LineSplitterEventSink.builtin$cls = "_LineSplitterEventSink";
    if (!("name" in _LineSplitterEventSink))
      _LineSplitterEventSink.name = "_LineSplitterEventSink";
    $desc = $collectedClasses$._LineSplitterEventSink[1];
    _LineSplitterEventSink.prototype = $desc;
    _LineSplitterEventSink.$__fields__ = ["_eventSink", "_sink", "_carry", "_skipLeadingLF"];
    function StringConversionSinkBase() {
      this.$deferredAction();
    }
    StringConversionSinkBase.builtin$cls = "StringConversionSinkBase";
    if (!("name" in StringConversionSinkBase))
      StringConversionSinkBase.name = "StringConversionSinkBase";
    $desc = $collectedClasses$.StringConversionSinkBase[1];
    StringConversionSinkBase.prototype = $desc;
    StringConversionSinkBase.$__fields__ = [];
    function StringConversionSinkMixin() {
      this.$deferredAction();
    }
    StringConversionSinkMixin.builtin$cls = "StringConversionSinkMixin";
    if (!("name" in StringConversionSinkMixin))
      StringConversionSinkMixin.name = "StringConversionSinkMixin";
    $desc = $collectedClasses$.StringConversionSinkMixin[1];
    StringConversionSinkMixin.prototype = $desc;
    StringConversionSinkMixin.$__fields__ = [];
    function _StringAdapterSink(_sink) {
      this._sink = _sink;
      this.$deferredAction();
    }
    _StringAdapterSink.builtin$cls = "_StringAdapterSink";
    if (!("name" in _StringAdapterSink))
      _StringAdapterSink.name = "_StringAdapterSink";
    $desc = $collectedClasses$._StringAdapterSink[1];
    _StringAdapterSink.prototype = $desc;
    _StringAdapterSink.$__fields__ = ["_sink"];
    function Utf8Codec(_allowMalformed) {
      this._allowMalformed = _allowMalformed;
      this.$deferredAction();
    }
    Utf8Codec.builtin$cls = "Utf8Codec";
    if (!("name" in Utf8Codec))
      Utf8Codec.name = "Utf8Codec";
    $desc = $collectedClasses$.Utf8Codec[1];
    Utf8Codec.prototype = $desc;
    Utf8Codec.$__fields__ = ["_allowMalformed"];
    function Utf8Encoder() {
      this.$deferredAction();
    }
    Utf8Encoder.builtin$cls = "Utf8Encoder";
    if (!("name" in Utf8Encoder))
      Utf8Encoder.name = "Utf8Encoder";
    $desc = $collectedClasses$.Utf8Encoder[1];
    Utf8Encoder.prototype = $desc;
    Utf8Encoder.$__fields__ = [];
    function _Utf8Encoder(_carry, _bufferIndex, _buffer) {
      this._carry = _carry;
      this._bufferIndex = _bufferIndex;
      this._buffer = _buffer;
      this.$deferredAction();
    }
    _Utf8Encoder.builtin$cls = "_Utf8Encoder";
    if (!("name" in _Utf8Encoder))
      _Utf8Encoder.name = "_Utf8Encoder";
    $desc = $collectedClasses$._Utf8Encoder[1];
    _Utf8Encoder.prototype = $desc;
    _Utf8Encoder.$__fields__ = ["_carry", "_bufferIndex", "_buffer"];
    function Utf8Decoder(_allowMalformed) {
      this._allowMalformed = _allowMalformed;
      this.$deferredAction();
    }
    Utf8Decoder.builtin$cls = "Utf8Decoder";
    if (!("name" in Utf8Decoder))
      Utf8Decoder.name = "Utf8Decoder";
    $desc = $collectedClasses$.Utf8Decoder[1];
    Utf8Decoder.prototype = $desc;
    Utf8Decoder.$__fields__ = ["_allowMalformed"];
    function _Utf8Decoder(_allowMalformed, _stringSink, _isFirstCharacter, _convert$_value, _expectedUnits, _extraUnits) {
      this._allowMalformed = _allowMalformed;
      this._stringSink = _stringSink;
      this._isFirstCharacter = _isFirstCharacter;
      this._convert$_value = _convert$_value;
      this._expectedUnits = _expectedUnits;
      this._extraUnits = _extraUnits;
      this.$deferredAction();
    }
    _Utf8Decoder.builtin$cls = "_Utf8Decoder";
    if (!("name" in _Utf8Decoder))
      _Utf8Decoder.name = "_Utf8Decoder";
    $desc = $collectedClasses$._Utf8Decoder[1];
    _Utf8Decoder.prototype = $desc;
    _Utf8Decoder.$__fields__ = ["_allowMalformed", "_stringSink", "_isFirstCharacter", "_convert$_value", "_expectedUnits", "_extraUnits"];
    function _Utf8Decoder_convert_scanOneByteCharacters(endIndex) {
      this.endIndex = endIndex;
      this.$deferredAction();
    }
    _Utf8Decoder_convert_scanOneByteCharacters.builtin$cls = "_Utf8Decoder_convert_scanOneByteCharacters";
    if (!("name" in _Utf8Decoder_convert_scanOneByteCharacters))
      _Utf8Decoder_convert_scanOneByteCharacters.name = "_Utf8Decoder_convert_scanOneByteCharacters";
    $desc = $collectedClasses$._Utf8Decoder_convert_scanOneByteCharacters[1];
    _Utf8Decoder_convert_scanOneByteCharacters.prototype = $desc;
    _Utf8Decoder_convert_scanOneByteCharacters.$__fields__ = ["endIndex"];
    function _Utf8Decoder_convert_addSingleBytes($this, codeUnits, startIndex, endIndex) {
      this.$this = $this;
      this.codeUnits = codeUnits;
      this.startIndex = startIndex;
      this.endIndex = endIndex;
      this.$deferredAction();
    }
    _Utf8Decoder_convert_addSingleBytes.builtin$cls = "_Utf8Decoder_convert_addSingleBytes";
    if (!("name" in _Utf8Decoder_convert_addSingleBytes))
      _Utf8Decoder_convert_addSingleBytes.name = "_Utf8Decoder_convert_addSingleBytes";
    $desc = $collectedClasses$._Utf8Decoder_convert_addSingleBytes[1];
    _Utf8Decoder_convert_addSingleBytes.prototype = $desc;
    _Utf8Decoder_convert_addSingleBytes.$__fields__ = ["$this", "codeUnits", "startIndex", "endIndex"];
    function NoSuchMethodError_toString_closure(_box_0, sb) {
      this._box_0 = _box_0;
      this.sb = sb;
      this.$deferredAction();
    }
    NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
    if (!("name" in NoSuchMethodError_toString_closure))
      NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
    $desc = $collectedClasses$.NoSuchMethodError_toString_closure[1];
    NoSuchMethodError_toString_closure.prototype = $desc;
    NoSuchMethodError_toString_closure.$__fields__ = ["_box_0", "sb"];
    function bool() {
      this.$deferredAction();
    }
    bool.builtin$cls = "bool";
    if (!("name" in bool))
      bool.name = "bool";
    $desc = $collectedClasses$.bool[1];
    bool.prototype = $desc;
    bool.$__fields__ = [];
    function Comparable($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    Comparable.builtin$cls = "Comparable";
    if (!("name" in Comparable))
      Comparable.name = "Comparable";
    $desc = $collectedClasses$.Comparable[1];
    Comparable.prototype = $desc;
    Comparable.$__fields__ = [];
    function DateTime(_value, isUtc) {
      this._value = _value;
      this.isUtc = isUtc;
      this.$deferredAction();
    }
    DateTime.builtin$cls = "DateTime";
    if (!("name" in DateTime))
      DateTime.name = "DateTime";
    $desc = $collectedClasses$.DateTime[1];
    DateTime.prototype = $desc;
    DateTime.$__fields__ = ["_value", "isUtc"];
    DateTime.prototype.get$_value = function() {
      return this._value;
    };
    function $double() {
      this.$deferredAction();
    }
    $double.builtin$cls = "$double";
    if (!("name" in $double))
      $double.name = "$double";
    $desc = $collectedClasses$.$double[1];
    $double.prototype = $desc;
    $double.$__fields__ = [];
    function Duration(_duration) {
      this._duration = _duration;
      this.$deferredAction();
    }
    Duration.builtin$cls = "Duration";
    if (!("name" in Duration))
      Duration.name = "Duration";
    $desc = $collectedClasses$.Duration[1];
    Duration.prototype = $desc;
    Duration.$__fields__ = ["_duration"];
    Duration.prototype.get$_duration = function() {
      return this._duration;
    };
    function Duration_toString_sixDigits() {
      this.$deferredAction();
    }
    Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
    if (!("name" in Duration_toString_sixDigits))
      Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
    $desc = $collectedClasses$.Duration_toString_sixDigits[1];
    Duration_toString_sixDigits.prototype = $desc;
    Duration_toString_sixDigits.$__fields__ = [];
    function Duration_toString_twoDigits() {
      this.$deferredAction();
    }
    Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
    if (!("name" in Duration_toString_twoDigits))
      Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
    $desc = $collectedClasses$.Duration_toString_twoDigits[1];
    Duration_toString_twoDigits.prototype = $desc;
    Duration_toString_twoDigits.$__fields__ = [];
    function Error() {
      this.$deferredAction();
    }
    Error.builtin$cls = "Error";
    if (!("name" in Error))
      Error.name = "Error";
    $desc = $collectedClasses$.Error[1];
    Error.prototype = $desc;
    Error.$__fields__ = [];
    function NullThrownError() {
      this.$deferredAction();
    }
    NullThrownError.builtin$cls = "NullThrownError";
    if (!("name" in NullThrownError))
      NullThrownError.name = "NullThrownError";
    $desc = $collectedClasses$.NullThrownError[1];
    NullThrownError.prototype = $desc;
    NullThrownError.$__fields__ = [];
    function ArgumentError(_hasValue, invalidValue, name, message) {
      this._hasValue = _hasValue;
      this.invalidValue = invalidValue;
      this.name = name;
      this.message = message;
      this.$deferredAction();
    }
    ArgumentError.builtin$cls = "ArgumentError";
    if (!("name" in ArgumentError))
      ArgumentError.name = "ArgumentError";
    $desc = $collectedClasses$.ArgumentError[1];
    ArgumentError.prototype = $desc;
    ArgumentError.$__fields__ = ["_hasValue", "invalidValue", "name", "message"];
    ArgumentError.prototype.get$name = function(receiver) {
      return this.name;
    };
    ArgumentError.prototype.get$message = function(receiver) {
      return this.message;
    };
    function RangeError(start, end, _hasValue, invalidValue, name, message) {
      this.start = start;
      this.end = end;
      this._hasValue = _hasValue;
      this.invalidValue = invalidValue;
      this.name = name;
      this.message = message;
      this.$deferredAction();
    }
    RangeError.builtin$cls = "RangeError";
    if (!("name" in RangeError))
      RangeError.name = "RangeError";
    $desc = $collectedClasses$.RangeError[1];
    RangeError.prototype = $desc;
    RangeError.$__fields__ = ["start", "end", "_hasValue", "invalidValue", "name", "message"];
    RangeError.prototype.get$start = function(receiver) {
      return this.start;
    };
    RangeError.prototype.get$end = function(receiver) {
      return this.end;
    };
    function IndexError(indexable, length, _hasValue, invalidValue, name, message) {
      this.indexable = indexable;
      this.length = length;
      this._hasValue = _hasValue;
      this.invalidValue = invalidValue;
      this.name = name;
      this.message = message;
      this.$deferredAction();
    }
    IndexError.builtin$cls = "IndexError";
    if (!("name" in IndexError))
      IndexError.name = "IndexError";
    $desc = $collectedClasses$.IndexError[1];
    IndexError.prototype = $desc;
    IndexError.$__fields__ = ["indexable", "length", "_hasValue", "invalidValue", "name", "message"];
    IndexError.prototype.get$length = function(receiver) {
      return this.length;
    };
    function NoSuchMethodError(_core$_receiver, _memberName, _core$_arguments, _namedArguments, _existingArgumentNames) {
      this._core$_receiver = _core$_receiver;
      this._memberName = _memberName;
      this._core$_arguments = _core$_arguments;
      this._namedArguments = _namedArguments;
      this._existingArgumentNames = _existingArgumentNames;
      this.$deferredAction();
    }
    NoSuchMethodError.builtin$cls = "NoSuchMethodError";
    if (!("name" in NoSuchMethodError))
      NoSuchMethodError.name = "NoSuchMethodError";
    $desc = $collectedClasses$.NoSuchMethodError[1];
    NoSuchMethodError.prototype = $desc;
    NoSuchMethodError.$__fields__ = ["_core$_receiver", "_memberName", "_core$_arguments", "_namedArguments", "_existingArgumentNames"];
    function UnsupportedError(message) {
      this.message = message;
      this.$deferredAction();
    }
    UnsupportedError.builtin$cls = "UnsupportedError";
    if (!("name" in UnsupportedError))
      UnsupportedError.name = "UnsupportedError";
    $desc = $collectedClasses$.UnsupportedError[1];
    UnsupportedError.prototype = $desc;
    UnsupportedError.$__fields__ = ["message"];
    UnsupportedError.prototype.get$message = function(receiver) {
      return this.message;
    };
    function UnimplementedError(message) {
      this.message = message;
      this.$deferredAction();
    }
    UnimplementedError.builtin$cls = "UnimplementedError";
    if (!("name" in UnimplementedError))
      UnimplementedError.name = "UnimplementedError";
    $desc = $collectedClasses$.UnimplementedError[1];
    UnimplementedError.prototype = $desc;
    UnimplementedError.$__fields__ = ["message"];
    UnimplementedError.prototype.get$message = function(receiver) {
      return this.message;
    };
    function StateError(message) {
      this.message = message;
      this.$deferredAction();
    }
    StateError.builtin$cls = "StateError";
    if (!("name" in StateError))
      StateError.name = "StateError";
    $desc = $collectedClasses$.StateError[1];
    StateError.prototype = $desc;
    StateError.$__fields__ = ["message"];
    StateError.prototype.get$message = function(receiver) {
      return this.message;
    };
    function ConcurrentModificationError(modifiedObject) {
      this.modifiedObject = modifiedObject;
      this.$deferredAction();
    }
    ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
    if (!("name" in ConcurrentModificationError))
      ConcurrentModificationError.name = "ConcurrentModificationError";
    $desc = $collectedClasses$.ConcurrentModificationError[1];
    ConcurrentModificationError.prototype = $desc;
    ConcurrentModificationError.$__fields__ = ["modifiedObject"];
    function OutOfMemoryError() {
      this.$deferredAction();
    }
    OutOfMemoryError.builtin$cls = "OutOfMemoryError";
    if (!("name" in OutOfMemoryError))
      OutOfMemoryError.name = "OutOfMemoryError";
    $desc = $collectedClasses$.OutOfMemoryError[1];
    OutOfMemoryError.prototype = $desc;
    OutOfMemoryError.$__fields__ = [];
    function StackOverflowError() {
      this.$deferredAction();
    }
    StackOverflowError.builtin$cls = "StackOverflowError";
    if (!("name" in StackOverflowError))
      StackOverflowError.name = "StackOverflowError";
    $desc = $collectedClasses$.StackOverflowError[1];
    StackOverflowError.prototype = $desc;
    StackOverflowError.$__fields__ = [];
    function CyclicInitializationError(variableName) {
      this.variableName = variableName;
      this.$deferredAction();
    }
    CyclicInitializationError.builtin$cls = "CyclicInitializationError";
    if (!("name" in CyclicInitializationError))
      CyclicInitializationError.name = "CyclicInitializationError";
    $desc = $collectedClasses$.CyclicInitializationError[1];
    CyclicInitializationError.prototype = $desc;
    CyclicInitializationError.$__fields__ = ["variableName"];
    function _Exception(message) {
      this.message = message;
      this.$deferredAction();
    }
    _Exception.builtin$cls = "_Exception";
    if (!("name" in _Exception))
      _Exception.name = "_Exception";
    $desc = $collectedClasses$._Exception[1];
    _Exception.prototype = $desc;
    _Exception.$__fields__ = ["message"];
    _Exception.prototype.get$message = function(receiver) {
      return this.message;
    };
    function FormatException(message, source, offset) {
      this.message = message;
      this.source = source;
      this.offset = offset;
      this.$deferredAction();
    }
    FormatException.builtin$cls = "FormatException";
    if (!("name" in FormatException))
      FormatException.name = "FormatException";
    $desc = $collectedClasses$.FormatException[1];
    FormatException.prototype = $desc;
    FormatException.$__fields__ = ["message", "source", "offset"];
    FormatException.prototype.get$message = function(receiver) {
      return this.message;
    };
    FormatException.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    function IntegerDivisionByZeroException() {
      this.$deferredAction();
    }
    IntegerDivisionByZeroException.builtin$cls = "IntegerDivisionByZeroException";
    if (!("name" in IntegerDivisionByZeroException))
      IntegerDivisionByZeroException.name = "IntegerDivisionByZeroException";
    $desc = $collectedClasses$.IntegerDivisionByZeroException[1];
    IntegerDivisionByZeroException.prototype = $desc;
    IntegerDivisionByZeroException.$__fields__ = [];
    function Expando(name, _jsWeakMapOrKey, $ti) {
      this.name = name;
      this._jsWeakMapOrKey = _jsWeakMapOrKey;
      this.$ti = $ti;
      this.$deferredAction();
    }
    Expando.builtin$cls = "Expando";
    if (!("name" in Expando))
      Expando.name = "Expando";
    $desc = $collectedClasses$.Expando[1];
    Expando.prototype = $desc;
    Expando.$__fields__ = ["name", "_jsWeakMapOrKey"];
    Expando.prototype.get$name = function(receiver) {
      return this.name;
    };
    function Function() {
      this.$deferredAction();
    }
    Function.builtin$cls = "Function";
    if (!("name" in Function))
      Function.name = "Function";
    $desc = $collectedClasses$.Function[1];
    Function.prototype = $desc;
    Function.$__fields__ = [];
    function $int() {
      this.$deferredAction();
    }
    $int.builtin$cls = "$int";
    if (!("name" in $int))
      $int.name = "$int";
    $desc = $collectedClasses$.$int[1];
    $int.prototype = $desc;
    $int.$__fields__ = [];
    function Iterable($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    Iterable.builtin$cls = "Iterable";
    if (!("name" in Iterable))
      Iterable.name = "Iterable";
    $desc = $collectedClasses$.Iterable[1];
    Iterable.prototype = $desc;
    Iterable.$__fields__ = [];
    function Iterator($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    Iterator.builtin$cls = "Iterator";
    if (!("name" in Iterator))
      Iterator.name = "Iterator";
    $desc = $collectedClasses$.Iterator[1];
    Iterator.prototype = $desc;
    Iterator.$__fields__ = [];
    function List($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    List.builtin$cls = "List";
    if (!("name" in List))
      List.name = "List";
    $desc = $collectedClasses$.List[1];
    List.prototype = $desc;
    List.$__fields__ = [];
    function Map($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    Map.builtin$cls = "Map";
    if (!("name" in Map))
      Map.name = "Map";
    $desc = $collectedClasses$.Map[1];
    Map.prototype = $desc;
    Map.$__fields__ = [];
    function Null() {
      this.$deferredAction();
    }
    Null.builtin$cls = "Null";
    if (!("name" in Null))
      Null.name = "Null";
    $desc = $collectedClasses$.Null[1];
    Null.prototype = $desc;
    Null.$__fields__ = [];
    function num() {
      this.$deferredAction();
    }
    num.builtin$cls = "num";
    if (!("name" in num))
      num.name = "num";
    $desc = $collectedClasses$.num[1];
    num.prototype = $desc;
    num.$__fields__ = [];
    function Object() {
      this.$deferredAction();
    }
    Object.builtin$cls = "Object";
    if (!("name" in Object))
      Object.name = "Object";
    $desc = $collectedClasses$.Object[1];
    Object.prototype = $desc;
    Object.$__fields__ = [];
    function Match() {
      this.$deferredAction();
    }
    Match.builtin$cls = "Match";
    if (!("name" in Match))
      Match.name = "Match";
    $desc = $collectedClasses$.Match[1];
    Match.prototype = $desc;
    Match.$__fields__ = [];
    function RegExp() {
      this.$deferredAction();
    }
    RegExp.builtin$cls = "RegExp";
    if (!("name" in RegExp))
      RegExp.name = "RegExp";
    $desc = $collectedClasses$.RegExp[1];
    RegExp.prototype = $desc;
    RegExp.$__fields__ = [];
    function StackTrace() {
      this.$deferredAction();
    }
    StackTrace.builtin$cls = "StackTrace";
    if (!("name" in StackTrace))
      StackTrace.name = "StackTrace";
    $desc = $collectedClasses$.StackTrace[1];
    StackTrace.prototype = $desc;
    StackTrace.$__fields__ = [];
    function _StringStackTrace(_stackTrace) {
      this._stackTrace = _stackTrace;
      this.$deferredAction();
    }
    _StringStackTrace.builtin$cls = "_StringStackTrace";
    if (!("name" in _StringStackTrace))
      _StringStackTrace.name = "_StringStackTrace";
    $desc = $collectedClasses$._StringStackTrace[1];
    _StringStackTrace.prototype = $desc;
    _StringStackTrace.$__fields__ = ["_stackTrace"];
    function Stopwatch(_core$_start, _stop) {
      this._core$_start = _core$_start;
      this._stop = _stop;
      this.$deferredAction();
    }
    Stopwatch.builtin$cls = "Stopwatch";
    if (!("name" in Stopwatch))
      Stopwatch.name = "Stopwatch";
    $desc = $collectedClasses$.Stopwatch[1];
    Stopwatch.prototype = $desc;
    Stopwatch.$__fields__ = ["_core$_start", "_stop"];
    function String() {
      this.$deferredAction();
    }
    String.builtin$cls = "String";
    if (!("name" in String))
      String.name = "String";
    $desc = $collectedClasses$.String[1];
    String.prototype = $desc;
    String.$__fields__ = [];
    function Runes(string) {
      this.string = string;
      this.$deferredAction();
    }
    Runes.builtin$cls = "Runes";
    if (!("name" in Runes))
      Runes.name = "Runes";
    $desc = $collectedClasses$.Runes[1];
    Runes.prototype = $desc;
    Runes.$__fields__ = ["string"];
    function RuneIterator(string, _core$_position, _nextPosition, _currentCodePoint) {
      this.string = string;
      this._core$_position = _core$_position;
      this._nextPosition = _nextPosition;
      this._currentCodePoint = _currentCodePoint;
      this.$deferredAction();
    }
    RuneIterator.builtin$cls = "RuneIterator";
    if (!("name" in RuneIterator))
      RuneIterator.name = "RuneIterator";
    $desc = $collectedClasses$.RuneIterator[1];
    RuneIterator.prototype = $desc;
    RuneIterator.$__fields__ = ["string", "_core$_position", "_nextPosition", "_currentCodePoint"];
    function StringBuffer(_contents) {
      this._contents = _contents;
      this.$deferredAction();
    }
    StringBuffer.builtin$cls = "StringBuffer";
    if (!("name" in StringBuffer))
      StringBuffer.name = "StringBuffer";
    $desc = $collectedClasses$.StringBuffer[1];
    StringBuffer.prototype = $desc;
    StringBuffer.$__fields__ = ["_contents"];
    StringBuffer.prototype.get$_contents = function() {
      return this._contents;
    };
    StringBuffer.prototype.set$_contents = function(v) {
      return this._contents = v;
    };
    function Symbol0() {
      this.$deferredAction();
    }
    Symbol0.builtin$cls = "Symbol0";
    if (!("name" in Symbol0))
      Symbol0.name = "Symbol0";
    $desc = $collectedClasses$.Symbol0[1];
    Symbol0.prototype = $desc;
    Symbol0.$__fields__ = [];
    function Uri__parseIPv4Address_error(host) {
      this.host = host;
      this.$deferredAction();
    }
    Uri__parseIPv4Address_error.builtin$cls = "Uri__parseIPv4Address_error";
    if (!("name" in Uri__parseIPv4Address_error))
      Uri__parseIPv4Address_error.name = "Uri__parseIPv4Address_error";
    $desc = $collectedClasses$.Uri__parseIPv4Address_error[1];
    Uri__parseIPv4Address_error.prototype = $desc;
    Uri__parseIPv4Address_error.$__fields__ = ["host"];
    function Uri_parseIPv6Address_error(host) {
      this.host = host;
      this.$deferredAction();
    }
    Uri_parseIPv6Address_error.builtin$cls = "Uri_parseIPv6Address_error";
    if (!("name" in Uri_parseIPv6Address_error))
      Uri_parseIPv6Address_error.name = "Uri_parseIPv6Address_error";
    $desc = $collectedClasses$.Uri_parseIPv6Address_error[1];
    Uri_parseIPv6Address_error.prototype = $desc;
    Uri_parseIPv6Address_error.$__fields__ = ["host"];
    function Uri_parseIPv6Address_parseHex(host, error) {
      this.host = host;
      this.error = error;
      this.$deferredAction();
    }
    Uri_parseIPv6Address_parseHex.builtin$cls = "Uri_parseIPv6Address_parseHex";
    if (!("name" in Uri_parseIPv6Address_parseHex))
      Uri_parseIPv6Address_parseHex.name = "Uri_parseIPv6Address_parseHex";
    $desc = $collectedClasses$.Uri_parseIPv6Address_parseHex[1];
    Uri_parseIPv6Address_parseHex.prototype = $desc;
    Uri_parseIPv6Address_parseHex.$__fields__ = ["host", "error"];
    function _Uri(scheme, _userInfo, _host, _port, _path, _query, _fragment, _pathSegments, _text, _hashCodeCache, _queryParameters, _queryParameterLists) {
      this.scheme = scheme;
      this._userInfo = _userInfo;
      this._host = _host;
      this._port = _port;
      this._path = _path;
      this._query = _query;
      this._fragment = _fragment;
      this._pathSegments = _pathSegments;
      this._text = _text;
      this._hashCodeCache = _hashCodeCache;
      this._queryParameters = _queryParameters;
      this._queryParameterLists = _queryParameterLists;
      this.$deferredAction();
    }
    _Uri.builtin$cls = "_Uri";
    if (!("name" in _Uri))
      _Uri.name = "_Uri";
    $desc = $collectedClasses$._Uri[1];
    _Uri.prototype = $desc;
    _Uri.$__fields__ = ["scheme", "_userInfo", "_host", "_port", "_path", "_query", "_fragment", "_pathSegments", "_text", "_hashCodeCache", "_queryParameters", "_queryParameterLists"];
    _Uri.prototype.get$scheme = function() {
      return this.scheme;
    };
    function closure3(uri, portStart) {
      this.uri = uri;
      this.portStart = portStart;
      this.$deferredAction();
    }
    closure3.builtin$cls = "closure3";
    if (!("name" in closure3))
      closure3.name = "closure3";
    $desc = $collectedClasses$.closure3[1];
    closure3.prototype = $desc;
    closure3.$__fields__ = ["uri", "portStart"];
    function _Uri__checkNonWindowsPathReservedCharacters_closure(argumentError) {
      this.argumentError = argumentError;
      this.$deferredAction();
    }
    _Uri__checkNonWindowsPathReservedCharacters_closure.builtin$cls = "_Uri__checkNonWindowsPathReservedCharacters_closure";
    if (!("name" in _Uri__checkNonWindowsPathReservedCharacters_closure))
      _Uri__checkNonWindowsPathReservedCharacters_closure.name = "_Uri__checkNonWindowsPathReservedCharacters_closure";
    $desc = $collectedClasses$._Uri__checkNonWindowsPathReservedCharacters_closure[1];
    _Uri__checkNonWindowsPathReservedCharacters_closure.prototype = $desc;
    _Uri__checkNonWindowsPathReservedCharacters_closure.$__fields__ = ["argumentError"];
    function _Uri__makePath_closure() {
      this.$deferredAction();
    }
    _Uri__makePath_closure.builtin$cls = "_Uri__makePath_closure";
    if (!("name" in _Uri__makePath_closure))
      _Uri__makePath_closure.name = "_Uri__makePath_closure";
    $desc = $collectedClasses$._Uri__makePath_closure[1];
    _Uri__makePath_closure.prototype = $desc;
    _Uri__makePath_closure.$__fields__ = [];
    function UriData(_text, _separatorIndices, _uriCache) {
      this._text = _text;
      this._separatorIndices = _separatorIndices;
      this._uriCache = _uriCache;
      this.$deferredAction();
    }
    UriData.builtin$cls = "UriData";
    if (!("name" in UriData))
      UriData.name = "UriData";
    $desc = $collectedClasses$.UriData[1];
    UriData.prototype = $desc;
    UriData.$__fields__ = ["_text", "_separatorIndices", "_uriCache"];
    function _createTables_closure() {
      this.$deferredAction();
    }
    _createTables_closure.builtin$cls = "_createTables_closure";
    if (!("name" in _createTables_closure))
      _createTables_closure.name = "_createTables_closure";
    $desc = $collectedClasses$._createTables_closure[1];
    _createTables_closure.prototype = $desc;
    _createTables_closure.$__fields__ = [];
    function _createTables_build(tables) {
      this.tables = tables;
      this.$deferredAction();
    }
    _createTables_build.builtin$cls = "_createTables_build";
    if (!("name" in _createTables_build))
      _createTables_build.name = "_createTables_build";
    $desc = $collectedClasses$._createTables_build[1];
    _createTables_build.prototype = $desc;
    _createTables_build.$__fields__ = ["tables"];
    function _createTables_setChars() {
      this.$deferredAction();
    }
    _createTables_setChars.builtin$cls = "_createTables_setChars";
    if (!("name" in _createTables_setChars))
      _createTables_setChars.name = "_createTables_setChars";
    $desc = $collectedClasses$._createTables_setChars[1];
    _createTables_setChars.prototype = $desc;
    _createTables_setChars.$__fields__ = [];
    function _createTables_setRange() {
      this.$deferredAction();
    }
    _createTables_setRange.builtin$cls = "_createTables_setRange";
    if (!("name" in _createTables_setRange))
      _createTables_setRange.name = "_createTables_setRange";
    $desc = $collectedClasses$._createTables_setRange[1];
    _createTables_setRange.prototype = $desc;
    _createTables_setRange.$__fields__ = [];
    function _SimpleUri(_uri, _schemeEnd, _hostStart, _portStart, _pathStart, _queryStart, _fragmentStart, _schemeCache, _hashCodeCache) {
      this._uri = _uri;
      this._schemeEnd = _schemeEnd;
      this._hostStart = _hostStart;
      this._portStart = _portStart;
      this._pathStart = _pathStart;
      this._queryStart = _queryStart;
      this._fragmentStart = _fragmentStart;
      this._schemeCache = _schemeCache;
      this._hashCodeCache = _hashCodeCache;
      this.$deferredAction();
    }
    _SimpleUri.builtin$cls = "_SimpleUri";
    if (!("name" in _SimpleUri))
      _SimpleUri.name = "_SimpleUri";
    $desc = $collectedClasses$._SimpleUri[1];
    _SimpleUri.prototype = $desc;
    _SimpleUri.$__fields__ = ["_uri", "_schemeEnd", "_hostStart", "_portStart", "_pathStart", "_queryStart", "_fragmentStart", "_schemeCache", "_hashCodeCache"];
    function HtmlElement() {
      this.$deferredAction();
    }
    HtmlElement.builtin$cls = "HtmlElement";
    if (!("name" in HtmlElement))
      HtmlElement.name = "HtmlElement";
    $desc = $collectedClasses$.HtmlElement[1];
    HtmlElement.prototype = $desc;
    HtmlElement.$__fields__ = [];
    function AnchorElement() {
      this.$deferredAction();
    }
    AnchorElement.builtin$cls = "AnchorElement";
    if (!("name" in AnchorElement))
      AnchorElement.name = "AnchorElement";
    $desc = $collectedClasses$.AnchorElement[1];
    AnchorElement.prototype = $desc;
    AnchorElement.$__fields__ = [];
    AnchorElement.prototype.get$target = function(receiver) {
      return receiver.target;
    };
    AnchorElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    AnchorElement.prototype.get$hostname = function(receiver) {
      return receiver.hostname;
    };
    AnchorElement.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    AnchorElement.prototype.set$href = function(receiver, v) {
      return receiver.href = v;
    };
    AnchorElement.prototype.get$port = function(receiver) {
      return receiver.port;
    };
    AnchorElement.prototype.get$protocol = function(receiver) {
      return receiver.protocol;
    };
    AnchorElement.prototype.get$search = function(receiver) {
      return receiver.search;
    };
    function Animation() {
      this.$deferredAction();
    }
    Animation.builtin$cls = "Animation";
    if (!("name" in Animation))
      Animation.name = "Animation";
    $desc = $collectedClasses$.Animation[1];
    Animation.prototype = $desc;
    Animation.$__fields__ = [];
    function ApplicationCacheErrorEvent() {
      this.$deferredAction();
    }
    ApplicationCacheErrorEvent.builtin$cls = "ApplicationCacheErrorEvent";
    if (!("name" in ApplicationCacheErrorEvent))
      ApplicationCacheErrorEvent.name = "ApplicationCacheErrorEvent";
    $desc = $collectedClasses$.ApplicationCacheErrorEvent[1];
    ApplicationCacheErrorEvent.prototype = $desc;
    ApplicationCacheErrorEvent.$__fields__ = [];
    ApplicationCacheErrorEvent.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    ApplicationCacheErrorEvent.prototype.get$url = function(receiver) {
      return receiver.url;
    };
    function AreaElement() {
      this.$deferredAction();
    }
    AreaElement.builtin$cls = "AreaElement";
    if (!("name" in AreaElement))
      AreaElement.name = "AreaElement";
    $desc = $collectedClasses$.AreaElement[1];
    AreaElement.prototype = $desc;
    AreaElement.$__fields__ = [];
    AreaElement.prototype.get$target = function(receiver) {
      return receiver.target;
    };
    AreaElement.prototype.get$hostname = function(receiver) {
      return receiver.hostname;
    };
    AreaElement.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    AreaElement.prototype.set$href = function(receiver, v) {
      return receiver.href = v;
    };
    AreaElement.prototype.get$port = function(receiver) {
      return receiver.port;
    };
    AreaElement.prototype.get$protocol = function(receiver) {
      return receiver.protocol;
    };
    AreaElement.prototype.get$search = function(receiver) {
      return receiver.search;
    };
    function AudioTrack() {
      this.$deferredAction();
    }
    AudioTrack.builtin$cls = "AudioTrack";
    if (!("name" in AudioTrack))
      AudioTrack.name = "AudioTrack";
    $desc = $collectedClasses$.AudioTrack[1];
    AudioTrack.prototype = $desc;
    AudioTrack.$__fields__ = [];
    AudioTrack.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    AudioTrack.prototype.get$kind = function(receiver) {
      return receiver.kind;
    };
    function AudioTrackList() {
      this.$deferredAction();
    }
    AudioTrackList.builtin$cls = "AudioTrackList";
    if (!("name" in AudioTrackList))
      AudioTrackList.name = "AudioTrackList";
    $desc = $collectedClasses$.AudioTrackList[1];
    AudioTrackList.prototype = $desc;
    AudioTrackList.$__fields__ = [];
    AudioTrackList.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function BaseElement() {
      this.$deferredAction();
    }
    BaseElement.builtin$cls = "BaseElement";
    if (!("name" in BaseElement))
      BaseElement.name = "BaseElement";
    $desc = $collectedClasses$.BaseElement[1];
    BaseElement.prototype = $desc;
    BaseElement.$__fields__ = [];
    BaseElement.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    BaseElement.prototype.set$href = function(receiver, v) {
      return receiver.href = v;
    };
    BaseElement.prototype.get$target = function(receiver) {
      return receiver.target;
    };
    function BatteryManager() {
      this.$deferredAction();
    }
    BatteryManager.builtin$cls = "BatteryManager";
    if (!("name" in BatteryManager))
      BatteryManager.name = "BatteryManager";
    $desc = $collectedClasses$.BatteryManager[1];
    BatteryManager.prototype = $desc;
    BatteryManager.$__fields__ = [];
    BatteryManager.prototype.get$level = function(receiver) {
      return receiver.level;
    };
    function Blob() {
      this.$deferredAction();
    }
    Blob.builtin$cls = "Blob";
    if (!("name" in Blob))
      Blob.name = "Blob";
    $desc = $collectedClasses$.Blob[1];
    Blob.prototype = $desc;
    Blob.$__fields__ = [];
    Blob.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function BluetoothDevice() {
      this.$deferredAction();
    }
    BluetoothDevice.builtin$cls = "BluetoothDevice";
    if (!("name" in BluetoothDevice))
      BluetoothDevice.name = "BluetoothDevice";
    $desc = $collectedClasses$.BluetoothDevice[1];
    BluetoothDevice.prototype = $desc;
    BluetoothDevice.$__fields__ = [];
    BluetoothDevice.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function Body() {
      this.$deferredAction();
    }
    Body.builtin$cls = "Body";
    if (!("name" in Body))
      Body.name = "Body";
    $desc = $collectedClasses$.Body[1];
    Body.prototype = $desc;
    Body.$__fields__ = [];
    function BodyElement() {
      this.$deferredAction();
    }
    BodyElement.builtin$cls = "BodyElement";
    if (!("name" in BodyElement))
      BodyElement.name = "BodyElement";
    $desc = $collectedClasses$.BodyElement[1];
    BodyElement.prototype = $desc;
    BodyElement.$__fields__ = [];
    function ButtonElement() {
      this.$deferredAction();
    }
    ButtonElement.builtin$cls = "ButtonElement";
    if (!("name" in ButtonElement))
      ButtonElement.name = "ButtonElement";
    $desc = $collectedClasses$.ButtonElement[1];
    ButtonElement.prototype = $desc;
    ButtonElement.$__fields__ = [];
    ButtonElement.prototype.set$disabled = function(receiver, v) {
      return receiver.disabled = v;
    };
    ButtonElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    ButtonElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    ButtonElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function CanvasElement() {
      this.$deferredAction();
    }
    CanvasElement.builtin$cls = "CanvasElement";
    if (!("name" in CanvasElement))
      CanvasElement.name = "CanvasElement";
    $desc = $collectedClasses$.CanvasElement[1];
    CanvasElement.prototype = $desc;
    CanvasElement.$__fields__ = [];
    CanvasElement.prototype.set$height = function(receiver, v) {
      return receiver.height = v;
    };
    CanvasElement.prototype.set$width = function(receiver, v) {
      return receiver.width = v;
    };
    function CanvasRenderingContext2D() {
      this.$deferredAction();
    }
    CanvasRenderingContext2D.builtin$cls = "CanvasRenderingContext2D";
    if (!("name" in CanvasRenderingContext2D))
      CanvasRenderingContext2D.name = "CanvasRenderingContext2D";
    $desc = $collectedClasses$.CanvasRenderingContext2D[1];
    CanvasRenderingContext2D.prototype = $desc;
    CanvasRenderingContext2D.$__fields__ = [];
    function CharacterData() {
      this.$deferredAction();
    }
    CharacterData.builtin$cls = "CharacterData";
    if (!("name" in CharacterData))
      CharacterData.name = "CharacterData";
    $desc = $collectedClasses$.CharacterData[1];
    CharacterData.prototype = $desc;
    CharacterData.$__fields__ = [];
    CharacterData.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    CharacterData.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function Client() {
      this.$deferredAction();
    }
    Client.builtin$cls = "Client";
    if (!("name" in Client))
      Client.name = "Client";
    $desc = $collectedClasses$.Client[1];
    Client.prototype = $desc;
    Client.$__fields__ = [];
    Client.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    Client.prototype.get$url = function(receiver) {
      return receiver.url;
    };
    function CloseEvent() {
      this.$deferredAction();
    }
    CloseEvent.builtin$cls = "CloseEvent";
    if (!("name" in CloseEvent))
      CloseEvent.name = "CloseEvent";
    $desc = $collectedClasses$.CloseEvent[1];
    CloseEvent.prototype = $desc;
    CloseEvent.$__fields__ = [];
    CloseEvent.prototype.get$code = function(receiver) {
      return receiver.code;
    };
    function CompositionEvent() {
      this.$deferredAction();
    }
    CompositionEvent.builtin$cls = "CompositionEvent";
    if (!("name" in CompositionEvent))
      CompositionEvent.name = "CompositionEvent";
    $desc = $collectedClasses$.CompositionEvent[1];
    CompositionEvent.prototype = $desc;
    CompositionEvent.$__fields__ = [];
    CompositionEvent.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    function CompositorWorker() {
      this.$deferredAction();
    }
    CompositorWorker.builtin$cls = "CompositorWorker";
    if (!("name" in CompositorWorker))
      CompositorWorker.name = "CompositorWorker";
    $desc = $collectedClasses$.CompositorWorker[1];
    CompositorWorker.prototype = $desc;
    CompositorWorker.$__fields__ = [];
    function Credential() {
      this.$deferredAction();
    }
    Credential.builtin$cls = "Credential";
    if (!("name" in Credential))
      Credential.name = "Credential";
    $desc = $collectedClasses$.Credential[1];
    Credential.prototype = $desc;
    Credential.$__fields__ = [];
    Credential.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    Credential.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    Credential.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function CrossOriginConnectEvent() {
      this.$deferredAction();
    }
    CrossOriginConnectEvent.builtin$cls = "CrossOriginConnectEvent";
    if (!("name" in CrossOriginConnectEvent))
      CrossOriginConnectEvent.name = "CrossOriginConnectEvent";
    $desc = $collectedClasses$.CrossOriginConnectEvent[1];
    CrossOriginConnectEvent.prototype = $desc;
    CrossOriginConnectEvent.$__fields__ = [];
    CrossOriginConnectEvent.prototype.get$client = function(receiver) {
      return receiver.client;
    };
    function Crypto() {
      this.$deferredAction();
    }
    Crypto.builtin$cls = "Crypto";
    if (!("name" in Crypto))
      Crypto.name = "Crypto";
    $desc = $collectedClasses$.Crypto[1];
    Crypto.prototype = $desc;
    Crypto.$__fields__ = [];
    Crypto.prototype.get$subtle = function(receiver) {
      return receiver.subtle;
    };
    function CryptoKey() {
      this.$deferredAction();
    }
    CryptoKey.builtin$cls = "CryptoKey";
    if (!("name" in CryptoKey))
      CryptoKey.name = "CryptoKey";
    $desc = $collectedClasses$.CryptoKey[1];
    CryptoKey.prototype = $desc;
    CryptoKey.$__fields__ = [];
    CryptoKey.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function CssFontFaceRule() {
      this.$deferredAction();
    }
    CssFontFaceRule.builtin$cls = "CssFontFaceRule";
    if (!("name" in CssFontFaceRule))
      CssFontFaceRule.name = "CssFontFaceRule";
    $desc = $collectedClasses$.CssFontFaceRule[1];
    CssFontFaceRule.prototype = $desc;
    CssFontFaceRule.$__fields__ = [];
    CssFontFaceRule.prototype.get$style = function(receiver) {
      return receiver.style;
    };
    function CssImportRule() {
      this.$deferredAction();
    }
    CssImportRule.builtin$cls = "CssImportRule";
    if (!("name" in CssImportRule))
      CssImportRule.name = "CssImportRule";
    $desc = $collectedClasses$.CssImportRule[1];
    CssImportRule.prototype = $desc;
    CssImportRule.$__fields__ = [];
    CssImportRule.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    function CssKeyframeRule() {
      this.$deferredAction();
    }
    CssKeyframeRule.builtin$cls = "CssKeyframeRule";
    if (!("name" in CssKeyframeRule))
      CssKeyframeRule.name = "CssKeyframeRule";
    $desc = $collectedClasses$.CssKeyframeRule[1];
    CssKeyframeRule.prototype = $desc;
    CssKeyframeRule.$__fields__ = [];
    CssKeyframeRule.prototype.get$style = function(receiver) {
      return receiver.style;
    };
    function CssKeyframesRule() {
      this.$deferredAction();
    }
    CssKeyframesRule.builtin$cls = "CssKeyframesRule";
    if (!("name" in CssKeyframesRule))
      CssKeyframesRule.name = "CssKeyframesRule";
    $desc = $collectedClasses$.CssKeyframesRule[1];
    CssKeyframesRule.prototype = $desc;
    CssKeyframesRule.$__fields__ = [];
    CssKeyframesRule.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function CssPageRule() {
      this.$deferredAction();
    }
    CssPageRule.builtin$cls = "CssPageRule";
    if (!("name" in CssPageRule))
      CssPageRule.name = "CssPageRule";
    $desc = $collectedClasses$.CssPageRule[1];
    CssPageRule.prototype = $desc;
    CssPageRule.$__fields__ = [];
    CssPageRule.prototype.get$style = function(receiver) {
      return receiver.style;
    };
    function CssRule() {
      this.$deferredAction();
    }
    CssRule.builtin$cls = "CssRule";
    if (!("name" in CssRule))
      CssRule.name = "CssRule";
    $desc = $collectedClasses$.CssRule[1];
    CssRule.prototype = $desc;
    CssRule.$__fields__ = [];
    CssRule.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function CssStyleDeclaration() {
      this.$deferredAction();
    }
    CssStyleDeclaration.builtin$cls = "CssStyleDeclaration";
    if (!("name" in CssStyleDeclaration))
      CssStyleDeclaration.name = "CssStyleDeclaration";
    $desc = $collectedClasses$.CssStyleDeclaration[1];
    CssStyleDeclaration.prototype = $desc;
    CssStyleDeclaration.$__fields__ = [];
    CssStyleDeclaration.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function Interceptor_CssStyleDeclarationBase() {
      this.$deferredAction();
    }
    Interceptor_CssStyleDeclarationBase.builtin$cls = "Interceptor_CssStyleDeclarationBase";
    if (!("name" in Interceptor_CssStyleDeclarationBase))
      Interceptor_CssStyleDeclarationBase.name = "Interceptor_CssStyleDeclarationBase";
    $desc = $collectedClasses$.Interceptor_CssStyleDeclarationBase[1];
    Interceptor_CssStyleDeclarationBase.prototype = $desc;
    Interceptor_CssStyleDeclarationBase.$__fields__ = [];
    function _CssStyleDeclarationSet(_elementIterable, _elementCssStyleDeclarationSetIterable) {
      this._elementIterable = _elementIterable;
      this._elementCssStyleDeclarationSetIterable = _elementCssStyleDeclarationSetIterable;
      this.$deferredAction();
    }
    _CssStyleDeclarationSet.builtin$cls = "_CssStyleDeclarationSet";
    if (!("name" in _CssStyleDeclarationSet))
      _CssStyleDeclarationSet.name = "_CssStyleDeclarationSet";
    $desc = $collectedClasses$._CssStyleDeclarationSet[1];
    _CssStyleDeclarationSet.prototype = $desc;
    _CssStyleDeclarationSet.$__fields__ = ["_elementIterable", "_elementCssStyleDeclarationSetIterable"];
    function Object_CssStyleDeclarationBase() {
      this.$deferredAction();
    }
    Object_CssStyleDeclarationBase.builtin$cls = "Object_CssStyleDeclarationBase";
    if (!("name" in Object_CssStyleDeclarationBase))
      Object_CssStyleDeclarationBase.name = "Object_CssStyleDeclarationBase";
    $desc = $collectedClasses$.Object_CssStyleDeclarationBase[1];
    Object_CssStyleDeclarationBase.prototype = $desc;
    Object_CssStyleDeclarationBase.$__fields__ = [];
    function _CssStyleDeclarationSet_closure() {
      this.$deferredAction();
    }
    _CssStyleDeclarationSet_closure.builtin$cls = "_CssStyleDeclarationSet_closure";
    if (!("name" in _CssStyleDeclarationSet_closure))
      _CssStyleDeclarationSet_closure.name = "_CssStyleDeclarationSet_closure";
    $desc = $collectedClasses$._CssStyleDeclarationSet_closure[1];
    _CssStyleDeclarationSet_closure.prototype = $desc;
    _CssStyleDeclarationSet_closure.$__fields__ = [];
    function _CssStyleDeclarationSet_setProperty_closure(propertyName, value, priority) {
      this.propertyName = propertyName;
      this.value = value;
      this.priority = priority;
      this.$deferredAction();
    }
    _CssStyleDeclarationSet_setProperty_closure.builtin$cls = "_CssStyleDeclarationSet_setProperty_closure";
    if (!("name" in _CssStyleDeclarationSet_setProperty_closure))
      _CssStyleDeclarationSet_setProperty_closure.name = "_CssStyleDeclarationSet_setProperty_closure";
    $desc = $collectedClasses$._CssStyleDeclarationSet_setProperty_closure[1];
    _CssStyleDeclarationSet_setProperty_closure.prototype = $desc;
    _CssStyleDeclarationSet_setProperty_closure.$__fields__ = ["propertyName", "value", "priority"];
    function CssStyleDeclarationBase() {
      this.$deferredAction();
    }
    CssStyleDeclarationBase.builtin$cls = "CssStyleDeclarationBase";
    if (!("name" in CssStyleDeclarationBase))
      CssStyleDeclarationBase.name = "CssStyleDeclarationBase";
    $desc = $collectedClasses$.CssStyleDeclarationBase[1];
    CssStyleDeclarationBase.prototype = $desc;
    CssStyleDeclarationBase.$__fields__ = [];
    function CssStyleRule() {
      this.$deferredAction();
    }
    CssStyleRule.builtin$cls = "CssStyleRule";
    if (!("name" in CssStyleRule))
      CssStyleRule.name = "CssStyleRule";
    $desc = $collectedClasses$.CssStyleRule[1];
    CssStyleRule.prototype = $desc;
    CssStyleRule.$__fields__ = [];
    CssStyleRule.prototype.get$style = function(receiver) {
      return receiver.style;
    };
    function CssViewportRule() {
      this.$deferredAction();
    }
    CssViewportRule.builtin$cls = "CssViewportRule";
    if (!("name" in CssViewportRule))
      CssViewportRule.name = "CssViewportRule";
    $desc = $collectedClasses$.CssViewportRule[1];
    CssViewportRule.prototype = $desc;
    CssViewportRule.$__fields__ = [];
    CssViewportRule.prototype.get$style = function(receiver) {
      return receiver.style;
    };
    function CustomEvent() {
      this.$deferredAction();
    }
    CustomEvent.builtin$cls = "CustomEvent";
    if (!("name" in CustomEvent))
      CustomEvent.name = "CustomEvent";
    $desc = $collectedClasses$.CustomEvent[1];
    CustomEvent.prototype = $desc;
    CustomEvent.$__fields__ = [];
    function DataTransfer() {
      this.$deferredAction();
    }
    DataTransfer.builtin$cls = "DataTransfer";
    if (!("name" in DataTransfer))
      DataTransfer.name = "DataTransfer";
    $desc = $collectedClasses$.DataTransfer[1];
    DataTransfer.prototype = $desc;
    DataTransfer.$__fields__ = [];
    DataTransfer.prototype.get$files = function(receiver) {
      return receiver.files;
    };
    function DataTransferItem() {
      this.$deferredAction();
    }
    DataTransferItem.builtin$cls = "DataTransferItem";
    if (!("name" in DataTransferItem))
      DataTransferItem.name = "DataTransferItem";
    $desc = $collectedClasses$.DataTransferItem[1];
    DataTransferItem.prototype = $desc;
    DataTransferItem.$__fields__ = [];
    DataTransferItem.prototype.get$kind = function(receiver) {
      return receiver.kind;
    };
    DataTransferItem.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function DataTransferItemList() {
      this.$deferredAction();
    }
    DataTransferItemList.builtin$cls = "DataTransferItemList";
    if (!("name" in DataTransferItemList))
      DataTransferItemList.name = "DataTransferItemList";
    $desc = $collectedClasses$.DataTransferItemList[1];
    DataTransferItemList.prototype = $desc;
    DataTransferItemList.$__fields__ = [];
    DataTransferItemList.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function DeviceAcceleration() {
      this.$deferredAction();
    }
    DeviceAcceleration.builtin$cls = "DeviceAcceleration";
    if (!("name" in DeviceAcceleration))
      DeviceAcceleration.name = "DeviceAcceleration";
    $desc = $collectedClasses$.DeviceAcceleration[1];
    DeviceAcceleration.prototype = $desc;
    DeviceAcceleration.$__fields__ = [];
    DeviceAcceleration.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    DeviceAcceleration.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function DeviceLightEvent() {
      this.$deferredAction();
    }
    DeviceLightEvent.builtin$cls = "DeviceLightEvent";
    if (!("name" in DeviceLightEvent))
      DeviceLightEvent.name = "DeviceLightEvent";
    $desc = $collectedClasses$.DeviceLightEvent[1];
    DeviceLightEvent.prototype = $desc;
    DeviceLightEvent.$__fields__ = [];
    DeviceLightEvent.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function DirectoryEntry() {
      this.$deferredAction();
    }
    DirectoryEntry.builtin$cls = "DirectoryEntry";
    if (!("name" in DirectoryEntry))
      DirectoryEntry.name = "DirectoryEntry";
    $desc = $collectedClasses$.DirectoryEntry[1];
    DirectoryEntry.prototype = $desc;
    DirectoryEntry.$__fields__ = [];
    function DirectoryEntry__getFile_closure0(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    DirectoryEntry__getFile_closure0.builtin$cls = "DirectoryEntry__getFile_closure0";
    if (!("name" in DirectoryEntry__getFile_closure0))
      DirectoryEntry__getFile_closure0.name = "DirectoryEntry__getFile_closure0";
    $desc = $collectedClasses$.DirectoryEntry__getFile_closure0[1];
    DirectoryEntry__getFile_closure0.prototype = $desc;
    DirectoryEntry__getFile_closure0.$__fields__ = ["completer"];
    function DirectoryEntry__getFile_closure(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    DirectoryEntry__getFile_closure.builtin$cls = "DirectoryEntry__getFile_closure";
    if (!("name" in DirectoryEntry__getFile_closure))
      DirectoryEntry__getFile_closure.name = "DirectoryEntry__getFile_closure";
    $desc = $collectedClasses$.DirectoryEntry__getFile_closure[1];
    DirectoryEntry__getFile_closure.prototype = $desc;
    DirectoryEntry__getFile_closure.$__fields__ = ["completer"];
    function DivElement() {
      this.$deferredAction();
    }
    DivElement.builtin$cls = "DivElement";
    if (!("name" in DivElement))
      DivElement.name = "DivElement";
    $desc = $collectedClasses$.DivElement[1];
    DivElement.prototype = $desc;
    DivElement.$__fields__ = [];
    function Document0() {
      this.$deferredAction();
    }
    Document0.builtin$cls = "Document0";
    if (!("name" in Document0))
      Document0.name = "Document0";
    $desc = $collectedClasses$.Document0[1];
    Document0.prototype = $desc;
    Document0.$__fields__ = [];
    function DocumentFragment() {
      this.$deferredAction();
    }
    DocumentFragment.builtin$cls = "DocumentFragment";
    if (!("name" in DocumentFragment))
      DocumentFragment.name = "DocumentFragment";
    $desc = $collectedClasses$.DocumentFragment[1];
    DocumentFragment.prototype = $desc;
    DocumentFragment.$__fields__ = [];
    function DomError() {
      this.$deferredAction();
    }
    DomError.builtin$cls = "DomError";
    if (!("name" in DomError))
      DomError.name = "DomError";
    $desc = $collectedClasses$.DomError[1];
    DomError.prototype = $desc;
    DomError.$__fields__ = [];
    DomError.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    DomError.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function DomException() {
      this.$deferredAction();
    }
    DomException.builtin$cls = "DomException";
    if (!("name" in DomException))
      DomException.name = "DomException";
    $desc = $collectedClasses$.DomException[1];
    DomException.prototype = $desc;
    DomException.$__fields__ = [];
    DomException.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function DomIterator() {
      this.$deferredAction();
    }
    DomIterator.builtin$cls = "DomIterator";
    if (!("name" in DomIterator))
      DomIterator.name = "DomIterator";
    $desc = $collectedClasses$.DomIterator[1];
    DomIterator.prototype = $desc;
    DomIterator.$__fields__ = [];
    function DomPoint() {
      this.$deferredAction();
    }
    DomPoint.builtin$cls = "DomPoint";
    if (!("name" in DomPoint))
      DomPoint.name = "DomPoint";
    $desc = $collectedClasses$.DomPoint[1];
    DomPoint.prototype = $desc;
    DomPoint.$__fields__ = [];
    function DomPointReadOnly() {
      this.$deferredAction();
    }
    DomPointReadOnly.builtin$cls = "DomPointReadOnly";
    if (!("name" in DomPointReadOnly))
      DomPointReadOnly.name = "DomPointReadOnly";
    $desc = $collectedClasses$.DomPointReadOnly[1];
    DomPointReadOnly.prototype = $desc;
    DomPointReadOnly.$__fields__ = [];
    function DomRectReadOnly() {
      this.$deferredAction();
    }
    DomRectReadOnly.builtin$cls = "DomRectReadOnly";
    if (!("name" in DomRectReadOnly))
      DomRectReadOnly.name = "DomRectReadOnly";
    $desc = $collectedClasses$.DomRectReadOnly[1];
    DomRectReadOnly.prototype = $desc;
    DomRectReadOnly.$__fields__ = [];
    function DomSettableTokenList() {
      this.$deferredAction();
    }
    DomSettableTokenList.builtin$cls = "DomSettableTokenList";
    if (!("name" in DomSettableTokenList))
      DomSettableTokenList.name = "DomSettableTokenList";
    $desc = $collectedClasses$.DomSettableTokenList[1];
    DomSettableTokenList.prototype = $desc;
    DomSettableTokenList.$__fields__ = [];
    DomSettableTokenList.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function DomStringList() {
      this.$deferredAction();
    }
    DomStringList.builtin$cls = "DomStringList";
    if (!("name" in DomStringList))
      DomStringList.name = "DomStringList";
    $desc = $collectedClasses$.DomStringList[1];
    DomStringList.prototype = $desc;
    DomStringList.$__fields__ = [];
    function Interceptor_ListMixin() {
      this.$deferredAction();
    }
    Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
    if (!("name" in Interceptor_ListMixin))
      Interceptor_ListMixin.name = "Interceptor_ListMixin";
    $desc = $collectedClasses$.Interceptor_ListMixin[1];
    Interceptor_ListMixin.prototype = $desc;
    Interceptor_ListMixin.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin))
      Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin[1];
    Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin.$__fields__ = [];
    function DomTokenList() {
      this.$deferredAction();
    }
    DomTokenList.builtin$cls = "DomTokenList";
    if (!("name" in DomTokenList))
      DomTokenList.name = "DomTokenList";
    $desc = $collectedClasses$.DomTokenList[1];
    DomTokenList.prototype = $desc;
    DomTokenList.$__fields__ = [];
    DomTokenList.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function _ChildrenElementList(_html$_element, _childElements) {
      this._html$_element = _html$_element;
      this._childElements = _childElements;
      this.$deferredAction();
    }
    _ChildrenElementList.builtin$cls = "_ChildrenElementList";
    if (!("name" in _ChildrenElementList))
      _ChildrenElementList.name = "_ChildrenElementList";
    $desc = $collectedClasses$._ChildrenElementList[1];
    _ChildrenElementList.prototype = $desc;
    _ChildrenElementList.$__fields__ = ["_html$_element", "_childElements"];
    _ChildrenElementList.prototype.get$_html$_element = function() {
      return this._html$_element;
    };
    function _FrozenElementList(_nodeList, $ti) {
      this._nodeList = _nodeList;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _FrozenElementList.builtin$cls = "_FrozenElementList";
    if (!("name" in _FrozenElementList))
      _FrozenElementList.name = "_FrozenElementList";
    $desc = $collectedClasses$._FrozenElementList[1];
    _FrozenElementList.prototype = $desc;
    _FrozenElementList.$__fields__ = ["_nodeList"];
    function Element() {
      this.$deferredAction();
    }
    Element.builtin$cls = "Element";
    if (!("name" in Element))
      Element.name = "Element";
    $desc = $collectedClasses$.Element[1];
    Element.prototype = $desc;
    Element.$__fields__ = [];
    Element.prototype.get$style = function(receiver) {
      return receiver.style;
    };
    Element.prototype.set$tabIndex = function(receiver, v) {
      return receiver.tabIndex = v;
    };
    Element.prototype.get$title = function(receiver) {
      return receiver.title;
    };
    Element.prototype.set$title = function(receiver, v) {
      return receiver.title = v;
    };
    Element.prototype.get$className = function(receiver) {
      return receiver.className;
    };
    Element.prototype.set$className = function(receiver, v) {
      return receiver.className = v;
    };
    Element.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    Element.prototype.get$tagName = function(receiver) {
      return receiver.tagName;
    };
    function closure1() {
      this.$deferredAction();
    }
    closure1.builtin$cls = "closure1";
    if (!("name" in closure1))
      closure1.name = "closure1";
    $desc = $collectedClasses$.closure1[1];
    closure1.prototype = $desc;
    closure1.$__fields__ = [];
    function ScrollAlignment(_html$_value) {
      this._html$_value = _html$_value;
      this.$deferredAction();
    }
    ScrollAlignment.builtin$cls = "ScrollAlignment";
    if (!("name" in ScrollAlignment))
      ScrollAlignment.name = "ScrollAlignment";
    $desc = $collectedClasses$.ScrollAlignment[1];
    ScrollAlignment.prototype = $desc;
    ScrollAlignment.$__fields__ = ["_html$_value"];
    function EmbedElement() {
      this.$deferredAction();
    }
    EmbedElement.builtin$cls = "EmbedElement";
    if (!("name" in EmbedElement))
      EmbedElement.name = "EmbedElement";
    $desc = $collectedClasses$.EmbedElement[1];
    EmbedElement.prototype = $desc;
    EmbedElement.$__fields__ = [];
    EmbedElement.prototype.set$height = function(receiver, v) {
      return receiver.height = v;
    };
    EmbedElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    EmbedElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    EmbedElement.prototype.set$width = function(receiver, v) {
      return receiver.width = v;
    };
    function Entry() {
      this.$deferredAction();
    }
    Entry.builtin$cls = "Entry";
    if (!("name" in Entry))
      Entry.name = "Entry";
    $desc = $collectedClasses$.Entry[1];
    Entry.prototype = $desc;
    Entry.$__fields__ = [];
    Entry.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function Entry_getParent_closure(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    Entry_getParent_closure.builtin$cls = "Entry_getParent_closure";
    if (!("name" in Entry_getParent_closure))
      Entry_getParent_closure.name = "Entry_getParent_closure";
    $desc = $collectedClasses$.Entry_getParent_closure[1];
    Entry_getParent_closure.prototype = $desc;
    Entry_getParent_closure.$__fields__ = ["completer"];
    function Entry_getParent_closure0(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    Entry_getParent_closure0.builtin$cls = "Entry_getParent_closure0";
    if (!("name" in Entry_getParent_closure0))
      Entry_getParent_closure0.name = "Entry_getParent_closure0";
    $desc = $collectedClasses$.Entry_getParent_closure0[1];
    Entry_getParent_closure0.prototype = $desc;
    Entry_getParent_closure0.$__fields__ = ["completer"];
    function Entry_remove_closure(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    Entry_remove_closure.builtin$cls = "Entry_remove_closure";
    if (!("name" in Entry_remove_closure))
      Entry_remove_closure.name = "Entry_remove_closure";
    $desc = $collectedClasses$.Entry_remove_closure[1];
    Entry_remove_closure.prototype = $desc;
    Entry_remove_closure.$__fields__ = ["completer"];
    function Entry_remove_closure0(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    Entry_remove_closure0.builtin$cls = "Entry_remove_closure0";
    if (!("name" in Entry_remove_closure0))
      Entry_remove_closure0.name = "Entry_remove_closure0";
    $desc = $collectedClasses$.Entry_remove_closure0[1];
    Entry_remove_closure0.prototype = $desc;
    Entry_remove_closure0.$__fields__ = ["completer"];
    function ErrorEvent() {
      this.$deferredAction();
    }
    ErrorEvent.builtin$cls = "ErrorEvent";
    if (!("name" in ErrorEvent))
      ErrorEvent.name = "ErrorEvent";
    $desc = $collectedClasses$.ErrorEvent[1];
    ErrorEvent.prototype = $desc;
    ErrorEvent.$__fields__ = [];
    ErrorEvent.prototype.get$error = function(receiver) {
      return receiver.error;
    };
    ErrorEvent.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function Event() {
      this.$deferredAction();
    }
    Event.builtin$cls = "Event";
    if (!("name" in Event))
      Event.name = "Event";
    $desc = $collectedClasses$.Event[1];
    Event.prototype = $desc;
    Event.$__fields__ = [];
    Event.prototype.get$defaultPrevented = function(receiver) {
      return receiver.defaultPrevented;
    };
    Event.prototype.get$path = function(receiver) {
      return receiver.path;
    };
    Event.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function EventSource() {
      this.$deferredAction();
    }
    EventSource.builtin$cls = "EventSource";
    if (!("name" in EventSource))
      EventSource.name = "EventSource";
    $desc = $collectedClasses$.EventSource[1];
    EventSource.prototype = $desc;
    EventSource.$__fields__ = [];
    EventSource.prototype.get$url = function(receiver) {
      return receiver.url;
    };
    function EventTarget() {
      this.$deferredAction();
    }
    EventTarget.builtin$cls = "EventTarget";
    if (!("name" in EventTarget))
      EventTarget.name = "EventTarget";
    $desc = $collectedClasses$.EventTarget[1];
    EventTarget.prototype = $desc;
    EventTarget.$__fields__ = [];
    function ExtendableEvent() {
      this.$deferredAction();
    }
    ExtendableEvent.builtin$cls = "ExtendableEvent";
    if (!("name" in ExtendableEvent))
      ExtendableEvent.name = "ExtendableEvent";
    $desc = $collectedClasses$.ExtendableEvent[1];
    ExtendableEvent.prototype = $desc;
    ExtendableEvent.$__fields__ = [];
    function FieldSetElement() {
      this.$deferredAction();
    }
    FieldSetElement.builtin$cls = "FieldSetElement";
    if (!("name" in FieldSetElement))
      FieldSetElement.name = "FieldSetElement";
    $desc = $collectedClasses$.FieldSetElement[1];
    FieldSetElement.prototype = $desc;
    FieldSetElement.$__fields__ = [];
    FieldSetElement.prototype.set$disabled = function(receiver, v) {
      return receiver.disabled = v;
    };
    FieldSetElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    FieldSetElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function File0() {
      this.$deferredAction();
    }
    File0.builtin$cls = "File0";
    if (!("name" in File0))
      File0.name = "File0";
    $desc = $collectedClasses$.File0[1];
    File0.prototype = $desc;
    File0.$__fields__ = [];
    File0.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    File0.prototype.get$relativePath = function(receiver) {
      return receiver.webkitRelativePath;
    };
    function FileEntry() {
      this.$deferredAction();
    }
    FileEntry.builtin$cls = "FileEntry";
    if (!("name" in FileEntry))
      FileEntry.name = "FileEntry";
    $desc = $collectedClasses$.FileEntry[1];
    FileEntry.prototype = $desc;
    FileEntry.$__fields__ = [];
    function FileEntry_file_closure(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    FileEntry_file_closure.builtin$cls = "FileEntry_file_closure";
    if (!("name" in FileEntry_file_closure))
      FileEntry_file_closure.name = "FileEntry_file_closure";
    $desc = $collectedClasses$.FileEntry_file_closure[1];
    FileEntry_file_closure.prototype = $desc;
    FileEntry_file_closure.$__fields__ = ["completer"];
    function FileEntry_file_closure0(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    FileEntry_file_closure0.builtin$cls = "FileEntry_file_closure0";
    if (!("name" in FileEntry_file_closure0))
      FileEntry_file_closure0.name = "FileEntry_file_closure0";
    $desc = $collectedClasses$.FileEntry_file_closure0[1];
    FileEntry_file_closure0.prototype = $desc;
    FileEntry_file_closure0.$__fields__ = ["completer"];
    function FileError() {
      this.$deferredAction();
    }
    FileError.builtin$cls = "FileError";
    if (!("name" in FileError))
      FileError.name = "FileError";
    $desc = $collectedClasses$.FileError[1];
    FileError.prototype = $desc;
    FileError.$__fields__ = [];
    FileError.prototype.get$code = function(receiver) {
      return receiver.code;
    };
    function FileList() {
      this.$deferredAction();
    }
    FileList.builtin$cls = "FileList";
    if (!("name" in FileList))
      FileList.name = "FileList";
    $desc = $collectedClasses$.FileList[1];
    FileList.prototype = $desc;
    FileList.$__fields__ = [];
    function Interceptor_ListMixin0() {
      this.$deferredAction();
    }
    Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
    if (!("name" in Interceptor_ListMixin0))
      Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
    $desc = $collectedClasses$.Interceptor_ListMixin0[1];
    Interceptor_ListMixin0.prototype = $desc;
    Interceptor_ListMixin0.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin0() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin0))
      Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin0[1];
    Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin0.$__fields__ = [];
    function FileReader() {
      this.$deferredAction();
    }
    FileReader.builtin$cls = "FileReader";
    if (!("name" in FileReader))
      FileReader.name = "FileReader";
    $desc = $collectedClasses$.FileReader[1];
    FileReader.prototype = $desc;
    FileReader.$__fields__ = [];
    FileReader.prototype.get$error = function(receiver) {
      return receiver.error;
    };
    function FileStream() {
      this.$deferredAction();
    }
    FileStream.builtin$cls = "FileStream";
    if (!("name" in FileStream))
      FileStream.name = "FileStream";
    $desc = $collectedClasses$.FileStream[1];
    FileStream.prototype = $desc;
    FileStream.$__fields__ = [];
    FileStream.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function FileSystem() {
      this.$deferredAction();
    }
    FileSystem.builtin$cls = "FileSystem";
    if (!("name" in FileSystem))
      FileSystem.name = "FileSystem";
    $desc = $collectedClasses$.FileSystem[1];
    FileSystem.prototype = $desc;
    FileSystem.$__fields__ = [];
    FileSystem.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    FileSystem.prototype.get$root = function(receiver) {
      return receiver.root;
    };
    function FileWriter() {
      this.$deferredAction();
    }
    FileWriter.builtin$cls = "FileWriter";
    if (!("name" in FileWriter))
      FileWriter.name = "FileWriter";
    $desc = $collectedClasses$.FileWriter[1];
    FileWriter.prototype = $desc;
    FileWriter.$__fields__ = [];
    FileWriter.prototype.get$error = function(receiver) {
      return receiver.error;
    };
    FileWriter.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function FontFace() {
      this.$deferredAction();
    }
    FontFace.builtin$cls = "FontFace";
    if (!("name" in FontFace))
      FontFace.name = "FontFace";
    $desc = $collectedClasses$.FontFace[1];
    FontFace.prototype = $desc;
    FontFace.$__fields__ = [];
    FontFace.prototype.get$style = function(receiver) {
      return receiver.style;
    };
    function FontFaceSet() {
      this.$deferredAction();
    }
    FontFaceSet.builtin$cls = "FontFaceSet";
    if (!("name" in FontFaceSet))
      FontFaceSet.name = "FontFaceSet";
    $desc = $collectedClasses$.FontFaceSet[1];
    FontFaceSet.prototype = $desc;
    FontFaceSet.$__fields__ = [];
    function FormElement() {
      this.$deferredAction();
    }
    FormElement.builtin$cls = "FormElement";
    if (!("name" in FormElement))
      FormElement.name = "FormElement";
    $desc = $collectedClasses$.FormElement[1];
    FormElement.prototype = $desc;
    FormElement.$__fields__ = [];
    FormElement.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    FormElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    FormElement.prototype.get$target = function(receiver) {
      return receiver.target;
    };
    function Gamepad() {
      this.$deferredAction();
    }
    Gamepad.builtin$cls = "Gamepad";
    if (!("name" in Gamepad))
      Gamepad.name = "Gamepad";
    $desc = $collectedClasses$.Gamepad[1];
    Gamepad.prototype = $desc;
    Gamepad.$__fields__ = [];
    Gamepad.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    Gamepad.prototype.get$index = function(receiver) {
      return receiver.index;
    };
    Gamepad.prototype.get$timestamp = function(receiver) {
      return receiver.timestamp;
    };
    function GamepadButton() {
      this.$deferredAction();
    }
    GamepadButton.builtin$cls = "GamepadButton";
    if (!("name" in GamepadButton))
      GamepadButton.name = "GamepadButton";
    $desc = $collectedClasses$.GamepadButton[1];
    GamepadButton.prototype = $desc;
    GamepadButton.$__fields__ = [];
    GamepadButton.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function GeofencingEvent() {
      this.$deferredAction();
    }
    GeofencingEvent.builtin$cls = "GeofencingEvent";
    if (!("name" in GeofencingEvent))
      GeofencingEvent.name = "GeofencingEvent";
    $desc = $collectedClasses$.GeofencingEvent[1];
    GeofencingEvent.prototype = $desc;
    GeofencingEvent.$__fields__ = [];
    GeofencingEvent.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    function GeofencingRegion() {
      this.$deferredAction();
    }
    GeofencingRegion.builtin$cls = "GeofencingRegion";
    if (!("name" in GeofencingRegion))
      GeofencingRegion.name = "GeofencingRegion";
    $desc = $collectedClasses$.GeofencingRegion[1];
    GeofencingRegion.prototype = $desc;
    GeofencingRegion.$__fields__ = [];
    GeofencingRegion.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    function Geoposition() {
      this.$deferredAction();
    }
    Geoposition.builtin$cls = "Geoposition";
    if (!("name" in Geoposition))
      Geoposition.name = "Geoposition";
    $desc = $collectedClasses$.Geoposition[1];
    Geoposition.prototype = $desc;
    Geoposition.$__fields__ = [];
    Geoposition.prototype.get$timestamp = function(receiver) {
      return receiver.timestamp;
    };
    function History() {
      this.$deferredAction();
    }
    History.builtin$cls = "History";
    if (!("name" in History))
      History.name = "History";
    $desc = $collectedClasses$.History[1];
    History.prototype = $desc;
    History.$__fields__ = [];
    History.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function HtmlCollection() {
      this.$deferredAction();
    }
    HtmlCollection.builtin$cls = "HtmlCollection";
    if (!("name" in HtmlCollection))
      HtmlCollection.name = "HtmlCollection";
    $desc = $collectedClasses$.HtmlCollection[1];
    HtmlCollection.prototype = $desc;
    HtmlCollection.$__fields__ = [];
    function Interceptor_ListMixin1() {
      this.$deferredAction();
    }
    Interceptor_ListMixin1.builtin$cls = "Interceptor_ListMixin1";
    if (!("name" in Interceptor_ListMixin1))
      Interceptor_ListMixin1.name = "Interceptor_ListMixin1";
    $desc = $collectedClasses$.Interceptor_ListMixin1[1];
    Interceptor_ListMixin1.prototype = $desc;
    Interceptor_ListMixin1.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin1() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin1.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin1";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin1))
      Interceptor_ListMixin_ImmutableListMixin1.name = "Interceptor_ListMixin_ImmutableListMixin1";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin1[1];
    Interceptor_ListMixin_ImmutableListMixin1.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin1.$__fields__ = [];
    function HtmlDocument() {
      this.$deferredAction();
    }
    HtmlDocument.builtin$cls = "HtmlDocument";
    if (!("name" in HtmlDocument))
      HtmlDocument.name = "HtmlDocument";
    $desc = $collectedClasses$.HtmlDocument[1];
    HtmlDocument.prototype = $desc;
    HtmlDocument.$__fields__ = [];
    function HttpRequest() {
      this.$deferredAction();
    }
    HttpRequest.builtin$cls = "HttpRequest";
    if (!("name" in HttpRequest))
      HttpRequest.name = "HttpRequest";
    $desc = $collectedClasses$.HttpRequest[1];
    HttpRequest.prototype = $desc;
    HttpRequest.$__fields__ = [];
    HttpRequest.prototype.get$responseText = function(receiver) {
      return receiver.responseText;
    };
    function HttpRequest_getString_closure() {
      this.$deferredAction();
    }
    HttpRequest_getString_closure.builtin$cls = "HttpRequest_getString_closure";
    if (!("name" in HttpRequest_getString_closure))
      HttpRequest_getString_closure.name = "HttpRequest_getString_closure";
    $desc = $collectedClasses$.HttpRequest_getString_closure[1];
    HttpRequest_getString_closure.prototype = $desc;
    HttpRequest_getString_closure.$__fields__ = [];
    function HttpRequest_request_closure(completer, xhr) {
      this.completer = completer;
      this.xhr = xhr;
      this.$deferredAction();
    }
    HttpRequest_request_closure.builtin$cls = "HttpRequest_request_closure";
    if (!("name" in HttpRequest_request_closure))
      HttpRequest_request_closure.name = "HttpRequest_request_closure";
    $desc = $collectedClasses$.HttpRequest_request_closure[1];
    HttpRequest_request_closure.prototype = $desc;
    HttpRequest_request_closure.$__fields__ = ["completer", "xhr"];
    function HttpRequestEventTarget() {
      this.$deferredAction();
    }
    HttpRequestEventTarget.builtin$cls = "HttpRequestEventTarget";
    if (!("name" in HttpRequestEventTarget))
      HttpRequestEventTarget.name = "HttpRequestEventTarget";
    $desc = $collectedClasses$.HttpRequestEventTarget[1];
    HttpRequestEventTarget.prototype = $desc;
    HttpRequestEventTarget.$__fields__ = [];
    function IFrameElement() {
      this.$deferredAction();
    }
    IFrameElement.builtin$cls = "IFrameElement";
    if (!("name" in IFrameElement))
      IFrameElement.name = "IFrameElement";
    $desc = $collectedClasses$.IFrameElement[1];
    IFrameElement.prototype = $desc;
    IFrameElement.$__fields__ = [];
    IFrameElement.prototype.set$height = function(receiver, v) {
      return receiver.height = v;
    };
    IFrameElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    IFrameElement.prototype.set$width = function(receiver, v) {
      return receiver.width = v;
    };
    function ImageData() {
      this.$deferredAction();
    }
    ImageData.builtin$cls = "ImageData";
    if (!("name" in ImageData))
      ImageData.name = "ImageData";
    $desc = $collectedClasses$.ImageData[1];
    ImageData.prototype = $desc;
    ImageData.$__fields__ = [];
    ImageData.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    function ImageElement() {
      this.$deferredAction();
    }
    ImageElement.builtin$cls = "ImageElement";
    if (!("name" in ImageElement))
      ImageElement.name = "ImageElement";
    $desc = $collectedClasses$.ImageElement[1];
    ImageElement.prototype = $desc;
    ImageElement.$__fields__ = [];
    ImageElement.prototype.set$height = function(receiver, v) {
      return receiver.height = v;
    };
    ImageElement.prototype.get$isMap = function(receiver) {
      return receiver.isMap;
    };
    ImageElement.prototype.set$width = function(receiver, v) {
      return receiver.width = v;
    };
    function InputElement() {
      this.$deferredAction();
    }
    InputElement.builtin$cls = "InputElement";
    if (!("name" in InputElement))
      InputElement.name = "InputElement";
    $desc = $collectedClasses$.InputElement[1];
    InputElement.prototype = $desc;
    InputElement.$__fields__ = [];
    InputElement.prototype.get$checked = function(receiver) {
      return receiver.checked;
    };
    InputElement.prototype.set$checked = function(receiver, v) {
      return receiver.checked = v;
    };
    InputElement.prototype.set$disabled = function(receiver, v) {
      return receiver.disabled = v;
    };
    InputElement.prototype.get$files = function(receiver) {
      return receiver.files;
    };
    InputElement.prototype.set$height = function(receiver, v) {
      return receiver.height = v;
    };
    InputElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    InputElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    InputElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    InputElement.prototype.get$directory = function(receiver) {
      return receiver.webkitdirectory;
    };
    InputElement.prototype.set$width = function(receiver, v) {
      return receiver.width = v;
    };
    function KeyboardEvent() {
      this.$deferredAction();
    }
    KeyboardEvent.builtin$cls = "KeyboardEvent";
    if (!("name" in KeyboardEvent))
      KeyboardEvent.name = "KeyboardEvent";
    $desc = $collectedClasses$.KeyboardEvent[1];
    KeyboardEvent.prototype = $desc;
    KeyboardEvent.$__fields__ = [];
    KeyboardEvent.prototype.get$code = function(receiver) {
      return receiver.code;
    };
    KeyboardEvent.prototype.get$ctrlKey = function(receiver) {
      return receiver.ctrlKey;
    };
    KeyboardEvent.prototype.get$key = function(receiver) {
      return receiver.key;
    };
    KeyboardEvent.prototype.get$location = function(receiver) {
      return receiver.location;
    };
    KeyboardEvent.prototype.get$metaKey = function(receiver) {
      return receiver.metaKey;
    };
    KeyboardEvent.prototype.get$shiftKey = function(receiver) {
      return receiver.shiftKey;
    };
    function KeygenElement() {
      this.$deferredAction();
    }
    KeygenElement.builtin$cls = "KeygenElement";
    if (!("name" in KeygenElement))
      KeygenElement.name = "KeygenElement";
    $desc = $collectedClasses$.KeygenElement[1];
    KeygenElement.prototype = $desc;
    KeygenElement.$__fields__ = [];
    KeygenElement.prototype.set$disabled = function(receiver, v) {
      return receiver.disabled = v;
    };
    KeygenElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    KeygenElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function LIElement() {
      this.$deferredAction();
    }
    LIElement.builtin$cls = "LIElement";
    if (!("name" in LIElement))
      LIElement.name = "LIElement";
    $desc = $collectedClasses$.LIElement[1];
    LIElement.prototype = $desc;
    LIElement.$__fields__ = [];
    LIElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function LinkElement() {
      this.$deferredAction();
    }
    LinkElement.builtin$cls = "LinkElement";
    if (!("name" in LinkElement))
      LinkElement.name = "LinkElement";
    $desc = $collectedClasses$.LinkElement[1];
    LinkElement.prototype = $desc;
    LinkElement.$__fields__ = [];
    LinkElement.prototype.set$disabled = function(receiver, v) {
      return receiver.disabled = v;
    };
    LinkElement.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    LinkElement.prototype.set$href = function(receiver, v) {
      return receiver.href = v;
    };
    LinkElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function Location0() {
      this.$deferredAction();
    }
    Location0.builtin$cls = "Location0";
    if (!("name" in Location0))
      Location0.name = "Location0";
    $desc = $collectedClasses$.Location0[1];
    Location0.prototype = $desc;
    Location0.$__fields__ = [];
    Location0.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    Location0.prototype.get$port = function(receiver) {
      return receiver.port;
    };
    Location0.prototype.get$search = function(receiver) {
      return receiver.search;
    };
    function MapElement() {
      this.$deferredAction();
    }
    MapElement.builtin$cls = "MapElement";
    if (!("name" in MapElement))
      MapElement.name = "MapElement";
    $desc = $collectedClasses$.MapElement[1];
    MapElement.prototype = $desc;
    MapElement.$__fields__ = [];
    MapElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function MediaController() {
      this.$deferredAction();
    }
    MediaController.builtin$cls = "MediaController";
    if (!("name" in MediaController))
      MediaController.name = "MediaController";
    $desc = $collectedClasses$.MediaController[1];
    MediaController.prototype = $desc;
    MediaController.$__fields__ = [];
    function MediaDeviceInfo() {
      this.$deferredAction();
    }
    MediaDeviceInfo.builtin$cls = "MediaDeviceInfo";
    if (!("name" in MediaDeviceInfo))
      MediaDeviceInfo.name = "MediaDeviceInfo";
    $desc = $collectedClasses$.MediaDeviceInfo[1];
    MediaDeviceInfo.prototype = $desc;
    MediaDeviceInfo.$__fields__ = [];
    MediaDeviceInfo.prototype.get$kind = function(receiver) {
      return receiver.kind;
    };
    function MediaElement() {
      this.$deferredAction();
    }
    MediaElement.builtin$cls = "MediaElement";
    if (!("name" in MediaElement))
      MediaElement.name = "MediaElement";
    $desc = $collectedClasses$.MediaElement[1];
    MediaElement.prototype = $desc;
    MediaElement.$__fields__ = [];
    MediaElement.prototype.get$error = function(receiver) {
      return receiver.error;
    };
    function MediaError() {
      this.$deferredAction();
    }
    MediaError.builtin$cls = "MediaError";
    if (!("name" in MediaError))
      MediaError.name = "MediaError";
    $desc = $collectedClasses$.MediaError[1];
    MediaError.prototype = $desc;
    MediaError.$__fields__ = [];
    MediaError.prototype.get$code = function(receiver) {
      return receiver.code;
    };
    function MediaKeyError() {
      this.$deferredAction();
    }
    MediaKeyError.builtin$cls = "MediaKeyError";
    if (!("name" in MediaKeyError))
      MediaKeyError.name = "MediaKeyError";
    $desc = $collectedClasses$.MediaKeyError[1];
    MediaKeyError.prototype = $desc;
    MediaKeyError.$__fields__ = [];
    MediaKeyError.prototype.get$code = function(receiver) {
      return receiver.code;
    };
    function MediaKeyEvent() {
      this.$deferredAction();
    }
    MediaKeyEvent.builtin$cls = "MediaKeyEvent";
    if (!("name" in MediaKeyEvent))
      MediaKeyEvent.name = "MediaKeyEvent";
    $desc = $collectedClasses$.MediaKeyEvent[1];
    MediaKeyEvent.prototype = $desc;
    MediaKeyEvent.$__fields__ = [];
    MediaKeyEvent.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function MediaKeyMessageEvent() {
      this.$deferredAction();
    }
    MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
    if (!("name" in MediaKeyMessageEvent))
      MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
    $desc = $collectedClasses$.MediaKeyMessageEvent[1];
    MediaKeyMessageEvent.prototype = $desc;
    MediaKeyMessageEvent.$__fields__ = [];
    MediaKeyMessageEvent.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function MediaKeySession() {
      this.$deferredAction();
    }
    MediaKeySession.builtin$cls = "MediaKeySession";
    if (!("name" in MediaKeySession))
      MediaKeySession.name = "MediaKeySession";
    $desc = $collectedClasses$.MediaKeySession[1];
    MediaKeySession.prototype = $desc;
    MediaKeySession.$__fields__ = [];
    function MediaList() {
      this.$deferredAction();
    }
    MediaList.builtin$cls = "MediaList";
    if (!("name" in MediaList))
      MediaList.name = "MediaList";
    $desc = $collectedClasses$.MediaList[1];
    MediaList.prototype = $desc;
    MediaList.$__fields__ = [];
    MediaList.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function MediaQueryList() {
      this.$deferredAction();
    }
    MediaQueryList.builtin$cls = "MediaQueryList";
    if (!("name" in MediaQueryList))
      MediaQueryList.name = "MediaQueryList";
    $desc = $collectedClasses$.MediaQueryList[1];
    MediaQueryList.prototype = $desc;
    MediaQueryList.$__fields__ = [];
    function MediaStream() {
      this.$deferredAction();
    }
    MediaStream.builtin$cls = "MediaStream";
    if (!("name" in MediaStream))
      MediaStream.name = "MediaStream";
    $desc = $collectedClasses$.MediaStream[1];
    MediaStream.prototype = $desc;
    MediaStream.$__fields__ = [];
    MediaStream.prototype.get$active = function(receiver) {
      return receiver.active;
    };
    MediaStream.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    function MediaStreamTrack() {
      this.$deferredAction();
    }
    MediaStreamTrack.builtin$cls = "MediaStreamTrack";
    if (!("name" in MediaStreamTrack))
      MediaStreamTrack.name = "MediaStreamTrack";
    $desc = $collectedClasses$.MediaStreamTrack[1];
    MediaStreamTrack.prototype = $desc;
    MediaStreamTrack.$__fields__ = [];
    MediaStreamTrack.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    MediaStreamTrack.prototype.get$kind = function(receiver) {
      return receiver.kind;
    };
    function MenuElement() {
      this.$deferredAction();
    }
    MenuElement.builtin$cls = "MenuElement";
    if (!("name" in MenuElement))
      MenuElement.name = "MenuElement";
    $desc = $collectedClasses$.MenuElement[1];
    MenuElement.prototype = $desc;
    MenuElement.$__fields__ = [];
    MenuElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function MenuItemElement() {
      this.$deferredAction();
    }
    MenuItemElement.builtin$cls = "MenuItemElement";
    if (!("name" in MenuItemElement))
      MenuItemElement.name = "MenuItemElement";
    $desc = $collectedClasses$.MenuItemElement[1];
    MenuItemElement.prototype = $desc;
    MenuItemElement.$__fields__ = [];
    MenuItemElement.prototype.get$checked = function(receiver) {
      return receiver.checked;
    };
    MenuItemElement.prototype.set$checked = function(receiver, v) {
      return receiver.checked = v;
    };
    MenuItemElement.prototype.set$disabled = function(receiver, v) {
      return receiver.disabled = v;
    };
    MenuItemElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function MessageEvent0() {
      this.$deferredAction();
    }
    MessageEvent0.builtin$cls = "MessageEvent0";
    if (!("name" in MessageEvent0))
      MessageEvent0.name = "MessageEvent0";
    $desc = $collectedClasses$.MessageEvent0[1];
    MessageEvent0.prototype = $desc;
    MessageEvent0.$__fields__ = [];
    function MessagePort() {
      this.$deferredAction();
    }
    MessagePort.builtin$cls = "MessagePort";
    if (!("name" in MessagePort))
      MessagePort.name = "MessagePort";
    $desc = $collectedClasses$.MessagePort[1];
    MessagePort.prototype = $desc;
    MessagePort.$__fields__ = [];
    function MetaElement() {
      this.$deferredAction();
    }
    MetaElement.builtin$cls = "MetaElement";
    if (!("name" in MetaElement))
      MetaElement.name = "MetaElement";
    $desc = $collectedClasses$.MetaElement[1];
    MetaElement.prototype = $desc;
    MetaElement.$__fields__ = [];
    MetaElement.prototype.get$content = function(receiver) {
      return receiver.content;
    };
    MetaElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function MeterElement() {
      this.$deferredAction();
    }
    MeterElement.builtin$cls = "MeterElement";
    if (!("name" in MeterElement))
      MeterElement.name = "MeterElement";
    $desc = $collectedClasses$.MeterElement[1];
    MeterElement.prototype = $desc;
    MeterElement.$__fields__ = [];
    MeterElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function MidiConnectionEvent() {
      this.$deferredAction();
    }
    MidiConnectionEvent.builtin$cls = "MidiConnectionEvent";
    if (!("name" in MidiConnectionEvent))
      MidiConnectionEvent.name = "MidiConnectionEvent";
    $desc = $collectedClasses$.MidiConnectionEvent[1];
    MidiConnectionEvent.prototype = $desc;
    MidiConnectionEvent.$__fields__ = [];
    MidiConnectionEvent.prototype.get$port = function(receiver) {
      return receiver.port;
    };
    function MidiMessageEvent() {
      this.$deferredAction();
    }
    MidiMessageEvent.builtin$cls = "MidiMessageEvent";
    if (!("name" in MidiMessageEvent))
      MidiMessageEvent.name = "MidiMessageEvent";
    $desc = $collectedClasses$.MidiMessageEvent[1];
    MidiMessageEvent.prototype = $desc;
    MidiMessageEvent.$__fields__ = [];
    MidiMessageEvent.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    function MidiOutput() {
      this.$deferredAction();
    }
    MidiOutput.builtin$cls = "MidiOutput";
    if (!("name" in MidiOutput))
      MidiOutput.name = "MidiOutput";
    $desc = $collectedClasses$.MidiOutput[1];
    MidiOutput.prototype = $desc;
    MidiOutput.$__fields__ = [];
    function MidiPort() {
      this.$deferredAction();
    }
    MidiPort.builtin$cls = "MidiPort";
    if (!("name" in MidiPort))
      MidiPort.name = "MidiPort";
    $desc = $collectedClasses$.MidiPort[1];
    MidiPort.prototype = $desc;
    MidiPort.$__fields__ = [];
    MidiPort.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    MidiPort.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    MidiPort.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    MidiPort.prototype.get$version = function(receiver) {
      return receiver.version;
    };
    function MimeType() {
      this.$deferredAction();
    }
    MimeType.builtin$cls = "MimeType";
    if (!("name" in MimeType))
      MimeType.name = "MimeType";
    $desc = $collectedClasses$.MimeType[1];
    MimeType.prototype = $desc;
    MimeType.$__fields__ = [];
    MimeType.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function MimeTypeArray() {
      this.$deferredAction();
    }
    MimeTypeArray.builtin$cls = "MimeTypeArray";
    if (!("name" in MimeTypeArray))
      MimeTypeArray.name = "MimeTypeArray";
    $desc = $collectedClasses$.MimeTypeArray[1];
    MimeTypeArray.prototype = $desc;
    MimeTypeArray.$__fields__ = [];
    function Interceptor_ListMixin2() {
      this.$deferredAction();
    }
    Interceptor_ListMixin2.builtin$cls = "Interceptor_ListMixin2";
    if (!("name" in Interceptor_ListMixin2))
      Interceptor_ListMixin2.name = "Interceptor_ListMixin2";
    $desc = $collectedClasses$.Interceptor_ListMixin2[1];
    Interceptor_ListMixin2.prototype = $desc;
    Interceptor_ListMixin2.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin2() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin2.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin2";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin2))
      Interceptor_ListMixin_ImmutableListMixin2.name = "Interceptor_ListMixin_ImmutableListMixin2";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin2[1];
    Interceptor_ListMixin_ImmutableListMixin2.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin2.$__fields__ = [];
    function MouseEvent() {
      this.$deferredAction();
    }
    MouseEvent.builtin$cls = "MouseEvent";
    if (!("name" in MouseEvent))
      MouseEvent.name = "MouseEvent";
    $desc = $collectedClasses$.MouseEvent[1];
    MouseEvent.prototype = $desc;
    MouseEvent.$__fields__ = [];
    MouseEvent.prototype.get$button = function(receiver) {
      return receiver.button;
    };
    MouseEvent.prototype.get$ctrlKey = function(receiver) {
      return receiver.ctrlKey;
    };
    MouseEvent.prototype.get$metaKey = function(receiver) {
      return receiver.metaKey;
    };
    MouseEvent.prototype.get$shiftKey = function(receiver) {
      return receiver.shiftKey;
    };
    function MutationRecord() {
      this.$deferredAction();
    }
    MutationRecord.builtin$cls = "MutationRecord";
    if (!("name" in MutationRecord))
      MutationRecord.name = "MutationRecord";
    $desc = $collectedClasses$.MutationRecord[1];
    MutationRecord.prototype = $desc;
    MutationRecord.$__fields__ = [];
    MutationRecord.prototype.get$target = function(receiver) {
      return receiver.target;
    };
    MutationRecord.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function Navigator() {
      this.$deferredAction();
    }
    Navigator.builtin$cls = "Navigator";
    if (!("name" in Navigator))
      Navigator.name = "Navigator";
    $desc = $collectedClasses$.Navigator[1];
    Navigator.prototype = $desc;
    Navigator.$__fields__ = [];
    function NavigatorUserMediaError() {
      this.$deferredAction();
    }
    NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
    if (!("name" in NavigatorUserMediaError))
      NavigatorUserMediaError.name = "NavigatorUserMediaError";
    $desc = $collectedClasses$.NavigatorUserMediaError[1];
    NavigatorUserMediaError.prototype = $desc;
    NavigatorUserMediaError.$__fields__ = [];
    NavigatorUserMediaError.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    NavigatorUserMediaError.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function NetworkInformation() {
      this.$deferredAction();
    }
    NetworkInformation.builtin$cls = "NetworkInformation";
    if (!("name" in NetworkInformation))
      NetworkInformation.name = "NetworkInformation";
    $desc = $collectedClasses$.NetworkInformation[1];
    NetworkInformation.prototype = $desc;
    NetworkInformation.$__fields__ = [];
    NetworkInformation.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function _ChildNodeListLazy(_this) {
      this._this = _this;
      this.$deferredAction();
    }
    _ChildNodeListLazy.builtin$cls = "_ChildNodeListLazy";
    if (!("name" in _ChildNodeListLazy))
      _ChildNodeListLazy.name = "_ChildNodeListLazy";
    $desc = $collectedClasses$._ChildNodeListLazy[1];
    _ChildNodeListLazy.prototype = $desc;
    _ChildNodeListLazy.$__fields__ = ["_this"];
    function Node() {
      this.$deferredAction();
    }
    Node.builtin$cls = "Node";
    if (!("name" in Node))
      Node.name = "Node";
    $desc = $collectedClasses$.Node[1];
    Node.prototype = $desc;
    Node.$__fields__ = [];
    Node.prototype.get$parent = function(receiver) {
      return receiver.parentElement;
    };
    Node.prototype.get$parentNode = function(receiver) {
      return receiver.parentNode;
    };
    Node.prototype.get$previousNode = function(receiver) {
      return receiver.previousSibling;
    };
    Node.prototype.get$text = function(receiver) {
      return receiver.textContent;
    };
    Node.prototype.set$text = function(receiver, v) {
      return receiver.textContent = v;
    };
    function NodeIterator() {
      this.$deferredAction();
    }
    NodeIterator.builtin$cls = "NodeIterator";
    if (!("name" in NodeIterator))
      NodeIterator.name = "NodeIterator";
    $desc = $collectedClasses$.NodeIterator[1];
    NodeIterator.prototype = $desc;
    NodeIterator.$__fields__ = [];
    NodeIterator.prototype.get$root = function(receiver) {
      return receiver.root;
    };
    function NodeList() {
      this.$deferredAction();
    }
    NodeList.builtin$cls = "NodeList";
    if (!("name" in NodeList))
      NodeList.name = "NodeList";
    $desc = $collectedClasses$.NodeList[1];
    NodeList.prototype = $desc;
    NodeList.$__fields__ = [];
    function Interceptor_ListMixin3() {
      this.$deferredAction();
    }
    Interceptor_ListMixin3.builtin$cls = "Interceptor_ListMixin3";
    if (!("name" in Interceptor_ListMixin3))
      Interceptor_ListMixin3.name = "Interceptor_ListMixin3";
    $desc = $collectedClasses$.Interceptor_ListMixin3[1];
    Interceptor_ListMixin3.prototype = $desc;
    Interceptor_ListMixin3.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin3() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin3.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin3";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin3))
      Interceptor_ListMixin_ImmutableListMixin3.name = "Interceptor_ListMixin_ImmutableListMixin3";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin3[1];
    Interceptor_ListMixin_ImmutableListMixin3.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin3.$__fields__ = [];
    function Notification0() {
      this.$deferredAction();
    }
    Notification0.builtin$cls = "Notification0";
    if (!("name" in Notification0))
      Notification0.name = "Notification0";
    $desc = $collectedClasses$.Notification0[1];
    Notification0.prototype = $desc;
    Notification0.$__fields__ = [];
    Notification0.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    Notification0.prototype.get$title = function(receiver) {
      return receiver.title;
    };
    function OListElement() {
      this.$deferredAction();
    }
    OListElement.builtin$cls = "OListElement";
    if (!("name" in OListElement))
      OListElement.name = "OListElement";
    $desc = $collectedClasses$.OListElement[1];
    OListElement.prototype = $desc;
    OListElement.$__fields__ = [];
    OListElement.prototype.get$start = function(receiver) {
      return receiver.start;
    };
    OListElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function ObjectElement() {
      this.$deferredAction();
    }
    ObjectElement.builtin$cls = "ObjectElement";
    if (!("name" in ObjectElement))
      ObjectElement.name = "ObjectElement";
    $desc = $collectedClasses$.ObjectElement[1];
    ObjectElement.prototype = $desc;
    ObjectElement.$__fields__ = [];
    ObjectElement.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    ObjectElement.prototype.set$height = function(receiver, v) {
      return receiver.height = v;
    };
    ObjectElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    ObjectElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    ObjectElement.prototype.set$width = function(receiver, v) {
      return receiver.width = v;
    };
    function OptGroupElement() {
      this.$deferredAction();
    }
    OptGroupElement.builtin$cls = "OptGroupElement";
    if (!("name" in OptGroupElement))
      OptGroupElement.name = "OptGroupElement";
    $desc = $collectedClasses$.OptGroupElement[1];
    OptGroupElement.prototype = $desc;
    OptGroupElement.$__fields__ = [];
    OptGroupElement.prototype.set$disabled = function(receiver, v) {
      return receiver.disabled = v;
    };
    function OptionElement() {
      this.$deferredAction();
    }
    OptionElement.builtin$cls = "OptionElement";
    if (!("name" in OptionElement))
      OptionElement.name = "OptionElement";
    $desc = $collectedClasses$.OptionElement[1];
    OptionElement.prototype = $desc;
    OptionElement.$__fields__ = [];
    OptionElement.prototype.set$disabled = function(receiver, v) {
      return receiver.disabled = v;
    };
    OptionElement.prototype.get$index = function(receiver) {
      return receiver.index;
    };
    OptionElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function OutputElement() {
      this.$deferredAction();
    }
    OutputElement.builtin$cls = "OutputElement";
    if (!("name" in OutputElement))
      OutputElement.name = "OutputElement";
    $desc = $collectedClasses$.OutputElement[1];
    OutputElement.prototype = $desc;
    OutputElement.$__fields__ = [];
    OutputElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    OutputElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    OutputElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function ParamElement() {
      this.$deferredAction();
    }
    ParamElement.builtin$cls = "ParamElement";
    if (!("name" in ParamElement))
      ParamElement.name = "ParamElement";
    $desc = $collectedClasses$.ParamElement[1];
    ParamElement.prototype = $desc;
    ParamElement.$__fields__ = [];
    ParamElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    ParamElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function Path2D() {
      this.$deferredAction();
    }
    Path2D.builtin$cls = "Path2D";
    if (!("name" in Path2D))
      Path2D.name = "Path2D";
    $desc = $collectedClasses$.Path2D[1];
    Path2D.prototype = $desc;
    Path2D.$__fields__ = [];
    function PerformanceEntry() {
      this.$deferredAction();
    }
    PerformanceEntry.builtin$cls = "PerformanceEntry";
    if (!("name" in PerformanceEntry))
      PerformanceEntry.name = "PerformanceEntry";
    $desc = $collectedClasses$.PerformanceEntry[1];
    PerformanceEntry.prototype = $desc;
    PerformanceEntry.$__fields__ = [];
    PerformanceEntry.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function PerformanceNavigation() {
      this.$deferredAction();
    }
    PerformanceNavigation.builtin$cls = "PerformanceNavigation";
    if (!("name" in PerformanceNavigation))
      PerformanceNavigation.name = "PerformanceNavigation";
    $desc = $collectedClasses$.PerformanceNavigation[1];
    PerformanceNavigation.prototype = $desc;
    PerformanceNavigation.$__fields__ = [];
    PerformanceNavigation.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function PermissionStatus() {
      this.$deferredAction();
    }
    PermissionStatus.builtin$cls = "PermissionStatus";
    if (!("name" in PermissionStatus))
      PermissionStatus.name = "PermissionStatus";
    $desc = $collectedClasses$.PermissionStatus[1];
    PermissionStatus.prototype = $desc;
    PermissionStatus.$__fields__ = [];
    function Plugin() {
      this.$deferredAction();
    }
    Plugin.builtin$cls = "Plugin";
    if (!("name" in Plugin))
      Plugin.name = "Plugin";
    $desc = $collectedClasses$.Plugin[1];
    Plugin.prototype = $desc;
    Plugin.$__fields__ = [];
    Plugin.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    Plugin.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function PluginArray() {
      this.$deferredAction();
    }
    PluginArray.builtin$cls = "PluginArray";
    if (!("name" in PluginArray))
      PluginArray.name = "PluginArray";
    $desc = $collectedClasses$.PluginArray[1];
    PluginArray.prototype = $desc;
    PluginArray.$__fields__ = [];
    function Interceptor_ListMixin4() {
      this.$deferredAction();
    }
    Interceptor_ListMixin4.builtin$cls = "Interceptor_ListMixin4";
    if (!("name" in Interceptor_ListMixin4))
      Interceptor_ListMixin4.name = "Interceptor_ListMixin4";
    $desc = $collectedClasses$.Interceptor_ListMixin4[1];
    Interceptor_ListMixin4.prototype = $desc;
    Interceptor_ListMixin4.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin4() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin4.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin4";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin4))
      Interceptor_ListMixin_ImmutableListMixin4.name = "Interceptor_ListMixin_ImmutableListMixin4";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin4[1];
    Interceptor_ListMixin_ImmutableListMixin4.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin4.$__fields__ = [];
    function PluginPlaceholderElement() {
      this.$deferredAction();
    }
    PluginPlaceholderElement.builtin$cls = "PluginPlaceholderElement";
    if (!("name" in PluginPlaceholderElement))
      PluginPlaceholderElement.name = "PluginPlaceholderElement";
    $desc = $collectedClasses$.PluginPlaceholderElement[1];
    PluginPlaceholderElement.prototype = $desc;
    PluginPlaceholderElement.$__fields__ = [];
    PluginPlaceholderElement.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function PositionError() {
      this.$deferredAction();
    }
    PositionError.builtin$cls = "PositionError";
    if (!("name" in PositionError))
      PositionError.name = "PositionError";
    $desc = $collectedClasses$.PositionError[1];
    PositionError.prototype = $desc;
    PositionError.$__fields__ = [];
    PositionError.prototype.get$code = function(receiver) {
      return receiver.code;
    };
    PositionError.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function PresentationAvailability() {
      this.$deferredAction();
    }
    PresentationAvailability.builtin$cls = "PresentationAvailability";
    if (!("name" in PresentationAvailability))
      PresentationAvailability.name = "PresentationAvailability";
    $desc = $collectedClasses$.PresentationAvailability[1];
    PresentationAvailability.prototype = $desc;
    PresentationAvailability.$__fields__ = [];
    PresentationAvailability.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function PresentationSession() {
      this.$deferredAction();
    }
    PresentationSession.builtin$cls = "PresentationSession";
    if (!("name" in PresentationSession))
      PresentationSession.name = "PresentationSession";
    $desc = $collectedClasses$.PresentationSession[1];
    PresentationSession.prototype = $desc;
    PresentationSession.$__fields__ = [];
    PresentationSession.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    function ProcessingInstruction() {
      this.$deferredAction();
    }
    ProcessingInstruction.builtin$cls = "ProcessingInstruction";
    if (!("name" in ProcessingInstruction))
      ProcessingInstruction.name = "ProcessingInstruction";
    $desc = $collectedClasses$.ProcessingInstruction[1];
    ProcessingInstruction.prototype = $desc;
    ProcessingInstruction.$__fields__ = [];
    ProcessingInstruction.prototype.get$target = function(receiver) {
      return receiver.target;
    };
    function ProgressElement0() {
      this.$deferredAction();
    }
    ProgressElement0.builtin$cls = "ProgressElement0";
    if (!("name" in ProgressElement0))
      ProgressElement0.name = "ProgressElement0";
    $desc = $collectedClasses$.ProgressElement0[1];
    ProgressElement0.prototype = $desc;
    ProgressElement0.$__fields__ = [];
    ProgressElement0.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function ProgressEvent() {
      this.$deferredAction();
    }
    ProgressEvent.builtin$cls = "ProgressEvent";
    if (!("name" in ProgressEvent))
      ProgressEvent.name = "ProgressEvent";
    $desc = $collectedClasses$.ProgressEvent[1];
    ProgressEvent.prototype = $desc;
    ProgressEvent.$__fields__ = [];
    function PushEvent() {
      this.$deferredAction();
    }
    PushEvent.builtin$cls = "PushEvent";
    if (!("name" in PushEvent))
      PushEvent.name = "PushEvent";
    $desc = $collectedClasses$.PushEvent[1];
    PushEvent.prototype = $desc;
    PushEvent.$__fields__ = [];
    PushEvent.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    function PushMessageData() {
      this.$deferredAction();
    }
    PushMessageData.builtin$cls = "PushMessageData";
    if (!("name" in PushMessageData))
      PushMessageData.name = "PushMessageData";
    $desc = $collectedClasses$.PushMessageData[1];
    PushMessageData.prototype = $desc;
    PushMessageData.$__fields__ = [];
    function Range0() {
      this.$deferredAction();
    }
    Range0.builtin$cls = "Range0";
    if (!("name" in Range0))
      Range0.name = "Range0";
    $desc = $collectedClasses$.Range0[1];
    Range0.prototype = $desc;
    Range0.$__fields__ = [];
    function ReadableByteStream() {
      this.$deferredAction();
    }
    ReadableByteStream.builtin$cls = "ReadableByteStream";
    if (!("name" in ReadableByteStream))
      ReadableByteStream.name = "ReadableByteStream";
    $desc = $collectedClasses$.ReadableByteStream[1];
    ReadableByteStream.prototype = $desc;
    ReadableByteStream.$__fields__ = [];
    function ReadableByteStreamReader() {
      this.$deferredAction();
    }
    ReadableByteStreamReader.builtin$cls = "ReadableByteStreamReader";
    if (!("name" in ReadableByteStreamReader))
      ReadableByteStreamReader.name = "ReadableByteStreamReader";
    $desc = $collectedClasses$.ReadableByteStreamReader[1];
    ReadableByteStreamReader.prototype = $desc;
    ReadableByteStreamReader.$__fields__ = [];
    function ReadableStream() {
      this.$deferredAction();
    }
    ReadableStream.builtin$cls = "ReadableStream";
    if (!("name" in ReadableStream))
      ReadableStream.name = "ReadableStream";
    $desc = $collectedClasses$.ReadableStream[1];
    ReadableStream.prototype = $desc;
    ReadableStream.$__fields__ = [];
    function ReadableStreamReader() {
      this.$deferredAction();
    }
    ReadableStreamReader.builtin$cls = "ReadableStreamReader";
    if (!("name" in ReadableStreamReader))
      ReadableStreamReader.name = "ReadableStreamReader";
    $desc = $collectedClasses$.ReadableStreamReader[1];
    ReadableStreamReader.prototype = $desc;
    ReadableStreamReader.$__fields__ = [];
    function RtcDataChannel() {
      this.$deferredAction();
    }
    RtcDataChannel.builtin$cls = "RtcDataChannel";
    if (!("name" in RtcDataChannel))
      RtcDataChannel.name = "RtcDataChannel";
    $desc = $collectedClasses$.RtcDataChannel[1];
    RtcDataChannel.prototype = $desc;
    RtcDataChannel.$__fields__ = [];
    RtcDataChannel.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    function RtcPeerConnection() {
      this.$deferredAction();
    }
    RtcPeerConnection.builtin$cls = "RtcPeerConnection";
    if (!("name" in RtcPeerConnection))
      RtcPeerConnection.name = "RtcPeerConnection";
    $desc = $collectedClasses$.RtcPeerConnection[1];
    RtcPeerConnection.prototype = $desc;
    RtcPeerConnection.$__fields__ = [];
    function RtcSessionDescription() {
      this.$deferredAction();
    }
    RtcSessionDescription.builtin$cls = "RtcSessionDescription";
    if (!("name" in RtcSessionDescription))
      RtcSessionDescription.name = "RtcSessionDescription";
    $desc = $collectedClasses$.RtcSessionDescription[1];
    RtcSessionDescription.prototype = $desc;
    RtcSessionDescription.$__fields__ = [];
    RtcSessionDescription.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function RtcStatsReport() {
      this.$deferredAction();
    }
    RtcStatsReport.builtin$cls = "RtcStatsReport";
    if (!("name" in RtcStatsReport))
      RtcStatsReport.name = "RtcStatsReport";
    $desc = $collectedClasses$.RtcStatsReport[1];
    RtcStatsReport.prototype = $desc;
    RtcStatsReport.$__fields__ = [];
    RtcStatsReport.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    RtcStatsReport.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function RtcStatsResponse() {
      this.$deferredAction();
    }
    RtcStatsResponse.builtin$cls = "RtcStatsResponse";
    if (!("name" in RtcStatsResponse))
      RtcStatsResponse.name = "RtcStatsResponse";
    $desc = $collectedClasses$.RtcStatsResponse[1];
    RtcStatsResponse.prototype = $desc;
    RtcStatsResponse.$__fields__ = [];
    function ScreenOrientation() {
      this.$deferredAction();
    }
    ScreenOrientation.builtin$cls = "ScreenOrientation";
    if (!("name" in ScreenOrientation))
      ScreenOrientation.name = "ScreenOrientation";
    $desc = $collectedClasses$.ScreenOrientation[1];
    ScreenOrientation.prototype = $desc;
    ScreenOrientation.$__fields__ = [];
    ScreenOrientation.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function ScriptElement0() {
      this.$deferredAction();
    }
    ScriptElement0.builtin$cls = "ScriptElement0";
    if (!("name" in ScriptElement0))
      ScriptElement0.name = "ScriptElement0";
    $desc = $collectedClasses$.ScriptElement0[1];
    ScriptElement0.prototype = $desc;
    ScriptElement0.$__fields__ = [];
    ScriptElement0.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function SelectElement() {
      this.$deferredAction();
    }
    SelectElement.builtin$cls = "SelectElement";
    if (!("name" in SelectElement))
      SelectElement.name = "SelectElement";
    $desc = $collectedClasses$.SelectElement[1];
    SelectElement.prototype = $desc;
    SelectElement.$__fields__ = [];
    SelectElement.prototype.set$disabled = function(receiver, v) {
      return receiver.disabled = v;
    };
    SelectElement.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    SelectElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    SelectElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    SelectElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function Selection() {
      this.$deferredAction();
    }
    Selection.builtin$cls = "Selection";
    if (!("name" in Selection))
      Selection.name = "Selection";
    $desc = $collectedClasses$.Selection[1];
    Selection.prototype = $desc;
    Selection.$__fields__ = [];
    Selection.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function ServicePort() {
      this.$deferredAction();
    }
    ServicePort.builtin$cls = "ServicePort";
    if (!("name" in ServicePort))
      ServicePort.name = "ServicePort";
    $desc = $collectedClasses$.ServicePort[1];
    ServicePort.prototype = $desc;
    ServicePort.$__fields__ = [];
    ServicePort.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    ServicePort.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function ServiceWorkerMessageEvent() {
      this.$deferredAction();
    }
    ServiceWorkerMessageEvent.builtin$cls = "ServiceWorkerMessageEvent";
    if (!("name" in ServiceWorkerMessageEvent))
      ServiceWorkerMessageEvent.name = "ServiceWorkerMessageEvent";
    $desc = $collectedClasses$.ServiceWorkerMessageEvent[1];
    ServiceWorkerMessageEvent.prototype = $desc;
    ServiceWorkerMessageEvent.$__fields__ = [];
    function ServiceWorkerRegistration() {
      this.$deferredAction();
    }
    ServiceWorkerRegistration.builtin$cls = "ServiceWorkerRegistration";
    if (!("name" in ServiceWorkerRegistration))
      ServiceWorkerRegistration.name = "ServiceWorkerRegistration";
    $desc = $collectedClasses$.ServiceWorkerRegistration[1];
    ServiceWorkerRegistration.prototype = $desc;
    ServiceWorkerRegistration.$__fields__ = [];
    ServiceWorkerRegistration.prototype.get$active = function(receiver) {
      return receiver.active;
    };
    function ShadowRoot() {
      this.$deferredAction();
    }
    ShadowRoot.builtin$cls = "ShadowRoot";
    if (!("name" in ShadowRoot))
      ShadowRoot.name = "ShadowRoot";
    $desc = $collectedClasses$.ShadowRoot[1];
    ShadowRoot.prototype = $desc;
    ShadowRoot.$__fields__ = [];
    ShadowRoot.prototype.set$innerHtml = function(receiver, v) {
      return receiver.innerHTML = v;
    };
    function SharedWorker() {
      this.$deferredAction();
    }
    SharedWorker.builtin$cls = "SharedWorker";
    if (!("name" in SharedWorker))
      SharedWorker.name = "SharedWorker";
    $desc = $collectedClasses$.SharedWorker[1];
    SharedWorker.prototype = $desc;
    SharedWorker.$__fields__ = [];
    SharedWorker.prototype.get$port = function(receiver) {
      return receiver.port;
    };
    function SharedWorkerGlobalScope() {
      this.$deferredAction();
    }
    SharedWorkerGlobalScope.builtin$cls = "SharedWorkerGlobalScope";
    if (!("name" in SharedWorkerGlobalScope))
      SharedWorkerGlobalScope.name = "SharedWorkerGlobalScope";
    $desc = $collectedClasses$.SharedWorkerGlobalScope[1];
    SharedWorkerGlobalScope.prototype = $desc;
    SharedWorkerGlobalScope.$__fields__ = [];
    SharedWorkerGlobalScope.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function SourceBuffer() {
      this.$deferredAction();
    }
    SourceBuffer.builtin$cls = "SourceBuffer";
    if (!("name" in SourceBuffer))
      SourceBuffer.name = "SourceBuffer";
    $desc = $collectedClasses$.SourceBuffer[1];
    SourceBuffer.prototype = $desc;
    SourceBuffer.$__fields__ = [];
    function SourceBufferList() {
      this.$deferredAction();
    }
    SourceBufferList.builtin$cls = "SourceBufferList";
    if (!("name" in SourceBufferList))
      SourceBufferList.name = "SourceBufferList";
    $desc = $collectedClasses$.SourceBufferList[1];
    SourceBufferList.prototype = $desc;
    SourceBufferList.$__fields__ = [];
    function EventTarget_ListMixin() {
      this.$deferredAction();
    }
    EventTarget_ListMixin.builtin$cls = "EventTarget_ListMixin";
    if (!("name" in EventTarget_ListMixin))
      EventTarget_ListMixin.name = "EventTarget_ListMixin";
    $desc = $collectedClasses$.EventTarget_ListMixin[1];
    EventTarget_ListMixin.prototype = $desc;
    EventTarget_ListMixin.$__fields__ = [];
    function EventTarget_ListMixin_ImmutableListMixin() {
      this.$deferredAction();
    }
    EventTarget_ListMixin_ImmutableListMixin.builtin$cls = "EventTarget_ListMixin_ImmutableListMixin";
    if (!("name" in EventTarget_ListMixin_ImmutableListMixin))
      EventTarget_ListMixin_ImmutableListMixin.name = "EventTarget_ListMixin_ImmutableListMixin";
    $desc = $collectedClasses$.EventTarget_ListMixin_ImmutableListMixin[1];
    EventTarget_ListMixin_ImmutableListMixin.prototype = $desc;
    EventTarget_ListMixin_ImmutableListMixin.$__fields__ = [];
    function SourceElement() {
      this.$deferredAction();
    }
    SourceElement.builtin$cls = "SourceElement";
    if (!("name" in SourceElement))
      SourceElement.name = "SourceElement";
    $desc = $collectedClasses$.SourceElement[1];
    SourceElement.prototype = $desc;
    SourceElement.$__fields__ = [];
    SourceElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function SourceInfo() {
      this.$deferredAction();
    }
    SourceInfo.builtin$cls = "SourceInfo";
    if (!("name" in SourceInfo))
      SourceInfo.name = "SourceInfo";
    $desc = $collectedClasses$.SourceInfo[1];
    SourceInfo.prototype = $desc;
    SourceInfo.$__fields__ = [];
    SourceInfo.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    SourceInfo.prototype.get$kind = function(receiver) {
      return receiver.kind;
    };
    function SpeechGrammar() {
      this.$deferredAction();
    }
    SpeechGrammar.builtin$cls = "SpeechGrammar";
    if (!("name" in SpeechGrammar))
      SpeechGrammar.name = "SpeechGrammar";
    $desc = $collectedClasses$.SpeechGrammar[1];
    SpeechGrammar.prototype = $desc;
    SpeechGrammar.$__fields__ = [];
    function SpeechGrammarList() {
      this.$deferredAction();
    }
    SpeechGrammarList.builtin$cls = "SpeechGrammarList";
    if (!("name" in SpeechGrammarList))
      SpeechGrammarList.name = "SpeechGrammarList";
    $desc = $collectedClasses$.SpeechGrammarList[1];
    SpeechGrammarList.prototype = $desc;
    SpeechGrammarList.$__fields__ = [];
    function Interceptor_ListMixin5() {
      this.$deferredAction();
    }
    Interceptor_ListMixin5.builtin$cls = "Interceptor_ListMixin5";
    if (!("name" in Interceptor_ListMixin5))
      Interceptor_ListMixin5.name = "Interceptor_ListMixin5";
    $desc = $collectedClasses$.Interceptor_ListMixin5[1];
    Interceptor_ListMixin5.prototype = $desc;
    Interceptor_ListMixin5.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin5() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin5.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin5";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin5))
      Interceptor_ListMixin_ImmutableListMixin5.name = "Interceptor_ListMixin_ImmutableListMixin5";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin5[1];
    Interceptor_ListMixin_ImmutableListMixin5.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin5.$__fields__ = [];
    function SpeechRecognition() {
      this.$deferredAction();
    }
    SpeechRecognition.builtin$cls = "SpeechRecognition";
    if (!("name" in SpeechRecognition))
      SpeechRecognition.name = "SpeechRecognition";
    $desc = $collectedClasses$.SpeechRecognition[1];
    SpeechRecognition.prototype = $desc;
    SpeechRecognition.$__fields__ = [];
    function SpeechRecognitionError() {
      this.$deferredAction();
    }
    SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
    if (!("name" in SpeechRecognitionError))
      SpeechRecognitionError.name = "SpeechRecognitionError";
    $desc = $collectedClasses$.SpeechRecognitionError[1];
    SpeechRecognitionError.prototype = $desc;
    SpeechRecognitionError.$__fields__ = [];
    SpeechRecognitionError.prototype.get$error = function(receiver) {
      return receiver.error;
    };
    SpeechRecognitionError.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function SpeechRecognitionEvent() {
      this.$deferredAction();
    }
    SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
    if (!("name" in SpeechRecognitionEvent))
      SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
    $desc = $collectedClasses$.SpeechRecognitionEvent[1];
    SpeechRecognitionEvent.prototype = $desc;
    SpeechRecognitionEvent.$__fields__ = [];
    SpeechRecognitionEvent.prototype.get$results = function(receiver) {
      return receiver.results;
    };
    function SpeechRecognitionResult() {
      this.$deferredAction();
    }
    SpeechRecognitionResult.builtin$cls = "SpeechRecognitionResult";
    if (!("name" in SpeechRecognitionResult))
      SpeechRecognitionResult.name = "SpeechRecognitionResult";
    $desc = $collectedClasses$.SpeechRecognitionResult[1];
    SpeechRecognitionResult.prototype = $desc;
    SpeechRecognitionResult.$__fields__ = [];
    SpeechRecognitionResult.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function SpeechSynthesis() {
      this.$deferredAction();
    }
    SpeechSynthesis.builtin$cls = "SpeechSynthesis";
    if (!("name" in SpeechSynthesis))
      SpeechSynthesis.name = "SpeechSynthesis";
    $desc = $collectedClasses$.SpeechSynthesis[1];
    SpeechSynthesis.prototype = $desc;
    SpeechSynthesis.$__fields__ = [];
    function SpeechSynthesisEvent() {
      this.$deferredAction();
    }
    SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
    if (!("name" in SpeechSynthesisEvent))
      SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
    $desc = $collectedClasses$.SpeechSynthesisEvent[1];
    SpeechSynthesisEvent.prototype = $desc;
    SpeechSynthesisEvent.$__fields__ = [];
    SpeechSynthesisEvent.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function SpeechSynthesisUtterance() {
      this.$deferredAction();
    }
    SpeechSynthesisUtterance.builtin$cls = "SpeechSynthesisUtterance";
    if (!("name" in SpeechSynthesisUtterance))
      SpeechSynthesisUtterance.name = "SpeechSynthesisUtterance";
    $desc = $collectedClasses$.SpeechSynthesisUtterance[1];
    SpeechSynthesisUtterance.prototype = $desc;
    SpeechSynthesisUtterance.$__fields__ = [];
    SpeechSynthesisUtterance.prototype.get$text = function(receiver) {
      return receiver.text;
    };
    SpeechSynthesisUtterance.prototype.set$text = function(receiver, v) {
      return receiver.text = v;
    };
    function SpeechSynthesisVoice() {
      this.$deferredAction();
    }
    SpeechSynthesisVoice.builtin$cls = "SpeechSynthesisVoice";
    if (!("name" in SpeechSynthesisVoice))
      SpeechSynthesisVoice.name = "SpeechSynthesisVoice";
    $desc = $collectedClasses$.SpeechSynthesisVoice[1];
    SpeechSynthesisVoice.prototype = $desc;
    SpeechSynthesisVoice.$__fields__ = [];
    SpeechSynthesisVoice.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function StashedMessagePort() {
      this.$deferredAction();
    }
    StashedMessagePort.builtin$cls = "StashedMessagePort";
    if (!("name" in StashedMessagePort))
      StashedMessagePort.name = "StashedMessagePort";
    $desc = $collectedClasses$.StashedMessagePort[1];
    StashedMessagePort.prototype = $desc;
    StashedMessagePort.$__fields__ = [];
    StashedMessagePort.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function Storage() {
      this.$deferredAction();
    }
    Storage.builtin$cls = "Storage";
    if (!("name" in Storage))
      Storage.name = "Storage";
    $desc = $collectedClasses$.Storage[1];
    Storage.prototype = $desc;
    Storage.$__fields__ = [];
    function Storage_addAll_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    Storage_addAll_closure.builtin$cls = "Storage_addAll_closure";
    if (!("name" in Storage_addAll_closure))
      Storage_addAll_closure.name = "Storage_addAll_closure";
    $desc = $collectedClasses$.Storage_addAll_closure[1];
    Storage_addAll_closure.prototype = $desc;
    Storage_addAll_closure.$__fields__ = ["$this"];
    function Storage_keys_closure(keys) {
      this.keys = keys;
      this.$deferredAction();
    }
    Storage_keys_closure.builtin$cls = "Storage_keys_closure";
    if (!("name" in Storage_keys_closure))
      Storage_keys_closure.name = "Storage_keys_closure";
    $desc = $collectedClasses$.Storage_keys_closure[1];
    Storage_keys_closure.prototype = $desc;
    Storage_keys_closure.$__fields__ = ["keys"];
    function Storage_values_closure(values) {
      this.values = values;
      this.$deferredAction();
    }
    Storage_values_closure.builtin$cls = "Storage_values_closure";
    if (!("name" in Storage_values_closure))
      Storage_values_closure.name = "Storage_values_closure";
    $desc = $collectedClasses$.Storage_values_closure[1];
    Storage_values_closure.prototype = $desc;
    Storage_values_closure.$__fields__ = ["values"];
    function StorageEvent() {
      this.$deferredAction();
    }
    StorageEvent.builtin$cls = "StorageEvent";
    if (!("name" in StorageEvent))
      StorageEvent.name = "StorageEvent";
    $desc = $collectedClasses$.StorageEvent[1];
    StorageEvent.prototype = $desc;
    StorageEvent.$__fields__ = [];
    StorageEvent.prototype.get$key = function(receiver) {
      return receiver.key;
    };
    StorageEvent.prototype.get$url = function(receiver) {
      return receiver.url;
    };
    function StyleElement() {
      this.$deferredAction();
    }
    StyleElement.builtin$cls = "StyleElement";
    if (!("name" in StyleElement))
      StyleElement.name = "StyleElement";
    $desc = $collectedClasses$.StyleElement[1];
    StyleElement.prototype = $desc;
    StyleElement.$__fields__ = [];
    StyleElement.prototype.set$disabled = function(receiver, v) {
      return receiver.disabled = v;
    };
    StyleElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function StyleMedia() {
      this.$deferredAction();
    }
    StyleMedia.builtin$cls = "StyleMedia";
    if (!("name" in StyleMedia))
      StyleMedia.name = "StyleMedia";
    $desc = $collectedClasses$.StyleMedia[1];
    StyleMedia.prototype = $desc;
    StyleMedia.$__fields__ = [];
    StyleMedia.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function StyleSheet() {
      this.$deferredAction();
    }
    StyleSheet.builtin$cls = "StyleSheet";
    if (!("name" in StyleSheet))
      StyleSheet.name = "StyleSheet";
    $desc = $collectedClasses$.StyleSheet[1];
    StyleSheet.prototype = $desc;
    StyleSheet.$__fields__ = [];
    StyleSheet.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    StyleSheet.prototype.get$title = function(receiver) {
      return receiver.title;
    };
    StyleSheet.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function TableColElement() {
      this.$deferredAction();
    }
    TableColElement.builtin$cls = "TableColElement";
    if (!("name" in TableColElement))
      TableColElement.name = "TableColElement";
    $desc = $collectedClasses$.TableColElement[1];
    TableColElement.prototype = $desc;
    TableColElement.$__fields__ = [];
    TableColElement.prototype.get$span = function(receiver) {
      return receiver.span;
    };
    function TableElement() {
      this.$deferredAction();
    }
    TableElement.builtin$cls = "TableElement";
    if (!("name" in TableElement))
      TableElement.name = "TableElement";
    $desc = $collectedClasses$.TableElement[1];
    TableElement.prototype = $desc;
    TableElement.$__fields__ = [];
    function TableRowElement() {
      this.$deferredAction();
    }
    TableRowElement.builtin$cls = "TableRowElement";
    if (!("name" in TableRowElement))
      TableRowElement.name = "TableRowElement";
    $desc = $collectedClasses$.TableRowElement[1];
    TableRowElement.prototype = $desc;
    TableRowElement.$__fields__ = [];
    function TableSectionElement() {
      this.$deferredAction();
    }
    TableSectionElement.builtin$cls = "TableSectionElement";
    if (!("name" in TableSectionElement))
      TableSectionElement.name = "TableSectionElement";
    $desc = $collectedClasses$.TableSectionElement[1];
    TableSectionElement.prototype = $desc;
    TableSectionElement.$__fields__ = [];
    function TemplateElement() {
      this.$deferredAction();
    }
    TemplateElement.builtin$cls = "TemplateElement";
    if (!("name" in TemplateElement))
      TemplateElement.name = "TemplateElement";
    $desc = $collectedClasses$.TemplateElement[1];
    TemplateElement.prototype = $desc;
    TemplateElement.$__fields__ = [];
    TemplateElement.prototype.get$content = function(receiver) {
      return receiver.content;
    };
    function TextAreaElement() {
      this.$deferredAction();
    }
    TextAreaElement.builtin$cls = "TextAreaElement";
    if (!("name" in TextAreaElement))
      TextAreaElement.name = "TextAreaElement";
    $desc = $collectedClasses$.TextAreaElement[1];
    TextAreaElement.prototype = $desc;
    TextAreaElement.$__fields__ = [];
    TextAreaElement.prototype.set$disabled = function(receiver, v) {
      return receiver.disabled = v;
    };
    TextAreaElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    TextAreaElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    TextAreaElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function TextEvent() {
      this.$deferredAction();
    }
    TextEvent.builtin$cls = "TextEvent";
    if (!("name" in TextEvent))
      TextEvent.name = "TextEvent";
    $desc = $collectedClasses$.TextEvent[1];
    TextEvent.prototype = $desc;
    TextEvent.$__fields__ = [];
    TextEvent.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    function TextTrack() {
      this.$deferredAction();
    }
    TextTrack.builtin$cls = "TextTrack";
    if (!("name" in TextTrack))
      TextTrack.name = "TextTrack";
    $desc = $collectedClasses$.TextTrack[1];
    TextTrack.prototype = $desc;
    TextTrack.$__fields__ = [];
    TextTrack.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    TextTrack.prototype.get$kind = function(receiver) {
      return receiver.kind;
    };
    TextTrack.prototype.get$regions = function(receiver) {
      return receiver.regions;
    };
    function TextTrackCue() {
      this.$deferredAction();
    }
    TextTrackCue.builtin$cls = "TextTrackCue";
    if (!("name" in TextTrackCue))
      TextTrackCue.name = "TextTrackCue";
    $desc = $collectedClasses$.TextTrackCue[1];
    TextTrackCue.prototype = $desc;
    TextTrackCue.$__fields__ = [];
    TextTrackCue.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    function TextTrackCueList() {
      this.$deferredAction();
    }
    TextTrackCueList.builtin$cls = "TextTrackCueList";
    if (!("name" in TextTrackCueList))
      TextTrackCueList.name = "TextTrackCueList";
    $desc = $collectedClasses$.TextTrackCueList[1];
    TextTrackCueList.prototype = $desc;
    TextTrackCueList.$__fields__ = [];
    function Interceptor_ListMixin6() {
      this.$deferredAction();
    }
    Interceptor_ListMixin6.builtin$cls = "Interceptor_ListMixin6";
    if (!("name" in Interceptor_ListMixin6))
      Interceptor_ListMixin6.name = "Interceptor_ListMixin6";
    $desc = $collectedClasses$.Interceptor_ListMixin6[1];
    Interceptor_ListMixin6.prototype = $desc;
    Interceptor_ListMixin6.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin6() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin6.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin6";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin6))
      Interceptor_ListMixin_ImmutableListMixin6.name = "Interceptor_ListMixin_ImmutableListMixin6";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin6[1];
    Interceptor_ListMixin_ImmutableListMixin6.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin6.$__fields__ = [];
    function TextTrackList() {
      this.$deferredAction();
    }
    TextTrackList.builtin$cls = "TextTrackList";
    if (!("name" in TextTrackList))
      TextTrackList.name = "TextTrackList";
    $desc = $collectedClasses$.TextTrackList[1];
    TextTrackList.prototype = $desc;
    TextTrackList.$__fields__ = [];
    function EventTarget_ListMixin0() {
      this.$deferredAction();
    }
    EventTarget_ListMixin0.builtin$cls = "EventTarget_ListMixin0";
    if (!("name" in EventTarget_ListMixin0))
      EventTarget_ListMixin0.name = "EventTarget_ListMixin0";
    $desc = $collectedClasses$.EventTarget_ListMixin0[1];
    EventTarget_ListMixin0.prototype = $desc;
    EventTarget_ListMixin0.$__fields__ = [];
    function EventTarget_ListMixin_ImmutableListMixin0() {
      this.$deferredAction();
    }
    EventTarget_ListMixin_ImmutableListMixin0.builtin$cls = "EventTarget_ListMixin_ImmutableListMixin0";
    if (!("name" in EventTarget_ListMixin_ImmutableListMixin0))
      EventTarget_ListMixin_ImmutableListMixin0.name = "EventTarget_ListMixin_ImmutableListMixin0";
    $desc = $collectedClasses$.EventTarget_ListMixin_ImmutableListMixin0[1];
    EventTarget_ListMixin_ImmutableListMixin0.prototype = $desc;
    EventTarget_ListMixin_ImmutableListMixin0.$__fields__ = [];
    function TimeRanges() {
      this.$deferredAction();
    }
    TimeRanges.builtin$cls = "TimeRanges";
    if (!("name" in TimeRanges))
      TimeRanges.name = "TimeRanges";
    $desc = $collectedClasses$.TimeRanges[1];
    TimeRanges.prototype = $desc;
    TimeRanges.$__fields__ = [];
    TimeRanges.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function Touch() {
      this.$deferredAction();
    }
    Touch.builtin$cls = "Touch";
    if (!("name" in Touch))
      Touch.name = "Touch";
    $desc = $collectedClasses$.Touch[1];
    Touch.prototype = $desc;
    Touch.$__fields__ = [];
    function TouchEvent() {
      this.$deferredAction();
    }
    TouchEvent.builtin$cls = "TouchEvent";
    if (!("name" in TouchEvent))
      TouchEvent.name = "TouchEvent";
    $desc = $collectedClasses$.TouchEvent[1];
    TouchEvent.prototype = $desc;
    TouchEvent.$__fields__ = [];
    TouchEvent.prototype.get$ctrlKey = function(receiver) {
      return receiver.ctrlKey;
    };
    TouchEvent.prototype.get$metaKey = function(receiver) {
      return receiver.metaKey;
    };
    TouchEvent.prototype.get$shiftKey = function(receiver) {
      return receiver.shiftKey;
    };
    function TouchList() {
      this.$deferredAction();
    }
    TouchList.builtin$cls = "TouchList";
    if (!("name" in TouchList))
      TouchList.name = "TouchList";
    $desc = $collectedClasses$.TouchList[1];
    TouchList.prototype = $desc;
    TouchList.$__fields__ = [];
    function Interceptor_ListMixin7() {
      this.$deferredAction();
    }
    Interceptor_ListMixin7.builtin$cls = "Interceptor_ListMixin7";
    if (!("name" in Interceptor_ListMixin7))
      Interceptor_ListMixin7.name = "Interceptor_ListMixin7";
    $desc = $collectedClasses$.Interceptor_ListMixin7[1];
    Interceptor_ListMixin7.prototype = $desc;
    Interceptor_ListMixin7.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin7() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin7.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin7";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin7))
      Interceptor_ListMixin_ImmutableListMixin7.name = "Interceptor_ListMixin_ImmutableListMixin7";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin7[1];
    Interceptor_ListMixin_ImmutableListMixin7.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin7.$__fields__ = [];
    function TrackDefault() {
      this.$deferredAction();
    }
    TrackDefault.builtin$cls = "TrackDefault";
    if (!("name" in TrackDefault))
      TrackDefault.name = "TrackDefault";
    $desc = $collectedClasses$.TrackDefault[1];
    TrackDefault.prototype = $desc;
    TrackDefault.$__fields__ = [];
    TrackDefault.prototype.get$kinds = function(receiver) {
      return receiver.kinds;
    };
    TrackDefault.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function TrackDefaultList() {
      this.$deferredAction();
    }
    TrackDefaultList.builtin$cls = "TrackDefaultList";
    if (!("name" in TrackDefaultList))
      TrackDefaultList.name = "TrackDefaultList";
    $desc = $collectedClasses$.TrackDefaultList[1];
    TrackDefaultList.prototype = $desc;
    TrackDefaultList.$__fields__ = [];
    TrackDefaultList.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function TrackElement() {
      this.$deferredAction();
    }
    TrackElement.builtin$cls = "TrackElement";
    if (!("name" in TrackElement))
      TrackElement.name = "TrackElement";
    $desc = $collectedClasses$.TrackElement[1];
    TrackElement.prototype = $desc;
    TrackElement.$__fields__ = [];
    TrackElement.prototype.get$kind = function(receiver) {
      return receiver.kind;
    };
    function TreeWalker() {
      this.$deferredAction();
    }
    TreeWalker.builtin$cls = "TreeWalker";
    if (!("name" in TreeWalker))
      TreeWalker.name = "TreeWalker";
    $desc = $collectedClasses$.TreeWalker[1];
    TreeWalker.prototype = $desc;
    TreeWalker.$__fields__ = [];
    TreeWalker.prototype.get$root = function(receiver) {
      return receiver.root;
    };
    function UIEvent() {
      this.$deferredAction();
    }
    UIEvent.builtin$cls = "UIEvent";
    if (!("name" in UIEvent))
      UIEvent.name = "UIEvent";
    $desc = $collectedClasses$.UIEvent[1];
    UIEvent.prototype = $desc;
    UIEvent.$__fields__ = [];
    UIEvent.prototype.get$detail = function(receiver) {
      return receiver.detail;
    };
    function Url() {
      this.$deferredAction();
    }
    Url.builtin$cls = "Url";
    if (!("name" in Url))
      Url.name = "Url";
    $desc = $collectedClasses$.Url[1];
    Url.prototype = $desc;
    Url.$__fields__ = [];
    Url.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    Url.prototype.get$port = function(receiver) {
      return receiver.port;
    };
    Url.prototype.get$search = function(receiver) {
      return receiver.search;
    };
    function VideoElement() {
      this.$deferredAction();
    }
    VideoElement.builtin$cls = "VideoElement";
    if (!("name" in VideoElement))
      VideoElement.name = "VideoElement";
    $desc = $collectedClasses$.VideoElement[1];
    VideoElement.prototype = $desc;
    VideoElement.$__fields__ = [];
    VideoElement.prototype.set$height = function(receiver, v) {
      return receiver.height = v;
    };
    VideoElement.prototype.set$width = function(receiver, v) {
      return receiver.width = v;
    };
    function VideoTrack() {
      this.$deferredAction();
    }
    VideoTrack.builtin$cls = "VideoTrack";
    if (!("name" in VideoTrack))
      VideoTrack.name = "VideoTrack";
    $desc = $collectedClasses$.VideoTrack[1];
    VideoTrack.prototype = $desc;
    VideoTrack.$__fields__ = [];
    VideoTrack.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    VideoTrack.prototype.get$kind = function(receiver) {
      return receiver.kind;
    };
    function VideoTrackList() {
      this.$deferredAction();
    }
    VideoTrackList.builtin$cls = "VideoTrackList";
    if (!("name" in VideoTrackList))
      VideoTrackList.name = "VideoTrackList";
    $desc = $collectedClasses$.VideoTrackList[1];
    VideoTrackList.prototype = $desc;
    VideoTrackList.$__fields__ = [];
    VideoTrackList.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function VttCue() {
      this.$deferredAction();
    }
    VttCue.builtin$cls = "VttCue";
    if (!("name" in VttCue))
      VttCue.name = "VttCue";
    $desc = $collectedClasses$.VttCue[1];
    VttCue.prototype = $desc;
    VttCue.$__fields__ = [];
    VttCue.prototype.get$line = function(receiver) {
      return receiver.line;
    };
    VttCue.prototype.set$position = function(receiver, v) {
      return receiver.position = v;
    };
    VttCue.prototype.get$text = function(receiver) {
      return receiver.text;
    };
    VttCue.prototype.set$text = function(receiver, v) {
      return receiver.text = v;
    };
    function VttRegion() {
      this.$deferredAction();
    }
    VttRegion.builtin$cls = "VttRegion";
    if (!("name" in VttRegion))
      VttRegion.name = "VttRegion";
    $desc = $collectedClasses$.VttRegion[1];
    VttRegion.prototype = $desc;
    VttRegion.$__fields__ = [];
    VttRegion.prototype.set$height = function(receiver, v) {
      return receiver.height = v;
    };
    VttRegion.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    VttRegion.prototype.set$width = function(receiver, v) {
      return receiver.width = v;
    };
    function VttRegionList() {
      this.$deferredAction();
    }
    VttRegionList.builtin$cls = "VttRegionList";
    if (!("name" in VttRegionList))
      VttRegionList.name = "VttRegionList";
    $desc = $collectedClasses$.VttRegionList[1];
    VttRegionList.prototype = $desc;
    VttRegionList.$__fields__ = [];
    VttRegionList.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function WebSocket0() {
      this.$deferredAction();
    }
    WebSocket0.builtin$cls = "WebSocket0";
    if (!("name" in WebSocket0))
      WebSocket0.name = "WebSocket0";
    $desc = $collectedClasses$.WebSocket0[1];
    WebSocket0.prototype = $desc;
    WebSocket0.$__fields__ = [];
    WebSocket0.prototype.get$url = function(receiver) {
      return receiver.url;
    };
    function Window() {
      this.$deferredAction();
    }
    Window.builtin$cls = "Window";
    if (!("name" in Window))
      Window.name = "Window";
    $desc = $collectedClasses$.Window[1];
    Window.prototype = $desc;
    Window.$__fields__ = [];
    Window.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function Worker() {
      this.$deferredAction();
    }
    Worker.builtin$cls = "Worker";
    if (!("name" in Worker))
      Worker.name = "Worker";
    $desc = $collectedClasses$.Worker[1];
    Worker.prototype = $desc;
    Worker.$__fields__ = [];
    function WorkerGlobalScope() {
      this.$deferredAction();
    }
    WorkerGlobalScope.builtin$cls = "WorkerGlobalScope";
    if (!("name" in WorkerGlobalScope))
      WorkerGlobalScope.name = "WorkerGlobalScope";
    $desc = $collectedClasses$.WorkerGlobalScope[1];
    WorkerGlobalScope.prototype = $desc;
    WorkerGlobalScope.$__fields__ = [];
    WorkerGlobalScope.prototype.get$location = function(receiver) {
      return receiver.location;
    };
    function XsltProcessor() {
      this.$deferredAction();
    }
    XsltProcessor.builtin$cls = "XsltProcessor";
    if (!("name" in XsltProcessor))
      XsltProcessor.name = "XsltProcessor";
    $desc = $collectedClasses$.XsltProcessor[1];
    XsltProcessor.prototype = $desc;
    XsltProcessor.$__fields__ = [];
    function _Attr() {
      this.$deferredAction();
    }
    _Attr.builtin$cls = "_Attr";
    if (!("name" in _Attr))
      _Attr.name = "_Attr";
    $desc = $collectedClasses$._Attr[1];
    _Attr.prototype = $desc;
    _Attr.$__fields__ = [];
    _Attr.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    _Attr.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function _ClientRect() {
      this.$deferredAction();
    }
    _ClientRect.builtin$cls = "_ClientRect";
    if (!("name" in _ClientRect))
      _ClientRect.name = "_ClientRect";
    $desc = $collectedClasses$._ClientRect[1];
    _ClientRect.prototype = $desc;
    _ClientRect.$__fields__ = [];
    _ClientRect.prototype.get$bottom = function(receiver) {
      return receiver.bottom;
    };
    _ClientRect.prototype.get$height = function(receiver) {
      return receiver.height;
    };
    _ClientRect.prototype.get$left = function(receiver) {
      return receiver.left;
    };
    _ClientRect.prototype.get$right = function(receiver) {
      return receiver.right;
    };
    _ClientRect.prototype.get$top = function(receiver) {
      return receiver.top;
    };
    _ClientRect.prototype.get$width = function(receiver) {
      return receiver.width;
    };
    function _ClientRectList() {
      this.$deferredAction();
    }
    _ClientRectList.builtin$cls = "_ClientRectList";
    if (!("name" in _ClientRectList))
      _ClientRectList.name = "_ClientRectList";
    $desc = $collectedClasses$._ClientRectList[1];
    _ClientRectList.prototype = $desc;
    _ClientRectList.$__fields__ = [];
    function Interceptor_ListMixin8() {
      this.$deferredAction();
    }
    Interceptor_ListMixin8.builtin$cls = "Interceptor_ListMixin8";
    if (!("name" in Interceptor_ListMixin8))
      Interceptor_ListMixin8.name = "Interceptor_ListMixin8";
    $desc = $collectedClasses$.Interceptor_ListMixin8[1];
    Interceptor_ListMixin8.prototype = $desc;
    Interceptor_ListMixin8.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin8() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin8.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin8";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin8))
      Interceptor_ListMixin_ImmutableListMixin8.name = "Interceptor_ListMixin_ImmutableListMixin8";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin8[1];
    Interceptor_ListMixin_ImmutableListMixin8.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin8.$__fields__ = [];
    function _CssRuleList() {
      this.$deferredAction();
    }
    _CssRuleList.builtin$cls = "_CssRuleList";
    if (!("name" in _CssRuleList))
      _CssRuleList.name = "_CssRuleList";
    $desc = $collectedClasses$._CssRuleList[1];
    _CssRuleList.prototype = $desc;
    _CssRuleList.$__fields__ = [];
    function Interceptor_ListMixin9() {
      this.$deferredAction();
    }
    Interceptor_ListMixin9.builtin$cls = "Interceptor_ListMixin9";
    if (!("name" in Interceptor_ListMixin9))
      Interceptor_ListMixin9.name = "Interceptor_ListMixin9";
    $desc = $collectedClasses$.Interceptor_ListMixin9[1];
    Interceptor_ListMixin9.prototype = $desc;
    Interceptor_ListMixin9.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin9() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin9.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin9";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin9))
      Interceptor_ListMixin_ImmutableListMixin9.name = "Interceptor_ListMixin_ImmutableListMixin9";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin9[1];
    Interceptor_ListMixin_ImmutableListMixin9.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin9.$__fields__ = [];
    function _DocumentType() {
      this.$deferredAction();
    }
    _DocumentType.builtin$cls = "_DocumentType";
    if (!("name" in _DocumentType))
      _DocumentType.name = "_DocumentType";
    $desc = $collectedClasses$._DocumentType[1];
    _DocumentType.prototype = $desc;
    _DocumentType.$__fields__ = [];
    function _DomRect() {
      this.$deferredAction();
    }
    _DomRect.builtin$cls = "_DomRect";
    if (!("name" in _DomRect))
      _DomRect.name = "_DomRect";
    $desc = $collectedClasses$._DomRect[1];
    _DomRect.prototype = $desc;
    _DomRect.$__fields__ = [];
    function _GamepadList() {
      this.$deferredAction();
    }
    _GamepadList.builtin$cls = "_GamepadList";
    if (!("name" in _GamepadList))
      _GamepadList.name = "_GamepadList";
    $desc = $collectedClasses$._GamepadList[1];
    _GamepadList.prototype = $desc;
    _GamepadList.$__fields__ = [];
    function Interceptor_ListMixin10() {
      this.$deferredAction();
    }
    Interceptor_ListMixin10.builtin$cls = "Interceptor_ListMixin10";
    if (!("name" in Interceptor_ListMixin10))
      Interceptor_ListMixin10.name = "Interceptor_ListMixin10";
    $desc = $collectedClasses$.Interceptor_ListMixin10[1];
    Interceptor_ListMixin10.prototype = $desc;
    Interceptor_ListMixin10.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin10() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin10.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin10";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin10))
      Interceptor_ListMixin_ImmutableListMixin10.name = "Interceptor_ListMixin_ImmutableListMixin10";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin10[1];
    Interceptor_ListMixin_ImmutableListMixin10.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin10.$__fields__ = [];
    function _HTMLFrameSetElement() {
      this.$deferredAction();
    }
    _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
    if (!("name" in _HTMLFrameSetElement))
      _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
    $desc = $collectedClasses$._HTMLFrameSetElement[1];
    _HTMLFrameSetElement.prototype = $desc;
    _HTMLFrameSetElement.$__fields__ = [];
    function _NamedNodeMap() {
      this.$deferredAction();
    }
    _NamedNodeMap.builtin$cls = "_NamedNodeMap";
    if (!("name" in _NamedNodeMap))
      _NamedNodeMap.name = "_NamedNodeMap";
    $desc = $collectedClasses$._NamedNodeMap[1];
    _NamedNodeMap.prototype = $desc;
    _NamedNodeMap.$__fields__ = [];
    function Interceptor_ListMixin11() {
      this.$deferredAction();
    }
    Interceptor_ListMixin11.builtin$cls = "Interceptor_ListMixin11";
    if (!("name" in Interceptor_ListMixin11))
      Interceptor_ListMixin11.name = "Interceptor_ListMixin11";
    $desc = $collectedClasses$.Interceptor_ListMixin11[1];
    Interceptor_ListMixin11.prototype = $desc;
    Interceptor_ListMixin11.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin11() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin11.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin11";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin11))
      Interceptor_ListMixin_ImmutableListMixin11.name = "Interceptor_ListMixin_ImmutableListMixin11";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin11[1];
    Interceptor_ListMixin_ImmutableListMixin11.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin11.$__fields__ = [];
    function _Request() {
      this.$deferredAction();
    }
    _Request.builtin$cls = "_Request";
    if (!("name" in _Request))
      _Request.name = "_Request";
    $desc = $collectedClasses$._Request[1];
    _Request.prototype = $desc;
    _Request.$__fields__ = [];
    _Request.prototype.get$url = function(receiver) {
      return receiver.url;
    };
    function _ServiceWorker() {
      this.$deferredAction();
    }
    _ServiceWorker.builtin$cls = "_ServiceWorker";
    if (!("name" in _ServiceWorker))
      _ServiceWorker.name = "_ServiceWorker";
    $desc = $collectedClasses$._ServiceWorker[1];
    _ServiceWorker.prototype = $desc;
    _ServiceWorker.$__fields__ = [];
    function _SpeechRecognitionResultList() {
      this.$deferredAction();
    }
    _SpeechRecognitionResultList.builtin$cls = "_SpeechRecognitionResultList";
    if (!("name" in _SpeechRecognitionResultList))
      _SpeechRecognitionResultList.name = "_SpeechRecognitionResultList";
    $desc = $collectedClasses$._SpeechRecognitionResultList[1];
    _SpeechRecognitionResultList.prototype = $desc;
    _SpeechRecognitionResultList.$__fields__ = [];
    function Interceptor_ListMixin12() {
      this.$deferredAction();
    }
    Interceptor_ListMixin12.builtin$cls = "Interceptor_ListMixin12";
    if (!("name" in Interceptor_ListMixin12))
      Interceptor_ListMixin12.name = "Interceptor_ListMixin12";
    $desc = $collectedClasses$.Interceptor_ListMixin12[1];
    Interceptor_ListMixin12.prototype = $desc;
    Interceptor_ListMixin12.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin12() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin12.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin12";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin12))
      Interceptor_ListMixin_ImmutableListMixin12.name = "Interceptor_ListMixin_ImmutableListMixin12";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin12[1];
    Interceptor_ListMixin_ImmutableListMixin12.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin12.$__fields__ = [];
    function _StyleSheetList() {
      this.$deferredAction();
    }
    _StyleSheetList.builtin$cls = "_StyleSheetList";
    if (!("name" in _StyleSheetList))
      _StyleSheetList.name = "_StyleSheetList";
    $desc = $collectedClasses$._StyleSheetList[1];
    _StyleSheetList.prototype = $desc;
    _StyleSheetList.$__fields__ = [];
    function Interceptor_ListMixin13() {
      this.$deferredAction();
    }
    Interceptor_ListMixin13.builtin$cls = "Interceptor_ListMixin13";
    if (!("name" in Interceptor_ListMixin13))
      Interceptor_ListMixin13.name = "Interceptor_ListMixin13";
    $desc = $collectedClasses$.Interceptor_ListMixin13[1];
    Interceptor_ListMixin13.prototype = $desc;
    Interceptor_ListMixin13.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin13() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin13.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin13";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin13))
      Interceptor_ListMixin_ImmutableListMixin13.name = "Interceptor_ListMixin_ImmutableListMixin13";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin13[1];
    Interceptor_ListMixin_ImmutableListMixin13.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin13.$__fields__ = [];
    function _WorkerLocation() {
      this.$deferredAction();
    }
    _WorkerLocation.builtin$cls = "_WorkerLocation";
    if (!("name" in _WorkerLocation))
      _WorkerLocation.name = "_WorkerLocation";
    $desc = $collectedClasses$._WorkerLocation[1];
    _WorkerLocation.prototype = $desc;
    _WorkerLocation.$__fields__ = [];
    function _WorkerNavigator() {
      this.$deferredAction();
    }
    _WorkerNavigator.builtin$cls = "_WorkerNavigator";
    if (!("name" in _WorkerNavigator))
      _WorkerNavigator.name = "_WorkerNavigator";
    $desc = $collectedClasses$._WorkerNavigator[1];
    _WorkerNavigator.prototype = $desc;
    _WorkerNavigator.$__fields__ = [];
    function _AttributeMap(_html$_element) {
      this._html$_element = _html$_element;
      this.$deferredAction();
    }
    _AttributeMap.builtin$cls = "_AttributeMap";
    if (!("name" in _AttributeMap))
      _AttributeMap.name = "_AttributeMap";
    $desc = $collectedClasses$._AttributeMap[1];
    _AttributeMap.prototype = $desc;
    _AttributeMap.$__fields__ = ["_html$_element"];
    _AttributeMap.prototype.get$_html$_element = function() {
      return this._html$_element;
    };
    function _AttributeMap_addAll_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _AttributeMap_addAll_closure.builtin$cls = "_AttributeMap_addAll_closure";
    if (!("name" in _AttributeMap_addAll_closure))
      _AttributeMap_addAll_closure.name = "_AttributeMap_addAll_closure";
    $desc = $collectedClasses$._AttributeMap_addAll_closure[1];
    _AttributeMap_addAll_closure.prototype = $desc;
    _AttributeMap_addAll_closure.$__fields__ = ["$this"];
    function _ElementAttributeMap(_html$_element) {
      this._html$_element = _html$_element;
      this.$deferredAction();
    }
    _ElementAttributeMap.builtin$cls = "_ElementAttributeMap";
    if (!("name" in _ElementAttributeMap))
      _ElementAttributeMap.name = "_ElementAttributeMap";
    $desc = $collectedClasses$._ElementAttributeMap[1];
    _ElementAttributeMap.prototype = $desc;
    _ElementAttributeMap.$__fields__ = ["_html$_element"];
    function _MarginCssRect(_html$_element) {
      this._html$_element = _html$_element;
      this.$deferredAction();
    }
    _MarginCssRect.builtin$cls = "_MarginCssRect";
    if (!("name" in _MarginCssRect))
      _MarginCssRect.name = "_MarginCssRect";
    $desc = $collectedClasses$._MarginCssRect[1];
    _MarginCssRect.prototype = $desc;
    _MarginCssRect.$__fields__ = ["_html$_element"];
    function CssRect(_html$_element) {
      this._html$_element = _html$_element;
      this.$deferredAction();
    }
    CssRect.builtin$cls = "CssRect";
    if (!("name" in CssRect))
      CssRect.name = "CssRect";
    $desc = $collectedClasses$.CssRect[1];
    CssRect.prototype = $desc;
    CssRect.$__fields__ = ["_html$_element"];
    CssRect.prototype.get$_html$_element = function() {
      return this._html$_element;
    };
    function _MultiElementCssClassSet(_elementIterable, _sets) {
      this._elementIterable = _elementIterable;
      this._sets = _sets;
      this.$deferredAction();
    }
    _MultiElementCssClassSet.builtin$cls = "_MultiElementCssClassSet";
    if (!("name" in _MultiElementCssClassSet))
      _MultiElementCssClassSet.name = "_MultiElementCssClassSet";
    $desc = $collectedClasses$._MultiElementCssClassSet[1];
    _MultiElementCssClassSet.prototype = $desc;
    _MultiElementCssClassSet.$__fields__ = ["_elementIterable", "_sets"];
    function closure2() {
      this.$deferredAction();
    }
    closure2.builtin$cls = "closure2";
    if (!("name" in closure2))
      closure2.name = "closure2";
    $desc = $collectedClasses$.closure2[1];
    closure2.prototype = $desc;
    closure2.$__fields__ = [];
    function _MultiElementCssClassSet_readClasses_closure(s) {
      this.s = s;
      this.$deferredAction();
    }
    _MultiElementCssClassSet_readClasses_closure.builtin$cls = "_MultiElementCssClassSet_readClasses_closure";
    if (!("name" in _MultiElementCssClassSet_readClasses_closure))
      _MultiElementCssClassSet_readClasses_closure.name = "_MultiElementCssClassSet_readClasses_closure";
    $desc = $collectedClasses$._MultiElementCssClassSet_readClasses_closure[1];
    _MultiElementCssClassSet_readClasses_closure.prototype = $desc;
    _MultiElementCssClassSet_readClasses_closure.$__fields__ = ["s"];
    function _MultiElementCssClassSet_modify_closure(f) {
      this.f = f;
      this.$deferredAction();
    }
    _MultiElementCssClassSet_modify_closure.builtin$cls = "_MultiElementCssClassSet_modify_closure";
    if (!("name" in _MultiElementCssClassSet_modify_closure))
      _MultiElementCssClassSet_modify_closure.name = "_MultiElementCssClassSet_modify_closure";
    $desc = $collectedClasses$._MultiElementCssClassSet_modify_closure[1];
    _MultiElementCssClassSet_modify_closure.prototype = $desc;
    _MultiElementCssClassSet_modify_closure.$__fields__ = ["f"];
    function _MultiElementCssClassSet_toggle_closure(value, shouldAdd) {
      this.value = value;
      this.shouldAdd = shouldAdd;
      this.$deferredAction();
    }
    _MultiElementCssClassSet_toggle_closure.builtin$cls = "_MultiElementCssClassSet_toggle_closure";
    if (!("name" in _MultiElementCssClassSet_toggle_closure))
      _MultiElementCssClassSet_toggle_closure.name = "_MultiElementCssClassSet_toggle_closure";
    $desc = $collectedClasses$._MultiElementCssClassSet_toggle_closure[1];
    _MultiElementCssClassSet_toggle_closure.prototype = $desc;
    _MultiElementCssClassSet_toggle_closure.$__fields__ = ["value", "shouldAdd"];
    function _MultiElementCssClassSet_remove_closure(value) {
      this.value = value;
      this.$deferredAction();
    }
    _MultiElementCssClassSet_remove_closure.builtin$cls = "_MultiElementCssClassSet_remove_closure";
    if (!("name" in _MultiElementCssClassSet_remove_closure))
      _MultiElementCssClassSet_remove_closure.name = "_MultiElementCssClassSet_remove_closure";
    $desc = $collectedClasses$._MultiElementCssClassSet_remove_closure[1];
    _MultiElementCssClassSet_remove_closure.prototype = $desc;
    _MultiElementCssClassSet_remove_closure.$__fields__ = ["value"];
    function _ElementCssClassSet(_html$_element) {
      this._html$_element = _html$_element;
      this.$deferredAction();
    }
    _ElementCssClassSet.builtin$cls = "_ElementCssClassSet";
    if (!("name" in _ElementCssClassSet))
      _ElementCssClassSet.name = "_ElementCssClassSet";
    $desc = $collectedClasses$._ElementCssClassSet[1];
    _ElementCssClassSet.prototype = $desc;
    _ElementCssClassSet.$__fields__ = ["_html$_element"];
    _ElementCssClassSet.prototype.get$_html$_element = function() {
      return this._html$_element;
    };
    function Dimension(_html$_value, _unit) {
      this._html$_value = _html$_value;
      this._unit = _unit;
      this.$deferredAction();
    }
    Dimension.builtin$cls = "Dimension";
    if (!("name" in Dimension))
      Dimension.name = "Dimension";
    $desc = $collectedClasses$.Dimension[1];
    Dimension.prototype = $desc;
    Dimension.$__fields__ = ["_html$_value", "_unit"];
    function _EventStream(_html$_target, _eventType, _useCapture, $ti) {
      this._html$_target = _html$_target;
      this._eventType = _eventType;
      this._useCapture = _useCapture;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _EventStream.builtin$cls = "_EventStream";
    if (!("name" in _EventStream))
      _EventStream.name = "_EventStream";
    $desc = $collectedClasses$._EventStream[1];
    _EventStream.prototype = $desc;
    _EventStream.$__fields__ = ["_html$_target", "_eventType", "_useCapture"];
    function _ElementEventStreamImpl(_html$_target, _eventType, _useCapture, $ti) {
      this._html$_target = _html$_target;
      this._eventType = _eventType;
      this._useCapture = _useCapture;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
    if (!("name" in _ElementEventStreamImpl))
      _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
    $desc = $collectedClasses$._ElementEventStreamImpl[1];
    _ElementEventStreamImpl.prototype = $desc;
    _ElementEventStreamImpl.$__fields__ = ["_html$_target", "_eventType", "_useCapture"];
    function _ElementListEventStreamImpl(_targetList, _useCapture, _eventType, $ti) {
      this._targetList = _targetList;
      this._useCapture = _useCapture;
      this._eventType = _eventType;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _ElementListEventStreamImpl.builtin$cls = "_ElementListEventStreamImpl";
    if (!("name" in _ElementListEventStreamImpl))
      _ElementListEventStreamImpl.name = "_ElementListEventStreamImpl";
    $desc = $collectedClasses$._ElementListEventStreamImpl[1];
    _ElementListEventStreamImpl.prototype = $desc;
    _ElementListEventStreamImpl.$__fields__ = ["_targetList", "_useCapture", "_eventType"];
    function _EventStreamSubscription(_pauseCount, _html$_target, _eventType, _html$_onData, _useCapture, $ti) {
      this._pauseCount = _pauseCount;
      this._html$_target = _html$_target;
      this._eventType = _eventType;
      this._html$_onData = _html$_onData;
      this._useCapture = _useCapture;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
    if (!("name" in _EventStreamSubscription))
      _EventStreamSubscription.name = "_EventStreamSubscription";
    $desc = $collectedClasses$._EventStreamSubscription[1];
    _EventStreamSubscription.prototype = $desc;
    _EventStreamSubscription.$__fields__ = ["_pauseCount", "_html$_target", "_eventType", "_html$_onData", "_useCapture"];
    function _StreamPool(_html$_controller, _html$_subscriptions, $ti) {
      this._html$_controller = _html$_controller;
      this._html$_subscriptions = _html$_subscriptions;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _StreamPool.builtin$cls = "_StreamPool";
    if (!("name" in _StreamPool))
      _StreamPool.name = "_StreamPool";
    $desc = $collectedClasses$._StreamPool[1];
    _StreamPool.prototype = $desc;
    _StreamPool.$__fields__ = ["_html$_controller", "_html$_subscriptions"];
    function _StreamPool_add_closure($this, stream) {
      this.$this = $this;
      this.stream = stream;
      this.$deferredAction();
    }
    _StreamPool_add_closure.builtin$cls = "_StreamPool_add_closure";
    if (!("name" in _StreamPool_add_closure))
      _StreamPool_add_closure.name = "_StreamPool_add_closure";
    $desc = $collectedClasses$._StreamPool_add_closure[1];
    _StreamPool_add_closure.prototype = $desc;
    _StreamPool_add_closure.$__fields__ = ["$this", "stream"];
    function _Html5NodeValidator(uriPolicy) {
      this.uriPolicy = uriPolicy;
      this.$deferredAction();
    }
    _Html5NodeValidator.builtin$cls = "_Html5NodeValidator";
    if (!("name" in _Html5NodeValidator))
      _Html5NodeValidator.name = "_Html5NodeValidator";
    $desc = $collectedClasses$._Html5NodeValidator[1];
    _Html5NodeValidator.prototype = $desc;
    _Html5NodeValidator.$__fields__ = ["uriPolicy"];
    _Html5NodeValidator.prototype.get$uriPolicy = function() {
      return this.uriPolicy;
    };
    function ImmutableListMixin($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    ImmutableListMixin.builtin$cls = "ImmutableListMixin";
    if (!("name" in ImmutableListMixin))
      ImmutableListMixin.name = "ImmutableListMixin";
    $desc = $collectedClasses$.ImmutableListMixin[1];
    ImmutableListMixin.prototype = $desc;
    ImmutableListMixin.$__fields__ = [];
    function NodeValidatorBuilder(_validators) {
      this._validators = _validators;
      this.$deferredAction();
    }
    NodeValidatorBuilder.builtin$cls = "NodeValidatorBuilder";
    if (!("name" in NodeValidatorBuilder))
      NodeValidatorBuilder.name = "NodeValidatorBuilder";
    $desc = $collectedClasses$.NodeValidatorBuilder[1];
    NodeValidatorBuilder.prototype = $desc;
    NodeValidatorBuilder.$__fields__ = ["_validators"];
    function NodeValidatorBuilder_allowsElement_closure(element) {
      this.element = element;
      this.$deferredAction();
    }
    NodeValidatorBuilder_allowsElement_closure.builtin$cls = "NodeValidatorBuilder_allowsElement_closure";
    if (!("name" in NodeValidatorBuilder_allowsElement_closure))
      NodeValidatorBuilder_allowsElement_closure.name = "NodeValidatorBuilder_allowsElement_closure";
    $desc = $collectedClasses$.NodeValidatorBuilder_allowsElement_closure[1];
    NodeValidatorBuilder_allowsElement_closure.prototype = $desc;
    NodeValidatorBuilder_allowsElement_closure.$__fields__ = ["element"];
    function NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value) {
      this.element = element;
      this.attributeName = attributeName;
      this.value = value;
      this.$deferredAction();
    }
    NodeValidatorBuilder_allowsAttribute_closure.builtin$cls = "NodeValidatorBuilder_allowsAttribute_closure";
    if (!("name" in NodeValidatorBuilder_allowsAttribute_closure))
      NodeValidatorBuilder_allowsAttribute_closure.name = "NodeValidatorBuilder_allowsAttribute_closure";
    $desc = $collectedClasses$.NodeValidatorBuilder_allowsAttribute_closure[1];
    NodeValidatorBuilder_allowsAttribute_closure.prototype = $desc;
    NodeValidatorBuilder_allowsAttribute_closure.$__fields__ = ["element", "attributeName", "value"];
    function _SimpleNodeValidator(uriPolicy) {
      this.uriPolicy = uriPolicy;
      this.$deferredAction();
    }
    _SimpleNodeValidator.builtin$cls = "_SimpleNodeValidator";
    if (!("name" in _SimpleNodeValidator))
      _SimpleNodeValidator.name = "_SimpleNodeValidator";
    $desc = $collectedClasses$._SimpleNodeValidator[1];
    _SimpleNodeValidator.prototype = $desc;
    _SimpleNodeValidator.$__fields__ = ["uriPolicy"];
    _SimpleNodeValidator.prototype.get$uriPolicy = function() {
      return this.uriPolicy;
    };
    function _SimpleNodeValidator_closure() {
      this.$deferredAction();
    }
    _SimpleNodeValidator_closure.builtin$cls = "_SimpleNodeValidator_closure";
    if (!("name" in _SimpleNodeValidator_closure))
      _SimpleNodeValidator_closure.name = "_SimpleNodeValidator_closure";
    $desc = $collectedClasses$._SimpleNodeValidator_closure[1];
    _SimpleNodeValidator_closure.prototype = $desc;
    _SimpleNodeValidator_closure.$__fields__ = [];
    function _SimpleNodeValidator_closure0() {
      this.$deferredAction();
    }
    _SimpleNodeValidator_closure0.builtin$cls = "_SimpleNodeValidator_closure0";
    if (!("name" in _SimpleNodeValidator_closure0))
      _SimpleNodeValidator_closure0.name = "_SimpleNodeValidator_closure0";
    $desc = $collectedClasses$._SimpleNodeValidator_closure0[1];
    _SimpleNodeValidator_closure0.prototype = $desc;
    _SimpleNodeValidator_closure0.$__fields__ = [];
    function _TemplatingNodeValidator(_templateAttrs, allowedElements, allowedAttributes, allowedUriAttributes, uriPolicy) {
      this._templateAttrs = _templateAttrs;
      this.allowedElements = allowedElements;
      this.allowedAttributes = allowedAttributes;
      this.allowedUriAttributes = allowedUriAttributes;
      this.uriPolicy = uriPolicy;
      this.$deferredAction();
    }
    _TemplatingNodeValidator.builtin$cls = "_TemplatingNodeValidator";
    if (!("name" in _TemplatingNodeValidator))
      _TemplatingNodeValidator.name = "_TemplatingNodeValidator";
    $desc = $collectedClasses$._TemplatingNodeValidator[1];
    _TemplatingNodeValidator.prototype = $desc;
    _TemplatingNodeValidator.$__fields__ = ["_templateAttrs", "allowedElements", "allowedAttributes", "allowedUriAttributes", "uriPolicy"];
    function _TemplatingNodeValidator_closure() {
      this.$deferredAction();
    }
    _TemplatingNodeValidator_closure.builtin$cls = "_TemplatingNodeValidator_closure";
    if (!("name" in _TemplatingNodeValidator_closure))
      _TemplatingNodeValidator_closure.name = "_TemplatingNodeValidator_closure";
    $desc = $collectedClasses$._TemplatingNodeValidator_closure[1];
    _TemplatingNodeValidator_closure.prototype = $desc;
    _TemplatingNodeValidator_closure.$__fields__ = [];
    function _SvgNodeValidator() {
      this.$deferredAction();
    }
    _SvgNodeValidator.builtin$cls = "_SvgNodeValidator";
    if (!("name" in _SvgNodeValidator))
      _SvgNodeValidator.name = "_SvgNodeValidator";
    $desc = $collectedClasses$._SvgNodeValidator[1];
    _SvgNodeValidator.prototype = $desc;
    _SvgNodeValidator.$__fields__ = [];
    function FixedSizeListIterator(_array, _html$_length, _position, _current, $ti) {
      this._array = _array;
      this._html$_length = _html$_length;
      this._position = _position;
      this._current = _current;
      this.$ti = $ti;
      this.$deferredAction();
    }
    FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
    if (!("name" in FixedSizeListIterator))
      FixedSizeListIterator.name = "FixedSizeListIterator";
    $desc = $collectedClasses$.FixedSizeListIterator[1];
    FixedSizeListIterator.prototype = $desc;
    FixedSizeListIterator.$__fields__ = ["_array", "_html$_length", "_position", "_current"];
    function _DOMWindowCrossFrame(_window) {
      this._window = _window;
      this.$deferredAction();
    }
    _DOMWindowCrossFrame.builtin$cls = "_DOMWindowCrossFrame";
    if (!("name" in _DOMWindowCrossFrame))
      _DOMWindowCrossFrame.name = "_DOMWindowCrossFrame";
    $desc = $collectedClasses$._DOMWindowCrossFrame[1];
    _DOMWindowCrossFrame.prototype = $desc;
    _DOMWindowCrossFrame.$__fields__ = ["_window"];
    function _LocationCrossFrame(_html$_location) {
      this._html$_location = _html$_location;
      this.$deferredAction();
    }
    _LocationCrossFrame.builtin$cls = "_LocationCrossFrame";
    if (!("name" in _LocationCrossFrame))
      _LocationCrossFrame.name = "_LocationCrossFrame";
    $desc = $collectedClasses$._LocationCrossFrame[1];
    _LocationCrossFrame.prototype = $desc;
    _LocationCrossFrame.$__fields__ = ["_html$_location"];
    function NodeValidator() {
      this.$deferredAction();
    }
    NodeValidator.builtin$cls = "NodeValidator";
    if (!("name" in NodeValidator))
      NodeValidator.name = "NodeValidator";
    $desc = $collectedClasses$.NodeValidator[1];
    NodeValidator.prototype = $desc;
    NodeValidator.$__fields__ = [];
    function _SameOriginUriPolicy(_hiddenAnchor, _loc) {
      this._hiddenAnchor = _hiddenAnchor;
      this._loc = _loc;
      this.$deferredAction();
    }
    _SameOriginUriPolicy.builtin$cls = "_SameOriginUriPolicy";
    if (!("name" in _SameOriginUriPolicy))
      _SameOriginUriPolicy.name = "_SameOriginUriPolicy";
    $desc = $collectedClasses$._SameOriginUriPolicy[1];
    _SameOriginUriPolicy.prototype = $desc;
    _SameOriginUriPolicy.$__fields__ = ["_hiddenAnchor", "_loc"];
    function _ValidatingTreeSanitizer(validator) {
      this.validator = validator;
      this.$deferredAction();
    }
    _ValidatingTreeSanitizer.builtin$cls = "_ValidatingTreeSanitizer";
    if (!("name" in _ValidatingTreeSanitizer))
      _ValidatingTreeSanitizer.name = "_ValidatingTreeSanitizer";
    $desc = $collectedClasses$._ValidatingTreeSanitizer[1];
    _ValidatingTreeSanitizer.prototype = $desc;
    _ValidatingTreeSanitizer.$__fields__ = ["validator"];
    function _ValidatingTreeSanitizer_sanitizeTree_walk($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _ValidatingTreeSanitizer_sanitizeTree_walk.builtin$cls = "_ValidatingTreeSanitizer_sanitizeTree_walk";
    if (!("name" in _ValidatingTreeSanitizer_sanitizeTree_walk))
      _ValidatingTreeSanitizer_sanitizeTree_walk.name = "_ValidatingTreeSanitizer_sanitizeTree_walk";
    $desc = $collectedClasses$._ValidatingTreeSanitizer_sanitizeTree_walk[1];
    _ValidatingTreeSanitizer_sanitizeTree_walk.prototype = $desc;
    _ValidatingTreeSanitizer_sanitizeTree_walk.$__fields__ = ["$this"];
    function _StructuredClone() {
      this.$deferredAction();
    }
    _StructuredClone.builtin$cls = "_StructuredClone";
    if (!("name" in _StructuredClone))
      _StructuredClone.name = "_StructuredClone";
    $desc = $collectedClasses$._StructuredClone[1];
    _StructuredClone.prototype = $desc;
    _StructuredClone.$__fields__ = [];
    function _StructuredClone_walk_closure(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    _StructuredClone_walk_closure.builtin$cls = "_StructuredClone_walk_closure";
    if (!("name" in _StructuredClone_walk_closure))
      _StructuredClone_walk_closure.name = "_StructuredClone_walk_closure";
    $desc = $collectedClasses$._StructuredClone_walk_closure[1];
    _StructuredClone_walk_closure.prototype = $desc;
    _StructuredClone_walk_closure.$__fields__ = ["_box_0", "$this"];
    function _AcceptStructuredClone() {
      this.$deferredAction();
    }
    _AcceptStructuredClone.builtin$cls = "_AcceptStructuredClone";
    if (!("name" in _AcceptStructuredClone))
      _AcceptStructuredClone.name = "_AcceptStructuredClone";
    $desc = $collectedClasses$._AcceptStructuredClone[1];
    _AcceptStructuredClone.prototype = $desc;
    _AcceptStructuredClone.$__fields__ = [];
    function _AcceptStructuredClone_walk_closure(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    _AcceptStructuredClone_walk_closure.builtin$cls = "_AcceptStructuredClone_walk_closure";
    if (!("name" in _AcceptStructuredClone_walk_closure))
      _AcceptStructuredClone_walk_closure.name = "_AcceptStructuredClone_walk_closure";
    $desc = $collectedClasses$._AcceptStructuredClone_walk_closure[1];
    _AcceptStructuredClone_walk_closure.prototype = $desc;
    _AcceptStructuredClone_walk_closure.$__fields__ = ["_box_0", "$this"];
    function _StructuredCloneDart2Js(values, copies) {
      this.values = values;
      this.copies = copies;
      this.$deferredAction();
    }
    _StructuredCloneDart2Js.builtin$cls = "_StructuredCloneDart2Js";
    if (!("name" in _StructuredCloneDart2Js))
      _StructuredCloneDart2Js.name = "_StructuredCloneDart2Js";
    $desc = $collectedClasses$._StructuredCloneDart2Js[1];
    _StructuredCloneDart2Js.prototype = $desc;
    _StructuredCloneDart2Js.$__fields__ = ["values", "copies"];
    function _AcceptStructuredCloneDart2Js(values, copies, mustCopy) {
      this.values = values;
      this.copies = copies;
      this.mustCopy = mustCopy;
      this.$deferredAction();
    }
    _AcceptStructuredCloneDart2Js.builtin$cls = "_AcceptStructuredCloneDart2Js";
    if (!("name" in _AcceptStructuredCloneDart2Js))
      _AcceptStructuredCloneDart2Js.name = "_AcceptStructuredCloneDart2Js";
    $desc = $collectedClasses$._AcceptStructuredCloneDart2Js[1];
    _AcceptStructuredCloneDart2Js.prototype = $desc;
    _AcceptStructuredCloneDart2Js.$__fields__ = ["values", "copies", "mustCopy"];
    function convertNativePromiseToDartFuture_closure(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    convertNativePromiseToDartFuture_closure.builtin$cls = "convertNativePromiseToDartFuture_closure";
    if (!("name" in convertNativePromiseToDartFuture_closure))
      convertNativePromiseToDartFuture_closure.name = "convertNativePromiseToDartFuture_closure";
    $desc = $collectedClasses$.convertNativePromiseToDartFuture_closure[1];
    convertNativePromiseToDartFuture_closure.prototype = $desc;
    convertNativePromiseToDartFuture_closure.$__fields__ = ["completer"];
    function convertNativePromiseToDartFuture_closure0(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    convertNativePromiseToDartFuture_closure0.builtin$cls = "convertNativePromiseToDartFuture_closure0";
    if (!("name" in convertNativePromiseToDartFuture_closure0))
      convertNativePromiseToDartFuture_closure0.name = "convertNativePromiseToDartFuture_closure0";
    $desc = $collectedClasses$.convertNativePromiseToDartFuture_closure0[1];
    convertNativePromiseToDartFuture_closure0.prototype = $desc;
    convertNativePromiseToDartFuture_closure0.$__fields__ = ["completer"];
    function CssClassSetImpl() {
      this.$deferredAction();
    }
    CssClassSetImpl.builtin$cls = "CssClassSetImpl";
    if (!("name" in CssClassSetImpl))
      CssClassSetImpl.name = "CssClassSetImpl";
    $desc = $collectedClasses$.CssClassSetImpl[1];
    CssClassSetImpl.prototype = $desc;
    CssClassSetImpl.$__fields__ = [];
    function CssClassSetImpl_add_closure(value) {
      this.value = value;
      this.$deferredAction();
    }
    CssClassSetImpl_add_closure.builtin$cls = "CssClassSetImpl_add_closure";
    if (!("name" in CssClassSetImpl_add_closure))
      CssClassSetImpl_add_closure.name = "CssClassSetImpl_add_closure";
    $desc = $collectedClasses$.CssClassSetImpl_add_closure[1];
    CssClassSetImpl_add_closure.prototype = $desc;
    CssClassSetImpl_add_closure.$__fields__ = ["value"];
    function CssClassSetImpl_addAll_closure($this, iterable) {
      this.$this = $this;
      this.iterable = iterable;
      this.$deferredAction();
    }
    CssClassSetImpl_addAll_closure.builtin$cls = "CssClassSetImpl_addAll_closure";
    if (!("name" in CssClassSetImpl_addAll_closure))
      CssClassSetImpl_addAll_closure.name = "CssClassSetImpl_addAll_closure";
    $desc = $collectedClasses$.CssClassSetImpl_addAll_closure[1];
    CssClassSetImpl_addAll_closure.prototype = $desc;
    CssClassSetImpl_addAll_closure.$__fields__ = ["$this", "iterable"];
    function FilteredElementList(_node, _childNodes) {
      this._node = _node;
      this._childNodes = _childNodes;
      this.$deferredAction();
    }
    FilteredElementList.builtin$cls = "FilteredElementList";
    if (!("name" in FilteredElementList))
      FilteredElementList.name = "FilteredElementList";
    $desc = $collectedClasses$.FilteredElementList[1];
    FilteredElementList.prototype = $desc;
    FilteredElementList.$__fields__ = ["_node", "_childNodes"];
    function FilteredElementList__iterable_closure() {
      this.$deferredAction();
    }
    FilteredElementList__iterable_closure.builtin$cls = "FilteredElementList__iterable_closure";
    if (!("name" in FilteredElementList__iterable_closure))
      FilteredElementList__iterable_closure.name = "FilteredElementList__iterable_closure";
    $desc = $collectedClasses$.FilteredElementList__iterable_closure[1];
    FilteredElementList__iterable_closure.prototype = $desc;
    FilteredElementList__iterable_closure.$__fields__ = [];
    function FilteredElementList__iterable_closure0() {
      this.$deferredAction();
    }
    FilteredElementList__iterable_closure0.builtin$cls = "FilteredElementList__iterable_closure0";
    if (!("name" in FilteredElementList__iterable_closure0))
      FilteredElementList__iterable_closure0.name = "FilteredElementList__iterable_closure0";
    $desc = $collectedClasses$.FilteredElementList__iterable_closure0[1];
    FilteredElementList__iterable_closure0.prototype = $desc;
    FilteredElementList__iterable_closure0.$__fields__ = [];
    function FilteredElementList_removeRange_closure() {
      this.$deferredAction();
    }
    FilteredElementList_removeRange_closure.builtin$cls = "FilteredElementList_removeRange_closure";
    if (!("name" in FilteredElementList_removeRange_closure))
      FilteredElementList_removeRange_closure.name = "FilteredElementList_removeRange_closure";
    $desc = $collectedClasses$.FilteredElementList_removeRange_closure[1];
    FilteredElementList_removeRange_closure.prototype = $desc;
    FilteredElementList_removeRange_closure.$__fields__ = [];
    function Cursor() {
      this.$deferredAction();
    }
    Cursor.builtin$cls = "Cursor";
    if (!("name" in Cursor))
      Cursor.name = "Cursor";
    $desc = $collectedClasses$.Cursor[1];
    Cursor.prototype = $desc;
    Cursor.$__fields__ = [];
    Cursor.prototype.get$key = function(receiver) {
      return receiver.key;
    };
    function CursorWithValue() {
      this.$deferredAction();
    }
    CursorWithValue.builtin$cls = "CursorWithValue";
    if (!("name" in CursorWithValue))
      CursorWithValue.name = "CursorWithValue";
    $desc = $collectedClasses$.CursorWithValue[1];
    CursorWithValue.prototype = $desc;
    CursorWithValue.$__fields__ = [];
    function Database() {
      this.$deferredAction();
    }
    Database.builtin$cls = "Database";
    if (!("name" in Database))
      Database.name = "Database";
    $desc = $collectedClasses$.Database[1];
    Database.prototype = $desc;
    Database.$__fields__ = [];
    Database.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    Database.prototype.get$version = function(receiver) {
      return receiver.version;
    };
    function _completeRequest_closure(request, completer) {
      this.request = request;
      this.completer = completer;
      this.$deferredAction();
    }
    _completeRequest_closure.builtin$cls = "_completeRequest_closure";
    if (!("name" in _completeRequest_closure))
      _completeRequest_closure.name = "_completeRequest_closure";
    $desc = $collectedClasses$._completeRequest_closure[1];
    _completeRequest_closure.prototype = $desc;
    _completeRequest_closure.$__fields__ = ["request", "completer"];
    function Index() {
      this.$deferredAction();
    }
    Index.builtin$cls = "Index";
    if (!("name" in Index))
      Index.name = "Index";
    $desc = $collectedClasses$.Index[1];
    Index.prototype = $desc;
    Index.$__fields__ = [];
    Index.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function KeyRange() {
      this.$deferredAction();
    }
    KeyRange.builtin$cls = "KeyRange";
    if (!("name" in KeyRange))
      KeyRange.name = "KeyRange";
    $desc = $collectedClasses$.KeyRange[1];
    KeyRange.prototype = $desc;
    KeyRange.$__fields__ = [];
    function ObjectStore() {
      this.$deferredAction();
    }
    ObjectStore.builtin$cls = "ObjectStore";
    if (!("name" in ObjectStore))
      ObjectStore.name = "ObjectStore";
    $desc = $collectedClasses$.ObjectStore[1];
    ObjectStore.prototype = $desc;
    ObjectStore.$__fields__ = [];
    ObjectStore.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function Request() {
      this.$deferredAction();
    }
    Request.builtin$cls = "Request";
    if (!("name" in Request))
      Request.name = "Request";
    $desc = $collectedClasses$.Request[1];
    Request.prototype = $desc;
    Request.$__fields__ = [];
    Request.prototype.get$error = function(receiver) {
      return receiver.error;
    };
    function Transaction() {
      this.$deferredAction();
    }
    Transaction.builtin$cls = "Transaction";
    if (!("name" in Transaction))
      Transaction.name = "Transaction";
    $desc = $collectedClasses$.Transaction[1];
    Transaction.prototype = $desc;
    Transaction.$__fields__ = [];
    Transaction.prototype.get$error = function(receiver) {
      return receiver.error;
    };
    function JsObject(_jsObject) {
      this._jsObject = _jsObject;
      this.$deferredAction();
    }
    JsObject.builtin$cls = "JsObject";
    if (!("name" in JsObject))
      JsObject.name = "JsObject";
    $desc = $collectedClasses$.JsObject[1];
    JsObject.prototype = $desc;
    JsObject.$__fields__ = ["_jsObject"];
    function JsObject__convertDataTree__convert(_convertedObjects) {
      this._convertedObjects = _convertedObjects;
      this.$deferredAction();
    }
    JsObject__convertDataTree__convert.builtin$cls = "JsObject__convertDataTree__convert";
    if (!("name" in JsObject__convertDataTree__convert))
      JsObject__convertDataTree__convert.name = "JsObject__convertDataTree__convert";
    $desc = $collectedClasses$.JsObject__convertDataTree__convert[1];
    JsObject__convertDataTree__convert.prototype = $desc;
    JsObject__convertDataTree__convert.$__fields__ = ["_convertedObjects"];
    function JsFunction(_jsObject) {
      this._jsObject = _jsObject;
      this.$deferredAction();
    }
    JsFunction.builtin$cls = "JsFunction";
    if (!("name" in JsFunction))
      JsFunction.name = "JsFunction";
    $desc = $collectedClasses$.JsFunction[1];
    JsFunction.prototype = $desc;
    JsFunction.$__fields__ = ["_jsObject"];
    function JsArray(_jsObject, $ti) {
      this._jsObject = _jsObject;
      this.$ti = $ti;
      this.$deferredAction();
    }
    JsArray.builtin$cls = "JsArray";
    if (!("name" in JsArray))
      JsArray.name = "JsArray";
    $desc = $collectedClasses$.JsArray[1];
    JsArray.prototype = $desc;
    JsArray.$__fields__ = ["_jsObject"];
    function JsObject_ListMixin($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    JsObject_ListMixin.builtin$cls = "JsObject_ListMixin";
    if (!("name" in JsObject_ListMixin))
      JsObject_ListMixin.name = "JsObject_ListMixin";
    $desc = $collectedClasses$.JsObject_ListMixin[1];
    JsObject_ListMixin.prototype = $desc;
    JsObject_ListMixin.$__fields__ = [];
    function _convertToJS_closure() {
      this.$deferredAction();
    }
    _convertToJS_closure.builtin$cls = "_convertToJS_closure";
    if (!("name" in _convertToJS_closure))
      _convertToJS_closure.name = "_convertToJS_closure";
    $desc = $collectedClasses$._convertToJS_closure[1];
    _convertToJS_closure.prototype = $desc;
    _convertToJS_closure.$__fields__ = [];
    function _convertToJS_closure0(ctor) {
      this.ctor = ctor;
      this.$deferredAction();
    }
    _convertToJS_closure0.builtin$cls = "_convertToJS_closure0";
    if (!("name" in _convertToJS_closure0))
      _convertToJS_closure0.name = "_convertToJS_closure0";
    $desc = $collectedClasses$._convertToJS_closure0[1];
    _convertToJS_closure0.prototype = $desc;
    _convertToJS_closure0.$__fields__ = ["ctor"];
    function _wrapToDart_closure() {
      this.$deferredAction();
    }
    _wrapToDart_closure.builtin$cls = "_wrapToDart_closure";
    if (!("name" in _wrapToDart_closure))
      _wrapToDart_closure.name = "_wrapToDart_closure";
    $desc = $collectedClasses$._wrapToDart_closure[1];
    _wrapToDart_closure.prototype = $desc;
    _wrapToDart_closure.$__fields__ = [];
    function _wrapToDart_closure0() {
      this.$deferredAction();
    }
    _wrapToDart_closure0.builtin$cls = "_wrapToDart_closure0";
    if (!("name" in _wrapToDart_closure0))
      _wrapToDart_closure0.name = "_wrapToDart_closure0";
    $desc = $collectedClasses$._wrapToDart_closure0[1];
    _wrapToDart_closure0.prototype = $desc;
    _wrapToDart_closure0.$__fields__ = [];
    function _wrapToDart_closure1() {
      this.$deferredAction();
    }
    _wrapToDart_closure1.builtin$cls = "_wrapToDart_closure1";
    if (!("name" in _wrapToDart_closure1))
      _wrapToDart_closure1.name = "_wrapToDart_closure1";
    $desc = $collectedClasses$._wrapToDart_closure1[1];
    _wrapToDart_closure1.prototype = $desc;
    _wrapToDart_closure1.$__fields__ = [];
    function _JSRandom() {
      this.$deferredAction();
    }
    _JSRandom.builtin$cls = "_JSRandom";
    if (!("name" in _JSRandom))
      _JSRandom.name = "_JSRandom";
    $desc = $collectedClasses$._JSRandom[1];
    _JSRandom.prototype = $desc;
    _JSRandom.$__fields__ = [];
    function Point(x, y, $ti) {
      this.x = x;
      this.y = y;
      this.$ti = $ti;
      this.$deferredAction();
    }
    Point.builtin$cls = "Point";
    if (!("name" in Point))
      Point.name = "Point";
    $desc = $collectedClasses$.Point[1];
    Point.prototype = $desc;
    Point.$__fields__ = ["x", "y"];
    Point.prototype.get$x = function(receiver) {
      return this.x;
    };
    Point.prototype.get$y = function(receiver) {
      return this.y;
    };
    function _RectangleBase($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    _RectangleBase.builtin$cls = "_RectangleBase";
    if (!("name" in _RectangleBase))
      _RectangleBase.name = "_RectangleBase";
    $desc = $collectedClasses$._RectangleBase[1];
    _RectangleBase.prototype = $desc;
    _RectangleBase.$__fields__ = [];
    function Rectangle(left, top, width, height, $ti) {
      this.left = left;
      this.top = top;
      this.width = width;
      this.height = height;
      this.$ti = $ti;
      this.$deferredAction();
    }
    Rectangle.builtin$cls = "Rectangle";
    if (!("name" in Rectangle))
      Rectangle.name = "Rectangle";
    $desc = $collectedClasses$.Rectangle[1];
    Rectangle.prototype = $desc;
    Rectangle.$__fields__ = ["left", "top", "width", "height"];
    Rectangle.prototype.get$left = function(receiver) {
      return this.left;
    };
    Rectangle.prototype.get$top = function(receiver) {
      return this.top;
    };
    Rectangle.prototype.get$width = function(receiver) {
      return this.width;
    };
    Rectangle.prototype.get$height = function(receiver) {
      return this.height;
    };
    function AElement() {
      this.$deferredAction();
    }
    AElement.builtin$cls = "AElement";
    if (!("name" in AElement))
      AElement.name = "AElement";
    $desc = $collectedClasses$.AElement[1];
    AElement.prototype = $desc;
    AElement.$__fields__ = [];
    AElement.prototype.get$target = function(receiver) {
      return receiver.target;
    };
    AElement.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    function Angle() {
      this.$deferredAction();
    }
    Angle.builtin$cls = "Angle";
    if (!("name" in Angle))
      Angle.name = "Angle";
    $desc = $collectedClasses$.Angle[1];
    Angle.prototype = $desc;
    Angle.$__fields__ = [];
    Angle.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    Angle.prototype.get$valueAsString = function(receiver) {
      return receiver.valueAsString;
    };
    function AnimationElement() {
      this.$deferredAction();
    }
    AnimationElement.builtin$cls = "AnimationElement";
    if (!("name" in AnimationElement))
      AnimationElement.name = "AnimationElement";
    $desc = $collectedClasses$.AnimationElement[1];
    AnimationElement.prototype = $desc;
    AnimationElement.$__fields__ = [];
    function FEBlendElement() {
      this.$deferredAction();
    }
    FEBlendElement.builtin$cls = "FEBlendElement";
    if (!("name" in FEBlendElement))
      FEBlendElement.name = "FEBlendElement";
    $desc = $collectedClasses$.FEBlendElement[1];
    FEBlendElement.prototype = $desc;
    FEBlendElement.$__fields__ = [];
    FEBlendElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEBlendElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEBlendElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEColorMatrixElement() {
      this.$deferredAction();
    }
    FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
    if (!("name" in FEColorMatrixElement))
      FEColorMatrixElement.name = "FEColorMatrixElement";
    $desc = $collectedClasses$.FEColorMatrixElement[1];
    FEColorMatrixElement.prototype = $desc;
    FEColorMatrixElement.$__fields__ = [];
    FEColorMatrixElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    FEColorMatrixElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEColorMatrixElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEColorMatrixElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEComponentTransferElement() {
      this.$deferredAction();
    }
    FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
    if (!("name" in FEComponentTransferElement))
      FEComponentTransferElement.name = "FEComponentTransferElement";
    $desc = $collectedClasses$.FEComponentTransferElement[1];
    FEComponentTransferElement.prototype = $desc;
    FEComponentTransferElement.$__fields__ = [];
    FEComponentTransferElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEComponentTransferElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEComponentTransferElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FECompositeElement() {
      this.$deferredAction();
    }
    FECompositeElement.builtin$cls = "FECompositeElement";
    if (!("name" in FECompositeElement))
      FECompositeElement.name = "FECompositeElement";
    $desc = $collectedClasses$.FECompositeElement[1];
    FECompositeElement.prototype = $desc;
    FECompositeElement.$__fields__ = [];
    FECompositeElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FECompositeElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FECompositeElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEConvolveMatrixElement() {
      this.$deferredAction();
    }
    FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
    if (!("name" in FEConvolveMatrixElement))
      FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
    $desc = $collectedClasses$.FEConvolveMatrixElement[1];
    FEConvolveMatrixElement.prototype = $desc;
    FEConvolveMatrixElement.$__fields__ = [];
    FEConvolveMatrixElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEConvolveMatrixElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEConvolveMatrixElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEDiffuseLightingElement() {
      this.$deferredAction();
    }
    FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
    if (!("name" in FEDiffuseLightingElement))
      FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
    $desc = $collectedClasses$.FEDiffuseLightingElement[1];
    FEDiffuseLightingElement.prototype = $desc;
    FEDiffuseLightingElement.$__fields__ = [];
    FEDiffuseLightingElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEDiffuseLightingElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEDiffuseLightingElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEDisplacementMapElement() {
      this.$deferredAction();
    }
    FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
    if (!("name" in FEDisplacementMapElement))
      FEDisplacementMapElement.name = "FEDisplacementMapElement";
    $desc = $collectedClasses$.FEDisplacementMapElement[1];
    FEDisplacementMapElement.prototype = $desc;
    FEDisplacementMapElement.$__fields__ = [];
    FEDisplacementMapElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEDisplacementMapElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEDisplacementMapElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEFloodElement() {
      this.$deferredAction();
    }
    FEFloodElement.builtin$cls = "FEFloodElement";
    if (!("name" in FEFloodElement))
      FEFloodElement.name = "FEFloodElement";
    $desc = $collectedClasses$.FEFloodElement[1];
    FEFloodElement.prototype = $desc;
    FEFloodElement.$__fields__ = [];
    FEFloodElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEFloodElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEFloodElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEGaussianBlurElement() {
      this.$deferredAction();
    }
    FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
    if (!("name" in FEGaussianBlurElement))
      FEGaussianBlurElement.name = "FEGaussianBlurElement";
    $desc = $collectedClasses$.FEGaussianBlurElement[1];
    FEGaussianBlurElement.prototype = $desc;
    FEGaussianBlurElement.$__fields__ = [];
    FEGaussianBlurElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEGaussianBlurElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEGaussianBlurElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEImageElement() {
      this.$deferredAction();
    }
    FEImageElement.builtin$cls = "FEImageElement";
    if (!("name" in FEImageElement))
      FEImageElement.name = "FEImageElement";
    $desc = $collectedClasses$.FEImageElement[1];
    FEImageElement.prototype = $desc;
    FEImageElement.$__fields__ = [];
    FEImageElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEImageElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEImageElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    FEImageElement.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    function FEMergeElement() {
      this.$deferredAction();
    }
    FEMergeElement.builtin$cls = "FEMergeElement";
    if (!("name" in FEMergeElement))
      FEMergeElement.name = "FEMergeElement";
    $desc = $collectedClasses$.FEMergeElement[1];
    FEMergeElement.prototype = $desc;
    FEMergeElement.$__fields__ = [];
    FEMergeElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEMergeElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEMergeElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEMorphologyElement() {
      this.$deferredAction();
    }
    FEMorphologyElement.builtin$cls = "FEMorphologyElement";
    if (!("name" in FEMorphologyElement))
      FEMorphologyElement.name = "FEMorphologyElement";
    $desc = $collectedClasses$.FEMorphologyElement[1];
    FEMorphologyElement.prototype = $desc;
    FEMorphologyElement.$__fields__ = [];
    FEMorphologyElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEMorphologyElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEMorphologyElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEOffsetElement() {
      this.$deferredAction();
    }
    FEOffsetElement.builtin$cls = "FEOffsetElement";
    if (!("name" in FEOffsetElement))
      FEOffsetElement.name = "FEOffsetElement";
    $desc = $collectedClasses$.FEOffsetElement[1];
    FEOffsetElement.prototype = $desc;
    FEOffsetElement.$__fields__ = [];
    FEOffsetElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEOffsetElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEOffsetElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEPointLightElement() {
      this.$deferredAction();
    }
    FEPointLightElement.builtin$cls = "FEPointLightElement";
    if (!("name" in FEPointLightElement))
      FEPointLightElement.name = "FEPointLightElement";
    $desc = $collectedClasses$.FEPointLightElement[1];
    FEPointLightElement.prototype = $desc;
    FEPointLightElement.$__fields__ = [];
    FEPointLightElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEPointLightElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FESpecularLightingElement() {
      this.$deferredAction();
    }
    FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
    if (!("name" in FESpecularLightingElement))
      FESpecularLightingElement.name = "FESpecularLightingElement";
    $desc = $collectedClasses$.FESpecularLightingElement[1];
    FESpecularLightingElement.prototype = $desc;
    FESpecularLightingElement.$__fields__ = [];
    FESpecularLightingElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FESpecularLightingElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FESpecularLightingElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FESpotLightElement() {
      this.$deferredAction();
    }
    FESpotLightElement.builtin$cls = "FESpotLightElement";
    if (!("name" in FESpotLightElement))
      FESpotLightElement.name = "FESpotLightElement";
    $desc = $collectedClasses$.FESpotLightElement[1];
    FESpotLightElement.prototype = $desc;
    FESpotLightElement.$__fields__ = [];
    FESpotLightElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FESpotLightElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FETileElement() {
      this.$deferredAction();
    }
    FETileElement.builtin$cls = "FETileElement";
    if (!("name" in FETileElement))
      FETileElement.name = "FETileElement";
    $desc = $collectedClasses$.FETileElement[1];
    FETileElement.prototype = $desc;
    FETileElement.$__fields__ = [];
    FETileElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FETileElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FETileElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FETurbulenceElement() {
      this.$deferredAction();
    }
    FETurbulenceElement.builtin$cls = "FETurbulenceElement";
    if (!("name" in FETurbulenceElement))
      FETurbulenceElement.name = "FETurbulenceElement";
    $desc = $collectedClasses$.FETurbulenceElement[1];
    FETurbulenceElement.prototype = $desc;
    FETurbulenceElement.$__fields__ = [];
    FETurbulenceElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    FETurbulenceElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FETurbulenceElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FETurbulenceElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FilterElement() {
      this.$deferredAction();
    }
    FilterElement.builtin$cls = "FilterElement";
    if (!("name" in FilterElement))
      FilterElement.name = "FilterElement";
    $desc = $collectedClasses$.FilterElement[1];
    FilterElement.prototype = $desc;
    FilterElement.$__fields__ = [];
    FilterElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FilterElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    FilterElement.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    function ForeignObjectElement() {
      this.$deferredAction();
    }
    ForeignObjectElement.builtin$cls = "ForeignObjectElement";
    if (!("name" in ForeignObjectElement))
      ForeignObjectElement.name = "ForeignObjectElement";
    $desc = $collectedClasses$.ForeignObjectElement[1];
    ForeignObjectElement.prototype = $desc;
    ForeignObjectElement.$__fields__ = [];
    ForeignObjectElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    ForeignObjectElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function GeometryElement() {
      this.$deferredAction();
    }
    GeometryElement.builtin$cls = "GeometryElement";
    if (!("name" in GeometryElement))
      GeometryElement.name = "GeometryElement";
    $desc = $collectedClasses$.GeometryElement[1];
    GeometryElement.prototype = $desc;
    GeometryElement.$__fields__ = [];
    function GraphicsElement() {
      this.$deferredAction();
    }
    GraphicsElement.builtin$cls = "GraphicsElement";
    if (!("name" in GraphicsElement))
      GraphicsElement.name = "GraphicsElement";
    $desc = $collectedClasses$.GraphicsElement[1];
    GraphicsElement.prototype = $desc;
    GraphicsElement.$__fields__ = [];
    function ImageElement0() {
      this.$deferredAction();
    }
    ImageElement0.builtin$cls = "ImageElement0";
    if (!("name" in ImageElement0))
      ImageElement0.name = "ImageElement0";
    $desc = $collectedClasses$.ImageElement0[1];
    ImageElement0.prototype = $desc;
    ImageElement0.$__fields__ = [];
    ImageElement0.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    ImageElement0.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    ImageElement0.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    function Length() {
      this.$deferredAction();
    }
    Length.builtin$cls = "Length";
    if (!("name" in Length))
      Length.name = "Length";
    $desc = $collectedClasses$.Length[1];
    Length.prototype = $desc;
    Length.$__fields__ = [];
    Length.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    Length.prototype.get$valueAsString = function(receiver) {
      return receiver.valueAsString;
    };
    function LengthList() {
      this.$deferredAction();
    }
    LengthList.builtin$cls = "LengthList";
    if (!("name" in LengthList))
      LengthList.name = "LengthList";
    $desc = $collectedClasses$.LengthList[1];
    LengthList.prototype = $desc;
    LengthList.$__fields__ = [];
    function Interceptor_ListMixin14() {
      this.$deferredAction();
    }
    Interceptor_ListMixin14.builtin$cls = "Interceptor_ListMixin14";
    if (!("name" in Interceptor_ListMixin14))
      Interceptor_ListMixin14.name = "Interceptor_ListMixin14";
    $desc = $collectedClasses$.Interceptor_ListMixin14[1];
    Interceptor_ListMixin14.prototype = $desc;
    Interceptor_ListMixin14.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin14() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin14.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin14";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin14))
      Interceptor_ListMixin_ImmutableListMixin14.name = "Interceptor_ListMixin_ImmutableListMixin14";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin14[1];
    Interceptor_ListMixin_ImmutableListMixin14.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin14.$__fields__ = [];
    function MarkerElement() {
      this.$deferredAction();
    }
    MarkerElement.builtin$cls = "MarkerElement";
    if (!("name" in MarkerElement))
      MarkerElement.name = "MarkerElement";
    $desc = $collectedClasses$.MarkerElement[1];
    MarkerElement.prototype = $desc;
    MarkerElement.$__fields__ = [];
    function MaskElement() {
      this.$deferredAction();
    }
    MaskElement.builtin$cls = "MaskElement";
    if (!("name" in MaskElement))
      MaskElement.name = "MaskElement";
    $desc = $collectedClasses$.MaskElement[1];
    MaskElement.prototype = $desc;
    MaskElement.$__fields__ = [];
    MaskElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    MaskElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function Number() {
      this.$deferredAction();
    }
    Number.builtin$cls = "Number";
    if (!("name" in Number))
      Number.name = "Number";
    $desc = $collectedClasses$.Number[1];
    Number.prototype = $desc;
    Number.$__fields__ = [];
    Number.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function NumberList() {
      this.$deferredAction();
    }
    NumberList.builtin$cls = "NumberList";
    if (!("name" in NumberList))
      NumberList.name = "NumberList";
    $desc = $collectedClasses$.NumberList[1];
    NumberList.prototype = $desc;
    NumberList.$__fields__ = [];
    function Interceptor_ListMixin15() {
      this.$deferredAction();
    }
    Interceptor_ListMixin15.builtin$cls = "Interceptor_ListMixin15";
    if (!("name" in Interceptor_ListMixin15))
      Interceptor_ListMixin15.name = "Interceptor_ListMixin15";
    $desc = $collectedClasses$.Interceptor_ListMixin15[1];
    Interceptor_ListMixin15.prototype = $desc;
    Interceptor_ListMixin15.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin15() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin15.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin15";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin15))
      Interceptor_ListMixin_ImmutableListMixin15.name = "Interceptor_ListMixin_ImmutableListMixin15";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin15[1];
    Interceptor_ListMixin_ImmutableListMixin15.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin15.$__fields__ = [];
    function PathSeg() {
      this.$deferredAction();
    }
    PathSeg.builtin$cls = "PathSeg";
    if (!("name" in PathSeg))
      PathSeg.name = "PathSeg";
    $desc = $collectedClasses$.PathSeg[1];
    PathSeg.prototype = $desc;
    PathSeg.$__fields__ = [];
    function PathSegArcAbs() {
      this.$deferredAction();
    }
    PathSegArcAbs.builtin$cls = "PathSegArcAbs";
    if (!("name" in PathSegArcAbs))
      PathSegArcAbs.name = "PathSegArcAbs";
    $desc = $collectedClasses$.PathSegArcAbs[1];
    PathSegArcAbs.prototype = $desc;
    PathSegArcAbs.$__fields__ = [];
    PathSegArcAbs.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegArcAbs.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegArcRel() {
      this.$deferredAction();
    }
    PathSegArcRel.builtin$cls = "PathSegArcRel";
    if (!("name" in PathSegArcRel))
      PathSegArcRel.name = "PathSegArcRel";
    $desc = $collectedClasses$.PathSegArcRel[1];
    PathSegArcRel.prototype = $desc;
    PathSegArcRel.$__fields__ = [];
    PathSegArcRel.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegArcRel.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegCurvetoCubicAbs() {
      this.$deferredAction();
    }
    PathSegCurvetoCubicAbs.builtin$cls = "PathSegCurvetoCubicAbs";
    if (!("name" in PathSegCurvetoCubicAbs))
      PathSegCurvetoCubicAbs.name = "PathSegCurvetoCubicAbs";
    $desc = $collectedClasses$.PathSegCurvetoCubicAbs[1];
    PathSegCurvetoCubicAbs.prototype = $desc;
    PathSegCurvetoCubicAbs.$__fields__ = [];
    PathSegCurvetoCubicAbs.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegCurvetoCubicAbs.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegCurvetoCubicRel() {
      this.$deferredAction();
    }
    PathSegCurvetoCubicRel.builtin$cls = "PathSegCurvetoCubicRel";
    if (!("name" in PathSegCurvetoCubicRel))
      PathSegCurvetoCubicRel.name = "PathSegCurvetoCubicRel";
    $desc = $collectedClasses$.PathSegCurvetoCubicRel[1];
    PathSegCurvetoCubicRel.prototype = $desc;
    PathSegCurvetoCubicRel.$__fields__ = [];
    PathSegCurvetoCubicRel.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegCurvetoCubicRel.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegCurvetoCubicSmoothAbs() {
      this.$deferredAction();
    }
    PathSegCurvetoCubicSmoothAbs.builtin$cls = "PathSegCurvetoCubicSmoothAbs";
    if (!("name" in PathSegCurvetoCubicSmoothAbs))
      PathSegCurvetoCubicSmoothAbs.name = "PathSegCurvetoCubicSmoothAbs";
    $desc = $collectedClasses$.PathSegCurvetoCubicSmoothAbs[1];
    PathSegCurvetoCubicSmoothAbs.prototype = $desc;
    PathSegCurvetoCubicSmoothAbs.$__fields__ = [];
    PathSegCurvetoCubicSmoothAbs.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegCurvetoCubicSmoothAbs.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegCurvetoCubicSmoothRel() {
      this.$deferredAction();
    }
    PathSegCurvetoCubicSmoothRel.builtin$cls = "PathSegCurvetoCubicSmoothRel";
    if (!("name" in PathSegCurvetoCubicSmoothRel))
      PathSegCurvetoCubicSmoothRel.name = "PathSegCurvetoCubicSmoothRel";
    $desc = $collectedClasses$.PathSegCurvetoCubicSmoothRel[1];
    PathSegCurvetoCubicSmoothRel.prototype = $desc;
    PathSegCurvetoCubicSmoothRel.$__fields__ = [];
    PathSegCurvetoCubicSmoothRel.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegCurvetoCubicSmoothRel.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegCurvetoQuadraticAbs() {
      this.$deferredAction();
    }
    PathSegCurvetoQuadraticAbs.builtin$cls = "PathSegCurvetoQuadraticAbs";
    if (!("name" in PathSegCurvetoQuadraticAbs))
      PathSegCurvetoQuadraticAbs.name = "PathSegCurvetoQuadraticAbs";
    $desc = $collectedClasses$.PathSegCurvetoQuadraticAbs[1];
    PathSegCurvetoQuadraticAbs.prototype = $desc;
    PathSegCurvetoQuadraticAbs.$__fields__ = [];
    PathSegCurvetoQuadraticAbs.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegCurvetoQuadraticAbs.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegCurvetoQuadraticRel() {
      this.$deferredAction();
    }
    PathSegCurvetoQuadraticRel.builtin$cls = "PathSegCurvetoQuadraticRel";
    if (!("name" in PathSegCurvetoQuadraticRel))
      PathSegCurvetoQuadraticRel.name = "PathSegCurvetoQuadraticRel";
    $desc = $collectedClasses$.PathSegCurvetoQuadraticRel[1];
    PathSegCurvetoQuadraticRel.prototype = $desc;
    PathSegCurvetoQuadraticRel.$__fields__ = [];
    PathSegCurvetoQuadraticRel.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegCurvetoQuadraticRel.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegCurvetoQuadraticSmoothAbs() {
      this.$deferredAction();
    }
    PathSegCurvetoQuadraticSmoothAbs.builtin$cls = "PathSegCurvetoQuadraticSmoothAbs";
    if (!("name" in PathSegCurvetoQuadraticSmoothAbs))
      PathSegCurvetoQuadraticSmoothAbs.name = "PathSegCurvetoQuadraticSmoothAbs";
    $desc = $collectedClasses$.PathSegCurvetoQuadraticSmoothAbs[1];
    PathSegCurvetoQuadraticSmoothAbs.prototype = $desc;
    PathSegCurvetoQuadraticSmoothAbs.$__fields__ = [];
    PathSegCurvetoQuadraticSmoothAbs.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegCurvetoQuadraticSmoothAbs.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegCurvetoQuadraticSmoothRel() {
      this.$deferredAction();
    }
    PathSegCurvetoQuadraticSmoothRel.builtin$cls = "PathSegCurvetoQuadraticSmoothRel";
    if (!("name" in PathSegCurvetoQuadraticSmoothRel))
      PathSegCurvetoQuadraticSmoothRel.name = "PathSegCurvetoQuadraticSmoothRel";
    $desc = $collectedClasses$.PathSegCurvetoQuadraticSmoothRel[1];
    PathSegCurvetoQuadraticSmoothRel.prototype = $desc;
    PathSegCurvetoQuadraticSmoothRel.$__fields__ = [];
    PathSegCurvetoQuadraticSmoothRel.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegCurvetoQuadraticSmoothRel.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegLinetoAbs() {
      this.$deferredAction();
    }
    PathSegLinetoAbs.builtin$cls = "PathSegLinetoAbs";
    if (!("name" in PathSegLinetoAbs))
      PathSegLinetoAbs.name = "PathSegLinetoAbs";
    $desc = $collectedClasses$.PathSegLinetoAbs[1];
    PathSegLinetoAbs.prototype = $desc;
    PathSegLinetoAbs.$__fields__ = [];
    PathSegLinetoAbs.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegLinetoAbs.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegLinetoHorizontalAbs() {
      this.$deferredAction();
    }
    PathSegLinetoHorizontalAbs.builtin$cls = "PathSegLinetoHorizontalAbs";
    if (!("name" in PathSegLinetoHorizontalAbs))
      PathSegLinetoHorizontalAbs.name = "PathSegLinetoHorizontalAbs";
    $desc = $collectedClasses$.PathSegLinetoHorizontalAbs[1];
    PathSegLinetoHorizontalAbs.prototype = $desc;
    PathSegLinetoHorizontalAbs.$__fields__ = [];
    PathSegLinetoHorizontalAbs.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    function PathSegLinetoHorizontalRel() {
      this.$deferredAction();
    }
    PathSegLinetoHorizontalRel.builtin$cls = "PathSegLinetoHorizontalRel";
    if (!("name" in PathSegLinetoHorizontalRel))
      PathSegLinetoHorizontalRel.name = "PathSegLinetoHorizontalRel";
    $desc = $collectedClasses$.PathSegLinetoHorizontalRel[1];
    PathSegLinetoHorizontalRel.prototype = $desc;
    PathSegLinetoHorizontalRel.$__fields__ = [];
    PathSegLinetoHorizontalRel.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    function PathSegLinetoRel() {
      this.$deferredAction();
    }
    PathSegLinetoRel.builtin$cls = "PathSegLinetoRel";
    if (!("name" in PathSegLinetoRel))
      PathSegLinetoRel.name = "PathSegLinetoRel";
    $desc = $collectedClasses$.PathSegLinetoRel[1];
    PathSegLinetoRel.prototype = $desc;
    PathSegLinetoRel.$__fields__ = [];
    PathSegLinetoRel.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegLinetoRel.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegLinetoVerticalAbs() {
      this.$deferredAction();
    }
    PathSegLinetoVerticalAbs.builtin$cls = "PathSegLinetoVerticalAbs";
    if (!("name" in PathSegLinetoVerticalAbs))
      PathSegLinetoVerticalAbs.name = "PathSegLinetoVerticalAbs";
    $desc = $collectedClasses$.PathSegLinetoVerticalAbs[1];
    PathSegLinetoVerticalAbs.prototype = $desc;
    PathSegLinetoVerticalAbs.$__fields__ = [];
    PathSegLinetoVerticalAbs.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegLinetoVerticalRel() {
      this.$deferredAction();
    }
    PathSegLinetoVerticalRel.builtin$cls = "PathSegLinetoVerticalRel";
    if (!("name" in PathSegLinetoVerticalRel))
      PathSegLinetoVerticalRel.name = "PathSegLinetoVerticalRel";
    $desc = $collectedClasses$.PathSegLinetoVerticalRel[1];
    PathSegLinetoVerticalRel.prototype = $desc;
    PathSegLinetoVerticalRel.$__fields__ = [];
    PathSegLinetoVerticalRel.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegList() {
      this.$deferredAction();
    }
    PathSegList.builtin$cls = "PathSegList";
    if (!("name" in PathSegList))
      PathSegList.name = "PathSegList";
    $desc = $collectedClasses$.PathSegList[1];
    PathSegList.prototype = $desc;
    PathSegList.$__fields__ = [];
    function Interceptor_ListMixin16() {
      this.$deferredAction();
    }
    Interceptor_ListMixin16.builtin$cls = "Interceptor_ListMixin16";
    if (!("name" in Interceptor_ListMixin16))
      Interceptor_ListMixin16.name = "Interceptor_ListMixin16";
    $desc = $collectedClasses$.Interceptor_ListMixin16[1];
    Interceptor_ListMixin16.prototype = $desc;
    Interceptor_ListMixin16.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin16() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin16.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin16";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin16))
      Interceptor_ListMixin_ImmutableListMixin16.name = "Interceptor_ListMixin_ImmutableListMixin16";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin16[1];
    Interceptor_ListMixin_ImmutableListMixin16.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin16.$__fields__ = [];
    function PathSegMovetoAbs() {
      this.$deferredAction();
    }
    PathSegMovetoAbs.builtin$cls = "PathSegMovetoAbs";
    if (!("name" in PathSegMovetoAbs))
      PathSegMovetoAbs.name = "PathSegMovetoAbs";
    $desc = $collectedClasses$.PathSegMovetoAbs[1];
    PathSegMovetoAbs.prototype = $desc;
    PathSegMovetoAbs.$__fields__ = [];
    PathSegMovetoAbs.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegMovetoAbs.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PathSegMovetoRel() {
      this.$deferredAction();
    }
    PathSegMovetoRel.builtin$cls = "PathSegMovetoRel";
    if (!("name" in PathSegMovetoRel))
      PathSegMovetoRel.name = "PathSegMovetoRel";
    $desc = $collectedClasses$.PathSegMovetoRel[1];
    PathSegMovetoRel.prototype = $desc;
    PathSegMovetoRel.$__fields__ = [];
    PathSegMovetoRel.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PathSegMovetoRel.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PatternElement() {
      this.$deferredAction();
    }
    PatternElement.builtin$cls = "PatternElement";
    if (!("name" in PatternElement))
      PatternElement.name = "PatternElement";
    $desc = $collectedClasses$.PatternElement[1];
    PatternElement.prototype = $desc;
    PatternElement.$__fields__ = [];
    PatternElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PatternElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    PatternElement.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    function Point1() {
      this.$deferredAction();
    }
    Point1.builtin$cls = "Point1";
    if (!("name" in Point1))
      Point1.name = "Point1";
    $desc = $collectedClasses$.Point1[1];
    Point1.prototype = $desc;
    Point1.$__fields__ = [];
    Point1.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    Point1.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PointList() {
      this.$deferredAction();
    }
    PointList.builtin$cls = "PointList";
    if (!("name" in PointList))
      PointList.name = "PointList";
    $desc = $collectedClasses$.PointList[1];
    PointList.prototype = $desc;
    PointList.$__fields__ = [];
    PointList.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function Rect() {
      this.$deferredAction();
    }
    Rect.builtin$cls = "Rect";
    if (!("name" in Rect))
      Rect.name = "Rect";
    $desc = $collectedClasses$.Rect[1];
    Rect.prototype = $desc;
    Rect.$__fields__ = [];
    Rect.prototype.set$height = function(receiver, v) {
      return receiver.height = v;
    };
    Rect.prototype.set$width = function(receiver, v) {
      return receiver.width = v;
    };
    Rect.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    Rect.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function RectElement() {
      this.$deferredAction();
    }
    RectElement.builtin$cls = "RectElement";
    if (!("name" in RectElement))
      RectElement.name = "RectElement";
    $desc = $collectedClasses$.RectElement[1];
    RectElement.prototype = $desc;
    RectElement.$__fields__ = [];
    RectElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    RectElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function ScriptElement() {
      this.$deferredAction();
    }
    ScriptElement.builtin$cls = "ScriptElement";
    if (!("name" in ScriptElement))
      ScriptElement.name = "ScriptElement";
    $desc = $collectedClasses$.ScriptElement[1];
    ScriptElement.prototype = $desc;
    ScriptElement.$__fields__ = [];
    ScriptElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    ScriptElement.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    function StringList() {
      this.$deferredAction();
    }
    StringList.builtin$cls = "StringList";
    if (!("name" in StringList))
      StringList.name = "StringList";
    $desc = $collectedClasses$.StringList[1];
    StringList.prototype = $desc;
    StringList.$__fields__ = [];
    function Interceptor_ListMixin17() {
      this.$deferredAction();
    }
    Interceptor_ListMixin17.builtin$cls = "Interceptor_ListMixin17";
    if (!("name" in Interceptor_ListMixin17))
      Interceptor_ListMixin17.name = "Interceptor_ListMixin17";
    $desc = $collectedClasses$.Interceptor_ListMixin17[1];
    Interceptor_ListMixin17.prototype = $desc;
    Interceptor_ListMixin17.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin17() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin17.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin17";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin17))
      Interceptor_ListMixin_ImmutableListMixin17.name = "Interceptor_ListMixin_ImmutableListMixin17";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin17[1];
    Interceptor_ListMixin_ImmutableListMixin17.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin17.$__fields__ = [];
    function StyleElement0() {
      this.$deferredAction();
    }
    StyleElement0.builtin$cls = "StyleElement0";
    if (!("name" in StyleElement0))
      StyleElement0.name = "StyleElement0";
    $desc = $collectedClasses$.StyleElement0[1];
    StyleElement0.prototype = $desc;
    StyleElement0.$__fields__ = [];
    StyleElement0.prototype.set$disabled = function(receiver, v) {
      return receiver.disabled = v;
    };
    StyleElement0.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function _AttributeClassSet(_svg$_element) {
      this._svg$_element = _svg$_element;
      this.$deferredAction();
    }
    _AttributeClassSet.builtin$cls = "_AttributeClassSet";
    if (!("name" in _AttributeClassSet))
      _AttributeClassSet.name = "_AttributeClassSet";
    $desc = $collectedClasses$._AttributeClassSet[1];
    _AttributeClassSet.prototype = $desc;
    _AttributeClassSet.$__fields__ = ["_svg$_element"];
    function SvgElement() {
      this.$deferredAction();
    }
    SvgElement.builtin$cls = "SvgElement";
    if (!("name" in SvgElement))
      SvgElement.name = "SvgElement";
    $desc = $collectedClasses$.SvgElement[1];
    SvgElement.prototype = $desc;
    SvgElement.$__fields__ = [];
    function SvgSvgElement() {
      this.$deferredAction();
    }
    SvgSvgElement.builtin$cls = "SvgSvgElement";
    if (!("name" in SvgSvgElement))
      SvgSvgElement.name = "SvgSvgElement";
    $desc = $collectedClasses$.SvgSvgElement[1];
    SvgSvgElement.prototype = $desc;
    SvgSvgElement.$__fields__ = [];
    SvgSvgElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    SvgSvgElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function SymbolElement() {
      this.$deferredAction();
    }
    SymbolElement.builtin$cls = "SymbolElement";
    if (!("name" in SymbolElement))
      SymbolElement.name = "SymbolElement";
    $desc = $collectedClasses$.SymbolElement[1];
    SymbolElement.prototype = $desc;
    SymbolElement.$__fields__ = [];
    function TextContentElement() {
      this.$deferredAction();
    }
    TextContentElement.builtin$cls = "TextContentElement";
    if (!("name" in TextContentElement))
      TextContentElement.name = "TextContentElement";
    $desc = $collectedClasses$.TextContentElement[1];
    TextContentElement.prototype = $desc;
    TextContentElement.$__fields__ = [];
    function TextPathElement() {
      this.$deferredAction();
    }
    TextPathElement.builtin$cls = "TextPathElement";
    if (!("name" in TextPathElement))
      TextPathElement.name = "TextPathElement";
    $desc = $collectedClasses$.TextPathElement[1];
    TextPathElement.prototype = $desc;
    TextPathElement.$__fields__ = [];
    TextPathElement.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    function TextPositioningElement() {
      this.$deferredAction();
    }
    TextPositioningElement.builtin$cls = "TextPositioningElement";
    if (!("name" in TextPositioningElement))
      TextPositioningElement.name = "TextPositioningElement";
    $desc = $collectedClasses$.TextPositioningElement[1];
    TextPositioningElement.prototype = $desc;
    TextPositioningElement.$__fields__ = [];
    TextPositioningElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    TextPositioningElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function Transform() {
      this.$deferredAction();
    }
    Transform.builtin$cls = "Transform";
    if (!("name" in Transform))
      Transform.name = "Transform";
    $desc = $collectedClasses$.Transform[1];
    Transform.prototype = $desc;
    Transform.$__fields__ = [];
    Transform.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function TransformList() {
      this.$deferredAction();
    }
    TransformList.builtin$cls = "TransformList";
    if (!("name" in TransformList))
      TransformList.name = "TransformList";
    $desc = $collectedClasses$.TransformList[1];
    TransformList.prototype = $desc;
    TransformList.$__fields__ = [];
    function Interceptor_ListMixin18() {
      this.$deferredAction();
    }
    Interceptor_ListMixin18.builtin$cls = "Interceptor_ListMixin18";
    if (!("name" in Interceptor_ListMixin18))
      Interceptor_ListMixin18.name = "Interceptor_ListMixin18";
    $desc = $collectedClasses$.Interceptor_ListMixin18[1];
    Interceptor_ListMixin18.prototype = $desc;
    Interceptor_ListMixin18.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin18() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin18.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin18";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin18))
      Interceptor_ListMixin_ImmutableListMixin18.name = "Interceptor_ListMixin_ImmutableListMixin18";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin18[1];
    Interceptor_ListMixin_ImmutableListMixin18.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin18.$__fields__ = [];
    function UseElement() {
      this.$deferredAction();
    }
    UseElement.builtin$cls = "UseElement";
    if (!("name" in UseElement))
      UseElement.name = "UseElement";
    $desc = $collectedClasses$.UseElement[1];
    UseElement.prototype = $desc;
    UseElement.$__fields__ = [];
    UseElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    UseElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    UseElement.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    function ViewElement() {
      this.$deferredAction();
    }
    ViewElement.builtin$cls = "ViewElement";
    if (!("name" in ViewElement))
      ViewElement.name = "ViewElement";
    $desc = $collectedClasses$.ViewElement[1];
    ViewElement.prototype = $desc;
    ViewElement.$__fields__ = [];
    function ViewSpec() {
      this.$deferredAction();
    }
    ViewSpec.builtin$cls = "ViewSpec";
    if (!("name" in ViewSpec))
      ViewSpec.name = "ViewSpec";
    $desc = $collectedClasses$.ViewSpec[1];
    ViewSpec.prototype = $desc;
    ViewSpec.$__fields__ = [];
    function _GradientElement() {
      this.$deferredAction();
    }
    _GradientElement.builtin$cls = "_GradientElement";
    if (!("name" in _GradientElement))
      _GradientElement.name = "_GradientElement";
    $desc = $collectedClasses$._GradientElement[1];
    _GradientElement.prototype = $desc;
    _GradientElement.$__fields__ = [];
    _GradientElement.prototype.get$href = function(receiver) {
      return receiver.href;
    };
    function _SVGCursorElement() {
      this.$deferredAction();
    }
    _SVGCursorElement.builtin$cls = "_SVGCursorElement";
    if (!("name" in _SVGCursorElement))
      _SVGCursorElement.name = "_SVGCursorElement";
    $desc = $collectedClasses$._SVGCursorElement[1];
    _SVGCursorElement.prototype = $desc;
    _SVGCursorElement.$__fields__ = [];
    function _SVGFEDropShadowElement() {
      this.$deferredAction();
    }
    _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
    if (!("name" in _SVGFEDropShadowElement))
      _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
    $desc = $collectedClasses$._SVGFEDropShadowElement[1];
    _SVGFEDropShadowElement.prototype = $desc;
    _SVGFEDropShadowElement.$__fields__ = [];
    function _SVGMPathElement() {
      this.$deferredAction();
    }
    _SVGMPathElement.builtin$cls = "_SVGMPathElement";
    if (!("name" in _SVGMPathElement))
      _SVGMPathElement.name = "_SVGMPathElement";
    $desc = $collectedClasses$._SVGMPathElement[1];
    _SVGMPathElement.prototype = $desc;
    _SVGMPathElement.$__fields__ = [];
    function Uint8List() {
      this.$deferredAction();
    }
    Uint8List.builtin$cls = "Uint8List";
    if (!("name" in Uint8List))
      Uint8List.name = "Uint8List";
    $desc = $collectedClasses$.Uint8List[1];
    Uint8List.prototype = $desc;
    Uint8List.$__fields__ = [];
    function AudioBuffer() {
      this.$deferredAction();
    }
    AudioBuffer.builtin$cls = "AudioBuffer";
    if (!("name" in AudioBuffer))
      AudioBuffer.name = "AudioBuffer";
    $desc = $collectedClasses$.AudioBuffer[1];
    AudioBuffer.prototype = $desc;
    AudioBuffer.$__fields__ = [];
    AudioBuffer.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function AudioBufferSourceNode() {
      this.$deferredAction();
    }
    AudioBufferSourceNode.builtin$cls = "AudioBufferSourceNode";
    if (!("name" in AudioBufferSourceNode))
      AudioBufferSourceNode.name = "AudioBufferSourceNode";
    $desc = $collectedClasses$.AudioBufferSourceNode[1];
    AudioBufferSourceNode.prototype = $desc;
    AudioBufferSourceNode.$__fields__ = [];
    function AudioContext() {
      this.$deferredAction();
    }
    AudioContext.builtin$cls = "AudioContext";
    if (!("name" in AudioContext))
      AudioContext.name = "AudioContext";
    $desc = $collectedClasses$.AudioContext[1];
    AudioContext.prototype = $desc;
    AudioContext.$__fields__ = [];
    function AudioNode() {
      this.$deferredAction();
    }
    AudioNode.builtin$cls = "AudioNode";
    if (!("name" in AudioNode))
      AudioNode.name = "AudioNode";
    $desc = $collectedClasses$.AudioNode[1];
    AudioNode.prototype = $desc;
    AudioNode.$__fields__ = [];
    function AudioParam() {
      this.$deferredAction();
    }
    AudioParam.builtin$cls = "AudioParam";
    if (!("name" in AudioParam))
      AudioParam.name = "AudioParam";
    $desc = $collectedClasses$.AudioParam[1];
    AudioParam.prototype = $desc;
    AudioParam.$__fields__ = [];
    AudioParam.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function AudioSourceNode() {
      this.$deferredAction();
    }
    AudioSourceNode.builtin$cls = "AudioSourceNode";
    if (!("name" in AudioSourceNode))
      AudioSourceNode.name = "AudioSourceNode";
    $desc = $collectedClasses$.AudioSourceNode[1];
    AudioSourceNode.prototype = $desc;
    AudioSourceNode.$__fields__ = [];
    function BiquadFilterNode() {
      this.$deferredAction();
    }
    BiquadFilterNode.builtin$cls = "BiquadFilterNode";
    if (!("name" in BiquadFilterNode))
      BiquadFilterNode.name = "BiquadFilterNode";
    $desc = $collectedClasses$.BiquadFilterNode[1];
    BiquadFilterNode.prototype = $desc;
    BiquadFilterNode.$__fields__ = [];
    BiquadFilterNode.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function OscillatorNode() {
      this.$deferredAction();
    }
    OscillatorNode.builtin$cls = "OscillatorNode";
    if (!("name" in OscillatorNode))
      OscillatorNode.name = "OscillatorNode";
    $desc = $collectedClasses$.OscillatorNode[1];
    OscillatorNode.prototype = $desc;
    OscillatorNode.$__fields__ = [];
    OscillatorNode.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function ActiveInfo() {
      this.$deferredAction();
    }
    ActiveInfo.builtin$cls = "ActiveInfo";
    if (!("name" in ActiveInfo))
      ActiveInfo.name = "ActiveInfo";
    $desc = $collectedClasses$.ActiveInfo[1];
    ActiveInfo.prototype = $desc;
    ActiveInfo.$__fields__ = [];
    ActiveInfo.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    ActiveInfo.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function RenderingContext() {
      this.$deferredAction();
    }
    RenderingContext.builtin$cls = "RenderingContext";
    if (!("name" in RenderingContext))
      RenderingContext.name = "RenderingContext";
    $desc = $collectedClasses$.RenderingContext[1];
    RenderingContext.prototype = $desc;
    RenderingContext.$__fields__ = [];
    function RenderingContext2() {
      this.$deferredAction();
    }
    RenderingContext2.builtin$cls = "RenderingContext2";
    if (!("name" in RenderingContext2))
      RenderingContext2.name = "RenderingContext2";
    $desc = $collectedClasses$.RenderingContext2[1];
    RenderingContext2.prototype = $desc;
    RenderingContext2.$__fields__ = [];
    function _WebGL2RenderingContextBase() {
      this.$deferredAction();
    }
    _WebGL2RenderingContextBase.builtin$cls = "_WebGL2RenderingContextBase";
    if (!("name" in _WebGL2RenderingContextBase))
      _WebGL2RenderingContextBase.name = "_WebGL2RenderingContextBase";
    $desc = $collectedClasses$._WebGL2RenderingContextBase[1];
    _WebGL2RenderingContextBase.prototype = $desc;
    _WebGL2RenderingContextBase.$__fields__ = [];
    function SqlDatabase() {
      this.$deferredAction();
    }
    SqlDatabase.builtin$cls = "SqlDatabase";
    if (!("name" in SqlDatabase))
      SqlDatabase.name = "SqlDatabase";
    $desc = $collectedClasses$.SqlDatabase[1];
    SqlDatabase.prototype = $desc;
    SqlDatabase.$__fields__ = [];
    SqlDatabase.prototype.get$version = function(receiver) {
      return receiver.version;
    };
    function SqlError() {
      this.$deferredAction();
    }
    SqlError.builtin$cls = "SqlError";
    if (!("name" in SqlError))
      SqlError.name = "SqlError";
    $desc = $collectedClasses$.SqlError[1];
    SqlError.prototype = $desc;
    SqlError.$__fields__ = [];
    SqlError.prototype.get$code = function(receiver) {
      return receiver.code;
    };
    SqlError.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function SqlResultSetRowList() {
      this.$deferredAction();
    }
    SqlResultSetRowList.builtin$cls = "SqlResultSetRowList";
    if (!("name" in SqlResultSetRowList))
      SqlResultSetRowList.name = "SqlResultSetRowList";
    $desc = $collectedClasses$.SqlResultSetRowList[1];
    SqlResultSetRowList.prototype = $desc;
    SqlResultSetRowList.$__fields__ = [];
    function Interceptor_ListMixin19() {
      this.$deferredAction();
    }
    Interceptor_ListMixin19.builtin$cls = "Interceptor_ListMixin19";
    if (!("name" in Interceptor_ListMixin19))
      Interceptor_ListMixin19.name = "Interceptor_ListMixin19";
    $desc = $collectedClasses$.Interceptor_ListMixin19[1];
    Interceptor_ListMixin19.prototype = $desc;
    Interceptor_ListMixin19.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin19() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin19.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin19";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin19))
      Interceptor_ListMixin_ImmutableListMixin19.name = "Interceptor_ListMixin_ImmutableListMixin19";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin19[1];
    Interceptor_ListMixin_ImmutableListMixin19.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin19.$__fields__ = [];
    function Atom(_commands, _config, _contextMenu, _grammars, _notifications, _packages, _project, _views, _workspace, obj) {
      this._commands = _commands;
      this._config = _config;
      this._contextMenu = _contextMenu;
      this._grammars = _grammars;
      this._notifications = _notifications;
      this._packages = _packages;
      this._project = _project;
      this._views = _views;
      this._workspace = _workspace;
      this.obj = obj;
      this.$deferredAction();
    }
    Atom.builtin$cls = "Atom";
    if (!("name" in Atom))
      Atom.name = "Atom";
    $desc = $collectedClasses$.Atom[1];
    Atom.prototype = $desc;
    Atom.$__fields__ = ["_commands", "_config", "_contextMenu", "_grammars", "_notifications", "_packages", "_project", "_views", "_workspace", "obj"];
    function Atom_pickFolder_closure(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    Atom_pickFolder_closure.builtin$cls = "Atom_pickFolder_closure";
    if (!("name" in Atom_pickFolder_closure))
      Atom_pickFolder_closure.name = "Atom_pickFolder_closure";
    $desc = $collectedClasses$.Atom_pickFolder_closure[1];
    Atom_pickFolder_closure.prototype = $desc;
    Atom_pickFolder_closure.$__fields__ = ["completer"];
    function TrustedHtmlTreeSanitizer() {
      this.$deferredAction();
    }
    TrustedHtmlTreeSanitizer.builtin$cls = "TrustedHtmlTreeSanitizer";
    if (!("name" in TrustedHtmlTreeSanitizer))
      TrustedHtmlTreeSanitizer.name = "TrustedHtmlTreeSanitizer";
    $desc = $collectedClasses$.TrustedHtmlTreeSanitizer[1];
    TrustedHtmlTreeSanitizer.prototype = $desc;
    TrustedHtmlTreeSanitizer.$__fields__ = [];
    function which_closure() {
      this.$deferredAction();
    }
    which_closure.builtin$cls = "which_closure";
    if (!("name" in which_closure))
      which_closure.name = "which_closure";
    $desc = $collectedClasses$.which_closure[1];
    which_closure.prototype = $desc;
    which_closure.$__fields__ = [];
    function which_closure0() {
      this.$deferredAction();
    }
    which_closure0.builtin$cls = "which_closure0";
    if (!("name" in which_closure0))
      which_closure0.name = "which_closure0";
    $desc = $collectedClasses$.which_closure0[1];
    which_closure0.prototype = $desc;
    which_closure0.$__fields__ = [];
    function CommandRegistry(_dispatchedController, obj) {
      this._dispatchedController = _dispatchedController;
      this.obj = obj;
      this.$deferredAction();
    }
    CommandRegistry.builtin$cls = "CommandRegistry";
    if (!("name" in CommandRegistry))
      CommandRegistry.name = "CommandRegistry";
    $desc = $collectedClasses$.CommandRegistry[1];
    CommandRegistry.prototype = $desc;
    CommandRegistry.$__fields__ = ["_dispatchedController", "obj"];
    function CommandRegistry_add_closure($this, commandName, callback) {
      this.$this = $this;
      this.commandName = commandName;
      this.callback = callback;
      this.$deferredAction();
    }
    CommandRegistry_add_closure.builtin$cls = "CommandRegistry_add_closure";
    if (!("name" in CommandRegistry_add_closure))
      CommandRegistry_add_closure.name = "CommandRegistry_add_closure";
    $desc = $collectedClasses$.CommandRegistry_add_closure[1];
    CommandRegistry_add_closure.prototype = $desc;
    CommandRegistry_add_closure.$__fields__ = ["$this", "commandName", "callback"];
    function ContextMenuManager(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    ContextMenuManager.builtin$cls = "ContextMenuManager";
    if (!("name" in ContextMenuManager))
      ContextMenuManager.name = "ContextMenuManager";
    $desc = $collectedClasses$.ContextMenuManager[1];
    ContextMenuManager.prototype = $desc;
    ContextMenuManager.$__fields__ = ["obj"];
    function ContextMenuManager_add_closure() {
      this.$deferredAction();
    }
    ContextMenuManager_add_closure.builtin$cls = "ContextMenuManager_add_closure";
    if (!("name" in ContextMenuManager_add_closure))
      ContextMenuManager_add_closure.name = "ContextMenuManager_add_closure";
    $desc = $collectedClasses$.ContextMenuManager_add_closure[1];
    ContextMenuManager_add_closure.prototype = $desc;
    ContextMenuManager_add_closure.$__fields__ = [];
    function ContextMenuItem() {
      this.$deferredAction();
    }
    ContextMenuItem.builtin$cls = "ContextMenuItem";
    if (!("name" in ContextMenuItem))
      ContextMenuItem.name = "ContextMenuItem";
    $desc = $collectedClasses$.ContextMenuItem[1];
    ContextMenuItem.prototype = $desc;
    ContextMenuItem.$__fields__ = [];
    function ContextMenuItem_toJs_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ContextMenuItem_toJs_closure.builtin$cls = "ContextMenuItem_toJs_closure";
    if (!("name" in ContextMenuItem_toJs_closure))
      ContextMenuItem_toJs_closure.name = "ContextMenuItem_toJs_closure";
    $desc = $collectedClasses$.ContextMenuItem_toJs_closure[1];
    ContextMenuItem_toJs_closure.prototype = $desc;
    ContextMenuItem_toJs_closure.$__fields__ = ["$this"];
    function _SeparatorMenuItem(label, command) {
      this.label = label;
      this.command = command;
      this.$deferredAction();
    }
    _SeparatorMenuItem.builtin$cls = "_SeparatorMenuItem";
    if (!("name" in _SeparatorMenuItem))
      _SeparatorMenuItem.name = "_SeparatorMenuItem";
    $desc = $collectedClasses$._SeparatorMenuItem[1];
    _SeparatorMenuItem.prototype = $desc;
    _SeparatorMenuItem.$__fields__ = ["label", "command"];
    function AtomEvent(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    AtomEvent.builtin$cls = "AtomEvent";
    if (!("name" in AtomEvent))
      AtomEvent.name = "AtomEvent";
    $desc = $collectedClasses$.AtomEvent[1];
    AtomEvent.prototype = $desc;
    AtomEvent.$__fields__ = ["obj"];
    function Config(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Config.builtin$cls = "Config";
    if (!("name" in Config))
      Config.name = "Config";
    $desc = $collectedClasses$.Config[1];
    Config.prototype = $desc;
    Config.$__fields__ = ["obj"];
    function Config_onDidChange_closure(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    Config_onDidChange_closure.builtin$cls = "Config_onDidChange_closure";
    if (!("name" in Config_onDidChange_closure))
      Config_onDidChange_closure.name = "Config_onDidChange_closure";
    $desc = $collectedClasses$.Config_onDidChange_closure[1];
    Config_onDidChange_closure.prototype = $desc;
    Config_onDidChange_closure.$__fields__ = ["_box_0"];
    function Config_onDidChange_closure0(controller) {
      this.controller = controller;
      this.$deferredAction();
    }
    Config_onDidChange_closure0.builtin$cls = "Config_onDidChange_closure0";
    if (!("name" in Config_onDidChange_closure0))
      Config_onDidChange_closure0.name = "Config_onDidChange_closure0";
    $desc = $collectedClasses$.Config_onDidChange_closure0[1];
    Config_onDidChange_closure0.prototype = $desc;
    Config_onDidChange_closure0.$__fields__ = ["controller"];
    function Grammar(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Grammar.builtin$cls = "Grammar";
    if (!("name" in Grammar))
      Grammar.name = "Grammar";
    $desc = $collectedClasses$.Grammar[1];
    Grammar.prototype = $desc;
    Grammar.$__fields__ = ["obj"];
    function GrammarRegistry(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    GrammarRegistry.builtin$cls = "GrammarRegistry";
    if (!("name" in GrammarRegistry))
      GrammarRegistry.name = "GrammarRegistry";
    $desc = $collectedClasses$.GrammarRegistry[1];
    GrammarRegistry.prototype = $desc;
    GrammarRegistry.$__fields__ = ["obj"];
    function ScopeDescriptor(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    ScopeDescriptor.builtin$cls = "ScopeDescriptor";
    if (!("name" in ScopeDescriptor))
      ScopeDescriptor.name = "ScopeDescriptor";
    $desc = $collectedClasses$.ScopeDescriptor[1];
    ScopeDescriptor.prototype = $desc;
    ScopeDescriptor.$__fields__ = ["obj"];
    function FS(_os, separator, obj) {
      this._os = _os;
      this.separator = separator;
      this.obj = obj;
      this.$deferredAction();
    }
    FS.builtin$cls = "FS";
    if (!("name" in FS))
      FS.name = "FS";
    $desc = $collectedClasses$.FS[1];
    FS.prototype = $desc;
    FS.$__fields__ = ["_os", "separator", "obj"];
    function Stats(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Stats.builtin$cls = "Stats";
    if (!("name" in Stats))
      Stats.name = "Stats";
    $desc = $collectedClasses$.Stats[1];
    Stats.prototype = $desc;
    Stats.$__fields__ = ["obj"];
    function Directory(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Directory.builtin$cls = "Directory";
    if (!("name" in Directory))
      Directory.name = "Directory";
    $desc = $collectedClasses$.Directory[1];
    Directory.prototype = $desc;
    Directory.$__fields__ = ["obj"];
    function Directory_getEntriesSync_closure() {
      this.$deferredAction();
    }
    Directory_getEntriesSync_closure.builtin$cls = "Directory_getEntriesSync_closure";
    if (!("name" in Directory_getEntriesSync_closure))
      Directory_getEntriesSync_closure.name = "Directory_getEntriesSync_closure";
    $desc = $collectedClasses$.Directory_getEntriesSync_closure[1];
    Directory_getEntriesSync_closure.prototype = $desc;
    Directory_getEntriesSync_closure.$__fields__ = [];
    function File(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    File.builtin$cls = "File";
    if (!("name" in File))
      File.name = "File";
    $desc = $collectedClasses$.File[1];
    File.prototype = $desc;
    File.$__fields__ = ["obj"];
    function Entry0() {
      this.$deferredAction();
    }
    Entry0.builtin$cls = "Entry0";
    if (!("name" in Entry0))
      Entry0.name = "Entry0";
    $desc = $collectedClasses$.Entry0[1];
    Entry0.prototype = $desc;
    Entry0.$__fields__ = [];
    function NotificationManager(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    NotificationManager.builtin$cls = "NotificationManager";
    if (!("name" in NotificationManager))
      NotificationManager.name = "NotificationManager";
    $desc = $collectedClasses$.NotificationManager[1];
    NotificationManager.prototype = $desc;
    NotificationManager.$__fields__ = ["obj"];
    function NotificationManager__options_closure() {
      this.$deferredAction();
    }
    NotificationManager__options_closure.builtin$cls = "NotificationManager__options_closure";
    if (!("name" in NotificationManager__options_closure))
      NotificationManager__options_closure.name = "NotificationManager__options_closure";
    $desc = $collectedClasses$.NotificationManager__options_closure[1];
    NotificationManager__options_closure.prototype = $desc;
    NotificationManager__options_closure.$__fields__ = [];
    function Notification(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Notification.builtin$cls = "Notification";
    if (!("name" in Notification))
      Notification.name = "Notification";
    $desc = $collectedClasses$.Notification[1];
    Notification.prototype = $desc;
    Notification.$__fields__ = ["obj"];
    function NotificationButton(text, onDidClick) {
      this.text = text;
      this.onDidClick = onDidClick;
      this.$deferredAction();
    }
    NotificationButton.builtin$cls = "NotificationButton";
    if (!("name" in NotificationButton))
      NotificationButton.name = "NotificationButton";
    $desc = $collectedClasses$.NotificationButton[1];
    NotificationButton.prototype = $desc;
    NotificationButton.$__fields__ = ["text", "onDidClick"];
    NotificationButton.prototype.get$text = function(receiver) {
      return this.text;
    };
    function NotificationButton_toProxy_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    NotificationButton_toProxy_closure.builtin$cls = "NotificationButton_toProxy_closure";
    if (!("name" in NotificationButton_toProxy_closure))
      NotificationButton_toProxy_closure.name = "NotificationButton_toProxy_closure";
    $desc = $collectedClasses$.NotificationButton_toProxy_closure[1];
    NotificationButton_toProxy_closure.prototype = $desc;
    NotificationButton_toProxy_closure.$__fields__ = ["$this"];
    function NotificationHelper(_view, _classList, _content, _titleElement, _detailContent, _description) {
      this._view = _view;
      this._classList = _classList;
      this._content = _content;
      this._titleElement = _titleElement;
      this._detailContent = _detailContent;
      this._description = _description;
      this.$deferredAction();
    }
    NotificationHelper.builtin$cls = "NotificationHelper";
    if (!("name" in NotificationHelper))
      NotificationHelper.name = "NotificationHelper";
    $desc = $collectedClasses$.NotificationHelper[1];
    NotificationHelper.prototype = $desc;
    NotificationHelper.$__fields__ = ["_view", "_classList", "_content", "_titleElement", "_detailContent", "_description"];
    function NotificationHelper_appendText_closure(stderr) {
      this.stderr = stderr;
      this.$deferredAction();
    }
    NotificationHelper_appendText_closure.builtin$cls = "NotificationHelper_appendText_closure";
    if (!("name" in NotificationHelper_appendText_closure))
      NotificationHelper_appendText_closure.name = "NotificationHelper_appendText_closure";
    $desc = $collectedClasses$.NotificationHelper_appendText_closure[1];
    NotificationHelper_appendText_closure.prototype = $desc;
    NotificationHelper_appendText_closure.$__fields__ = ["stderr"];
    function ProcessNotifier(title, _notification, _helper) {
      this.title = title;
      this._notification = _notification;
      this._helper = _helper;
      this.$deferredAction();
    }
    ProcessNotifier.builtin$cls = "ProcessNotifier";
    if (!("name" in ProcessNotifier))
      ProcessNotifier.name = "ProcessNotifier";
    $desc = $collectedClasses$.ProcessNotifier[1];
    ProcessNotifier.prototype = $desc;
    ProcessNotifier.$__fields__ = ["title", "_notification", "_helper"];
    ProcessNotifier.prototype.get$title = function(receiver) {
      return this.title;
    };
    function ProcessNotifier_watch_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ProcessNotifier_watch_closure.builtin$cls = "ProcessNotifier_watch_closure";
    if (!("name" in ProcessNotifier_watch_closure))
      ProcessNotifier_watch_closure.name = "ProcessNotifier_watch_closure";
    $desc = $collectedClasses$.ProcessNotifier_watch_closure[1];
    ProcessNotifier_watch_closure.prototype = $desc;
    ProcessNotifier_watch_closure.$__fields__ = ["$this"];
    function ProcessNotifier_watch_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ProcessNotifier_watch_closure0.builtin$cls = "ProcessNotifier_watch_closure0";
    if (!("name" in ProcessNotifier_watch_closure0))
      ProcessNotifier_watch_closure0.name = "ProcessNotifier_watch_closure0";
    $desc = $collectedClasses$.ProcessNotifier_watch_closure0[1];
    ProcessNotifier_watch_closure0.prototype = $desc;
    ProcessNotifier_watch_closure0.$__fields__ = ["$this"];
    function ProcessNotifier_watch_closure1(runner) {
      this.runner = runner;
      this.$deferredAction();
    }
    ProcessNotifier_watch_closure1.builtin$cls = "ProcessNotifier_watch_closure1";
    if (!("name" in ProcessNotifier_watch_closure1))
      ProcessNotifier_watch_closure1.name = "ProcessNotifier_watch_closure1";
    $desc = $collectedClasses$.ProcessNotifier_watch_closure1[1];
    ProcessNotifier_watch_closure1.prototype = $desc;
    ProcessNotifier_watch_closure1.$__fields__ = ["runner"];
    function ProcessNotifier_watch_closure2($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ProcessNotifier_watch_closure2.builtin$cls = "ProcessNotifier_watch_closure2";
    if (!("name" in ProcessNotifier_watch_closure2))
      ProcessNotifier_watch_closure2.name = "ProcessNotifier_watch_closure2";
    $desc = $collectedClasses$.ProcessNotifier_watch_closure2[1];
    ProcessNotifier_watch_closure2.prototype = $desc;
    ProcessNotifier_watch_closure2.$__fields__ = ["$this"];
    function promptUser_closure(editorElement) {
      this.editorElement = editorElement;
      this.$deferredAction();
    }
    promptUser_closure.builtin$cls = "promptUser_closure";
    if (!("name" in promptUser_closure))
      promptUser_closure.name = "promptUser_closure";
    $desc = $collectedClasses$.promptUser_closure[1];
    promptUser_closure.prototype = $desc;
    promptUser_closure.$__fields__ = ["editorElement"];
    function promptUser_closure0(completer, editor) {
      this.completer = completer;
      this.editor = editor;
      this.$deferredAction();
    }
    promptUser_closure0.builtin$cls = "promptUser_closure0";
    if (!("name" in promptUser_closure0))
      promptUser_closure0.name = "promptUser_closure0";
    $desc = $collectedClasses$.promptUser_closure0[1];
    promptUser_closure0.prototype = $desc;
    promptUser_closure0.$__fields__ = ["completer", "editor"];
    function promptUser_closure1(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    promptUser_closure1.builtin$cls = "promptUser_closure1";
    if (!("name" in promptUser_closure1))
      promptUser_closure1.name = "promptUser_closure1";
    $desc = $collectedClasses$.promptUser_closure1[1];
    promptUser_closure1.prototype = $desc;
    promptUser_closure1.$__fields__ = ["completer"];
    function promptUser_closure2(disposables, panel) {
      this.disposables = disposables;
      this.panel = panel;
      this.$deferredAction();
    }
    promptUser_closure2.builtin$cls = "promptUser_closure2";
    if (!("name" in promptUser_closure2))
      promptUser_closure2.name = "promptUser_closure2";
    $desc = $collectedClasses$.promptUser_closure2[1];
    promptUser_closure2.prototype = $desc;
    promptUser_closure2.$__fields__ = ["disposables", "panel"];
    function registerPackage_closure() {
      this.$deferredAction();
    }
    registerPackage_closure.builtin$cls = "registerPackage_closure";
    if (!("name" in registerPackage_closure))
      registerPackage_closure.name = "registerPackage_closure";
    $desc = $collectedClasses$.registerPackage_closure[1];
    registerPackage_closure.prototype = $desc;
    registerPackage_closure.$__fields__ = [];
    function registerPackage_closure0() {
      this.$deferredAction();
    }
    registerPackage_closure0.builtin$cls = "registerPackage_closure0";
    if (!("name" in registerPackage_closure0))
      registerPackage_closure0.name = "registerPackage_closure0";
    $desc = $collectedClasses$.registerPackage_closure0[1];
    registerPackage_closure0.prototype = $desc;
    registerPackage_closure0.$__fields__ = [];
    function registerPackage_closure1(exports) {
      this.exports = exports;
      this.$deferredAction();
    }
    registerPackage_closure1.builtin$cls = "registerPackage_closure1";
    if (!("name" in registerPackage_closure1))
      registerPackage_closure1.name = "registerPackage_closure1";
    $desc = $collectedClasses$.registerPackage_closure1[1];
    registerPackage_closure1.prototype = $desc;
    registerPackage_closure1.$__fields__ = ["exports"];
    function registerPackage__closure(f) {
      this.f = f;
      this.$deferredAction();
    }
    registerPackage__closure.builtin$cls = "registerPackage__closure";
    if (!("name" in registerPackage__closure))
      registerPackage__closure.name = "registerPackage__closure";
    $desc = $collectedClasses$.registerPackage__closure[1];
    registerPackage__closure.prototype = $desc;
    registerPackage__closure.$__fields__ = ["f"];
    function AtomPackage(id) {
      this.id = id;
      this.$deferredAction();
    }
    AtomPackage.builtin$cls = "AtomPackage";
    if (!("name" in AtomPackage))
      AtomPackage.name = "AtomPackage";
    $desc = $collectedClasses$.AtomPackage[1];
    AtomPackage.prototype = $desc;
    AtomPackage.$__fields__ = ["id"];
    AtomPackage.prototype.get$id = function(receiver) {
      return this.id;
    };
    function AtomPackage_loadPackageJson_closure() {
      this.$deferredAction();
    }
    AtomPackage_loadPackageJson_closure.builtin$cls = "AtomPackage_loadPackageJson_closure";
    if (!("name" in AtomPackage_loadPackageJson_closure))
      AtomPackage_loadPackageJson_closure.name = "AtomPackage_loadPackageJson_closure";
    $desc = $collectedClasses$.AtomPackage_loadPackageJson_closure[1];
    AtomPackage_loadPackageJson_closure.prototype = $desc;
    AtomPackage_loadPackageJson_closure.$__fields__ = [];
    function AtomPackage_getPackageVersion_closure() {
      this.$deferredAction();
    }
    AtomPackage_getPackageVersion_closure.builtin$cls = "AtomPackage_getPackageVersion_closure";
    if (!("name" in AtomPackage_getPackageVersion_closure))
      AtomPackage_getPackageVersion_closure.name = "AtomPackage_getPackageVersion_closure";
    $desc = $collectedClasses$.AtomPackage_getPackageVersion_closure[1];
    AtomPackage_getPackageVersion_closure.prototype = $desc;
    AtomPackage_getPackageVersion_closure.$__fields__ = [];
    function PackageManager(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    PackageManager.builtin$cls = "PackageManager";
    if (!("name" in PackageManager))
      PackageManager.name = "PackageManager";
    $desc = $collectedClasses$.PackageManager[1];
    PackageManager.prototype = $desc;
    PackageManager.$__fields__ = ["obj"];
    function Process(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Process.builtin$cls = "Process";
    if (!("name" in Process))
      Process.name = "Process";
    $desc = $collectedClasses$.Process[1];
    Process.prototype = $desc;
    Process.$__fields__ = ["obj"];
    function exec_closure() {
      this.$deferredAction();
    }
    exec_closure.builtin$cls = "exec_closure";
    if (!("name" in exec_closure))
      exec_closure.name = "exec_closure";
    $desc = $collectedClasses$.exec_closure[1];
    exec_closure.prototype = $desc;
    exec_closure.$__fields__ = [];
    function ProcessRunner(command, args, cwd, env, _process$_process, _exitCompleter, _exit, _stdoutController, _stderrController) {
      this.command = command;
      this.args = args;
      this.cwd = cwd;
      this.env = env;
      this._process$_process = _process$_process;
      this._exitCompleter = _exitCompleter;
      this._exit = _exit;
      this._stdoutController = _stdoutController;
      this._stderrController = _stderrController;
      this.$deferredAction();
    }
    ProcessRunner.builtin$cls = "ProcessRunner";
    if (!("name" in ProcessRunner))
      ProcessRunner.name = "ProcessRunner";
    $desc = $collectedClasses$.ProcessRunner[1];
    ProcessRunner.prototype = $desc;
    ProcessRunner.$__fields__ = ["command", "args", "cwd", "env", "_process$_process", "_exitCompleter", "_exit", "_stdoutController", "_stderrController"];
    ProcessRunner.prototype.get$cwd = function() {
      return this.cwd;
    };
    function ProcessRunner_execSimple_closure(stdout) {
      this.stdout = stdout;
      this.$deferredAction();
    }
    ProcessRunner_execSimple_closure.builtin$cls = "ProcessRunner_execSimple_closure";
    if (!("name" in ProcessRunner_execSimple_closure))
      ProcessRunner_execSimple_closure.name = "ProcessRunner_execSimple_closure";
    $desc = $collectedClasses$.ProcessRunner_execSimple_closure[1];
    ProcessRunner_execSimple_closure.prototype = $desc;
    ProcessRunner_execSimple_closure.$__fields__ = ["stdout"];
    function ProcessRunner_execSimple_closure0(stderr) {
      this.stderr = stderr;
      this.$deferredAction();
    }
    ProcessRunner_execSimple_closure0.builtin$cls = "ProcessRunner_execSimple_closure0";
    if (!("name" in ProcessRunner_execSimple_closure0))
      ProcessRunner_execSimple_closure0.name = "ProcessRunner_execSimple_closure0";
    $desc = $collectedClasses$.ProcessRunner_execSimple_closure0[1];
    ProcessRunner_execSimple_closure0.prototype = $desc;
    ProcessRunner_execSimple_closure0.$__fields__ = ["stderr"];
    function ProcessRunner_execSimple_closure1(stdout, stderr) {
      this.stdout = stdout;
      this.stderr = stderr;
      this.$deferredAction();
    }
    ProcessRunner_execSimple_closure1.builtin$cls = "ProcessRunner_execSimple_closure1";
    if (!("name" in ProcessRunner_execSimple_closure1))
      ProcessRunner_execSimple_closure1.name = "ProcessRunner_execSimple_closure1";
    $desc = $collectedClasses$.ProcessRunner_execSimple_closure1[1];
    ProcessRunner_execSimple_closure1.prototype = $desc;
    ProcessRunner_execSimple_closure1.$__fields__ = ["stdout", "stderr"];
    function ProcessRunner_execStreaming_closure2($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ProcessRunner_execStreaming_closure2.builtin$cls = "ProcessRunner_execStreaming_closure2";
    if (!("name" in ProcessRunner_execStreaming_closure2))
      ProcessRunner_execStreaming_closure2.name = "ProcessRunner_execStreaming_closure2";
    $desc = $collectedClasses$.ProcessRunner_execStreaming_closure2[1];
    ProcessRunner_execStreaming_closure2.prototype = $desc;
    ProcessRunner_execStreaming_closure2.$__fields__ = ["$this"];
    function ProcessRunner_execStreaming_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ProcessRunner_execStreaming_closure1.builtin$cls = "ProcessRunner_execStreaming_closure1";
    if (!("name" in ProcessRunner_execStreaming_closure1))
      ProcessRunner_execStreaming_closure1.name = "ProcessRunner_execStreaming_closure1";
    $desc = $collectedClasses$.ProcessRunner_execStreaming_closure1[1];
    ProcessRunner_execStreaming_closure1.prototype = $desc;
    ProcessRunner_execStreaming_closure1.$__fields__ = ["$this"];
    function ProcessRunner_execStreaming_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ProcessRunner_execStreaming_closure.builtin$cls = "ProcessRunner_execStreaming_closure";
    if (!("name" in ProcessRunner_execStreaming_closure))
      ProcessRunner_execStreaming_closure.name = "ProcessRunner_execStreaming_closure";
    $desc = $collectedClasses$.ProcessRunner_execStreaming_closure[1];
    ProcessRunner_execStreaming_closure.prototype = $desc;
    ProcessRunner_execStreaming_closure.$__fields__ = ["$this"];
    function ProcessRunner_execStreaming_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ProcessRunner_execStreaming_closure0.builtin$cls = "ProcessRunner_execStreaming_closure0";
    if (!("name" in ProcessRunner_execStreaming_closure0))
      ProcessRunner_execStreaming_closure0.name = "ProcessRunner_execStreaming_closure0";
    $desc = $collectedClasses$.ProcessRunner_execStreaming_closure0[1];
    ProcessRunner_execStreaming_closure0.prototype = $desc;
    ProcessRunner_execStreaming_closure0.$__fields__ = ["$this"];
    function ProcessRunner_kill_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ProcessRunner_kill_closure.builtin$cls = "ProcessRunner_kill_closure";
    if (!("name" in ProcessRunner_kill_closure))
      ProcessRunner_kill_closure.name = "ProcessRunner_kill_closure";
    $desc = $collectedClasses$.ProcessRunner_kill_closure[1];
    ProcessRunner_kill_closure.prototype = $desc;
    ProcessRunner_kill_closure.$__fields__ = ["$this"];
    function ProcessResult(exit, stdout, stderr) {
      this.exit = exit;
      this.stdout = stdout;
      this.stderr = stderr;
      this.$deferredAction();
    }
    ProcessResult.builtin$cls = "ProcessResult";
    if (!("name" in ProcessResult))
      ProcessResult.name = "ProcessResult";
    $desc = $collectedClasses$.ProcessResult[1];
    ProcessResult.prototype = $desc;
    ProcessResult.$__fields__ = ["exit", "stdout", "stderr"];
    ProcessResult.prototype.get$exit = function() {
      return this.exit;
    };
    ProcessResult.prototype.get$stdout = function() {
      return this.stdout;
    };
    ProcessResult.prototype.get$stderr = function() {
      return this.stderr;
    };
    function ShellWrangler(_currentShell, _targetShell, _env) {
      this._currentShell = _currentShell;
      this._targetShell = _targetShell;
      this._env = _env;
      this.$deferredAction();
    }
    ShellWrangler.builtin$cls = "ShellWrangler";
    if (!("name" in ShellWrangler))
      ShellWrangler.name = "ShellWrangler";
    $desc = $collectedClasses$.ShellWrangler[1];
    ShellWrangler.prototype = $desc;
    ShellWrangler.$__fields__ = ["_currentShell", "_targetShell", "_env"];
    function BufferedProcess(_stdin, obj) {
      this._stdin = _stdin;
      this.obj = obj;
      this.$deferredAction();
    }
    BufferedProcess.builtin$cls = "BufferedProcess";
    if (!("name" in BufferedProcess))
      BufferedProcess.name = "BufferedProcess";
    $desc = $collectedClasses$.BufferedProcess[1];
    BufferedProcess.prototype = $desc;
    BufferedProcess.$__fields__ = ["_stdin", "obj"];
    function BufferedProcess_create_closure(onWillThrowError) {
      this.onWillThrowError = onWillThrowError;
      this.$deferredAction();
    }
    BufferedProcess_create_closure.builtin$cls = "BufferedProcess_create_closure";
    if (!("name" in BufferedProcess_create_closure))
      BufferedProcess_create_closure.name = "BufferedProcess_create_closure";
    $desc = $collectedClasses$.BufferedProcess_create_closure[1];
    BufferedProcess_create_closure.prototype = $desc;
    BufferedProcess_create_closure.$__fields__ = ["onWillThrowError"];
    function Shell(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Shell.builtin$cls = "Shell";
    if (!("name" in Shell))
      Shell.name = "Shell";
    $desc = $collectedClasses$.Shell[1];
    Shell.prototype = $desc;
    Shell.$__fields__ = ["obj"];
    function ViewRegistry(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    ViewRegistry.builtin$cls = "ViewRegistry";
    if (!("name" in ViewRegistry))
      ViewRegistry.name = "ViewRegistry";
    $desc = $collectedClasses$.ViewRegistry[1];
    ViewRegistry.prototype = $desc;
    ViewRegistry.$__fields__ = ["obj"];
    function Workspace(_openSerializer, obj) {
      this._openSerializer = _openSerializer;
      this.obj = obj;
      this.$deferredAction();
    }
    Workspace.builtin$cls = "Workspace";
    if (!("name" in Workspace))
      Workspace.name = "Workspace";
    $desc = $collectedClasses$.Workspace[1];
    Workspace.prototype = $desc;
    Workspace.$__fields__ = ["_openSerializer", "obj"];
    function Workspace_getTextEditors_closure() {
      this.$deferredAction();
    }
    Workspace_getTextEditors_closure.builtin$cls = "Workspace_getTextEditors_closure";
    if (!("name" in Workspace_getTextEditors_closure))
      Workspace_getTextEditors_closure.name = "Workspace_getTextEditors_closure";
    $desc = $collectedClasses$.Workspace_getTextEditors_closure[1];
    Workspace_getTextEditors_closure.prototype = $desc;
    Workspace_getTextEditors_closure.$__fields__ = [];
    function Workspace_observeTextEditors_closure(callback) {
      this.callback = callback;
      this.$deferredAction();
    }
    Workspace_observeTextEditors_closure.builtin$cls = "Workspace_observeTextEditors_closure";
    if (!("name" in Workspace_observeTextEditors_closure))
      Workspace_observeTextEditors_closure.name = "Workspace_observeTextEditors_closure";
    $desc = $collectedClasses$.Workspace_observeTextEditors_closure[1];
    Workspace_observeTextEditors_closure.prototype = $desc;
    Workspace_observeTextEditors_closure.$__fields__ = ["callback"];
    function Workspace_observeActivePaneItem_closure(callback) {
      this.callback = callback;
      this.$deferredAction();
    }
    Workspace_observeActivePaneItem_closure.builtin$cls = "Workspace_observeActivePaneItem_closure";
    if (!("name" in Workspace_observeActivePaneItem_closure))
      Workspace_observeActivePaneItem_closure.name = "Workspace_observeActivePaneItem_closure";
    $desc = $collectedClasses$.Workspace_observeActivePaneItem_closure[1];
    Workspace_observeActivePaneItem_closure.prototype = $desc;
    Workspace_observeActivePaneItem_closure.$__fields__ = ["callback"];
    function Workspace_open_closure($this, url, options) {
      this.$this = $this;
      this.url = url;
      this.options = options;
      this.$deferredAction();
    }
    Workspace_open_closure.builtin$cls = "Workspace_open_closure";
    if (!("name" in Workspace_open_closure))
      Workspace_open_closure.name = "Workspace_open_closure";
    $desc = $collectedClasses$.Workspace_open_closure[1];
    Workspace_open_closure.prototype = $desc;
    Workspace_open_closure.$__fields__ = ["$this", "url", "options"];
    function Workspace_open__closure(url) {
      this.url = url;
      this.$deferredAction();
    }
    Workspace_open__closure.builtin$cls = "Workspace_open__closure";
    if (!("name" in Workspace_open__closure))
      Workspace_open__closure.name = "Workspace_open__closure";
    $desc = $collectedClasses$.Workspace_open__closure[1];
    Workspace_open__closure.prototype = $desc;
    Workspace_open__closure.$__fields__ = ["url"];
    function Project(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Project.builtin$cls = "Project";
    if (!("name" in Project))
      Project.name = "Project";
    $desc = $collectedClasses$.Project[1];
    Project.prototype = $desc;
    Project.$__fields__ = ["obj"];
    function Project_getDirectories_closure() {
      this.$deferredAction();
    }
    Project_getDirectories_closure.builtin$cls = "Project_getDirectories_closure";
    if (!("name" in Project_getDirectories_closure))
      Project_getDirectories_closure.name = "Project_getDirectories_closure";
    $desc = $collectedClasses$.Project_getDirectories_closure[1];
    Project_getDirectories_closure.prototype = $desc;
    Project_getDirectories_closure.$__fields__ = [];
    function Panel(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Panel.builtin$cls = "Panel";
    if (!("name" in Panel))
      Panel.name = "Panel";
    $desc = $collectedClasses$.Panel[1];
    Panel.prototype = $desc;
    Panel.$__fields__ = ["obj"];
    function Panel_onDidDestroy_closure() {
      this.$deferredAction();
    }
    Panel_onDidDestroy_closure.builtin$cls = "Panel_onDidDestroy_closure";
    if (!("name" in Panel_onDidDestroy_closure))
      Panel_onDidDestroy_closure.name = "Panel_onDidDestroy_closure";
    $desc = $collectedClasses$.Panel_onDidDestroy_closure[1];
    Panel_onDidDestroy_closure.prototype = $desc;
    Panel_onDidDestroy_closure.$__fields__ = [];
    function Gutter(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Gutter.builtin$cls = "Gutter";
    if (!("name" in Gutter))
      Gutter.name = "Gutter";
    $desc = $collectedClasses$.Gutter[1];
    Gutter.prototype = $desc;
    Gutter.$__fields__ = ["obj"];
    function Marker(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Marker.builtin$cls = "Marker";
    if (!("name" in Marker))
      Marker.name = "Marker";
    $desc = $collectedClasses$.Marker[1];
    Marker.prototype = $desc;
    Marker.$__fields__ = ["obj"];
    function Decoration(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Decoration.builtin$cls = "Decoration";
    if (!("name" in Decoration))
      Decoration.name = "Decoration";
    $desc = $collectedClasses$.Decoration[1];
    Decoration.prototype = $desc;
    Decoration.$__fields__ = ["obj"];
    function Point0(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Point0.builtin$cls = "Point0";
    if (!("name" in Point0))
      Point0.name = "Point0";
    $desc = $collectedClasses$.Point0[1];
    Point0.prototype = $desc;
    Point0.$__fields__ = ["obj"];
    function Range(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Range.builtin$cls = "Range";
    if (!("name" in Range))
      Range.name = "Range";
    $desc = $collectedClasses$.Range[1];
    Range.prototype = $desc;
    Range.$__fields__ = ["obj"];
    function TextBuffer(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    TextBuffer.builtin$cls = "TextBuffer";
    if (!("name" in TextBuffer))
      TextBuffer.name = "TextBuffer";
    $desc = $collectedClasses$.TextBuffer[1];
    TextBuffer.prototype = $desc;
    TextBuffer.$__fields__ = ["obj"];
    function TextEditorElement(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    TextEditorElement.builtin$cls = "TextEditorElement";
    if (!("name" in TextEditorElement))
      TextEditorElement.name = "TextEditorElement";
    $desc = $collectedClasses$.TextEditorElement[1];
    TextEditorElement.prototype = $desc;
    TextEditorElement.$__fields__ = ["obj"];
    function TextEditor(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    TextEditor.builtin$cls = "TextEditor";
    if (!("name" in TextEditor))
      TextEditor.name = "TextEditor";
    $desc = $collectedClasses$.TextEditor[1];
    TextEditor.prototype = $desc;
    TextEditor.$__fields__ = ["obj"];
    function TextEditor_setSelectedBufferRanges_closure() {
      this.$deferredAction();
    }
    TextEditor_setSelectedBufferRanges_closure.builtin$cls = "TextEditor_setSelectedBufferRanges_closure";
    if (!("name" in TextEditor_setSelectedBufferRanges_closure))
      TextEditor_setSelectedBufferRanges_closure.name = "TextEditor_setSelectedBufferRanges_closure";
    $desc = $collectedClasses$.TextEditor_setSelectedBufferRanges_closure[1];
    TextEditor_setSelectedBufferRanges_closure.prototype = $desc;
    TextEditor_setSelectedBufferRanges_closure.$__fields__ = [];
    function TextEditor_onDidChangeCursorPosition_closure() {
      this.$deferredAction();
    }
    TextEditor_onDidChangeCursorPosition_closure.builtin$cls = "TextEditor_onDidChangeCursorPosition_closure";
    if (!("name" in TextEditor_onDidChangeCursorPosition_closure))
      TextEditor_onDidChangeCursorPosition_closure.name = "TextEditor_onDidChangeCursorPosition_closure";
    $desc = $collectedClasses$.TextEditor_onDidChangeCursorPosition_closure[1];
    TextEditor_onDidChangeCursorPosition_closure.prototype = $desc;
    TextEditor_onDidChangeCursorPosition_closure.$__fields__ = [];
    function TextEditor_onDidAddGutter_closure() {
      this.$deferredAction();
    }
    TextEditor_onDidAddGutter_closure.builtin$cls = "TextEditor_onDidAddGutter_closure";
    if (!("name" in TextEditor_onDidAddGutter_closure))
      TextEditor_onDidAddGutter_closure.name = "TextEditor_onDidAddGutter_closure";
    $desc = $collectedClasses$.TextEditor_onDidAddGutter_closure[1];
    TextEditor_onDidAddGutter_closure.prototype = $desc;
    TextEditor_onDidAddGutter_closure.$__fields__ = [];
    function promiseToFuture_closure(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    promiseToFuture_closure.builtin$cls = "promiseToFuture_closure";
    if (!("name" in promiseToFuture_closure))
      promiseToFuture_closure.name = "promiseToFuture_closure";
    $desc = $collectedClasses$.promiseToFuture_closure[1];
    promiseToFuture_closure.prototype = $desc;
    promiseToFuture_closure.$__fields__ = ["completer"];
    function promiseToFuture_closure0(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    promiseToFuture_closure0.builtin$cls = "promiseToFuture_closure0";
    if (!("name" in promiseToFuture_closure0))
      promiseToFuture_closure0.name = "promiseToFuture_closure0";
    $desc = $collectedClasses$.promiseToFuture_closure0[1];
    promiseToFuture_closure0.prototype = $desc;
    promiseToFuture_closure0.$__fields__ = ["completer"];
    function ProxyHolder(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    ProxyHolder.builtin$cls = "ProxyHolder";
    if (!("name" in ProxyHolder))
      ProxyHolder.name = "ProxyHolder";
    $desc = $collectedClasses$.ProxyHolder[1];
    ProxyHolder.prototype = $desc;
    ProxyHolder.$__fields__ = ["obj"];
    ProxyHolder.prototype.get$obj = function() {
      return this.obj;
    };
    function ProxyHolder_eventStream_closure(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    ProxyHolder_eventStream_closure.builtin$cls = "ProxyHolder_eventStream_closure";
    if (!("name" in ProxyHolder_eventStream_closure))
      ProxyHolder_eventStream_closure.name = "ProxyHolder_eventStream_closure";
    $desc = $collectedClasses$.ProxyHolder_eventStream_closure[1];
    ProxyHolder_eventStream_closure.prototype = $desc;
    ProxyHolder_eventStream_closure.$__fields__ = ["_box_0"];
    function ProxyHolder_eventStream_closure0(controller) {
      this.controller = controller;
      this.$deferredAction();
    }
    ProxyHolder_eventStream_closure0.builtin$cls = "ProxyHolder_eventStream_closure0";
    if (!("name" in ProxyHolder_eventStream_closure0))
      ProxyHolder_eventStream_closure0.name = "ProxyHolder_eventStream_closure0";
    $desc = $collectedClasses$.ProxyHolder_eventStream_closure0[1];
    ProxyHolder_eventStream_closure0.prototype = $desc;
    ProxyHolder_eventStream_closure0.$__fields__ = ["controller"];
    function JsDisposable(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    JsDisposable.builtin$cls = "JsDisposable";
    if (!("name" in JsDisposable))
      JsDisposable.name = "JsDisposable";
    $desc = $collectedClasses$.JsDisposable[1];
    JsDisposable.prototype = $desc;
    JsDisposable.$__fields__ = ["obj"];
    function Promise(obj, $ti) {
      this.obj = obj;
      this.$ti = $ti;
      this.$deferredAction();
    }
    Promise.builtin$cls = "Promise";
    if (!("name" in Promise))
      Promise.name = "Promise";
    $desc = $collectedClasses$.Promise[1];
    Promise.prototype = $desc;
    Promise.$__fields__ = ["obj"];
    function Promise__jsObjectFromFuture_closure(future) {
      this.future = future;
      this.$deferredAction();
    }
    Promise__jsObjectFromFuture_closure.builtin$cls = "Promise__jsObjectFromFuture_closure";
    if (!("name" in Promise__jsObjectFromFuture_closure))
      Promise__jsObjectFromFuture_closure.name = "Promise__jsObjectFromFuture_closure";
    $desc = $collectedClasses$.Promise__jsObjectFromFuture_closure[1];
    Promise__jsObjectFromFuture_closure.prototype = $desc;
    Promise__jsObjectFromFuture_closure.$__fields__ = ["future"];
    function Promise__jsObjectFromFuture__closure(resolve) {
      this.resolve = resolve;
      this.$deferredAction();
    }
    Promise__jsObjectFromFuture__closure.builtin$cls = "Promise__jsObjectFromFuture__closure";
    if (!("name" in Promise__jsObjectFromFuture__closure))
      Promise__jsObjectFromFuture__closure.name = "Promise__jsObjectFromFuture__closure";
    $desc = $collectedClasses$.Promise__jsObjectFromFuture__closure[1];
    Promise__jsObjectFromFuture__closure.prototype = $desc;
    Promise__jsObjectFromFuture__closure.$__fields__ = ["resolve"];
    function Promise__jsObjectFromFuture__closure0(reject) {
      this.reject = reject;
      this.$deferredAction();
    }
    Promise__jsObjectFromFuture__closure0.builtin$cls = "Promise__jsObjectFromFuture__closure0";
    if (!("name" in Promise__jsObjectFromFuture__closure0))
      Promise__jsObjectFromFuture__closure0.name = "Promise__jsObjectFromFuture__closure0";
    $desc = $collectedClasses$.Promise__jsObjectFromFuture__closure0[1];
    Promise__jsObjectFromFuture__closure0.prototype = $desc;
    Promise__jsObjectFromFuture__closure0.$__fields__ = ["reject"];
    function FutureSerializer(_operations, _completers, $ti) {
      this._operations = _operations;
      this._completers = _completers;
      this.$ti = $ti;
      this.$deferredAction();
    }
    FutureSerializer.builtin$cls = "FutureSerializer";
    if (!("name" in FutureSerializer))
      FutureSerializer.name = "FutureSerializer";
    $desc = $collectedClasses$.FutureSerializer[1];
    FutureSerializer.prototype = $desc;
    FutureSerializer.$__fields__ = ["_operations", "_completers"];
    function FutureSerializer__serviceQueue_closure(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    FutureSerializer__serviceQueue_closure.builtin$cls = "FutureSerializer__serviceQueue_closure";
    if (!("name" in FutureSerializer__serviceQueue_closure))
      FutureSerializer__serviceQueue_closure.name = "FutureSerializer__serviceQueue_closure";
    $desc = $collectedClasses$.FutureSerializer__serviceQueue_closure[1];
    FutureSerializer__serviceQueue_closure.prototype = $desc;
    FutureSerializer__serviceQueue_closure.$__fields__ = ["completer"];
    function FutureSerializer__serviceQueue_closure0(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    FutureSerializer__serviceQueue_closure0.builtin$cls = "FutureSerializer__serviceQueue_closure0";
    if (!("name" in FutureSerializer__serviceQueue_closure0))
      FutureSerializer__serviceQueue_closure0.name = "FutureSerializer__serviceQueue_closure0";
    $desc = $collectedClasses$.FutureSerializer__serviceQueue_closure0[1];
    FutureSerializer__serviceQueue_closure0.prototype = $desc;
    FutureSerializer__serviceQueue_closure0.$__fields__ = ["completer"];
    function FutureSerializer__serviceQueue_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FutureSerializer__serviceQueue_closure1.builtin$cls = "FutureSerializer__serviceQueue_closure1";
    if (!("name" in FutureSerializer__serviceQueue_closure1))
      FutureSerializer__serviceQueue_closure1.name = "FutureSerializer__serviceQueue_closure1";
    $desc = $collectedClasses$.FutureSerializer__serviceQueue_closure1[1];
    FutureSerializer__serviceQueue_closure1.prototype = $desc;
    FutureSerializer__serviceQueue_closure1.$__fields__ = ["$this"];
    function Dependencies(_instances) {
      this._instances = _instances;
      this.$deferredAction();
    }
    Dependencies.builtin$cls = "Dependencies";
    if (!("name" in Dependencies))
      Dependencies.name = "Dependencies";
    $desc = $collectedClasses$.Dependencies[1];
    Dependencies.prototype = $desc;
    Dependencies.$__fields__ = ["_instances"];
    function Disposable() {
      this.$deferredAction();
    }
    Disposable.builtin$cls = "Disposable";
    if (!("name" in Disposable))
      Disposable.name = "Disposable";
    $desc = $collectedClasses$.Disposable[1];
    Disposable.prototype = $desc;
    Disposable.$__fields__ = [];
    function Disposables(catchExceptions, _disposables) {
      this.catchExceptions = catchExceptions;
      this._disposables = _disposables;
      this.$deferredAction();
    }
    Disposables.builtin$cls = "Disposables";
    if (!("name" in Disposables))
      Disposables.name = "Disposables";
    $desc = $collectedClasses$.Disposables[1];
    Disposables.prototype = $desc;
    Disposables.$__fields__ = ["catchExceptions", "_disposables"];
    function EventListener(obj, eventName, _callback) {
      this.obj = obj;
      this.eventName = eventName;
      this._callback = _callback;
      this.$deferredAction();
    }
    EventListener.builtin$cls = "EventListener";
    if (!("name" in EventListener))
      EventListener.name = "EventListener";
    $desc = $collectedClasses$.EventListener[1];
    EventListener.prototype = $desc;
    EventListener.$__fields__ = ["obj", "eventName", "_callback"];
    EventListener.prototype.get$obj = function() {
      return this.obj;
    };
    function EventListener_closure(fn) {
      this.fn = fn;
      this.$deferredAction();
    }
    EventListener_closure.builtin$cls = "EventListener_closure";
    if (!("name" in EventListener_closure))
      EventListener_closure.name = "EventListener_closure";
    $desc = $collectedClasses$.EventListener_closure[1];
    EventListener_closure.prototype = $desc;
    EventListener_closure.$__fields__ = ["fn"];
    function StreamSubscriptions(catchExceptions, _subscriptions) {
      this.catchExceptions = catchExceptions;
      this._subscriptions = _subscriptions;
      this.$deferredAction();
    }
    StreamSubscriptions.builtin$cls = "StreamSubscriptions";
    if (!("name" in StreamSubscriptions))
      StreamSubscriptions.name = "StreamSubscriptions";
    $desc = $collectedClasses$.StreamSubscriptions[1];
    StreamSubscriptions.prototype = $desc;
    StreamSubscriptions.$__fields__ = ["catchExceptions", "_subscriptions"];
    function Edit(offset, length, replacement) {
      this.offset = offset;
      this.length = length;
      this.replacement = replacement;
      this.$deferredAction();
    }
    Edit.builtin$cls = "Edit";
    if (!("name" in Edit))
      Edit.name = "Edit";
    $desc = $collectedClasses$.Edit[1];
    Edit.prototype = $desc;
    Edit.$__fields__ = ["offset", "length", "replacement"];
    Edit.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    Edit.prototype.get$length = function(receiver) {
      return this.length;
    };
    Edit.prototype.get$replacement = function() {
      return this.replacement;
    };
    function AnalysisOptionsManager(disposables) {
      this.disposables = disposables;
      this.$deferredAction();
    }
    AnalysisOptionsManager.builtin$cls = "AnalysisOptionsManager";
    if (!("name" in AnalysisOptionsManager))
      AnalysisOptionsManager.name = "AnalysisOptionsManager";
    $desc = $collectedClasses$.AnalysisOptionsManager[1];
    AnalysisOptionsManager.prototype = $desc;
    AnalysisOptionsManager.$__fields__ = ["disposables"];
    function Server() {
      this.$deferredAction();
    }
    Server.builtin$cls = "Server";
    if (!("name" in Server))
      Server.name = "Server";
    $desc = $collectedClasses$.Server[1];
    Server.prototype = $desc;
    Server.$__fields__ = [];
    function Domain(server, name) {
      this.server = server;
      this.name = name;
      this.$deferredAction();
    }
    Domain.builtin$cls = "Domain";
    if (!("name" in Domain))
      Domain.name = "Domain";
    $desc = $collectedClasses$.Domain[1];
    Domain.prototype = $desc;
    Domain.$__fields__ = ["server", "name"];
    Domain.prototype.get$server = function() {
      return this.server;
    };
    Domain.prototype.get$name = function(receiver) {
      return this.name;
    };
    function RefactoringOptions() {
      this.$deferredAction();
    }
    RefactoringOptions.builtin$cls = "RefactoringOptions";
    if (!("name" in RefactoringOptions))
      RefactoringOptions.name = "RefactoringOptions";
    $desc = $collectedClasses$.RefactoringOptions[1];
    RefactoringOptions.prototype = $desc;
    RefactoringOptions.$__fields__ = [];
    function RequestError(method, code, message, stackTrace) {
      this.method = method;
      this.code = code;
      this.message = message;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    RequestError.builtin$cls = "RequestError";
    if (!("name" in RequestError))
      RequestError.name = "RequestError";
    $desc = $collectedClasses$.RequestError[1];
    RequestError.prototype = $desc;
    RequestError.$__fields__ = ["method", "code", "message", "stackTrace"];
    RequestError.prototype.get$code = function(receiver) {
      return this.code;
    };
    RequestError.prototype.get$message = function(receiver) {
      return this.message;
    };
    RequestError.prototype.get$stackTrace = function() {
      return this.stackTrace;
    };
    function ServerDomain(server, name, _controllers, _streams) {
      this.server = server;
      this.name = name;
      this._controllers = _controllers;
      this._streams = _streams;
      this.$deferredAction();
    }
    ServerDomain.builtin$cls = "ServerDomain";
    if (!("name" in ServerDomain))
      ServerDomain.name = "ServerDomain";
    $desc = $collectedClasses$.ServerDomain[1];
    ServerDomain.prototype = $desc;
    ServerDomain.$__fields__ = ["server", "name", "_controllers", "_streams"];
    function ServerError(isFatal, message, stackTrace) {
      this.isFatal = isFatal;
      this.message = message;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    ServerError.builtin$cls = "ServerError";
    if (!("name" in ServerError))
      ServerError.name = "ServerError";
    $desc = $collectedClasses$.ServerError[1];
    ServerError.prototype = $desc;
    ServerError.$__fields__ = ["isFatal", "message", "stackTrace"];
    ServerError.prototype.get$isFatal = function() {
      return this.isFatal;
    };
    ServerError.prototype.get$message = function(receiver) {
      return this.message;
    };
    ServerError.prototype.get$stackTrace = function() {
      return this.stackTrace;
    };
    function ServerStatus(analysis, pub) {
      this.analysis = analysis;
      this.pub = pub;
      this.$deferredAction();
    }
    ServerStatus.builtin$cls = "ServerStatus";
    if (!("name" in ServerStatus))
      ServerStatus.name = "ServerStatus";
    $desc = $collectedClasses$.ServerStatus[1];
    ServerStatus.prototype = $desc;
    ServerStatus.$__fields__ = ["analysis", "pub"];
    ServerStatus.prototype.get$analysis = function() {
      return this.analysis;
    };
    function VersionResult(version) {
      this.version = version;
      this.$deferredAction();
    }
    VersionResult.builtin$cls = "VersionResult";
    if (!("name" in VersionResult))
      VersionResult.name = "VersionResult";
    $desc = $collectedClasses$.VersionResult[1];
    VersionResult.prototype = $desc;
    VersionResult.$__fields__ = ["version"];
    VersionResult.prototype.get$version = function(receiver) {
      return this.version;
    };
    function AnalysisDomain(server, name, _controllers, _streams) {
      this.server = server;
      this.name = name;
      this._controllers = _controllers;
      this._streams = _streams;
      this.$deferredAction();
    }
    AnalysisDomain.builtin$cls = "AnalysisDomain";
    if (!("name" in AnalysisDomain))
      AnalysisDomain.name = "AnalysisDomain";
    $desc = $collectedClasses$.AnalysisDomain[1];
    AnalysisDomain.prototype = $desc;
    AnalysisDomain.$__fields__ = ["server", "name", "_controllers", "_streams"];
    function AnalysisErrors(file, errors) {
      this.file = file;
      this.errors = errors;
      this.$deferredAction();
    }
    AnalysisErrors.builtin$cls = "AnalysisErrors";
    if (!("name" in AnalysisErrors))
      AnalysisErrors.name = "AnalysisErrors";
    $desc = $collectedClasses$.AnalysisErrors[1];
    AnalysisErrors.prototype = $desc;
    AnalysisErrors.$__fields__ = ["file", "errors"];
    AnalysisErrors.prototype.get$file = function(receiver) {
      return this.file;
    };
    AnalysisErrors.prototype.get$errors = function() {
      return this.errors;
    };
    function AnalysisErrors_parse_closure() {
      this.$deferredAction();
    }
    AnalysisErrors_parse_closure.builtin$cls = "AnalysisErrors_parse_closure";
    if (!("name" in AnalysisErrors_parse_closure))
      AnalysisErrors_parse_closure.name = "AnalysisErrors_parse_closure";
    $desc = $collectedClasses$.AnalysisErrors_parse_closure[1];
    AnalysisErrors_parse_closure.prototype = $desc;
    AnalysisErrors_parse_closure.$__fields__ = [];
    function AnalysisFlushResults(files) {
      this.files = files;
      this.$deferredAction();
    }
    AnalysisFlushResults.builtin$cls = "AnalysisFlushResults";
    if (!("name" in AnalysisFlushResults))
      AnalysisFlushResults.name = "AnalysisFlushResults";
    $desc = $collectedClasses$.AnalysisFlushResults[1];
    AnalysisFlushResults.prototype = $desc;
    AnalysisFlushResults.$__fields__ = ["files"];
    AnalysisFlushResults.prototype.get$files = function(receiver) {
      return this.files;
    };
    function AnalysisNavigation(file, regions, targets, files) {
      this.file = file;
      this.regions = regions;
      this.targets = targets;
      this.files = files;
      this.$deferredAction();
    }
    AnalysisNavigation.builtin$cls = "AnalysisNavigation";
    if (!("name" in AnalysisNavigation))
      AnalysisNavigation.name = "AnalysisNavigation";
    $desc = $collectedClasses$.AnalysisNavigation[1];
    AnalysisNavigation.prototype = $desc;
    AnalysisNavigation.$__fields__ = ["file", "regions", "targets", "files"];
    AnalysisNavigation.prototype.get$file = function(receiver) {
      return this.file;
    };
    AnalysisNavigation.prototype.get$regions = function(receiver) {
      return this.regions;
    };
    AnalysisNavigation.prototype.get$targets = function() {
      return this.targets;
    };
    AnalysisNavigation.prototype.get$files = function(receiver) {
      return this.files;
    };
    function AnalysisNavigation_parse_closure() {
      this.$deferredAction();
    }
    AnalysisNavigation_parse_closure.builtin$cls = "AnalysisNavigation_parse_closure";
    if (!("name" in AnalysisNavigation_parse_closure))
      AnalysisNavigation_parse_closure.name = "AnalysisNavigation_parse_closure";
    $desc = $collectedClasses$.AnalysisNavigation_parse_closure[1];
    AnalysisNavigation_parse_closure.prototype = $desc;
    AnalysisNavigation_parse_closure.$__fields__ = [];
    function AnalysisNavigation_parse_closure0() {
      this.$deferredAction();
    }
    AnalysisNavigation_parse_closure0.builtin$cls = "AnalysisNavigation_parse_closure0";
    if (!("name" in AnalysisNavigation_parse_closure0))
      AnalysisNavigation_parse_closure0.name = "AnalysisNavigation_parse_closure0";
    $desc = $collectedClasses$.AnalysisNavigation_parse_closure0[1];
    AnalysisNavigation_parse_closure0.prototype = $desc;
    AnalysisNavigation_parse_closure0.$__fields__ = [];
    function AnalysisOutline(file, kind, outline, libraryName) {
      this.file = file;
      this.kind = kind;
      this.outline = outline;
      this.libraryName = libraryName;
      this.$deferredAction();
    }
    AnalysisOutline.builtin$cls = "AnalysisOutline";
    if (!("name" in AnalysisOutline))
      AnalysisOutline.name = "AnalysisOutline";
    $desc = $collectedClasses$.AnalysisOutline[1];
    AnalysisOutline.prototype = $desc;
    AnalysisOutline.$__fields__ = ["file", "kind", "outline", "libraryName"];
    AnalysisOutline.prototype.get$file = function(receiver) {
      return this.file;
    };
    AnalysisOutline.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    AnalysisOutline.prototype.get$outline = function(receiver) {
      return this.outline;
    };
    AnalysisOutline.prototype.get$libraryName = function() {
      return this.libraryName;
    };
    function HoverResult(hovers) {
      this.hovers = hovers;
      this.$deferredAction();
    }
    HoverResult.builtin$cls = "HoverResult";
    if (!("name" in HoverResult))
      HoverResult.name = "HoverResult";
    $desc = $collectedClasses$.HoverResult[1];
    HoverResult.prototype = $desc;
    HoverResult.$__fields__ = ["hovers"];
    HoverResult.prototype.get$hovers = function() {
      return this.hovers;
    };
    function HoverResult_parse_closure() {
      this.$deferredAction();
    }
    HoverResult_parse_closure.builtin$cls = "HoverResult_parse_closure";
    if (!("name" in HoverResult_parse_closure))
      HoverResult_parse_closure.name = "HoverResult_parse_closure";
    $desc = $collectedClasses$.HoverResult_parse_closure[1];
    HoverResult_parse_closure.prototype = $desc;
    HoverResult_parse_closure.$__fields__ = [];
    function CompletionDomain(server, name, _controllers, _streams) {
      this.server = server;
      this.name = name;
      this._controllers = _controllers;
      this._streams = _streams;
      this.$deferredAction();
    }
    CompletionDomain.builtin$cls = "CompletionDomain";
    if (!("name" in CompletionDomain))
      CompletionDomain.name = "CompletionDomain";
    $desc = $collectedClasses$.CompletionDomain[1];
    CompletionDomain.prototype = $desc;
    CompletionDomain.$__fields__ = ["server", "name", "_controllers", "_streams"];
    function CompletionResults(id, replacementOffset, replacementLength, results, isLast) {
      this.id = id;
      this.replacementOffset = replacementOffset;
      this.replacementLength = replacementLength;
      this.results = results;
      this.isLast = isLast;
      this.$deferredAction();
    }
    CompletionResults.builtin$cls = "CompletionResults";
    if (!("name" in CompletionResults))
      CompletionResults.name = "CompletionResults";
    $desc = $collectedClasses$.CompletionResults[1];
    CompletionResults.prototype = $desc;
    CompletionResults.$__fields__ = ["id", "replacementOffset", "replacementLength", "results", "isLast"];
    CompletionResults.prototype.get$id = function(receiver) {
      return this.id;
    };
    CompletionResults.prototype.get$replacementOffset = function() {
      return this.replacementOffset;
    };
    CompletionResults.prototype.get$results = function(receiver) {
      return this.results;
    };
    CompletionResults.prototype.get$isLast = function() {
      return this.isLast;
    };
    function CompletionResults_parse_closure() {
      this.$deferredAction();
    }
    CompletionResults_parse_closure.builtin$cls = "CompletionResults_parse_closure";
    if (!("name" in CompletionResults_parse_closure))
      CompletionResults_parse_closure.name = "CompletionResults_parse_closure";
    $desc = $collectedClasses$.CompletionResults_parse_closure[1];
    CompletionResults_parse_closure.prototype = $desc;
    CompletionResults_parse_closure.$__fields__ = [];
    function SuggestionsResult(id) {
      this.id = id;
      this.$deferredAction();
    }
    SuggestionsResult.builtin$cls = "SuggestionsResult";
    if (!("name" in SuggestionsResult))
      SuggestionsResult.name = "SuggestionsResult";
    $desc = $collectedClasses$.SuggestionsResult[1];
    SuggestionsResult.prototype = $desc;
    SuggestionsResult.$__fields__ = ["id"];
    SuggestionsResult.prototype.get$id = function(receiver) {
      return this.id;
    };
    function SearchDomain(server, name, _controllers, _streams) {
      this.server = server;
      this.name = name;
      this._controllers = _controllers;
      this._streams = _streams;
      this.$deferredAction();
    }
    SearchDomain.builtin$cls = "SearchDomain";
    if (!("name" in SearchDomain))
      SearchDomain.name = "SearchDomain";
    $desc = $collectedClasses$.SearchDomain[1];
    SearchDomain.prototype = $desc;
    SearchDomain.$__fields__ = ["server", "name", "_controllers", "_streams"];
    function SearchResults(id, results, isLast) {
      this.id = id;
      this.results = results;
      this.isLast = isLast;
      this.$deferredAction();
    }
    SearchResults.builtin$cls = "SearchResults";
    if (!("name" in SearchResults))
      SearchResults.name = "SearchResults";
    $desc = $collectedClasses$.SearchResults[1];
    SearchResults.prototype = $desc;
    SearchResults.$__fields__ = ["id", "results", "isLast"];
    SearchResults.prototype.get$id = function(receiver) {
      return this.id;
    };
    SearchResults.prototype.get$results = function(receiver) {
      return this.results;
    };
    SearchResults.prototype.get$isLast = function() {
      return this.isLast;
    };
    function SearchResults_parse_closure() {
      this.$deferredAction();
    }
    SearchResults_parse_closure.builtin$cls = "SearchResults_parse_closure";
    if (!("name" in SearchResults_parse_closure))
      SearchResults_parse_closure.name = "SearchResults_parse_closure";
    $desc = $collectedClasses$.SearchResults_parse_closure[1];
    SearchResults_parse_closure.prototype = $desc;
    SearchResults_parse_closure.$__fields__ = [];
    function FindElementReferencesResult(id, element) {
      this.id = id;
      this.element = element;
      this.$deferredAction();
    }
    FindElementReferencesResult.builtin$cls = "FindElementReferencesResult";
    if (!("name" in FindElementReferencesResult))
      FindElementReferencesResult.name = "FindElementReferencesResult";
    $desc = $collectedClasses$.FindElementReferencesResult[1];
    FindElementReferencesResult.prototype = $desc;
    FindElementReferencesResult.$__fields__ = ["id", "element"];
    FindElementReferencesResult.prototype.get$id = function(receiver) {
      return this.id;
    };
    FindElementReferencesResult.prototype.get$element = function() {
      return this.element;
    };
    function FindTopLevelDeclarationsResult(id) {
      this.id = id;
      this.$deferredAction();
    }
    FindTopLevelDeclarationsResult.builtin$cls = "FindTopLevelDeclarationsResult";
    if (!("name" in FindTopLevelDeclarationsResult))
      FindTopLevelDeclarationsResult.name = "FindTopLevelDeclarationsResult";
    $desc = $collectedClasses$.FindTopLevelDeclarationsResult[1];
    FindTopLevelDeclarationsResult.prototype = $desc;
    FindTopLevelDeclarationsResult.$__fields__ = ["id"];
    FindTopLevelDeclarationsResult.prototype.get$id = function(receiver) {
      return this.id;
    };
    function TypeHierarchyResult(hierarchyItems) {
      this.hierarchyItems = hierarchyItems;
      this.$deferredAction();
    }
    TypeHierarchyResult.builtin$cls = "TypeHierarchyResult";
    if (!("name" in TypeHierarchyResult))
      TypeHierarchyResult.name = "TypeHierarchyResult";
    $desc = $collectedClasses$.TypeHierarchyResult[1];
    TypeHierarchyResult.prototype = $desc;
    TypeHierarchyResult.$__fields__ = ["hierarchyItems"];
    TypeHierarchyResult.prototype.get$hierarchyItems = function() {
      return this.hierarchyItems;
    };
    function TypeHierarchyResult_parse_closure() {
      this.$deferredAction();
    }
    TypeHierarchyResult_parse_closure.builtin$cls = "TypeHierarchyResult_parse_closure";
    if (!("name" in TypeHierarchyResult_parse_closure))
      TypeHierarchyResult_parse_closure.name = "TypeHierarchyResult_parse_closure";
    $desc = $collectedClasses$.TypeHierarchyResult_parse_closure[1];
    TypeHierarchyResult_parse_closure.prototype = $desc;
    TypeHierarchyResult_parse_closure.$__fields__ = [];
    function EditDomain(server, name, _controllers, _streams) {
      this.server = server;
      this.name = name;
      this._controllers = _controllers;
      this._streams = _streams;
      this.$deferredAction();
    }
    EditDomain.builtin$cls = "EditDomain";
    if (!("name" in EditDomain))
      EditDomain.name = "EditDomain";
    $desc = $collectedClasses$.EditDomain[1];
    EditDomain.prototype = $desc;
    EditDomain.$__fields__ = ["server", "name", "_controllers", "_streams"];
    function FormatResult(edits, selectionOffset, selectionLength) {
      this.edits = edits;
      this.selectionOffset = selectionOffset;
      this.selectionLength = selectionLength;
      this.$deferredAction();
    }
    FormatResult.builtin$cls = "FormatResult";
    if (!("name" in FormatResult))
      FormatResult.name = "FormatResult";
    $desc = $collectedClasses$.FormatResult[1];
    FormatResult.prototype = $desc;
    FormatResult.$__fields__ = ["edits", "selectionOffset", "selectionLength"];
    FormatResult.prototype.get$edits = function() {
      return this.edits;
    };
    FormatResult.prototype.get$selectionOffset = function() {
      return this.selectionOffset;
    };
    FormatResult.prototype.get$selectionLength = function() {
      return this.selectionLength;
    };
    function FormatResult_parse_closure() {
      this.$deferredAction();
    }
    FormatResult_parse_closure.builtin$cls = "FormatResult_parse_closure";
    if (!("name" in FormatResult_parse_closure))
      FormatResult_parse_closure.name = "FormatResult_parse_closure";
    $desc = $collectedClasses$.FormatResult_parse_closure[1];
    FormatResult_parse_closure.prototype = $desc;
    FormatResult_parse_closure.$__fields__ = [];
    function AssistsResult(assists) {
      this.assists = assists;
      this.$deferredAction();
    }
    AssistsResult.builtin$cls = "AssistsResult";
    if (!("name" in AssistsResult))
      AssistsResult.name = "AssistsResult";
    $desc = $collectedClasses$.AssistsResult[1];
    AssistsResult.prototype = $desc;
    AssistsResult.$__fields__ = ["assists"];
    AssistsResult.prototype.get$assists = function() {
      return this.assists;
    };
    function AssistsResult_parse_closure() {
      this.$deferredAction();
    }
    AssistsResult_parse_closure.builtin$cls = "AssistsResult_parse_closure";
    if (!("name" in AssistsResult_parse_closure))
      AssistsResult_parse_closure.name = "AssistsResult_parse_closure";
    $desc = $collectedClasses$.AssistsResult_parse_closure[1];
    AssistsResult_parse_closure.prototype = $desc;
    AssistsResult_parse_closure.$__fields__ = [];
    function AvailableRefactoringsResult(kinds) {
      this.kinds = kinds;
      this.$deferredAction();
    }
    AvailableRefactoringsResult.builtin$cls = "AvailableRefactoringsResult";
    if (!("name" in AvailableRefactoringsResult))
      AvailableRefactoringsResult.name = "AvailableRefactoringsResult";
    $desc = $collectedClasses$.AvailableRefactoringsResult[1];
    AvailableRefactoringsResult.prototype = $desc;
    AvailableRefactoringsResult.$__fields__ = ["kinds"];
    AvailableRefactoringsResult.prototype.get$kinds = function(receiver) {
      return this.kinds;
    };
    function FixesResult(fixes) {
      this.fixes = fixes;
      this.$deferredAction();
    }
    FixesResult.builtin$cls = "FixesResult";
    if (!("name" in FixesResult))
      FixesResult.name = "FixesResult";
    $desc = $collectedClasses$.FixesResult[1];
    FixesResult.prototype = $desc;
    FixesResult.$__fields__ = ["fixes"];
    FixesResult.prototype.get$fixes = function() {
      return this.fixes;
    };
    function FixesResult_parse_closure() {
      this.$deferredAction();
    }
    FixesResult_parse_closure.builtin$cls = "FixesResult_parse_closure";
    if (!("name" in FixesResult_parse_closure))
      FixesResult_parse_closure.name = "FixesResult_parse_closure";
    $desc = $collectedClasses$.FixesResult_parse_closure[1];
    FixesResult_parse_closure.prototype = $desc;
    FixesResult_parse_closure.$__fields__ = [];
    function RefactoringResult(initialProblems, optionsProblems, finalProblems, feedback, change, potentialEdits) {
      this.initialProblems = initialProblems;
      this.optionsProblems = optionsProblems;
      this.finalProblems = finalProblems;
      this.feedback = feedback;
      this.change = change;
      this.potentialEdits = potentialEdits;
      this.$deferredAction();
    }
    RefactoringResult.builtin$cls = "RefactoringResult";
    if (!("name" in RefactoringResult))
      RefactoringResult.name = "RefactoringResult";
    $desc = $collectedClasses$.RefactoringResult[1];
    RefactoringResult.prototype = $desc;
    RefactoringResult.$__fields__ = ["initialProblems", "optionsProblems", "finalProblems", "feedback", "change", "potentialEdits"];
    RefactoringResult.prototype.get$initialProblems = function() {
      return this.initialProblems;
    };
    RefactoringResult.prototype.get$change = function() {
      return this.change;
    };
    function RefactoringResult_parse_closure() {
      this.$deferredAction();
    }
    RefactoringResult_parse_closure.builtin$cls = "RefactoringResult_parse_closure";
    if (!("name" in RefactoringResult_parse_closure))
      RefactoringResult_parse_closure.name = "RefactoringResult_parse_closure";
    $desc = $collectedClasses$.RefactoringResult_parse_closure[1];
    RefactoringResult_parse_closure.prototype = $desc;
    RefactoringResult_parse_closure.$__fields__ = [];
    function RefactoringResult_parse_closure0() {
      this.$deferredAction();
    }
    RefactoringResult_parse_closure0.builtin$cls = "RefactoringResult_parse_closure0";
    if (!("name" in RefactoringResult_parse_closure0))
      RefactoringResult_parse_closure0.name = "RefactoringResult_parse_closure0";
    $desc = $collectedClasses$.RefactoringResult_parse_closure0[1];
    RefactoringResult_parse_closure0.prototype = $desc;
    RefactoringResult_parse_closure0.$__fields__ = [];
    function RefactoringResult_parse_closure1() {
      this.$deferredAction();
    }
    RefactoringResult_parse_closure1.builtin$cls = "RefactoringResult_parse_closure1";
    if (!("name" in RefactoringResult_parse_closure1))
      RefactoringResult_parse_closure1.name = "RefactoringResult_parse_closure1";
    $desc = $collectedClasses$.RefactoringResult_parse_closure1[1];
    RefactoringResult_parse_closure1.prototype = $desc;
    RefactoringResult_parse_closure1.$__fields__ = [];
    function SortMembersResult(edit) {
      this.edit = edit;
      this.$deferredAction();
    }
    SortMembersResult.builtin$cls = "SortMembersResult";
    if (!("name" in SortMembersResult))
      SortMembersResult.name = "SortMembersResult";
    $desc = $collectedClasses$.SortMembersResult[1];
    SortMembersResult.prototype = $desc;
    SortMembersResult.$__fields__ = ["edit"];
    SortMembersResult.prototype.get$edit = function() {
      return this.edit;
    };
    function OrganizeDirectivesResult(edit) {
      this.edit = edit;
      this.$deferredAction();
    }
    OrganizeDirectivesResult.builtin$cls = "OrganizeDirectivesResult";
    if (!("name" in OrganizeDirectivesResult))
      OrganizeDirectivesResult.name = "OrganizeDirectivesResult";
    $desc = $collectedClasses$.OrganizeDirectivesResult[1];
    OrganizeDirectivesResult.prototype = $desc;
    OrganizeDirectivesResult.$__fields__ = ["edit"];
    OrganizeDirectivesResult.prototype.get$edit = function() {
      return this.edit;
    };
    function ExecutionDomain(server, name, _controllers, _streams) {
      this.server = server;
      this.name = name;
      this._controllers = _controllers;
      this._streams = _streams;
      this.$deferredAction();
    }
    ExecutionDomain.builtin$cls = "ExecutionDomain";
    if (!("name" in ExecutionDomain))
      ExecutionDomain.name = "ExecutionDomain";
    $desc = $collectedClasses$.ExecutionDomain[1];
    ExecutionDomain.prototype = $desc;
    ExecutionDomain.$__fields__ = ["server", "name", "_controllers", "_streams"];
    function CreateContextResult(id) {
      this.id = id;
      this.$deferredAction();
    }
    CreateContextResult.builtin$cls = "CreateContextResult";
    if (!("name" in CreateContextResult))
      CreateContextResult.name = "CreateContextResult";
    $desc = $collectedClasses$.CreateContextResult[1];
    CreateContextResult.prototype = $desc;
    CreateContextResult.$__fields__ = ["id"];
    CreateContextResult.prototype.get$id = function(receiver) {
      return this.id;
    };
    function MapUriResult(file, uri) {
      this.file = file;
      this.uri = uri;
      this.$deferredAction();
    }
    MapUriResult.builtin$cls = "MapUriResult";
    if (!("name" in MapUriResult))
      MapUriResult.name = "MapUriResult";
    $desc = $collectedClasses$.MapUriResult[1];
    MapUriResult.prototype = $desc;
    MapUriResult.$__fields__ = ["file", "uri"];
    MapUriResult.prototype.get$file = function(receiver) {
      return this.file;
    };
    MapUriResult.prototype.get$uri = function() {
      return this.uri;
    };
    function DiagnosticDomain(server, name, _controllers, _streams) {
      this.server = server;
      this.name = name;
      this._controllers = _controllers;
      this._streams = _streams;
      this.$deferredAction();
    }
    DiagnosticDomain.builtin$cls = "DiagnosticDomain";
    if (!("name" in DiagnosticDomain))
      DiagnosticDomain.name = "DiagnosticDomain";
    $desc = $collectedClasses$.DiagnosticDomain[1];
    DiagnosticDomain.prototype = $desc;
    DiagnosticDomain.$__fields__ = ["server", "name", "_controllers", "_streams"];
    function DiagnosticsResult(contexts) {
      this.contexts = contexts;
      this.$deferredAction();
    }
    DiagnosticsResult.builtin$cls = "DiagnosticsResult";
    if (!("name" in DiagnosticsResult))
      DiagnosticsResult.name = "DiagnosticsResult";
    $desc = $collectedClasses$.DiagnosticsResult[1];
    DiagnosticsResult.prototype = $desc;
    DiagnosticsResult.$__fields__ = ["contexts"];
    DiagnosticsResult.prototype.get$contexts = function() {
      return this.contexts;
    };
    function DiagnosticsResult_parse_closure() {
      this.$deferredAction();
    }
    DiagnosticsResult_parse_closure.builtin$cls = "DiagnosticsResult_parse_closure";
    if (!("name" in DiagnosticsResult_parse_closure))
      DiagnosticsResult_parse_closure.name = "DiagnosticsResult_parse_closure";
    $desc = $collectedClasses$.DiagnosticsResult_parse_closure[1];
    DiagnosticsResult_parse_closure.prototype = $desc;
    DiagnosticsResult_parse_closure.$__fields__ = [];
    function AddContentOverlay(type, content) {
      this.type = type;
      this.content = content;
      this.$deferredAction();
    }
    AddContentOverlay.builtin$cls = "AddContentOverlay";
    if (!("name" in AddContentOverlay))
      AddContentOverlay.name = "AddContentOverlay";
    $desc = $collectedClasses$.AddContentOverlay[1];
    AddContentOverlay.prototype = $desc;
    AddContentOverlay.$__fields__ = ["type", "content"];
    AddContentOverlay.prototype.get$type = function(receiver) {
      return this.type;
    };
    AddContentOverlay.prototype.get$content = function(receiver) {
      return this.content;
    };
    function AnalysisError(severity, type, location, message, code, correction, hasFix) {
      this.severity = severity;
      this.type = type;
      this.location = location;
      this.message = message;
      this.code = code;
      this.correction = correction;
      this.hasFix = hasFix;
      this.$deferredAction();
    }
    AnalysisError.builtin$cls = "AnalysisError";
    if (!("name" in AnalysisError))
      AnalysisError.name = "AnalysisError";
    $desc = $collectedClasses$.AnalysisError[1];
    AnalysisError.prototype = $desc;
    AnalysisError.$__fields__ = ["severity", "type", "location", "message", "code", "correction", "hasFix"];
    AnalysisError.prototype.get$severity = function() {
      return this.severity;
    };
    AnalysisError.prototype.get$type = function(receiver) {
      return this.type;
    };
    AnalysisError.prototype.get$location = function(receiver) {
      return this.location;
    };
    AnalysisError.prototype.get$message = function(receiver) {
      return this.message;
    };
    AnalysisError.prototype.get$code = function(receiver) {
      return this.code;
    };
    AnalysisError.prototype.get$hasFix = function() {
      return this.hasFix;
    };
    function AnalysisErrorFixes(error, fixes) {
      this.error = error;
      this.fixes = fixes;
      this.$deferredAction();
    }
    AnalysisErrorFixes.builtin$cls = "AnalysisErrorFixes";
    if (!("name" in AnalysisErrorFixes))
      AnalysisErrorFixes.name = "AnalysisErrorFixes";
    $desc = $collectedClasses$.AnalysisErrorFixes[1];
    AnalysisErrorFixes.prototype = $desc;
    AnalysisErrorFixes.$__fields__ = ["error", "fixes"];
    AnalysisErrorFixes.prototype.get$error = function(receiver) {
      return this.error;
    };
    AnalysisErrorFixes.prototype.get$fixes = function() {
      return this.fixes;
    };
    function AnalysisErrorFixes_parse_closure() {
      this.$deferredAction();
    }
    AnalysisErrorFixes_parse_closure.builtin$cls = "AnalysisErrorFixes_parse_closure";
    if (!("name" in AnalysisErrorFixes_parse_closure))
      AnalysisErrorFixes_parse_closure.name = "AnalysisErrorFixes_parse_closure";
    $desc = $collectedClasses$.AnalysisErrorFixes_parse_closure[1];
    AnalysisErrorFixes_parse_closure.prototype = $desc;
    AnalysisErrorFixes_parse_closure.$__fields__ = [];
    function AnalysisOptions(enableAsync, enableDeferredLoading, enableEnums, enableNullAwareOperators, enableSuperMixins, generateDart2jsHints, generateHints, generateLints) {
      this.enableAsync = enableAsync;
      this.enableDeferredLoading = enableDeferredLoading;
      this.enableEnums = enableEnums;
      this.enableNullAwareOperators = enableNullAwareOperators;
      this.enableSuperMixins = enableSuperMixins;
      this.generateDart2jsHints = generateDart2jsHints;
      this.generateHints = generateHints;
      this.generateLints = generateLints;
      this.$deferredAction();
    }
    AnalysisOptions.builtin$cls = "AnalysisOptions";
    if (!("name" in AnalysisOptions))
      AnalysisOptions.name = "AnalysisOptions";
    $desc = $collectedClasses$.AnalysisOptions[1];
    AnalysisOptions.prototype = $desc;
    AnalysisOptions.$__fields__ = ["enableAsync", "enableDeferredLoading", "enableEnums", "enableNullAwareOperators", "enableSuperMixins", "generateDart2jsHints", "generateHints", "generateLints"];
    function AnalysisStatus(isAnalyzing, analysisTarget) {
      this.isAnalyzing = isAnalyzing;
      this.analysisTarget = analysisTarget;
      this.$deferredAction();
    }
    AnalysisStatus.builtin$cls = "AnalysisStatus";
    if (!("name" in AnalysisStatus))
      AnalysisStatus.name = "AnalysisStatus";
    $desc = $collectedClasses$.AnalysisStatus[1];
    AnalysisStatus.prototype = $desc;
    AnalysisStatus.$__fields__ = ["isAnalyzing", "analysisTarget"];
    AnalysisStatus.prototype.get$isAnalyzing = function() {
      return this.isAnalyzing;
    };
    function ChangeContentOverlay(type, edits) {
      this.type = type;
      this.edits = edits;
      this.$deferredAction();
    }
    ChangeContentOverlay.builtin$cls = "ChangeContentOverlay";
    if (!("name" in ChangeContentOverlay))
      ChangeContentOverlay.name = "ChangeContentOverlay";
    $desc = $collectedClasses$.ChangeContentOverlay[1];
    ChangeContentOverlay.prototype = $desc;
    ChangeContentOverlay.$__fields__ = ["type", "edits"];
    ChangeContentOverlay.prototype.get$type = function(receiver) {
      return this.type;
    };
    ChangeContentOverlay.prototype.get$edits = function() {
      return this.edits;
    };
    function CompletionSuggestion(kind, relevance, completion, selectionOffset, selectionLength, isDeprecated, isPotential, docSummary, docComplete, declaringType, element, returnType, parameterNames, parameterTypes, requiredParameterCount, hasNamedParameters, parameterName, parameterType, importUri) {
      this.kind = kind;
      this.relevance = relevance;
      this.completion = completion;
      this.selectionOffset = selectionOffset;
      this.selectionLength = selectionLength;
      this.isDeprecated = isDeprecated;
      this.isPotential = isPotential;
      this.docSummary = docSummary;
      this.docComplete = docComplete;
      this.declaringType = declaringType;
      this.element = element;
      this.returnType = returnType;
      this.parameterNames = parameterNames;
      this.parameterTypes = parameterTypes;
      this.requiredParameterCount = requiredParameterCount;
      this.hasNamedParameters = hasNamedParameters;
      this.parameterName = parameterName;
      this.parameterType = parameterType;
      this.importUri = importUri;
      this.$deferredAction();
    }
    CompletionSuggestion.builtin$cls = "CompletionSuggestion";
    if (!("name" in CompletionSuggestion))
      CompletionSuggestion.name = "CompletionSuggestion";
    $desc = $collectedClasses$.CompletionSuggestion[1];
    CompletionSuggestion.prototype = $desc;
    CompletionSuggestion.$__fields__ = ["kind", "relevance", "completion", "selectionOffset", "selectionLength", "isDeprecated", "isPotential", "docSummary", "docComplete", "declaringType", "element", "returnType", "parameterNames", "parameterTypes", "requiredParameterCount", "hasNamedParameters", "parameterName", "parameterType", "importUri"];
    CompletionSuggestion.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    CompletionSuggestion.prototype.get$completion = function() {
      return this.completion;
    };
    CompletionSuggestion.prototype.get$selectionOffset = function() {
      return this.selectionOffset;
    };
    CompletionSuggestion.prototype.get$selectionLength = function() {
      return this.selectionLength;
    };
    CompletionSuggestion.prototype.get$isDeprecated = function() {
      return this.isDeprecated;
    };
    CompletionSuggestion.prototype.get$isPotential = function() {
      return this.isPotential;
    };
    CompletionSuggestion.prototype.get$docSummary = function() {
      return this.docSummary;
    };
    CompletionSuggestion.prototype.get$declaringType = function() {
      return this.declaringType;
    };
    CompletionSuggestion.prototype.get$element = function() {
      return this.element;
    };
    CompletionSuggestion.prototype.get$returnType = function() {
      return this.returnType;
    };
    CompletionSuggestion.prototype.get$parameterNames = function() {
      return this.parameterNames;
    };
    CompletionSuggestion.prototype.get$requiredParameterCount = function() {
      return this.requiredParameterCount;
    };
    CompletionSuggestion.prototype.get$parameterType = function() {
      return this.parameterType;
    };
    CompletionSuggestion.prototype.get$importUri = function() {
      return this.importUri;
    };
    function ContextData(name, explicitFileCount, implicitFileCount, workItemQueueLength, cacheEntryExceptions) {
      this.name = name;
      this.explicitFileCount = explicitFileCount;
      this.implicitFileCount = implicitFileCount;
      this.workItemQueueLength = workItemQueueLength;
      this.cacheEntryExceptions = cacheEntryExceptions;
      this.$deferredAction();
    }
    ContextData.builtin$cls = "ContextData";
    if (!("name" in ContextData))
      ContextData.name = "ContextData";
    $desc = $collectedClasses$.ContextData[1];
    ContextData.prototype = $desc;
    ContextData.$__fields__ = ["name", "explicitFileCount", "implicitFileCount", "workItemQueueLength", "cacheEntryExceptions"];
    ContextData.prototype.get$name = function(receiver) {
      return this.name;
    };
    ContextData.prototype.get$explicitFileCount = function() {
      return this.explicitFileCount;
    };
    ContextData.prototype.get$implicitFileCount = function() {
      return this.implicitFileCount;
    };
    ContextData.prototype.get$workItemQueueLength = function() {
      return this.workItemQueueLength;
    };
    function Element0(kind, name, flags, location, parameters, returnType, typeParameters) {
      this.kind = kind;
      this.name = name;
      this.flags = flags;
      this.location = location;
      this.parameters = parameters;
      this.returnType = returnType;
      this.typeParameters = typeParameters;
      this.$deferredAction();
    }
    Element0.builtin$cls = "Element0";
    if (!("name" in Element0))
      Element0.name = "Element0";
    $desc = $collectedClasses$.Element0[1];
    Element0.prototype = $desc;
    Element0.$__fields__ = ["kind", "name", "flags", "location", "parameters", "returnType", "typeParameters"];
    Element0.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    Element0.prototype.get$name = function(receiver) {
      return this.name;
    };
    Element0.prototype.get$flags = function() {
      return this.flags;
    };
    Element0.prototype.get$location = function(receiver) {
      return this.location;
    };
    Element0.prototype.get$parameters = function() {
      return this.parameters;
    };
    Element0.prototype.get$returnType = function() {
      return this.returnType;
    };
    Element0.prototype.get$typeParameters = function() {
      return this.typeParameters;
    };
    function HoverInformation(offset, length, containingLibraryPath, containingLibraryName, containingClassDescription, dartdoc, elementDescription, elementKind, isDeprecated, parameter, propagatedType, staticType) {
      this.offset = offset;
      this.length = length;
      this.containingLibraryPath = containingLibraryPath;
      this.containingLibraryName = containingLibraryName;
      this.containingClassDescription = containingClassDescription;
      this.dartdoc = dartdoc;
      this.elementDescription = elementDescription;
      this.elementKind = elementKind;
      this.isDeprecated = isDeprecated;
      this.parameter = parameter;
      this.propagatedType = propagatedType;
      this.staticType = staticType;
      this.$deferredAction();
    }
    HoverInformation.builtin$cls = "HoverInformation";
    if (!("name" in HoverInformation))
      HoverInformation.name = "HoverInformation";
    $desc = $collectedClasses$.HoverInformation[1];
    HoverInformation.prototype = $desc;
    HoverInformation.$__fields__ = ["offset", "length", "containingLibraryPath", "containingLibraryName", "containingClassDescription", "dartdoc", "elementDescription", "elementKind", "isDeprecated", "parameter", "propagatedType", "staticType"];
    HoverInformation.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    HoverInformation.prototype.get$length = function(receiver) {
      return this.length;
    };
    HoverInformation.prototype.get$containingLibraryPath = function() {
      return this.containingLibraryPath;
    };
    HoverInformation.prototype.get$containingLibraryName = function() {
      return this.containingLibraryName;
    };
    HoverInformation.prototype.get$containingClassDescription = function() {
      return this.containingClassDescription;
    };
    HoverInformation.prototype.get$dartdoc = function() {
      return this.dartdoc;
    };
    HoverInformation.prototype.get$elementDescription = function() {
      return this.elementDescription;
    };
    HoverInformation.prototype.get$elementKind = function() {
      return this.elementKind;
    };
    HoverInformation.prototype.get$isDeprecated = function() {
      return this.isDeprecated;
    };
    HoverInformation.prototype.get$propagatedType = function() {
      return this.propagatedType;
    };
    HoverInformation.prototype.get$staticType = function() {
      return this.staticType;
    };
    function LinkedEditGroup(positions, length, suggestions) {
      this.positions = positions;
      this.length = length;
      this.suggestions = suggestions;
      this.$deferredAction();
    }
    LinkedEditGroup.builtin$cls = "LinkedEditGroup";
    if (!("name" in LinkedEditGroup))
      LinkedEditGroup.name = "LinkedEditGroup";
    $desc = $collectedClasses$.LinkedEditGroup[1];
    LinkedEditGroup.prototype = $desc;
    LinkedEditGroup.$__fields__ = ["positions", "length", "suggestions"];
    LinkedEditGroup.prototype.get$positions = function() {
      return this.positions;
    };
    LinkedEditGroup.prototype.get$length = function(receiver) {
      return this.length;
    };
    function LinkedEditGroup_parse_closure() {
      this.$deferredAction();
    }
    LinkedEditGroup_parse_closure.builtin$cls = "LinkedEditGroup_parse_closure";
    if (!("name" in LinkedEditGroup_parse_closure))
      LinkedEditGroup_parse_closure.name = "LinkedEditGroup_parse_closure";
    $desc = $collectedClasses$.LinkedEditGroup_parse_closure[1];
    LinkedEditGroup_parse_closure.prototype = $desc;
    LinkedEditGroup_parse_closure.$__fields__ = [];
    function LinkedEditGroup_parse_closure0() {
      this.$deferredAction();
    }
    LinkedEditGroup_parse_closure0.builtin$cls = "LinkedEditGroup_parse_closure0";
    if (!("name" in LinkedEditGroup_parse_closure0))
      LinkedEditGroup_parse_closure0.name = "LinkedEditGroup_parse_closure0";
    $desc = $collectedClasses$.LinkedEditGroup_parse_closure0[1];
    LinkedEditGroup_parse_closure0.prototype = $desc;
    LinkedEditGroup_parse_closure0.$__fields__ = [];
    function LinkedEditSuggestion(value, kind) {
      this.value = value;
      this.kind = kind;
      this.$deferredAction();
    }
    LinkedEditSuggestion.builtin$cls = "LinkedEditSuggestion";
    if (!("name" in LinkedEditSuggestion))
      LinkedEditSuggestion.name = "LinkedEditSuggestion";
    $desc = $collectedClasses$.LinkedEditSuggestion[1];
    LinkedEditSuggestion.prototype = $desc;
    LinkedEditSuggestion.$__fields__ = ["value", "kind"];
    LinkedEditSuggestion.prototype.get$value = function(receiver) {
      return this.value;
    };
    LinkedEditSuggestion.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    function Location(file, offset, length, startLine, startColumn) {
      this.file = file;
      this.offset = offset;
      this.length = length;
      this.startLine = startLine;
      this.startColumn = startColumn;
      this.$deferredAction();
    }
    Location.builtin$cls = "Location";
    if (!("name" in Location))
      Location.name = "Location";
    $desc = $collectedClasses$.Location[1];
    Location.prototype = $desc;
    Location.$__fields__ = ["file", "offset", "length", "startLine", "startColumn"];
    Location.prototype.get$file = function(receiver) {
      return this.file;
    };
    Location.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    Location.prototype.get$length = function(receiver) {
      return this.length;
    };
    Location.prototype.get$startLine = function() {
      return this.startLine;
    };
    Location.prototype.get$startColumn = function() {
      return this.startColumn;
    };
    function NavigationRegion(offset, length, targets) {
      this.offset = offset;
      this.length = length;
      this.targets = targets;
      this.$deferredAction();
    }
    NavigationRegion.builtin$cls = "NavigationRegion";
    if (!("name" in NavigationRegion))
      NavigationRegion.name = "NavigationRegion";
    $desc = $collectedClasses$.NavigationRegion[1];
    NavigationRegion.prototype = $desc;
    NavigationRegion.$__fields__ = ["offset", "length", "targets"];
    NavigationRegion.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    NavigationRegion.prototype.get$length = function(receiver) {
      return this.length;
    };
    NavigationRegion.prototype.get$targets = function() {
      return this.targets;
    };
    function NavigationTarget(kind, fileIndex, offset, length, startLine, startColumn) {
      this.kind = kind;
      this.fileIndex = fileIndex;
      this.offset = offset;
      this.length = length;
      this.startLine = startLine;
      this.startColumn = startColumn;
      this.$deferredAction();
    }
    NavigationTarget.builtin$cls = "NavigationTarget";
    if (!("name" in NavigationTarget))
      NavigationTarget.name = "NavigationTarget";
    $desc = $collectedClasses$.NavigationTarget[1];
    NavigationTarget.prototype = $desc;
    NavigationTarget.$__fields__ = ["kind", "fileIndex", "offset", "length", "startLine", "startColumn"];
    NavigationTarget.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    NavigationTarget.prototype.get$fileIndex = function() {
      return this.fileIndex;
    };
    NavigationTarget.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    NavigationTarget.prototype.get$length = function(receiver) {
      return this.length;
    };
    NavigationTarget.prototype.get$startLine = function() {
      return this.startLine;
    };
    NavigationTarget.prototype.get$startColumn = function() {
      return this.startColumn;
    };
    function Outline(element, offset, length, children) {
      this.element = element;
      this.offset = offset;
      this.length = length;
      this.children = children;
      this.$deferredAction();
    }
    Outline.builtin$cls = "Outline";
    if (!("name" in Outline))
      Outline.name = "Outline";
    $desc = $collectedClasses$.Outline[1];
    Outline.prototype = $desc;
    Outline.$__fields__ = ["element", "offset", "length", "children"];
    Outline.prototype.get$element = function() {
      return this.element;
    };
    Outline.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    Outline.prototype.get$length = function(receiver) {
      return this.length;
    };
    Outline.prototype.get$children = function(receiver) {
      return this.children;
    };
    function Outline_parse_closure() {
      this.$deferredAction();
    }
    Outline_parse_closure.builtin$cls = "Outline_parse_closure";
    if (!("name" in Outline_parse_closure))
      Outline_parse_closure.name = "Outline_parse_closure";
    $desc = $collectedClasses$.Outline_parse_closure[1];
    Outline_parse_closure.prototype = $desc;
    Outline_parse_closure.$__fields__ = [];
    function Position(file, offset) {
      this.file = file;
      this.offset = offset;
      this.$deferredAction();
    }
    Position.builtin$cls = "Position";
    if (!("name" in Position))
      Position.name = "Position";
    $desc = $collectedClasses$.Position[1];
    Position.prototype = $desc;
    Position.$__fields__ = ["file", "offset"];
    Position.prototype.get$file = function(receiver) {
      return this.file;
    };
    Position.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    function PubStatus(isListingPackageDirs) {
      this.isListingPackageDirs = isListingPackageDirs;
      this.$deferredAction();
    }
    PubStatus.builtin$cls = "PubStatus";
    if (!("name" in PubStatus))
      PubStatus.name = "PubStatus";
    $desc = $collectedClasses$.PubStatus[1];
    PubStatus.prototype = $desc;
    PubStatus.$__fields__ = ["isListingPackageDirs"];
    function RefactoringProblem(severity, message, location) {
      this.severity = severity;
      this.message = message;
      this.location = location;
      this.$deferredAction();
    }
    RefactoringProblem.builtin$cls = "RefactoringProblem";
    if (!("name" in RefactoringProblem))
      RefactoringProblem.name = "RefactoringProblem";
    $desc = $collectedClasses$.RefactoringProblem[1];
    RefactoringProblem.prototype = $desc;
    RefactoringProblem.$__fields__ = ["severity", "message", "location"];
    RefactoringProblem.prototype.get$severity = function() {
      return this.severity;
    };
    RefactoringProblem.prototype.get$message = function(receiver) {
      return this.message;
    };
    RefactoringProblem.prototype.get$location = function(receiver) {
      return this.location;
    };
    function RemoveContentOverlay(type) {
      this.type = type;
      this.$deferredAction();
    }
    RemoveContentOverlay.builtin$cls = "RemoveContentOverlay";
    if (!("name" in RemoveContentOverlay))
      RemoveContentOverlay.name = "RemoveContentOverlay";
    $desc = $collectedClasses$.RemoveContentOverlay[1];
    RemoveContentOverlay.prototype = $desc;
    RemoveContentOverlay.$__fields__ = ["type"];
    RemoveContentOverlay.prototype.get$type = function(receiver) {
      return this.type;
    };
    function SearchResult(location, kind, isPotential, path) {
      this.location = location;
      this.kind = kind;
      this.isPotential = isPotential;
      this.path = path;
      this.$deferredAction();
    }
    SearchResult.builtin$cls = "SearchResult";
    if (!("name" in SearchResult))
      SearchResult.name = "SearchResult";
    $desc = $collectedClasses$.SearchResult[1];
    SearchResult.prototype = $desc;
    SearchResult.$__fields__ = ["location", "kind", "isPotential", "path"];
    SearchResult.prototype.get$location = function(receiver) {
      return this.location;
    };
    SearchResult.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    SearchResult.prototype.get$isPotential = function() {
      return this.isPotential;
    };
    SearchResult.prototype.get$path = function(receiver) {
      return this.path;
    };
    function SearchResult_parse_closure() {
      this.$deferredAction();
    }
    SearchResult_parse_closure.builtin$cls = "SearchResult_parse_closure";
    if (!("name" in SearchResult_parse_closure))
      SearchResult_parse_closure.name = "SearchResult_parse_closure";
    $desc = $collectedClasses$.SearchResult_parse_closure[1];
    SearchResult_parse_closure.prototype = $desc;
    SearchResult_parse_closure.$__fields__ = [];
    function SourceChange(message, edits, linkedEditGroups, selection) {
      this.message = message;
      this.edits = edits;
      this.linkedEditGroups = linkedEditGroups;
      this.selection = selection;
      this.$deferredAction();
    }
    SourceChange.builtin$cls = "SourceChange";
    if (!("name" in SourceChange))
      SourceChange.name = "SourceChange";
    $desc = $collectedClasses$.SourceChange[1];
    SourceChange.prototype = $desc;
    SourceChange.$__fields__ = ["message", "edits", "linkedEditGroups", "selection"];
    SourceChange.prototype.get$message = function(receiver) {
      return this.message;
    };
    SourceChange.prototype.get$edits = function() {
      return this.edits;
    };
    SourceChange.prototype.get$linkedEditGroups = function() {
      return this.linkedEditGroups;
    };
    function SourceChange_parse_closure() {
      this.$deferredAction();
    }
    SourceChange_parse_closure.builtin$cls = "SourceChange_parse_closure";
    if (!("name" in SourceChange_parse_closure))
      SourceChange_parse_closure.name = "SourceChange_parse_closure";
    $desc = $collectedClasses$.SourceChange_parse_closure[1];
    SourceChange_parse_closure.prototype = $desc;
    SourceChange_parse_closure.$__fields__ = [];
    function SourceChange_parse_closure0() {
      this.$deferredAction();
    }
    SourceChange_parse_closure0.builtin$cls = "SourceChange_parse_closure0";
    if (!("name" in SourceChange_parse_closure0))
      SourceChange_parse_closure0.name = "SourceChange_parse_closure0";
    $desc = $collectedClasses$.SourceChange_parse_closure0[1];
    SourceChange_parse_closure0.prototype = $desc;
    SourceChange_parse_closure0.$__fields__ = [];
    function SourceEdit(offset, length, replacement, id) {
      this.offset = offset;
      this.length = length;
      this.replacement = replacement;
      this.id = id;
      this.$deferredAction();
    }
    SourceEdit.builtin$cls = "SourceEdit";
    if (!("name" in SourceEdit))
      SourceEdit.name = "SourceEdit";
    $desc = $collectedClasses$.SourceEdit[1];
    SourceEdit.prototype = $desc;
    SourceEdit.$__fields__ = ["offset", "length", "replacement", "id"];
    SourceEdit.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    SourceEdit.prototype.get$length = function(receiver) {
      return this.length;
    };
    SourceEdit.prototype.get$replacement = function() {
      return this.replacement;
    };
    SourceEdit.prototype.get$id = function(receiver) {
      return this.id;
    };
    function SourceFileEdit(file, fileStamp, edits) {
      this.file = file;
      this.fileStamp = fileStamp;
      this.edits = edits;
      this.$deferredAction();
    }
    SourceFileEdit.builtin$cls = "SourceFileEdit";
    if (!("name" in SourceFileEdit))
      SourceFileEdit.name = "SourceFileEdit";
    $desc = $collectedClasses$.SourceFileEdit[1];
    SourceFileEdit.prototype = $desc;
    SourceFileEdit.$__fields__ = ["file", "fileStamp", "edits"];
    SourceFileEdit.prototype.get$file = function(receiver) {
      return this.file;
    };
    SourceFileEdit.prototype.get$edits = function() {
      return this.edits;
    };
    function SourceFileEdit_parse_closure() {
      this.$deferredAction();
    }
    SourceFileEdit_parse_closure.builtin$cls = "SourceFileEdit_parse_closure";
    if (!("name" in SourceFileEdit_parse_closure))
      SourceFileEdit_parse_closure.name = "SourceFileEdit_parse_closure";
    $desc = $collectedClasses$.SourceFileEdit_parse_closure[1];
    SourceFileEdit_parse_closure.prototype = $desc;
    SourceFileEdit_parse_closure.$__fields__ = [];
    function TypeHierarchyItem(classElement, interfaces, mixins, subclasses, displayName, memberElement, superclass) {
      this.classElement = classElement;
      this.interfaces = interfaces;
      this.mixins = mixins;
      this.subclasses = subclasses;
      this.displayName = displayName;
      this.memberElement = memberElement;
      this.superclass = superclass;
      this.$deferredAction();
    }
    TypeHierarchyItem.builtin$cls = "TypeHierarchyItem";
    if (!("name" in TypeHierarchyItem))
      TypeHierarchyItem.name = "TypeHierarchyItem";
    $desc = $collectedClasses$.TypeHierarchyItem[1];
    TypeHierarchyItem.prototype = $desc;
    TypeHierarchyItem.$__fields__ = ["classElement", "interfaces", "mixins", "subclasses", "displayName", "memberElement", "superclass"];
    TypeHierarchyItem.prototype.get$classElement = function() {
      return this.classElement;
    };
    TypeHierarchyItem.prototype.get$interfaces = function() {
      return this.interfaces;
    };
    TypeHierarchyItem.prototype.get$mixins = function() {
      return this.mixins;
    };
    TypeHierarchyItem.prototype.get$subclasses = function() {
      return this.subclasses;
    };
    TypeHierarchyItem.prototype.get$displayName = function() {
      return this.displayName;
    };
    TypeHierarchyItem.prototype.get$superclass = function() {
      return this.superclass;
    };
    function ExtractLocalVariableRefactoringOptions(name, extractAll) {
      this.name = name;
      this.extractAll = extractAll;
      this.$deferredAction();
    }
    ExtractLocalVariableRefactoringOptions.builtin$cls = "ExtractLocalVariableRefactoringOptions";
    if (!("name" in ExtractLocalVariableRefactoringOptions))
      ExtractLocalVariableRefactoringOptions.name = "ExtractLocalVariableRefactoringOptions";
    $desc = $collectedClasses$.ExtractLocalVariableRefactoringOptions[1];
    ExtractLocalVariableRefactoringOptions.prototype = $desc;
    ExtractLocalVariableRefactoringOptions.$__fields__ = ["name", "extractAll"];
    ExtractLocalVariableRefactoringOptions.prototype.get$name = function(receiver) {
      return this.name;
    };
    function RenameRefactoringOptions(newName) {
      this.newName = newName;
      this.$deferredAction();
    }
    RenameRefactoringOptions.builtin$cls = "RenameRefactoringOptions";
    if (!("name" in RenameRefactoringOptions))
      RenameRefactoringOptions.name = "RenameRefactoringOptions";
    $desc = $collectedClasses$.RenameRefactoringOptions[1];
    RenameRefactoringOptions.prototype = $desc;
    RenameRefactoringOptions.$__fields__ = ["newName"];
    function RefactoringFeedback(_m) {
      this._m = _m;
      this.$deferredAction();
    }
    RefactoringFeedback.builtin$cls = "RefactoringFeedback";
    if (!("name" in RefactoringFeedback))
      RefactoringFeedback.name = "RefactoringFeedback";
    $desc = $collectedClasses$.RefactoringFeedback[1];
    RefactoringFeedback.prototype = $desc;
    RefactoringFeedback.$__fields__ = ["_m"];
    function BufferObserverManager(observers, disposables, overlayManager) {
      this.observers = observers;
      this.disposables = disposables;
      this.overlayManager = overlayManager;
      this.$deferredAction();
    }
    BufferObserverManager.builtin$cls = "BufferObserverManager";
    if (!("name" in BufferObserverManager))
      BufferObserverManager.name = "BufferObserverManager";
    $desc = $collectedClasses$.BufferObserverManager[1];
    BufferObserverManager.prototype = $desc;
    BufferObserverManager.$__fields__ = ["observers", "disposables", "overlayManager"];
    function BufferObserverManager_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    BufferObserverManager_closure.builtin$cls = "BufferObserverManager_closure";
    if (!("name" in BufferObserverManager_closure))
      BufferObserverManager_closure.name = "BufferObserverManager_closure";
    $desc = $collectedClasses$.BufferObserverManager_closure[1];
    BufferObserverManager_closure.prototype = $desc;
    BufferObserverManager_closure.$__fields__ = ["$this"];
    function BufferObserverManager__closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    BufferObserverManager__closure.builtin$cls = "BufferObserverManager__closure";
    if (!("name" in BufferObserverManager__closure))
      BufferObserverManager__closure.name = "BufferObserverManager__closure";
    $desc = $collectedClasses$.BufferObserverManager__closure[1];
    BufferObserverManager__closure.prototype = $desc;
    BufferObserverManager__closure.$__fields__ = ["$this"];
    function BufferObserverManager_dispose_closure() {
      this.$deferredAction();
    }
    BufferObserverManager_dispose_closure.builtin$cls = "BufferObserverManager_dispose_closure";
    if (!("name" in BufferObserverManager_dispose_closure))
      BufferObserverManager_dispose_closure.name = "BufferObserverManager_dispose_closure";
    $desc = $collectedClasses$.BufferObserverManager_dispose_closure[1];
    BufferObserverManager_dispose_closure.prototype = $desc;
    BufferObserverManager_dispose_closure.$__fields__ = [];
    function BufferObserver(editor) {
      this.editor = editor;
      this.$deferredAction();
    }
    BufferObserver.builtin$cls = "BufferObserver";
    if (!("name" in BufferObserver))
      BufferObserver.name = "BufferObserver";
    $desc = $collectedClasses$.BufferObserver[1];
    BufferObserver.prototype = $desc;
    BufferObserver.$__fields__ = ["editor"];
    BufferObserver.prototype.get$editor = function() {
      return this.editor;
    };
    function BufferFormatter(_buffer_observer$_subs, isFormatting, manager, editor, catchExceptions, _disposables) {
      this._buffer_observer$_subs = _buffer_observer$_subs;
      this.isFormatting = isFormatting;
      this.manager = manager;
      this.editor = editor;
      this.catchExceptions = catchExceptions;
      this._disposables = _disposables;
      this.$deferredAction();
    }
    BufferFormatter.builtin$cls = "BufferFormatter";
    if (!("name" in BufferFormatter))
      BufferFormatter.name = "BufferFormatter";
    $desc = $collectedClasses$.BufferFormatter[1];
    BufferFormatter.prototype = $desc;
    BufferFormatter.$__fields__ = ["_buffer_observer$_subs", "isFormatting", "manager", "editor", "catchExceptions", "_disposables"];
    function BufferFormatter_closure($this, editor) {
      this.$this = $this;
      this.editor = editor;
      this.$deferredAction();
    }
    BufferFormatter_closure.builtin$cls = "BufferFormatter_closure";
    if (!("name" in BufferFormatter_closure))
      BufferFormatter_closure.name = "BufferFormatter_closure";
    $desc = $collectedClasses$.BufferFormatter_closure[1];
    BufferFormatter_closure.prototype = $desc;
    BufferFormatter_closure.$__fields__ = ["$this", "editor"];
    function BufferFormatter__closure($this, editor) {
      this.$this = $this;
      this.editor = editor;
      this.$deferredAction();
    }
    BufferFormatter__closure.builtin$cls = "BufferFormatter__closure";
    if (!("name" in BufferFormatter__closure))
      BufferFormatter__closure.name = "BufferFormatter__closure";
    $desc = $collectedClasses$.BufferFormatter__closure[1];
    BufferFormatter__closure.prototype = $desc;
    BufferFormatter__closure.$__fields__ = ["$this", "editor"];
    function BufferFormatter___closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    BufferFormatter___closure.builtin$cls = "BufferFormatter___closure";
    if (!("name" in BufferFormatter___closure))
      BufferFormatter___closure.name = "BufferFormatter___closure";
    $desc = $collectedClasses$.BufferFormatter___closure[1];
    BufferFormatter___closure.prototype = $desc;
    BufferFormatter___closure.$__fields__ = ["$this"];
    function BufferFormatter_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    BufferFormatter_closure0.builtin$cls = "BufferFormatter_closure0";
    if (!("name" in BufferFormatter_closure0))
      BufferFormatter_closure0.name = "BufferFormatter_closure0";
    $desc = $collectedClasses$.BufferFormatter_closure0[1];
    BufferFormatter_closure0.prototype = $desc;
    BufferFormatter_closure0.$__fields__ = ["$this"];
    function BufferUpdater(_buffer_observer$_subs, path, manager, editor, catchExceptions, _disposables) {
      this._buffer_observer$_subs = _buffer_observer$_subs;
      this.path = path;
      this.manager = manager;
      this.editor = editor;
      this.catchExceptions = catchExceptions;
      this._disposables = _disposables;
      this.$deferredAction();
    }
    BufferUpdater.builtin$cls = "BufferUpdater";
    if (!("name" in BufferUpdater))
      BufferUpdater.name = "BufferUpdater";
    $desc = $collectedClasses$.BufferUpdater[1];
    BufferUpdater.prototype = $desc;
    BufferUpdater.$__fields__ = ["_buffer_observer$_subs", "path", "manager", "editor", "catchExceptions", "_disposables"];
    BufferUpdater.prototype.get$path = function(receiver) {
      return this.path;
    };
    function OverlayManager(overlays, sub) {
      this.overlays = overlays;
      this.sub = sub;
      this.$deferredAction();
    }
    OverlayManager.builtin$cls = "OverlayManager";
    if (!("name" in OverlayManager))
      OverlayManager.name = "OverlayManager";
    $desc = $collectedClasses$.OverlayManager[1];
    OverlayManager.prototype = $desc;
    OverlayManager.$__fields__ = ["overlays", "sub"];
    function OverlayManager__serverActive_closure(toSend) {
      this.toSend = toSend;
      this.$deferredAction();
    }
    OverlayManager__serverActive_closure.builtin$cls = "OverlayManager__serverActive_closure";
    if (!("name" in OverlayManager__serverActive_closure))
      OverlayManager__serverActive_closure.name = "OverlayManager__serverActive_closure";
    $desc = $collectedClasses$.OverlayManager__serverActive_closure[1];
    OverlayManager__serverActive_closure.prototype = $desc;
    OverlayManager__serverActive_closure.$__fields__ = ["toSend"];
    function OverlayInfo(path, lastSent, toSend, count, _buffer_observer$_timer) {
      this.path = path;
      this.lastSent = lastSent;
      this.toSend = toSend;
      this.count = count;
      this._buffer_observer$_timer = _buffer_observer$_timer;
      this.$deferredAction();
    }
    OverlayInfo.builtin$cls = "OverlayInfo";
    if (!("name" in OverlayInfo))
      OverlayInfo.name = "OverlayInfo";
    $desc = $collectedClasses$.OverlayInfo[1];
    OverlayInfo.prototype = $desc;
    OverlayInfo.$__fields__ = ["path", "lastSent", "toSend", "count", "_buffer_observer$_timer"];
    OverlayInfo.prototype.get$path = function(receiver) {
      return this.path;
    };
    OverlayInfo.prototype.get$toSend = function() {
      return this.toSend;
    };
    function OverlayInfo__flush_closure(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    OverlayInfo__flush_closure.builtin$cls = "OverlayInfo__flush_closure";
    if (!("name" in OverlayInfo__flush_closure))
      OverlayInfo__flush_closure.name = "OverlayInfo__flush_closure";
    $desc = $collectedClasses$.OverlayInfo__flush_closure[1];
    OverlayInfo__flush_closure.prototype = $desc;
    OverlayInfo__flush_closure.$__fields__ = ["_box_0"];
    function _log_closure() {
      this.$deferredAction();
    }
    _log_closure.builtin$cls = "_log_closure";
    if (!("name" in _log_closure))
      _log_closure.name = "_log_closure";
    $desc = $collectedClasses$._log_closure[1];
    _log_closure.prototype = $desc;
    _log_closure.$__fields__ = [];
    function DartAutocompleteProvider(selector, disableForSelector, inclusionPriority, excludeLowerPriority, filterSuggestions) {
      this.selector = selector;
      this.disableForSelector = disableForSelector;
      this.inclusionPriority = inclusionPriority;
      this.excludeLowerPriority = excludeLowerPriority;
      this.filterSuggestions = filterSuggestions;
      this.$deferredAction();
    }
    DartAutocompleteProvider.builtin$cls = "DartAutocompleteProvider";
    if (!("name" in DartAutocompleteProvider))
      DartAutocompleteProvider.name = "DartAutocompleteProvider";
    $desc = $collectedClasses$.DartAutocompleteProvider[1];
    DartAutocompleteProvider.prototype = $desc;
    DartAutocompleteProvider.$__fields__ = ["selector", "disableForSelector", "inclusionPriority", "excludeLowerPriority", "filterSuggestions"];
    function DartAutocompleteProvider_getSuggestions_closure() {
      this.$deferredAction();
    }
    DartAutocompleteProvider_getSuggestions_closure.builtin$cls = "DartAutocompleteProvider_getSuggestions_closure";
    if (!("name" in DartAutocompleteProvider_getSuggestions_closure))
      DartAutocompleteProvider_getSuggestions_closure.name = "DartAutocompleteProvider_getSuggestions_closure";
    $desc = $collectedClasses$.DartAutocompleteProvider_getSuggestions_closure[1];
    DartAutocompleteProvider_getSuggestions_closure.prototype = $desc;
    DartAutocompleteProvider_getSuggestions_closure.$__fields__ = [];
    function DartAutocompleteProvider_getSuggestions_closure1(result) {
      this.result = result;
      this.$deferredAction();
    }
    DartAutocompleteProvider_getSuggestions_closure1.builtin$cls = "DartAutocompleteProvider_getSuggestions_closure1";
    if (!("name" in DartAutocompleteProvider_getSuggestions_closure1))
      DartAutocompleteProvider_getSuggestions_closure1.name = "DartAutocompleteProvider_getSuggestions_closure1";
    $desc = $collectedClasses$.DartAutocompleteProvider_getSuggestions_closure1[1];
    DartAutocompleteProvider_getSuggestions_closure1.prototype = $desc;
    DartAutocompleteProvider_getSuggestions_closure1.$__fields__ = ["result"];
    function DartAutocompleteProvider_getSuggestions_closure0() {
      this.$deferredAction();
    }
    DartAutocompleteProvider_getSuggestions_closure0.builtin$cls = "DartAutocompleteProvider_getSuggestions_closure0";
    if (!("name" in DartAutocompleteProvider_getSuggestions_closure0))
      DartAutocompleteProvider_getSuggestions_closure0.name = "DartAutocompleteProvider_getSuggestions_closure0";
    $desc = $collectedClasses$.DartAutocompleteProvider_getSuggestions_closure0[1];
    DartAutocompleteProvider_getSuggestions_closure0.prototype = $desc;
    DartAutocompleteProvider_getSuggestions_closure0.$__fields__ = [];
    function DartAutocompleteProvider__handleCompletionResults_closure() {
      this.$deferredAction();
    }
    DartAutocompleteProvider__handleCompletionResults_closure.builtin$cls = "DartAutocompleteProvider__handleCompletionResults_closure";
    if (!("name" in DartAutocompleteProvider__handleCompletionResults_closure))
      DartAutocompleteProvider__handleCompletionResults_closure.name = "DartAutocompleteProvider__handleCompletionResults_closure";
    $desc = $collectedClasses$.DartAutocompleteProvider__handleCompletionResults_closure[1];
    DartAutocompleteProvider__handleCompletionResults_closure.prototype = $desc;
    DartAutocompleteProvider__handleCompletionResults_closure.$__fields__ = [];
    function DartAutocompleteProvider__makeSuggestion_closure(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    DartAutocompleteProvider__makeSuggestion_closure.builtin$cls = "DartAutocompleteProvider__makeSuggestion_closure";
    if (!("name" in DartAutocompleteProvider__makeSuggestion_closure))
      DartAutocompleteProvider__makeSuggestion_closure.name = "DartAutocompleteProvider__makeSuggestion_closure";
    $desc = $collectedClasses$.DartAutocompleteProvider__makeSuggestion_closure[1];
    DartAutocompleteProvider__makeSuggestion_closure.prototype = $desc;
    DartAutocompleteProvider__makeSuggestion_closure.$__fields__ = ["_box_0"];
    function DartAutocompleteProvider__rightLabel_closure(kind) {
      this.kind = kind;
      this.$deferredAction();
    }
    DartAutocompleteProvider__rightLabel_closure.builtin$cls = "DartAutocompleteProvider__rightLabel_closure";
    if (!("name" in DartAutocompleteProvider__rightLabel_closure))
      DartAutocompleteProvider__rightLabel_closure.name = "DartAutocompleteProvider__rightLabel_closure";
    $desc = $collectedClasses$.DartAutocompleteProvider__rightLabel_closure[1];
    DartAutocompleteProvider__rightLabel_closure.prototype = $desc;
    DartAutocompleteProvider__rightLabel_closure.$__fields__ = ["kind"];
    function DartdocHelper(_dartdoc$_disposables, _control) {
      this._dartdoc$_disposables = _dartdoc$_disposables;
      this._control = _control;
      this.$deferredAction();
    }
    DartdocHelper.builtin$cls = "DartdocHelper";
    if (!("name" in DartdocHelper))
      DartdocHelper.name = "DartdocHelper";
    $desc = $collectedClasses$.DartdocHelper[1];
    DartdocHelper.prototype = $desc;
    DartdocHelper.$__fields__ = ["_dartdoc$_disposables", "_control"];
    function DartdocHelper_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DartdocHelper_closure.builtin$cls = "DartdocHelper_closure";
    if (!("name" in DartdocHelper_closure))
      DartdocHelper_closure.name = "DartdocHelper_closure";
    $desc = $collectedClasses$.DartdocHelper_closure[1];
    DartdocHelper_closure.prototype = $desc;
    DartdocHelper_closure.$__fields__ = ["$this"];
    function DartdocHelper__handleDartdoc_closure($this, explicit, editor, offset) {
      this.$this = $this;
      this.explicit = explicit;
      this.editor = editor;
      this.offset = offset;
      this.$deferredAction();
    }
    DartdocHelper__handleDartdoc_closure.builtin$cls = "DartdocHelper__handleDartdoc_closure";
    if (!("name" in DartdocHelper__handleDartdoc_closure))
      DartdocHelper__handleDartdoc_closure.name = "DartdocHelper__handleDartdoc_closure";
    $desc = $collectedClasses$.DartdocHelper__handleDartdoc_closure[1];
    DartdocHelper__handleDartdoc_closure.prototype = $desc;
    DartdocHelper__handleDartdoc_closure.$__fields__ = ["$this", "explicit", "editor", "offset"];
    function DartdocHelper__handleDartdoc__closure($this, explicit, editor) {
      this.$this = $this;
      this.explicit = explicit;
      this.editor = editor;
      this.$deferredAction();
    }
    DartdocHelper__handleDartdoc__closure.builtin$cls = "DartdocHelper__handleDartdoc__closure";
    if (!("name" in DartdocHelper__handleDartdoc__closure))
      DartdocHelper__handleDartdoc__closure.name = "DartdocHelper__handleDartdoc__closure";
    $desc = $collectedClasses$.DartdocHelper__handleDartdoc__closure[1];
    DartdocHelper__handleDartdoc__closure.prototype = $desc;
    DartdocHelper__handleDartdoc__closure.$__fields__ = ["$this", "explicit", "editor"];
    function DartdocHelper__render_writeTitle(buf) {
      this.buf = buf;
      this.$deferredAction();
    }
    DartdocHelper__render_writeTitle.builtin$cls = "DartdocHelper__render_writeTitle";
    if (!("name" in DartdocHelper__render_writeTitle))
      DartdocHelper__render_writeTitle.name = "DartdocHelper__render_writeTitle";
    $desc = $collectedClasses$.DartdocHelper__render_writeTitle[1];
    DartdocHelper__render_writeTitle.prototype = $desc;
    DartdocHelper__render_writeTitle.$__fields__ = ["buf"];
    function DartdocControl(_cmdDispose, _dartdoc$_sub, _titleDiv, _bodyDiv, _footerDiv, element) {
      this._cmdDispose = _cmdDispose;
      this._dartdoc$_sub = _dartdoc$_sub;
      this._titleDiv = _titleDiv;
      this._bodyDiv = _bodyDiv;
      this._footerDiv = _footerDiv;
      this.element = element;
      this.$deferredAction();
    }
    DartdocControl.builtin$cls = "DartdocControl";
    if (!("name" in DartdocControl))
      DartdocControl.name = "DartdocControl";
    $desc = $collectedClasses$.DartdocControl[1];
    DartdocControl.prototype = $desc;
    DartdocControl.$__fields__ = ["_cmdDispose", "_dartdoc$_sub", "_titleDiv", "_bodyDiv", "_footerDiv", "element"];
    function DartdocControl_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DartdocControl_closure.builtin$cls = "DartdocControl_closure";
    if (!("name" in DartdocControl_closure))
      DartdocControl_closure.name = "DartdocControl_closure";
    $desc = $collectedClasses$.DartdocControl_closure[1];
    DartdocControl_closure.prototype = $desc;
    DartdocControl_closure.$__fields__ = ["$this"];
    function DartdocControl_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DartdocControl_closure0.builtin$cls = "DartdocControl_closure0";
    if (!("name" in DartdocControl_closure0))
      DartdocControl_closure0.name = "DartdocControl_closure0";
    $desc = $collectedClasses$.DartdocControl_closure0[1];
    DartdocControl_closure0.prototype = $desc;
    DartdocControl_closure0.$__fields__ = ["$this"];
    function NavigationHelper(_declaration_nav$_commands, _completerHelper, _eventListener) {
      this._declaration_nav$_commands = _declaration_nav$_commands;
      this._completerHelper = _completerHelper;
      this._eventListener = _eventListener;
      this.$deferredAction();
    }
    NavigationHelper.builtin$cls = "NavigationHelper";
    if (!("name" in NavigationHelper))
      NavigationHelper.name = "NavigationHelper";
    $desc = $collectedClasses$.NavigationHelper[1];
    NavigationHelper.prototype = $desc;
    NavigationHelper.$__fields__ = ["_declaration_nav$_commands", "_completerHelper", "_eventListener"];
    function NavigationHelper__activate_closure($this, editor) {
      this.$this = $this;
      this.editor = editor;
      this.$deferredAction();
    }
    NavigationHelper__activate_closure.builtin$cls = "NavigationHelper__activate_closure";
    if (!("name" in NavigationHelper__activate_closure))
      NavigationHelper__activate_closure.name = "NavigationHelper__activate_closure";
    $desc = $collectedClasses$.NavigationHelper__activate_closure[1];
    NavigationHelper__activate_closure.prototype = $desc;
    NavigationHelper__activate_closure.$__fields__ = ["$this", "editor"];
    function NavigationHelper__handleNavigateEditor_closure($this, editor, offset) {
      this.$this = $this;
      this.editor = editor;
      this.offset = offset;
      this.$deferredAction();
    }
    NavigationHelper__handleNavigateEditor_closure.builtin$cls = "NavigationHelper__handleNavigateEditor_closure";
    if (!("name" in NavigationHelper__handleNavigateEditor_closure))
      NavigationHelper__handleNavigateEditor_closure.name = "NavigationHelper__handleNavigateEditor_closure";
    $desc = $collectedClasses$.NavigationHelper__handleNavigateEditor_closure[1];
    NavigationHelper__handleNavigateEditor_closure.prototype = $desc;
    NavigationHelper__handleNavigateEditor_closure.$__fields__ = ["$this", "editor", "offset"];
    function NavigationHelper__handleNavigateEditor_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    NavigationHelper__handleNavigateEditor_closure0.builtin$cls = "NavigationHelper__handleNavigateEditor_closure0";
    if (!("name" in NavigationHelper__handleNavigateEditor_closure0))
      NavigationHelper__handleNavigateEditor_closure0.name = "NavigationHelper__handleNavigateEditor_closure0";
    $desc = $collectedClasses$.NavigationHelper__handleNavigateEditor_closure0[1];
    NavigationHelper__handleNavigateEditor_closure0.prototype = $desc;
    NavigationHelper__handleNavigateEditor_closure0.$__fields__ = ["$this"];
    function NavigationHelper__processNavInfo_closure(target, file) {
      this.target = target;
      this.file = file;
      this.$deferredAction();
    }
    NavigationHelper__processNavInfo_closure.builtin$cls = "NavigationHelper__processNavInfo_closure";
    if (!("name" in NavigationHelper__processNavInfo_closure))
      NavigationHelper__processNavInfo_closure.name = "NavigationHelper__processNavInfo_closure";
    $desc = $collectedClasses$.NavigationHelper__processNavInfo_closure[1];
    NavigationHelper__processNavInfo_closure.prototype = $desc;
    NavigationHelper__processNavInfo_closure.$__fields__ = ["target", "file"];
    function _NavCompleterHelper(_lastInfos, _declaration_nav$_completers) {
      this._lastInfos = _lastInfos;
      this._declaration_nav$_completers = _declaration_nav$_completers;
      this.$deferredAction();
    }
    _NavCompleterHelper.builtin$cls = "_NavCompleterHelper";
    if (!("name" in _NavCompleterHelper))
      _NavCompleterHelper.name = "_NavCompleterHelper";
    $desc = $collectedClasses$._NavCompleterHelper[1];
    _NavCompleterHelper.prototype = $desc;
    _NavCompleterHelper.$__fields__ = ["_lastInfos", "_declaration_nav$_completers"];
    function _NavCompleterHelper_handleNavInfo_closure(path) {
      this.path = path;
      this.$deferredAction();
    }
    _NavCompleterHelper_handleNavInfo_closure.builtin$cls = "_NavCompleterHelper_handleNavInfo_closure";
    if (!("name" in _NavCompleterHelper_handleNavInfo_closure))
      _NavCompleterHelper_handleNavInfo_closure.name = "_NavCompleterHelper_handleNavInfo_closure";
    $desc = $collectedClasses$._NavCompleterHelper_handleNavInfo_closure[1];
    _NavCompleterHelper_handleNavInfo_closure.prototype = $desc;
    _NavCompleterHelper_handleNavInfo_closure.$__fields__ = ["path"];
    function _NavCompleterHelper_getNavigationInfo_closure() {
      this.$deferredAction();
    }
    _NavCompleterHelper_getNavigationInfo_closure.builtin$cls = "_NavCompleterHelper_getNavigationInfo_closure";
    if (!("name" in _NavCompleterHelper_getNavigationInfo_closure))
      _NavCompleterHelper_getNavigationInfo_closure.name = "_NavCompleterHelper_getNavigationInfo_closure";
    $desc = $collectedClasses$._NavCompleterHelper_getNavigationInfo_closure[1];
    _NavCompleterHelper_getNavigationInfo_closure.prototype = $desc;
    _NavCompleterHelper_getNavigationInfo_closure.$__fields__ = [];
    function FindTypeHelper(disposables, _lastSearchTerm) {
      this.disposables = disposables;
      this._lastSearchTerm = _lastSearchTerm;
      this.$deferredAction();
    }
    FindTypeHelper.builtin$cls = "FindTypeHelper";
    if (!("name" in FindTypeHelper))
      FindTypeHelper.name = "FindTypeHelper";
    $desc = $collectedClasses$.FindTypeHelper[1];
    FindTypeHelper.prototype = $desc;
    FindTypeHelper.$__fields__ = ["disposables", "_lastSearchTerm"];
    function FindTypeHelper_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FindTypeHelper_closure.builtin$cls = "FindTypeHelper_closure";
    if (!("name" in FindTypeHelper_closure))
      FindTypeHelper_closure.name = "FindTypeHelper_closure";
    $desc = $collectedClasses$.FindTypeHelper_closure[1];
    FindTypeHelper_closure.prototype = $desc;
    FindTypeHelper_closure.$__fields__ = ["$this"];
    function FindTypeHelper__handleFindType_closure($this, editor) {
      this.$this = $this;
      this.editor = editor;
      this.$deferredAction();
    }
    FindTypeHelper__handleFindType_closure.builtin$cls = "FindTypeHelper__handleFindType_closure";
    if (!("name" in FindTypeHelper__handleFindType_closure))
      FindTypeHelper__handleFindType_closure.name = "FindTypeHelper__handleFindType_closure";
    $desc = $collectedClasses$.FindTypeHelper__handleFindType_closure[1];
    FindTypeHelper__handleFindType_closure.prototype = $desc;
    FindTypeHelper__handleFindType_closure.$__fields__ = ["$this", "editor"];
    function FindTypeHelper__handleFindType__closure(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    FindTypeHelper__handleFindType__closure.builtin$cls = "FindTypeHelper__handleFindType__closure";
    if (!("name" in FindTypeHelper__handleFindType__closure))
      FindTypeHelper__handleFindType__closure.name = "FindTypeHelper__handleFindType__closure";
    $desc = $collectedClasses$.FindTypeHelper__handleFindType__closure[1];
    FindTypeHelper__handleFindType__closure.prototype = $desc;
    FindTypeHelper__handleFindType__closure.$__fields__ = ["_box_0", "$this"];
    function FindTypeHelper__handleFindType___closure(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    FindTypeHelper__handleFindType___closure.builtin$cls = "FindTypeHelper__handleFindType___closure";
    if (!("name" in FindTypeHelper__handleFindType___closure))
      FindTypeHelper__handleFindType___closure.name = "FindTypeHelper__handleFindType___closure";
    $desc = $collectedClasses$.FindTypeHelper__handleFindType___closure[1];
    FindTypeHelper__handleFindType___closure.prototype = $desc;
    FindTypeHelper__handleFindType___closure.$__fields__ = ["_box_0"];
    function FormattingManager(_formatting$_commands) {
      this._formatting$_commands = _formatting$_commands;
      this.$deferredAction();
    }
    FormattingManager.builtin$cls = "FormattingManager";
    if (!("name" in FormattingManager))
      FormattingManager.name = "FormattingManager";
    $desc = $collectedClasses$.FormattingManager[1];
    FormattingManager.prototype = $desc;
    FormattingManager.$__fields__ = ["_formatting$_commands"];
    function FormattingManager_closure() {
      this.$deferredAction();
    }
    FormattingManager_closure.builtin$cls = "FormattingManager_closure";
    if (!("name" in FormattingManager_closure))
      FormattingManager_closure.name = "FormattingManager_closure";
    $desc = $collectedClasses$.FormattingManager_closure[1];
    FormattingManager_closure.prototype = $desc;
    FormattingManager_closure.$__fields__ = [];
    function FormattingManager_closure0() {
      this.$deferredAction();
    }
    FormattingManager_closure0.builtin$cls = "FormattingManager_closure0";
    if (!("name" in FormattingManager_closure0))
      FormattingManager_closure0.name = "FormattingManager_closure0";
    $desc = $collectedClasses$.FormattingManager_closure0[1];
    FormattingManager_closure0.prototype = $desc;
    FormattingManager_closure0.$__fields__ = [];
    function FormattingManager_formatFile_closure() {
      this.$deferredAction();
    }
    FormattingManager_formatFile_closure.builtin$cls = "FormattingManager_formatFile_closure";
    if (!("name" in FormattingManager_formatFile_closure))
      FormattingManager_formatFile_closure.name = "FormattingManager_formatFile_closure";
    $desc = $collectedClasses$.FormattingManager_formatFile_closure[1];
    FormattingManager_formatFile_closure.prototype = $desc;
    FormattingManager_formatFile_closure.$__fields__ = [];
    function FormattingManager_formatEditor_closure(editor, quiet, buffer) {
      this.editor = editor;
      this.quiet = quiet;
      this.buffer = buffer;
      this.$deferredAction();
    }
    FormattingManager_formatEditor_closure.builtin$cls = "FormattingManager_formatEditor_closure";
    if (!("name" in FormattingManager_formatEditor_closure))
      FormattingManager_formatEditor_closure.name = "FormattingManager_formatEditor_closure";
    $desc = $collectedClasses$.FormattingManager_formatEditor_closure[1];
    FormattingManager_formatEditor_closure.prototype = $desc;
    FormattingManager_formatEditor_closure.$__fields__ = ["editor", "quiet", "buffer"];
    function FormattingManager_formatEditor_closure0(quiet) {
      this.quiet = quiet;
      this.$deferredAction();
    }
    FormattingManager_formatEditor_closure0.builtin$cls = "FormattingManager_formatEditor_closure0";
    if (!("name" in FormattingManager_formatEditor_closure0))
      FormattingManager_formatEditor_closure0.name = "FormattingManager_formatEditor_closure0";
    $desc = $collectedClasses$.FormattingManager_formatEditor_closure0[1];
    FormattingManager_formatEditor_closure0.prototype = $desc;
    FormattingManager_formatEditor_closure0.$__fields__ = ["quiet"];
    function OrganizeFileManager(disposables) {
      this.disposables = disposables;
      this.$deferredAction();
    }
    OrganizeFileManager.builtin$cls = "OrganizeFileManager";
    if (!("name" in OrganizeFileManager))
      OrganizeFileManager.name = "OrganizeFileManager";
    $desc = $collectedClasses$.OrganizeFileManager[1];
    OrganizeFileManager.prototype = $desc;
    OrganizeFileManager.$__fields__ = ["disposables"];
    function OrganizeFileManager__addEditorCommand_closure(impl) {
      this.impl = impl;
      this.$deferredAction();
    }
    OrganizeFileManager__addEditorCommand_closure.builtin$cls = "OrganizeFileManager__addEditorCommand_closure";
    if (!("name" in OrganizeFileManager__addEditorCommand_closure))
      OrganizeFileManager__addEditorCommand_closure.name = "OrganizeFileManager__addEditorCommand_closure";
    $desc = $collectedClasses$.OrganizeFileManager__addEditorCommand_closure[1];
    OrganizeFileManager__addEditorCommand_closure.prototype = $desc;
    OrganizeFileManager__addEditorCommand_closure.$__fields__ = ["impl"];
    function OrganizeFileManager__handleSortMembers_closure(editor, path) {
      this.editor = editor;
      this.path = path;
      this.$deferredAction();
    }
    OrganizeFileManager__handleSortMembers_closure.builtin$cls = "OrganizeFileManager__handleSortMembers_closure";
    if (!("name" in OrganizeFileManager__handleSortMembers_closure))
      OrganizeFileManager__handleSortMembers_closure.name = "OrganizeFileManager__handleSortMembers_closure";
    $desc = $collectedClasses$.OrganizeFileManager__handleSortMembers_closure[1];
    OrganizeFileManager__handleSortMembers_closure.prototype = $desc;
    OrganizeFileManager__handleSortMembers_closure.$__fields__ = ["editor", "path"];
    function OrganizeFileManager__handleSortMembers__closure(editor) {
      this.editor = editor;
      this.$deferredAction();
    }
    OrganizeFileManager__handleSortMembers__closure.builtin$cls = "OrganizeFileManager__handleSortMembers__closure";
    if (!("name" in OrganizeFileManager__handleSortMembers__closure))
      OrganizeFileManager__handleSortMembers__closure.name = "OrganizeFileManager__handleSortMembers__closure";
    $desc = $collectedClasses$.OrganizeFileManager__handleSortMembers__closure[1];
    OrganizeFileManager__handleSortMembers__closure.prototype = $desc;
    OrganizeFileManager__handleSortMembers__closure.$__fields__ = ["editor"];
    function OrganizeFileManager__handleOrganizeDirectives_closure(editor, path) {
      this.editor = editor;
      this.path = path;
      this.$deferredAction();
    }
    OrganizeFileManager__handleOrganizeDirectives_closure.builtin$cls = "OrganizeFileManager__handleOrganizeDirectives_closure";
    if (!("name" in OrganizeFileManager__handleOrganizeDirectives_closure))
      OrganizeFileManager__handleOrganizeDirectives_closure.name = "OrganizeFileManager__handleOrganizeDirectives_closure";
    $desc = $collectedClasses$.OrganizeFileManager__handleOrganizeDirectives_closure[1];
    OrganizeFileManager__handleOrganizeDirectives_closure.prototype = $desc;
    OrganizeFileManager__handleOrganizeDirectives_closure.$__fields__ = ["editor", "path"];
    function OrganizeFileManager__handleOrganizeDirectives__closure(editor) {
      this.editor = editor;
      this.$deferredAction();
    }
    OrganizeFileManager__handleOrganizeDirectives__closure.builtin$cls = "OrganizeFileManager__handleOrganizeDirectives__closure";
    if (!("name" in OrganizeFileManager__handleOrganizeDirectives__closure))
      OrganizeFileManager__handleOrganizeDirectives__closure.name = "OrganizeFileManager__handleOrganizeDirectives__closure";
    $desc = $collectedClasses$.OrganizeFileManager__handleOrganizeDirectives__closure[1];
    OrganizeFileManager__handleOrganizeDirectives__closure.prototype = $desc;
    OrganizeFileManager__handleOrganizeDirectives__closure.$__fields__ = ["editor"];
    function OrganizeFileManager__handleOrganizeDirectives__closure0() {
      this.$deferredAction();
    }
    OrganizeFileManager__handleOrganizeDirectives__closure0.builtin$cls = "OrganizeFileManager__handleOrganizeDirectives__closure0";
    if (!("name" in OrganizeFileManager__handleOrganizeDirectives__closure0))
      OrganizeFileManager__handleOrganizeDirectives__closure0.name = "OrganizeFileManager__handleOrganizeDirectives__closure0";
    $desc = $collectedClasses$.OrganizeFileManager__handleOrganizeDirectives__closure0[1];
    OrganizeFileManager__handleOrganizeDirectives__closure0.prototype = $desc;
    OrganizeFileManager__handleOrganizeDirectives__closure0.$__fields__ = [];
    function QuickFixHelper(disposables) {
      this.disposables = disposables;
      this.$deferredAction();
    }
    QuickFixHelper.builtin$cls = "QuickFixHelper";
    if (!("name" in QuickFixHelper))
      QuickFixHelper.name = "QuickFixHelper";
    $desc = $collectedClasses$.QuickFixHelper[1];
    QuickFixHelper.prototype = $desc;
    QuickFixHelper.$__fields__ = ["disposables"];
    function QuickFixHelper_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    QuickFixHelper_closure.builtin$cls = "QuickFixHelper_closure";
    if (!("name" in QuickFixHelper_closure))
      QuickFixHelper_closure.name = "QuickFixHelper_closure";
    $desc = $collectedClasses$.QuickFixHelper_closure[1];
    QuickFixHelper_closure.prototype = $desc;
    QuickFixHelper_closure.$__fields__ = ["$this"];
    function QuickFixHelper__handleQuickFix_closure($this, editor, autoFix, path, offset, length) {
      this.$this = $this;
      this.editor = editor;
      this.autoFix = autoFix;
      this.path = path;
      this.offset = offset;
      this.length = length;
      this.$deferredAction();
    }
    QuickFixHelper__handleQuickFix_closure.builtin$cls = "QuickFixHelper__handleQuickFix_closure";
    if (!("name" in QuickFixHelper__handleQuickFix_closure))
      QuickFixHelper__handleQuickFix_closure.name = "QuickFixHelper__handleQuickFix_closure";
    $desc = $collectedClasses$.QuickFixHelper__handleQuickFix_closure[1];
    QuickFixHelper__handleQuickFix_closure.prototype = $desc;
    QuickFixHelper__handleQuickFix_closure.$__fields__ = ["$this", "editor", "autoFix", "path", "offset", "length"];
    function QuickFixHelper__handleFixesResult_closure() {
      this.$deferredAction();
    }
    QuickFixHelper__handleFixesResult_closure.builtin$cls = "QuickFixHelper__handleFixesResult_closure";
    if (!("name" in QuickFixHelper__handleFixesResult_closure))
      QuickFixHelper__handleFixesResult_closure.name = "QuickFixHelper__handleFixesResult_closure";
    $desc = $collectedClasses$.QuickFixHelper__handleFixesResult_closure[1];
    QuickFixHelper__handleFixesResult_closure.prototype = $desc;
    QuickFixHelper__handleFixesResult_closure.$__fields__ = [];
    function QuickFixHelper__handleFixesResult__closure(fix) {
      this.fix = fix;
      this.$deferredAction();
    }
    QuickFixHelper__handleFixesResult__closure.builtin$cls = "QuickFixHelper__handleFixesResult__closure";
    if (!("name" in QuickFixHelper__handleFixesResult__closure))
      QuickFixHelper__handleFixesResult__closure.name = "QuickFixHelper__handleFixesResult__closure";
    $desc = $collectedClasses$.QuickFixHelper__handleFixesResult__closure[1];
    QuickFixHelper__handleFixesResult__closure.prototype = $desc;
    QuickFixHelper__handleFixesResult__closure.$__fields__ = ["fix"];
    function QuickFixHelper__handleFixesResult_closure0() {
      this.$deferredAction();
    }
    QuickFixHelper__handleFixesResult_closure0.builtin$cls = "QuickFixHelper__handleFixesResult_closure0";
    if (!("name" in QuickFixHelper__handleFixesResult_closure0))
      QuickFixHelper__handleFixesResult_closure0.name = "QuickFixHelper__handleFixesResult_closure0";
    $desc = $collectedClasses$.QuickFixHelper__handleFixesResult_closure0[1];
    QuickFixHelper__handleFixesResult_closure0.prototype = $desc;
    QuickFixHelper__handleFixesResult_closure0.$__fields__ = [];
    function QuickFixHelper__handleFixesResult_closure1(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    QuickFixHelper__handleFixesResult_closure1.builtin$cls = "QuickFixHelper__handleFixesResult_closure1";
    if (!("name" in QuickFixHelper__handleFixesResult_closure1))
      QuickFixHelper__handleFixesResult_closure1.name = "QuickFixHelper__handleFixesResult_closure1";
    $desc = $collectedClasses$.QuickFixHelper__handleFixesResult_closure1[1];
    QuickFixHelper__handleFixesResult_closure1.prototype = $desc;
    QuickFixHelper__handleFixesResult_closure1.$__fields__ = ["_box_0"];
    function QuickFixHelper__handleFixesResult_closure2(editor) {
      this.editor = editor;
      this.$deferredAction();
    }
    QuickFixHelper__handleFixesResult_closure2.builtin$cls = "QuickFixHelper__handleFixesResult_closure2";
    if (!("name" in QuickFixHelper__handleFixesResult_closure2))
      QuickFixHelper__handleFixesResult_closure2.name = "QuickFixHelper__handleFixesResult_closure2";
    $desc = $collectedClasses$.QuickFixHelper__handleFixesResult_closure2[1];
    QuickFixHelper__handleFixesResult_closure2.prototype = $desc;
    QuickFixHelper__handleFixesResult_closure2.$__fields__ = ["editor"];
    function _Change(change, error) {
      this.change = change;
      this.error = error;
      this.$deferredAction();
    }
    _Change.builtin$cls = "_Change";
    if (!("name" in _Change))
      _Change.name = "_Change";
    $desc = $collectedClasses$._Change[1];
    _Change.prototype = $desc;
    _Change.$__fields__ = ["change", "error"];
    _Change.prototype.get$change = function() {
      return this.change;
    };
    _Change.prototype.get$error = function(receiver) {
      return this.error;
    };
    function _applyChange_closure(sourceFileEdits, linkedEditGroups) {
      this.sourceFileEdits = sourceFileEdits;
      this.linkedEditGroups = linkedEditGroups;
      this.$deferredAction();
    }
    _applyChange_closure.builtin$cls = "_applyChange_closure";
    if (!("name" in _applyChange_closure))
      _applyChange_closure.name = "_applyChange_closure";
    $desc = $collectedClasses$._applyChange_closure[1];
    _applyChange_closure.prototype = $desc;
    _applyChange_closure.$__fields__ = ["sourceFileEdits", "linkedEditGroups"];
    function _applyChange__closure0(sourceFileEdits, linkedEditGroups, edit) {
      this.sourceFileEdits = sourceFileEdits;
      this.linkedEditGroups = linkedEditGroups;
      this.edit = edit;
      this.$deferredAction();
    }
    _applyChange__closure0.builtin$cls = "_applyChange__closure0";
    if (!("name" in _applyChange__closure0))
      _applyChange__closure0.name = "_applyChange__closure0";
    $desc = $collectedClasses$._applyChange__closure0[1];
    _applyChange__closure0.prototype = $desc;
    _applyChange__closure0.$__fields__ = ["sourceFileEdits", "linkedEditGroups", "edit"];
    function _applyChange_closure0(change, sourceFileEdits) {
      this.change = change;
      this.sourceFileEdits = sourceFileEdits;
      this.$deferredAction();
    }
    _applyChange_closure0.builtin$cls = "_applyChange_closure0";
    if (!("name" in _applyChange_closure0))
      _applyChange_closure0.name = "_applyChange_closure0";
    $desc = $collectedClasses$._applyChange_closure0[1];
    _applyChange_closure0.prototype = $desc;
    _applyChange_closure0.$__fields__ = ["change", "sourceFileEdits"];
    function _applyChange__closure() {
      this.$deferredAction();
    }
    _applyChange__closure.builtin$cls = "_applyChange__closure";
    if (!("name" in _applyChange__closure))
      _applyChange__closure.name = "_applyChange__closure";
    $desc = $collectedClasses$._applyChange__closure[1];
    _applyChange__closure.prototype = $desc;
    _applyChange__closure.$__fields__ = [];
    function _applyChange_closure1() {
      this.$deferredAction();
    }
    _applyChange_closure1.builtin$cls = "_applyChange_closure1";
    if (!("name" in _applyChange_closure1))
      _applyChange_closure1.name = "_applyChange_closure1";
    $desc = $collectedClasses$._applyChange_closure1[1];
    _applyChange_closure1.prototype = $desc;
    _applyChange_closure1.$__fields__ = [];
    function RefactoringHelper(_refactor$_commands) {
      this._refactor$_commands = _refactor$_commands;
      this.$deferredAction();
    }
    RefactoringHelper.builtin$cls = "RefactoringHelper";
    if (!("name" in RefactoringHelper))
      RefactoringHelper.name = "RefactoringHelper";
    $desc = $collectedClasses$.RefactoringHelper[1];
    RefactoringHelper.prototype = $desc;
    RefactoringHelper.$__fields__ = ["_refactor$_commands"];
    function RefactoringHelper__addCommand_closure(handler) {
      this.handler = handler;
      this.$deferredAction();
    }
    RefactoringHelper__addCommand_closure.builtin$cls = "RefactoringHelper__addCommand_closure";
    if (!("name" in RefactoringHelper__addCommand_closure))
      RefactoringHelper__addCommand_closure.name = "RefactoringHelper__addCommand_closure";
    $desc = $collectedClasses$.RefactoringHelper__addCommand_closure[1];
    RefactoringHelper__addCommand_closure.prototype = $desc;
    RefactoringHelper__addCommand_closure.$__fields__ = ["handler"];
    function RefactoringHelper__handleExtractLocal_closure($this, path, offset, end) {
      this.$this = $this;
      this.path = path;
      this.offset = offset;
      this.end = end;
      this.$deferredAction();
    }
    RefactoringHelper__handleExtractLocal_closure.builtin$cls = "RefactoringHelper__handleExtractLocal_closure";
    if (!("name" in RefactoringHelper__handleExtractLocal_closure))
      RefactoringHelper__handleExtractLocal_closure.name = "RefactoringHelper__handleExtractLocal_closure";
    $desc = $collectedClasses$.RefactoringHelper__handleExtractLocal_closure[1];
    RefactoringHelper__handleExtractLocal_closure.prototype = $desc;
    RefactoringHelper__handleExtractLocal_closure.$__fields__ = ["$this", "path", "offset", "end"];
    function RefactoringHelper__handleExtractLocal__closure($this, path, offset, end, oldName, extractAll) {
      this.$this = $this;
      this.path = path;
      this.offset = offset;
      this.end = end;
      this.oldName = oldName;
      this.extractAll = extractAll;
      this.$deferredAction();
    }
    RefactoringHelper__handleExtractLocal__closure.builtin$cls = "RefactoringHelper__handleExtractLocal__closure";
    if (!("name" in RefactoringHelper__handleExtractLocal__closure))
      RefactoringHelper__handleExtractLocal__closure.name = "RefactoringHelper__handleExtractLocal__closure";
    $desc = $collectedClasses$.RefactoringHelper__handleExtractLocal__closure[1];
    RefactoringHelper__handleExtractLocal__closure.prototype = $desc;
    RefactoringHelper__handleExtractLocal__closure.$__fields__ = ["$this", "path", "offset", "end", "oldName", "extractAll"];
    function RefactoringHelper__handleRenameRefactor_closure($this, path, offset, end, oldName) {
      this.$this = $this;
      this.path = path;
      this.offset = offset;
      this.end = end;
      this.oldName = oldName;
      this.$deferredAction();
    }
    RefactoringHelper__handleRenameRefactor_closure.builtin$cls = "RefactoringHelper__handleRenameRefactor_closure";
    if (!("name" in RefactoringHelper__handleRenameRefactor_closure))
      RefactoringHelper__handleRenameRefactor_closure.name = "RefactoringHelper__handleRenameRefactor_closure";
    $desc = $collectedClasses$.RefactoringHelper__handleRenameRefactor_closure[1];
    RefactoringHelper__handleRenameRefactor_closure.prototype = $desc;
    RefactoringHelper__handleRenameRefactor_closure.$__fields__ = ["$this", "path", "offset", "end", "oldName"];
    function RefactoringHelper__handleRenameRefactor__closure($this, path, offset, end, oldName) {
      this.$this = $this;
      this.path = path;
      this.offset = offset;
      this.end = end;
      this.oldName = oldName;
      this.$deferredAction();
    }
    RefactoringHelper__handleRenameRefactor__closure.builtin$cls = "RefactoringHelper__handleRenameRefactor__closure";
    if (!("name" in RefactoringHelper__handleRenameRefactor__closure))
      RefactoringHelper__handleRenameRefactor__closure.name = "RefactoringHelper__handleRenameRefactor__closure";
    $desc = $collectedClasses$.RefactoringHelper__handleRenameRefactor__closure[1];
    RefactoringHelper__handleRenameRefactor__closure.prototype = $desc;
    RefactoringHelper__handleRenameRefactor__closure.$__fields__ = ["$this", "path", "offset", "end", "oldName"];
    function RefactoringHelper__checkRefactoringAvailable_closure(refactoringName, path, offset, end, refactor) {
      this.refactoringName = refactoringName;
      this.path = path;
      this.offset = offset;
      this.end = end;
      this.refactor = refactor;
      this.$deferredAction();
    }
    RefactoringHelper__checkRefactoringAvailable_closure.builtin$cls = "RefactoringHelper__checkRefactoringAvailable_closure";
    if (!("name" in RefactoringHelper__checkRefactoringAvailable_closure))
      RefactoringHelper__checkRefactoringAvailable_closure.name = "RefactoringHelper__checkRefactoringAvailable_closure";
    $desc = $collectedClasses$.RefactoringHelper__checkRefactoringAvailable_closure[1];
    RefactoringHelper__checkRefactoringAvailable_closure.prototype = $desc;
    RefactoringHelper__checkRefactoringAvailable_closure.$__fields__ = ["refactoringName", "path", "offset", "end", "refactor"];
    function RefactoringHelper__checkRefactoringAvailable__closure(refactoringName, refactor) {
      this.refactoringName = refactoringName;
      this.refactor = refactor;
      this.$deferredAction();
    }
    RefactoringHelper__checkRefactoringAvailable__closure.builtin$cls = "RefactoringHelper__checkRefactoringAvailable__closure";
    if (!("name" in RefactoringHelper__checkRefactoringAvailable__closure))
      RefactoringHelper__checkRefactoringAvailable__closure.name = "RefactoringHelper__checkRefactoringAvailable__closure";
    $desc = $collectedClasses$.RefactoringHelper__checkRefactoringAvailable__closure[1];
    RefactoringHelper__checkRefactoringAvailable__closure.prototype = $desc;
    RefactoringHelper__checkRefactoringAvailable__closure.$__fields__ = ["refactoringName", "refactor"];
    function RefactoringHelper__performRefactoring_closure($this, refactoringName, options, path, offset, end, successMsg) {
      this.$this = $this;
      this.refactoringName = refactoringName;
      this.options = options;
      this.path = path;
      this.offset = offset;
      this.end = end;
      this.successMsg = successMsg;
      this.$deferredAction();
    }
    RefactoringHelper__performRefactoring_closure.builtin$cls = "RefactoringHelper__performRefactoring_closure";
    if (!("name" in RefactoringHelper__performRefactoring_closure))
      RefactoringHelper__performRefactoring_closure.name = "RefactoringHelper__performRefactoring_closure";
    $desc = $collectedClasses$.RefactoringHelper__performRefactoring_closure[1];
    RefactoringHelper__performRefactoring_closure.prototype = $desc;
    RefactoringHelper__performRefactoring_closure.$__fields__ = ["$this", "refactoringName", "options", "path", "offset", "end", "successMsg"];
    function RefactoringHelper__performRefactoring__closure($this, refactoringName, path, successMsg) {
      this.$this = $this;
      this.refactoringName = refactoringName;
      this.path = path;
      this.successMsg = successMsg;
      this.$deferredAction();
    }
    RefactoringHelper__performRefactoring__closure.builtin$cls = "RefactoringHelper__performRefactoring__closure";
    if (!("name" in RefactoringHelper__performRefactoring__closure))
      RefactoringHelper__performRefactoring__closure.name = "RefactoringHelper__performRefactoring__closure";
    $desc = $collectedClasses$.RefactoringHelper__performRefactoring__closure[1];
    RefactoringHelper__performRefactoring__closure.prototype = $desc;
    RefactoringHelper__performRefactoring__closure.$__fields__ = ["$this", "refactoringName", "path", "successMsg"];
    function RefactoringHelper__applyRefactoringResult_closure() {
      this.$deferredAction();
    }
    RefactoringHelper__applyRefactoringResult_closure.builtin$cls = "RefactoringHelper__applyRefactoringResult_closure";
    if (!("name" in RefactoringHelper__applyRefactoringResult_closure))
      RefactoringHelper__applyRefactoringResult_closure.name = "RefactoringHelper__applyRefactoringResult_closure";
    $desc = $collectedClasses$.RefactoringHelper__applyRefactoringResult_closure[1];
    RefactoringHelper__applyRefactoringResult_closure.prototype = $desc;
    RefactoringHelper__applyRefactoringResult_closure.$__fields__ = [];
    function RefactoringHelper__applyRefactoringResult__closure0() {
      this.$deferredAction();
    }
    RefactoringHelper__applyRefactoringResult__closure0.builtin$cls = "RefactoringHelper__applyRefactoringResult__closure0";
    if (!("name" in RefactoringHelper__applyRefactoringResult__closure0))
      RefactoringHelper__applyRefactoringResult__closure0.name = "RefactoringHelper__applyRefactoringResult__closure0";
    $desc = $collectedClasses$.RefactoringHelper__applyRefactoringResult__closure0[1];
    RefactoringHelper__applyRefactoringResult__closure0.prototype = $desc;
    RefactoringHelper__applyRefactoringResult__closure0.$__fields__ = [];
    function RefactoringHelper__applyRefactoringResult_closure0() {
      this.$deferredAction();
    }
    RefactoringHelper__applyRefactoringResult_closure0.builtin$cls = "RefactoringHelper__applyRefactoringResult_closure0";
    if (!("name" in RefactoringHelper__applyRefactoringResult_closure0))
      RefactoringHelper__applyRefactoringResult_closure0.name = "RefactoringHelper__applyRefactoringResult_closure0";
    $desc = $collectedClasses$.RefactoringHelper__applyRefactoringResult_closure0[1];
    RefactoringHelper__applyRefactoringResult_closure0.prototype = $desc;
    RefactoringHelper__applyRefactoringResult_closure0.$__fields__ = [];
    function RefactoringHelper__applyRefactoringResult_closure1($this, successMsg, path, sourceFileEdits) {
      this.$this = $this;
      this.successMsg = successMsg;
      this.path = path;
      this.sourceFileEdits = sourceFileEdits;
      this.$deferredAction();
    }
    RefactoringHelper__applyRefactoringResult_closure1.builtin$cls = "RefactoringHelper__applyRefactoringResult_closure1";
    if (!("name" in RefactoringHelper__applyRefactoringResult_closure1))
      RefactoringHelper__applyRefactoringResult_closure1.name = "RefactoringHelper__applyRefactoringResult_closure1";
    $desc = $collectedClasses$.RefactoringHelper__applyRefactoringResult_closure1[1];
    RefactoringHelper__applyRefactoringResult_closure1.prototype = $desc;
    RefactoringHelper__applyRefactoringResult_closure1.$__fields__ = ["$this", "successMsg", "path", "sourceFileEdits"];
    function RefactoringHelper__applyRefactoringResult__closure(path) {
      this.path = path;
      this.$deferredAction();
    }
    RefactoringHelper__applyRefactoringResult__closure.builtin$cls = "RefactoringHelper__applyRefactoringResult__closure";
    if (!("name" in RefactoringHelper__applyRefactoringResult__closure))
      RefactoringHelper__applyRefactoringResult__closure.name = "RefactoringHelper__applyRefactoringResult__closure";
    $desc = $collectedClasses$.RefactoringHelper__applyRefactoringResult__closure[1];
    RefactoringHelper__applyRefactoringResult__closure.prototype = $desc;
    RefactoringHelper__applyRefactoringResult__closure.$__fields__ = ["path"];
    function RefactoringHelper__applyRefactoringResult_closure2(project, projectPrefix) {
      this.project = project;
      this.projectPrefix = projectPrefix;
      this.$deferredAction();
    }
    RefactoringHelper__applyRefactoringResult_closure2.builtin$cls = "RefactoringHelper__applyRefactoringResult_closure2";
    if (!("name" in RefactoringHelper__applyRefactoringResult_closure2))
      RefactoringHelper__applyRefactoringResult_closure2.name = "RefactoringHelper__applyRefactoringResult_closure2";
    $desc = $collectedClasses$.RefactoringHelper__applyRefactoringResult_closure2[1];
    RefactoringHelper__applyRefactoringResult_closure2.prototype = $desc;
    RefactoringHelper__applyRefactoringResult_closure2.$__fields__ = ["project", "projectPrefix"];
    function RefactoringHelper__applyRefactoringResult_closure3(_box_0, apply) {
      this._box_0 = _box_0;
      this.apply = apply;
      this.$deferredAction();
    }
    RefactoringHelper__applyRefactoringResult_closure3.builtin$cls = "RefactoringHelper__applyRefactoringResult_closure3";
    if (!("name" in RefactoringHelper__applyRefactoringResult_closure3))
      RefactoringHelper__applyRefactoringResult_closure3.name = "RefactoringHelper__applyRefactoringResult_closure3";
    $desc = $collectedClasses$.RefactoringHelper__applyRefactoringResult_closure3[1];
    RefactoringHelper__applyRefactoringResult_closure3.prototype = $desc;
    RefactoringHelper__applyRefactoringResult_closure3.$__fields__ = ["_box_0", "apply"];
    function RefactoringHelper__applyRefactoringResult_closure4(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    RefactoringHelper__applyRefactoringResult_closure4.builtin$cls = "RefactoringHelper__applyRefactoringResult_closure4";
    if (!("name" in RefactoringHelper__applyRefactoringResult_closure4))
      RefactoringHelper__applyRefactoringResult_closure4.name = "RefactoringHelper__applyRefactoringResult_closure4";
    $desc = $collectedClasses$.RefactoringHelper__applyRefactoringResult_closure4[1];
    RefactoringHelper__applyRefactoringResult_closure4.prototype = $desc;
    RefactoringHelper__applyRefactoringResult_closure4.$__fields__ = ["_box_0"];
    function RefactoringHelper__applyEdits_closure() {
      this.$deferredAction();
    }
    RefactoringHelper__applyEdits_closure.builtin$cls = "RefactoringHelper__applyEdits_closure";
    if (!("name" in RefactoringHelper__applyEdits_closure))
      RefactoringHelper__applyEdits_closure.name = "RefactoringHelper__applyEdits_closure";
    $desc = $collectedClasses$.RefactoringHelper__applyEdits_closure[1];
    RefactoringHelper__applyEdits_closure.prototype = $desc;
    RefactoringHelper__applyEdits_closure.$__fields__ = [];
    function RefactoringHelper__applyEdits__closure0(edit) {
      this.edit = edit;
      this.$deferredAction();
    }
    RefactoringHelper__applyEdits__closure0.builtin$cls = "RefactoringHelper__applyEdits__closure0";
    if (!("name" in RefactoringHelper__applyEdits__closure0))
      RefactoringHelper__applyEdits__closure0.name = "RefactoringHelper__applyEdits__closure0";
    $desc = $collectedClasses$.RefactoringHelper__applyEdits__closure0[1];
    RefactoringHelper__applyEdits__closure0.prototype = $desc;
    RefactoringHelper__applyEdits__closure0.$__fields__ = ["edit"];
    function RefactoringHelper__applyEdits_closure0(sourceFileEdits, successMsg) {
      this.sourceFileEdits = sourceFileEdits;
      this.successMsg = successMsg;
      this.$deferredAction();
    }
    RefactoringHelper__applyEdits_closure0.builtin$cls = "RefactoringHelper__applyEdits_closure0";
    if (!("name" in RefactoringHelper__applyEdits_closure0))
      RefactoringHelper__applyEdits_closure0.name = "RefactoringHelper__applyEdits_closure0";
    $desc = $collectedClasses$.RefactoringHelper__applyEdits_closure0[1];
    RefactoringHelper__applyEdits_closure0.prototype = $desc;
    RefactoringHelper__applyEdits_closure0.$__fields__ = ["sourceFileEdits", "successMsg"];
    function RefactoringHelper__applyEdits__closure() {
      this.$deferredAction();
    }
    RefactoringHelper__applyEdits__closure.builtin$cls = "RefactoringHelper__applyEdits__closure";
    if (!("name" in RefactoringHelper__applyEdits__closure))
      RefactoringHelper__applyEdits__closure.name = "RefactoringHelper__applyEdits__closure";
    $desc = $collectedClasses$.RefactoringHelper__applyEdits__closure[1];
    RefactoringHelper__applyEdits__closure.prototype = $desc;
    RefactoringHelper__applyEdits__closure.$__fields__ = [];
    function RefactoringHelper__applyEdits_closure1() {
      this.$deferredAction();
    }
    RefactoringHelper__applyEdits_closure1.builtin$cls = "RefactoringHelper__applyEdits_closure1";
    if (!("name" in RefactoringHelper__applyEdits_closure1))
      RefactoringHelper__applyEdits_closure1.name = "RefactoringHelper__applyEdits_closure1";
    $desc = $collectedClasses$.RefactoringHelper__applyEdits_closure1[1];
    RefactoringHelper__applyEdits_closure1.prototype = $desc;
    RefactoringHelper__applyEdits_closure1.$__fields__ = [];
    function FindReferencesHelper(_command) {
      this._command = _command;
      this.$deferredAction();
    }
    FindReferencesHelper.builtin$cls = "FindReferencesHelper";
    if (!("name" in FindReferencesHelper))
      FindReferencesHelper.name = "FindReferencesHelper";
    $desc = $collectedClasses$.FindReferencesHelper[1];
    FindReferencesHelper.prototype = $desc;
    FindReferencesHelper.$__fields__ = ["_command"];
    function FindReferencesHelper__handleReferencesEditor_closure(path, offset) {
      this.path = path;
      this.offset = offset;
      this.$deferredAction();
    }
    FindReferencesHelper__handleReferencesEditor_closure.builtin$cls = "FindReferencesHelper__handleReferencesEditor_closure";
    if (!("name" in FindReferencesHelper__handleReferencesEditor_closure))
      FindReferencesHelper__handleReferencesEditor_closure.name = "FindReferencesHelper__handleReferencesEditor_closure";
    $desc = $collectedClasses$.FindReferencesHelper__handleReferencesEditor_closure[1];
    FindReferencesHelper__handleReferencesEditor_closure.prototype = $desc;
    FindReferencesHelper__handleReferencesEditor_closure.$__fields__ = ["path", "offset"];
    function FindReferencesHelper__handleReferencesEditor__closure(path, offset) {
      this.path = path;
      this.offset = offset;
      this.$deferredAction();
    }
    FindReferencesHelper__handleReferencesEditor__closure.builtin$cls = "FindReferencesHelper__handleReferencesEditor__closure";
    if (!("name" in FindReferencesHelper__handleReferencesEditor__closure))
      FindReferencesHelper__handleReferencesEditor__closure.name = "FindReferencesHelper__handleReferencesEditor__closure";
    $desc = $collectedClasses$.FindReferencesHelper__handleReferencesEditor__closure[1];
    FindReferencesHelper__handleReferencesEditor__closure.prototype = $desc;
    FindReferencesHelper__handleReferencesEditor__closure.$__fields__ = ["path", "offset"];
    function ReferencesSearch(searchType, label, results, resultsFuture) {
      this.searchType = searchType;
      this.label = label;
      this.results = results;
      this.resultsFuture = resultsFuture;
      this.$deferredAction();
    }
    ReferencesSearch.builtin$cls = "ReferencesSearch";
    if (!("name" in ReferencesSearch))
      ReferencesSearch.name = "ReferencesSearch";
    $desc = $collectedClasses$.ReferencesSearch[1];
    ReferencesSearch.prototype = $desc;
    ReferencesSearch.$__fields__ = ["searchType", "label", "results", "resultsFuture"];
    ReferencesSearch.prototype.get$results = function(receiver) {
      return this.results;
    };
    function FindReferencesView(title, subtitle, treeBuilder, disposables, matchParser, root, toolbar, content, tabElement, _closeButton, group) {
      this.title = title;
      this.subtitle = subtitle;
      this.treeBuilder = treeBuilder;
      this.disposables = disposables;
      this.matchParser = matchParser;
      this.root = root;
      this.toolbar = toolbar;
      this.content = content;
      this.tabElement = tabElement;
      this._closeButton = _closeButton;
      this.group = group;
      this.$deferredAction();
    }
    FindReferencesView.builtin$cls = "FindReferencesView";
    if (!("name" in FindReferencesView))
      FindReferencesView.name = "FindReferencesView";
    $desc = $collectedClasses$.FindReferencesView[1];
    FindReferencesView.prototype = $desc;
    FindReferencesView.$__fields__ = ["title", "subtitle", "treeBuilder", "disposables", "matchParser", "root", "toolbar", "content", "tabElement", "_closeButton", "group"];
    FindReferencesView.prototype.get$title = function(receiver) {
      return this.title;
    };
    FindReferencesView.prototype.set$title = function(receiver, v) {
      return this.title = v;
    };
    FindReferencesView.prototype.get$subtitle = function() {
      return this.subtitle;
    };
    function FindReferencesView__handleSearchResults_closure() {
      this.$deferredAction();
    }
    FindReferencesView__handleSearchResults_closure.builtin$cls = "FindReferencesView__handleSearchResults_closure";
    if (!("name" in FindReferencesView__handleSearchResults_closure))
      FindReferencesView__handleSearchResults_closure.name = "FindReferencesView__handleSearchResults_closure";
    $desc = $collectedClasses$.FindReferencesView__handleSearchResults_closure[1];
    FindReferencesView__handleSearchResults_closure.prototype = $desc;
    FindReferencesView__handleSearchResults_closure.$__fields__ = [];
    function FindReferencesView__handleSearchResults_closure0(node) {
      this.node = node;
      this.$deferredAction();
    }
    FindReferencesView__handleSearchResults_closure0.builtin$cls = "FindReferencesView__handleSearchResults_closure0";
    if (!("name" in FindReferencesView__handleSearchResults_closure0))
      FindReferencesView__handleSearchResults_closure0.name = "FindReferencesView__handleSearchResults_closure0";
    $desc = $collectedClasses$.FindReferencesView__handleSearchResults_closure0[1];
    FindReferencesView__handleSearchResults_closure0.prototype = $desc;
    FindReferencesView__handleSearchResults_closure0.$__fields__ = ["node"];
    function _MatchParser(file, lines) {
      this.file = file;
      this.lines = lines;
      this.$deferredAction();
    }
    _MatchParser.builtin$cls = "_MatchParser";
    if (!("name" in _MatchParser))
      _MatchParser.name = "_MatchParser";
    $desc = $collectedClasses$._MatchParser[1];
    _MatchParser.prototype = $desc;
    _MatchParser.$__fields__ = ["file", "lines"];
    _MatchParser.prototype.get$file = function(receiver) {
      return this.file;
    };
    _MatchParser.prototype.get$lines = function() {
      return this.lines;
    };
    function TypeHierarchyHelper(_type_hierarchy$_command) {
      this._type_hierarchy$_command = _type_hierarchy$_command;
      this.$deferredAction();
    }
    TypeHierarchyHelper.builtin$cls = "TypeHierarchyHelper";
    if (!("name" in TypeHierarchyHelper))
      TypeHierarchyHelper.name = "TypeHierarchyHelper";
    $desc = $collectedClasses$.TypeHierarchyHelper[1];
    TypeHierarchyHelper.prototype = $desc;
    TypeHierarchyHelper.$__fields__ = ["_type_hierarchy$_command"];
    function TypeHierarchyHelper__handleHierarchyEditor_closure(path, offset) {
      this.path = path;
      this.offset = offset;
      this.$deferredAction();
    }
    TypeHierarchyHelper__handleHierarchyEditor_closure.builtin$cls = "TypeHierarchyHelper__handleHierarchyEditor_closure";
    if (!("name" in TypeHierarchyHelper__handleHierarchyEditor_closure))
      TypeHierarchyHelper__handleHierarchyEditor_closure.name = "TypeHierarchyHelper__handleHierarchyEditor_closure";
    $desc = $collectedClasses$.TypeHierarchyHelper__handleHierarchyEditor_closure[1];
    TypeHierarchyHelper__handleHierarchyEditor_closure.prototype = $desc;
    TypeHierarchyHelper__handleHierarchyEditor_closure.$__fields__ = ["path", "offset"];
    function TypeHierarchyHelper__handleHierarchyEditor__closure() {
      this.$deferredAction();
    }
    TypeHierarchyHelper__handleHierarchyEditor__closure.builtin$cls = "TypeHierarchyHelper__handleHierarchyEditor__closure";
    if (!("name" in TypeHierarchyHelper__handleHierarchyEditor__closure))
      TypeHierarchyHelper__handleHierarchyEditor__closure.name = "TypeHierarchyHelper__handleHierarchyEditor__closure";
    $desc = $collectedClasses$.TypeHierarchyHelper__handleHierarchyEditor__closure[1];
    TypeHierarchyHelper__handleHierarchyEditor__closure.prototype = $desc;
    TypeHierarchyHelper__handleHierarchyEditor__closure.$__fields__ = [];
    function TypeHierarchyView(title, subtitle, treeBuilder, disposables, _type_hierarchy$_items, root, toolbar, content, tabElement, _closeButton, group) {
      this.title = title;
      this.subtitle = subtitle;
      this.treeBuilder = treeBuilder;
      this.disposables = disposables;
      this._type_hierarchy$_items = _type_hierarchy$_items;
      this.root = root;
      this.toolbar = toolbar;
      this.content = content;
      this.tabElement = tabElement;
      this._closeButton = _closeButton;
      this.group = group;
      this.$deferredAction();
    }
    TypeHierarchyView.builtin$cls = "TypeHierarchyView";
    if (!("name" in TypeHierarchyView))
      TypeHierarchyView.name = "TypeHierarchyView";
    $desc = $collectedClasses$.TypeHierarchyView[1];
    TypeHierarchyView.prototype = $desc;
    TypeHierarchyView.$__fields__ = ["title", "subtitle", "treeBuilder", "disposables", "_type_hierarchy$_items", "root", "toolbar", "content", "tabElement", "_closeButton", "group"];
    TypeHierarchyView.prototype.get$title = function(receiver) {
      return this.title;
    };
    TypeHierarchyView.prototype.set$title = function(receiver, v) {
      return this.title = v;
    };
    TypeHierarchyView.prototype.get$subtitle = function() {
      return this.subtitle;
    };
    function TypeHierarchyView__sort_closure(items) {
      this.items = items;
      this.$deferredAction();
    }
    TypeHierarchyView__sort_closure.builtin$cls = "TypeHierarchyView__sort_closure";
    if (!("name" in TypeHierarchyView__sort_closure))
      TypeHierarchyView__sort_closure.name = "TypeHierarchyView__sort_closure";
    $desc = $collectedClasses$.TypeHierarchyView__sort_closure[1];
    TypeHierarchyView__sort_closure.prototype = $desc;
    TypeHierarchyView__sort_closure.$__fields__ = ["items"];
    function TypeHierarchyView__render_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    TypeHierarchyView__render_closure.builtin$cls = "TypeHierarchyView__render_closure";
    if (!("name" in TypeHierarchyView__render_closure))
      TypeHierarchyView__render_closure.name = "TypeHierarchyView__render_closure";
    $desc = $collectedClasses$.TypeHierarchyView__render_closure[1];
    TypeHierarchyView__render_closure.prototype = $desc;
    TypeHierarchyView__render_closure.$__fields__ = ["$this"];
    function TypeHierarchyView__render_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    TypeHierarchyView__render_closure0.builtin$cls = "TypeHierarchyView__render_closure0";
    if (!("name" in TypeHierarchyView__render_closure0))
      TypeHierarchyView__render_closure0.name = "TypeHierarchyView__render_closure0";
    $desc = $collectedClasses$.TypeHierarchyView__render_closure0[1];
    TypeHierarchyView__render_closure0.prototype = $desc;
    TypeHierarchyView__render_closure0.$__fields__ = ["$this"];
    function AnalysisServer(subs, disposables, _serverActiveController, _serverBusyController, _onSendController, _onReceiveController, _onNavigatonController, _onOutlineController, _server, _job, _willSend, knownRoots) {
      this.subs = subs;
      this.disposables = disposables;
      this._serverActiveController = _serverActiveController;
      this._serverBusyController = _serverBusyController;
      this._onSendController = _onSendController;
      this._onReceiveController = _onReceiveController;
      this._onNavigatonController = _onNavigatonController;
      this._onOutlineController = _onOutlineController;
      this._server = _server;
      this._job = _job;
      this._willSend = _willSend;
      this.knownRoots = knownRoots;
      this.$deferredAction();
    }
    AnalysisServer.builtin$cls = "AnalysisServer";
    if (!("name" in AnalysisServer))
      AnalysisServer.name = "AnalysisServer";
    $desc = $collectedClasses$.AnalysisServer[1];
    AnalysisServer.prototype = $desc;
    AnalysisServer.$__fields__ = ["subs", "disposables", "_serverActiveController", "_serverBusyController", "_onSendController", "_onReceiveController", "_onNavigatonController", "_onOutlineController", "_server", "_job", "_willSend", "knownRoots"];
    AnalysisServer.prototype.get$_server = function() {
      return this._server;
    };
    function AnalysisServer_closure(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    AnalysisServer_closure.builtin$cls = "AnalysisServer_closure";
    if (!("name" in AnalysisServer_closure))
      AnalysisServer_closure.name = "AnalysisServer_closure";
    $desc = $collectedClasses$.AnalysisServer_closure[1];
    AnalysisServer_closure.prototype = $desc;
    AnalysisServer_closure.$__fields__ = ["_box_0"];
    function AnalysisServer__setup_closure() {
      this.$deferredAction();
    }
    AnalysisServer__setup_closure.builtin$cls = "AnalysisServer__setup_closure";
    if (!("name" in AnalysisServer__setup_closure))
      AnalysisServer__setup_closure.name = "AnalysisServer__setup_closure";
    $desc = $collectedClasses$.AnalysisServer__setup_closure[1];
    AnalysisServer__setup_closure.prototype = $desc;
    AnalysisServer__setup_closure.$__fields__ = [];
    function AnalysisServer__setup_closure0(trim) {
      this.trim = trim;
      this.$deferredAction();
    }
    AnalysisServer__setup_closure0.builtin$cls = "AnalysisServer__setup_closure0";
    if (!("name" in AnalysisServer__setup_closure0))
      AnalysisServer__setup_closure0.name = "AnalysisServer__setup_closure0";
    $desc = $collectedClasses$.AnalysisServer__setup_closure0[1];
    AnalysisServer__setup_closure0.prototype = $desc;
    AnalysisServer__setup_closure0.$__fields__ = ["trim"];
    function AnalysisServer__setup_closure1(trim) {
      this.trim = trim;
      this.$deferredAction();
    }
    AnalysisServer__setup_closure1.builtin$cls = "AnalysisServer__setup_closure1";
    if (!("name" in AnalysisServer__setup_closure1))
      AnalysisServer__setup_closure1.name = "AnalysisServer__setup_closure1";
    $desc = $collectedClasses$.AnalysisServer__setup_closure1[1];
    AnalysisServer__setup_closure1.prototype = $desc;
    AnalysisServer__setup_closure1.$__fields__ = ["trim"];
    function AnalysisServer_updateRoots_closure() {
      this.$deferredAction();
    }
    AnalysisServer_updateRoots_closure.builtin$cls = "AnalysisServer_updateRoots_closure";
    if (!("name" in AnalysisServer_updateRoots_closure))
      AnalysisServer_updateRoots_closure.name = "AnalysisServer_updateRoots_closure";
    $desc = $collectedClasses$.AnalysisServer_updateRoots_closure[1];
    AnalysisServer_updateRoots_closure.prototype = $desc;
    AnalysisServer_updateRoots_closure.$__fields__ = [];
    function AnalysisServer__reconcileRoots_closure() {
      this.$deferredAction();
    }
    AnalysisServer__reconcileRoots_closure.builtin$cls = "AnalysisServer__reconcileRoots_closure";
    if (!("name" in AnalysisServer__reconcileRoots_closure))
      AnalysisServer__reconcileRoots_closure.name = "AnalysisServer__reconcileRoots_closure";
    $desc = $collectedClasses$.AnalysisServer__reconcileRoots_closure[1];
    AnalysisServer__reconcileRoots_closure.prototype = $desc;
    AnalysisServer__reconcileRoots_closure.$__fields__ = [];
    function AnalysisServer__focusedEditorChanged_closure($this, path) {
      this.$this = $this;
      this.path = path;
      this.$deferredAction();
    }
    AnalysisServer__focusedEditorChanged_closure.builtin$cls = "AnalysisServer__focusedEditorChanged_closure";
    if (!("name" in AnalysisServer__focusedEditorChanged_closure))
      AnalysisServer__focusedEditorChanged_closure.name = "AnalysisServer__focusedEditorChanged_closure";
    $desc = $collectedClasses$.AnalysisServer__focusedEditorChanged_closure[1];
    AnalysisServer__focusedEditorChanged_closure.prototype = $desc;
    AnalysisServer__focusedEditorChanged_closure.$__fields__ = ["$this", "path"];
    function AnalysisServer__searchResultsStream_closure(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    AnalysisServer__searchResultsStream_closure.builtin$cls = "AnalysisServer__searchResultsStream_closure";
    if (!("name" in AnalysisServer__searchResultsStream_closure))
      AnalysisServer__searchResultsStream_closure.name = "AnalysisServer__searchResultsStream_closure";
    $desc = $collectedClasses$.AnalysisServer__searchResultsStream_closure[1];
    AnalysisServer__searchResultsStream_closure.prototype = $desc;
    AnalysisServer__searchResultsStream_closure.$__fields__ = ["_box_0"];
    function AnalysisServer__searchResultsStream_closure0(_box_0, id, controller) {
      this._box_0 = _box_0;
      this.id = id;
      this.controller = controller;
      this.$deferredAction();
    }
    AnalysisServer__searchResultsStream_closure0.builtin$cls = "AnalysisServer__searchResultsStream_closure0";
    if (!("name" in AnalysisServer__searchResultsStream_closure0))
      AnalysisServer__searchResultsStream_closure0.name = "AnalysisServer__searchResultsStream_closure0";
    $desc = $collectedClasses$.AnalysisServer__searchResultsStream_closure0[1];
    AnalysisServer__searchResultsStream_closure0.prototype = $desc;
    AnalysisServer__searchResultsStream_closure0.$__fields__ = ["_box_0", "id", "controller"];
    function AnalysisServer__initNewServer_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    AnalysisServer__initNewServer_closure.builtin$cls = "AnalysisServer__initNewServer_closure";
    if (!("name" in AnalysisServer__initNewServer_closure))
      AnalysisServer__initNewServer_closure.name = "AnalysisServer__initNewServer_closure";
    $desc = $collectedClasses$.AnalysisServer__initNewServer_closure[1];
    AnalysisServer__initNewServer_closure.prototype = $desc;
    AnalysisServer__initNewServer_closure.$__fields__ = ["$this"];
    function AnalysisServer__initNewServer_closure0($this, server) {
      this.$this = $this;
      this.server = server;
      this.$deferredAction();
    }
    AnalysisServer__initNewServer_closure0.builtin$cls = "AnalysisServer__initNewServer_closure0";
    if (!("name" in AnalysisServer__initNewServer_closure0))
      AnalysisServer__initNewServer_closure0.name = "AnalysisServer__initNewServer_closure0";
    $desc = $collectedClasses$.AnalysisServer__initNewServer_closure0[1];
    AnalysisServer__initNewServer_closure0.prototype = $desc;
    AnalysisServer__initNewServer_closure0.$__fields__ = ["$this", "server"];
    function AnalysisServer__initNewServer_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    AnalysisServer__initNewServer_closure1.builtin$cls = "AnalysisServer__initNewServer_closure1";
    if (!("name" in AnalysisServer__initNewServer_closure1))
      AnalysisServer__initNewServer_closure1.name = "AnalysisServer__initNewServer_closure1";
    $desc = $collectedClasses$.AnalysisServer__initNewServer_closure1[1];
    AnalysisServer__initNewServer_closure1.prototype = $desc;
    AnalysisServer__initNewServer_closure1.$__fields__ = ["$this"];
    function AnalysisServer__initNewServer_closure2($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    AnalysisServer__initNewServer_closure2.builtin$cls = "AnalysisServer__initNewServer_closure2";
    if (!("name" in AnalysisServer__initNewServer_closure2))
      AnalysisServer__initNewServer_closure2.name = "AnalysisServer__initNewServer_closure2";
    $desc = $collectedClasses$.AnalysisServer__initNewServer_closure2[1];
    AnalysisServer__initNewServer_closure2.prototype = $desc;
    AnalysisServer__initNewServer_closure2.$__fields__ = ["$this"];
    function AnalysisServer__initNewServer_closure3($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    AnalysisServer__initNewServer_closure3.builtin$cls = "AnalysisServer__initNewServer_closure3";
    if (!("name" in AnalysisServer__initNewServer_closure3))
      AnalysisServer__initNewServer_closure3.name = "AnalysisServer__initNewServer_closure3";
    $desc = $collectedClasses$.AnalysisServer__initNewServer_closure3[1];
    AnalysisServer__initNewServer_closure3.prototype = $desc;
    AnalysisServer__initNewServer_closure3.$__fields__ = ["$this"];
    function AnalysisServer__initNewServer_closure4($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    AnalysisServer__initNewServer_closure4.builtin$cls = "AnalysisServer__initNewServer_closure4";
    if (!("name" in AnalysisServer__initNewServer_closure4))
      AnalysisServer__initNewServer_closure4.name = "AnalysisServer__initNewServer_closure4";
    $desc = $collectedClasses$.AnalysisServer__initNewServer_closure4[1];
    AnalysisServer__initNewServer_closure4.prototype = $desc;
    AnalysisServer__initNewServer_closure4.$__fields__ = ["$this"];
    function AnalysisServer__initNewServer_closure5($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    AnalysisServer__initNewServer_closure5.builtin$cls = "AnalysisServer__initNewServer_closure5";
    if (!("name" in AnalysisServer__initNewServer_closure5))
      AnalysisServer__initNewServer_closure5.name = "AnalysisServer__initNewServer_closure5";
    $desc = $collectedClasses$.AnalysisServer__initNewServer_closure5[1];
    AnalysisServer__initNewServer_closure5.prototype = $desc;
    AnalysisServer__initNewServer_closure5.$__fields__ = ["$this"];
    function _AnalyzingJob(completer, _infoAction, name, _schedulingRule) {
      this.completer = completer;
      this._infoAction = _infoAction;
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    _AnalyzingJob.builtin$cls = "_AnalyzingJob";
    if (!("name" in _AnalyzingJob))
      _AnalyzingJob.name = "_AnalyzingJob";
    $desc = $collectedClasses$._AnalyzingJob[1];
    _AnalyzingJob.prototype = $desc;
    _AnalyzingJob.$__fields__ = ["completer", "_infoAction", "name", "_schedulingRule"];
    function _AnalyzingJob_closure() {
      this.$deferredAction();
    }
    _AnalyzingJob_closure.builtin$cls = "_AnalyzingJob_closure";
    if (!("name" in _AnalyzingJob_closure))
      _AnalyzingJob_closure.name = "_AnalyzingJob_closure";
    $desc = $collectedClasses$._AnalyzingJob_closure[1];
    _AnalyzingJob_closure.prototype = $desc;
    _AnalyzingJob_closure.$__fields__ = [];
    function _AnalyzingJob_start_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _AnalyzingJob_start_closure.builtin$cls = "_AnalyzingJob_start_closure";
    if (!("name" in _AnalyzingJob_start_closure))
      _AnalyzingJob_start_closure.name = "_AnalyzingJob_start_closure";
    $desc = $collectedClasses$._AnalyzingJob_start_closure[1];
    _AnalyzingJob_start_closure.prototype = $desc;
    _AnalyzingJob_start_closure.$__fields__ = ["$this"];
    function _AnalysisServerWrapper(process, _processCompleter, analyzing, _analyzingController, _disposedController, _streamSub, _writeMessage, _analysis_server_lib$_id, _analysis_server_lib$_completers, _methodNames, _jsonEncoder, _domains, _onSend, _onReceive, _analysis_server_lib$_willSend, _analysis_server_lib$_server, _analysis, _completion, _search, _edit, _execution, _diagnostic) {
      this.process = process;
      this._processCompleter = _processCompleter;
      this.analyzing = analyzing;
      this._analyzingController = _analyzingController;
      this._disposedController = _disposedController;
      this._streamSub = _streamSub;
      this._writeMessage = _writeMessage;
      this._analysis_server_lib$_id = _analysis_server_lib$_id;
      this._analysis_server_lib$_completers = _analysis_server_lib$_completers;
      this._methodNames = _methodNames;
      this._jsonEncoder = _jsonEncoder;
      this._domains = _domains;
      this._onSend = _onSend;
      this._onReceive = _onReceive;
      this._analysis_server_lib$_willSend = _analysis_server_lib$_willSend;
      this._analysis_server_lib$_server = _analysis_server_lib$_server;
      this._analysis = _analysis;
      this._completion = _completion;
      this._search = _search;
      this._edit = _edit;
      this._execution = _execution;
      this._diagnostic = _diagnostic;
      this.$deferredAction();
    }
    _AnalysisServerWrapper.builtin$cls = "_AnalysisServerWrapper";
    if (!("name" in _AnalysisServerWrapper))
      _AnalysisServerWrapper.name = "_AnalysisServerWrapper";
    $desc = $collectedClasses$._AnalysisServerWrapper[1];
    _AnalysisServerWrapper.prototype = $desc;
    _AnalysisServerWrapper.$__fields__ = ["process", "_processCompleter", "analyzing", "_analyzingController", "_disposedController", "_streamSub", "_writeMessage", "_analysis_server_lib$_id", "_analysis_server_lib$_completers", "_methodNames", "_jsonEncoder", "_domains", "_onSend", "_onReceive", "_analysis_server_lib$_willSend", "_analysis_server_lib$_server", "_analysis", "_completion", "_search", "_edit", "_execution", "_diagnostic"];
    function _AnalysisServerWrapper_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _AnalysisServerWrapper_closure.builtin$cls = "_AnalysisServerWrapper_closure";
    if (!("name" in _AnalysisServerWrapper_closure))
      _AnalysisServerWrapper_closure.name = "_AnalysisServerWrapper_closure";
    $desc = $collectedClasses$._AnalysisServerWrapper_closure[1];
    _AnalysisServerWrapper_closure.prototype = $desc;
    _AnalysisServerWrapper_closure.$__fields__ = ["$this"];
    function _AnalysisServerWrapper_setup_closure() {
      this.$deferredAction();
    }
    _AnalysisServerWrapper_setup_closure.builtin$cls = "_AnalysisServerWrapper_setup_closure";
    if (!("name" in _AnalysisServerWrapper_setup_closure))
      _AnalysisServerWrapper_setup_closure.name = "_AnalysisServerWrapper_setup_closure";
    $desc = $collectedClasses$._AnalysisServerWrapper_setup_closure[1];
    _AnalysisServerWrapper_setup_closure.prototype = $desc;
    _AnalysisServerWrapper_setup_closure.$__fields__ = [];
    function _AnalysisServerWrapper_setup_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _AnalysisServerWrapper_setup_closure0.builtin$cls = "_AnalysisServerWrapper_setup_closure0";
    if (!("name" in _AnalysisServerWrapper_setup_closure0))
      _AnalysisServerWrapper_setup_closure0.name = "_AnalysisServerWrapper_setup_closure0";
    $desc = $collectedClasses$._AnalysisServerWrapper_setup_closure0[1];
    _AnalysisServerWrapper_setup_closure0.prototype = $desc;
    _AnalysisServerWrapper_setup_closure0.$__fields__ = ["$this"];
    function _AnalysisServerWrapper_setup_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _AnalysisServerWrapper_setup_closure1.builtin$cls = "_AnalysisServerWrapper_setup_closure1";
    if (!("name" in _AnalysisServerWrapper_setup_closure1))
      _AnalysisServerWrapper_setup_closure1.name = "_AnalysisServerWrapper_setup_closure1";
    $desc = $collectedClasses$._AnalysisServerWrapper_setup_closure1[1];
    _AnalysisServerWrapper_setup_closure1.prototype = $desc;
    _AnalysisServerWrapper_setup_closure1.$__fields__ = ["$this"];
    function _AnalysisServerWrapper_setup__closure($this, error) {
      this.$this = $this;
      this.error = error;
      this.$deferredAction();
    }
    _AnalysisServerWrapper_setup__closure.builtin$cls = "_AnalysisServerWrapper_setup__closure";
    if (!("name" in _AnalysisServerWrapper_setup__closure))
      _AnalysisServerWrapper_setup__closure.name = "_AnalysisServerWrapper_setup__closure";
    $desc = $collectedClasses$._AnalysisServerWrapper_setup__closure[1];
    _AnalysisServerWrapper_setup__closure.prototype = $desc;
    _AnalysisServerWrapper_setup__closure.$__fields__ = ["$this", "error"];
    function _AnalysisServerWrapper_restart_closure($this, sdk) {
      this.$this = $this;
      this.sdk = sdk;
      this.$deferredAction();
    }
    _AnalysisServerWrapper_restart_closure.builtin$cls = "_AnalysisServerWrapper_restart_closure";
    if (!("name" in _AnalysisServerWrapper_restart_closure))
      _AnalysisServerWrapper_restart_closure.name = "_AnalysisServerWrapper_restart_closure";
    $desc = $collectedClasses$._AnalysisServerWrapper_restart_closure[1];
    _AnalysisServerWrapper_restart_closure.prototype = $desc;
    _AnalysisServerWrapper_restart_closure.$__fields__ = ["$this", "sdk"];
    function _AnalysisServerWrapper_restart__closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _AnalysisServerWrapper_restart__closure.builtin$cls = "_AnalysisServerWrapper_restart__closure";
    if (!("name" in _AnalysisServerWrapper_restart__closure))
      _AnalysisServerWrapper_restart__closure.name = "_AnalysisServerWrapper_restart__closure";
    $desc = $collectedClasses$._AnalysisServerWrapper_restart__closure[1];
    _AnalysisServerWrapper_restart__closure.prototype = $desc;
    _AnalysisServerWrapper_restart__closure.$__fields__ = ["$this"];
    function _AnalysisServerWrapper_restart_closure0(startServer) {
      this.startServer = startServer;
      this.$deferredAction();
    }
    _AnalysisServerWrapper_restart_closure0.builtin$cls = "_AnalysisServerWrapper_restart_closure0";
    if (!("name" in _AnalysisServerWrapper_restart_closure0))
      _AnalysisServerWrapper_restart_closure0.name = "_AnalysisServerWrapper_restart_closure0";
    $desc = $collectedClasses$._AnalysisServerWrapper_restart_closure0[1];
    _AnalysisServerWrapper_restart_closure0.prototype = $desc;
    _AnalysisServerWrapper_restart_closure0.$__fields__ = ["startServer"];
    function _AnalysisServerWrapper_kill_closure() {
      this.$deferredAction();
    }
    _AnalysisServerWrapper_kill_closure.builtin$cls = "_AnalysisServerWrapper_kill_closure";
    if (!("name" in _AnalysisServerWrapper_kill_closure))
      _AnalysisServerWrapper_kill_closure.name = "_AnalysisServerWrapper_kill_closure";
    $desc = $collectedClasses$._AnalysisServerWrapper_kill_closure[1];
    _AnalysisServerWrapper_kill_closure.prototype = $desc;
    _AnalysisServerWrapper_kill_closure.$__fields__ = [];
    function _AnalysisServerWrapper__startProcess_closure() {
      this.$deferredAction();
    }
    _AnalysisServerWrapper__startProcess_closure.builtin$cls = "_AnalysisServerWrapper__startProcess_closure";
    if (!("name" in _AnalysisServerWrapper__startProcess_closure))
      _AnalysisServerWrapper__startProcess_closure.name = "_AnalysisServerWrapper__startProcess_closure";
    $desc = $collectedClasses$._AnalysisServerWrapper__startProcess_closure[1];
    _AnalysisServerWrapper__startProcess_closure.prototype = $desc;
    _AnalysisServerWrapper__startProcess_closure.$__fields__ = [];
    function _AnalysisServerWrapper__startProcess_closure0(sc) {
      this.sc = sc;
      this.$deferredAction();
    }
    _AnalysisServerWrapper__startProcess_closure0.builtin$cls = "_AnalysisServerWrapper__startProcess_closure0";
    if (!("name" in _AnalysisServerWrapper__startProcess_closure0))
      _AnalysisServerWrapper__startProcess_closure0.name = "_AnalysisServerWrapper__startProcess_closure0";
    $desc = $collectedClasses$._AnalysisServerWrapper__startProcess_closure0[1];
    _AnalysisServerWrapper__startProcess_closure0.prototype = $desc;
    _AnalysisServerWrapper__startProcess_closure0.$__fields__ = ["sc"];
    function _AnalysisServerWrapper__startProcess_closure1(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    _AnalysisServerWrapper__startProcess_closure1.builtin$cls = "_AnalysisServerWrapper__startProcess_closure1";
    if (!("name" in _AnalysisServerWrapper__startProcess_closure1))
      _AnalysisServerWrapper__startProcess_closure1.name = "_AnalysisServerWrapper__startProcess_closure1";
    $desc = $collectedClasses$._AnalysisServerWrapper__startProcess_closure1[1];
    _AnalysisServerWrapper__startProcess_closure1.prototype = $desc;
    _AnalysisServerWrapper__startProcess_closure1.$__fields__ = ["completer"];
    function _AnalysisServerWrapper__messageWriter_closure(process) {
      this.process = process;
      this.$deferredAction();
    }
    _AnalysisServerWrapper__messageWriter_closure.builtin$cls = "_AnalysisServerWrapper__messageWriter_closure";
    if (!("name" in _AnalysisServerWrapper__messageWriter_closure))
      _AnalysisServerWrapper__messageWriter_closure.name = "_AnalysisServerWrapper__messageWriter_closure";
    $desc = $collectedClasses$._AnalysisServerWrapper__messageWriter_closure[1];
    _AnalysisServerWrapper__messageWriter_closure.prototype = $desc;
    _AnalysisServerWrapper__messageWriter_closure.$__fields__ = ["process"];
    function AnalysisRequestJob(_fn, name, _schedulingRule) {
      this._fn = _fn;
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    AnalysisRequestJob.builtin$cls = "AnalysisRequestJob";
    if (!("name" in AnalysisRequestJob))
      AnalysisRequestJob.name = "AnalysisRequestJob";
    $desc = $collectedClasses$.AnalysisRequestJob[1];
    AnalysisRequestJob.prototype = $desc;
    AnalysisRequestJob.$__fields__ = ["_fn", "name", "_schedulingRule"];
    function AnalysisRequestJob_run_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    AnalysisRequestJob_run_closure.builtin$cls = "AnalysisRequestJob_run_closure";
    if (!("name" in AnalysisRequestJob_run_closure))
      AnalysisRequestJob_run_closure.name = "AnalysisRequestJob_run_closure";
    $desc = $collectedClasses$.AnalysisRequestJob_run_closure[1];
    AnalysisRequestJob_run_closure.prototype = $desc;
    AnalysisRequestJob_run_closure.$__fields__ = ["$this"];
    function AutocompleteProvider() {
      this.$deferredAction();
    }
    AutocompleteProvider.builtin$cls = "AutocompleteProvider";
    if (!("name" in AutocompleteProvider))
      AutocompleteProvider.name = "AutocompleteProvider";
    $desc = $collectedClasses$.AutocompleteProvider[1];
    AutocompleteProvider.prototype = $desc;
    AutocompleteProvider.$__fields__ = [];
    function AutocompleteProvider__getSuggestions_suggestionToProxy() {
      this.$deferredAction();
    }
    AutocompleteProvider__getSuggestions_suggestionToProxy.builtin$cls = "AutocompleteProvider__getSuggestions_suggestionToProxy";
    if (!("name" in AutocompleteProvider__getSuggestions_suggestionToProxy))
      AutocompleteProvider__getSuggestions_suggestionToProxy.name = "AutocompleteProvider__getSuggestions_suggestionToProxy";
    $desc = $collectedClasses$.AutocompleteProvider__getSuggestions_suggestionToProxy[1];
    AutocompleteProvider__getSuggestions_suggestionToProxy.prototype = $desc;
    AutocompleteProvider__getSuggestions_suggestionToProxy.$__fields__ = [];
    function AutocompleteProvider__getSuggestions_closure(opts) {
      this.opts = opts;
      this.$deferredAction();
    }
    AutocompleteProvider__getSuggestions_closure.builtin$cls = "AutocompleteProvider__getSuggestions_closure";
    if (!("name" in AutocompleteProvider__getSuggestions_closure))
      AutocompleteProvider__getSuggestions_closure.name = "AutocompleteProvider__getSuggestions_closure";
    $desc = $collectedClasses$.AutocompleteProvider__getSuggestions_closure[1];
    AutocompleteProvider__getSuggestions_closure.prototype = $desc;
    AutocompleteProvider__getSuggestions_closure.$__fields__ = ["opts"];
    function AutocompleteProvider__getSuggestions_closure0(opts) {
      this.opts = opts;
      this.$deferredAction();
    }
    AutocompleteProvider__getSuggestions_closure0.builtin$cls = "AutocompleteProvider__getSuggestions_closure0";
    if (!("name" in AutocompleteProvider__getSuggestions_closure0))
      AutocompleteProvider__getSuggestions_closure0.name = "AutocompleteProvider__getSuggestions_closure0";
    $desc = $collectedClasses$.AutocompleteProvider__getSuggestions_closure0[1];
    AutocompleteProvider__getSuggestions_closure0.prototype = $desc;
    AutocompleteProvider__getSuggestions_closure0.$__fields__ = ["opts"];
    function AutocompleteProvider__getSuggestions_closure1(suggestionToProxy, timer) {
      this.suggestionToProxy = suggestionToProxy;
      this.timer = timer;
      this.$deferredAction();
    }
    AutocompleteProvider__getSuggestions_closure1.builtin$cls = "AutocompleteProvider__getSuggestions_closure1";
    if (!("name" in AutocompleteProvider__getSuggestions_closure1))
      AutocompleteProvider__getSuggestions_closure1.name = "AutocompleteProvider__getSuggestions_closure1";
    $desc = $collectedClasses$.AutocompleteProvider__getSuggestions_closure1[1];
    AutocompleteProvider__getSuggestions_closure1.prototype = $desc;
    AutocompleteProvider__getSuggestions_closure1.$__fields__ = ["suggestionToProxy", "timer"];
    function AutocompleteProvider__getSuggestions_closure2(suggestionToProxy, timer) {
      this.suggestionToProxy = suggestionToProxy;
      this.timer = timer;
      this.$deferredAction();
    }
    AutocompleteProvider__getSuggestions_closure2.builtin$cls = "AutocompleteProvider__getSuggestions_closure2";
    if (!("name" in AutocompleteProvider__getSuggestions_closure2))
      AutocompleteProvider__getSuggestions_closure2.name = "AutocompleteProvider__getSuggestions_closure2";
    $desc = $collectedClasses$.AutocompleteProvider__getSuggestions_closure2[1];
    AutocompleteProvider__getSuggestions_closure2.prototype = $desc;
    AutocompleteProvider__getSuggestions_closure2.$__fields__ = ["suggestionToProxy", "timer"];
    function AutocompleteProvider__getSuggestions_closure3() {
      this.$deferredAction();
    }
    AutocompleteProvider__getSuggestions_closure3.builtin$cls = "AutocompleteProvider__getSuggestions_closure3";
    if (!("name" in AutocompleteProvider__getSuggestions_closure3))
      AutocompleteProvider__getSuggestions_closure3.name = "AutocompleteProvider__getSuggestions_closure3";
    $desc = $collectedClasses$.AutocompleteProvider__getSuggestions_closure3[1];
    AutocompleteProvider__getSuggestions_closure3.prototype = $desc;
    AutocompleteProvider__getSuggestions_closure3.$__fields__ = [];
    function AutocompleteOptions(editor, bufferPosition, prefix) {
      this.editor = editor;
      this.bufferPosition = bufferPosition;
      this.prefix = prefix;
      this.$deferredAction();
    }
    AutocompleteOptions.builtin$cls = "AutocompleteOptions";
    if (!("name" in AutocompleteOptions))
      AutocompleteOptions.name = "AutocompleteOptions";
    $desc = $collectedClasses$.AutocompleteOptions[1];
    AutocompleteOptions.prototype = $desc;
    AutocompleteOptions.$__fields__ = ["editor", "bufferPosition", "prefix"];
    AutocompleteOptions.prototype.get$editor = function() {
      return this.editor;
    };
    AutocompleteOptions.prototype.get$prefix = function() {
      return this.prefix;
    };
    function Suggestion(text, snippet, displayText, replacementPrefix, type, leftLabel, leftLabelHTML, rightLabel, rightLabelHTML, className, iconHTML, description, descriptionMoreURL, requiredImport, selectionOffset, itemIndex) {
      this.text = text;
      this.snippet = snippet;
      this.displayText = displayText;
      this.replacementPrefix = replacementPrefix;
      this.type = type;
      this.leftLabel = leftLabel;
      this.leftLabelHTML = leftLabelHTML;
      this.rightLabel = rightLabel;
      this.rightLabelHTML = rightLabelHTML;
      this.className = className;
      this.iconHTML = iconHTML;
      this.description = description;
      this.descriptionMoreURL = descriptionMoreURL;
      this.requiredImport = requiredImport;
      this.selectionOffset = selectionOffset;
      this.itemIndex = itemIndex;
      this.$deferredAction();
    }
    Suggestion.builtin$cls = "Suggestion";
    if (!("name" in Suggestion))
      Suggestion.name = "Suggestion";
    $desc = $collectedClasses$.Suggestion[1];
    Suggestion.prototype = $desc;
    Suggestion.$__fields__ = ["text", "snippet", "displayText", "replacementPrefix", "type", "leftLabel", "leftLabelHTML", "rightLabel", "rightLabelHTML", "className", "iconHTML", "description", "descriptionMoreURL", "requiredImport", "selectionOffset", "itemIndex"];
    Suggestion.prototype.get$text = function(receiver) {
      return this.text;
    };
    Suggestion.prototype.set$text = function(receiver, v) {
      return this.text = v;
    };
    Suggestion.prototype.get$type = function(receiver) {
      return this.type;
    };
    Suggestion.prototype.get$className = function(receiver) {
      return this.className;
    };
    Suggestion.prototype.get$selectionOffset = function() {
      return this.selectionOffset;
    };
    Suggestion.prototype.set$itemIndex = function(v) {
      return this.itemIndex = v;
    };
    function _AutoCompleteOverride(editor, items, renderer, completer, hasShown, $ti) {
      this.editor = editor;
      this.items = items;
      this.renderer = renderer;
      this.completer = completer;
      this.hasShown = hasShown;
      this.$ti = $ti;
      this.$deferredAction();
    }
    _AutoCompleteOverride.builtin$cls = "_AutoCompleteOverride";
    if (!("name" in _AutoCompleteOverride))
      _AutoCompleteOverride.name = "_AutoCompleteOverride";
    $desc = $collectedClasses$._AutoCompleteOverride[1];
    _AutoCompleteOverride.prototype = $desc;
    _AutoCompleteOverride.$__fields__ = ["editor", "items", "renderer", "completer", "hasShown"];
    _AutoCompleteOverride.prototype.get$editor = function() {
      return this.editor;
    };
    function LinterProvider() {
      this.$deferredAction();
    }
    LinterProvider.builtin$cls = "LinterProvider";
    if (!("name" in LinterProvider))
      LinterProvider.name = "LinterProvider";
    $desc = $collectedClasses$.LinterProvider[1];
    LinterProvider.prototype = $desc;
    LinterProvider.$__fields__ = [];
    function LinterConsumer() {
      this.$deferredAction();
    }
    LinterConsumer.builtin$cls = "LinterConsumer";
    if (!("name" in LinterConsumer))
      LinterConsumer.name = "LinterConsumer";
    $desc = $collectedClasses$.LinterConsumer[1];
    LinterConsumer.prototype = $desc;
    LinterConsumer.$__fields__ = [];
    function LinterService(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    LinterService.builtin$cls = "LinterService";
    if (!("name" in LinterService))
      LinterService.name = "LinterService";
    $desc = $collectedClasses$.LinterService[1];
    LinterService.prototype = $desc;
    LinterService.$__fields__ = ["obj"];
    function LinterService_setMessages_closure() {
      this.$deferredAction();
    }
    LinterService_setMessages_closure.builtin$cls = "LinterService_setMessages_closure";
    if (!("name" in LinterService_setMessages_closure))
      LinterService_setMessages_closure.name = "LinterService_setMessages_closure";
    $desc = $collectedClasses$.LinterService_setMessages_closure[1];
    LinterService_setMessages_closure.prototype = $desc;
    LinterService_setMessages_closure.$__fields__ = [];
    function LintMessage(type, text, html, filePath, range) {
      this.type = type;
      this.text = text;
      this.html = html;
      this.filePath = filePath;
      this.range = range;
      this.$deferredAction();
    }
    LintMessage.builtin$cls = "LintMessage";
    if (!("name" in LintMessage))
      LintMessage.name = "LintMessage";
    $desc = $collectedClasses$.LintMessage[1];
    LintMessage.prototype = $desc;
    LintMessage.$__fields__ = ["type", "text", "html", "filePath", "range"];
    LintMessage.prototype.get$type = function(receiver) {
      return this.type;
    };
    LintMessage.prototype.get$text = function(receiver) {
      return this.text;
    };
    function Rn(start, end) {
      this.start = start;
      this.end = end;
      this.$deferredAction();
    }
    Rn.builtin$cls = "Rn";
    if (!("name" in Rn))
      Rn.name = "Rn";
    $desc = $collectedClasses$.Rn[1];
    Rn.prototype = $desc;
    Rn.$__fields__ = ["start", "end"];
    Rn.prototype.get$start = function(receiver) {
      return this.start;
    };
    Rn.prototype.get$end = function(receiver) {
      return this.end;
    };
    function Pt(row, column) {
      this.row = row;
      this.column = column;
      this.$deferredAction();
    }
    Pt.builtin$cls = "Pt";
    if (!("name" in Pt))
      Pt.name = "Pt";
    $desc = $collectedClasses$.Pt[1];
    Pt.prototype = $desc;
    Pt.$__fields__ = ["row", "column"];
    Pt.prototype.get$column = function() {
      return this.column;
    };
    function install_closure() {
      this.$deferredAction();
    }
    install_closure.builtin$cls = "install_closure";
    if (!("name" in install_closure))
      install_closure.name = "install_closure";
    $desc = $collectedClasses$.install_closure[1];
    install_closure.prototype = $desc;
    install_closure.$__fields__ = [];
    function _InstallJob(packages, quitRequested, errorCount, name, _schedulingRule) {
      this.packages = packages;
      this.quitRequested = quitRequested;
      this.errorCount = errorCount;
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    _InstallJob.builtin$cls = "_InstallJob";
    if (!("name" in _InstallJob))
      _InstallJob.name = "_InstallJob";
    $desc = $collectedClasses$._InstallJob[1];
    _InstallJob.prototype = $desc;
    _InstallJob.$__fields__ = ["packages", "quitRequested", "errorCount", "name", "_schedulingRule"];
    function _InstallJob_run_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _InstallJob_run_closure.builtin$cls = "_InstallJob_run_closure";
    if (!("name" in _InstallJob_run_closure))
      _InstallJob_run_closure.name = "_InstallJob_run_closure";
    $desc = $collectedClasses$._InstallJob_run_closure[1];
    _InstallJob_run_closure.prototype = $desc;
    _InstallJob_run_closure.$__fields__ = ["$this"];
    function _InstallJob_run_closure0($this, helper) {
      this.$this = $this;
      this.helper = helper;
      this.$deferredAction();
    }
    _InstallJob_run_closure0.builtin$cls = "_InstallJob_run_closure0";
    if (!("name" in _InstallJob_run_closure0))
      _InstallJob_run_closure0.name = "_InstallJob_run_closure0";
    $desc = $collectedClasses$._InstallJob_run_closure0[1];
    _InstallJob_run_closure0.prototype = $desc;
    _InstallJob_run_closure0.$__fields__ = ["$this", "helper"];
    function _InstallJob_run_closure1($this, helper) {
      this.$this = $this;
      this.helper = helper;
      this.$deferredAction();
    }
    _InstallJob_run_closure1.builtin$cls = "_InstallJob_run_closure1";
    if (!("name" in _InstallJob_run_closure1))
      _InstallJob_run_closure1.name = "_InstallJob_run_closure1";
    $desc = $collectedClasses$._InstallJob_run_closure1[1];
    _InstallJob_run_closure1.prototype = $desc;
    _InstallJob_run_closure1.$__fields__ = ["$this", "helper"];
    function _InstallJob__install_closure($this, helper, name) {
      this.$this = $this;
      this.helper = helper;
      this.name = name;
      this.$deferredAction();
    }
    _InstallJob__install_closure.builtin$cls = "_InstallJob__install_closure";
    if (!("name" in _InstallJob__install_closure))
      _InstallJob__install_closure.name = "_InstallJob__install_closure";
    $desc = $collectedClasses$._InstallJob__install_closure[1];
    _InstallJob__install_closure.prototype = $desc;
    _InstallJob__install_closure.$__fields__ = ["$this", "helper", "name"];
    function StatusBar(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    StatusBar.builtin$cls = "StatusBar";
    if (!("name" in StatusBar))
      StatusBar.name = "StatusBar";
    $desc = $collectedClasses$.StatusBar[1];
    StatusBar.prototype = $desc;
    StatusBar.$__fields__ = ["obj"];
    function Tile(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Tile.builtin$cls = "Tile";
    if (!("name" in Tile))
      Tile.name = "Tile";
    $desc = $collectedClasses$.Tile[1];
    Tile.prototype = $desc;
    Tile.$__fields__ = ["obj"];
    function PermissiveNodeValidator() {
      this.$deferredAction();
    }
    PermissiveNodeValidator.builtin$cls = "PermissiveNodeValidator";
    if (!("name" in PermissiveNodeValidator))
      PermissiveNodeValidator.name = "PermissiveNodeValidator";
    $desc = $collectedClasses$.PermissiveNodeValidator[1];
    PermissiveNodeValidator.prototype = $desc;
    PermissiveNodeValidator.$__fields__ = [];
    function _Dartino(disposables, enabled) {
      this.disposables = disposables;
      this.enabled = enabled;
      this.$deferredAction();
    }
    _Dartino.builtin$cls = "_Dartino";
    if (!("name" in _Dartino))
      _Dartino.name = "_Dartino";
    $desc = $collectedClasses$._Dartino[1];
    _Dartino.prototype = $desc;
    _Dartino.$__fields__ = ["disposables", "enabled"];
    function _Dartino_enable_closure() {
      this.$deferredAction();
    }
    _Dartino_enable_closure.builtin$cls = "_Dartino_enable_closure";
    if (!("name" in _Dartino_enable_closure))
      _Dartino_enable_closure.name = "_Dartino_enable_closure";
    $desc = $collectedClasses$._Dartino_enable_closure[1];
    _Dartino_enable_closure.prototype = $desc;
    _Dartino_enable_closure.$__fields__ = [];
    function _Dartino_enable_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _Dartino_enable_closure0.builtin$cls = "_Dartino_enable_closure0";
    if (!("name" in _Dartino_enable_closure0))
      _Dartino_enable_closure0.name = "_Dartino_enable_closure0";
    $desc = $collectedClasses$._Dartino_enable_closure0[1];
    _Dartino_enable_closure0.prototype = $desc;
    _Dartino_enable_closure0.$__fields__ = ["$this"];
    function _promptCreateDartinoYaml_closure(_box_0, dir) {
      this._box_0 = _box_0;
      this.dir = dir;
      this.$deferredAction();
    }
    _promptCreateDartinoYaml_closure.builtin$cls = "_promptCreateDartinoYaml_closure";
    if (!("name" in _promptCreateDartinoYaml_closure))
      _promptCreateDartinoYaml_closure.name = "_promptCreateDartinoYaml_closure";
    $desc = $collectedClasses$._promptCreateDartinoYaml_closure[1];
    _promptCreateDartinoYaml_closure.prototype = $desc;
    _promptCreateDartinoYaml_closure.$__fields__ = ["_box_0", "dir"];
    function _promptCreateDartinoYaml_closure0(_box_0, settings) {
      this._box_0 = _box_0;
      this.settings = settings;
      this.$deferredAction();
    }
    _promptCreateDartinoYaml_closure0.builtin$cls = "_promptCreateDartinoYaml_closure0";
    if (!("name" in _promptCreateDartinoYaml_closure0))
      _promptCreateDartinoYaml_closure0.name = "_promptCreateDartinoYaml_closure0";
    $desc = $collectedClasses$._promptCreateDartinoYaml_closure0[1];
    _promptCreateDartinoYaml_closure0.prototype = $desc;
    _promptCreateDartinoYaml_closure0.$__fields__ = ["_box_0", "settings"];
    function DartinoProjectSettings(projectDirectory, _settings) {
      this.projectDirectory = projectDirectory;
      this._settings = _settings;
      this.$deferredAction();
    }
    DartinoProjectSettings.builtin$cls = "DartinoProjectSettings";
    if (!("name" in DartinoProjectSettings))
      DartinoProjectSettings.name = "DartinoProjectSettings";
    $desc = $collectedClasses$.DartinoProjectSettings[1];
    DartinoProjectSettings.prototype = $desc;
    DartinoProjectSettings.$__fields__ = ["projectDirectory", "_settings"];
    function DartinoProjectSettings_operator$indexSet_closure($this, buf) {
      this.$this = $this;
      this.buf = buf;
      this.$deferredAction();
    }
    DartinoProjectSettings_operator$indexSet_closure.builtin$cls = "DartinoProjectSettings_operator$indexSet_closure";
    if (!("name" in DartinoProjectSettings_operator$indexSet_closure))
      DartinoProjectSettings_operator$indexSet_closure.name = "DartinoProjectSettings_operator$indexSet_closure";
    $desc = $collectedClasses$.DartinoProjectSettings_operator$indexSet_closure[1];
    DartinoProjectSettings_operator$indexSet_closure.prototype = $desc;
    DartinoProjectSettings_operator$indexSet_closure.$__fields__ = ["$this", "buf"];
    function DartuinoBoard(ttyPath) {
      this.ttyPath = ttyPath;
      this.$deferredAction();
    }
    DartuinoBoard.builtin$cls = "DartuinoBoard";
    if (!("name" in DartuinoBoard))
      DartuinoBoard.name = "DartuinoBoard";
    $desc = $collectedClasses$.DartuinoBoard[1];
    DartuinoBoard.prototype = $desc;
    DartuinoBoard.$__fields__ = ["ttyPath"];
    function Device0() {
      this.$deferredAction();
    }
    Device0.builtin$cls = "Device0";
    if (!("name" in Device0))
      Device0.name = "Device0";
    $desc = $collectedClasses$.Device0[1];
    Device0.prototype = $desc;
    Device0.$__fields__ = [];
    function LocalDevice() {
      this.$deferredAction();
    }
    LocalDevice.builtin$cls = "LocalDevice";
    if (!("name" in LocalDevice))
      LocalDevice.name = "LocalDevice";
    $desc = $collectedClasses$.LocalDevice[1];
    LocalDevice.prototype = $desc;
    LocalDevice.$__fields__ = [];
    function Stm32f(ttyPath, mediaPath) {
      this.ttyPath = ttyPath;
      this.mediaPath = mediaPath;
      this.$deferredAction();
    }
    Stm32f.builtin$cls = "Stm32f";
    if (!("name" in Stm32f))
      Stm32f.name = "Stm32f";
    $desc = $collectedClasses$.Stm32f[1];
    Stm32f.prototype = $desc;
    Stm32f.$__fields__ = ["ttyPath", "mediaPath"];
    function DartinoLaunchType(_lastLaunch, type) {
      this._lastLaunch = _lastLaunch;
      this.type = type;
      this.$deferredAction();
    }
    DartinoLaunchType.builtin$cls = "DartinoLaunchType";
    if (!("name" in DartinoLaunchType))
      DartinoLaunchType.name = "DartinoLaunchType";
    $desc = $collectedClasses$.DartinoLaunchType[1];
    DartinoLaunchType.prototype = $desc;
    DartinoLaunchType.$__fields__ = ["_lastLaunch", "type"];
    function DartinoLaunch(runner, sdk, launchType, launchConfiguration, name, title, targetName, manager, id, killHandler, cwd, exitCode, servicePort, _stdio, _debugConnection, _pathResolver) {
      this.runner = runner;
      this.sdk = sdk;
      this.launchType = launchType;
      this.launchConfiguration = launchConfiguration;
      this.name = name;
      this.title = title;
      this.targetName = targetName;
      this.manager = manager;
      this.id = id;
      this.killHandler = killHandler;
      this.cwd = cwd;
      this.exitCode = exitCode;
      this.servicePort = servicePort;
      this._stdio = _stdio;
      this._debugConnection = _debugConnection;
      this._pathResolver = _pathResolver;
      this.$deferredAction();
    }
    DartinoLaunch.builtin$cls = "DartinoLaunch";
    if (!("name" in DartinoLaunch))
      DartinoLaunch.name = "DartinoLaunch";
    $desc = $collectedClasses$.DartinoLaunch[1];
    DartinoLaunch.prototype = $desc;
    DartinoLaunch.$__fields__ = ["runner", "sdk", "launchType", "launchConfiguration", "name", "title", "targetName", "manager", "id", "killHandler", "cwd", "exitCode", "servicePort", "_stdio", "_debugConnection", "_pathResolver"];
    DartinoLaunch.prototype.get$sdk = function() {
      return this.sdk;
    };
    function DartinoLaunch_run_closure($this, subtle) {
      this.$this = $this;
      this.subtle = subtle;
      this.$deferredAction();
    }
    DartinoLaunch_run_closure.builtin$cls = "DartinoLaunch_run_closure";
    if (!("name" in DartinoLaunch_run_closure))
      DartinoLaunch_run_closure.name = "DartinoLaunch_run_closure";
    $desc = $collectedClasses$.DartinoLaunch_run_closure[1];
    DartinoLaunch_run_closure.prototype = $desc;
    DartinoLaunch_run_closure.$__fields__ = ["$this", "subtle"];
    function DartinoLaunch_run_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DartinoLaunch_run_closure0.builtin$cls = "DartinoLaunch_run_closure0";
    if (!("name" in DartinoLaunch_run_closure0))
      DartinoLaunch_run_closure0.name = "DartinoLaunch_run_closure0";
    $desc = $collectedClasses$.DartinoLaunch_run_closure0[1];
    DartinoLaunch_run_closure0.prototype = $desc;
    DartinoLaunch_run_closure0.$__fields__ = ["$this"];
    function DartinoLaunch_debug_closure($this, portCompleter) {
      this.$this = $this;
      this.portCompleter = portCompleter;
      this.$deferredAction();
    }
    DartinoLaunch_debug_closure.builtin$cls = "DartinoLaunch_debug_closure";
    if (!("name" in DartinoLaunch_debug_closure))
      DartinoLaunch_debug_closure.name = "DartinoLaunch_debug_closure";
    $desc = $collectedClasses$.DartinoLaunch_debug_closure[1];
    DartinoLaunch_debug_closure.prototype = $desc;
    DartinoLaunch_debug_closure.$__fields__ = ["$this", "portCompleter"];
    function DartinoLaunch_debug_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DartinoLaunch_debug_closure0.builtin$cls = "DartinoLaunch_debug_closure0";
    if (!("name" in DartinoLaunch_debug_closure0))
      DartinoLaunch_debug_closure0.name = "DartinoLaunch_debug_closure0";
    $desc = $collectedClasses$.DartinoLaunch_debug_closure0[1];
    DartinoLaunch_debug_closure0.prototype = $desc;
    DartinoLaunch_debug_closure0.$__fields__ = ["$this"];
    function DartinoLaunch_debug_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DartinoLaunch_debug_closure1.builtin$cls = "DartinoLaunch_debug_closure1";
    if (!("name" in DartinoLaunch_debug_closure1))
      DartinoLaunch_debug_closure1.name = "DartinoLaunch_debug_closure1";
    $desc = $collectedClasses$.DartinoLaunch_debug_closure1[1];
    DartinoLaunch_debug_closure1.prototype = $desc;
    DartinoLaunch_debug_closure1.$__fields__ = ["$this"];
    function DartinoLaunch_debug_closure2($this, observatoryPort) {
      this.$this = $this;
      this.observatoryPort = observatoryPort;
      this.$deferredAction();
    }
    DartinoLaunch_debug_closure2.builtin$cls = "DartinoLaunch_debug_closure2";
    if (!("name" in DartinoLaunch_debug_closure2))
      DartinoLaunch_debug_closure2.name = "DartinoLaunch_debug_closure2";
    $desc = $collectedClasses$.DartinoLaunch_debug_closure2[1];
    DartinoLaunch_debug_closure2.prototype = $desc;
    DartinoLaunch_debug_closure2.$__fields__ = ["$this", "observatoryPort"];
    function DartinoLaunch_debug_closure3($this, observatoryPort) {
      this.$this = $this;
      this.observatoryPort = observatoryPort;
      this.$deferredAction();
    }
    DartinoLaunch_debug_closure3.builtin$cls = "DartinoLaunch_debug_closure3";
    if (!("name" in DartinoLaunch_debug_closure3))
      DartinoLaunch_debug_closure3.name = "DartinoLaunch_debug_closure3";
    $desc = $collectedClasses$.DartinoLaunch_debug_closure3[1];
    DartinoLaunch_debug_closure3.prototype = $desc;
    DartinoLaunch_debug_closure3.$__fields__ = ["$this", "observatoryPort"];
    function DartinoSdk(sdkRoot) {
      this.sdkRoot = sdkRoot;
      this.$deferredAction();
    }
    DartinoSdk.builtin$cls = "DartinoSdk";
    if (!("name" in DartinoSdk))
      DartinoSdk.name = "DartinoSdk";
    $desc = $collectedClasses$.DartinoSdk[1];
    DartinoSdk.prototype = $desc;
    DartinoSdk.$__fields__ = ["sdkRoot"];
    function DartinoSdk_promptOptIntoAnalytics_recordChoice(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    DartinoSdk_promptOptIntoAnalytics_recordChoice.builtin$cls = "DartinoSdk_promptOptIntoAnalytics_recordChoice";
    if (!("name" in DartinoSdk_promptOptIntoAnalytics_recordChoice))
      DartinoSdk_promptOptIntoAnalytics_recordChoice.name = "DartinoSdk_promptOptIntoAnalytics_recordChoice";
    $desc = $collectedClasses$.DartinoSdk_promptOptIntoAnalytics_recordChoice[1];
    DartinoSdk_promptOptIntoAnalytics_recordChoice.prototype = $desc;
    DartinoSdk_promptOptIntoAnalytics_recordChoice.$__fields__ = ["_box_0", "$this"];
    function DartinoSdk_promptOptIntoAnalytics_optIn(recordChoice) {
      this.recordChoice = recordChoice;
      this.$deferredAction();
    }
    DartinoSdk_promptOptIntoAnalytics_optIn.builtin$cls = "DartinoSdk_promptOptIntoAnalytics_optIn";
    if (!("name" in DartinoSdk_promptOptIntoAnalytics_optIn))
      DartinoSdk_promptOptIntoAnalytics_optIn.name = "DartinoSdk_promptOptIntoAnalytics_optIn";
    $desc = $collectedClasses$.DartinoSdk_promptOptIntoAnalytics_optIn[1];
    DartinoSdk_promptOptIntoAnalytics_optIn.prototype = $desc;
    DartinoSdk_promptOptIntoAnalytics_optIn.$__fields__ = ["recordChoice"];
    function DartinoSdk_promptOptIntoAnalytics_optOut(recordChoice) {
      this.recordChoice = recordChoice;
      this.$deferredAction();
    }
    DartinoSdk_promptOptIntoAnalytics_optOut.builtin$cls = "DartinoSdk_promptOptIntoAnalytics_optOut";
    if (!("name" in DartinoSdk_promptOptIntoAnalytics_optOut))
      DartinoSdk_promptOptIntoAnalytics_optOut.name = "DartinoSdk_promptOptIntoAnalytics_optOut";
    $desc = $collectedClasses$.DartinoSdk_promptOptIntoAnalytics_optOut[1];
    DartinoSdk_promptOptIntoAnalytics_optOut.prototype = $desc;
    DartinoSdk_promptOptIntoAnalytics_optOut.$__fields__ = ["recordChoice"];
    function _installAdditionalTools_closure(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    _installAdditionalTools_closure.builtin$cls = "_installAdditionalTools_closure";
    if (!("name" in _installAdditionalTools_closure))
      _installAdditionalTools_closure.name = "_installAdditionalTools_closure";
    $desc = $collectedClasses$._installAdditionalTools_closure[1];
    _installAdditionalTools_closure.prototype = $desc;
    _installAdditionalTools_closure.$__fields__ = ["launch"];
    function DartinoCmd(sdk, cmd, quiet, name, _schedulingRule) {
      this.sdk = sdk;
      this.cmd = cmd;
      this.quiet = quiet;
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    DartinoCmd.builtin$cls = "DartinoCmd";
    if (!("name" in DartinoCmd))
      DartinoCmd.name = "DartinoCmd";
    $desc = $collectedClasses$.DartinoCmd[1];
    DartinoCmd.prototype = $desc;
    DartinoCmd.$__fields__ = ["sdk", "cmd", "quiet", "name", "_schedulingRule"];
    DartinoCmd.prototype.get$sdk = function() {
      return this.sdk;
    };
    DartinoCmd.prototype.get$quiet = function() {
      return this.quiet;
    };
    function DartinoCmd_start_closure() {
      this.$deferredAction();
    }
    DartinoCmd_start_closure.builtin$cls = "DartinoCmd_start_closure";
    if (!("name" in DartinoCmd_start_closure))
      DartinoCmd_start_closure.name = "DartinoCmd_start_closure";
    $desc = $collectedClasses$.DartinoCmd_start_closure[1];
    DartinoCmd_start_closure.prototype = $desc;
    DartinoCmd_start_closure.$__fields__ = [];
    function Sdk0() {
      this.$deferredAction();
    }
    Sdk0.builtin$cls = "Sdk0";
    if (!("name" in Sdk0))
      Sdk0.name = "Sdk0";
    $desc = $collectedClasses$.Sdk0[1];
    Sdk0.prototype = $desc;
    Sdk0.$__fields__ = [];
    function ExceptionBreakType(index) {
      this.index = index;
      this.$deferredAction();
    }
    ExceptionBreakType.builtin$cls = "ExceptionBreakType";
    if (!("name" in ExceptionBreakType))
      ExceptionBreakType.name = "ExceptionBreakType";
    $desc = $collectedClasses$.ExceptionBreakType[1];
    ExceptionBreakType.prototype = $desc;
    ExceptionBreakType.$__fields__ = ["index"];
    ExceptionBreakType.prototype.get$index = function(receiver) {
      return this.index;
    };
    function BreakpointManager(disposables, subs, _breakpoints, _editorBreakpoints, _addController, _changeController, _removeController, _exceptionController, _gutterTracker) {
      this.disposables = disposables;
      this.subs = subs;
      this._breakpoints = _breakpoints;
      this._editorBreakpoints = _editorBreakpoints;
      this._addController = _addController;
      this._changeController = _changeController;
      this._removeController = _removeController;
      this._exceptionController = _exceptionController;
      this._gutterTracker = _gutterTracker;
      this.$deferredAction();
    }
    BreakpointManager.builtin$cls = "BreakpointManager";
    if (!("name" in BreakpointManager))
      BreakpointManager.name = "BreakpointManager";
    $desc = $collectedClasses$.BreakpointManager[1];
    BreakpointManager.prototype = $desc;
    BreakpointManager.$__fields__ = ["disposables", "subs", "_breakpoints", "_editorBreakpoints", "_addController", "_changeController", "_removeController", "_exceptionController", "_gutterTracker"];
    function BreakpointManager_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    BreakpointManager_closure.builtin$cls = "BreakpointManager_closure";
    if (!("name" in BreakpointManager_closure))
      BreakpointManager_closure.name = "BreakpointManager_closure";
    $desc = $collectedClasses$.BreakpointManager_closure[1];
    BreakpointManager_closure.prototype = $desc;
    BreakpointManager_closure.$__fields__ = ["$this"];
    function BreakpointManager_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    BreakpointManager_closure0.builtin$cls = "BreakpointManager_closure0";
    if (!("name" in BreakpointManager_closure0))
      BreakpointManager_closure0.name = "BreakpointManager_closure0";
    $desc = $collectedClasses$.BreakpointManager_closure0[1];
    BreakpointManager_closure0.prototype = $desc;
    BreakpointManager_closure0.$__fields__ = ["$this"];
    function BreakpointManager_getBreakpontsFor_closure(path) {
      this.path = path;
      this.$deferredAction();
    }
    BreakpointManager_getBreakpontsFor_closure.builtin$cls = "BreakpointManager_getBreakpontsFor_closure";
    if (!("name" in BreakpointManager_getBreakpontsFor_closure))
      BreakpointManager_getBreakpontsFor_closure.name = "BreakpointManager_getBreakpontsFor_closure";
    $desc = $collectedClasses$.BreakpointManager_getBreakpontsFor_closure[1];
    BreakpointManager_getBreakpontsFor_closure.prototype = $desc;
    BreakpointManager_getBreakpontsFor_closure.$__fields__ = ["path"];
    function BreakpointManager__processEditor_closure($this, editor) {
      this.$this = $this;
      this.editor = editor;
      this.$deferredAction();
    }
    BreakpointManager__processEditor_closure.builtin$cls = "BreakpointManager__processEditor_closure";
    if (!("name" in BreakpointManager__processEditor_closure))
      BreakpointManager__processEditor_closure.name = "BreakpointManager__processEditor_closure";
    $desc = $collectedClasses$.BreakpointManager__processEditor_closure[1];
    BreakpointManager__processEditor_closure.prototype = $desc;
    BreakpointManager__processEditor_closure.$__fields__ = ["$this", "editor"];
    function BreakpointManager__findSimilar_closure(other) {
      this.other = other;
      this.$deferredAction();
    }
    BreakpointManager__findSimilar_closure.builtin$cls = "BreakpointManager__findSimilar_closure";
    if (!("name" in BreakpointManager__findSimilar_closure))
      BreakpointManager__findSimilar_closure.name = "BreakpointManager__findSimilar_closure";
    $desc = $collectedClasses$.BreakpointManager__findSimilar_closure[1];
    BreakpointManager__findSimilar_closure.prototype = $desc;
    BreakpointManager__findSimilar_closure.$__fields__ = ["other"];
    function BreakpointManager__findSimilar_closure0() {
      this.$deferredAction();
    }
    BreakpointManager__findSimilar_closure0.builtin$cls = "BreakpointManager__findSimilar_closure0";
    if (!("name" in BreakpointManager__findSimilar_closure0))
      BreakpointManager__findSimilar_closure0.name = "BreakpointManager__findSimilar_closure0";
    $desc = $collectedClasses$.BreakpointManager__findSimilar_closure0[1];
    BreakpointManager__findSimilar_closure0.prototype = $desc;
    BreakpointManager__findSimilar_closure0.$__fields__ = [];
    function BreakpointManager_toStorable_closure() {
      this.$deferredAction();
    }
    BreakpointManager_toStorable_closure.builtin$cls = "BreakpointManager_toStorable_closure";
    if (!("name" in BreakpointManager_toStorable_closure))
      BreakpointManager_toStorable_closure.name = "BreakpointManager_toStorable_closure";
    $desc = $collectedClasses$.BreakpointManager_toStorable_closure[1];
    BreakpointManager_toStorable_closure.prototype = $desc;
    BreakpointManager_toStorable_closure.$__fields__ = [];
    function AtomBreakpoint(path, _breakpoints$_line, _breakpoints$_column) {
      this.path = path;
      this._breakpoints$_line = _breakpoints$_line;
      this._breakpoints$_column = _breakpoints$_column;
      this.$deferredAction();
    }
    AtomBreakpoint.builtin$cls = "AtomBreakpoint";
    if (!("name" in AtomBreakpoint))
      AtomBreakpoint.name = "AtomBreakpoint";
    $desc = $collectedClasses$.AtomBreakpoint[1];
    AtomBreakpoint.prototype = $desc;
    AtomBreakpoint.$__fields__ = ["path", "_breakpoints$_line", "_breakpoints$_column"];
    AtomBreakpoint.prototype.get$path = function(receiver) {
      return this.path;
    };
    function _GutterTracker(breakpointManager, editor, _breakpoints$_sub, _gutterDisposable, _gutterClickListener) {
      this.breakpointManager = breakpointManager;
      this.editor = editor;
      this._breakpoints$_sub = _breakpoints$_sub;
      this._gutterDisposable = _gutterDisposable;
      this._gutterClickListener = _gutterClickListener;
      this.$deferredAction();
    }
    _GutterTracker.builtin$cls = "_GutterTracker";
    if (!("name" in _GutterTracker))
      _GutterTracker.name = "_GutterTracker";
    $desc = $collectedClasses$._GutterTracker[1];
    _GutterTracker.prototype = $desc;
    _GutterTracker.$__fields__ = ["breakpointManager", "editor", "_breakpoints$_sub", "_gutterDisposable", "_gutterClickListener"];
    _GutterTracker.prototype.get$editor = function() {
      return this.editor;
    };
    function _GutterTracker_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _GutterTracker_closure.builtin$cls = "_GutterTracker_closure";
    if (!("name" in _GutterTracker_closure))
      _GutterTracker_closure.name = "_GutterTracker_closure";
    $desc = $collectedClasses$._GutterTracker_closure[1];
    _GutterTracker_closure.prototype = $desc;
    _GutterTracker_closure.$__fields__ = ["$this"];
    function _GutterTracker__initLineNumberGutter_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _GutterTracker__initLineNumberGutter_closure.builtin$cls = "_GutterTracker__initLineNumberGutter_closure";
    if (!("name" in _GutterTracker__initLineNumberGutter_closure))
      _GutterTracker__initLineNumberGutter_closure.name = "_GutterTracker__initLineNumberGutter_closure";
    $desc = $collectedClasses$._GutterTracker__initLineNumberGutter_closure[1];
    _GutterTracker__initLineNumberGutter_closure.prototype = $desc;
    _GutterTracker__initLineNumberGutter_closure.$__fields__ = ["$this"];
    function _GutterTracker__initLineNumberGutter_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _GutterTracker__initLineNumberGutter_closure0.builtin$cls = "_GutterTracker__initLineNumberGutter_closure0";
    if (!("name" in _GutterTracker__initLineNumberGutter_closure0))
      _GutterTracker__initLineNumberGutter_closure0.name = "_GutterTracker__initLineNumberGutter_closure0";
    $desc = $collectedClasses$._GutterTracker__initLineNumberGutter_closure0[1];
    _GutterTracker__initLineNumberGutter_closure0.prototype = $desc;
    _GutterTracker__initLineNumberGutter_closure0.$__fields__ = ["$this"];
    function _EditorBreakpoint(manager, editor, bp, marker, _range, subs) {
      this.manager = manager;
      this.editor = editor;
      this.bp = bp;
      this.marker = marker;
      this._range = _range;
      this.subs = subs;
      this.$deferredAction();
    }
    _EditorBreakpoint.builtin$cls = "_EditorBreakpoint";
    if (!("name" in _EditorBreakpoint))
      _EditorBreakpoint.name = "_EditorBreakpoint";
    $desc = $collectedClasses$._EditorBreakpoint[1];
    _EditorBreakpoint.prototype = $desc;
    _EditorBreakpoint.$__fields__ = ["manager", "editor", "bp", "marker", "_range", "subs"];
    _EditorBreakpoint.prototype.get$editor = function() {
      return this.editor;
    };
    _EditorBreakpoint.prototype.get$bp = function() {
      return this.bp;
    };
    function _EditorBreakpoint_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _EditorBreakpoint_closure.builtin$cls = "_EditorBreakpoint_closure";
    if (!("name" in _EditorBreakpoint_closure))
      _EditorBreakpoint_closure.name = "_EditorBreakpoint_closure";
    $desc = $collectedClasses$._EditorBreakpoint_closure[1];
    _EditorBreakpoint_closure.prototype = $desc;
    _EditorBreakpoint_closure.$__fields__ = ["$this"];
    function DebugManager(disposables, connections, _debugger$_addedController, _debugger$_removedController) {
      this.disposables = disposables;
      this.connections = connections;
      this._debugger$_addedController = _debugger$_addedController;
      this._debugger$_removedController = _debugger$_removedController;
      this.$deferredAction();
    }
    DebugManager.builtin$cls = "DebugManager";
    if (!("name" in DebugManager))
      DebugManager.name = "DebugManager";
    $desc = $collectedClasses$.DebugManager[1];
    DebugManager.prototype = $desc;
    DebugManager.$__fields__ = ["disposables", "connections", "_debugger$_addedController", "_debugger$_removedController"];
    function DebugManager_closure() {
      this.$deferredAction();
    }
    DebugManager_closure.builtin$cls = "DebugManager_closure";
    if (!("name" in DebugManager_closure))
      DebugManager_closure.name = "DebugManager_closure";
    $desc = $collectedClasses$.DebugManager_closure[1];
    DebugManager_closure.prototype = $desc;
    DebugManager_closure.$__fields__ = [];
    function DebugManager_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DebugManager_closure0.builtin$cls = "DebugManager_closure0";
    if (!("name" in DebugManager_closure0))
      DebugManager_closure0.name = "DebugManager_closure0";
    $desc = $collectedClasses$.DebugManager_closure0[1];
    DebugManager_closure0.prototype = $desc;
    DebugManager_closure0.$__fields__ = ["$this"];
    function DebugManager__closure(closure) {
      this.closure = closure;
      this.$deferredAction();
    }
    DebugManager__closure.builtin$cls = "DebugManager__closure";
    if (!("name" in DebugManager__closure))
      DebugManager__closure.name = "DebugManager__closure";
    $desc = $collectedClasses$.DebugManager__closure[1];
    DebugManager__closure.prototype = $desc;
    DebugManager__closure.$__fields__ = ["closure"];
    function DebugManager_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DebugManager_closure1.builtin$cls = "DebugManager_closure1";
    if (!("name" in DebugManager_closure1))
      DebugManager_closure1.name = "DebugManager_closure1";
    $desc = $collectedClasses$.DebugManager_closure1[1];
    DebugManager_closure1.prototype = $desc;
    DebugManager_closure1.$__fields__ = ["$this"];
    function DebugManager_closure2($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DebugManager_closure2.builtin$cls = "DebugManager_closure2";
    if (!("name" in DebugManager_closure2))
      DebugManager_closure2.name = "DebugManager_closure2";
    $desc = $collectedClasses$.DebugManager_closure2[1];
    DebugManager_closure2.prototype = $desc;
    DebugManager_closure2.$__fields__ = ["$this"];
    function DebugManager_closure3($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DebugManager_closure3.builtin$cls = "DebugManager_closure3";
    if (!("name" in DebugManager_closure3))
      DebugManager_closure3.name = "DebugManager_closure3";
    $desc = $collectedClasses$.DebugManager_closure3[1];
    DebugManager_closure3.prototype = $desc;
    DebugManager_closure3.$__fields__ = ["$this"];
    function DebugManager_closure4($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DebugManager_closure4.builtin$cls = "DebugManager_closure4";
    if (!("name" in DebugManager_closure4))
      DebugManager_closure4.name = "DebugManager_closure4";
    $desc = $collectedClasses$.DebugManager_closure4[1];
    DebugManager_closure4.prototype = $desc;
    DebugManager_closure4.$__fields__ = ["$this"];
    function DebugManager_dispose_closure() {
      this.$deferredAction();
    }
    DebugManager_dispose_closure.builtin$cls = "DebugManager_dispose_closure";
    if (!("name" in DebugManager_dispose_closure))
      DebugManager_dispose_closure.name = "DebugManager_dispose_closure";
    $desc = $collectedClasses$.DebugManager_dispose_closure[1];
    DebugManager_dispose_closure.prototype = $desc;
    DebugManager_dispose_closure.$__fields__ = [];
    function UriTranslator() {
      this.$deferredAction();
    }
    UriTranslator.builtin$cls = "UriTranslator";
    if (!("name" in UriTranslator))
      UriTranslator.name = "UriTranslator";
    $desc = $collectedClasses$.UriTranslator[1];
    UriTranslator.prototype = $desc;
    UriTranslator.$__fields__ = [];
    function UriResolver(root, selfRefName, _translator, _selfRefPrefix, _uriToPath, _pathToUri, _debugger$_completer, _contextId) {
      this.root = root;
      this.selfRefName = selfRefName;
      this._translator = _translator;
      this._selfRefPrefix = _selfRefPrefix;
      this._uriToPath = _uriToPath;
      this._pathToUri = _pathToUri;
      this._debugger$_completer = _debugger$_completer;
      this._contextId = _contextId;
      this.$deferredAction();
    }
    UriResolver.builtin$cls = "UriResolver";
    if (!("name" in UriResolver))
      UriResolver.name = "UriResolver";
    $desc = $collectedClasses$.UriResolver[1];
    UriResolver.prototype = $desc;
    UriResolver.$__fields__ = ["root", "selfRefName", "_translator", "_selfRefPrefix", "_uriToPath", "_pathToUri", "_debugger$_completer", "_contextId"];
    UriResolver.prototype.get$root = function(receiver) {
      return this.root;
    };
    function UriResolver_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    UriResolver_closure.builtin$cls = "UriResolver_closure";
    if (!("name" in UriResolver_closure))
      UriResolver_closure.name = "UriResolver_closure";
    $desc = $collectedClasses$.UriResolver_closure[1];
    UriResolver_closure.prototype = $desc;
    UriResolver_closure.$__fields__ = ["$this"];
    function UriResolver_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    UriResolver_closure0.builtin$cls = "UriResolver_closure0";
    if (!("name" in UriResolver_closure0))
      UriResolver_closure0.name = "UriResolver_closure0";
    $desc = $collectedClasses$.UriResolver_closure0[1];
    UriResolver_closure0.prototype = $desc;
    UriResolver_closure0.$__fields__ = ["$this"];
    function UriResolver_resolveUriToPath_closure(uri) {
      this.uri = uri;
      this.$deferredAction();
    }
    UriResolver_resolveUriToPath_closure.builtin$cls = "UriResolver_resolveUriToPath_closure";
    if (!("name" in UriResolver_resolveUriToPath_closure))
      UriResolver_resolveUriToPath_closure.name = "UriResolver_resolveUriToPath_closure";
    $desc = $collectedClasses$.UriResolver_resolveUriToPath_closure[1];
    UriResolver_resolveUriToPath_closure.prototype = $desc;
    UriResolver_resolveUriToPath_closure.$__fields__ = ["uri"];
    function UriResolver_resolvePathToUris_closure(path) {
      this.path = path;
      this.$deferredAction();
    }
    UriResolver_resolvePathToUris_closure.builtin$cls = "UriResolver_resolvePathToUris_closure";
    if (!("name" in UriResolver_resolvePathToUris_closure))
      UriResolver_resolvePathToUris_closure.name = "UriResolver_resolvePathToUris_closure";
    $desc = $collectedClasses$.UriResolver_resolvePathToUris_closure[1];
    UriResolver_resolvePathToUris_closure.prototype = $desc;
    UriResolver_resolvePathToUris_closure.$__fields__ = ["path"];
    function UriResolver_dispose_closure() {
      this.$deferredAction();
    }
    UriResolver_dispose_closure.builtin$cls = "UriResolver_dispose_closure";
    if (!("name" in UriResolver_dispose_closure))
      UriResolver_dispose_closure.name = "UriResolver_dispose_closure";
    $desc = $collectedClasses$.UriResolver_dispose_closure[1];
    UriResolver_dispose_closure.prototype = $desc;
    UriResolver_dispose_closure.$__fields__ = [];
    function DebuggerView(connection, focusManager, subs, _execMarker, flowControlSection, detailSection, primaryTabGroup, secondaryTabGroup, disposables, root, toolbar, content, tabElement, _closeButton, group) {
      this.connection = connection;
      this.focusManager = focusManager;
      this.subs = subs;
      this._execMarker = _execMarker;
      this.flowControlSection = flowControlSection;
      this.detailSection = detailSection;
      this.primaryTabGroup = primaryTabGroup;
      this.secondaryTabGroup = secondaryTabGroup;
      this.disposables = disposables;
      this.root = root;
      this.toolbar = toolbar;
      this.content = content;
      this.tabElement = tabElement;
      this._closeButton = _closeButton;
      this.group = group;
      this.$deferredAction();
    }
    DebuggerView.builtin$cls = "DebuggerView";
    if (!("name" in DebuggerView))
      DebuggerView.name = "DebuggerView";
    $desc = $collectedClasses$.DebuggerView[1];
    DebuggerView.prototype = $desc;
    DebuggerView.$__fields__ = ["connection", "focusManager", "subs", "_execMarker", "flowControlSection", "detailSection", "primaryTabGroup", "secondaryTabGroup", "disposables", "root", "toolbar", "content", "tabElement", "_closeButton", "group"];
    function DebuggerView_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DebuggerView_closure.builtin$cls = "DebuggerView_closure";
    if (!("name" in DebuggerView_closure))
      DebuggerView_closure.name = "DebuggerView_closure";
    $desc = $collectedClasses$.DebuggerView_closure[1];
    DebuggerView_closure.prototype = $desc;
    DebuggerView_closure.$__fields__ = ["$this"];
    function DebuggerView__createConfigMenu__toggleExceptions(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    DebuggerView__createConfigMenu__toggleExceptions.builtin$cls = "DebuggerView__createConfigMenu__toggleExceptions";
    if (!("name" in DebuggerView__createConfigMenu__toggleExceptions))
      DebuggerView__createConfigMenu__toggleExceptions.name = "DebuggerView__createConfigMenu__toggleExceptions";
    $desc = $collectedClasses$.DebuggerView__createConfigMenu__toggleExceptions[1];
    DebuggerView__createConfigMenu__toggleExceptions.prototype = $desc;
    DebuggerView__createConfigMenu__toggleExceptions.$__fields__ = ["_box_0"];
    function DebuggerView__createConfigMenu_closure() {
      this.$deferredAction();
    }
    DebuggerView__createConfigMenu_closure.builtin$cls = "DebuggerView__createConfigMenu_closure";
    if (!("name" in DebuggerView__createConfigMenu_closure))
      DebuggerView__createConfigMenu_closure.name = "DebuggerView__createConfigMenu_closure";
    $desc = $collectedClasses$.DebuggerView__createConfigMenu_closure[1];
    DebuggerView__createConfigMenu_closure.prototype = $desc;
    DebuggerView__createConfigMenu_closure.$__fields__ = [];
    function DebuggerView__createConfigMenu_closure0(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    DebuggerView__createConfigMenu_closure0.builtin$cls = "DebuggerView__createConfigMenu_closure0";
    if (!("name" in DebuggerView__createConfigMenu_closure0))
      DebuggerView__createConfigMenu_closure0.name = "DebuggerView__createConfigMenu_closure0";
    $desc = $collectedClasses$.DebuggerView__createConfigMenu_closure0[1];
    DebuggerView__createConfigMenu_closure0.prototype = $desc;
    DebuggerView__createConfigMenu_closure0.$__fields__ = ["_box_0"];
    function DebuggerView__createConfigMenu_closure1(menu) {
      this.menu = menu;
      this.$deferredAction();
    }
    DebuggerView__createConfigMenu_closure1.builtin$cls = "DebuggerView__createConfigMenu_closure1";
    if (!("name" in DebuggerView__createConfigMenu_closure1))
      DebuggerView__createConfigMenu_closure1.name = "DebuggerView__createConfigMenu_closure1";
    $desc = $collectedClasses$.DebuggerView__createConfigMenu_closure1[1];
    DebuggerView__createConfigMenu_closure1.prototype = $desc;
    DebuggerView__createConfigMenu_closure1.$__fields__ = ["menu"];
    function DebuggerView__createSecondarySection_closure() {
      this.$deferredAction();
    }
    DebuggerView__createSecondarySection_closure.builtin$cls = "DebuggerView__createSecondarySection_closure";
    if (!("name" in DebuggerView__createSecondarySection_closure))
      DebuggerView__createSecondarySection_closure.name = "DebuggerView__createSecondarySection_closure";
    $desc = $collectedClasses$.DebuggerView__createSecondarySection_closure[1];
    DebuggerView__createSecondarySection_closure.prototype = $desc;
    DebuggerView__createSecondarySection_closure.$__fields__ = [];
    function DebuggerView__handleIsolateTerminated_closure(isolate) {
      this.isolate = isolate;
      this.$deferredAction();
    }
    DebuggerView__handleIsolateTerminated_closure.builtin$cls = "DebuggerView__handleIsolateTerminated_closure";
    if (!("name" in DebuggerView__handleIsolateTerminated_closure))
      DebuggerView__handleIsolateTerminated_closure.name = "DebuggerView__handleIsolateTerminated_closure";
    $desc = $collectedClasses$.DebuggerView__handleIsolateTerminated_closure[1];
    DebuggerView__handleIsolateTerminated_closure.prototype = $desc;
    DebuggerView__handleIsolateTerminated_closure.$__fields__ = ["isolate"];
    function DebuggerView__handleIsolateTerminated_closure0() {
      this.$deferredAction();
    }
    DebuggerView__handleIsolateTerminated_closure0.builtin$cls = "DebuggerView__handleIsolateTerminated_closure0";
    if (!("name" in DebuggerView__handleIsolateTerminated_closure0))
      DebuggerView__handleIsolateTerminated_closure0.name = "DebuggerView__handleIsolateTerminated_closure0";
    $desc = $collectedClasses$.DebuggerView__handleIsolateTerminated_closure0[1];
    DebuggerView__handleIsolateTerminated_closure0.prototype = $desc;
    DebuggerView__handleIsolateTerminated_closure0.$__fields__ = [];
    function DebuggerView__jumpToLocation_closure($this, location, addExecMarker) {
      this.$this = $this;
      this.location = location;
      this.addExecMarker = addExecMarker;
      this.$deferredAction();
    }
    DebuggerView__jumpToLocation_closure.builtin$cls = "DebuggerView__jumpToLocation_closure";
    if (!("name" in DebuggerView__jumpToLocation_closure))
      DebuggerView__jumpToLocation_closure.name = "DebuggerView__jumpToLocation_closure";
    $desc = $collectedClasses$.DebuggerView__jumpToLocation_closure[1];
    DebuggerView__jumpToLocation_closure.prototype = $desc;
    DebuggerView__jumpToLocation_closure.$__fields__ = ["$this", "location", "addExecMarker"];
    function FlowControlSection(view, connection, subs, resume, stepIn, stepOver, stepOut, reload, stop, isolateName, isolateState) {
      this.view = view;
      this.connection = connection;
      this.subs = subs;
      this.resume = resume;
      this.stepIn = stepIn;
      this.stepOver = stepOver;
      this.stepOut = stepOut;
      this.reload = reload;
      this.stop = stop;
      this.isolateName = isolateName;
      this.isolateState = isolateState;
      this.$deferredAction();
    }
    FlowControlSection.builtin$cls = "FlowControlSection";
    if (!("name" in FlowControlSection))
      FlowControlSection.name = "FlowControlSection";
    $desc = $collectedClasses$.FlowControlSection[1];
    FlowControlSection.prototype = $desc;
    FlowControlSection.$__fields__ = ["view", "connection", "subs", "resume", "stepIn", "stepOver", "stepOut", "reload", "stop", "isolateName", "isolateState"];
    FlowControlSection.prototype.get$view = function(receiver) {
      return this.view;
    };
    function FlowControlSection_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlowControlSection_closure.builtin$cls = "FlowControlSection_closure";
    if (!("name" in FlowControlSection_closure))
      FlowControlSection_closure.name = "FlowControlSection_closure";
    $desc = $collectedClasses$.FlowControlSection_closure[1];
    FlowControlSection_closure.prototype = $desc;
    FlowControlSection_closure.$__fields__ = ["$this"];
    function FlowControlSection__handleIsolateChange_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlowControlSection__handleIsolateChange_closure.builtin$cls = "FlowControlSection__handleIsolateChange_closure";
    if (!("name" in FlowControlSection__handleIsolateChange_closure))
      FlowControlSection__handleIsolateChange_closure.name = "FlowControlSection__handleIsolateChange_closure";
    $desc = $collectedClasses$.FlowControlSection__handleIsolateChange_closure[1];
    FlowControlSection__handleIsolateChange_closure.prototype = $desc;
    FlowControlSection__handleIsolateChange_closure.$__fields__ = ["$this"];
    function FlowControlSection__restart_closure() {
      this.$deferredAction();
    }
    FlowControlSection__restart_closure.builtin$cls = "FlowControlSection__restart_closure";
    if (!("name" in FlowControlSection__restart_closure))
      FlowControlSection__restart_closure.name = "FlowControlSection__restart_closure";
    $desc = $collectedClasses$.FlowControlSection__restart_closure[1];
    FlowControlSection__restart_closure.prototype = $desc;
    FlowControlSection__restart_closure.$__fields__ = [];
    function ExecutionTab(view, connection, subs, list, locals, _framesClearTimer, id, name, _tabElement, content, enabled, active) {
      this.view = view;
      this.connection = connection;
      this.subs = subs;
      this.list = list;
      this.locals = locals;
      this._framesClearTimer = _framesClearTimer;
      this.id = id;
      this.name = name;
      this._tabElement = _tabElement;
      this.content = content;
      this.enabled = enabled;
      this.active = active;
      this.$deferredAction();
    }
    ExecutionTab.builtin$cls = "ExecutionTab";
    if (!("name" in ExecutionTab))
      ExecutionTab.name = "ExecutionTab";
    $desc = $collectedClasses$.ExecutionTab[1];
    ExecutionTab.prototype = $desc;
    ExecutionTab.$__fields__ = ["view", "connection", "subs", "list", "locals", "_framesClearTimer", "id", "name", "_tabElement", "content", "enabled", "active"];
    ExecutionTab.prototype.get$view = function(receiver) {
      return this.view;
    };
    ExecutionTab.prototype.get$locals = function() {
      return this.locals;
    };
    function ExecutionTab__updateFrames_closure(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    ExecutionTab__updateFrames_closure.builtin$cls = "ExecutionTab__updateFrames_closure";
    if (!("name" in ExecutionTab__updateFrames_closure))
      ExecutionTab__updateFrames_closure.name = "ExecutionTab__updateFrames_closure";
    $desc = $collectedClasses$.ExecutionTab__updateFrames_closure[1];
    ExecutionTab__updateFrames_closure.prototype = $desc;
    ExecutionTab__updateFrames_closure.$__fields__ = ["_box_0", "$this"];
    function ExecutionTab__selectFrame_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ExecutionTab__selectFrame_closure.builtin$cls = "ExecutionTab__selectFrame_closure";
    if (!("name" in ExecutionTab__selectFrame_closure))
      ExecutionTab__selectFrame_closure.name = "ExecutionTab__selectFrame_closure";
    $desc = $collectedClasses$.ExecutionTab__selectFrame_closure[1];
    ExecutionTab__selectFrame_closure.prototype = $desc;
    ExecutionTab__selectFrame_closure.$__fields__ = ["$this"];
    function _LocalTreeModel() {
      this.$deferredAction();
    }
    _LocalTreeModel.builtin$cls = "_LocalTreeModel";
    if (!("name" in _LocalTreeModel))
      _LocalTreeModel.name = "_LocalTreeModel";
    $desc = $collectedClasses$._LocalTreeModel[1];
    _LocalTreeModel.prototype = $desc;
    _LocalTreeModel.$__fields__ = [];
    function DetailSection(sectionElement, _detailsElement) {
      this.sectionElement = sectionElement;
      this._detailsElement = _detailsElement;
      this.$deferredAction();
    }
    DetailSection.builtin$cls = "DetailSection";
    if (!("name" in DetailSection))
      DetailSection.name = "DetailSection";
    $desc = $collectedClasses$.DetailSection[1];
    DetailSection.prototype = $desc;
    DetailSection.$__fields__ = ["sectionElement", "_detailsElement"];
    function DetailSection_showDetails_closure($this, variable) {
      this.$this = $this;
      this.variable = variable;
      this.$deferredAction();
    }
    DetailSection_showDetails_closure.builtin$cls = "DetailSection_showDetails_closure";
    if (!("name" in DetailSection_showDetails_closure))
      DetailSection_showDetails_closure.name = "DetailSection_showDetails_closure";
    $desc = $collectedClasses$.DetailSection_showDetails_closure[1];
    DetailSection_showDetails_closure.prototype = $desc;
    DetailSection_showDetails_closure.$__fields__ = ["$this", "variable"];
    function DetailSection_showDetails_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DetailSection_showDetails_closure0.builtin$cls = "DetailSection_showDetails_closure0";
    if (!("name" in DetailSection_showDetails_closure0))
      DetailSection_showDetails_closure0.name = "DetailSection_showDetails_closure0";
    $desc = $collectedClasses$.DetailSection_showDetails_closure0[1];
    DetailSection_showDetails_closure0.prototype = $desc;
    DetailSection_showDetails_closure0.$__fields__ = ["$this"];
    function DetailSection_showDetails_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DetailSection_showDetails_closure1.builtin$cls = "DetailSection_showDetails_closure1";
    if (!("name" in DetailSection_showDetails_closure1))
      DetailSection_showDetails_closure1.name = "DetailSection_showDetails_closure1";
    $desc = $collectedClasses$.DetailSection_showDetails_closure1[1];
    DetailSection_showDetails_closure1.prototype = $desc;
    DetailSection_showDetails_closure1.$__fields__ = ["$this"];
    function LibrariesTab(view, connection, list, id, name, _tabElement, content, enabled, active) {
      this.view = view;
      this.connection = connection;
      this.list = list;
      this.id = id;
      this.name = name;
      this._tabElement = _tabElement;
      this.content = content;
      this.enabled = enabled;
      this.active = active;
      this.$deferredAction();
    }
    LibrariesTab.builtin$cls = "LibrariesTab";
    if (!("name" in LibrariesTab))
      LibrariesTab.name = "LibrariesTab";
    $desc = $collectedClasses$.LibrariesTab[1];
    LibrariesTab.prototype = $desc;
    LibrariesTab.$__fields__ = ["view", "connection", "list", "id", "name", "_tabElement", "content", "enabled", "active"];
    LibrariesTab.prototype.get$view = function(receiver) {
      return this.view;
    };
    function IsolatesTab(view, connection, list, subs, id, name, _tabElement, content, enabled, active) {
      this.view = view;
      this.connection = connection;
      this.list = list;
      this.subs = subs;
      this.id = id;
      this.name = name;
      this._tabElement = _tabElement;
      this.content = content;
      this.enabled = enabled;
      this.active = active;
      this.$deferredAction();
    }
    IsolatesTab.builtin$cls = "IsolatesTab";
    if (!("name" in IsolatesTab))
      IsolatesTab.name = "IsolatesTab";
    $desc = $collectedClasses$.IsolatesTab[1];
    IsolatesTab.prototype = $desc;
    IsolatesTab.$__fields__ = ["view", "connection", "list", "subs", "id", "name", "_tabElement", "content", "enabled", "active"];
    IsolatesTab.prototype.get$view = function(receiver) {
      return this.view;
    };
    function IsolatesTab_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    IsolatesTab_closure.builtin$cls = "IsolatesTab_closure";
    if (!("name" in IsolatesTab_closure))
      IsolatesTab_closure.name = "IsolatesTab_closure";
    $desc = $collectedClasses$.IsolatesTab_closure[1];
    IsolatesTab_closure.prototype = $desc;
    IsolatesTab_closure.$__fields__ = ["$this"];
    function BreakpointsTab(titlebar, list, subs, id, name, _tabElement, content, enabled, active) {
      this.titlebar = titlebar;
      this.list = list;
      this.subs = subs;
      this.id = id;
      this.name = name;
      this._tabElement = _tabElement;
      this.content = content;
      this.enabled = enabled;
      this.active = active;
      this.$deferredAction();
    }
    BreakpointsTab.builtin$cls = "BreakpointsTab";
    if (!("name" in BreakpointsTab))
      BreakpointsTab.name = "BreakpointsTab";
    $desc = $collectedClasses$.BreakpointsTab[1];
    BreakpointsTab.prototype = $desc;
    BreakpointsTab.$__fields__ = ["titlebar", "list", "subs", "id", "name", "_tabElement", "content", "enabled", "active"];
    function BreakpointsTab_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    BreakpointsTab_closure.builtin$cls = "BreakpointsTab_closure";
    if (!("name" in BreakpointsTab_closure))
      BreakpointsTab_closure.name = "BreakpointsTab_closure";
    $desc = $collectedClasses$.BreakpointsTab_closure[1];
    BreakpointsTab_closure.prototype = $desc;
    BreakpointsTab_closure.$__fields__ = ["$this"];
    function BreakpointsTab__render_closure(bp) {
      this.bp = bp;
      this.$deferredAction();
    }
    BreakpointsTab__render_closure.builtin$cls = "BreakpointsTab__render_closure";
    if (!("name" in BreakpointsTab__render_closure))
      BreakpointsTab__render_closure.name = "BreakpointsTab__render_closure";
    $desc = $collectedClasses$.BreakpointsTab__render_closure[1];
    BreakpointsTab__render_closure.prototype = $desc;
    BreakpointsTab__render_closure.$__fields__ = ["bp"];
    function FocusManager(_isolate, _listeners) {
      this._isolate = _isolate;
      this._listeners = _listeners;
      this.$deferredAction();
    }
    FocusManager.builtin$cls = "FocusManager";
    if (!("name" in FocusManager))
      FocusManager.name = "FocusManager";
    $desc = $collectedClasses$.FocusManager[1];
    FocusManager.prototype = $desc;
    FocusManager.$__fields__ = ["_isolate", "_listeners"];
    function _TabTitlebar(titleElement, toolbar, element) {
      this.titleElement = titleElement;
      this.toolbar = toolbar;
      this.element = element;
      this.$deferredAction();
    }
    _TabTitlebar.builtin$cls = "_TabTitlebar";
    if (!("name" in _TabTitlebar))
      _TabTitlebar.name = "_TabTitlebar";
    $desc = $collectedClasses$._TabTitlebar[1];
    _TabTitlebar.prototype = $desc;
    _TabTitlebar.$__fields__ = ["titleElement", "toolbar", "element"];
    function DebugConnection(launch, isolates) {
      this.launch = launch;
      this.isolates = isolates;
      this.$deferredAction();
    }
    DebugConnection.builtin$cls = "DebugConnection";
    if (!("name" in DebugConnection))
      DebugConnection.name = "DebugConnection";
    $desc = $collectedClasses$.DebugConnection[1];
    DebugConnection.prototype = $desc;
    DebugConnection.$__fields__ = ["launch", "isolates"];
    DebugConnection.prototype.get$launch = function() {
      return this.launch;
    };
    DebugConnection.prototype.get$isolates = function() {
      return this.isolates;
    };
    function DebugIsolate() {
      this.$deferredAction();
    }
    DebugIsolate.builtin$cls = "DebugIsolate";
    if (!("name" in DebugIsolate))
      DebugIsolate.name = "DebugIsolate";
    $desc = $collectedClasses$.DebugIsolate[1];
    DebugIsolate.prototype = $desc;
    DebugIsolate.$__fields__ = [];
    function DebugFrame() {
      this.$deferredAction();
    }
    DebugFrame.builtin$cls = "DebugFrame";
    if (!("name" in DebugFrame))
      DebugFrame.name = "DebugFrame";
    $desc = $collectedClasses$.DebugFrame[1];
    DebugFrame.prototype = $desc;
    DebugFrame.$__fields__ = [];
    function DebugVariable() {
      this.$deferredAction();
    }
    DebugVariable.builtin$cls = "DebugVariable";
    if (!("name" in DebugVariable))
      DebugVariable.name = "DebugVariable";
    $desc = $collectedClasses$.DebugVariable[1];
    DebugVariable.prototype = $desc;
    DebugVariable.$__fields__ = [];
    function DebugValue() {
      this.$deferredAction();
    }
    DebugValue.builtin$cls = "DebugValue";
    if (!("name" in DebugValue))
      DebugValue.name = "DebugValue";
    $desc = $collectedClasses$.DebugValue[1];
    DebugValue.prototype = $desc;
    DebugValue.$__fields__ = [];
    function DebugLocation(resolved) {
      this.resolved = resolved;
      this.$deferredAction();
    }
    DebugLocation.builtin$cls = "DebugLocation";
    if (!("name" in DebugLocation))
      DebugLocation.name = "DebugLocation";
    $desc = $collectedClasses$.DebugLocation[1];
    DebugLocation.prototype = $desc;
    DebugLocation.$__fields__ = ["resolved"];
    DebugLocation.prototype.get$resolved = function() {
      return this.resolved;
    };
    function ObservatoryDebugger_connect_closure(launch, uriTranslator, pipeStdio, url, ws, connectedCompleter, finishedCompleter) {
      this.launch = launch;
      this.uriTranslator = uriTranslator;
      this.pipeStdio = pipeStdio;
      this.url = url;
      this.ws = ws;
      this.connectedCompleter = connectedCompleter;
      this.finishedCompleter = finishedCompleter;
      this.$deferredAction();
    }
    ObservatoryDebugger_connect_closure.builtin$cls = "ObservatoryDebugger_connect_closure";
    if (!("name" in ObservatoryDebugger_connect_closure))
      ObservatoryDebugger_connect_closure.name = "ObservatoryDebugger_connect_closure";
    $desc = $collectedClasses$.ObservatoryDebugger_connect_closure[1];
    ObservatoryDebugger_connect_closure.prototype = $desc;
    ObservatoryDebugger_connect_closure.$__fields__ = ["launch", "uriTranslator", "pipeStdio", "url", "ws", "connectedCompleter", "finishedCompleter"];
    function ObservatoryDebugger_connect__closure() {
      this.$deferredAction();
    }
    ObservatoryDebugger_connect__closure.builtin$cls = "ObservatoryDebugger_connect__closure";
    if (!("name" in ObservatoryDebugger_connect__closure))
      ObservatoryDebugger_connect__closure.name = "ObservatoryDebugger_connect__closure";
    $desc = $collectedClasses$.ObservatoryDebugger_connect__closure[1];
    ObservatoryDebugger_connect__closure.prototype = $desc;
    ObservatoryDebugger_connect__closure.$__fields__ = [];
    function ObservatoryDebugger_connect__closure0(ws) {
      this.ws = ws;
      this.$deferredAction();
    }
    ObservatoryDebugger_connect__closure0.builtin$cls = "ObservatoryDebugger_connect__closure0";
    if (!("name" in ObservatoryDebugger_connect__closure0))
      ObservatoryDebugger_connect__closure0.name = "ObservatoryDebugger_connect__closure0";
    $desc = $collectedClasses$.ObservatoryDebugger_connect__closure0[1];
    ObservatoryDebugger_connect__closure0.prototype = $desc;
    ObservatoryDebugger_connect__closure0.$__fields__ = ["ws"];
    function ObservatoryDebugger_connect_closure0(port, connectedCompleter) {
      this.port = port;
      this.connectedCompleter = connectedCompleter;
      this.$deferredAction();
    }
    ObservatoryDebugger_connect_closure0.builtin$cls = "ObservatoryDebugger_connect_closure0";
    if (!("name" in ObservatoryDebugger_connect_closure0))
      ObservatoryDebugger_connect_closure0.name = "ObservatoryDebugger_connect_closure0";
    $desc = $collectedClasses$.ObservatoryDebugger_connect_closure0[1];
    ObservatoryDebugger_connect_closure0.prototype = $desc;
    ObservatoryDebugger_connect_closure0.$__fields__ = ["port", "connectedCompleter"];
    function ObservatoryDebugger_connect_closure1(finishedCompleter) {
      this.finishedCompleter = finishedCompleter;
      this.$deferredAction();
    }
    ObservatoryDebugger_connect_closure1.builtin$cls = "ObservatoryDebugger_connect_closure1";
    if (!("name" in ObservatoryDebugger_connect_closure1))
      ObservatoryDebugger_connect_closure1.name = "ObservatoryDebugger_connect_closure1";
    $desc = $collectedClasses$.ObservatoryDebugger_connect_closure1[1];
    ObservatoryDebugger_connect_closure1.prototype = $desc;
    ObservatoryDebugger_connect_closure1.$__fields__ = ["finishedCompleter"];
    function ObservatoryConnection(service, completer, pipeStdio, ws, _isolateMap, _isolatePaused, _isolateResumed, _isolateCreatedController, sourceCache, subs, uriResolver, stdoutSupported, stderrSupported, _nextIsolateId, flutterExtension, launch, metadata, isolates) {
      this.service = service;
      this.completer = completer;
      this.pipeStdio = pipeStdio;
      this.ws = ws;
      this._isolateMap = _isolateMap;
      this._isolatePaused = _isolatePaused;
      this._isolateResumed = _isolateResumed;
      this._isolateCreatedController = _isolateCreatedController;
      this.sourceCache = sourceCache;
      this.subs = subs;
      this.uriResolver = uriResolver;
      this.stdoutSupported = stdoutSupported;
      this.stderrSupported = stderrSupported;
      this._nextIsolateId = _nextIsolateId;
      this.flutterExtension = flutterExtension;
      this.launch = launch;
      this.metadata = metadata;
      this.isolates = isolates;
      this.$deferredAction();
    }
    ObservatoryConnection.builtin$cls = "ObservatoryConnection";
    if (!("name" in ObservatoryConnection))
      ObservatoryConnection.name = "ObservatoryConnection";
    $desc = $collectedClasses$.ObservatoryConnection[1];
    ObservatoryConnection.prototype = $desc;
    ObservatoryConnection.$__fields__ = ["service", "completer", "pipeStdio", "ws", "_isolateMap", "_isolatePaused", "_isolateResumed", "_isolateCreatedController", "sourceCache", "subs", "uriResolver", "stdoutSupported", "stderrSupported", "_nextIsolateId", "flutterExtension", "launch", "metadata", "isolates"];
    ObservatoryConnection.prototype.get$flutterExtension = function() {
      return this.flutterExtension;
    };
    function ObservatoryConnection_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryConnection_closure.builtin$cls = "ObservatoryConnection_closure";
    if (!("name" in ObservatoryConnection_closure))
      ObservatoryConnection_closure.name = "ObservatoryConnection_closure";
    $desc = $collectedClasses$.ObservatoryConnection_closure[1];
    ObservatoryConnection_closure.prototype = $desc;
    ObservatoryConnection_closure.$__fields__ = ["$this"];
    function ObservatoryConnection__init_closure() {
      this.$deferredAction();
    }
    ObservatoryConnection__init_closure.builtin$cls = "ObservatoryConnection__init_closure";
    if (!("name" in ObservatoryConnection__init_closure))
      ObservatoryConnection__init_closure.name = "ObservatoryConnection__init_closure";
    $desc = $collectedClasses$.ObservatoryConnection__init_closure[1];
    ObservatoryConnection__init_closure.prototype = $desc;
    ObservatoryConnection__init_closure.$__fields__ = [];
    function ObservatoryConnection__init_closure0(trim) {
      this.trim = trim;
      this.$deferredAction();
    }
    ObservatoryConnection__init_closure0.builtin$cls = "ObservatoryConnection__init_closure0";
    if (!("name" in ObservatoryConnection__init_closure0))
      ObservatoryConnection__init_closure0.name = "ObservatoryConnection__init_closure0";
    $desc = $collectedClasses$.ObservatoryConnection__init_closure0[1];
    ObservatoryConnection__init_closure0.prototype = $desc;
    ObservatoryConnection__init_closure0.$__fields__ = ["trim"];
    function ObservatoryConnection__init_closure1(trim) {
      this.trim = trim;
      this.$deferredAction();
    }
    ObservatoryConnection__init_closure1.builtin$cls = "ObservatoryConnection__init_closure1";
    if (!("name" in ObservatoryConnection__init_closure1))
      ObservatoryConnection__init_closure1.name = "ObservatoryConnection__init_closure1";
    $desc = $collectedClasses$.ObservatoryConnection__init_closure1[1];
    ObservatoryConnection__init_closure1.prototype = $desc;
    ObservatoryConnection__init_closure1.$__fields__ = ["trim"];
    function ObservatoryConnection__init_closure2($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryConnection__init_closure2.builtin$cls = "ObservatoryConnection__init_closure2";
    if (!("name" in ObservatoryConnection__init_closure2))
      ObservatoryConnection__init_closure2.name = "ObservatoryConnection__init_closure2";
    $desc = $collectedClasses$.ObservatoryConnection__init_closure2[1];
    ObservatoryConnection__init_closure2.prototype = $desc;
    ObservatoryConnection__init_closure2.$__fields__ = ["$this"];
    function ObservatoryConnection__init_closure3() {
      this.$deferredAction();
    }
    ObservatoryConnection__init_closure3.builtin$cls = "ObservatoryConnection__init_closure3";
    if (!("name" in ObservatoryConnection__init_closure3))
      ObservatoryConnection__init_closure3.name = "ObservatoryConnection__init_closure3";
    $desc = $collectedClasses$.ObservatoryConnection__init_closure3[1];
    ObservatoryConnection__init_closure3.prototype = $desc;
    ObservatoryConnection__init_closure3.$__fields__ = [];
    function ObservatoryConnection__init_closure4($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryConnection__init_closure4.builtin$cls = "ObservatoryConnection__init_closure4";
    if (!("name" in ObservatoryConnection__init_closure4))
      ObservatoryConnection__init_closure4.name = "ObservatoryConnection__init_closure4";
    $desc = $collectedClasses$.ObservatoryConnection__init_closure4[1];
    ObservatoryConnection__init_closure4.prototype = $desc;
    ObservatoryConnection__init_closure4.$__fields__ = ["$this"];
    function ObservatoryConnection__init_closure5($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryConnection__init_closure5.builtin$cls = "ObservatoryConnection__init_closure5";
    if (!("name" in ObservatoryConnection__init_closure5))
      ObservatoryConnection__init_closure5.name = "ObservatoryConnection__init_closure5";
    $desc = $collectedClasses$.ObservatoryConnection__init_closure5[1];
    ObservatoryConnection__init_closure5.prototype = $desc;
    ObservatoryConnection__init_closure5.$__fields__ = ["$this"];
    function ObservatoryConnection__init_closure6($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryConnection__init_closure6.builtin$cls = "ObservatoryConnection__init_closure6";
    if (!("name" in ObservatoryConnection__init_closure6))
      ObservatoryConnection__init_closure6.name = "ObservatoryConnection__init_closure6";
    $desc = $collectedClasses$.ObservatoryConnection__init_closure6[1];
    ObservatoryConnection__init_closure6.prototype = $desc;
    ObservatoryConnection__init_closure6.$__fields__ = ["$this"];
    function ObservatoryConnection__init_closure7($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryConnection__init_closure7.builtin$cls = "ObservatoryConnection__init_closure7";
    if (!("name" in ObservatoryConnection__init_closure7))
      ObservatoryConnection__init_closure7.name = "ObservatoryConnection__init_closure7";
    $desc = $collectedClasses$.ObservatoryConnection__init_closure7[1];
    ObservatoryConnection__init_closure7.prototype = $desc;
    ObservatoryConnection__init_closure7.$__fields__ = ["$this"];
    function ObservatoryConnection__init_closure8($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryConnection__init_closure8.builtin$cls = "ObservatoryConnection__init_closure8";
    if (!("name" in ObservatoryConnection__init_closure8))
      ObservatoryConnection__init_closure8.name = "ObservatoryConnection__init_closure8";
    $desc = $collectedClasses$.ObservatoryConnection__init_closure8[1];
    ObservatoryConnection__init_closure8.prototype = $desc;
    ObservatoryConnection__init_closure8.$__fields__ = ["$this"];
    function ObservatoryConnection__installBreakpoints_closure(_bps) {
      this._bps = _bps;
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints_closure.builtin$cls = "ObservatoryConnection__installBreakpoints_closure";
    if (!("name" in ObservatoryConnection__installBreakpoints_closure))
      ObservatoryConnection__installBreakpoints_closure.name = "ObservatoryConnection__installBreakpoints_closure";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints_closure[1];
    ObservatoryConnection__installBreakpoints_closure.prototype = $desc;
    ObservatoryConnection__installBreakpoints_closure.$__fields__ = ["_bps"];
    function ObservatoryConnection__installBreakpoints_closure0($this, isolate, addBreakpoint) {
      this.$this = $this;
      this.isolate = isolate;
      this.addBreakpoint = addBreakpoint;
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints_closure0.builtin$cls = "ObservatoryConnection__installBreakpoints_closure0";
    if (!("name" in ObservatoryConnection__installBreakpoints_closure0))
      ObservatoryConnection__installBreakpoints_closure0.name = "ObservatoryConnection__installBreakpoints_closure0";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints_closure0[1];
    ObservatoryConnection__installBreakpoints_closure0.prototype = $desc;
    ObservatoryConnection__installBreakpoints_closure0.$__fields__ = ["$this", "isolate", "addBreakpoint"];
    function ObservatoryConnection__installBreakpoints__closure1($this, isolate, addBreakpoint, bp) {
      this.$this = $this;
      this.isolate = isolate;
      this.addBreakpoint = addBreakpoint;
      this.bp = bp;
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints__closure1.builtin$cls = "ObservatoryConnection__installBreakpoints__closure1";
    if (!("name" in ObservatoryConnection__installBreakpoints__closure1))
      ObservatoryConnection__installBreakpoints__closure1.name = "ObservatoryConnection__installBreakpoints__closure1";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints__closure1[1];
    ObservatoryConnection__installBreakpoints__closure1.prototype = $desc;
    ObservatoryConnection__installBreakpoints__closure1.$__fields__ = ["$this", "isolate", "addBreakpoint", "bp"];
    function ObservatoryConnection__installBreakpoints___closure0($this, isolate, addBreakpoint, bp) {
      this.$this = $this;
      this.isolate = isolate;
      this.addBreakpoint = addBreakpoint;
      this.bp = bp;
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints___closure0.builtin$cls = "ObservatoryConnection__installBreakpoints___closure0";
    if (!("name" in ObservatoryConnection__installBreakpoints___closure0))
      ObservatoryConnection__installBreakpoints___closure0.name = "ObservatoryConnection__installBreakpoints___closure0";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints___closure0[1];
    ObservatoryConnection__installBreakpoints___closure0.prototype = $desc;
    ObservatoryConnection__installBreakpoints___closure0.$__fields__ = ["$this", "isolate", "addBreakpoint", "bp"];
    function ObservatoryConnection__installBreakpoints____closure1(addBreakpoint, bp) {
      this.addBreakpoint = addBreakpoint;
      this.bp = bp;
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints____closure1.builtin$cls = "ObservatoryConnection__installBreakpoints____closure1";
    if (!("name" in ObservatoryConnection__installBreakpoints____closure1))
      ObservatoryConnection__installBreakpoints____closure1.name = "ObservatoryConnection__installBreakpoints____closure1";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints____closure1[1];
    ObservatoryConnection__installBreakpoints____closure1.prototype = $desc;
    ObservatoryConnection__installBreakpoints____closure1.$__fields__ = ["addBreakpoint", "bp"];
    function ObservatoryConnection__installBreakpoints____closure2() {
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints____closure2.builtin$cls = "ObservatoryConnection__installBreakpoints____closure2";
    if (!("name" in ObservatoryConnection__installBreakpoints____closure2))
      ObservatoryConnection__installBreakpoints____closure2.name = "ObservatoryConnection__installBreakpoints____closure2";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints____closure2[1];
    ObservatoryConnection__installBreakpoints____closure2.prototype = $desc;
    ObservatoryConnection__installBreakpoints____closure2.$__fields__ = [];
    function ObservatoryConnection__installBreakpoints__closure2(bp) {
      this.bp = bp;
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints__closure2.builtin$cls = "ObservatoryConnection__installBreakpoints__closure2";
    if (!("name" in ObservatoryConnection__installBreakpoints__closure2))
      ObservatoryConnection__installBreakpoints__closure2.name = "ObservatoryConnection__installBreakpoints__closure2";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints__closure2[1];
    ObservatoryConnection__installBreakpoints__closure2.prototype = $desc;
    ObservatoryConnection__installBreakpoints__closure2.$__fields__ = ["bp"];
    function ObservatoryConnection__installBreakpoints_closure1($this, isolate, _bps) {
      this.$this = $this;
      this.isolate = isolate;
      this._bps = _bps;
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints_closure1.builtin$cls = "ObservatoryConnection__installBreakpoints_closure1";
    if (!("name" in ObservatoryConnection__installBreakpoints_closure1))
      ObservatoryConnection__installBreakpoints_closure1.name = "ObservatoryConnection__installBreakpoints_closure1";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints_closure1[1];
    ObservatoryConnection__installBreakpoints_closure1.prototype = $desc;
    ObservatoryConnection__installBreakpoints_closure1.$__fields__ = ["$this", "isolate", "_bps"];
    function ObservatoryConnection__installBreakpoints__closure0() {
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints__closure0.builtin$cls = "ObservatoryConnection__installBreakpoints__closure0";
    if (!("name" in ObservatoryConnection__installBreakpoints__closure0))
      ObservatoryConnection__installBreakpoints__closure0.name = "ObservatoryConnection__installBreakpoints__closure0";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints__closure0[1];
    ObservatoryConnection__installBreakpoints__closure0.prototype = $desc;
    ObservatoryConnection__installBreakpoints__closure0.$__fields__ = [];
    function ObservatoryConnection__installBreakpoints_closure2($this, isolate, addBreakpoint) {
      this.$this = $this;
      this.isolate = isolate;
      this.addBreakpoint = addBreakpoint;
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints_closure2.builtin$cls = "ObservatoryConnection__installBreakpoints_closure2";
    if (!("name" in ObservatoryConnection__installBreakpoints_closure2))
      ObservatoryConnection__installBreakpoints_closure2.name = "ObservatoryConnection__installBreakpoints_closure2";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints_closure2[1];
    ObservatoryConnection__installBreakpoints_closure2.prototype = $desc;
    ObservatoryConnection__installBreakpoints_closure2.$__fields__ = ["$this", "isolate", "addBreakpoint"];
    function ObservatoryConnection__installBreakpoints__closure($this, isolate, addBreakpoint, bp) {
      this.$this = $this;
      this.isolate = isolate;
      this.addBreakpoint = addBreakpoint;
      this.bp = bp;
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints__closure.builtin$cls = "ObservatoryConnection__installBreakpoints__closure";
    if (!("name" in ObservatoryConnection__installBreakpoints__closure))
      ObservatoryConnection__installBreakpoints__closure.name = "ObservatoryConnection__installBreakpoints__closure";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints__closure[1];
    ObservatoryConnection__installBreakpoints__closure.prototype = $desc;
    ObservatoryConnection__installBreakpoints__closure.$__fields__ = ["$this", "isolate", "addBreakpoint", "bp"];
    function ObservatoryConnection__installBreakpoints___closure($this, isolate, addBreakpoint, bp) {
      this.$this = $this;
      this.isolate = isolate;
      this.addBreakpoint = addBreakpoint;
      this.bp = bp;
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints___closure.builtin$cls = "ObservatoryConnection__installBreakpoints___closure";
    if (!("name" in ObservatoryConnection__installBreakpoints___closure))
      ObservatoryConnection__installBreakpoints___closure.name = "ObservatoryConnection__installBreakpoints___closure";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints___closure[1];
    ObservatoryConnection__installBreakpoints___closure.prototype = $desc;
    ObservatoryConnection__installBreakpoints___closure.$__fields__ = ["$this", "isolate", "addBreakpoint", "bp"];
    function ObservatoryConnection__installBreakpoints____closure(addBreakpoint, bp) {
      this.addBreakpoint = addBreakpoint;
      this.bp = bp;
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints____closure.builtin$cls = "ObservatoryConnection__installBreakpoints____closure";
    if (!("name" in ObservatoryConnection__installBreakpoints____closure))
      ObservatoryConnection__installBreakpoints____closure.name = "ObservatoryConnection__installBreakpoints____closure";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints____closure[1];
    ObservatoryConnection__installBreakpoints____closure.prototype = $desc;
    ObservatoryConnection__installBreakpoints____closure.$__fields__ = ["addBreakpoint", "bp"];
    function ObservatoryConnection__installBreakpoints____closure0() {
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints____closure0.builtin$cls = "ObservatoryConnection__installBreakpoints____closure0";
    if (!("name" in ObservatoryConnection__installBreakpoints____closure0))
      ObservatoryConnection__installBreakpoints____closure0.name = "ObservatoryConnection__installBreakpoints____closure0";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints____closure0[1];
    ObservatoryConnection__installBreakpoints____closure0.prototype = $desc;
    ObservatoryConnection__installBreakpoints____closure0.$__fields__ = [];
    function ObservatoryConnection__installBreakpoints_closure3($this, isolate) {
      this.$this = $this;
      this.isolate = isolate;
      this.$deferredAction();
    }
    ObservatoryConnection__installBreakpoints_closure3.builtin$cls = "ObservatoryConnection__installBreakpoints_closure3";
    if (!("name" in ObservatoryConnection__installBreakpoints_closure3))
      ObservatoryConnection__installBreakpoints_closure3.name = "ObservatoryConnection__installBreakpoints_closure3";
    $desc = $collectedClasses$.ObservatoryConnection__installBreakpoints_closure3[1];
    ObservatoryConnection__installBreakpoints_closure3.prototype = $desc;
    ObservatoryConnection__installBreakpoints_closure3.$__fields__ = ["$this", "isolate"];
    function ObservatoryConnection__handleIsolateEvent_closure($this, ref) {
      this.$this = $this;
      this.ref = ref;
      this.$deferredAction();
    }
    ObservatoryConnection__handleIsolateEvent_closure.builtin$cls = "ObservatoryConnection__handleIsolateEvent_closure";
    if (!("name" in ObservatoryConnection__handleIsolateEvent_closure))
      ObservatoryConnection__handleIsolateEvent_closure.name = "ObservatoryConnection__handleIsolateEvent_closure";
    $desc = $collectedClasses$.ObservatoryConnection__handleIsolateEvent_closure[1];
    ObservatoryConnection__handleIsolateEvent_closure.prototype = $desc;
    ObservatoryConnection__handleIsolateEvent_closure.$__fields__ = ["$this", "ref"];
    function ObservatoryConnection__handleIsolateEvent__closure() {
      this.$deferredAction();
    }
    ObservatoryConnection__handleIsolateEvent__closure.builtin$cls = "ObservatoryConnection__handleIsolateEvent__closure";
    if (!("name" in ObservatoryConnection__handleIsolateEvent__closure))
      ObservatoryConnection__handleIsolateEvent__closure.name = "ObservatoryConnection__handleIsolateEvent__closure";
    $desc = $collectedClasses$.ObservatoryConnection__handleIsolateEvent__closure[1];
    ObservatoryConnection__handleIsolateEvent__closure.prototype = $desc;
    ObservatoryConnection__handleIsolateEvent__closure.$__fields__ = [];
    function ObservatoryConnection__handleIsolateEvent___closure(obsIsolate) {
      this.obsIsolate = obsIsolate;
      this.$deferredAction();
    }
    ObservatoryConnection__handleIsolateEvent___closure.builtin$cls = "ObservatoryConnection__handleIsolateEvent___closure";
    if (!("name" in ObservatoryConnection__handleIsolateEvent___closure))
      ObservatoryConnection__handleIsolateEvent___closure.name = "ObservatoryConnection__handleIsolateEvent___closure";
    $desc = $collectedClasses$.ObservatoryConnection__handleIsolateEvent___closure[1];
    ObservatoryConnection__handleIsolateEvent___closure.prototype = $desc;
    ObservatoryConnection__handleIsolateEvent___closure.$__fields__ = ["obsIsolate"];
    function ObservatoryConnection__handleDebugEvent_closure() {
      this.$deferredAction();
    }
    ObservatoryConnection__handleDebugEvent_closure.builtin$cls = "ObservatoryConnection__handleDebugEvent_closure";
    if (!("name" in ObservatoryConnection__handleDebugEvent_closure))
      ObservatoryConnection__handleDebugEvent_closure.name = "ObservatoryConnection__handleDebugEvent_closure";
    $desc = $collectedClasses$.ObservatoryConnection__handleDebugEvent_closure[1];
    ObservatoryConnection__handleDebugEvent_closure.prototype = $desc;
    ObservatoryConnection__handleDebugEvent_closure.$__fields__ = [];
    function ObservatoryConnection__handleDebugEvent__closure(obsIsolate) {
      this.obsIsolate = obsIsolate;
      this.$deferredAction();
    }
    ObservatoryConnection__handleDebugEvent__closure.builtin$cls = "ObservatoryConnection__handleDebugEvent__closure";
    if (!("name" in ObservatoryConnection__handleDebugEvent__closure))
      ObservatoryConnection__handleDebugEvent__closure.name = "ObservatoryConnection__handleDebugEvent__closure";
    $desc = $collectedClasses$.ObservatoryConnection__handleDebugEvent__closure[1];
    ObservatoryConnection__handleDebugEvent__closure.prototype = $desc;
    ObservatoryConnection__handleDebugEvent__closure.$__fields__ = ["obsIsolate"];
    function ObservatoryConnection__handleDebugEvent_closure0(event, isolate) {
      this.event = event;
      this.isolate = isolate;
      this.$deferredAction();
    }
    ObservatoryConnection__handleDebugEvent_closure0.builtin$cls = "ObservatoryConnection__handleDebugEvent_closure0";
    if (!("name" in ObservatoryConnection__handleDebugEvent_closure0))
      ObservatoryConnection__handleDebugEvent_closure0.name = "ObservatoryConnection__handleDebugEvent_closure0";
    $desc = $collectedClasses$.ObservatoryConnection__handleDebugEvent_closure0[1];
    ObservatoryConnection__handleDebugEvent_closure0.prototype = $desc;
    ObservatoryConnection__handleDebugEvent_closure0.$__fields__ = ["event", "isolate"];
    function ObservatoryConnection__registerNewIsolate_closure($this, ref, isolate) {
      this.$this = $this;
      this.ref = ref;
      this.isolate = isolate;
      this.$deferredAction();
    }
    ObservatoryConnection__registerNewIsolate_closure.builtin$cls = "ObservatoryConnection__registerNewIsolate_closure";
    if (!("name" in ObservatoryConnection__registerNewIsolate_closure))
      ObservatoryConnection__registerNewIsolate_closure.name = "ObservatoryConnection__registerNewIsolate_closure";
    $desc = $collectedClasses$.ObservatoryConnection__registerNewIsolate_closure[1];
    ObservatoryConnection__registerNewIsolate_closure.prototype = $desc;
    ObservatoryConnection__registerNewIsolate_closure.$__fields__ = ["$this", "ref", "isolate"];
    function ObservatoryConnection__registerNewIsolate_closure0($this, isolate) {
      this.$this = $this;
      this.isolate = isolate;
      this.$deferredAction();
    }
    ObservatoryConnection__registerNewIsolate_closure0.builtin$cls = "ObservatoryConnection__registerNewIsolate_closure0";
    if (!("name" in ObservatoryConnection__registerNewIsolate_closure0))
      ObservatoryConnection__registerNewIsolate_closure0.name = "ObservatoryConnection__registerNewIsolate_closure0";
    $desc = $collectedClasses$.ObservatoryConnection__registerNewIsolate_closure0[1];
    ObservatoryConnection__registerNewIsolate_closure0.prototype = $desc;
    ObservatoryConnection__registerNewIsolate_closure0.$__fields__ = ["$this", "isolate"];
    function ObservatoryConnection__printExceptionToConsole_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryConnection__printExceptionToConsole_closure.builtin$cls = "ObservatoryConnection__printExceptionToConsole_closure";
    if (!("name" in ObservatoryConnection__printExceptionToConsole_closure))
      ObservatoryConnection__printExceptionToConsole_closure.name = "ObservatoryConnection__printExceptionToConsole_closure";
    $desc = $collectedClasses$.ObservatoryConnection__printExceptionToConsole_closure[1];
    ObservatoryConnection__printExceptionToConsole_closure.prototype = $desc;
    ObservatoryConnection__printExceptionToConsole_closure.$__fields__ = ["$this"];
    function ObservatoryConnection__printExceptionToConsole_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryConnection__printExceptionToConsole_closure0.builtin$cls = "ObservatoryConnection__printExceptionToConsole_closure0";
    if (!("name" in ObservatoryConnection__printExceptionToConsole_closure0))
      ObservatoryConnection__printExceptionToConsole_closure0.name = "ObservatoryConnection__printExceptionToConsole_closure0";
    $desc = $collectedClasses$.ObservatoryConnection__printExceptionToConsole_closure0[1];
    ObservatoryConnection__printExceptionToConsole_closure0.prototype = $desc;
    ObservatoryConnection__printExceptionToConsole_closure0.$__fields__ = ["$this"];
    function ObservatoryLog(logger) {
      this.logger = logger;
      this.$deferredAction();
    }
    ObservatoryLog.builtin$cls = "ObservatoryLog";
    if (!("name" in ObservatoryLog))
      ObservatoryLog.name = "ObservatoryLog";
    $desc = $collectedClasses$.ObservatoryLog[1];
    ObservatoryLog.prototype = $desc;
    ObservatoryLog.$__fields__ = ["logger"];
    function ObservatoryIsolate(connection, service, isolateRef, _isolateInitializedCompleter, isolate, scriptManager, suspended, suspendedAtAsyncSuspension, _didInitialResume, _wasPauseAtStart, _detail, frames) {
      this.connection = connection;
      this.service = service;
      this.isolateRef = isolateRef;
      this._isolateInitializedCompleter = _isolateInitializedCompleter;
      this.isolate = isolate;
      this.scriptManager = scriptManager;
      this.suspended = suspended;
      this.suspendedAtAsyncSuspension = suspendedAtAsyncSuspension;
      this._didInitialResume = _didInitialResume;
      this._wasPauseAtStart = _wasPauseAtStart;
      this._detail = _detail;
      this.frames = frames;
      this.$deferredAction();
    }
    ObservatoryIsolate.builtin$cls = "ObservatoryIsolate";
    if (!("name" in ObservatoryIsolate))
      ObservatoryIsolate.name = "ObservatoryIsolate";
    $desc = $collectedClasses$.ObservatoryIsolate[1];
    ObservatoryIsolate.prototype = $desc;
    ObservatoryIsolate.$__fields__ = ["connection", "service", "isolateRef", "_isolateInitializedCompleter", "isolate", "scriptManager", "suspended", "suspendedAtAsyncSuspension", "_didInitialResume", "_wasPauseAtStart", "_detail", "frames"];
    ObservatoryIsolate.prototype.get$_isolateInitializedCompleter = function() {
      return this._isolateInitializedCompleter;
    };
    ObservatoryIsolate.prototype.get$isolate = function() {
      return this.isolate;
    };
    ObservatoryIsolate.prototype.get$suspended = function() {
      return this.suspended;
    };
    ObservatoryIsolate.prototype.get$_wasPauseAtStart = function() {
      return this._wasPauseAtStart;
    };
    ObservatoryIsolate.prototype.set$_wasPauseAtStart = function(v) {
      return this._wasPauseAtStart = v;
    };
    ObservatoryIsolate.prototype.get$frames = function() {
      return this.frames;
    };
    function ObservatoryIsolate_libraries_closure() {
      this.$deferredAction();
    }
    ObservatoryIsolate_libraries_closure.builtin$cls = "ObservatoryIsolate_libraries_closure";
    if (!("name" in ObservatoryIsolate_libraries_closure))
      ObservatoryIsolate_libraries_closure.name = "ObservatoryIsolate_libraries_closure";
    $desc = $collectedClasses$.ObservatoryIsolate_libraries_closure[1];
    ObservatoryIsolate_libraries_closure.prototype = $desc;
    ObservatoryIsolate_libraries_closure.$__fields__ = [];
    function ObservatoryIsolate__updateIsolateInfo_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryIsolate__updateIsolateInfo_closure.builtin$cls = "ObservatoryIsolate__updateIsolateInfo_closure";
    if (!("name" in ObservatoryIsolate__updateIsolateInfo_closure))
      ObservatoryIsolate__updateIsolateInfo_closure.name = "ObservatoryIsolate__updateIsolateInfo_closure";
    $desc = $collectedClasses$.ObservatoryIsolate__updateIsolateInfo_closure[1];
    ObservatoryIsolate__updateIsolateInfo_closure.prototype = $desc;
    ObservatoryIsolate__updateIsolateInfo_closure.$__fields__ = ["$this"];
    function ObservatoryIsolate__populateFrames_closure(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryIsolate__populateFrames_closure.builtin$cls = "ObservatoryIsolate__populateFrames_closure";
    if (!("name" in ObservatoryIsolate__populateFrames_closure))
      ObservatoryIsolate__populateFrames_closure.name = "ObservatoryIsolate__populateFrames_closure";
    $desc = $collectedClasses$.ObservatoryIsolate__populateFrames_closure[1];
    ObservatoryIsolate__populateFrames_closure.prototype = $desc;
    ObservatoryIsolate__populateFrames_closure.$__fields__ = ["_box_0", "$this"];
    function ObservatoryIsolate__populateFrames__closure(_box_0, $this, scriptRefs) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.scriptRefs = scriptRefs;
      this.$deferredAction();
    }
    ObservatoryIsolate__populateFrames__closure.builtin$cls = "ObservatoryIsolate__populateFrames__closure";
    if (!("name" in ObservatoryIsolate__populateFrames__closure))
      ObservatoryIsolate__populateFrames__closure.name = "ObservatoryIsolate__populateFrames__closure";
    $desc = $collectedClasses$.ObservatoryIsolate__populateFrames__closure[1];
    ObservatoryIsolate__populateFrames__closure.prototype = $desc;
    ObservatoryIsolate__populateFrames__closure.$__fields__ = ["_box_0", "$this", "scriptRefs"];
    function ObservatoryIsolate__populateFrames___closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryIsolate__populateFrames___closure.builtin$cls = "ObservatoryIsolate__populateFrames___closure";
    if (!("name" in ObservatoryIsolate__populateFrames___closure))
      ObservatoryIsolate__populateFrames___closure.name = "ObservatoryIsolate__populateFrames___closure";
    $desc = $collectedClasses$.ObservatoryIsolate__populateFrames___closure[1];
    ObservatoryIsolate__populateFrames___closure.prototype = $desc;
    ObservatoryIsolate__populateFrames___closure.$__fields__ = ["$this"];
    function ObservatoryFrame(isolate, frame, isExceptionFrame, locals, _location) {
      this.isolate = isolate;
      this.frame = frame;
      this.isExceptionFrame = isExceptionFrame;
      this.locals = locals;
      this._location = _location;
      this.$deferredAction();
    }
    ObservatoryFrame.builtin$cls = "ObservatoryFrame";
    if (!("name" in ObservatoryFrame))
      ObservatoryFrame.name = "ObservatoryFrame";
    $desc = $collectedClasses$.ObservatoryFrame[1];
    ObservatoryFrame.prototype = $desc;
    ObservatoryFrame.$__fields__ = ["isolate", "frame", "isExceptionFrame", "locals", "_location"];
    ObservatoryFrame.prototype.get$isolate = function() {
      return this.isolate;
    };
    ObservatoryFrame.prototype.get$isExceptionFrame = function() {
      return this.isExceptionFrame;
    };
    ObservatoryFrame.prototype.get$locals = function() {
      return this.locals;
    };
    function ObservatoryFrame_eval_closure() {
      this.$deferredAction();
    }
    ObservatoryFrame_eval_closure.builtin$cls = "ObservatoryFrame_eval_closure";
    if (!("name" in ObservatoryFrame_eval_closure))
      ObservatoryFrame_eval_closure.name = "ObservatoryFrame_eval_closure";
    $desc = $collectedClasses$.ObservatoryFrame_eval_closure[1];
    ObservatoryFrame_eval_closure.prototype = $desc;
    ObservatoryFrame_eval_closure.$__fields__ = [];
    function ObservatoryVariable(_variable, value) {
      this._variable = _variable;
      this.value = value;
      this.$deferredAction();
    }
    ObservatoryVariable.builtin$cls = "ObservatoryVariable";
    if (!("name" in ObservatoryVariable))
      ObservatoryVariable.name = "ObservatoryVariable";
    $desc = $collectedClasses$.ObservatoryVariable[1];
    ObservatoryVariable.prototype = $desc;
    ObservatoryVariable.$__fields__ = ["_variable", "value"];
    ObservatoryVariable.prototype.get$value = function(receiver) {
      return this.value;
    };
    function ObservatoryFieldVariable(_field, value) {
      this._field = _field;
      this.value = value;
      this.$deferredAction();
    }
    ObservatoryFieldVariable.builtin$cls = "ObservatoryFieldVariable";
    if (!("name" in ObservatoryFieldVariable))
      ObservatoryFieldVariable.name = "ObservatoryFieldVariable";
    $desc = $collectedClasses$.ObservatoryFieldVariable[1];
    ObservatoryFieldVariable.prototype = $desc;
    ObservatoryFieldVariable.$__fields__ = ["_field", "value"];
    ObservatoryFieldVariable.prototype.get$value = function(receiver) {
      return this.value;
    };
    function ObservatoryMapVariable(isolate, association, _observatory_debugger$_value) {
      this.isolate = isolate;
      this.association = association;
      this._observatory_debugger$_value = _observatory_debugger$_value;
      this.$deferredAction();
    }
    ObservatoryMapVariable.builtin$cls = "ObservatoryMapVariable";
    if (!("name" in ObservatoryMapVariable))
      ObservatoryMapVariable.name = "ObservatoryMapVariable";
    $desc = $collectedClasses$.ObservatoryMapVariable[1];
    ObservatoryMapVariable.prototype = $desc;
    ObservatoryMapVariable.$__fields__ = ["isolate", "association", "_observatory_debugger$_value"];
    ObservatoryMapVariable.prototype.get$isolate = function() {
      return this.isolate;
    };
    function ObservatoryArrayVariable(isolate, index, _observatory_debugger$_value) {
      this.isolate = isolate;
      this.index = index;
      this._observatory_debugger$_value = _observatory_debugger$_value;
      this.$deferredAction();
    }
    ObservatoryArrayVariable.builtin$cls = "ObservatoryArrayVariable";
    if (!("name" in ObservatoryArrayVariable))
      ObservatoryArrayVariable.name = "ObservatoryArrayVariable";
    $desc = $collectedClasses$.ObservatoryArrayVariable[1];
    ObservatoryArrayVariable.prototype = $desc;
    ObservatoryArrayVariable.$__fields__ = ["isolate", "index", "_observatory_debugger$_value"];
    ObservatoryArrayVariable.prototype.get$isolate = function() {
      return this.isolate;
    };
    ObservatoryArrayVariable.prototype.get$index = function(receiver) {
      return this.index;
    };
    function ObservatoryCustomVariable(name, value) {
      this.name = name;
      this.value = value;
      this.$deferredAction();
    }
    ObservatoryCustomVariable.builtin$cls = "ObservatoryCustomVariable";
    if (!("name" in ObservatoryCustomVariable))
      ObservatoryCustomVariable.name = "ObservatoryCustomVariable";
    $desc = $collectedClasses$.ObservatoryCustomVariable[1];
    ObservatoryCustomVariable.prototype = $desc;
    ObservatoryCustomVariable.$__fields__ = ["name", "value"];
    ObservatoryCustomVariable.prototype.get$name = function(receiver) {
      return this.name;
    };
    ObservatoryCustomVariable.prototype.get$value = function(receiver) {
      return this.value;
    };
    function ObservatoryObjRefVariable(isolate, name, _observatory_debugger$_value) {
      this.isolate = isolate;
      this.name = name;
      this._observatory_debugger$_value = _observatory_debugger$_value;
      this.$deferredAction();
    }
    ObservatoryObjRefVariable.builtin$cls = "ObservatoryObjRefVariable";
    if (!("name" in ObservatoryObjRefVariable))
      ObservatoryObjRefVariable.name = "ObservatoryObjRefVariable";
    $desc = $collectedClasses$.ObservatoryObjRefVariable[1];
    ObservatoryObjRefVariable.prototype = $desc;
    ObservatoryObjRefVariable.$__fields__ = ["isolate", "name", "_observatory_debugger$_value"];
    ObservatoryObjRefVariable.prototype.get$isolate = function() {
      return this.isolate;
    };
    ObservatoryObjRefVariable.prototype.get$name = function(receiver) {
      return this.name;
    };
    function ObservatoryInstanceRefValue(isolate, value) {
      this.isolate = isolate;
      this.value = value;
      this.$deferredAction();
    }
    ObservatoryInstanceRefValue.builtin$cls = "ObservatoryInstanceRefValue";
    if (!("name" in ObservatoryInstanceRefValue))
      ObservatoryInstanceRefValue.name = "ObservatoryInstanceRefValue";
    $desc = $collectedClasses$.ObservatoryInstanceRefValue[1];
    ObservatoryInstanceRefValue.prototype = $desc;
    ObservatoryInstanceRefValue.$__fields__ = ["isolate", "value"];
    ObservatoryInstanceRefValue.prototype.get$isolate = function() {
      return this.isolate;
    };
    ObservatoryInstanceRefValue.prototype.get$value = function(receiver) {
      return this.value;
    };
    function ObservatoryInstanceRefValue_getChildren_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryInstanceRefValue_getChildren_closure.builtin$cls = "ObservatoryInstanceRefValue_getChildren_closure";
    if (!("name" in ObservatoryInstanceRefValue_getChildren_closure))
      ObservatoryInstanceRefValue_getChildren_closure.name = "ObservatoryInstanceRefValue_getChildren_closure";
    $desc = $collectedClasses$.ObservatoryInstanceRefValue_getChildren_closure[1];
    ObservatoryInstanceRefValue_getChildren_closure.prototype = $desc;
    ObservatoryInstanceRefValue_getChildren_closure.$__fields__ = ["$this"];
    function ObservatoryInstanceRefValue_getChildren__closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryInstanceRefValue_getChildren__closure.builtin$cls = "ObservatoryInstanceRefValue_getChildren__closure";
    if (!("name" in ObservatoryInstanceRefValue_getChildren__closure))
      ObservatoryInstanceRefValue_getChildren__closure.name = "ObservatoryInstanceRefValue_getChildren__closure";
    $desc = $collectedClasses$.ObservatoryInstanceRefValue_getChildren__closure[1];
    ObservatoryInstanceRefValue_getChildren__closure.prototype = $desc;
    ObservatoryInstanceRefValue_getChildren__closure.$__fields__ = ["$this"];
    function ObservatoryInstanceRefValue_getChildren__closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryInstanceRefValue_getChildren__closure0.builtin$cls = "ObservatoryInstanceRefValue_getChildren__closure0";
    if (!("name" in ObservatoryInstanceRefValue_getChildren__closure0))
      ObservatoryInstanceRefValue_getChildren__closure0.name = "ObservatoryInstanceRefValue_getChildren__closure0";
    $desc = $collectedClasses$.ObservatoryInstanceRefValue_getChildren__closure0[1];
    ObservatoryInstanceRefValue_getChildren__closure0.prototype = $desc;
    ObservatoryInstanceRefValue_getChildren__closure0.$__fields__ = ["$this"];
    function ObservatoryInstanceRefValue_getChildren__closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryInstanceRefValue_getChildren__closure1.builtin$cls = "ObservatoryInstanceRefValue_getChildren__closure1";
    if (!("name" in ObservatoryInstanceRefValue_getChildren__closure1))
      ObservatoryInstanceRefValue_getChildren__closure1.name = "ObservatoryInstanceRefValue_getChildren__closure1";
    $desc = $collectedClasses$.ObservatoryInstanceRefValue_getChildren__closure1[1];
    ObservatoryInstanceRefValue_getChildren__closure1.prototype = $desc;
    ObservatoryInstanceRefValue_getChildren__closure1.$__fields__ = ["$this"];
    function ObservatoryInstanceRefValue_invokeToString_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryInstanceRefValue_invokeToString_closure.builtin$cls = "ObservatoryInstanceRefValue_invokeToString_closure";
    if (!("name" in ObservatoryInstanceRefValue_invokeToString_closure))
      ObservatoryInstanceRefValue_invokeToString_closure.name = "ObservatoryInstanceRefValue_invokeToString_closure";
    $desc = $collectedClasses$.ObservatoryInstanceRefValue_invokeToString_closure[1];
    ObservatoryInstanceRefValue_invokeToString_closure.prototype = $desc;
    ObservatoryInstanceRefValue_invokeToString_closure.$__fields__ = ["$this"];
    function ObservatoryObjRefValue(isolate, ref) {
      this.isolate = isolate;
      this.ref = ref;
      this.$deferredAction();
    }
    ObservatoryObjRefValue.builtin$cls = "ObservatoryObjRefValue";
    if (!("name" in ObservatoryObjRefValue))
      ObservatoryObjRefValue.name = "ObservatoryObjRefValue";
    $desc = $collectedClasses$.ObservatoryObjRefValue[1];
    ObservatoryObjRefValue.prototype = $desc;
    ObservatoryObjRefValue.$__fields__ = ["isolate", "ref"];
    ObservatoryObjRefValue.prototype.get$isolate = function() {
      return this.isolate;
    };
    function SimpleDebugValue(value) {
      this.value = value;
      this.$deferredAction();
    }
    SimpleDebugValue.builtin$cls = "SimpleDebugValue";
    if (!("name" in SimpleDebugValue))
      SimpleDebugValue.name = "SimpleDebugValue";
    $desc = $collectedClasses$.SimpleDebugValue[1];
    SimpleDebugValue.prototype = $desc;
    SimpleDebugValue.$__fields__ = ["value"];
    SimpleDebugValue.prototype.get$value = function(receiver) {
      return this.value;
    };
    function SentinelDebugValue(sentenial) {
      this.sentenial = sentenial;
      this.$deferredAction();
    }
    SentinelDebugValue.builtin$cls = "SentinelDebugValue";
    if (!("name" in SentinelDebugValue))
      SentinelDebugValue.name = "SentinelDebugValue";
    $desc = $collectedClasses$.SentinelDebugValue[1];
    SentinelDebugValue.prototype = $desc;
    SentinelDebugValue.$__fields__ = ["sentenial"];
    function ObservatoryLocation(isolate, location, _observatory_debugger$_completer, _unableToResolve, _observatory_debugger$_path, _pos, resolved) {
      this.isolate = isolate;
      this.location = location;
      this._observatory_debugger$_completer = _observatory_debugger$_completer;
      this._unableToResolve = _unableToResolve;
      this._observatory_debugger$_path = _observatory_debugger$_path;
      this._pos = _pos;
      this.resolved = resolved;
      this.$deferredAction();
    }
    ObservatoryLocation.builtin$cls = "ObservatoryLocation";
    if (!("name" in ObservatoryLocation))
      ObservatoryLocation.name = "ObservatoryLocation";
    $desc = $collectedClasses$.ObservatoryLocation[1];
    ObservatoryLocation.prototype = $desc;
    ObservatoryLocation.$__fields__ = ["isolate", "location", "_observatory_debugger$_completer", "_unableToResolve", "_observatory_debugger$_path", "_pos", "resolved"];
    ObservatoryLocation.prototype.get$isolate = function() {
      return this.isolate;
    };
    ObservatoryLocation.prototype.get$location = function(receiver) {
      return this.location;
    };
    function ObservatoryLocation_resolve_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryLocation_resolve_closure.builtin$cls = "ObservatoryLocation_resolve_closure";
    if (!("name" in ObservatoryLocation_resolve_closure))
      ObservatoryLocation_resolve_closure.name = "ObservatoryLocation_resolve_closure";
    $desc = $collectedClasses$.ObservatoryLocation_resolve_closure[1];
    ObservatoryLocation_resolve_closure.prototype = $desc;
    ObservatoryLocation_resolve_closure.$__fields__ = ["$this"];
    function ObservatoryLocation_resolve_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryLocation_resolve_closure0.builtin$cls = "ObservatoryLocation_resolve_closure0";
    if (!("name" in ObservatoryLocation_resolve_closure0))
      ObservatoryLocation_resolve_closure0.name = "ObservatoryLocation_resolve_closure0";
    $desc = $collectedClasses$.ObservatoryLocation_resolve_closure0[1];
    ObservatoryLocation_resolve_closure0.prototype = $desc;
    ObservatoryLocation_resolve_closure0.$__fields__ = ["$this"];
    function ObservatoryLocation_resolve_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryLocation_resolve_closure1.builtin$cls = "ObservatoryLocation_resolve_closure1";
    if (!("name" in ObservatoryLocation_resolve_closure1))
      ObservatoryLocation_resolve_closure1.name = "ObservatoryLocation_resolve_closure1";
    $desc = $collectedClasses$.ObservatoryLocation_resolve_closure1[1];
    ObservatoryLocation_resolve_closure1.prototype = $desc;
    ObservatoryLocation_resolve_closure1.$__fields__ = ["$this"];
    function ObservatoryLocation__resolve_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ObservatoryLocation__resolve_closure.builtin$cls = "ObservatoryLocation__resolve_closure";
    if (!("name" in ObservatoryLocation__resolve_closure))
      ObservatoryLocation__resolve_closure.name = "ObservatoryLocation__resolve_closure";
    $desc = $collectedClasses$.ObservatoryLocation__resolve_closure[1];
    ObservatoryLocation__resolve_closure.prototype = $desc;
    ObservatoryLocation__resolve_closure.$__fields__ = ["$this"];
    function ObservatoryLibrary(_ref, _displayUri) {
      this._ref = _ref;
      this._displayUri = _displayUri;
      this.$deferredAction();
    }
    ObservatoryLibrary.builtin$cls = "ObservatoryLibrary";
    if (!("name" in ObservatoryLibrary))
      ObservatoryLibrary.name = "ObservatoryLibrary";
    $desc = $collectedClasses$.ObservatoryLibrary[1];
    ObservatoryLibrary.prototype = $desc;
    ObservatoryLibrary.$__fields__ = ["_ref", "_displayUri"];
    function ScriptManager(service, isolate, _scripts, _scriptCompleters) {
      this.service = service;
      this.isolate = isolate;
      this._scripts = _scripts;
      this._scriptCompleters = _scriptCompleters;
      this.$deferredAction();
    }
    ScriptManager.builtin$cls = "ScriptManager";
    if (!("name" in ScriptManager))
      ScriptManager.name = "ScriptManager";
    $desc = $collectedClasses$.ScriptManager[1];
    ScriptManager.prototype = $desc;
    ScriptManager.$__fields__ = ["service", "isolate", "_scripts", "_scriptCompleters"];
    ScriptManager.prototype.get$isolate = function() {
      return this.isolate;
    };
    function ScriptManager_resolveScript_closure($this, refId, completer) {
      this.$this = $this;
      this.refId = refId;
      this.completer = completer;
      this.$deferredAction();
    }
    ScriptManager_resolveScript_closure.builtin$cls = "ScriptManager_resolveScript_closure";
    if (!("name" in ScriptManager_resolveScript_closure))
      ScriptManager_resolveScript_closure.name = "ScriptManager_resolveScript_closure";
    $desc = $collectedClasses$.ScriptManager_resolveScript_closure[1];
    ScriptManager_resolveScript_closure.prototype = $desc;
    ScriptManager_resolveScript_closure.$__fields__ = ["$this", "refId", "completer"];
    function ScriptManager_resolveScript_closure0(completer) {
      this.completer = completer;
      this.$deferredAction();
    }
    ScriptManager_resolveScript_closure0.builtin$cls = "ScriptManager_resolveScript_closure0";
    if (!("name" in ScriptManager_resolveScript_closure0))
      ScriptManager_resolveScript_closure0.name = "ScriptManager_resolveScript_closure0";
    $desc = $collectedClasses$.ScriptManager_resolveScript_closure0[1];
    ScriptManager_resolveScript_closure0.prototype = $desc;
    ScriptManager_resolveScript_closure0.$__fields__ = ["completer"];
    function ScriptManager_resolveScript_closure1($this, refId) {
      this.$this = $this;
      this.refId = refId;
      this.$deferredAction();
    }
    ScriptManager_resolveScript_closure1.builtin$cls = "ScriptManager_resolveScript_closure1";
    if (!("name" in ScriptManager_resolveScript_closure1))
      ScriptManager_resolveScript_closure1.name = "ScriptManager_resolveScript_closure1";
    $desc = $collectedClasses$.ScriptManager_resolveScript_closure1[1];
    ScriptManager_resolveScript_closure1.prototype = $desc;
    ScriptManager_resolveScript_closure1.$__fields__ = ["$this", "refId"];
    function _ObservatoryServiceWrapper(connection) {
      this.connection = connection;
      this.$deferredAction();
    }
    _ObservatoryServiceWrapper.builtin$cls = "_ObservatoryServiceWrapper";
    if (!("name" in _ObservatoryServiceWrapper))
      _ObservatoryServiceWrapper.name = "_ObservatoryServiceWrapper";
    $desc = $collectedClasses$._ObservatoryServiceWrapper[1];
    _ObservatoryServiceWrapper.prototype = $desc;
    _ObservatoryServiceWrapper.$__fields__ = ["connection"];
    function _VmSourceCache(cacheDir, _pathMappings) {
      this.cacheDir = cacheDir;
      this._pathMappings = _pathMappings;
      this.$deferredAction();
    }
    _VmSourceCache.builtin$cls = "_VmSourceCache";
    if (!("name" in _VmSourceCache))
      _VmSourceCache.name = "_VmSourceCache";
    $desc = $collectedClasses$._VmSourceCache[1];
    _VmSourceCache.prototype = $desc;
    _VmSourceCache.$__fields__ = ["cacheDir", "_pathMappings"];
    function LineColumn(line, column) {
      this.line = line;
      this.column = column;
      this.$deferredAction();
    }
    LineColumn.builtin$cls = "LineColumn";
    if (!("name" in LineColumn))
      LineColumn.name = "LineColumn";
    $desc = $collectedClasses$.LineColumn[1];
    LineColumn.prototype = $desc;
    LineColumn.$__fields__ = ["line", "column"];
    LineColumn.prototype.get$line = function(receiver) {
      return this.line;
    };
    LineColumn.prototype.get$column = function() {
      return this.column;
    };
    function WebSocket(_ws) {
      this._ws = _ws;
      this.$deferredAction();
    }
    WebSocket.builtin$cls = "WebSocket";
    if (!("name" in WebSocket))
      WebSocket.name = "WebSocket";
    $desc = $collectedClasses$.WebSocket[1];
    WebSocket.prototype = $desc;
    WebSocket.$__fields__ = ["_ws"];
    function WebSocket_onOpen_closure(controller) {
      this.controller = controller;
      this.$deferredAction();
    }
    WebSocket_onOpen_closure.builtin$cls = "WebSocket_onOpen_closure";
    if (!("name" in WebSocket_onOpen_closure))
      WebSocket_onOpen_closure.name = "WebSocket_onOpen_closure";
    $desc = $collectedClasses$.WebSocket_onOpen_closure[1];
    WebSocket_onOpen_closure.prototype = $desc;
    WebSocket_onOpen_closure.$__fields__ = ["controller"];
    function WebSocket_onMessage_closure(controller) {
      this.controller = controller;
      this.$deferredAction();
    }
    WebSocket_onMessage_closure.builtin$cls = "WebSocket_onMessage_closure";
    if (!("name" in WebSocket_onMessage_closure))
      WebSocket_onMessage_closure.name = "WebSocket_onMessage_closure";
    $desc = $collectedClasses$.WebSocket_onMessage_closure[1];
    WebSocket_onMessage_closure.prototype = $desc;
    WebSocket_onMessage_closure.$__fields__ = ["controller"];
    function WebSocket_onError_closure(controller) {
      this.controller = controller;
      this.$deferredAction();
    }
    WebSocket_onError_closure.builtin$cls = "WebSocket_onError_closure";
    if (!("name" in WebSocket_onError_closure))
      WebSocket_onError_closure.name = "WebSocket_onError_closure";
    $desc = $collectedClasses$.WebSocket_onError_closure[1];
    WebSocket_onError_closure.prototype = $desc;
    WebSocket_onError_closure.$__fields__ = ["controller"];
    function WebSocket_onClose_closure(controller) {
      this.controller = controller;
      this.$deferredAction();
    }
    WebSocket_onClose_closure.builtin$cls = "WebSocket_onClose_closure";
    if (!("name" in WebSocket_onClose_closure))
      WebSocket_onClose_closure.name = "WebSocket_onClose_closure";
    $desc = $collectedClasses$.WebSocket_onClose_closure[1];
    WebSocket_onClose_closure.prototype = $desc;
    WebSocket_onClose_closure.$__fields__ = ["controller"];
    function MessageEvent(data, flags) {
      this.data = data;
      this.flags = flags;
      this.$deferredAction();
    }
    MessageEvent.builtin$cls = "MessageEvent";
    if (!("name" in MessageEvent))
      MessageEvent.name = "MessageEvent";
    $desc = $collectedClasses$.MessageEvent[1];
    MessageEvent.prototype = $desc;
    MessageEvent.$__fields__ = ["data", "flags"];
    MessageEvent.prototype.get$data = function(receiver) {
      return this.data;
    };
    MessageEvent.prototype.get$flags = function() {
      return this.flags;
    };
    function applyEdits_closure(edits, buffer) {
      this.edits = edits;
      this.buffer = buffer;
      this.$deferredAction();
    }
    applyEdits_closure.builtin$cls = "applyEdits_closure";
    if (!("name" in applyEdits_closure))
      applyEdits_closure.name = "applyEdits_closure";
    $desc = $collectedClasses$.applyEdits_closure[1];
    applyEdits_closure.prototype = $desc;
    applyEdits_closure.$__fields__ = ["edits", "buffer"];
    function applyEdits__closure(buffer) {
      this.buffer = buffer;
      this.$deferredAction();
    }
    applyEdits__closure.builtin$cls = "applyEdits__closure";
    if (!("name" in applyEdits__closure))
      applyEdits__closure.name = "applyEdits__closure";
    $desc = $collectedClasses$.applyEdits__closure[1];
    applyEdits__closure.prototype = $desc;
    applyEdits__closure.$__fields__ = ["buffer"];
    function selectEditGroup_closure(group, buffer) {
      this.group = group;
      this.buffer = buffer;
      this.$deferredAction();
    }
    selectEditGroup_closure.builtin$cls = "selectEditGroup_closure";
    if (!("name" in selectEditGroup_closure))
      selectEditGroup_closure.name = "selectEditGroup_closure";
    $desc = $collectedClasses$.selectEditGroup_closure[1];
    selectEditGroup_closure.prototype = $desc;
    selectEditGroup_closure.$__fields__ = ["group", "buffer"];
    function _sortEdits_closure() {
      this.$deferredAction();
    }
    _sortEdits_closure.builtin$cls = "_sortEdits_closure";
    if (!("name" in _sortEdits_closure))
      _sortEdits_closure.name = "_sortEdits_closure";
    $desc = $collectedClasses$._sortEdits_closure[1];
    _sortEdits_closure.prototype = $desc;
    _sortEdits_closure.$__fields__ = [];
    function EditorManager(dartEditors, dartProjectEditors) {
      this.dartEditors = dartEditors;
      this.dartProjectEditors = dartProjectEditors;
      this.$deferredAction();
    }
    EditorManager.builtin$cls = "EditorManager";
    if (!("name" in EditorManager))
      EditorManager.name = "EditorManager";
    $desc = $collectedClasses$.EditorManager[1];
    EditorManager.prototype = $desc;
    EditorManager.$__fields__ = ["dartEditors", "dartProjectEditors"];
    EditorManager.prototype.get$dartEditors = function() {
      return this.dartEditors;
    };
    EditorManager.prototype.get$dartProjectEditors = function() {
      return this.dartProjectEditors;
    };
    function EditorManager_jumpToLocation_closure(length) {
      this.length = length;
      this.$deferredAction();
    }
    EditorManager_jumpToLocation_closure.builtin$cls = "EditorManager_jumpToLocation_closure";
    if (!("name" in EditorManager_jumpToLocation_closure))
      EditorManager_jumpToLocation_closure.name = "EditorManager_jumpToLocation_closure";
    $desc = $collectedClasses$.EditorManager_jumpToLocation_closure[1];
    EditorManager_jumpToLocation_closure.prototype = $desc;
    EditorManager_jumpToLocation_closure.$__fields__ = ["length"];
    function Editors(_matches, _editors$_editorObserve, _itemObserve, _editors$_subs, _editorOpenedController, _activeEditorController, _editorClosedController, _activeEditor, _openEditors) {
      this._matches = _matches;
      this._editors$_editorObserve = _editors$_editorObserve;
      this._itemObserve = _itemObserve;
      this._editors$_subs = _editors$_subs;
      this._editorOpenedController = _editorOpenedController;
      this._activeEditorController = _activeEditorController;
      this._editorClosedController = _editorClosedController;
      this._activeEditor = _activeEditor;
      this._openEditors = _openEditors;
      this.$deferredAction();
    }
    Editors.builtin$cls = "Editors";
    if (!("name" in Editors))
      Editors.name = "Editors";
    $desc = $collectedClasses$.Editors[1];
    Editors.prototype = $desc;
    Editors.$__fields__ = ["_matches", "_editors$_editorObserve", "_itemObserve", "_editors$_subs", "_editorOpenedController", "_activeEditorController", "_editorClosedController", "_activeEditor", "_openEditors"];
    function Editors__observeTextEditors_closure(_box_0, $this, editor) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.editor = editor;
      this.$deferredAction();
    }
    Editors__observeTextEditors_closure.builtin$cls = "Editors__observeTextEditors_closure";
    if (!("name" in Editors__observeTextEditors_closure))
      Editors__observeTextEditors_closure.name = "Editors__observeTextEditors_closure";
    $desc = $collectedClasses$.Editors__observeTextEditors_closure[1];
    Editors__observeTextEditors_closure.prototype = $desc;
    Editors__observeTextEditors_closure.$__fields__ = ["_box_0", "$this", "editor"];
    function CoreElement(element) {
      this.element = element;
      this.$deferredAction();
    }
    CoreElement.builtin$cls = "CoreElement";
    if (!("name" in CoreElement))
      CoreElement.name = "CoreElement";
    $desc = $collectedClasses$.CoreElement[1];
    CoreElement.prototype = $desc;
    CoreElement.$__fields__ = ["element"];
    CoreElement.prototype.get$element = function() {
      return this.element;
    };
    function CoreElement_add_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    CoreElement_add_closure.builtin$cls = "CoreElement_add_closure";
    if (!("name" in CoreElement_add_closure))
      CoreElement_add_closure.name = "CoreElement_add_closure";
    $desc = $collectedClasses$.CoreElement_add_closure[1];
    CoreElement_add_closure.prototype = $desc;
    CoreElement_add_closure.$__fields__ = ["$this"];
    function CoreElement_onClick_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    CoreElement_onClick_closure.builtin$cls = "CoreElement_onClick_closure";
    if (!("name" in CoreElement_onClick_closure))
      CoreElement_onClick_closure.name = "CoreElement_onClick_closure";
    $desc = $collectedClasses$.CoreElement_onClick_closure[1];
    CoreElement_onClick_closure.prototype = $desc;
    CoreElement_onClick_closure.$__fields__ = ["$this"];
    function CoreElement_click_closure(handle, shiftHandle) {
      this.handle = handle;
      this.shiftHandle = shiftHandle;
      this.$deferredAction();
    }
    CoreElement_click_closure.builtin$cls = "CoreElement_click_closure";
    if (!("name" in CoreElement_click_closure))
      CoreElement_click_closure.name = "CoreElement_click_closure";
    $desc = $collectedClasses$.CoreElement_click_closure[1];
    CoreElement_click_closure.prototype = $desc;
    CoreElement_click_closure.$__fields__ = ["handle", "shiftHandle"];
    function CoreElement_dblclick_closure(handle) {
      this.handle = handle;
      this.$deferredAction();
    }
    CoreElement_dblclick_closure.builtin$cls = "CoreElement_dblclick_closure";
    if (!("name" in CoreElement_dblclick_closure))
      CoreElement_dblclick_closure.name = "CoreElement_dblclick_closure";
    $desc = $collectedClasses$.CoreElement_dblclick_closure[1];
    CoreElement_dblclick_closure.prototype = $desc;
    CoreElement_dblclick_closure.$__fields__ = ["handle"];
    function ProgressElement(_progress, element) {
      this._progress = _progress;
      this.element = element;
      this.$deferredAction();
    }
    ProgressElement.builtin$cls = "ProgressElement";
    if (!("name" in ProgressElement))
      ProgressElement.name = "ProgressElement";
    $desc = $collectedClasses$.ProgressElement[1];
    ProgressElement.prototype = $desc;
    ProgressElement.$__fields__ = ["_progress", "element"];
    function CloseButton(element) {
      this.element = element;
      this.$deferredAction();
    }
    CloseButton.builtin$cls = "CloseButton";
    if (!("name" in CloseButton))
      CloseButton.name = "CloseButton";
    $desc = $collectedClasses$.CloseButton[1];
    CloseButton.prototype = $desc;
    CloseButton.$__fields__ = ["element"];
    function TitledModelDialog(_elements$_panel, _cancelCommand, title, content) {
      this._elements$_panel = _elements$_panel;
      this._cancelCommand = _cancelCommand;
      this.title = title;
      this.content = content;
      this.$deferredAction();
    }
    TitledModelDialog.builtin$cls = "TitledModelDialog";
    if (!("name" in TitledModelDialog))
      TitledModelDialog.name = "TitledModelDialog";
    $desc = $collectedClasses$.TitledModelDialog[1];
    TitledModelDialog.prototype = $desc;
    TitledModelDialog.$__fields__ = ["_elements$_panel", "_cancelCommand", "title", "content"];
    TitledModelDialog.prototype.get$title = function(receiver) {
      return this.title;
    };
    TitledModelDialog.prototype.set$title = function(receiver, v) {
      return this.title = v;
    };
    TitledModelDialog.prototype.get$content = function(receiver) {
      return this.content;
    };
    function TitledModelDialog_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    TitledModelDialog_closure.builtin$cls = "TitledModelDialog_closure";
    if (!("name" in TitledModelDialog_closure))
      TitledModelDialog_closure.name = "TitledModelDialog_closure";
    $desc = $collectedClasses$.TitledModelDialog_closure[1];
    TitledModelDialog_closure.prototype = $desc;
    TitledModelDialog_closure.$__fields__ = ["$this"];
    function TitledModelDialog_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    TitledModelDialog_closure0.builtin$cls = "TitledModelDialog_closure0";
    if (!("name" in TitledModelDialog_closure0))
      TitledModelDialog_closure0.name = "TitledModelDialog_closure0";
    $desc = $collectedClasses$.TitledModelDialog_closure0[1];
    TitledModelDialog_closure0.prototype = $desc;
    TitledModelDialog_closure0.$__fields__ = ["$this"];
    function Strobe(_timer, element) {
      this._timer = _timer;
      this.element = element;
      this.$deferredAction();
    }
    Strobe.builtin$cls = "Strobe";
    if (!("name" in Strobe))
      Strobe.name = "Strobe";
    $desc = $collectedClasses$.Strobe[1];
    Strobe.prototype = $desc;
    Strobe.$__fields__ = ["_timer", "element"];
    function Strobe_strobe_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    Strobe_strobe_closure.builtin$cls = "Strobe_strobe_closure";
    if (!("name" in Strobe_strobe_closure))
      Strobe_strobe_closure.name = "Strobe_strobe_closure";
    $desc = $collectedClasses$.Strobe_strobe_closure[1];
    Strobe_strobe_closure.prototype = $desc;
    Strobe_strobe_closure.$__fields__ = ["$this"];
    function Strobe_strobe_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    Strobe_strobe_closure0.builtin$cls = "Strobe_strobe_closure0";
    if (!("name" in Strobe_strobe_closure0))
      Strobe_strobe_closure0.name = "Strobe_strobe_closure0";
    $desc = $collectedClasses$.Strobe_strobe_closure0[1];
    Strobe_strobe_closure0.prototype = $desc;
    Strobe_strobe_closure0.$__fields__ = ["$this"];
    function ErrorRepository(knownErrors, subs, _error_repository$_changeController, _errorStream, _flushStream) {
      this.knownErrors = knownErrors;
      this.subs = subs;
      this._error_repository$_changeController = _error_repository$_changeController;
      this._errorStream = _errorStream;
      this._flushStream = _flushStream;
      this.$deferredAction();
    }
    ErrorRepository.builtin$cls = "ErrorRepository";
    if (!("name" in ErrorRepository))
      ErrorRepository.name = "ErrorRepository";
    $desc = $collectedClasses$.ErrorRepository[1];
    ErrorRepository.prototype = $desc;
    ErrorRepository.$__fields__ = ["knownErrors", "subs", "_error_repository$_changeController", "_errorStream", "_flushStream"];
    ErrorRepository.prototype.get$knownErrors = function() {
      return this.knownErrors;
    };
    function Flutter() {
      this.$deferredAction();
    }
    Flutter.builtin$cls = "Flutter";
    if (!("name" in Flutter))
      Flutter.name = "Flutter";
    $desc = $collectedClasses$.Flutter[1];
    Flutter.prototype = $desc;
    Flutter.$__fields__ = [];
    function FlutterConnectManager(_flutter_connect$_disposables, connectDialog) {
      this._flutter_connect$_disposables = _flutter_connect$_disposables;
      this.connectDialog = connectDialog;
      this.$deferredAction();
    }
    FlutterConnectManager.builtin$cls = "FlutterConnectManager";
    if (!("name" in FlutterConnectManager))
      FlutterConnectManager.name = "FlutterConnectManager";
    $desc = $collectedClasses$.FlutterConnectManager[1];
    FlutterConnectManager.prototype = $desc;
    FlutterConnectManager.$__fields__ = ["_flutter_connect$_disposables", "connectDialog"];
    function ConnectDialog(dialog, _listGroup, itemCount) {
      this.dialog = dialog;
      this._listGroup = _listGroup;
      this.itemCount = itemCount;
      this.$deferredAction();
    }
    ConnectDialog.builtin$cls = "ConnectDialog";
    if (!("name" in ConnectDialog))
      ConnectDialog.name = "ConnectDialog";
    $desc = $collectedClasses$.ConnectDialog[1];
    ConnectDialog.prototype = $desc;
    ConnectDialog.$__fields__ = ["dialog", "_listGroup", "itemCount"];
    function ConnectDialog_show_closure($this, daemon, deviceId) {
      this.$this = $this;
      this.daemon = daemon;
      this.deviceId = deviceId;
      this.$deferredAction();
    }
    ConnectDialog_show_closure.builtin$cls = "ConnectDialog_show_closure";
    if (!("name" in ConnectDialog_show_closure))
      ConnectDialog_show_closure.name = "ConnectDialog_show_closure";
    $desc = $collectedClasses$.ConnectDialog_show_closure[1];
    ConnectDialog_show_closure.prototype = $desc;
    ConnectDialog_show_closure.$__fields__ = ["$this", "daemon", "deviceId"];
    function ConnectDialog_show__closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ConnectDialog_show__closure.builtin$cls = "ConnectDialog_show__closure";
    if (!("name" in ConnectDialog_show__closure))
      ConnectDialog_show__closure.name = "ConnectDialog_show__closure";
    $desc = $collectedClasses$.ConnectDialog_show__closure[1];
    ConnectDialog_show__closure.prototype = $desc;
    ConnectDialog_show__closure.$__fields__ = ["$this"];
    function ConnectDialog__updateApps_closure($this, app) {
      this.$this = $this;
      this.app = app;
      this.$deferredAction();
    }
    ConnectDialog__updateApps_closure.builtin$cls = "ConnectDialog__updateApps_closure";
    if (!("name" in ConnectDialog__updateApps_closure))
      ConnectDialog__updateApps_closure.name = "ConnectDialog__updateApps_closure";
    $desc = $collectedClasses$.ConnectDialog__updateApps_closure[1];
    ConnectDialog__updateApps_closure.prototype = $desc;
    ConnectDialog__updateApps_closure.$__fields__ = ["$this", "app"];
    function FlutterDaemonManager(_daemon, _flutter_daemon$_disposables, _sub, _daemonController, _deviceAddedController, _deviceChangedController, _deviceRemovedController) {
      this._daemon = _daemon;
      this._flutter_daemon$_disposables = _flutter_daemon$_disposables;
      this._sub = _sub;
      this._daemonController = _daemonController;
      this._deviceAddedController = _deviceAddedController;
      this._deviceChangedController = _deviceChangedController;
      this._deviceRemovedController = _deviceRemovedController;
      this.$deferredAction();
    }
    FlutterDaemonManager.builtin$cls = "FlutterDaemonManager";
    if (!("name" in FlutterDaemonManager))
      FlutterDaemonManager.name = "FlutterDaemonManager";
    $desc = $collectedClasses$.FlutterDaemonManager[1];
    FlutterDaemonManager.prototype = $desc;
    FlutterDaemonManager.$__fields__ = ["_daemon", "_flutter_daemon$_disposables", "_sub", "_daemonController", "_deviceAddedController", "_deviceChangedController", "_deviceRemovedController"];
    function FlutterDaemonManager_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterDaemonManager_closure.builtin$cls = "FlutterDaemonManager_closure";
    if (!("name" in FlutterDaemonManager_closure))
      FlutterDaemonManager_closure.name = "FlutterDaemonManager_closure";
    $desc = $collectedClasses$.FlutterDaemonManager_closure[1];
    FlutterDaemonManager_closure.prototype = $desc;
    FlutterDaemonManager_closure.$__fields__ = ["$this"];
    function FlutterDaemonManager__startFlutterDaemon_closure2(process) {
      this.process = process;
      this.$deferredAction();
    }
    FlutterDaemonManager__startFlutterDaemon_closure2.builtin$cls = "FlutterDaemonManager__startFlutterDaemon_closure2";
    if (!("name" in FlutterDaemonManager__startFlutterDaemon_closure2))
      FlutterDaemonManager__startFlutterDaemon_closure2.name = "FlutterDaemonManager__startFlutterDaemon_closure2";
    $desc = $collectedClasses$.FlutterDaemonManager__startFlutterDaemon_closure2[1];
    FlutterDaemonManager__startFlutterDaemon_closure2.prototype = $desc;
    FlutterDaemonManager__startFlutterDaemon_closure2.$__fields__ = ["process"];
    function FlutterDaemonManager__startFlutterDaemon_closure1() {
      this.$deferredAction();
    }
    FlutterDaemonManager__startFlutterDaemon_closure1.builtin$cls = "FlutterDaemonManager__startFlutterDaemon_closure1";
    if (!("name" in FlutterDaemonManager__startFlutterDaemon_closure1))
      FlutterDaemonManager__startFlutterDaemon_closure1.name = "FlutterDaemonManager__startFlutterDaemon_closure1";
    $desc = $collectedClasses$.FlutterDaemonManager__startFlutterDaemon_closure1[1];
    FlutterDaemonManager__startFlutterDaemon_closure1.prototype = $desc;
    FlutterDaemonManager__startFlutterDaemon_closure1.$__fields__ = [];
    function FlutterDaemonManager__startFlutterDaemon_closure0() {
      this.$deferredAction();
    }
    FlutterDaemonManager__startFlutterDaemon_closure0.builtin$cls = "FlutterDaemonManager__startFlutterDaemon_closure0";
    if (!("name" in FlutterDaemonManager__startFlutterDaemon_closure0))
      FlutterDaemonManager__startFlutterDaemon_closure0.name = "FlutterDaemonManager__startFlutterDaemon_closure0";
    $desc = $collectedClasses$.FlutterDaemonManager__startFlutterDaemon_closure0[1];
    FlutterDaemonManager__startFlutterDaemon_closure0.prototype = $desc;
    FlutterDaemonManager__startFlutterDaemon_closure0.$__fields__ = [];
    function FlutterDaemonManager__startFlutterDaemon_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterDaemonManager__startFlutterDaemon_closure.builtin$cls = "FlutterDaemonManager__startFlutterDaemon_closure";
    if (!("name" in FlutterDaemonManager__startFlutterDaemon_closure))
      FlutterDaemonManager__startFlutterDaemon_closure.name = "FlutterDaemonManager__startFlutterDaemon_closure";
    $desc = $collectedClasses$.FlutterDaemonManager__startFlutterDaemon_closure[1];
    FlutterDaemonManager__startFlutterDaemon_closure.prototype = $desc;
    FlutterDaemonManager__startFlutterDaemon_closure.$__fields__ = ["$this"];
    function FlutterDaemonManager__startFlutterDaemon_closure3() {
      this.$deferredAction();
    }
    FlutterDaemonManager__startFlutterDaemon_closure3.builtin$cls = "FlutterDaemonManager__startFlutterDaemon_closure3";
    if (!("name" in FlutterDaemonManager__startFlutterDaemon_closure3))
      FlutterDaemonManager__startFlutterDaemon_closure3.name = "FlutterDaemonManager__startFlutterDaemon_closure3";
    $desc = $collectedClasses$.FlutterDaemonManager__startFlutterDaemon_closure3[1];
    FlutterDaemonManager__startFlutterDaemon_closure3.prototype = $desc;
    FlutterDaemonManager__startFlutterDaemon_closure3.$__fields__ = [];
    function FlutterDaemonManager__startFlutterDaemon_closure4($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterDaemonManager__startFlutterDaemon_closure4.builtin$cls = "FlutterDaemonManager__startFlutterDaemon_closure4";
    if (!("name" in FlutterDaemonManager__startFlutterDaemon_closure4))
      FlutterDaemonManager__startFlutterDaemon_closure4.name = "FlutterDaemonManager__startFlutterDaemon_closure4";
    $desc = $collectedClasses$.FlutterDaemonManager__startFlutterDaemon_closure4[1];
    FlutterDaemonManager__startFlutterDaemon_closure4.prototype = $desc;
    FlutterDaemonManager__startFlutterDaemon_closure4.$__fields__ = ["$this"];
    function FlutterDaemonManager__startFlutterDaemon_closure5($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterDaemonManager__startFlutterDaemon_closure5.builtin$cls = "FlutterDaemonManager__startFlutterDaemon_closure5";
    if (!("name" in FlutterDaemonManager__startFlutterDaemon_closure5))
      FlutterDaemonManager__startFlutterDaemon_closure5.name = "FlutterDaemonManager__startFlutterDaemon_closure5";
    $desc = $collectedClasses$.FlutterDaemonManager__startFlutterDaemon_closure5[1];
    FlutterDaemonManager__startFlutterDaemon_closure5.prototype = $desc;
    FlutterDaemonManager__startFlutterDaemon_closure5.$__fields__ = ["$this"];
    function FlutterDaemonManager__startFlutterDaemon_closure6($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterDaemonManager__startFlutterDaemon_closure6.builtin$cls = "FlutterDaemonManager__startFlutterDaemon_closure6";
    if (!("name" in FlutterDaemonManager__startFlutterDaemon_closure6))
      FlutterDaemonManager__startFlutterDaemon_closure6.name = "FlutterDaemonManager__startFlutterDaemon_closure6";
    $desc = $collectedClasses$.FlutterDaemonManager__startFlutterDaemon_closure6[1];
    FlutterDaemonManager__startFlutterDaemon_closure6.prototype = $desc;
    FlutterDaemonManager__startFlutterDaemon_closure6.$__fields__ = ["$this"];
    function FlutterDaemonManager__startFlutterDaemon_closure7() {
      this.$deferredAction();
    }
    FlutterDaemonManager__startFlutterDaemon_closure7.builtin$cls = "FlutterDaemonManager__startFlutterDaemon_closure7";
    if (!("name" in FlutterDaemonManager__startFlutterDaemon_closure7))
      FlutterDaemonManager__startFlutterDaemon_closure7.name = "FlutterDaemonManager__startFlutterDaemon_closure7";
    $desc = $collectedClasses$.FlutterDaemonManager__startFlutterDaemon_closure7[1];
    FlutterDaemonManager__startFlutterDaemon_closure7.prototype = $desc;
    FlutterDaemonManager__startFlutterDaemon_closure7.$__fields__ = [];
    function FlutterDaemonManager__startFlutterDaemon_closure8() {
      this.$deferredAction();
    }
    FlutterDaemonManager__startFlutterDaemon_closure8.builtin$cls = "FlutterDaemonManager__startFlutterDaemon_closure8";
    if (!("name" in FlutterDaemonManager__startFlutterDaemon_closure8))
      FlutterDaemonManager__startFlutterDaemon_closure8.name = "FlutterDaemonManager__startFlutterDaemon_closure8";
    $desc = $collectedClasses$.FlutterDaemonManager__startFlutterDaemon_closure8[1];
    FlutterDaemonManager__startFlutterDaemon_closure8.prototype = $desc;
    FlutterDaemonManager__startFlutterDaemon_closure8.$__fields__ = [];
    function _ProcessDisposable(process) {
      this.process = process;
      this.$deferredAction();
    }
    _ProcessDisposable.builtin$cls = "_ProcessDisposable";
    if (!("name" in _ProcessDisposable))
      _ProcessDisposable.name = "_ProcessDisposable";
    $desc = $collectedClasses$._ProcessDisposable[1];
    _ProcessDisposable.prototype = $desc;
    _ProcessDisposable.$__fields__ = ["process"];
    function FlutterDaemon(otherDisposeable, _flutter_daemon$_streamSub, _flutter_daemon$_writeMessage, _flutter_daemon$_id, _flutter_daemon$_completers, _flutter_daemon$_methodNames, _flutter_daemon$_jsonEncoder, _flutter_daemon$_domains, _flutter_daemon$_onSend, _flutter_daemon$_onReceive, _flutter_daemon$_willSend, _daemon, _app, _device) {
      this.otherDisposeable = otherDisposeable;
      this._flutter_daemon$_streamSub = _flutter_daemon$_streamSub;
      this._flutter_daemon$_writeMessage = _flutter_daemon$_writeMessage;
      this._flutter_daemon$_id = _flutter_daemon$_id;
      this._flutter_daemon$_completers = _flutter_daemon$_completers;
      this._flutter_daemon$_methodNames = _flutter_daemon$_methodNames;
      this._flutter_daemon$_jsonEncoder = _flutter_daemon$_jsonEncoder;
      this._flutter_daemon$_domains = _flutter_daemon$_domains;
      this._flutter_daemon$_onSend = _flutter_daemon$_onSend;
      this._flutter_daemon$_onReceive = _flutter_daemon$_onReceive;
      this._flutter_daemon$_willSend = _flutter_daemon$_willSend;
      this._daemon = _daemon;
      this._app = _app;
      this._device = _device;
      this.$deferredAction();
    }
    FlutterDaemon.builtin$cls = "FlutterDaemon";
    if (!("name" in FlutterDaemon))
      FlutterDaemon.name = "FlutterDaemon";
    $desc = $collectedClasses$.FlutterDaemon[1];
    FlutterDaemon.prototype = $desc;
    FlutterDaemon.$__fields__ = ["otherDisposeable", "_flutter_daemon$_streamSub", "_flutter_daemon$_writeMessage", "_flutter_daemon$_id", "_flutter_daemon$_completers", "_flutter_daemon$_methodNames", "_flutter_daemon$_jsonEncoder", "_flutter_daemon$_domains", "_flutter_daemon$_onSend", "_flutter_daemon$_onReceive", "_flutter_daemon$_willSend", "_daemon", "_app", "_device"];
    function Domain0(server, name) {
      this.server = server;
      this.name = name;
      this.$deferredAction();
    }
    Domain0.builtin$cls = "Domain0";
    if (!("name" in Domain0))
      Domain0.name = "Domain0";
    $desc = $collectedClasses$.Domain0[1];
    Domain0.prototype = $desc;
    Domain0.$__fields__ = ["server", "name"];
    Domain0.prototype.get$server = function() {
      return this.server;
    };
    Domain0.prototype.get$name = function(receiver) {
      return this.name;
    };
    function RequestError0(methodName, error) {
      this.methodName = methodName;
      this.error = error;
      this.$deferredAction();
    }
    RequestError0.builtin$cls = "RequestError0";
    if (!("name" in RequestError0))
      RequestError0.name = "RequestError0";
    $desc = $collectedClasses$.RequestError0[1];
    RequestError0.prototype = $desc;
    RequestError0.$__fields__ = ["methodName", "error"];
    RequestError0.prototype.get$methodName = function() {
      return this.methodName;
    };
    RequestError0.prototype.get$error = function(receiver) {
      return this.error;
    };
    function DaemonDomain(server, name, _flutter_daemon$_controllers, _flutter_daemon$_streams) {
      this.server = server;
      this.name = name;
      this._flutter_daemon$_controllers = _flutter_daemon$_controllers;
      this._flutter_daemon$_streams = _flutter_daemon$_streams;
      this.$deferredAction();
    }
    DaemonDomain.builtin$cls = "DaemonDomain";
    if (!("name" in DaemonDomain))
      DaemonDomain.name = "DaemonDomain";
    $desc = $collectedClasses$.DaemonDomain[1];
    DaemonDomain.prototype = $desc;
    DaemonDomain.$__fields__ = ["server", "name", "_flutter_daemon$_controllers", "_flutter_daemon$_streams"];
    function DiscoveredApp(id, observatoryPort) {
      this.id = id;
      this.observatoryPort = observatoryPort;
      this.$deferredAction();
    }
    DiscoveredApp.builtin$cls = "DiscoveredApp";
    if (!("name" in DiscoveredApp))
      DiscoveredApp.name = "DiscoveredApp";
    $desc = $collectedClasses$.DiscoveredApp[1];
    DiscoveredApp.prototype = $desc;
    DiscoveredApp.$__fields__ = ["id", "observatoryPort"];
    DiscoveredApp.prototype.get$id = function(receiver) {
      return this.id;
    };
    DiscoveredApp.prototype.get$observatoryPort = function() {
      return this.observatoryPort;
    };
    function AppDomain(server, name, _flutter_daemon$_controllers, _flutter_daemon$_streams) {
      this.server = server;
      this.name = name;
      this._flutter_daemon$_controllers = _flutter_daemon$_controllers;
      this._flutter_daemon$_streams = _flutter_daemon$_streams;
      this.$deferredAction();
    }
    AppDomain.builtin$cls = "AppDomain";
    if (!("name" in AppDomain))
      AppDomain.name = "AppDomain";
    $desc = $collectedClasses$.AppDomain[1];
    AppDomain.prototype = $desc;
    AppDomain.$__fields__ = ["server", "name", "_flutter_daemon$_controllers", "_flutter_daemon$_streams"];
    function AppDomain_start_closure() {
      this.$deferredAction();
    }
    AppDomain_start_closure.builtin$cls = "AppDomain_start_closure";
    if (!("name" in AppDomain_start_closure))
      AppDomain_start_closure.name = "AppDomain_start_closure";
    $desc = $collectedClasses$.AppDomain_start_closure[1];
    AppDomain_start_closure.prototype = $desc;
    AppDomain_start_closure.$__fields__ = [];
    function AppDomain_discover_closure() {
      this.$deferredAction();
    }
    AppDomain_discover_closure.builtin$cls = "AppDomain_discover_closure";
    if (!("name" in AppDomain_discover_closure))
      AppDomain_discover_closure.name = "AppDomain_discover_closure";
    $desc = $collectedClasses$.AppDomain_discover_closure[1];
    AppDomain_discover_closure.prototype = $desc;
    AppDomain_discover_closure.$__fields__ = [];
    function DaemonApp(daemon, appId, supportsRestart, _flutter_daemon$_subs, _stoppedCompleter, _debugPortCompleter, _logController, _progressController) {
      this.daemon = daemon;
      this.appId = appId;
      this.supportsRestart = supportsRestart;
      this._flutter_daemon$_subs = _flutter_daemon$_subs;
      this._stoppedCompleter = _stoppedCompleter;
      this._debugPortCompleter = _debugPortCompleter;
      this._logController = _logController;
      this._progressController = _progressController;
      this.$deferredAction();
    }
    DaemonApp.builtin$cls = "DaemonApp";
    if (!("name" in DaemonApp))
      DaemonApp.name = "DaemonApp";
    $desc = $collectedClasses$.DaemonApp[1];
    DaemonApp.prototype = $desc;
    DaemonApp.$__fields__ = ["daemon", "appId", "supportsRestart", "_flutter_daemon$_subs", "_stoppedCompleter", "_debugPortCompleter", "_logController", "_progressController"];
    DaemonApp.prototype.get$daemon = function() {
      return this.daemon;
    };
    DaemonApp.prototype.get$appId = function() {
      return this.appId;
    };
    DaemonApp.prototype.get$supportsRestart = function() {
      return this.supportsRestart;
    };
    function DaemonApp_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DaemonApp_closure.builtin$cls = "DaemonApp_closure";
    if (!("name" in DaemonApp_closure))
      DaemonApp_closure.name = "DaemonApp_closure";
    $desc = $collectedClasses$.DaemonApp_closure[1];
    DaemonApp_closure.prototype = $desc;
    DaemonApp_closure.$__fields__ = ["$this"];
    function DaemonApp_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DaemonApp_closure0.builtin$cls = "DaemonApp_closure0";
    if (!("name" in DaemonApp_closure0))
      DaemonApp_closure0.name = "DaemonApp_closure0";
    $desc = $collectedClasses$.DaemonApp_closure0[1];
    DaemonApp_closure0.prototype = $desc;
    DaemonApp_closure0.$__fields__ = ["$this"];
    function DaemonApp_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DaemonApp_closure1.builtin$cls = "DaemonApp_closure1";
    if (!("name" in DaemonApp_closure1))
      DaemonApp_closure1.name = "DaemonApp_closure1";
    $desc = $collectedClasses$.DaemonApp_closure1[1];
    DaemonApp_closure1.prototype = $desc;
    DaemonApp_closure1.$__fields__ = ["$this"];
    function DaemonApp_closure2($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DaemonApp_closure2.builtin$cls = "DaemonApp_closure2";
    if (!("name" in DaemonApp_closure2))
      DaemonApp_closure2.name = "DaemonApp_closure2";
    $desc = $collectedClasses$.DaemonApp_closure2[1];
    DaemonApp_closure2.prototype = $desc;
    DaemonApp_closure2.$__fields__ = ["$this"];
    function DaemonApp_closure3($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DaemonApp_closure3.builtin$cls = "DaemonApp_closure3";
    if (!("name" in DaemonApp_closure3))
      DaemonApp_closure3.name = "DaemonApp_closure3";
    $desc = $collectedClasses$.DaemonApp_closure3[1];
    DaemonApp_closure3.prototype = $desc;
    DaemonApp_closure3.$__fields__ = ["$this"];
    function DaemonApp_closure4($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DaemonApp_closure4.builtin$cls = "DaemonApp_closure4";
    if (!("name" in DaemonApp_closure4))
      DaemonApp_closure4.name = "DaemonApp_closure4";
    $desc = $collectedClasses$.DaemonApp_closure4[1];
    DaemonApp_closure4.prototype = $desc;
    DaemonApp_closure4.$__fields__ = ["$this"];
    function DaemonApp_closure5($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DaemonApp_closure5.builtin$cls = "DaemonApp_closure5";
    if (!("name" in DaemonApp_closure5))
      DaemonApp_closure5.name = "DaemonApp_closure5";
    $desc = $collectedClasses$.DaemonApp_closure5[1];
    DaemonApp_closure5.prototype = $desc;
    DaemonApp_closure5.$__fields__ = ["$this"];
    function DaemonApp_closure6($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DaemonApp_closure6.builtin$cls = "DaemonApp_closure6";
    if (!("name" in DaemonApp_closure6))
      DaemonApp_closure6.name = "DaemonApp_closure6";
    $desc = $collectedClasses$.DaemonApp_closure6[1];
    DaemonApp_closure6.prototype = $desc;
    DaemonApp_closure6.$__fields__ = ["$this"];
    function DaemonApp_stop_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DaemonApp_stop_closure.builtin$cls = "DaemonApp_stop_closure";
    if (!("name" in DaemonApp_stop_closure))
      DaemonApp_stop_closure.name = "DaemonApp_stop_closure";
    $desc = $collectedClasses$.DaemonApp_stop_closure[1];
    DaemonApp_stop_closure.prototype = $desc;
    DaemonApp_stop_closure.$__fields__ = ["$this"];
    function AppStartedResult(data) {
      this.data = data;
      this.$deferredAction();
    }
    AppStartedResult.builtin$cls = "AppStartedResult";
    if (!("name" in AppStartedResult))
      AppStartedResult.name = "AppStartedResult";
    $desc = $collectedClasses$.AppStartedResult[1];
    AppStartedResult.prototype = $desc;
    AppStartedResult.$__fields__ = ["data"];
    AppStartedResult.prototype.get$data = function(receiver) {
      return this.data;
    };
    function AppEvent(data) {
      this.data = data;
      this.$deferredAction();
    }
    AppEvent.builtin$cls = "AppEvent";
    if (!("name" in AppEvent))
      AppEvent.name = "AppEvent";
    $desc = $collectedClasses$.AppEvent[1];
    AppEvent.prototype = $desc;
    AppEvent.$__fields__ = ["data"];
    AppEvent.prototype.get$data = function(receiver) {
      return this.data;
    };
    function DebugPortAppEvent(data) {
      this.data = data;
      this.$deferredAction();
    }
    DebugPortAppEvent.builtin$cls = "DebugPortAppEvent";
    if (!("name" in DebugPortAppEvent))
      DebugPortAppEvent.name = "DebugPortAppEvent";
    $desc = $collectedClasses$.DebugPortAppEvent[1];
    DebugPortAppEvent.prototype = $desc;
    DebugPortAppEvent.$__fields__ = ["data"];
    function LogAppEvent(data) {
      this.data = data;
      this.$deferredAction();
    }
    LogAppEvent.builtin$cls = "LogAppEvent";
    if (!("name" in LogAppEvent))
      LogAppEvent.name = "LogAppEvent";
    $desc = $collectedClasses$.LogAppEvent[1];
    LogAppEvent.prototype = $desc;
    LogAppEvent.$__fields__ = ["data"];
    function ProgressAppEvent(data) {
      this.data = data;
      this.$deferredAction();
    }
    ProgressAppEvent.builtin$cls = "ProgressAppEvent";
    if (!("name" in ProgressAppEvent))
      ProgressAppEvent.name = "ProgressAppEvent";
    $desc = $collectedClasses$.ProgressAppEvent[1];
    ProgressAppEvent.prototype = $desc;
    ProgressAppEvent.$__fields__ = ["data"];
    function StopAppEvent(data) {
      this.data = data;
      this.$deferredAction();
    }
    StopAppEvent.builtin$cls = "StopAppEvent";
    if (!("name" in StopAppEvent))
      StopAppEvent.name = "StopAppEvent";
    $desc = $collectedClasses$.StopAppEvent[1];
    StopAppEvent.prototype = $desc;
    StopAppEvent.$__fields__ = ["data"];
    function DeviceDomain(server, name, _flutter_daemon$_controllers, _flutter_daemon$_streams) {
      this.server = server;
      this.name = name;
      this._flutter_daemon$_controllers = _flutter_daemon$_controllers;
      this._flutter_daemon$_streams = _flutter_daemon$_streams;
      this.$deferredAction();
    }
    DeviceDomain.builtin$cls = "DeviceDomain";
    if (!("name" in DeviceDomain))
      DeviceDomain.name = "DeviceDomain";
    $desc = $collectedClasses$.DeviceDomain[1];
    DeviceDomain.prototype = $desc;
    DeviceDomain.$__fields__ = ["server", "name", "_flutter_daemon$_controllers", "_flutter_daemon$_streams"];
    function DeviceDomain_getDevices_closure() {
      this.$deferredAction();
    }
    DeviceDomain_getDevices_closure.builtin$cls = "DeviceDomain_getDevices_closure";
    if (!("name" in DeviceDomain_getDevices_closure))
      DeviceDomain_getDevices_closure.name = "DeviceDomain_getDevices_closure";
    $desc = $collectedClasses$.DeviceDomain_getDevices_closure[1];
    DeviceDomain_getDevices_closure.prototype = $desc;
    DeviceDomain_getDevices_closure.$__fields__ = [];
    function DeviceDomain_forward_closure() {
      this.$deferredAction();
    }
    DeviceDomain_forward_closure.builtin$cls = "DeviceDomain_forward_closure";
    if (!("name" in DeviceDomain_forward_closure))
      DeviceDomain_forward_closure.name = "DeviceDomain_forward_closure";
    $desc = $collectedClasses$.DeviceDomain_forward_closure[1];
    DeviceDomain_forward_closure.prototype = $desc;
    DeviceDomain_forward_closure.$__fields__ = [];
    function Device(id, name, platform, available) {
      this.id = id;
      this.name = name;
      this.platform = platform;
      this.available = available;
      this.$deferredAction();
    }
    Device.builtin$cls = "Device";
    if (!("name" in Device))
      Device.name = "Device";
    $desc = $collectedClasses$.Device[1];
    Device.prototype = $desc;
    Device.$__fields__ = ["id", "name", "platform", "available"];
    Device.prototype.get$id = function(receiver) {
      return this.id;
    };
    Device.prototype.get$name = function(receiver) {
      return this.name;
    };
    function LogMessage(level, message, stackTrace) {
      this.level = level;
      this.message = message;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    LogMessage.builtin$cls = "LogMessage";
    if (!("name" in LogMessage))
      LogMessage.name = "LogMessage";
    $desc = $collectedClasses$.LogMessage[1];
    LogMessage.prototype = $desc;
    LogMessage.$__fields__ = ["level", "message", "stackTrace"];
    LogMessage.prototype.get$level = function(receiver) {
      return this.level;
    };
    LogMessage.prototype.get$message = function(receiver) {
      return this.message;
    };
    LogMessage.prototype.get$stackTrace = function() {
      return this.stackTrace;
    };
    function DaemonRequestJob(_flutter_daemon$_fn, name, _schedulingRule) {
      this._flutter_daemon$_fn = _flutter_daemon$_fn;
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    DaemonRequestJob.builtin$cls = "DaemonRequestJob";
    if (!("name" in DaemonRequestJob))
      DaemonRequestJob.name = "DaemonRequestJob";
    $desc = $collectedClasses$.DaemonRequestJob[1];
    DaemonRequestJob.prototype = $desc;
    DaemonRequestJob.$__fields__ = ["_flutter_daemon$_fn", "name", "_schedulingRule"];
    function DaemonRequestJob_run_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DaemonRequestJob_run_closure.builtin$cls = "DaemonRequestJob_run_closure";
    if (!("name" in DaemonRequestJob_run_closure))
      DaemonRequestJob_run_closure.name = "DaemonRequestJob_run_closure";
    $desc = $collectedClasses$.DaemonRequestJob_run_closure[1];
    DaemonRequestJob_run_closure.prototype = $desc;
    DaemonRequestJob_run_closure.$__fields__ = ["$this"];
    function OperationResult(m) {
      this.m = m;
      this.$deferredAction();
    }
    OperationResult.builtin$cls = "OperationResult";
    if (!("name" in OperationResult))
      OperationResult.name = "OperationResult";
    $desc = $collectedClasses$.OperationResult[1];
    OperationResult.prototype = $desc;
    OperationResult.$__fields__ = ["m"];
    function FlutterDeviceManager(subs, _selectedController, _devicesController, _modeController, _selectedDevice, _devices, _runMode) {
      this.subs = subs;
      this._selectedController = _selectedController;
      this._devicesController = _devicesController;
      this._modeController = _modeController;
      this._selectedDevice = _selectedDevice;
      this._devices = _devices;
      this._runMode = _runMode;
      this.$deferredAction();
    }
    FlutterDeviceManager.builtin$cls = "FlutterDeviceManager";
    if (!("name" in FlutterDeviceManager))
      FlutterDeviceManager.name = "FlutterDeviceManager";
    $desc = $collectedClasses$.FlutterDeviceManager[1];
    FlutterDeviceManager.prototype = $desc;
    FlutterDeviceManager.$__fields__ = ["subs", "_selectedController", "_devicesController", "_modeController", "_selectedDevice", "_devices", "_runMode"];
    function FlutterDeviceManager__updateForDaemon_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterDeviceManager__updateForDaemon_closure.builtin$cls = "FlutterDeviceManager__updateForDaemon_closure";
    if (!("name" in FlutterDeviceManager__updateForDaemon_closure))
      FlutterDeviceManager__updateForDaemon_closure.name = "FlutterDeviceManager__updateForDaemon_closure";
    $desc = $collectedClasses$.FlutterDeviceManager__updateForDaemon_closure[1];
    FlutterDeviceManager__updateForDaemon_closure.prototype = $desc;
    FlutterDeviceManager__updateForDaemon_closure.$__fields__ = ["$this"];
    function BuildMode(name, supportsDebugging, startPaused) {
      this.name = name;
      this.supportsDebugging = supportsDebugging;
      this.startPaused = startPaused;
      this.$deferredAction();
    }
    BuildMode.builtin$cls = "BuildMode";
    if (!("name" in BuildMode))
      BuildMode.name = "BuildMode";
    $desc = $collectedClasses$.BuildMode[1];
    BuildMode.prototype = $desc;
    BuildMode.$__fields__ = ["name", "supportsDebugging", "startPaused"];
    BuildMode.prototype.get$name = function(receiver) {
      return this.name;
    };
    function FlutterExt(serviceWrapper, enabled, isolateId, services, _reapply) {
      this.serviceWrapper = serviceWrapper;
      this.enabled = enabled;
      this.isolateId = isolateId;
      this.services = services;
      this._reapply = _reapply;
      this.$deferredAction();
    }
    FlutterExt.builtin$cls = "FlutterExt";
    if (!("name" in FlutterExt))
      FlutterExt.name = "FlutterExt";
    $desc = $collectedClasses$.FlutterExt[1];
    FlutterExt.prototype = $desc;
    FlutterExt.$__fields__ = ["serviceWrapper", "enabled", "isolateId", "services", "_reapply"];
    function FlutterExt_debugPaint_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterExt_debugPaint_closure.builtin$cls = "FlutterExt_debugPaint_closure";
    if (!("name" in FlutterExt_debugPaint_closure))
      FlutterExt_debugPaint_closure.name = "FlutterExt_debugPaint_closure";
    $desc = $collectedClasses$.FlutterExt_debugPaint_closure[1];
    FlutterExt_debugPaint_closure.prototype = $desc;
    FlutterExt_debugPaint_closure.$__fields__ = ["$this"];
    function FlutterExt_repaintRainbow_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterExt_repaintRainbow_closure.builtin$cls = "FlutterExt_repaintRainbow_closure";
    if (!("name" in FlutterExt_repaintRainbow_closure))
      FlutterExt_repaintRainbow_closure.name = "FlutterExt_repaintRainbow_closure";
    $desc = $collectedClasses$.FlutterExt_repaintRainbow_closure[1];
    FlutterExt_repaintRainbow_closure.prototype = $desc;
    FlutterExt_repaintRainbow_closure.$__fields__ = ["$this"];
    function FlutterExt_timeDilation_closure($this, dilation) {
      this.$this = $this;
      this.dilation = dilation;
      this.$deferredAction();
    }
    FlutterExt_timeDilation_closure.builtin$cls = "FlutterExt_timeDilation_closure";
    if (!("name" in FlutterExt_timeDilation_closure))
      FlutterExt_timeDilation_closure.name = "FlutterExt_timeDilation_closure";
    $desc = $collectedClasses$.FlutterExt_timeDilation_closure[1];
    FlutterExt_timeDilation_closure.prototype = $desc;
    FlutterExt_timeDilation_closure.$__fields__ = ["$this", "dilation"];
    function FlutterExt_performanceOverlay_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterExt_performanceOverlay_closure.builtin$cls = "FlutterExt_performanceOverlay_closure";
    if (!("name" in FlutterExt_performanceOverlay_closure))
      FlutterExt_performanceOverlay_closure.name = "FlutterExt_performanceOverlay_closure";
    $desc = $collectedClasses$.FlutterExt_performanceOverlay_closure[1];
    FlutterExt_performanceOverlay_closure.prototype = $desc;
    FlutterExt_performanceOverlay_closure.$__fields__ = ["$this"];
    function FlutterExt__init_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterExt__init_closure.builtin$cls = "FlutterExt__init_closure";
    if (!("name" in FlutterExt__init_closure))
      FlutterExt__init_closure.name = "FlutterExt__init_closure";
    $desc = $collectedClasses$.FlutterExt__init_closure[1];
    FlutterExt__init_closure.prototype = $desc;
    FlutterExt__init_closure.$__fields__ = ["$this"];
    function FlutterExt__checkIsolate_closure($this, isolate) {
      this.$this = $this;
      this.isolate = isolate;
      this.$deferredAction();
    }
    FlutterExt__checkIsolate_closure.builtin$cls = "FlutterExt__checkIsolate_closure";
    if (!("name" in FlutterExt__checkIsolate_closure))
      FlutterExt__checkIsolate_closure.name = "FlutterExt__checkIsolate_closure";
    $desc = $collectedClasses$.FlutterExt__checkIsolate_closure[1];
    FlutterExt__checkIsolate_closure.prototype = $desc;
    FlutterExt__checkIsolate_closure.$__fields__ = ["$this", "isolate"];
    function FlutterLaunchType(_lastFlutterLaunch, type) {
      this._lastFlutterLaunch = _lastFlutterLaunch;
      this.type = type;
      this.$deferredAction();
    }
    FlutterLaunchType.builtin$cls = "FlutterLaunchType";
    if (!("name" in FlutterLaunchType))
      FlutterLaunchType.name = "FlutterLaunchType";
    $desc = $collectedClasses$.FlutterLaunchType[1];
    FlutterLaunchType.prototype = $desc;
    FlutterLaunchType.$__fields__ = ["_lastFlutterLaunch", "type"];
    function FlutterLaunchType_connectToApp_closure($this, project, configuration, observatoryPort, pipeStdio) {
      this.$this = $this;
      this.project = project;
      this.configuration = configuration;
      this.observatoryPort = observatoryPort;
      this.pipeStdio = pipeStdio;
      this.$deferredAction();
    }
    FlutterLaunchType_connectToApp_closure.builtin$cls = "FlutterLaunchType_connectToApp_closure";
    if (!("name" in FlutterLaunchType_connectToApp_closure))
      FlutterLaunchType_connectToApp_closure.name = "FlutterLaunchType_connectToApp_closure";
    $desc = $collectedClasses$.FlutterLaunchType_connectToApp_closure[1];
    FlutterLaunchType_connectToApp_closure.prototype = $desc;
    FlutterLaunchType_connectToApp_closure.$__fields__ = ["$this", "project", "configuration", "observatoryPort", "pipeStdio"];
    function _LaunchInstance0() {
      this.$deferredAction();
    }
    _LaunchInstance0.builtin$cls = "_LaunchInstance0";
    if (!("name" in _LaunchInstance0))
      _LaunchInstance0.name = "_LaunchInstance0";
    $desc = $collectedClasses$._LaunchInstance0[1];
    _LaunchInstance0.prototype = $desc;
    _LaunchInstance0.$__fields__ = [];
    function _LaunchInstance__connectToDebugger_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _LaunchInstance__connectToDebugger_closure.builtin$cls = "_LaunchInstance__connectToDebugger_closure";
    if (!("name" in _LaunchInstance__connectToDebugger_closure))
      _LaunchInstance__connectToDebugger_closure.name = "_LaunchInstance__connectToDebugger_closure";
    $desc = $collectedClasses$._LaunchInstance__connectToDebugger_closure[1];
    _LaunchInstance__connectToDebugger_closure.prototype = $desc;
    _LaunchInstance__connectToDebugger_closure.$__fields__ = ["$this"];
    function _LaunchInstance__connectToDebugger_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _LaunchInstance__connectToDebugger_closure0.builtin$cls = "_LaunchInstance__connectToDebugger_closure0";
    if (!("name" in _LaunchInstance__connectToDebugger_closure0))
      _LaunchInstance__connectToDebugger_closure0.name = "_LaunchInstance__connectToDebugger_closure0";
    $desc = $collectedClasses$._LaunchInstance__connectToDebugger_closure0[1];
    _LaunchInstance__connectToDebugger_closure0.prototype = $desc;
    _LaunchInstance__connectToDebugger_closure0.$__fields__ = ["$this"];
    function _RunLaunchInstance(daemon, _mode, _route, _flutter_launch$_target, _flutter_launch$_app, project, _launch, _observatoryPort, _flutter_launch$_device, debugConnection) {
      this.daemon = daemon;
      this._mode = _mode;
      this._route = _route;
      this._flutter_launch$_target = _flutter_launch$_target;
      this._flutter_launch$_app = _flutter_launch$_app;
      this.project = project;
      this._launch = _launch;
      this._observatoryPort = _observatoryPort;
      this._flutter_launch$_device = _flutter_launch$_device;
      this.debugConnection = debugConnection;
      this.$deferredAction();
    }
    _RunLaunchInstance.builtin$cls = "_RunLaunchInstance";
    if (!("name" in _RunLaunchInstance))
      _RunLaunchInstance.name = "_RunLaunchInstance";
    $desc = $collectedClasses$._RunLaunchInstance[1];
    _RunLaunchInstance.prototype = $desc;
    _RunLaunchInstance.$__fields__ = ["daemon", "_mode", "_route", "_flutter_launch$_target", "_flutter_launch$_app", "project", "_launch", "_observatoryPort", "_flutter_launch$_device", "debugConnection"];
    _RunLaunchInstance.prototype.get$daemon = function() {
      return this.daemon;
    };
    function _RunLaunchInstance_launch_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _RunLaunchInstance_launch_closure.builtin$cls = "_RunLaunchInstance_launch_closure";
    if (!("name" in _RunLaunchInstance_launch_closure))
      _RunLaunchInstance_launch_closure.name = "_RunLaunchInstance_launch_closure";
    $desc = $collectedClasses$._RunLaunchInstance_launch_closure[1];
    _RunLaunchInstance_launch_closure.prototype = $desc;
    _RunLaunchInstance_launch_closure.$__fields__ = ["$this"];
    function _RunLaunchInstance_launch__closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _RunLaunchInstance_launch__closure.builtin$cls = "_RunLaunchInstance_launch__closure";
    if (!("name" in _RunLaunchInstance_launch__closure))
      _RunLaunchInstance_launch__closure.name = "_RunLaunchInstance_launch__closure";
    $desc = $collectedClasses$._RunLaunchInstance_launch__closure[1];
    _RunLaunchInstance_launch__closure.prototype = $desc;
    _RunLaunchInstance_launch__closure.$__fields__ = ["$this"];
    function _RunLaunchInstance_launch__closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _RunLaunchInstance_launch__closure0.builtin$cls = "_RunLaunchInstance_launch__closure0";
    if (!("name" in _RunLaunchInstance_launch__closure0))
      _RunLaunchInstance_launch__closure0.name = "_RunLaunchInstance_launch__closure0";
    $desc = $collectedClasses$._RunLaunchInstance_launch__closure0[1];
    _RunLaunchInstance_launch__closure0.prototype = $desc;
    _RunLaunchInstance_launch__closure0.$__fields__ = ["$this"];
    function _RunLaunchInstance_launch__closure1(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    _RunLaunchInstance_launch__closure1.builtin$cls = "_RunLaunchInstance_launch__closure1";
    if (!("name" in _RunLaunchInstance_launch__closure1))
      _RunLaunchInstance_launch__closure1.name = "_RunLaunchInstance_launch__closure1";
    $desc = $collectedClasses$._RunLaunchInstance_launch__closure1[1];
    _RunLaunchInstance_launch__closure1.prototype = $desc;
    _RunLaunchInstance_launch__closure1.$__fields__ = ["_box_0"];
    function _RunLaunchInstance_launch__closure2(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    _RunLaunchInstance_launch__closure2.builtin$cls = "_RunLaunchInstance_launch__closure2";
    if (!("name" in _RunLaunchInstance_launch__closure2))
      _RunLaunchInstance_launch__closure2.name = "_RunLaunchInstance_launch__closure2";
    $desc = $collectedClasses$._RunLaunchInstance_launch__closure2[1];
    _RunLaunchInstance_launch__closure2.prototype = $desc;
    _RunLaunchInstance_launch__closure2.$__fields__ = ["_box_0", "$this"];
    function _RunLaunchInstance_launch_closure0() {
      this.$deferredAction();
    }
    _RunLaunchInstance_launch_closure0.builtin$cls = "_RunLaunchInstance_launch_closure0";
    if (!("name" in _RunLaunchInstance_launch_closure0))
      _RunLaunchInstance_launch_closure0.name = "_RunLaunchInstance_launch_closure0";
    $desc = $collectedClasses$._RunLaunchInstance_launch_closure0[1];
    _RunLaunchInstance_launch_closure0.prototype = $desc;
    _RunLaunchInstance_launch_closure0.$__fields__ = [];
    function _RunLaunchInstance__kill_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _RunLaunchInstance__kill_closure.builtin$cls = "_RunLaunchInstance__kill_closure";
    if (!("name" in _RunLaunchInstance__kill_closure))
      _RunLaunchInstance__kill_closure.name = "_RunLaunchInstance__kill_closure";
    $desc = $collectedClasses$._RunLaunchInstance__kill_closure[1];
    _RunLaunchInstance__kill_closure.prototype = $desc;
    _RunLaunchInstance__kill_closure.$__fields__ = ["$this"];
    function _RunLaunchInstance__kill_closure0() {
      this.$deferredAction();
    }
    _RunLaunchInstance__kill_closure0.builtin$cls = "_RunLaunchInstance__kill_closure0";
    if (!("name" in _RunLaunchInstance__kill_closure0))
      _RunLaunchInstance__kill_closure0.name = "_RunLaunchInstance__kill_closure0";
    $desc = $collectedClasses$._RunLaunchInstance__kill_closure0[1];
    _RunLaunchInstance__kill_closure0.prototype = $desc;
    _RunLaunchInstance__kill_closure0.$__fields__ = [];
    function _LogStatusJob(completer, name, _schedulingRule) {
      this.completer = completer;
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    _LogStatusJob.builtin$cls = "_LogStatusJob";
    if (!("name" in _LogStatusJob))
      _LogStatusJob.name = "_LogStatusJob";
    $desc = $collectedClasses$._LogStatusJob[1];
    _LogStatusJob.prototype = $desc;
    _LogStatusJob.$__fields__ = ["completer", "name", "_schedulingRule"];
    function _ConnectLaunchInstance(_observatoryDevicePort, pipeStdio, project, _launch, _observatoryPort, _flutter_launch$_device, debugConnection) {
      this._observatoryDevicePort = _observatoryDevicePort;
      this.pipeStdio = pipeStdio;
      this.project = project;
      this._launch = _launch;
      this._observatoryPort = _observatoryPort;
      this._flutter_launch$_device = _flutter_launch$_device;
      this.debugConnection = debugConnection;
      this.$deferredAction();
    }
    _ConnectLaunchInstance.builtin$cls = "_ConnectLaunchInstance";
    if (!("name" in _ConnectLaunchInstance))
      _ConnectLaunchInstance.name = "_ConnectLaunchInstance";
    $desc = $collectedClasses$._ConnectLaunchInstance[1];
    _ConnectLaunchInstance.prototype = $desc;
    _ConnectLaunchInstance.$__fields__ = ["_observatoryDevicePort", "pipeStdio", "project", "_launch", "_observatoryPort", "_flutter_launch$_device", "debugConnection"];
    _ConnectLaunchInstance.prototype.get$pipeStdio = function() {
      return this.pipeStdio;
    };
    function _FlutterLaunch(resolver, app, launchType, launchConfiguration, name, title, targetName, manager, id, killHandler, cwd, exitCode, servicePort, _stdio, _debugConnection, _pathResolver) {
      this.resolver = resolver;
      this.app = app;
      this.launchType = launchType;
      this.launchConfiguration = launchConfiguration;
      this.name = name;
      this.title = title;
      this.targetName = targetName;
      this.manager = manager;
      this.id = id;
      this.killHandler = killHandler;
      this.cwd = cwd;
      this.exitCode = exitCode;
      this.servicePort = servicePort;
      this._stdio = _stdio;
      this._debugConnection = _debugConnection;
      this._pathResolver = _pathResolver;
      this.$deferredAction();
    }
    _FlutterLaunch.builtin$cls = "_FlutterLaunch";
    if (!("name" in _FlutterLaunch))
      _FlutterLaunch.name = "_FlutterLaunch";
    $desc = $collectedClasses$._FlutterLaunch[1];
    _FlutterLaunch.prototype = $desc;
    _FlutterLaunch.$__fields__ = ["resolver", "app", "launchType", "launchConfiguration", "name", "title", "targetName", "manager", "id", "killHandler", "cwd", "exitCode", "servicePort", "_stdio", "_debugConnection", "_pathResolver"];
    function _FlutterLaunch_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _FlutterLaunch_closure.builtin$cls = "_FlutterLaunch_closure";
    if (!("name" in _FlutterLaunch_closure))
      _FlutterLaunch_closure.name = "_FlutterLaunch_closure";
    $desc = $collectedClasses$._FlutterLaunch_closure[1];
    _FlutterLaunch_closure.prototype = $desc;
    _FlutterLaunch_closure.$__fields__ = ["$this"];
    function _FlutterLaunch_restart_closure() {
      this.$deferredAction();
    }
    _FlutterLaunch_restart_closure.builtin$cls = "_FlutterLaunch_restart_closure";
    if (!("name" in _FlutterLaunch_restart_closure))
      _FlutterLaunch_restart_closure.name = "_FlutterLaunch_restart_closure";
    $desc = $collectedClasses$._FlutterLaunch_restart_closure[1];
    _FlutterLaunch_restart_closure.prototype = $desc;
    _FlutterLaunch_restart_closure.$__fields__ = [];
    function FlutterUriTranslator(root) {
      this.root = root;
      this.$deferredAction();
    }
    FlutterUriTranslator.builtin$cls = "FlutterUriTranslator";
    if (!("name" in FlutterUriTranslator))
      FlutterUriTranslator.name = "FlutterUriTranslator";
    $desc = $collectedClasses$.FlutterUriTranslator[1];
    FlutterUriTranslator.prototype = $desc;
    FlutterUriTranslator.$__fields__ = ["root"];
    FlutterUriTranslator.prototype.get$root = function(receiver) {
      return this.root;
    };
    function FlutterSdkManager(_flutter_sdk$_controller, _prefSub, _flutter_sdk$_disposables, _sdk) {
      this._flutter_sdk$_controller = _flutter_sdk$_controller;
      this._prefSub = _prefSub;
      this._flutter_sdk$_disposables = _flutter_sdk$_disposables;
      this._sdk = _sdk;
      this.$deferredAction();
    }
    FlutterSdkManager.builtin$cls = "FlutterSdkManager";
    if (!("name" in FlutterSdkManager))
      FlutterSdkManager.name = "FlutterSdkManager";
    $desc = $collectedClasses$.FlutterSdkManager[1];
    FlutterSdkManager.prototype = $desc;
    FlutterSdkManager.$__fields__ = ["_flutter_sdk$_controller", "_prefSub", "_flutter_sdk$_disposables", "_sdk"];
    function FlutterSdkManager_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterSdkManager_closure.builtin$cls = "FlutterSdkManager_closure";
    if (!("name" in FlutterSdkManager_closure))
      FlutterSdkManager_closure.name = "FlutterSdkManager_closure";
    $desc = $collectedClasses$.FlutterSdkManager_closure[1];
    FlutterSdkManager_closure.prototype = $desc;
    FlutterSdkManager_closure.$__fields__ = ["$this"];
    function FlutterSdkManager_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterSdkManager_closure0.builtin$cls = "FlutterSdkManager_closure0";
    if (!("name" in FlutterSdkManager_closure0))
      FlutterSdkManager_closure0.name = "FlutterSdkManager_closure0";
    $desc = $collectedClasses$.FlutterSdkManager_closure0[1];
    FlutterSdkManager_closure0.prototype = $desc;
    FlutterSdkManager_closure0.$__fields__ = ["$this"];
    function FlutterSdkManager_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterSdkManager_closure1.builtin$cls = "FlutterSdkManager_closure1";
    if (!("name" in FlutterSdkManager_closure1))
      FlutterSdkManager_closure1.name = "FlutterSdkManager_closure1";
    $desc = $collectedClasses$.FlutterSdkManager_closure1[1];
    FlutterSdkManager_closure1.prototype = $desc;
    FlutterSdkManager_closure1.$__fields__ = ["$this"];
    function FlutterSdkManager_closure2($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterSdkManager_closure2.builtin$cls = "FlutterSdkManager_closure2";
    if (!("name" in FlutterSdkManager_closure2))
      FlutterSdkManager_closure2.name = "FlutterSdkManager_closure2";
    $desc = $collectedClasses$.FlutterSdkManager_closure2[1];
    FlutterSdkManager_closure2.prototype = $desc;
    FlutterSdkManager_closure2.$__fields__ = ["$this"];
    function FlutterSdkManager_tryToAutoConfigure_closure(complainOnFailure) {
      this.complainOnFailure = complainOnFailure;
      this.$deferredAction();
    }
    FlutterSdkManager_tryToAutoConfigure_closure.builtin$cls = "FlutterSdkManager_tryToAutoConfigure_closure";
    if (!("name" in FlutterSdkManager_tryToAutoConfigure_closure))
      FlutterSdkManager_tryToAutoConfigure_closure.name = "FlutterSdkManager_tryToAutoConfigure_closure";
    $desc = $collectedClasses$.FlutterSdkManager_tryToAutoConfigure_closure[1];
    FlutterSdkManager_tryToAutoConfigure_closure.prototype = $desc;
    FlutterSdkManager_tryToAutoConfigure_closure.$__fields__ = ["complainOnFailure"];
    function FlutterSdkManager_showInstallationInfo_closure(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    FlutterSdkManager_showInstallationInfo_closure.builtin$cls = "FlutterSdkManager_showInstallationInfo_closure";
    if (!("name" in FlutterSdkManager_showInstallationInfo_closure))
      FlutterSdkManager_showInstallationInfo_closure.name = "FlutterSdkManager_showInstallationInfo_closure";
    $desc = $collectedClasses$.FlutterSdkManager_showInstallationInfo_closure[1];
    FlutterSdkManager_showInstallationInfo_closure.prototype = $desc;
    FlutterSdkManager_showInstallationInfo_closure.$__fields__ = ["_box_0", "$this"];
    function FlutterSdkManager_showInstallationInfo_closure0(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    FlutterSdkManager_showInstallationInfo_closure0.builtin$cls = "FlutterSdkManager_showInstallationInfo_closure0";
    if (!("name" in FlutterSdkManager_showInstallationInfo_closure0))
      FlutterSdkManager_showInstallationInfo_closure0.name = "FlutterSdkManager_showInstallationInfo_closure0";
    $desc = $collectedClasses$.FlutterSdkManager_showInstallationInfo_closure0[1];
    FlutterSdkManager_showInstallationInfo_closure0.prototype = $desc;
    FlutterSdkManager_showInstallationInfo_closure0.$__fields__ = ["_box_0"];
    function _discoverSdk_closure() {
      this.$deferredAction();
    }
    _discoverSdk_closure.builtin$cls = "_discoverSdk_closure";
    if (!("name" in _discoverSdk_closure))
      _discoverSdk_closure.name = "_discoverSdk_closure";
    $desc = $collectedClasses$._discoverSdk_closure[1];
    _discoverSdk_closure.prototype = $desc;
    _discoverSdk_closure.$__fields__ = [];
    function _discoverSdk_closure0() {
      this.$deferredAction();
    }
    _discoverSdk_closure0.builtin$cls = "_discoverSdk_closure0";
    if (!("name" in _discoverSdk_closure0))
      _discoverSdk_closure0.name = "_discoverSdk_closure0";
    $desc = $collectedClasses$._discoverSdk_closure0[1];
    _discoverSdk_closure0.prototype = $desc;
    _discoverSdk_closure0.$__fields__ = [];
    function _discoverSdk_closure1() {
      this.$deferredAction();
    }
    _discoverSdk_closure1.builtin$cls = "_discoverSdk_closure1";
    if (!("name" in _discoverSdk_closure1))
      _discoverSdk_closure1.name = "_discoverSdk_closure1";
    $desc = $collectedClasses$._discoverSdk_closure1[1];
    _discoverSdk_closure1.prototype = $desc;
    _discoverSdk_closure1.$__fields__ = [];
    function _discoverSdk_closure2() {
      this.$deferredAction();
    }
    _discoverSdk_closure2.builtin$cls = "_discoverSdk_closure2";
    if (!("name" in _discoverSdk_closure2))
      _discoverSdk_closure2.name = "_discoverSdk_closure2";
    $desc = $collectedClasses$._discoverSdk_closure2[1];
    _discoverSdk_closure2.prototype = $desc;
    _discoverSdk_closure2.$__fields__ = [];
    function _discoverSdk_closure3() {
      this.$deferredAction();
    }
    _discoverSdk_closure3.builtin$cls = "_discoverSdk_closure3";
    if (!("name" in _discoverSdk_closure3))
      _discoverSdk_closure3.name = "_discoverSdk_closure3";
    $desc = $collectedClasses$._discoverSdk_closure3[1];
    _discoverSdk_closure3.prototype = $desc;
    _discoverSdk_closure3.$__fields__ = [];
    function _discoverSdk_closure4() {
      this.$deferredAction();
    }
    _discoverSdk_closure4.builtin$cls = "_discoverSdk_closure4";
    if (!("name" in _discoverSdk_closure4))
      _discoverSdk_closure4.name = "_discoverSdk_closure4";
    $desc = $collectedClasses$._discoverSdk_closure4[1];
    _discoverSdk_closure4.prototype = $desc;
    _discoverSdk_closure4.$__fields__ = [];
    function FlutterSdk(path) {
      this.path = path;
      this.$deferredAction();
    }
    FlutterSdk.builtin$cls = "FlutterSdk";
    if (!("name" in FlutterSdk))
      FlutterSdk.name = "FlutterSdk";
    $desc = $collectedClasses$.FlutterSdk[1];
    FlutterSdk.prototype = $desc;
    FlutterSdk.$__fields__ = ["path"];
    FlutterSdk.prototype.get$path = function(receiver) {
      return this.path;
    };
    function FlutterTool(sdk, toolPath) {
      this.sdk = sdk;
      this.toolPath = toolPath;
      this.$deferredAction();
    }
    FlutterTool.builtin$cls = "FlutterTool";
    if (!("name" in FlutterTool))
      FlutterTool.name = "FlutterTool";
    $desc = $collectedClasses$.FlutterTool[1];
    FlutterTool.prototype = $desc;
    FlutterTool.$__fields__ = ["sdk", "toolPath"];
    FlutterTool.prototype.get$sdk = function() {
      return this.sdk;
    };
    function _FlutterToolJob(sdk, cwd, _args, title, name, _schedulingRule) {
      this.sdk = sdk;
      this.cwd = cwd;
      this._args = _args;
      this.title = title;
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    _FlutterToolJob.builtin$cls = "_FlutterToolJob";
    if (!("name" in _FlutterToolJob))
      _FlutterToolJob.name = "_FlutterToolJob";
    $desc = $collectedClasses$._FlutterToolJob[1];
    _FlutterToolJob.prototype = $desc;
    _FlutterToolJob.$__fields__ = ["sdk", "cwd", "_args", "title", "name", "_schedulingRule"];
    _FlutterToolJob.prototype.get$sdk = function() {
      return this.sdk;
    };
    _FlutterToolJob.prototype.get$cwd = function() {
      return this.cwd;
    };
    _FlutterToolJob.prototype.get$title = function(receiver) {
      return this.title;
    };
    function SdkLocationJob0(sdkManager, name, _schedulingRule) {
      this.sdkManager = sdkManager;
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    SdkLocationJob0.builtin$cls = "SdkLocationJob0";
    if (!("name" in SdkLocationJob0))
      SdkLocationJob0.name = "SdkLocationJob0";
    $desc = $collectedClasses$.SdkLocationJob0[1];
    SdkLocationJob0.prototype = $desc;
    SdkLocationJob0.$__fields__ = ["sdkManager", "name", "_schedulingRule"];
    function FlutterToolsManager(disposables, connectManager) {
      this.disposables = disposables;
      this.connectManager = connectManager;
      this.$deferredAction();
    }
    FlutterToolsManager.builtin$cls = "FlutterToolsManager";
    if (!("name" in FlutterToolsManager))
      FlutterToolsManager.name = "FlutterToolsManager";
    $desc = $collectedClasses$.FlutterToolsManager[1];
    FlutterToolsManager.prototype = $desc;
    FlutterToolsManager.$__fields__ = ["disposables", "connectManager"];
    function FlutterToolsManager__createProject_closure(_box_0, flutter) {
      this._box_0 = _box_0;
      this.flutter = flutter;
      this.$deferredAction();
    }
    FlutterToolsManager__createProject_closure.builtin$cls = "FlutterToolsManager__createProject_closure";
    if (!("name" in FlutterToolsManager__createProject_closure))
      FlutterToolsManager__createProject_closure.name = "FlutterToolsManager__createProject_closure";
    $desc = $collectedClasses$.FlutterToolsManager__createProject_closure[1];
    FlutterToolsManager__createProject_closure.prototype = $desc;
    FlutterToolsManager__createProject_closure.$__fields__ = ["_box_0", "flutter"];
    function FlutterToolsManager__createProject_closure0(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    FlutterToolsManager__createProject_closure0.builtin$cls = "FlutterToolsManager__createProject_closure0";
    if (!("name" in FlutterToolsManager__createProject_closure0))
      FlutterToolsManager__createProject_closure0.name = "FlutterToolsManager__createProject_closure0";
    $desc = $collectedClasses$.FlutterToolsManager__createProject_closure0[1];
    FlutterToolsManager__createProject_closure0.prototype = $desc;
    FlutterToolsManager__createProject_closure0.$__fields__ = ["_box_0"];
    function FlutterToolsManager__createProject__closure() {
      this.$deferredAction();
    }
    FlutterToolsManager__createProject__closure.builtin$cls = "FlutterToolsManager__createProject__closure";
    if (!("name" in FlutterToolsManager__createProject__closure))
      FlutterToolsManager__createProject__closure.name = "FlutterToolsManager__createProject__closure";
    $desc = $collectedClasses$.FlutterToolsManager__createProject__closure[1];
    FlutterToolsManager__createProject__closure.prototype = $desc;
    FlutterToolsManager__createProject__closure.$__fields__ = [];
    function FlutterSection(connection, infoElement, isDebugDrawing, isRepaintRainbow, isSlowAnimations, isPerformanceOverlay) {
      this.connection = connection;
      this.infoElement = infoElement;
      this.isDebugDrawing = isDebugDrawing;
      this.isRepaintRainbow = isRepaintRainbow;
      this.isSlowAnimations = isSlowAnimations;
      this.isPerformanceOverlay = isPerformanceOverlay;
      this.$deferredAction();
    }
    FlutterSection.builtin$cls = "FlutterSection";
    if (!("name" in FlutterSection))
      FlutterSection.name = "FlutterSection";
    $desc = $collectedClasses$.FlutterSection[1];
    FlutterSection.prototype = $desc;
    FlutterSection.$__fields__ = ["connection", "infoElement", "isDebugDrawing", "isRepaintRainbow", "isSlowAnimations", "isPerformanceOverlay"];
    function FlutterSection_closure(element) {
      this.element = element;
      this.$deferredAction();
    }
    FlutterSection_closure.builtin$cls = "FlutterSection_closure";
    if (!("name" in FlutterSection_closure))
      FlutterSection_closure.name = "FlutterSection_closure";
    $desc = $collectedClasses$.FlutterSection_closure[1];
    FlutterSection_closure.prototype = $desc;
    FlutterSection_closure.$__fields__ = ["element"];
    function MojoLaunchType(_mojo_launch$_lastLaunch, type) {
      this._mojo_launch$_lastLaunch = _mojo_launch$_lastLaunch;
      this.type = type;
      this.$deferredAction();
    }
    MojoLaunchType.builtin$cls = "MojoLaunchType";
    if (!("name" in MojoLaunchType))
      MojoLaunchType.name = "MojoLaunchType";
    $desc = $collectedClasses$.MojoLaunchType[1];
    MojoLaunchType.prototype = $desc;
    MojoLaunchType.$__fields__ = ["_mojo_launch$_lastLaunch", "type"];
    function _LaunchInstance(project, _mojo_launch$_launch, _runner, _mojo_launch$_args, _mojo_launch$_device) {
      this.project = project;
      this._mojo_launch$_launch = _mojo_launch$_launch;
      this._runner = _runner;
      this._mojo_launch$_args = _mojo_launch$_args;
      this._mojo_launch$_device = _mojo_launch$_device;
      this.$deferredAction();
    }
    _LaunchInstance.builtin$cls = "_LaunchInstance";
    if (!("name" in _LaunchInstance))
      _LaunchInstance.name = "_LaunchInstance";
    $desc = $collectedClasses$._LaunchInstance[1];
    _LaunchInstance.prototype = $desc;
    _LaunchInstance.$__fields__ = ["project", "_mojo_launch$_launch", "_runner", "_mojo_launch$_args", "_mojo_launch$_device"];
    function _LaunchInstance_launch_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _LaunchInstance_launch_closure.builtin$cls = "_LaunchInstance_launch_closure";
    if (!("name" in _LaunchInstance_launch_closure))
      _LaunchInstance_launch_closure.name = "_LaunchInstance_launch_closure";
    $desc = $collectedClasses$._LaunchInstance_launch_closure[1];
    _LaunchInstance_launch_closure.prototype = $desc;
    _LaunchInstance_launch_closure.$__fields__ = ["$this"];
    function _LaunchInstance_launch_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _LaunchInstance_launch_closure0.builtin$cls = "_LaunchInstance_launch_closure0";
    if (!("name" in _LaunchInstance_launch_closure0))
      _LaunchInstance_launch_closure0.name = "_LaunchInstance_launch_closure0";
    $desc = $collectedClasses$._LaunchInstance_launch_closure0[1];
    _LaunchInstance_launch_closure0.prototype = $desc;
    _LaunchInstance_launch_closure0.$__fields__ = ["$this"];
    function _LaunchInstance_launch_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _LaunchInstance_launch_closure1.builtin$cls = "_LaunchInstance_launch_closure1";
    if (!("name" in _LaunchInstance_launch_closure1))
      _LaunchInstance_launch_closure1.name = "_LaunchInstance_launch_closure1";
    $desc = $collectedClasses$._LaunchInstance_launch_closure1[1];
    _LaunchInstance_launch_closure1.prototype = $desc;
    _LaunchInstance_launch_closure1.$__fields__ = ["$this"];
    function _LaunchInstance__kill_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _LaunchInstance__kill_closure.builtin$cls = "_LaunchInstance__kill_closure";
    if (!("name" in _LaunchInstance__kill_closure))
      _LaunchInstance__kill_closure.name = "_LaunchInstance__kill_closure";
    $desc = $collectedClasses$._LaunchInstance__kill_closure[1];
    _LaunchInstance__kill_closure.prototype = $desc;
    _LaunchInstance__kill_closure.$__fields__ = ["$this"];
    function ChangelogManager(disposables, _changeLogFile) {
      this.disposables = disposables;
      this._changeLogFile = _changeLogFile;
      this.$deferredAction();
    }
    ChangelogManager.builtin$cls = "ChangelogManager";
    if (!("name" in ChangelogManager))
      ChangelogManager.name = "ChangelogManager";
    $desc = $collectedClasses$.ChangelogManager[1];
    ChangelogManager.prototype = $desc;
    ChangelogManager.$__fields__ = ["disposables", "_changeLogFile"];
    function ChangelogManager_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ChangelogManager_closure.builtin$cls = "ChangelogManager_closure";
    if (!("name" in ChangelogManager_closure))
      ChangelogManager_closure.name = "ChangelogManager_closure";
    $desc = $collectedClasses$.ChangelogManager_closure[1];
    ChangelogManager_closure.prototype = $desc;
    ChangelogManager_closure.$__fields__ = ["$this"];
    function ChangelogManager_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ChangelogManager_closure0.builtin$cls = "ChangelogManager_closure0";
    if (!("name" in ChangelogManager_closure0))
      ChangelogManager_closure0.name = "ChangelogManager_closure0";
    $desc = $collectedClasses$.ChangelogManager_closure0[1];
    ChangelogManager_closure0.prototype = $desc;
    ChangelogManager_closure0.$__fields__ = ["$this"];
    function ChangelogManager__handleReleaseNotes_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ChangelogManager__handleReleaseNotes_closure.builtin$cls = "ChangelogManager__handleReleaseNotes_closure";
    if (!("name" in ChangelogManager__handleReleaseNotes_closure))
      ChangelogManager__handleReleaseNotes_closure.name = "ChangelogManager__handleReleaseNotes_closure";
    $desc = $collectedClasses$.ChangelogManager__handleReleaseNotes_closure[1];
    ChangelogManager__handleReleaseNotes_closure.prototype = $desc;
    ChangelogManager__handleReleaseNotes_closure.$__fields__ = ["$this"];
    function ChangelogManager__handleReleaseNotes_closure0() {
      this.$deferredAction();
    }
    ChangelogManager__handleReleaseNotes_closure0.builtin$cls = "ChangelogManager__handleReleaseNotes_closure0";
    if (!("name" in ChangelogManager__handleReleaseNotes_closure0))
      ChangelogManager__handleReleaseNotes_closure0.name = "ChangelogManager__handleReleaseNotes_closure0";
    $desc = $collectedClasses$.ChangelogManager__handleReleaseNotes_closure0[1];
    ChangelogManager__handleReleaseNotes_closure0.prototype = $desc;
    ChangelogManager__handleReleaseNotes_closure0.$__fields__ = [];
    function Debounce(duration, $ti) {
      this.duration = duration;
      this.$ti = $ti;
      this.$deferredAction();
    }
    Debounce.builtin$cls = "Debounce";
    if (!("name" in Debounce))
      Debounce.name = "Debounce";
    $desc = $collectedClasses$.Debounce[1];
    Debounce.prototype = $desc;
    Debounce.$__fields__ = ["duration"];
    function Debounce_bind_closure(_box_0, $this, controller) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.controller = controller;
      this.$deferredAction();
    }
    Debounce_bind_closure.builtin$cls = "Debounce_bind_closure";
    if (!("name" in Debounce_bind_closure))
      Debounce_bind_closure.name = "Debounce_bind_closure";
    $desc = $collectedClasses$.Debounce_bind_closure[1];
    Debounce_bind_closure.prototype = $desc;
    Debounce_bind_closure.$__fields__ = ["_box_0", "$this", "controller"];
    function Debounce_bind__closure(controller, data) {
      this.controller = controller;
      this.data = data;
      this.$deferredAction();
    }
    Debounce_bind__closure.builtin$cls = "Debounce_bind__closure";
    if (!("name" in Debounce_bind__closure))
      Debounce_bind__closure.name = "Debounce_bind__closure";
    $desc = $collectedClasses$.Debounce_bind__closure[1];
    Debounce_bind__closure.prototype = $desc;
    Debounce_bind__closure.$__fields__ = ["controller", "data"];
    function Debounce_bind_closure0(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    Debounce_bind_closure0.builtin$cls = "Debounce_bind_closure0";
    if (!("name" in Debounce_bind_closure0))
      Debounce_bind_closure0.name = "Debounce_bind_closure0";
    $desc = $collectedClasses$.Debounce_bind_closure0[1];
    Debounce_bind_closure0.prototype = $desc;
    Debounce_bind_closure0.$__fields__ = ["_box_0"];
    function _handleEnterKey_closure(editor) {
      this.editor = editor;
      this.$deferredAction();
    }
    _handleEnterKey_closure.builtin$cls = "_handleEnterKey_closure";
    if (!("name" in _handleEnterKey_closure))
      _handleEnterKey_closure.name = "_handleEnterKey_closure";
    $desc = $collectedClasses$._handleEnterKey_closure[1];
    _handleEnterKey_closure.prototype = $desc;
    _handleEnterKey_closure.$__fields__ = ["editor"];
    function _handleEnterKey_closure0(_box_0, editor) {
      this._box_0 = _box_0;
      this.editor = editor;
      this.$deferredAction();
    }
    _handleEnterKey_closure0.builtin$cls = "_handleEnterKey_closure0";
    if (!("name" in _handleEnterKey_closure0))
      _handleEnterKey_closure0.name = "_handleEnterKey_closure0";
    $desc = $collectedClasses$._handleEnterKey_closure0[1];
    _handleEnterKey_closure0.prototype = $desc;
    _handleEnterKey_closure0.$__fields__ = ["_box_0", "editor"];
    function _handleEnterKey_closure1(editor) {
      this.editor = editor;
      this.$deferredAction();
    }
    _handleEnterKey_closure1.builtin$cls = "_handleEnterKey_closure1";
    if (!("name" in _handleEnterKey_closure1))
      _handleEnterKey_closure1.name = "_handleEnterKey_closure1";
    $desc = $collectedClasses$._handleEnterKey_closure1[1];
    _handleEnterKey_closure1.prototype = $desc;
    _handleEnterKey_closure1.$__fields__ = ["editor"];
    function _handleEnterKey_closure2(_box_0, editor) {
      this._box_0 = _box_0;
      this.editor = editor;
      this.$deferredAction();
    }
    _handleEnterKey_closure2.builtin$cls = "_handleEnterKey_closure2";
    if (!("name" in _handleEnterKey_closure2))
      _handleEnterKey_closure2.name = "_handleEnterKey_closure2";
    $desc = $collectedClasses$._handleEnterKey_closure2[1];
    _handleEnterKey_closure2.prototype = $desc;
    _handleEnterKey_closure2.$__fields__ = ["_box_0", "editor"];
    function _handleEnterKey_closure3(editor) {
      this.editor = editor;
      this.$deferredAction();
    }
    _handleEnterKey_closure3.builtin$cls = "_handleEnterKey_closure3";
    if (!("name" in _handleEnterKey_closure3))
      _handleEnterKey_closure3.name = "_handleEnterKey_closure3";
    $desc = $collectedClasses$._handleEnterKey_closure3[1];
    _handleEnterKey_closure3.prototype = $desc;
    _handleEnterKey_closure3.$__fields__ = ["editor"];
    function _handleEnterKey_closure4(_box_0, editor) {
      this._box_0 = _box_0;
      this.editor = editor;
      this.$deferredAction();
    }
    _handleEnterKey_closure4.builtin$cls = "_handleEnterKey_closure4";
    if (!("name" in _handleEnterKey_closure4))
      _handleEnterKey_closure4.name = "_handleEnterKey_closure4";
    $desc = $collectedClasses$._handleEnterKey_closure4[1];
    _handleEnterKey_closure4.prototype = $desc;
    _handleEnterKey_closure4.$__fields__ = ["_box_0", "editor"];
    function _handleEnterKey_closure5(editor, line, trimmedText) {
      this.editor = editor;
      this.line = line;
      this.trimmedText = trimmedText;
      this.$deferredAction();
    }
    _handleEnterKey_closure5.builtin$cls = "_handleEnterKey_closure5";
    if (!("name" in _handleEnterKey_closure5))
      _handleEnterKey_closure5.name = "_handleEnterKey_closure5";
    $desc = $collectedClasses$._handleEnterKey_closure5[1];
    _handleEnterKey_closure5.prototype = $desc;
    _handleEnterKey_closure5.$__fields__ = ["editor", "line", "trimmedText"];
    function _handleEnterKey_closure6(_box_0, editor) {
      this._box_0 = _box_0;
      this.editor = editor;
      this.$deferredAction();
    }
    _handleEnterKey_closure6.builtin$cls = "_handleEnterKey_closure6";
    if (!("name" in _handleEnterKey_closure6))
      _handleEnterKey_closure6.name = "_handleEnterKey_closure6";
    $desc = $collectedClasses$._handleEnterKey_closure6[1];
    _handleEnterKey_closure6.prototype = $desc;
    _handleEnterKey_closure6.$__fields__ = ["_box_0", "editor"];
    function ErrorsController(disposables, _errors$_sub, view, statusElement, _focusedDir, _cachedErrors, enabled) {
      this.disposables = disposables;
      this._errors$_sub = _errors$_sub;
      this.view = view;
      this.statusElement = statusElement;
      this._focusedDir = _focusedDir;
      this._cachedErrors = _cachedErrors;
      this.enabled = enabled;
      this.$deferredAction();
    }
    ErrorsController.builtin$cls = "ErrorsController";
    if (!("name" in ErrorsController))
      ErrorsController.name = "ErrorsController";
    $desc = $collectedClasses$.ErrorsController[1];
    ErrorsController.prototype = $desc;
    ErrorsController.$__fields__ = ["disposables", "_errors$_sub", "view", "statusElement", "_focusedDir", "_cachedErrors", "enabled"];
    ErrorsController.prototype.get$view = function(receiver) {
      return this.view;
    };
    function ErrorsController_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ErrorsController_closure.builtin$cls = "ErrorsController_closure";
    if (!("name" in ErrorsController_closure))
      ErrorsController_closure.name = "ErrorsController_closure";
    $desc = $collectedClasses$.ErrorsController_closure[1];
    ErrorsController_closure.prototype = $desc;
    ErrorsController_closure.$__fields__ = ["$this"];
    function ErrorsController__handleErrorsChanged_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ErrorsController__handleErrorsChanged_closure.builtin$cls = "ErrorsController__handleErrorsChanged_closure";
    if (!("name" in ErrorsController__handleErrorsChanged_closure))
      ErrorsController__handleErrorsChanged_closure.name = "ErrorsController__handleErrorsChanged_closure";
    $desc = $collectedClasses$.ErrorsController__handleErrorsChanged_closure[1];
    ErrorsController__handleErrorsChanged_closure.prototype = $desc;
    ErrorsController__handleErrorsChanged_closure.$__fields__ = ["$this"];
    function ErrorsView(target, countElement, focusElement, root, toolbar, content, tabElement, _closeButton, group) {
      this.target = target;
      this.countElement = countElement;
      this.focusElement = focusElement;
      this.root = root;
      this.toolbar = toolbar;
      this.content = content;
      this.tabElement = tabElement;
      this._closeButton = _closeButton;
      this.group = group;
      this.$deferredAction();
    }
    ErrorsView.builtin$cls = "ErrorsView";
    if (!("name" in ErrorsView))
      ErrorsView.name = "ErrorsView";
    $desc = $collectedClasses$.ErrorsView[1];
    ErrorsView.prototype = $desc;
    ErrorsView.$__fields__ = ["target", "countElement", "focusElement", "root", "toolbar", "content", "tabElement", "_closeButton", "group"];
    ErrorsView.prototype.get$target = function(receiver) {
      return this.target;
    };
    function ErrorsView__cvtError_closure($this, error) {
      this.$this = $this;
      this.error = error;
      this.$deferredAction();
    }
    ErrorsView__cvtError_closure.builtin$cls = "ErrorsView__cvtError_closure";
    if (!("name" in ErrorsView__cvtError_closure))
      ErrorsView__cvtError_closure.name = "ErrorsView__cvtError_closure";
    $desc = $collectedClasses$.ErrorsView__cvtError_closure[1];
    ErrorsView__cvtError_closure.prototype = $desc;
    ErrorsView__cvtError_closure.$__fields__ = ["$this", "error"];
    function ErrorsView__cvtError__closure() {
      this.$deferredAction();
    }
    ErrorsView__cvtError__closure.builtin$cls = "ErrorsView__cvtError__closure";
    if (!("name" in ErrorsView__cvtError__closure))
      ErrorsView__cvtError__closure.name = "ErrorsView__cvtError__closure";
    $desc = $collectedClasses$.ErrorsView__cvtError__closure[1];
    ErrorsView__cvtError__closure.prototype = $desc;
    ErrorsView__cvtError__closure.$__fields__ = [];
    function ErrorsView__cvtError_closure0($this, error) {
      this.$this = $this;
      this.error = error;
      this.$deferredAction();
    }
    ErrorsView__cvtError_closure0.builtin$cls = "ErrorsView__cvtError_closure0";
    if (!("name" in ErrorsView__cvtError_closure0))
      ErrorsView__cvtError_closure0.name = "ErrorsView__cvtError_closure0";
    $desc = $collectedClasses$.ErrorsView__cvtError_closure0[1];
    ErrorsView__cvtError_closure0.prototype = $desc;
    ErrorsView__cvtError_closure0.$__fields__ = ["$this", "error"];
    function ErrorsView__cvtError_closure1($this, error) {
      this.$this = $this;
      this.error = error;
      this.$deferredAction();
    }
    ErrorsView__cvtError_closure1.builtin$cls = "ErrorsView__cvtError_closure1";
    if (!("name" in ErrorsView__cvtError_closure1))
      ErrorsView__cvtError_closure1.name = "ErrorsView__cvtError_closure1";
    $desc = $collectedClasses$.ErrorsView__cvtError_closure1[1];
    ErrorsView__cvtError_closure1.prototype = $desc;
    ErrorsView__cvtError_closure1.$__fields__ = ["$this", "error"];
    function ErrorsView__cvtError_closure2($this, error) {
      this.$this = $this;
      this.error = error;
      this.$deferredAction();
    }
    ErrorsView__cvtError_closure2.builtin$cls = "ErrorsView__cvtError_closure2";
    if (!("name" in ErrorsView__cvtError_closure2))
      ErrorsView__cvtError_closure2.name = "ErrorsView__cvtError_closure2";
    $desc = $collectedClasses$.ErrorsView__cvtError_closure2[1];
    ErrorsView__cvtError_closure2.prototype = $desc;
    ErrorsView__cvtError_closure2.$__fields__ = ["$this", "error"];
    function ErrorsView__jumpTo_closure(location) {
      this.location = location;
      this.$deferredAction();
    }
    ErrorsView__jumpTo_closure.builtin$cls = "ErrorsView__jumpTo_closure";
    if (!("name" in ErrorsView__jumpTo_closure))
      ErrorsView__jumpTo_closure.name = "ErrorsView__jumpTo_closure";
    $desc = $collectedClasses$.ErrorsView__jumpTo_closure[1];
    ErrorsView__jumpTo_closure.prototype = $desc;
    ErrorsView__jumpTo_closure.$__fields__ = ["location"];
    function ErrorsStatusElement(parent, _errors$_showing, statusTile, _errors$_element, _errors$_badgeSpan) {
      this.parent = parent;
      this._errors$_showing = _errors$_showing;
      this.statusTile = statusTile;
      this._errors$_element = _errors$_element;
      this._errors$_badgeSpan = _errors$_badgeSpan;
      this.$deferredAction();
    }
    ErrorsStatusElement.builtin$cls = "ErrorsStatusElement";
    if (!("name" in ErrorsStatusElement))
      ErrorsStatusElement.name = "ErrorsStatusElement";
    $desc = $collectedClasses$.ErrorsStatusElement[1];
    ErrorsStatusElement.prototype = $desc;
    ErrorsStatusElement.$__fields__ = ["parent", "_errors$_showing", "statusTile", "_errors$_element", "_errors$_badgeSpan"];
    ErrorsStatusElement.prototype.get$parent = function(receiver) {
      return this.parent;
    };
    function NavigationManager(_navigation$_commands, _navController, _navigation$_history, _future) {
      this._navigation$_commands = _navigation$_commands;
      this._navController = _navController;
      this._navigation$_history = _navigation$_history;
      this._future = _future;
      this.$deferredAction();
    }
    NavigationManager.builtin$cls = "NavigationManager";
    if (!("name" in NavigationManager))
      NavigationManager.name = "NavigationManager";
    $desc = $collectedClasses$.NavigationManager[1];
    NavigationManager.prototype = $desc;
    NavigationManager.$__fields__ = ["_navigation$_commands", "_navController", "_navigation$_history", "_future"];
    function NavigationPosition(path, line, column, length) {
      this.path = path;
      this.line = line;
      this.column = column;
      this.length = length;
      this.$deferredAction();
    }
    NavigationPosition.builtin$cls = "NavigationPosition";
    if (!("name" in NavigationPosition))
      NavigationPosition.name = "NavigationPosition";
    $desc = $collectedClasses$.NavigationPosition[1];
    NavigationPosition.prototype = $desc;
    NavigationPosition.$__fields__ = ["path", "line", "column", "length"];
    NavigationPosition.prototype.get$path = function(receiver) {
      return this.path;
    };
    NavigationPosition.prototype.get$line = function(receiver) {
      return this.line;
    };
    NavigationPosition.prototype.get$column = function() {
      return this.column;
    };
    NavigationPosition.prototype.get$length = function(receiver) {
      return this.length;
    };
    function OutlineController(disposables, showView, views) {
      this.disposables = disposables;
      this.showView = showView;
      this.views = views;
      this.$deferredAction();
    }
    OutlineController.builtin$cls = "OutlineController";
    if (!("name" in OutlineController))
      OutlineController.name = "OutlineController";
    $desc = $collectedClasses$.OutlineController[1];
    OutlineController.prototype = $desc;
    OutlineController.$__fields__ = ["disposables", "showView", "views"];
    function OutlineController_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    OutlineController_closure.builtin$cls = "OutlineController_closure";
    if (!("name" in OutlineController_closure))
      OutlineController_closure.name = "OutlineController_closure";
    $desc = $collectedClasses$.OutlineController_closure[1];
    OutlineController_closure.prototype = $desc;
    OutlineController_closure.$__fields__ = ["$this"];
    function OutlineController_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    OutlineController_closure0.builtin$cls = "OutlineController_closure0";
    if (!("name" in OutlineController_closure0))
      OutlineController_closure0.name = "OutlineController_closure0";
    $desc = $collectedClasses$.OutlineController_closure0[1];
    OutlineController_closure0.prototype = $desc;
    OutlineController_closure0.$__fields__ = ["$this"];
    function OutlineController_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    OutlineController_closure1.builtin$cls = "OutlineController_closure1";
    if (!("name" in OutlineController_closure1))
      OutlineController_closure1.name = "OutlineController_closure1";
    $desc = $collectedClasses$.OutlineController_closure1[1];
    OutlineController_closure1.prototype = $desc;
    OutlineController_closure1.$__fields__ = ["$this"];
    function OutlineView(controller, editor, root, content, fileType, title, treeBuilder, errorArea, errorsList, lastOutline, subs, _topLevel) {
      this.controller = controller;
      this.editor = editor;
      this.root = root;
      this.content = content;
      this.fileType = fileType;
      this.title = title;
      this.treeBuilder = treeBuilder;
      this.errorArea = errorArea;
      this.errorsList = errorsList;
      this.lastOutline = lastOutline;
      this.subs = subs;
      this._topLevel = _topLevel;
      this.$deferredAction();
    }
    OutlineView.builtin$cls = "OutlineView";
    if (!("name" in OutlineView))
      OutlineView.name = "OutlineView";
    $desc = $collectedClasses$.OutlineView[1];
    OutlineView.prototype = $desc;
    OutlineView.$__fields__ = ["controller", "editor", "root", "content", "fileType", "title", "treeBuilder", "errorArea", "errorsList", "lastOutline", "subs", "_topLevel"];
    OutlineView.prototype.get$editor = function() {
      return this.editor;
    };
    OutlineView.prototype.get$root = function(receiver) {
      return this.root;
    };
    OutlineView.prototype.get$content = function(receiver) {
      return this.content;
    };
    OutlineView.prototype.get$title = function(receiver) {
      return this.title;
    };
    OutlineView.prototype.set$title = function(receiver, v) {
      return this.title = v;
    };
    function OutlineView_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    OutlineView_closure.builtin$cls = "OutlineView_closure";
    if (!("name" in OutlineView_closure))
      OutlineView_closure.name = "OutlineView_closure";
    $desc = $collectedClasses$.OutlineView_closure[1];
    OutlineView_closure.prototype = $desc;
    OutlineView_closure.$__fields__ = ["$this"];
    function OutlineView__setupResizer_closure(_box_0, resizer) {
      this._box_0 = _box_0;
      this.resizer = resizer;
      this.$deferredAction();
    }
    OutlineView__setupResizer_closure.builtin$cls = "OutlineView__setupResizer_closure";
    if (!("name" in OutlineView__setupResizer_closure))
      OutlineView__setupResizer_closure.name = "OutlineView__setupResizer_closure";
    $desc = $collectedClasses$.OutlineView__setupResizer_closure[1];
    OutlineView__setupResizer_closure.prototype = $desc;
    OutlineView__setupResizer_closure.$__fields__ = ["_box_0", "resizer"];
    function OutlineView__setupResizer_closure0(_box_0, prefName) {
      this._box_0 = _box_0;
      this.prefName = prefName;
      this.$deferredAction();
    }
    OutlineView__setupResizer_closure0.builtin$cls = "OutlineView__setupResizer_closure0";
    if (!("name" in OutlineView__setupResizer_closure0))
      OutlineView__setupResizer_closure0.name = "OutlineView__setupResizer_closure0";
    $desc = $collectedClasses$.OutlineView__setupResizer_closure0[1];
    OutlineView__setupResizer_closure0.prototype = $desc;
    OutlineView__setupResizer_closure0.$__fields__ = ["_box_0", "prefName"];
    function _ErrorsList(view, path, element) {
      this.view = view;
      this.path = path;
      this.element = element;
      this.$deferredAction();
    }
    _ErrorsList.builtin$cls = "_ErrorsList";
    if (!("name" in _ErrorsList))
      _ErrorsList.name = "_ErrorsList";
    $desc = $collectedClasses$._ErrorsList[1];
    _ErrorsList.prototype = $desc;
    _ErrorsList.$__fields__ = ["view", "path", "element"];
    _ErrorsList.prototype.get$view = function(receiver) {
      return this.view;
    };
    _ErrorsList.prototype.get$path = function(receiver) {
      return this.path;
    };
    function _ErrorsList_updateWith_closure($this, error) {
      this.$this = $this;
      this.error = error;
      this.$deferredAction();
    }
    _ErrorsList_updateWith_closure.builtin$cls = "_ErrorsList_updateWith_closure";
    if (!("name" in _ErrorsList_updateWith_closure))
      _ErrorsList_updateWith_closure.name = "_ErrorsList_updateWith_closure";
    $desc = $collectedClasses$._ErrorsList_updateWith_closure[1];
    _ErrorsList_updateWith_closure.prototype = $desc;
    _ErrorsList_updateWith_closure.$__fields__ = ["$this", "error"];
    function PubManager(disposables) {
      this.disposables = disposables;
      this.$deferredAction();
    }
    PubManager.builtin$cls = "PubManager";
    if (!("name" in PubManager))
      PubManager.name = "PubManager";
    $desc = $collectedClasses$.PubManager[1];
    PubManager.prototype = $desc;
    PubManager.$__fields__ = ["disposables"];
    function PubManager_closure() {
      this.$deferredAction();
    }
    PubManager_closure.builtin$cls = "PubManager_closure";
    if (!("name" in PubManager_closure))
      PubManager_closure.name = "PubManager_closure";
    $desc = $collectedClasses$.PubManager_closure[1];
    PubManager_closure.prototype = $desc;
    PubManager_closure.$__fields__ = [];
    function PubManager_closure0() {
      this.$deferredAction();
    }
    PubManager_closure0.builtin$cls = "PubManager_closure0";
    if (!("name" in PubManager_closure0))
      PubManager_closure0.name = "PubManager_closure0";
    $desc = $collectedClasses$.PubManager_closure0[1];
    PubManager_closure0.prototype = $desc;
    PubManager_closure0.$__fields__ = [];
    function PubManager_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    PubManager_closure1.builtin$cls = "PubManager_closure1";
    if (!("name" in PubManager_closure1))
      PubManager_closure1.name = "PubManager_closure1";
    $desc = $collectedClasses$.PubManager_closure1[1];
    PubManager_closure1.prototype = $desc;
    PubManager_closure1.$__fields__ = ["$this"];
    function PubManager_closure2($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    PubManager_closure2.builtin$cls = "PubManager_closure2";
    if (!("name" in PubManager_closure2))
      PubManager_closure2.name = "PubManager_closure2";
    $desc = $collectedClasses$.PubManager_closure2[1];
    PubManager_closure2.prototype = $desc;
    PubManager_closure2.$__fields__ = ["$this"];
    function PubManager_closure3($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    PubManager_closure3.builtin$cls = "PubManager_closure3";
    if (!("name" in PubManager_closure3))
      PubManager_closure3.name = "PubManager_closure3";
    $desc = $collectedClasses$.PubManager_closure3[1];
    PubManager_closure3.prototype = $desc;
    PubManager_closure3.$__fields__ = ["$this"];
    function PubManager_closure4() {
      this.$deferredAction();
    }
    PubManager_closure4.builtin$cls = "PubManager_closure4";
    if (!("name" in PubManager_closure4))
      PubManager_closure4.name = "PubManager_closure4";
    $desc = $collectedClasses$.PubManager_closure4[1];
    PubManager_closure4.prototype = $desc;
    PubManager_closure4.$__fields__ = [];
    function PubManager_closure5() {
      this.$deferredAction();
    }
    PubManager_closure5.builtin$cls = "PubManager_closure5";
    if (!("name" in PubManager_closure5))
      PubManager_closure5.name = "PubManager_closure5";
    $desc = $collectedClasses$.PubManager_closure5[1];
    PubManager_closure5.prototype = $desc;
    PubManager_closure5.$__fields__ = [];
    function PubManager_closure6($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    PubManager_closure6.builtin$cls = "PubManager_closure6";
    if (!("name" in PubManager_closure6))
      PubManager_closure6.name = "PubManager_closure6";
    $desc = $collectedClasses$.PubManager_closure6[1];
    PubManager_closure6.prototype = $desc;
    PubManager_closure6.$__fields__ = ["$this"];
    function PubManager_closure7($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    PubManager_closure7.builtin$cls = "PubManager_closure7";
    if (!("name" in PubManager_closure7))
      PubManager_closure7.name = "PubManager_closure7";
    $desc = $collectedClasses$.PubManager_closure7[1];
    PubManager_closure7.prototype = $desc;
    PubManager_closure7.$__fields__ = ["$this"];
    function PubManager__addSdkCmd_closure(callback) {
      this.callback = callback;
      this.$deferredAction();
    }
    PubManager__addSdkCmd_closure.builtin$cls = "PubManager__addSdkCmd_closure";
    if (!("name" in PubManager__addSdkCmd_closure))
      PubManager__addSdkCmd_closure.name = "PubManager__addSdkCmd_closure";
    $desc = $collectedClasses$.PubManager__addSdkCmd_closure[1];
    PubManager__addSdkCmd_closure.prototype = $desc;
    PubManager__addSdkCmd_closure.$__fields__ = ["callback"];
    function PubManager__handleRun_closure(dir) {
      this.dir = dir;
      this.$deferredAction();
    }
    PubManager__handleRun_closure.builtin$cls = "PubManager__handleRun_closure";
    if (!("name" in PubManager__handleRun_closure))
      PubManager__handleRun_closure.name = "PubManager__handleRun_closure";
    $desc = $collectedClasses$.PubManager__handleRun_closure[1];
    PubManager__handleRun_closure.prototype = $desc;
    PubManager__handleRun_closure.$__fields__ = ["dir"];
    function PubManager__handleGlobalRun_closure(dir) {
      this.dir = dir;
      this.$deferredAction();
    }
    PubManager__handleGlobalRun_closure.builtin$cls = "PubManager__handleGlobalRun_closure";
    if (!("name" in PubManager__handleGlobalRun_closure))
      PubManager__handleGlobalRun_closure.name = "PubManager__handleGlobalRun_closure";
    $desc = $collectedClasses$.PubManager__handleGlobalRun_closure[1];
    PubManager__handleGlobalRun_closure.prototype = $desc;
    PubManager__handleGlobalRun_closure.$__fields__ = ["dir"];
    function PubManager__handleGlobalActivate_closure() {
      this.$deferredAction();
    }
    PubManager__handleGlobalActivate_closure.builtin$cls = "PubManager__handleGlobalActivate_closure";
    if (!("name" in PubManager__handleGlobalActivate_closure))
      PubManager__handleGlobalActivate_closure.name = "PubManager__handleGlobalActivate_closure";
    $desc = $collectedClasses$.PubManager__handleGlobalActivate_closure[1];
    PubManager__handleGlobalActivate_closure.prototype = $desc;
    PubManager__handleGlobalActivate_closure.$__fields__ = [];
    function PubManager__showRunPubDialog_closure(_box_0, project) {
      this._box_0 = _box_0;
      this.project = project;
      this.$deferredAction();
    }
    PubManager__showRunPubDialog_closure.builtin$cls = "PubManager__showRunPubDialog_closure";
    if (!("name" in PubManager__showRunPubDialog_closure))
      PubManager__showRunPubDialog_closure.name = "PubManager__showRunPubDialog_closure";
    $desc = $collectedClasses$.PubManager__showRunPubDialog_closure[1];
    PubManager__showRunPubDialog_closure.prototype = $desc;
    PubManager__showRunPubDialog_closure.$__fields__ = ["_box_0", "project"];
    function PubJob(path, pubCommand, _pubspecDir, name, _schedulingRule) {
      this.path = path;
      this.pubCommand = pubCommand;
      this._pubspecDir = _pubspecDir;
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    PubJob.builtin$cls = "PubJob";
    if (!("name" in PubJob))
      PubJob.name = "PubJob";
    $desc = $collectedClasses$.PubJob[1];
    PubJob.prototype = $desc;
    PubJob.$__fields__ = ["path", "pubCommand", "_pubspecDir", "name", "_schedulingRule"];
    PubJob.prototype.get$path = function(receiver) {
      return this.path;
    };
    function PubRunJob(path, title, args, isGlobal, _pubspecDir, name, _schedulingRule) {
      this.path = path;
      this.title = title;
      this.args = args;
      this.isGlobal = isGlobal;
      this._pubspecDir = _pubspecDir;
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    PubRunJob.builtin$cls = "PubRunJob";
    if (!("name" in PubRunJob))
      PubRunJob.name = "PubRunJob";
    $desc = $collectedClasses$.PubRunJob[1];
    PubRunJob.prototype = $desc;
    PubRunJob.$__fields__ = ["path", "title", "args", "isGlobal", "_pubspecDir", "name", "_schedulingRule"];
    PubRunJob.prototype.get$path = function(receiver) {
      return this.path;
    };
    PubRunJob.prototype.get$title = function(receiver) {
      return this.title;
    };
    function PubGlobalActivate(packageName, runQuiet, name, _schedulingRule) {
      this.packageName = packageName;
      this.runQuiet = runQuiet;
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    PubGlobalActivate.builtin$cls = "PubGlobalActivate";
    if (!("name" in PubGlobalActivate))
      PubGlobalActivate.name = "PubGlobalActivate";
    $desc = $collectedClasses$.PubGlobalActivate[1];
    PubGlobalActivate.prototype = $desc;
    PubGlobalActivate.$__fields__ = ["packageName", "runQuiet", "name", "_schedulingRule"];
    function PubContextCommand(onlyPubspec, label, command) {
      this.onlyPubspec = onlyPubspec;
      this.label = label;
      this.command = command;
      this.$deferredAction();
    }
    PubContextCommand.builtin$cls = "PubContextCommand";
    if (!("name" in PubContextCommand))
      PubContextCommand.name = "PubContextCommand";
    $desc = $collectedClasses$.PubContextCommand[1];
    PubContextCommand.prototype = $desc;
    PubContextCommand.$__fields__ = ["onlyPubspec", "label", "command"];
    function RebuildManager(disposables) {
      this.disposables = disposables;
      this.$deferredAction();
    }
    RebuildManager.builtin$cls = "RebuildManager";
    if (!("name" in RebuildManager))
      RebuildManager.name = "RebuildManager";
    $desc = $collectedClasses$.RebuildManager[1];
    RebuildManager.prototype = $desc;
    RebuildManager.$__fields__ = ["disposables"];
    function RebuildManager_closure() {
      this.$deferredAction();
    }
    RebuildManager_closure.builtin$cls = "RebuildManager_closure";
    if (!("name" in RebuildManager_closure))
      RebuildManager_closure.name = "RebuildManager_closure";
    $desc = $collectedClasses$.RebuildManager_closure[1];
    RebuildManager_closure.prototype = $desc;
    RebuildManager_closure.$__fields__ = [];
    function RebuildJob(name, _schedulingRule) {
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    RebuildJob.builtin$cls = "RebuildJob";
    if (!("name" in RebuildJob))
      RebuildJob.name = "RebuildJob";
    $desc = $collectedClasses$.RebuildJob[1];
    RebuildJob.prototype = $desc;
    RebuildJob.$__fields__ = ["name", "_schedulingRule"];
    function RebuildJob_run_closure() {
      this.$deferredAction();
    }
    RebuildJob_run_closure.builtin$cls = "RebuildJob_run_closure";
    if (!("name" in RebuildJob_run_closure))
      RebuildJob_run_closure.name = "RebuildJob_run_closure";
    $desc = $collectedClasses$.RebuildJob_run_closure[1];
    RebuildJob_run_closure.prototype = $desc;
    RebuildJob_run_closure.$__fields__ = [];
    function RebuildJob_run_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    RebuildJob_run_closure0.builtin$cls = "RebuildJob_run_closure0";
    if (!("name" in RebuildJob_run_closure0))
      RebuildJob_run_closure0.name = "RebuildJob_run_closure0";
    $desc = $collectedClasses$.RebuildJob_run_closure0[1];
    RebuildJob_run_closure0.prototype = $desc;
    RebuildJob_run_closure0.$__fields__ = ["$this"];
    function RebuildJob_run_closure1() {
      this.$deferredAction();
    }
    RebuildJob_run_closure1.builtin$cls = "RebuildJob_run_closure1";
    if (!("name" in RebuildJob_run_closure1))
      RebuildJob_run_closure1.name = "RebuildJob_run_closure1";
    $desc = $collectedClasses$.RebuildJob_run_closure1[1];
    RebuildJob_run_closure1.prototype = $desc;
    RebuildJob_run_closure1.$__fields__ = [];
    function RebuildJob_run__closure0() {
      this.$deferredAction();
    }
    RebuildJob_run__closure0.builtin$cls = "RebuildJob_run__closure0";
    if (!("name" in RebuildJob_run__closure0))
      RebuildJob_run__closure0.name = "RebuildJob_run__closure0";
    $desc = $collectedClasses$.RebuildJob_run__closure0[1];
    RebuildJob_run__closure0.prototype = $desc;
    RebuildJob_run__closure0.$__fields__ = [];
    function RebuildJob_run_closure2() {
      this.$deferredAction();
    }
    RebuildJob_run_closure2.builtin$cls = "RebuildJob_run_closure2";
    if (!("name" in RebuildJob_run_closure2))
      RebuildJob_run_closure2.name = "RebuildJob_run_closure2";
    $desc = $collectedClasses$.RebuildJob_run_closure2[1];
    RebuildJob_run_closure2.prototype = $desc;
    RebuildJob_run_closure2.$__fields__ = [];
    function RebuildJob_run__closure() {
      this.$deferredAction();
    }
    RebuildJob_run__closure.builtin$cls = "RebuildJob_run__closure";
    if (!("name" in RebuildJob_run__closure))
      RebuildJob_run__closure.name = "RebuildJob_run__closure";
    $desc = $collectedClasses$.RebuildJob_run__closure[1];
    RebuildJob_run__closure.prototype = $desc;
    RebuildJob_run__closure.$__fields__ = [];
    function RebuildJob__runBuild_closure(projName) {
      this.projName = projName;
      this.$deferredAction();
    }
    RebuildJob__runBuild_closure.builtin$cls = "RebuildJob__runBuild_closure";
    if (!("name" in RebuildJob__runBuild_closure))
      RebuildJob__runBuild_closure.name = "RebuildJob__runBuild_closure";
    $desc = $collectedClasses$.RebuildJob__runBuild_closure[1];
    RebuildJob__runBuild_closure.prototype = $desc;
    RebuildJob__runBuild_closure.$__fields__ = ["projName"];
    function RebuildJob__runBuild_closure0() {
      this.$deferredAction();
    }
    RebuildJob__runBuild_closure0.builtin$cls = "RebuildJob__runBuild_closure0";
    if (!("name" in RebuildJob__runBuild_closure0))
      RebuildJob__runBuild_closure0.name = "RebuildJob__runBuild_closure0";
    $desc = $collectedClasses$.RebuildJob__runBuild_closure0[1];
    RebuildJob__runBuild_closure0.prototype = $desc;
    RebuildJob__runBuild_closure0.$__fields__ = [];
    function RebuildJob__runBuild_closure1() {
      this.$deferredAction();
    }
    RebuildJob__runBuild_closure1.builtin$cls = "RebuildJob__runBuild_closure1";
    if (!("name" in RebuildJob__runBuild_closure1))
      RebuildJob__runBuild_closure1.name = "RebuildJob__runBuild_closure1";
    $desc = $collectedClasses$.RebuildJob__runBuild_closure1[1];
    RebuildJob__runBuild_closure1.prototype = $desc;
    RebuildJob__runBuild_closure1.$__fields__ = [];
    function StatusViewManager(disposables) {
      this.disposables = disposables;
      this.$deferredAction();
    }
    StatusViewManager.builtin$cls = "StatusViewManager";
    if (!("name" in StatusViewManager))
      StatusViewManager.name = "StatusViewManager";
    $desc = $collectedClasses$.StatusViewManager[1];
    StatusViewManager.prototype = $desc;
    StatusViewManager.$__fields__ = ["disposables"];
    function StatusViewManager_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    StatusViewManager_closure.builtin$cls = "StatusViewManager_closure";
    if (!("name" in StatusViewManager_closure))
      StatusViewManager_closure.name = "StatusViewManager_closure";
    $desc = $collectedClasses$.StatusViewManager_closure[1];
    StatusViewManager_closure.prototype = $desc;
    StatusViewManager_closure.$__fields__ = ["$this"];
    function StatusViewManager_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    StatusViewManager_closure0.builtin$cls = "StatusViewManager_closure0";
    if (!("name" in StatusViewManager_closure0))
      StatusViewManager_closure0.name = "StatusViewManager_closure0";
    $desc = $collectedClasses$.StatusViewManager_closure0[1];
    StatusViewManager_closure0.prototype = $desc;
    StatusViewManager_closure0.$__fields__ = ["$this"];
    function StatusViewManager_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    StatusViewManager_closure1.builtin$cls = "StatusViewManager_closure1";
    if (!("name" in StatusViewManager_closure1))
      StatusViewManager_closure1.name = "StatusViewManager_closure1";
    $desc = $collectedClasses$.StatusViewManager_closure1[1];
    StatusViewManager_closure1.prototype = $desc;
    StatusViewManager_closure1.$__fields__ = ["$this"];
    function StatusView(subs, _sections, _diagnosticTimer, root, toolbar, content, tabElement, _closeButton, group) {
      this.subs = subs;
      this._sections = _sections;
      this._diagnosticTimer = _diagnosticTimer;
      this.root = root;
      this.toolbar = toolbar;
      this.content = content;
      this.tabElement = tabElement;
      this._closeButton = _closeButton;
      this.group = group;
      this.$deferredAction();
    }
    StatusView.builtin$cls = "StatusView";
    if (!("name" in StatusView))
      StatusView.name = "StatusView";
    $desc = $collectedClasses$.StatusView[1];
    StatusView.prototype = $desc;
    StatusView.$__fields__ = ["subs", "_sections", "_diagnosticTimer", "root", "toolbar", "content", "tabElement", "_closeButton", "group"];
    function StatusView_closure(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    StatusView_closure.builtin$cls = "StatusView_closure";
    if (!("name" in StatusView_closure))
      StatusView_closure.name = "StatusView_closure";
    $desc = $collectedClasses$.StatusView_closure[1];
    StatusView_closure.prototype = $desc;
    StatusView_closure.$__fields__ = ["_box_0"];
    function StatusView__registerSection_closure(aRef) {
      this.aRef = aRef;
      this.$deferredAction();
    }
    StatusView__registerSection_closure.builtin$cls = "StatusView__registerSection_closure";
    if (!("name" in StatusView__registerSection_closure))
      StatusView__registerSection_closure.name = "StatusView__registerSection_closure";
    $desc = $collectedClasses$.StatusView__registerSection_closure[1];
    StatusView__registerSection_closure.prototype = $desc;
    StatusView__registerSection_closure.$__fields__ = ["aRef"];
    function StatusView__createPluginSection_closure(header) {
      this.header = header;
      this.$deferredAction();
    }
    StatusView__createPluginSection_closure.builtin$cls = "StatusView__createPluginSection_closure";
    if (!("name" in StatusView__createPluginSection_closure))
      StatusView__createPluginSection_closure.name = "StatusView__createPluginSection_closure";
    $desc = $collectedClasses$.StatusView__createPluginSection_closure[1];
    StatusView__createPluginSection_closure.prototype = $desc;
    StatusView__createPluginSection_closure.$__fields__ = ["header"];
    function StatusView__createPluginSection_closure0() {
      this.$deferredAction();
    }
    StatusView__createPluginSection_closure0.builtin$cls = "StatusView__createPluginSection_closure0";
    if (!("name" in StatusView__createPluginSection_closure0))
      StatusView__createPluginSection_closure0.name = "StatusView__createPluginSection_closure0";
    $desc = $collectedClasses$.StatusView__createPluginSection_closure0[1];
    StatusView__createPluginSection_closure0.prototype = $desc;
    StatusView__createPluginSection_closure0.$__fields__ = [];
    function StatusView__createPluginSection_closure1() {
      this.$deferredAction();
    }
    StatusView__createPluginSection_closure1.builtin$cls = "StatusView__createPluginSection_closure1";
    if (!("name" in StatusView__createPluginSection_closure1))
      StatusView__createPluginSection_closure1.name = "StatusView__createPluginSection_closure1";
    $desc = $collectedClasses$.StatusView__createPluginSection_closure1[1];
    StatusView__createPluginSection_closure1.prototype = $desc;
    StatusView__createPluginSection_closure1.$__fields__ = [];
    function StatusView__createPluginSection_closure2() {
      this.$deferredAction();
    }
    StatusView__createPluginSection_closure2.builtin$cls = "StatusView__createPluginSection_closure2";
    if (!("name" in StatusView__createPluginSection_closure2))
      StatusView__createPluginSection_closure2.name = "StatusView__createPluginSection_closure2";
    $desc = $collectedClasses$.StatusView__createPluginSection_closure2[1];
    StatusView__createPluginSection_closure2.prototype = $desc;
    StatusView__createPluginSection_closure2.$__fields__ = [];
    function StatusView__createPluginSection__closure() {
      this.$deferredAction();
    }
    StatusView__createPluginSection__closure.builtin$cls = "StatusView__createPluginSection__closure";
    if (!("name" in StatusView__createPluginSection__closure))
      StatusView__createPluginSection__closure.name = "StatusView__createPluginSection__closure";
    $desc = $collectedClasses$.StatusView__createPluginSection__closure[1];
    StatusView__createPluginSection__closure.prototype = $desc;
    StatusView__createPluginSection__closure.$__fields__ = [];
    function StatusView__createDartSdkSection_closure(_box_0, header) {
      this._box_0 = _box_0;
      this.header = header;
      this.$deferredAction();
    }
    StatusView__createDartSdkSection_closure.builtin$cls = "StatusView__createDartSdkSection_closure";
    if (!("name" in StatusView__createDartSdkSection_closure))
      StatusView__createDartSdkSection_closure.name = "StatusView__createDartSdkSection_closure";
    $desc = $collectedClasses$.StatusView__createDartSdkSection_closure[1];
    StatusView__createDartSdkSection_closure.prototype = $desc;
    StatusView__createDartSdkSection_closure.$__fields__ = ["_box_0", "header"];
    function StatusView__createDartSdkSection__closure(header) {
      this.header = header;
      this.$deferredAction();
    }
    StatusView__createDartSdkSection__closure.builtin$cls = "StatusView__createDartSdkSection__closure";
    if (!("name" in StatusView__createDartSdkSection__closure))
      StatusView__createDartSdkSection__closure.name = "StatusView__createDartSdkSection__closure";
    $desc = $collectedClasses$.StatusView__createDartSdkSection__closure[1];
    StatusView__createDartSdkSection__closure.prototype = $desc;
    StatusView__createDartSdkSection__closure.$__fields__ = ["header"];
    function StatusView__createDartSdkSection_closure0() {
      this.$deferredAction();
    }
    StatusView__createDartSdkSection_closure0.builtin$cls = "StatusView__createDartSdkSection_closure0";
    if (!("name" in StatusView__createDartSdkSection_closure0))
      StatusView__createDartSdkSection_closure0.name = "StatusView__createDartSdkSection_closure0";
    $desc = $collectedClasses$.StatusView__createDartSdkSection_closure0[1];
    StatusView__createDartSdkSection_closure0.prototype = $desc;
    StatusView__createDartSdkSection_closure0.$__fields__ = [];
    function StatusView__createAnalysisServerSection_closure(_box_0, header) {
      this._box_0 = _box_0;
      this.header = header;
      this.$deferredAction();
    }
    StatusView__createAnalysisServerSection_closure.builtin$cls = "StatusView__createAnalysisServerSection_closure";
    if (!("name" in StatusView__createAnalysisServerSection_closure))
      StatusView__createAnalysisServerSection_closure.name = "StatusView__createAnalysisServerSection_closure";
    $desc = $collectedClasses$.StatusView__createAnalysisServerSection_closure[1];
    StatusView__createAnalysisServerSection_closure.prototype = $desc;
    StatusView__createAnalysisServerSection_closure.$__fields__ = ["_box_0", "header"];
    function StatusView__createAnalysisServerSection__closure() {
      this.$deferredAction();
    }
    StatusView__createAnalysisServerSection__closure.builtin$cls = "StatusView__createAnalysisServerSection__closure";
    if (!("name" in StatusView__createAnalysisServerSection__closure))
      StatusView__createAnalysisServerSection__closure.name = "StatusView__createAnalysisServerSection__closure";
    $desc = $collectedClasses$.StatusView__createAnalysisServerSection__closure[1];
    StatusView__createAnalysisServerSection__closure.prototype = $desc;
    StatusView__createAnalysisServerSection__closure.$__fields__ = [];
    function StatusView__createAnalysisServerSection__closure0(_box_0, header) {
      this._box_0 = _box_0;
      this.header = header;
      this.$deferredAction();
    }
    StatusView__createAnalysisServerSection__closure0.builtin$cls = "StatusView__createAnalysisServerSection__closure0";
    if (!("name" in StatusView__createAnalysisServerSection__closure0))
      StatusView__createAnalysisServerSection__closure0.name = "StatusView__createAnalysisServerSection__closure0";
    $desc = $collectedClasses$.StatusView__createAnalysisServerSection__closure0[1];
    StatusView__createAnalysisServerSection__closure0.prototype = $desc;
    StatusView__createAnalysisServerSection__closure0.$__fields__ = ["_box_0", "header"];
    function StatusView__createAnalysisServerSection_closure0(strobeIncoming) {
      this.strobeIncoming = strobeIncoming;
      this.$deferredAction();
    }
    StatusView__createAnalysisServerSection_closure0.builtin$cls = "StatusView__createAnalysisServerSection_closure0";
    if (!("name" in StatusView__createAnalysisServerSection_closure0))
      StatusView__createAnalysisServerSection_closure0.name = "StatusView__createAnalysisServerSection_closure0";
    $desc = $collectedClasses$.StatusView__createAnalysisServerSection_closure0[1];
    StatusView__createAnalysisServerSection_closure0.prototype = $desc;
    StatusView__createAnalysisServerSection_closure0.$__fields__ = ["strobeIncoming"];
    function StatusView__createAnalysisServerSection_closure1(strobeOutgoing) {
      this.strobeOutgoing = strobeOutgoing;
      this.$deferredAction();
    }
    StatusView__createAnalysisServerSection_closure1.builtin$cls = "StatusView__createAnalysisServerSection_closure1";
    if (!("name" in StatusView__createAnalysisServerSection_closure1))
      StatusView__createAnalysisServerSection_closure1.name = "StatusView__createAnalysisServerSection_closure1";
    $desc = $collectedClasses$.StatusView__createAnalysisServerSection_closure1[1];
    StatusView__createAnalysisServerSection_closure1.prototype = $desc;
    StatusView__createAnalysisServerSection_closure1.$__fields__ = ["strobeOutgoing"];
    function StatusView__createAnalysisServerSection_closure2(_box_0, update) {
      this._box_0 = _box_0;
      this.update = update;
      this.$deferredAction();
    }
    StatusView__createAnalysisServerSection_closure2.builtin$cls = "StatusView__createAnalysisServerSection_closure2";
    if (!("name" in StatusView__createAnalysisServerSection_closure2))
      StatusView__createAnalysisServerSection_closure2.name = "StatusView__createAnalysisServerSection_closure2";
    $desc = $collectedClasses$.StatusView__createAnalysisServerSection_closure2[1];
    StatusView__createAnalysisServerSection_closure2.prototype = $desc;
    StatusView__createAnalysisServerSection_closure2.$__fields__ = ["_box_0", "update"];
    function StatusView__createDiagnostics_closure0(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    StatusView__createDiagnostics_closure0.builtin$cls = "StatusView__createDiagnostics_closure0";
    if (!("name" in StatusView__createDiagnostics_closure0))
      StatusView__createDiagnostics_closure0.name = "StatusView__createDiagnostics_closure0";
    $desc = $collectedClasses$.StatusView__createDiagnostics_closure0[1];
    StatusView__createDiagnostics_closure0.prototype = $desc;
    StatusView__createDiagnostics_closure0.$__fields__ = ["_box_0"];
    function StatusView__createDiagnostics__closure0() {
      this.$deferredAction();
    }
    StatusView__createDiagnostics__closure0.builtin$cls = "StatusView__createDiagnostics__closure0";
    if (!("name" in StatusView__createDiagnostics__closure0))
      StatusView__createDiagnostics__closure0.name = "StatusView__createDiagnostics__closure0";
    $desc = $collectedClasses$.StatusView__createDiagnostics__closure0[1];
    StatusView__createDiagnostics__closure0.prototype = $desc;
    StatusView__createDiagnostics__closure0.$__fields__ = [];
    function StatusView__createDiagnostics__closure1() {
      this.$deferredAction();
    }
    StatusView__createDiagnostics__closure1.builtin$cls = "StatusView__createDiagnostics__closure1";
    if (!("name" in StatusView__createDiagnostics__closure1))
      StatusView__createDiagnostics__closure1.name = "StatusView__createDiagnostics__closure1";
    $desc = $collectedClasses$.StatusView__createDiagnostics__closure1[1];
    StatusView__createDiagnostics__closure1.prototype = $desc;
    StatusView__createDiagnostics__closure1.$__fields__ = [];
    function StatusView__createDiagnostics__closure2() {
      this.$deferredAction();
    }
    StatusView__createDiagnostics__closure2.builtin$cls = "StatusView__createDiagnostics__closure2";
    if (!("name" in StatusView__createDiagnostics__closure2))
      StatusView__createDiagnostics__closure2.name = "StatusView__createDiagnostics__closure2";
    $desc = $collectedClasses$.StatusView__createDiagnostics__closure2[1];
    StatusView__createDiagnostics__closure2.prototype = $desc;
    StatusView__createDiagnostics__closure2.$__fields__ = [];
    function StatusView__createDiagnostics__closure3() {
      this.$deferredAction();
    }
    StatusView__createDiagnostics__closure3.builtin$cls = "StatusView__createDiagnostics__closure3";
    if (!("name" in StatusView__createDiagnostics__closure3))
      StatusView__createDiagnostics__closure3.name = "StatusView__createDiagnostics__closure3";
    $desc = $collectedClasses$.StatusView__createDiagnostics__closure3[1];
    StatusView__createDiagnostics__closure3.prototype = $desc;
    StatusView__createDiagnostics__closure3.$__fields__ = [];
    function StatusView__createDiagnostics_closure($this, updateUI) {
      this.$this = $this;
      this.updateUI = updateUI;
      this.$deferredAction();
    }
    StatusView__createDiagnostics_closure.builtin$cls = "StatusView__createDiagnostics_closure";
    if (!("name" in StatusView__createDiagnostics_closure))
      StatusView__createDiagnostics_closure.name = "StatusView__createDiagnostics_closure";
    $desc = $collectedClasses$.StatusView__createDiagnostics_closure[1];
    StatusView__createDiagnostics_closure.prototype = $desc;
    StatusView__createDiagnostics_closure.$__fields__ = ["$this", "updateUI"];
    function StatusView__createDiagnostics__closure($this, updateUI) {
      this.$this = $this;
      this.updateUI = updateUI;
      this.$deferredAction();
    }
    StatusView__createDiagnostics__closure.builtin$cls = "StatusView__createDiagnostics__closure";
    if (!("name" in StatusView__createDiagnostics__closure))
      StatusView__createDiagnostics__closure.name = "StatusView__createDiagnostics__closure";
    $desc = $collectedClasses$.StatusView__createDiagnostics__closure[1];
    StatusView__createDiagnostics__closure.prototype = $desc;
    StatusView__createDiagnostics__closure.$__fields__ = ["$this", "updateUI"];
    function StatusView__createDiagnostics___closure(updateUI) {
      this.updateUI = updateUI;
      this.$deferredAction();
    }
    StatusView__createDiagnostics___closure.builtin$cls = "StatusView__createDiagnostics___closure";
    if (!("name" in StatusView__createDiagnostics___closure))
      StatusView__createDiagnostics___closure.name = "StatusView__createDiagnostics___closure";
    $desc = $collectedClasses$.StatusView__createDiagnostics___closure[1];
    StatusView__createDiagnostics___closure.prototype = $desc;
    StatusView__createDiagnostics___closure.$__fields__ = ["updateUI"];
    function StatusView__createDiagnostics___closure0($this, updateUI) {
      this.$this = $this;
      this.updateUI = updateUI;
      this.$deferredAction();
    }
    StatusView__createDiagnostics___closure0.builtin$cls = "StatusView__createDiagnostics___closure0";
    if (!("name" in StatusView__createDiagnostics___closure0))
      StatusView__createDiagnostics___closure0.name = "StatusView__createDiagnostics___closure0";
    $desc = $collectedClasses$.StatusView__createDiagnostics___closure0[1];
    StatusView__createDiagnostics___closure0.prototype = $desc;
    StatusView__createDiagnostics___closure0.$__fields__ = ["$this", "updateUI"];
    function StatusView__createAnalyticsSection_closure(_key, check) {
      this._key = _key;
      this.check = check;
      this.$deferredAction();
    }
    StatusView__createAnalyticsSection_closure.builtin$cls = "StatusView__createAnalyticsSection_closure";
    if (!("name" in StatusView__createAnalyticsSection_closure))
      StatusView__createAnalyticsSection_closure.name = "StatusView__createAnalyticsSection_closure";
    $desc = $collectedClasses$.StatusView__createAnalyticsSection_closure[1];
    StatusView__createAnalyticsSection_closure.prototype = $desc;
    StatusView__createAnalyticsSection_closure.$__fields__ = ["_key", "check"];
    function StatusView__createAnalyticsSection_closure0(_key, check) {
      this._key = _key;
      this.check = check;
      this.$deferredAction();
    }
    StatusView__createAnalyticsSection_closure0.builtin$cls = "StatusView__createAnalyticsSection_closure0";
    if (!("name" in StatusView__createAnalyticsSection_closure0))
      StatusView__createAnalyticsSection_closure0.name = "StatusView__createAnalyticsSection_closure0";
    $desc = $collectedClasses$.StatusView__createAnalyticsSection_closure0[1];
    StatusView__createAnalyticsSection_closure0.prototype = $desc;
    StatusView__createAnalyticsSection_closure0.$__fields__ = ["_key", "check"];
    function StatusView_showSection_closure(e) {
      this.e = e;
      this.$deferredAction();
    }
    StatusView_showSection_closure.builtin$cls = "StatusView_showSection_closure";
    if (!("name" in StatusView_showSection_closure))
      StatusView_showSection_closure.name = "StatusView_showSection_closure";
    $desc = $collectedClasses$.StatusView_showSection_closure[1];
    StatusView_showSection_closure.prototype = $desc;
    StatusView_showSection_closure.$__fields__ = ["e"];
    function StatusView__handleSdkBrowse_closure() {
      this.$deferredAction();
    }
    StatusView__handleSdkBrowse_closure.builtin$cls = "StatusView__handleSdkBrowse_closure";
    if (!("name" in StatusView__handleSdkBrowse_closure))
      StatusView__handleSdkBrowse_closure.name = "StatusView__handleSdkBrowse_closure";
    $desc = $collectedClasses$.StatusView__handleSdkBrowse_closure[1];
    StatusView__handleSdkBrowse_closure.prototype = $desc;
    StatusView__handleSdkBrowse_closure.$__fields__ = [];
    function StatusHeader(title, subtitle, toolbar) {
      this.title = title;
      this.subtitle = subtitle;
      this.toolbar = toolbar;
      this.$deferredAction();
    }
    StatusHeader.builtin$cls = "StatusHeader";
    if (!("name" in StatusHeader))
      StatusHeader.name = "StatusHeader";
    $desc = $collectedClasses$.StatusHeader[1];
    StatusHeader.prototype = $desc;
    StatusHeader.$__fields__ = ["title", "subtitle", "toolbar"];
    StatusHeader.prototype.get$title = function(receiver) {
      return this.title;
    };
    StatusHeader.prototype.set$title = function(receiver, v) {
      return this.title = v;
    };
    StatusHeader.prototype.get$subtitle = function() {
      return this.subtitle;
    };
    function _getPlatformVersions_closure() {
      this.$deferredAction();
    }
    _getPlatformVersions_closure.builtin$cls = "_getPlatformVersions_closure";
    if (!("name" in _getPlatformVersions_closure))
      _getPlatformVersions_closure.name = "_getPlatformVersions_closure";
    $desc = $collectedClasses$._getPlatformVersions_closure[1];
    _getPlatformVersions_closure.prototype = $desc;
    _getPlatformVersions_closure.$__fields__ = [];
    function StatusDisplay(_status_display$_disposables, _status_display$_subscription, dialog, _statusbarTile, _showTimer, _hideTimer) {
      this._status_display$_disposables = _status_display$_disposables;
      this._status_display$_subscription = _status_display$_subscription;
      this.dialog = dialog;
      this._statusbarTile = _statusbarTile;
      this._showTimer = _showTimer;
      this._hideTimer = _hideTimer;
      this.$deferredAction();
    }
    StatusDisplay.builtin$cls = "StatusDisplay";
    if (!("name" in StatusDisplay))
      StatusDisplay.name = "StatusDisplay";
    $desc = $collectedClasses$.StatusDisplay[1];
    StatusDisplay.prototype = $desc;
    StatusDisplay.$__fields__ = ["_status_display$_disposables", "_status_display$_subscription", "dialog", "_statusbarTile", "_showTimer", "_hideTimer"];
    function StatusDisplay_closure(_box_0, $this, statusElement) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.statusElement = statusElement;
      this.$deferredAction();
    }
    StatusDisplay_closure.builtin$cls = "StatusDisplay_closure";
    if (!("name" in StatusDisplay_closure))
      StatusDisplay_closure.name = "StatusDisplay_closure";
    $desc = $collectedClasses$.StatusDisplay_closure[1];
    StatusDisplay_closure.prototype = $desc;
    StatusDisplay_closure.$__fields__ = ["_box_0", "$this", "statusElement"];
    function StatusDisplay__closure($this, statusElement) {
      this.$this = $this;
      this.statusElement = statusElement;
      this.$deferredAction();
    }
    StatusDisplay__closure.builtin$cls = "StatusDisplay__closure";
    if (!("name" in StatusDisplay__closure))
      StatusDisplay__closure.name = "StatusDisplay__closure";
    $desc = $collectedClasses$.StatusDisplay__closure[1];
    StatusDisplay__closure.prototype = $desc;
    StatusDisplay__closure.$__fields__ = ["$this", "statusElement"];
    function StatusDisplay__closure0(_box_0, $this, statusElement) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.statusElement = statusElement;
      this.$deferredAction();
    }
    StatusDisplay__closure0.builtin$cls = "StatusDisplay__closure0";
    if (!("name" in StatusDisplay__closure0))
      StatusDisplay__closure0.name = "StatusDisplay__closure0";
    $desc = $collectedClasses$.StatusDisplay__closure0[1];
    StatusDisplay__closure0.prototype = $desc;
    StatusDisplay__closure0.$__fields__ = ["_box_0", "$this", "statusElement"];
    function StatusDisplay_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    StatusDisplay_closure0.builtin$cls = "StatusDisplay_closure0";
    if (!("name" in StatusDisplay_closure0))
      StatusDisplay_closure0.name = "StatusDisplay_closure0";
    $desc = $collectedClasses$.StatusDisplay_closure0[1];
    StatusDisplay_closure0.prototype = $desc;
    StatusDisplay_closure0.$__fields__ = ["$this"];
    function JobsDialog(dialog, _status_display$_listGroup) {
      this.dialog = dialog;
      this._status_display$_listGroup = _status_display$_listGroup;
      this.$deferredAction();
    }
    JobsDialog.builtin$cls = "JobsDialog";
    if (!("name" in JobsDialog))
      JobsDialog.name = "JobsDialog";
    $desc = $collectedClasses$.JobsDialog[1];
    JobsDialog.prototype = $desc;
    JobsDialog.$__fields__ = ["dialog", "_status_display$_listGroup"];
    function TestManager(disposables, runners) {
      this.disposables = disposables;
      this.runners = runners;
      this.$deferredAction();
    }
    TestManager.builtin$cls = "TestManager";
    if (!("name" in TestManager))
      TestManager.name = "TestManager";
    $desc = $collectedClasses$.TestManager[1];
    TestManager.prototype = $desc;
    TestManager.$__fields__ = ["disposables", "runners"];
    function TestManager_isRunnableTest_closure(_box_0, project) {
      this._box_0 = _box_0;
      this.project = project;
      this.$deferredAction();
    }
    TestManager_isRunnableTest_closure.builtin$cls = "TestManager_isRunnableTest_closure";
    if (!("name" in TestManager_isRunnableTest_closure))
      TestManager_isRunnableTest_closure.name = "TestManager_isRunnableTest_closure";
    $desc = $collectedClasses$.TestManager_isRunnableTest_closure[1];
    TestManager_isRunnableTest_closure.prototype = $desc;
    TestManager_isRunnableTest_closure.$__fields__ = ["_box_0", "project"];
    function TestManager__createTest_closure(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    TestManager__createTest_closure.builtin$cls = "TestManager__createTest_closure";
    if (!("name" in TestManager__createTest_closure))
      TestManager__createTest_closure.name = "TestManager__createTest_closure";
    $desc = $collectedClasses$.TestManager__createTest_closure[1];
    TestManager__createTest_closure.prototype = $desc;
    TestManager__createTest_closure.$__fields__ = ["_box_0", "$this"];
    function TestRunner() {
      this.$deferredAction();
    }
    TestRunner.builtin$cls = "TestRunner";
    if (!("name" in TestRunner))
      TestRunner.name = "TestRunner";
    $desc = $collectedClasses$.TestRunner[1];
    TestRunner.prototype = $desc;
    TestRunner.$__fields__ = [];
    function FlutterTestRunner() {
      this.$deferredAction();
    }
    FlutterTestRunner.builtin$cls = "FlutterTestRunner";
    if (!("name" in FlutterTestRunner))
      FlutterTestRunner.name = "FlutterTestRunner";
    $desc = $collectedClasses$.FlutterTestRunner[1];
    FlutterTestRunner.prototype = $desc;
    FlutterTestRunner.$__fields__ = [];
    function FlutterTestRunner_run_closure(runner) {
      this.runner = runner;
      this.$deferredAction();
    }
    FlutterTestRunner_run_closure.builtin$cls = "FlutterTestRunner_run_closure";
    if (!("name" in FlutterTestRunner_run_closure))
      FlutterTestRunner_run_closure.name = "FlutterTestRunner_run_closure";
    $desc = $collectedClasses$.FlutterTestRunner_run_closure[1];
    FlutterTestRunner_run_closure.prototype = $desc;
    FlutterTestRunner_run_closure.$__fields__ = ["runner"];
    function FlutterTestRunner_run_closure0(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    FlutterTestRunner_run_closure0.builtin$cls = "FlutterTestRunner_run_closure0";
    if (!("name" in FlutterTestRunner_run_closure0))
      FlutterTestRunner_run_closure0.name = "FlutterTestRunner_run_closure0";
    $desc = $collectedClasses$.FlutterTestRunner_run_closure0[1];
    FlutterTestRunner_run_closure0.prototype = $desc;
    FlutterTestRunner_run_closure0.$__fields__ = ["launch"];
    function FlutterTestRunner_run_closure1(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    FlutterTestRunner_run_closure1.builtin$cls = "FlutterTestRunner_run_closure1";
    if (!("name" in FlutterTestRunner_run_closure1))
      FlutterTestRunner_run_closure1.name = "FlutterTestRunner_run_closure1";
    $desc = $collectedClasses$.FlutterTestRunner_run_closure1[1];
    FlutterTestRunner_run_closure1.prototype = $desc;
    FlutterTestRunner_run_closure1.$__fields__ = ["launch"];
    function FlutterTestRunner_run_closure2(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    FlutterTestRunner_run_closure2.builtin$cls = "FlutterTestRunner_run_closure2";
    if (!("name" in FlutterTestRunner_run_closure2))
      FlutterTestRunner_run_closure2.name = "FlutterTestRunner_run_closure2";
    $desc = $collectedClasses$.FlutterTestRunner_run_closure2[1];
    FlutterTestRunner_run_closure2.prototype = $desc;
    FlutterTestRunner_run_closure2.$__fields__ = ["launch"];
    function TestPackageTestRunner() {
      this.$deferredAction();
    }
    TestPackageTestRunner.builtin$cls = "TestPackageTestRunner";
    if (!("name" in TestPackageTestRunner))
      TestPackageTestRunner.name = "TestPackageTestRunner";
    $desc = $collectedClasses$.TestPackageTestRunner[1];
    TestPackageTestRunner.prototype = $desc;
    TestPackageTestRunner.$__fields__ = [];
    function TestPackageTestRunner_run_closure(runner) {
      this.runner = runner;
      this.$deferredAction();
    }
    TestPackageTestRunner_run_closure.builtin$cls = "TestPackageTestRunner_run_closure";
    if (!("name" in TestPackageTestRunner_run_closure))
      TestPackageTestRunner_run_closure.name = "TestPackageTestRunner_run_closure";
    $desc = $collectedClasses$.TestPackageTestRunner_run_closure[1];
    TestPackageTestRunner_run_closure.prototype = $desc;
    TestPackageTestRunner_run_closure.$__fields__ = ["runner"];
    function TestPackageTestRunner_run_closure0(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    TestPackageTestRunner_run_closure0.builtin$cls = "TestPackageTestRunner_run_closure0";
    if (!("name" in TestPackageTestRunner_run_closure0))
      TestPackageTestRunner_run_closure0.name = "TestPackageTestRunner_run_closure0";
    $desc = $collectedClasses$.TestPackageTestRunner_run_closure0[1];
    TestPackageTestRunner_run_closure0.prototype = $desc;
    TestPackageTestRunner_run_closure0.$__fields__ = ["launch"];
    function TestPackageTestRunner_run_closure1(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    TestPackageTestRunner_run_closure1.builtin$cls = "TestPackageTestRunner_run_closure1";
    if (!("name" in TestPackageTestRunner_run_closure1))
      TestPackageTestRunner_run_closure1.name = "TestPackageTestRunner_run_closure1";
    $desc = $collectedClasses$.TestPackageTestRunner_run_closure1[1];
    TestPackageTestRunner_run_closure1.prototype = $desc;
    TestPackageTestRunner_run_closure1.$__fields__ = ["launch"];
    function TestPackageTestRunner_run_closure2(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    TestPackageTestRunner_run_closure2.builtin$cls = "TestPackageTestRunner_run_closure2";
    if (!("name" in TestPackageTestRunner_run_closure2))
      TestPackageTestRunner_run_closure2.name = "TestPackageTestRunner_run_closure2";
    $desc = $collectedClasses$.TestPackageTestRunner_run_closure2[1];
    TestPackageTestRunner_run_closure2.prototype = $desc;
    TestPackageTestRunner_run_closure2.$__fields__ = ["launch"];
    function CliTestRunner() {
      this.$deferredAction();
    }
    CliTestRunner.builtin$cls = "CliTestRunner";
    if (!("name" in CliTestRunner))
      CliTestRunner.name = "CliTestRunner";
    $desc = $collectedClasses$.CliTestRunner[1];
    CliTestRunner.prototype = $desc;
    CliTestRunner.$__fields__ = [];
    function CliTestRunner_run_closure(runner) {
      this.runner = runner;
      this.$deferredAction();
    }
    CliTestRunner_run_closure.builtin$cls = "CliTestRunner_run_closure";
    if (!("name" in CliTestRunner_run_closure))
      CliTestRunner_run_closure.name = "CliTestRunner_run_closure";
    $desc = $collectedClasses$.CliTestRunner_run_closure[1];
    CliTestRunner_run_closure.prototype = $desc;
    CliTestRunner_run_closure.$__fields__ = ["runner"];
    function CliTestRunner_run_closure0(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    CliTestRunner_run_closure0.builtin$cls = "CliTestRunner_run_closure0";
    if (!("name" in CliTestRunner_run_closure0))
      CliTestRunner_run_closure0.name = "CliTestRunner_run_closure0";
    $desc = $collectedClasses$.CliTestRunner_run_closure0[1];
    CliTestRunner_run_closure0.prototype = $desc;
    CliTestRunner_run_closure0.$__fields__ = ["launch"];
    function CliTestRunner_run_closure1(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    CliTestRunner_run_closure1.builtin$cls = "CliTestRunner_run_closure1";
    if (!("name" in CliTestRunner_run_closure1))
      CliTestRunner_run_closure1.name = "CliTestRunner_run_closure1";
    $desc = $collectedClasses$.CliTestRunner_run_closure1[1];
    CliTestRunner_run_closure1.prototype = $desc;
    CliTestRunner_run_closure1.$__fields__ = ["launch"];
    function CliTestRunner_run_closure2(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    CliTestRunner_run_closure2.builtin$cls = "CliTestRunner_run_closure2";
    if (!("name" in CliTestRunner_run_closure2))
      CliTestRunner_run_closure2.name = "CliTestRunner_run_closure2";
    $desc = $collectedClasses$.CliTestRunner_run_closure2[1];
    CliTestRunner_run_closure2.prototype = $desc;
    CliTestRunner_run_closure2.$__fields__ = ["launch"];
    function Toolbar(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Toolbar.builtin$cls = "Toolbar";
    if (!("name" in Toolbar))
      Toolbar.name = "Toolbar";
    $desc = $collectedClasses$.Toolbar[1];
    Toolbar.prototype = $desc;
    Toolbar.$__fields__ = ["obj"];
    function ToolbarTile(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    ToolbarTile.builtin$cls = "ToolbarTile";
    if (!("name" in ToolbarTile))
      ToolbarTile.name = "ToolbarTile";
    $desc = $collectedClasses$.ToolbarTile[1];
    ToolbarTile.prototype = $desc;
    ToolbarTile.$__fields__ = ["obj"];
    function DartToolbarContribution(leftTile, flutterTile, rightTile, subs) {
      this.leftTile = leftTile;
      this.flutterTile = flutterTile;
      this.rightTile = rightTile;
      this.subs = subs;
      this.$deferredAction();
    }
    DartToolbarContribution.builtin$cls = "DartToolbarContribution";
    if (!("name" in DartToolbarContribution))
      DartToolbarContribution.name = "DartToolbarContribution";
    $desc = $collectedClasses$.DartToolbarContribution[1];
    DartToolbarContribution.prototype = $desc;
    DartToolbarContribution.$__fields__ = ["leftTile", "flutterTile", "rightTile", "subs"];
    function DartToolbarContribution_closure($this, toolbar) {
      this.$this = $this;
      this.toolbar = toolbar;
      this.$deferredAction();
    }
    DartToolbarContribution_closure.builtin$cls = "DartToolbarContribution_closure";
    if (!("name" in DartToolbarContribution_closure))
      DartToolbarContribution_closure.name = "DartToolbarContribution_closure";
    $desc = $collectedClasses$.DartToolbarContribution_closure[1];
    DartToolbarContribution_closure.prototype = $desc;
    DartToolbarContribution_closure.$__fields__ = ["$this", "toolbar"];
    function DartToolbarContribution__buildFlutterTile_updateToolbar(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    DartToolbarContribution__buildFlutterTile_updateToolbar.builtin$cls = "DartToolbarContribution__buildFlutterTile_updateToolbar";
    if (!("name" in DartToolbarContribution__buildFlutterTile_updateToolbar))
      DartToolbarContribution__buildFlutterTile_updateToolbar.name = "DartToolbarContribution__buildFlutterTile_updateToolbar";
    $desc = $collectedClasses$.DartToolbarContribution__buildFlutterTile_updateToolbar[1];
    DartToolbarContribution__buildFlutterTile_updateToolbar.prototype = $desc;
    DartToolbarContribution__buildFlutterTile_updateToolbar.$__fields__ = ["_box_0"];
    function DartToolbarContribution__buildFlutterTile_closure(updateToolbar) {
      this.updateToolbar = updateToolbar;
      this.$deferredAction();
    }
    DartToolbarContribution__buildFlutterTile_closure.builtin$cls = "DartToolbarContribution__buildFlutterTile_closure";
    if (!("name" in DartToolbarContribution__buildFlutterTile_closure))
      DartToolbarContribution__buildFlutterTile_closure.name = "DartToolbarContribution__buildFlutterTile_closure";
    $desc = $collectedClasses$.DartToolbarContribution__buildFlutterTile_closure[1];
    DartToolbarContribution__buildFlutterTile_closure.prototype = $desc;
    DartToolbarContribution__buildFlutterTile_closure.$__fields__ = ["updateToolbar"];
    function DartToolbarContribution__buildFlutterTile_closure0(updateToolbar) {
      this.updateToolbar = updateToolbar;
      this.$deferredAction();
    }
    DartToolbarContribution__buildFlutterTile_closure0.builtin$cls = "DartToolbarContribution__buildFlutterTile_closure0";
    if (!("name" in DartToolbarContribution__buildFlutterTile_closure0))
      DartToolbarContribution__buildFlutterTile_closure0.name = "DartToolbarContribution__buildFlutterTile_closure0";
    $desc = $collectedClasses$.DartToolbarContribution__buildFlutterTile_closure0[1];
    DartToolbarContribution__buildFlutterTile_closure0.prototype = $desc;
    DartToolbarContribution__buildFlutterTile_closure0.$__fields__ = ["updateToolbar"];
    function DartToolbarContribution__buildFlutterTile_closure1(updateToolbar) {
      this.updateToolbar = updateToolbar;
      this.$deferredAction();
    }
    DartToolbarContribution__buildFlutterTile_closure1.builtin$cls = "DartToolbarContribution__buildFlutterTile_closure1";
    if (!("name" in DartToolbarContribution__buildFlutterTile_closure1))
      DartToolbarContribution__buildFlutterTile_closure1.name = "DartToolbarContribution__buildFlutterTile_closure1";
    $desc = $collectedClasses$.DartToolbarContribution__buildFlutterTile_closure1[1];
    DartToolbarContribution__buildFlutterTile_closure1.prototype = $desc;
    DartToolbarContribution__buildFlutterTile_closure1.$__fields__ = ["updateToolbar"];
    function DartToolbarContribution__buildRightTile_updateToolbar(_box_0) {
      this._box_0 = _box_0;
      this.$deferredAction();
    }
    DartToolbarContribution__buildRightTile_updateToolbar.builtin$cls = "DartToolbarContribution__buildRightTile_updateToolbar";
    if (!("name" in DartToolbarContribution__buildRightTile_updateToolbar))
      DartToolbarContribution__buildRightTile_updateToolbar.name = "DartToolbarContribution__buildRightTile_updateToolbar";
    $desc = $collectedClasses$.DartToolbarContribution__buildRightTile_updateToolbar[1];
    DartToolbarContribution__buildRightTile_updateToolbar.prototype = $desc;
    DartToolbarContribution__buildRightTile_updateToolbar.$__fields__ = ["_box_0"];
    function DartToolbarContribution__buildRightTile_closure(updateToolbar) {
      this.updateToolbar = updateToolbar;
      this.$deferredAction();
    }
    DartToolbarContribution__buildRightTile_closure.builtin$cls = "DartToolbarContribution__buildRightTile_closure";
    if (!("name" in DartToolbarContribution__buildRightTile_closure))
      DartToolbarContribution__buildRightTile_closure.name = "DartToolbarContribution__buildRightTile_closure";
    $desc = $collectedClasses$.DartToolbarContribution__buildRightTile_closure[1];
    DartToolbarContribution__buildRightTile_closure.prototype = $desc;
    DartToolbarContribution__buildRightTile_closure.$__fields__ = ["updateToolbar"];
    function DartToolbarContribution__bindLaunchManager_closure(_box_0, runButton, selectList, configureButton, element) {
      this._box_0 = _box_0;
      this.runButton = runButton;
      this.selectList = selectList;
      this.configureButton = configureButton;
      this.element = element;
      this.$deferredAction();
    }
    DartToolbarContribution__bindLaunchManager_closure.builtin$cls = "DartToolbarContribution__bindLaunchManager_closure";
    if (!("name" in DartToolbarContribution__bindLaunchManager_closure))
      DartToolbarContribution__bindLaunchManager_closure.name = "DartToolbarContribution__bindLaunchManager_closure";
    $desc = $collectedClasses$.DartToolbarContribution__bindLaunchManager_closure[1];
    DartToolbarContribution__bindLaunchManager_closure.prototype = $desc;
    DartToolbarContribution__bindLaunchManager_closure.$__fields__ = ["_box_0", "runButton", "selectList", "configureButton", "element"];
    function DartToolbarContribution__bindLaunchManager_closure0(updateUI) {
      this.updateUI = updateUI;
      this.$deferredAction();
    }
    DartToolbarContribution__bindLaunchManager_closure0.builtin$cls = "DartToolbarContribution__bindLaunchManager_closure0";
    if (!("name" in DartToolbarContribution__bindLaunchManager_closure0))
      DartToolbarContribution__bindLaunchManager_closure0.name = "DartToolbarContribution__bindLaunchManager_closure0";
    $desc = $collectedClasses$.DartToolbarContribution__bindLaunchManager_closure0[1];
    DartToolbarContribution__bindLaunchManager_closure0.prototype = $desc;
    DartToolbarContribution__bindLaunchManager_closure0.$__fields__ = ["updateUI"];
    function DartToolbarContribution__bindLaunchManager_closure1(updateUI) {
      this.updateUI = updateUI;
      this.$deferredAction();
    }
    DartToolbarContribution__bindLaunchManager_closure1.builtin$cls = "DartToolbarContribution__bindLaunchManager_closure1";
    if (!("name" in DartToolbarContribution__bindLaunchManager_closure1))
      DartToolbarContribution__bindLaunchManager_closure1.name = "DartToolbarContribution__bindLaunchManager_closure1";
    $desc = $collectedClasses$.DartToolbarContribution__bindLaunchManager_closure1[1];
    DartToolbarContribution__bindLaunchManager_closure1.prototype = $desc;
    DartToolbarContribution__bindLaunchManager_closure1.$__fields__ = ["updateUI"];
    function DartToolbarContribution__bindLaunchManager_closure2(_box_0, element) {
      this._box_0 = _box_0;
      this.element = element;
      this.$deferredAction();
    }
    DartToolbarContribution__bindLaunchManager_closure2.builtin$cls = "DartToolbarContribution__bindLaunchManager_closure2";
    if (!("name" in DartToolbarContribution__bindLaunchManager_closure2))
      DartToolbarContribution__bindLaunchManager_closure2.name = "DartToolbarContribution__bindLaunchManager_closure2";
    $desc = $collectedClasses$.DartToolbarContribution__bindLaunchManager_closure2[1];
    DartToolbarContribution__bindLaunchManager_closure2.prototype = $desc;
    DartToolbarContribution__bindLaunchManager_closure2.$__fields__ = ["_box_0", "element"];
    function DartToolbarContribution__bindDevicesToSelect_closure(deviceManager, deviceList, deviceElement) {
      this.deviceManager = deviceManager;
      this.deviceList = deviceList;
      this.deviceElement = deviceElement;
      this.$deferredAction();
    }
    DartToolbarContribution__bindDevicesToSelect_closure.builtin$cls = "DartToolbarContribution__bindDevicesToSelect_closure";
    if (!("name" in DartToolbarContribution__bindDevicesToSelect_closure))
      DartToolbarContribution__bindDevicesToSelect_closure.name = "DartToolbarContribution__bindDevicesToSelect_closure";
    $desc = $collectedClasses$.DartToolbarContribution__bindDevicesToSelect_closure[1];
    DartToolbarContribution__bindDevicesToSelect_closure.prototype = $desc;
    DartToolbarContribution__bindDevicesToSelect_closure.$__fields__ = ["deviceManager", "deviceList", "deviceElement"];
    function DartToolbarContribution__bindDevicesToSelect_closure0(updateSelect) {
      this.updateSelect = updateSelect;
      this.$deferredAction();
    }
    DartToolbarContribution__bindDevicesToSelect_closure0.builtin$cls = "DartToolbarContribution__bindDevicesToSelect_closure0";
    if (!("name" in DartToolbarContribution__bindDevicesToSelect_closure0))
      DartToolbarContribution__bindDevicesToSelect_closure0.name = "DartToolbarContribution__bindDevicesToSelect_closure0";
    $desc = $collectedClasses$.DartToolbarContribution__bindDevicesToSelect_closure0[1];
    DartToolbarContribution__bindDevicesToSelect_closure0.prototype = $desc;
    DartToolbarContribution__bindDevicesToSelect_closure0.$__fields__ = ["updateSelect"];
    function DartToolbarContribution__bindDevicesToSelect_closure1(updateSelect) {
      this.updateSelect = updateSelect;
      this.$deferredAction();
    }
    DartToolbarContribution__bindDevicesToSelect_closure1.builtin$cls = "DartToolbarContribution__bindDevicesToSelect_closure1";
    if (!("name" in DartToolbarContribution__bindDevicesToSelect_closure1))
      DartToolbarContribution__bindDevicesToSelect_closure1.name = "DartToolbarContribution__bindDevicesToSelect_closure1";
    $desc = $collectedClasses$.DartToolbarContribution__bindDevicesToSelect_closure1[1];
    DartToolbarContribution__bindDevicesToSelect_closure1.prototype = $desc;
    DartToolbarContribution__bindDevicesToSelect_closure1.$__fields__ = ["updateSelect"];
    function DartToolbarContribution__bindDevicesToSelect_closure2(deviceManager, deviceElement) {
      this.deviceManager = deviceManager;
      this.deviceElement = deviceElement;
      this.$deferredAction();
    }
    DartToolbarContribution__bindDevicesToSelect_closure2.builtin$cls = "DartToolbarContribution__bindDevicesToSelect_closure2";
    if (!("name" in DartToolbarContribution__bindDevicesToSelect_closure2))
      DartToolbarContribution__bindDevicesToSelect_closure2.name = "DartToolbarContribution__bindDevicesToSelect_closure2";
    $desc = $collectedClasses$.DartToolbarContribution__bindDevicesToSelect_closure2[1];
    DartToolbarContribution__bindDevicesToSelect_closure2.prototype = $desc;
    DartToolbarContribution__bindDevicesToSelect_closure2.$__fields__ = ["deviceManager", "deviceElement"];
    function DartToolbarContribution__bindDevicesToSelect_closure3(deviceManager, runModeElement) {
      this.deviceManager = deviceManager;
      this.runModeElement = runModeElement;
      this.$deferredAction();
    }
    DartToolbarContribution__bindDevicesToSelect_closure3.builtin$cls = "DartToolbarContribution__bindDevicesToSelect_closure3";
    if (!("name" in DartToolbarContribution__bindDevicesToSelect_closure3))
      DartToolbarContribution__bindDevicesToSelect_closure3.name = "DartToolbarContribution__bindDevicesToSelect_closure3";
    $desc = $collectedClasses$.DartToolbarContribution__bindDevicesToSelect_closure3[1];
    DartToolbarContribution__bindDevicesToSelect_closure3.prototype = $desc;
    DartToolbarContribution__bindDevicesToSelect_closure3.$__fields__ = ["deviceManager", "runModeElement"];
    function Job(name) {
      this.name = name;
      this.$deferredAction();
    }
    Job.builtin$cls = "Job";
    if (!("name" in Job))
      Job.name = "Job";
    $desc = $collectedClasses$.Job[1];
    Job.prototype = $desc;
    Job.$__fields__ = ["name"];
    Job.prototype.get$name = function(receiver) {
      return this.name;
    };
    function Status(index) {
      this.index = index;
      this.$deferredAction();
    }
    Status.builtin$cls = "Status";
    if (!("name" in Status))
      Status.name = "Status";
    $desc = $collectedClasses$.Status[1];
    Status.prototype = $desc;
    Status.$__fields__ = ["index"];
    Status.prototype.get$index = function(receiver) {
      return this.index;
    };
    function JobStatus(status, result) {
      this.status = status;
      this.result = result;
      this.$deferredAction();
    }
    JobStatus.builtin$cls = "JobStatus";
    if (!("name" in JobStatus))
      JobStatus.name = "JobStatus";
    $desc = $collectedClasses$.JobStatus[1];
    JobStatus.prototype = $desc;
    JobStatus.$__fields__ = ["status", "result"];
    JobStatus.prototype.get$result = function(receiver) {
      return this.result;
    };
    function JobManager(_activeJobController, _queueController, _jobs, _toasts, _lastNotifiedJob) {
      this._activeJobController = _activeJobController;
      this._queueController = _queueController;
      this._jobs = _jobs;
      this._toasts = _toasts;
      this._lastNotifiedJob = _lastNotifiedJob;
      this.$deferredAction();
    }
    JobManager.builtin$cls = "JobManager";
    if (!("name" in JobManager))
      JobManager.name = "JobManager";
    $desc = $collectedClasses$.JobManager[1];
    JobManager.prototype = $desc;
    JobManager.$__fields__ = ["_activeJobController", "_queueController", "_jobs", "_toasts", "_lastNotifiedJob"];
    function JobManager_activeJob_closure() {
      this.$deferredAction();
    }
    JobManager_activeJob_closure.builtin$cls = "JobManager_activeJob_closure";
    if (!("name" in JobManager_activeJob_closure))
      JobManager_activeJob_closure.name = "JobManager_activeJob_closure";
    $desc = $collectedClasses$.JobManager_activeJob_closure[1];
    JobManager_activeJob_closure.prototype = $desc;
    JobManager_activeJob_closure.$__fields__ = [];
    function JobManager_activeJob_closure0() {
      this.$deferredAction();
    }
    JobManager_activeJob_closure0.builtin$cls = "JobManager_activeJob_closure0";
    if (!("name" in JobManager_activeJob_closure0))
      JobManager_activeJob_closure0.name = "JobManager_activeJob_closure0";
    $desc = $collectedClasses$.JobManager_activeJob_closure0[1];
    JobManager_activeJob_closure0.prototype = $desc;
    JobManager_activeJob_closure0.$__fields__ = [];
    function JobManager_runningJobs_closure() {
      this.$deferredAction();
    }
    JobManager_runningJobs_closure.builtin$cls = "JobManager_runningJobs_closure";
    if (!("name" in JobManager_runningJobs_closure))
      JobManager_runningJobs_closure.name = "JobManager_runningJobs_closure";
    $desc = $collectedClasses$.JobManager_runningJobs_closure[1];
    JobManager_runningJobs_closure.prototype = $desc;
    JobManager_runningJobs_closure.$__fields__ = [];
    function JobManager__exec_closure($this, jobInstance, job) {
      this.$this = $this;
      this.jobInstance = jobInstance;
      this.job = job;
      this.$deferredAction();
    }
    JobManager__exec_closure.builtin$cls = "JobManager__exec_closure";
    if (!("name" in JobManager__exec_closure))
      JobManager__exec_closure.name = "JobManager__exec_closure";
    $desc = $collectedClasses$.JobManager__exec_closure[1];
    JobManager__exec_closure.prototype = $desc;
    JobManager__exec_closure.$__fields__ = ["$this", "jobInstance", "job"];
    function JobManager__exec_closure0($this, jobInstance) {
      this.$this = $this;
      this.jobInstance = jobInstance;
      this.$deferredAction();
    }
    JobManager__exec_closure0.builtin$cls = "JobManager__exec_closure0";
    if (!("name" in JobManager__exec_closure0))
      JobManager__exec_closure0.name = "JobManager__exec_closure0";
    $desc = $collectedClasses$.JobManager__exec_closure0[1];
    JobManager__exec_closure0.prototype = $desc;
    JobManager__exec_closure0.$__fields__ = ["$this", "jobInstance"];
    function JobManager__exec_closure1($this, jobInstance, job) {
      this.$this = $this;
      this.jobInstance = jobInstance;
      this.job = job;
      this.$deferredAction();
    }
    JobManager__exec_closure1.builtin$cls = "JobManager__exec_closure1";
    if (!("name" in JobManager__exec_closure1))
      JobManager__exec_closure1.name = "JobManager__exec_closure1";
    $desc = $collectedClasses$.JobManager__exec_closure1[1];
    JobManager__exec_closure1.prototype = $desc;
    JobManager__exec_closure1.$__fields__ = ["$this", "jobInstance", "job"];
    function JobInstance(jobs, job, _completer, stopwatch, _running) {
      this.jobs = jobs;
      this.job = job;
      this._completer = _completer;
      this.stopwatch = stopwatch;
      this._running = _running;
      this.$deferredAction();
    }
    JobInstance.builtin$cls = "JobInstance";
    if (!("name" in JobInstance))
      JobInstance.name = "JobInstance";
    $desc = $collectedClasses$.JobInstance[1];
    JobInstance.prototype = $desc;
    JobInstance.$__fields__ = ["jobs", "job", "_completer", "stopwatch", "_running"];
    JobInstance.prototype.get$job = function() {
      return this.job;
    };
    JobInstance.prototype.get$_completer = function() {
      return this._completer;
    };
    JobInstance.prototype.get$stopwatch = function() {
      return this.stopwatch;
    };
    function ConsoleController(statusElement, disposables, _console$_subs, _allViews, _errorsView) {
      this.statusElement = statusElement;
      this.disposables = disposables;
      this._console$_subs = _console$_subs;
      this._allViews = _allViews;
      this._errorsView = _errorsView;
      this.$deferredAction();
    }
    ConsoleController.builtin$cls = "ConsoleController";
    if (!("name" in ConsoleController))
      ConsoleController.name = "ConsoleController";
    $desc = $collectedClasses$.ConsoleController[1];
    ConsoleController.prototype = $desc;
    ConsoleController.$__fields__ = ["statusElement", "disposables", "_console$_subs", "_allViews", "_errorsView"];
    function ConsoleController_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ConsoleController_closure.builtin$cls = "ConsoleController_closure";
    if (!("name" in ConsoleController_closure))
      ConsoleController_closure.name = "ConsoleController_closure";
    $desc = $collectedClasses$.ConsoleController_closure[1];
    ConsoleController_closure.prototype = $desc;
    ConsoleController_closure.$__fields__ = ["$this"];
    function ConsoleController__toggleViews_closure() {
      this.$deferredAction();
    }
    ConsoleController__toggleViews_closure.builtin$cls = "ConsoleController__toggleViews_closure";
    if (!("name" in ConsoleController__toggleViews_closure))
      ConsoleController__toggleViews_closure.name = "ConsoleController__toggleViews_closure";
    $desc = $collectedClasses$.ConsoleController__toggleViews_closure[1];
    ConsoleController__toggleViews_closure.prototype = $desc;
    ConsoleController__toggleViews_closure.$__fields__ = [];
    function ConsoleView(controller, launch, _launchId, _console$_subs, output, _lastText, _terminateButton, _reloadButton, _observatoryButton, _console$_text, _console$_timer, root, toolbar, content, tabElement, _closeButton, group) {
      this.controller = controller;
      this.launch = launch;
      this._launchId = _launchId;
      this._console$_subs = _console$_subs;
      this.output = output;
      this._lastText = _lastText;
      this._terminateButton = _terminateButton;
      this._reloadButton = _reloadButton;
      this._observatoryButton = _observatoryButton;
      this._console$_text = _console$_text;
      this._console$_timer = _console$_timer;
      this.root = root;
      this.toolbar = toolbar;
      this.content = content;
      this.tabElement = tabElement;
      this._closeButton = _closeButton;
      this.group = group;
      this.$deferredAction();
    }
    ConsoleView.builtin$cls = "ConsoleView";
    if (!("name" in ConsoleView))
      ConsoleView.name = "ConsoleView";
    $desc = $collectedClasses$.ConsoleView[1];
    ConsoleView.prototype = $desc;
    ConsoleView.$__fields__ = ["controller", "launch", "_launchId", "_console$_subs", "output", "_lastText", "_terminateButton", "_reloadButton", "_observatoryButton", "_console$_text", "_console$_timer", "root", "toolbar", "content", "tabElement", "_closeButton", "group"];
    ConsoleView.prototype.get$launch = function() {
      return this.launch;
    };
    function ConsoleView_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ConsoleView_closure.builtin$cls = "ConsoleView_closure";
    if (!("name" in ConsoleView_closure))
      ConsoleView_closure.name = "ConsoleView_closure";
    $desc = $collectedClasses$.ConsoleView_closure[1];
    ConsoleView_closure.prototype = $desc;
    ConsoleView_closure.$__fields__ = ["$this"];
    function ConsoleView_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ConsoleView_closure0.builtin$cls = "ConsoleView_closure0";
    if (!("name" in ConsoleView_closure0))
      ConsoleView_closure0.name = "ConsoleView_closure0";
    $desc = $collectedClasses$.ConsoleView_closure0[1];
    ConsoleView_closure0.prototype = $desc;
    ConsoleView_closure0.$__fields__ = ["$this"];
    function ConsoleView_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ConsoleView_closure1.builtin$cls = "ConsoleView_closure1";
    if (!("name" in ConsoleView_closure1))
      ConsoleView_closure1.name = "ConsoleView_closure1";
    $desc = $collectedClasses$.ConsoleView_closure1[1];
    ConsoleView_closure1.prototype = $desc;
    ConsoleView_closure1.$__fields__ = ["$this"];
    function ConsoleView_closure2($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ConsoleView_closure2.builtin$cls = "ConsoleView_closure2";
    if (!("name" in ConsoleView_closure2))
      ConsoleView_closure2.name = "ConsoleView_closure2";
    $desc = $collectedClasses$.ConsoleView_closure2[1];
    ConsoleView_closure2.prototype = $desc;
    ConsoleView_closure2.$__fields__ = ["$this"];
    function ConsoleView_closure3($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ConsoleView_closure3.builtin$cls = "ConsoleView_closure3";
    if (!("name" in ConsoleView_closure3))
      ConsoleView_closure3.name = "ConsoleView_closure3";
    $desc = $collectedClasses$.ConsoleView_closure3[1];
    ConsoleView_closure3.prototype = $desc;
    ConsoleView_closure3.$__fields__ = ["$this"];
    function ConsoleView__watchServicePort_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ConsoleView__watchServicePort_closure.builtin$cls = "ConsoleView__watchServicePort_closure";
    if (!("name" in ConsoleView__watchServicePort_closure))
      ConsoleView__watchServicePort_closure.name = "ConsoleView__watchServicePort_closure";
    $desc = $collectedClasses$.ConsoleView__watchServicePort_closure[1];
    ConsoleView__watchServicePort_closure.prototype = $desc;
    ConsoleView__watchServicePort_closure.$__fields__ = ["$this"];
    function ConsoleView__emitText_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ConsoleView__emitText_closure.builtin$cls = "ConsoleView__emitText_closure";
    if (!("name" in ConsoleView__emitText_closure))
      ConsoleView__emitText_closure.name = "ConsoleView__emitText_closure";
    $desc = $collectedClasses$.ConsoleView__emitText_closure[1];
    ConsoleView__emitText_closure.prototype = $desc;
    ConsoleView__emitText_closure.$__fields__ = ["$this"];
    function ConsoleStatusElement(parent, _showing, subs, statusTile, _console$_element, _badgeSpan) {
      this.parent = parent;
      this._showing = _showing;
      this.subs = subs;
      this.statusTile = statusTile;
      this._console$_element = _console$_element;
      this._badgeSpan = _badgeSpan;
      this.$deferredAction();
    }
    ConsoleStatusElement.builtin$cls = "ConsoleStatusElement";
    if (!("name" in ConsoleStatusElement))
      ConsoleStatusElement.name = "ConsoleStatusElement";
    $desc = $collectedClasses$.ConsoleStatusElement[1];
    ConsoleStatusElement.prototype = $desc;
    ConsoleStatusElement.$__fields__ = ["parent", "_showing", "subs", "statusTile", "_console$_element", "_badgeSpan"];
    ConsoleStatusElement.prototype.get$parent = function(receiver) {
      return this.parent;
    };
    function LaunchManager(_launchAdded, _launchActivated, _launchTerminated, _launchRemoved, launchTypes, _activeLaunch, _launches) {
      this._launchAdded = _launchAdded;
      this._launchActivated = _launchActivated;
      this._launchTerminated = _launchTerminated;
      this._launchRemoved = _launchRemoved;
      this.launchTypes = launchTypes;
      this._activeLaunch = _activeLaunch;
      this._launches = _launches;
      this.$deferredAction();
    }
    LaunchManager.builtin$cls = "LaunchManager";
    if (!("name" in LaunchManager))
      LaunchManager.name = "LaunchManager";
    $desc = $collectedClasses$.LaunchManager[1];
    LaunchManager.prototype = $desc;
    LaunchManager.$__fields__ = ["_launchAdded", "_launchActivated", "_launchTerminated", "_launchRemoved", "launchTypes", "_activeLaunch", "_launches"];
    LaunchManager.prototype.get$_launchTerminated = function() {
      return this._launchTerminated;
    };
    function LaunchManager_addLaunch_closure($this, removed) {
      this.$this = $this;
      this.removed = removed;
      this.$deferredAction();
    }
    LaunchManager_addLaunch_closure.builtin$cls = "LaunchManager_addLaunch_closure";
    if (!("name" in LaunchManager_addLaunch_closure))
      LaunchManager_addLaunch_closure.name = "LaunchManager_addLaunch_closure";
    $desc = $collectedClasses$.LaunchManager_addLaunch_closure[1];
    LaunchManager_addLaunch_closure.prototype = $desc;
    LaunchManager_addLaunch_closure.$__fields__ = ["$this", "removed"];
    function LaunchManager_addLaunch_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    LaunchManager_addLaunch_closure0.builtin$cls = "LaunchManager_addLaunch_closure0";
    if (!("name" in LaunchManager_addLaunch_closure0))
      LaunchManager_addLaunch_closure0.name = "LaunchManager_addLaunch_closure0";
    $desc = $collectedClasses$.LaunchManager_addLaunch_closure0[1];
    LaunchManager_addLaunch_closure0.prototype = $desc;
    LaunchManager_addLaunch_closure0.$__fields__ = ["$this"];
    function LaunchType(type) {
      this.type = type;
      this.$deferredAction();
    }
    LaunchType.builtin$cls = "LaunchType";
    if (!("name" in LaunchType))
      LaunchType.name = "LaunchType";
    $desc = $collectedClasses$.LaunchType[1];
    LaunchType.prototype = $desc;
    LaunchType.$__fields__ = ["type"];
    LaunchType.prototype.get$type = function(receiver) {
      return this.type;
    };
    function LaunchData(fileContents, _hasMain) {
      this.fileContents = fileContents;
      this._hasMain = _hasMain;
      this.$deferredAction();
    }
    LaunchData.builtin$cls = "LaunchData";
    if (!("name" in LaunchData))
      LaunchData.name = "LaunchData";
    $desc = $collectedClasses$.LaunchData[1];
    LaunchData.prototype = $desc;
    LaunchData.$__fields__ = ["fileContents", "_hasMain"];
    function Launchable(type, projectPath, relativePath) {
      this.type = type;
      this.projectPath = projectPath;
      this.relativePath = relativePath;
      this.$deferredAction();
    }
    Launchable.builtin$cls = "Launchable";
    if (!("name" in Launchable))
      Launchable.name = "Launchable";
    $desc = $collectedClasses$.Launchable[1];
    Launchable.prototype = $desc;
    Launchable.$__fields__ = ["type", "projectPath", "relativePath"];
    Launchable.prototype.get$type = function(receiver) {
      return this.type;
    };
    Launchable.prototype.get$projectPath = function() {
      return this.projectPath;
    };
    Launchable.prototype.get$relativePath = function(receiver) {
      return this.relativePath;
    };
    function Launch(launchType, launchConfiguration, name, title, targetName, manager, id, killHandler, cwd, exitCode, servicePort, _stdio, _debugConnection, _pathResolver) {
      this.launchType = launchType;
      this.launchConfiguration = launchConfiguration;
      this.name = name;
      this.title = title;
      this.targetName = targetName;
      this.manager = manager;
      this.id = id;
      this.killHandler = killHandler;
      this.cwd = cwd;
      this.exitCode = exitCode;
      this.servicePort = servicePort;
      this._stdio = _stdio;
      this._debugConnection = _debugConnection;
      this._pathResolver = _pathResolver;
      this.$deferredAction();
    }
    Launch.builtin$cls = "Launch";
    if (!("name" in Launch))
      Launch.name = "Launch";
    $desc = $collectedClasses$.Launch[1];
    Launch.prototype = $desc;
    Launch.$__fields__ = ["launchType", "launchConfiguration", "name", "title", "targetName", "manager", "id", "killHandler", "cwd", "exitCode", "servicePort", "_stdio", "_debugConnection", "_pathResolver"];
    Launch.prototype.get$launchConfiguration = function() {
      return this.launchConfiguration;
    };
    Launch.prototype.get$name = function(receiver) {
      return this.name;
    };
    Launch.prototype.get$title = function(receiver) {
      return this.title;
    };
    Launch.prototype.get$targetName = function() {
      return this.targetName;
    };
    Launch.prototype.get$id = function(receiver) {
      return this.id;
    };
    Launch.prototype.get$cwd = function() {
      return this.cwd;
    };
    Launch.prototype.get$exitCode = function() {
      return this.exitCode;
    };
    Launch.prototype.get$servicePort = function() {
      return this.servicePort;
    };
    function TextFragment(text, error, subtle, highlight) {
      this.text = text;
      this.error = error;
      this.subtle = subtle;
      this.highlight = highlight;
      this.$deferredAction();
    }
    TextFragment.builtin$cls = "TextFragment";
    if (!("name" in TextFragment))
      TextFragment.name = "TextFragment";
    $desc = $collectedClasses$.TextFragment[1];
    TextFragment.prototype = $desc;
    TextFragment.$__fields__ = ["text", "error", "subtle", "highlight"];
    TextFragment.prototype.get$text = function(receiver) {
      return this.text;
    };
    TextFragment.prototype.get$error = function(receiver) {
      return this.error;
    };
    TextFragment.prototype.get$subtle = function(receiver) {
      return this.subtle;
    };
    TextFragment.prototype.get$highlight = function(receiver) {
      return this.highlight;
    };
    function CachingServerResolver(_pathResolver, _serverResolver, _cache) {
      this._pathResolver = _pathResolver;
      this._serverResolver = _serverResolver;
      this._cache = _cache;
      this.$deferredAction();
    }
    CachingServerResolver.builtin$cls = "CachingServerResolver";
    if (!("name" in CachingServerResolver))
      CachingServerResolver.name = "CachingServerResolver";
    $desc = $collectedClasses$.CachingServerResolver[1];
    CachingServerResolver.prototype = $desc;
    CachingServerResolver.$__fields__ = ["_pathResolver", "_serverResolver", "_cache"];
    function _PathResolver(cwd) {
      this.cwd = cwd;
      this.$deferredAction();
    }
    _PathResolver.builtin$cls = "_PathResolver";
    if (!("name" in _PathResolver))
      _PathResolver.name = "_PathResolver";
    $desc = $collectedClasses$._PathResolver[1];
    _PathResolver.prototype = $desc;
    _PathResolver.$__fields__ = ["cwd"];
    _PathResolver.prototype.get$cwd = function() {
      return this.cwd;
    };
    function _ServerResolver(path, server, _contextCompleter) {
      this.path = path;
      this.server = server;
      this._contextCompleter = _contextCompleter;
      this.$deferredAction();
    }
    _ServerResolver.builtin$cls = "_ServerResolver";
    if (!("name" in _ServerResolver))
      _ServerResolver.name = "_ServerResolver";
    $desc = $collectedClasses$._ServerResolver[1];
    _ServerResolver.prototype = $desc;
    _ServerResolver.$__fields__ = ["path", "server", "_contextCompleter"];
    _ServerResolver.prototype.get$path = function(receiver) {
      return this.path;
    };
    _ServerResolver.prototype.get$server = function() {
      return this.server;
    };
    function _ServerResolver_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _ServerResolver_closure.builtin$cls = "_ServerResolver_closure";
    if (!("name" in _ServerResolver_closure))
      _ServerResolver_closure.name = "_ServerResolver_closure";
    $desc = $collectedClasses$._ServerResolver_closure[1];
    _ServerResolver_closure.prototype = $desc;
    _ServerResolver_closure.$__fields__ = ["$this"];
    function _ServerResolver_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _ServerResolver_closure0.builtin$cls = "_ServerResolver_closure0";
    if (!("name" in _ServerResolver_closure0))
      _ServerResolver_closure0.name = "_ServerResolver_closure0";
    $desc = $collectedClasses$._ServerResolver_closure0[1];
    _ServerResolver_closure0.prototype = $desc;
    _ServerResolver_closure0.$__fields__ = ["$this"];
    function _ServerResolver_dispose_closure() {
      this.$deferredAction();
    }
    _ServerResolver_dispose_closure.builtin$cls = "_ServerResolver_dispose_closure";
    if (!("name" in _ServerResolver_dispose_closure))
      _ServerResolver_dispose_closure.name = "_ServerResolver_dispose_closure";
    $desc = $collectedClasses$._ServerResolver_dispose_closure[1];
    _ServerResolver_dispose_closure.prototype = $desc;
    _ServerResolver_dispose_closure.$__fields__ = [];
    function _ServerResolver_dispose__closure() {
      this.$deferredAction();
    }
    _ServerResolver_dispose__closure.builtin$cls = "_ServerResolver_dispose__closure";
    if (!("name" in _ServerResolver_dispose__closure))
      _ServerResolver_dispose__closure.name = "_ServerResolver_dispose__closure";
    $desc = $collectedClasses$._ServerResolver_dispose__closure[1];
    _ServerResolver_dispose__closure.prototype = $desc;
    _ServerResolver_dispose__closure.$__fields__ = [];
    function CliLaunchType(type) {
      this.type = type;
      this.$deferredAction();
    }
    CliLaunchType.builtin$cls = "CliLaunchType";
    if (!("name" in CliLaunchType))
      CliLaunchType.name = "CliLaunchType";
    $desc = $collectedClasses$.CliLaunchType[1];
    CliLaunchType.prototype = $desc;
    CliLaunchType.$__fields__ = ["type"];
    function CliLaunchType_performLaunch_closure(runner) {
      this.runner = runner;
      this.$deferredAction();
    }
    CliLaunchType_performLaunch_closure.builtin$cls = "CliLaunchType_performLaunch_closure";
    if (!("name" in CliLaunchType_performLaunch_closure))
      CliLaunchType_performLaunch_closure.name = "CliLaunchType_performLaunch_closure";
    $desc = $collectedClasses$.CliLaunchType_performLaunch_closure[1];
    CliLaunchType_performLaunch_closure.prototype = $desc;
    CliLaunchType_performLaunch_closure.$__fields__ = ["runner"];
    function CliLaunchType_performLaunch_closure0(_box_0, launch) {
      this._box_0 = _box_0;
      this.launch = launch;
      this.$deferredAction();
    }
    CliLaunchType_performLaunch_closure0.builtin$cls = "CliLaunchType_performLaunch_closure0";
    if (!("name" in CliLaunchType_performLaunch_closure0))
      CliLaunchType_performLaunch_closure0.name = "CliLaunchType_performLaunch_closure0";
    $desc = $collectedClasses$.CliLaunchType_performLaunch_closure0[1];
    CliLaunchType_performLaunch_closure0.prototype = $desc;
    CliLaunchType_performLaunch_closure0.$__fields__ = ["_box_0", "launch"];
    function CliLaunchType_performLaunch__closure(_box_0, launch) {
      this._box_0 = _box_0;
      this.launch = launch;
      this.$deferredAction();
    }
    CliLaunchType_performLaunch__closure.builtin$cls = "CliLaunchType_performLaunch__closure";
    if (!("name" in CliLaunchType_performLaunch__closure))
      CliLaunchType_performLaunch__closure.name = "CliLaunchType_performLaunch__closure";
    $desc = $collectedClasses$.CliLaunchType_performLaunch__closure[1];
    CliLaunchType_performLaunch__closure.prototype = $desc;
    CliLaunchType_performLaunch__closure.$__fields__ = ["_box_0", "launch"];
    function CliLaunchType_performLaunch_closure1(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    CliLaunchType_performLaunch_closure1.builtin$cls = "CliLaunchType_performLaunch_closure1";
    if (!("name" in CliLaunchType_performLaunch_closure1))
      CliLaunchType_performLaunch_closure1.name = "CliLaunchType_performLaunch_closure1";
    $desc = $collectedClasses$.CliLaunchType_performLaunch_closure1[1];
    CliLaunchType_performLaunch_closure1.prototype = $desc;
    CliLaunchType_performLaunch_closure1.$__fields__ = ["launch"];
    function CliLaunchType_performLaunch_closure2(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    CliLaunchType_performLaunch_closure2.builtin$cls = "CliLaunchType_performLaunch_closure2";
    if (!("name" in CliLaunchType_performLaunch_closure2))
      CliLaunchType_performLaunch_closure2.name = "CliLaunchType_performLaunch_closure2";
    $desc = $collectedClasses$.CliLaunchType_performLaunch_closure2[1];
    CliLaunchType_performLaunch_closure2.prototype = $desc;
    CliLaunchType_performLaunch_closure2.$__fields__ = ["launch"];
    function _CliLaunch(_resolver, launchType, launchConfiguration, name, title, targetName, manager, id, killHandler, cwd, exitCode, servicePort, _stdio, _debugConnection, _pathResolver) {
      this._resolver = _resolver;
      this.launchType = launchType;
      this.launchConfiguration = launchConfiguration;
      this.name = name;
      this.title = title;
      this.targetName = targetName;
      this.manager = manager;
      this.id = id;
      this.killHandler = killHandler;
      this.cwd = cwd;
      this.exitCode = exitCode;
      this.servicePort = servicePort;
      this._stdio = _stdio;
      this._debugConnection = _debugConnection;
      this._pathResolver = _pathResolver;
      this.$deferredAction();
    }
    _CliLaunch.builtin$cls = "_CliLaunch";
    if (!("name" in _CliLaunch))
      _CliLaunch.name = "_CliLaunch";
    $desc = $collectedClasses$._CliLaunch[1];
    _CliLaunch.prototype = $desc;
    _CliLaunch.$__fields__ = ["_resolver", "launchType", "launchConfiguration", "name", "title", "targetName", "manager", "id", "killHandler", "cwd", "exitCode", "servicePort", "_stdio", "_debugConnection", "_pathResolver"];
    function _CliLaunch_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _CliLaunch_closure.builtin$cls = "_CliLaunch_closure";
    if (!("name" in _CliLaunch_closure))
      _CliLaunch_closure.name = "_CliLaunch_closure";
    $desc = $collectedClasses$._CliLaunch_closure[1];
    _CliLaunch_closure.prototype = $desc;
    _CliLaunch_closure.$__fields__ = ["$this"];
    function LaunchConfigurationManager(_projectConfigs, _launchTimestamps, _launch_configs$_changeController) {
      this._projectConfigs = _projectConfigs;
      this._launchTimestamps = _launchTimestamps;
      this._launch_configs$_changeController = _launch_configs$_changeController;
      this.$deferredAction();
    }
    LaunchConfigurationManager.builtin$cls = "LaunchConfigurationManager";
    if (!("name" in LaunchConfigurationManager))
      LaunchConfigurationManager.name = "LaunchConfigurationManager";
    $desc = $collectedClasses$.LaunchConfigurationManager[1];
    LaunchConfigurationManager.prototype = $desc;
    LaunchConfigurationManager.$__fields__ = ["_projectConfigs", "_launchTimestamps", "_launch_configs$_changeController"];
    LaunchConfigurationManager.prototype.get$_launchTimestamps = function() {
      return this._launchTimestamps;
    };
    function LaunchConfigurationManager_getAllConfigs_closure() {
      this.$deferredAction();
    }
    LaunchConfigurationManager_getAllConfigs_closure.builtin$cls = "LaunchConfigurationManager_getAllConfigs_closure";
    if (!("name" in LaunchConfigurationManager_getAllConfigs_closure))
      LaunchConfigurationManager_getAllConfigs_closure.name = "LaunchConfigurationManager_getAllConfigs_closure";
    $desc = $collectedClasses$.LaunchConfigurationManager_getAllConfigs_closure[1];
    LaunchConfigurationManager_getAllConfigs_closure.prototype = $desc;
    LaunchConfigurationManager_getAllConfigs_closure.$__fields__ = [];
    function _createUniqueFilename_closure() {
      this.$deferredAction();
    }
    _createUniqueFilename_closure.builtin$cls = "_createUniqueFilename_closure";
    if (!("name" in _createUniqueFilename_closure))
      _createUniqueFilename_closure.name = "_createUniqueFilename_closure";
    $desc = $collectedClasses$._createUniqueFilename_closure[1];
    _createUniqueFilename_closure.prototype = $desc;
    _createUniqueFilename_closure.$__fields__ = [];
    function LaunchConfiguration(projectPath, _launch_configs$_file, _launch_configs$_map) {
      this.projectPath = projectPath;
      this._launch_configs$_file = _launch_configs$_file;
      this._launch_configs$_map = _launch_configs$_map;
      this.$deferredAction();
    }
    LaunchConfiguration.builtin$cls = "LaunchConfiguration";
    if (!("name" in LaunchConfiguration))
      LaunchConfiguration.name = "LaunchConfiguration";
    $desc = $collectedClasses$.LaunchConfiguration[1];
    LaunchConfiguration.prototype = $desc;
    LaunchConfiguration.$__fields__ = ["projectPath", "_launch_configs$_file", "_launch_configs$_map"];
    LaunchConfiguration.prototype.get$projectPath = function() {
      return this.projectPath;
    };
    function _ProjectConfigurations(projectPath, launchDir, _configs, _launch_configs$_sub) {
      this.projectPath = projectPath;
      this.launchDir = launchDir;
      this._configs = _configs;
      this._launch_configs$_sub = _launch_configs$_sub;
      this.$deferredAction();
    }
    _ProjectConfigurations.builtin$cls = "_ProjectConfigurations";
    if (!("name" in _ProjectConfigurations))
      _ProjectConfigurations.name = "_ProjectConfigurations";
    $desc = $collectedClasses$._ProjectConfigurations[1];
    _ProjectConfigurations.prototype = $desc;
    _ProjectConfigurations.$__fields__ = ["projectPath", "launchDir", "_configs", "_launch_configs$_sub"];
    _ProjectConfigurations.prototype.get$projectPath = function() {
      return this.projectPath;
    };
    function _ProjectConfigurations_createConfig_closure($this, contents, file) {
      this.$this = $this;
      this.contents = contents;
      this.file = file;
      this.$deferredAction();
    }
    _ProjectConfigurations_createConfig_closure.builtin$cls = "_ProjectConfigurations_createConfig_closure";
    if (!("name" in _ProjectConfigurations_createConfig_closure))
      _ProjectConfigurations_createConfig_closure.name = "_ProjectConfigurations_createConfig_closure";
    $desc = $collectedClasses$._ProjectConfigurations_createConfig_closure[1];
    _ProjectConfigurations_createConfig_closure.prototype = $desc;
    _ProjectConfigurations_createConfig_closure.$__fields__ = ["$this", "contents", "file"];
    function _ProjectConfigurations__listenToLaunchDir_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    _ProjectConfigurations__listenToLaunchDir_closure.builtin$cls = "_ProjectConfigurations__listenToLaunchDir_closure";
    if (!("name" in _ProjectConfigurations__listenToLaunchDir_closure))
      _ProjectConfigurations__listenToLaunchDir_closure.name = "_ProjectConfigurations__listenToLaunchDir_closure";
    $desc = $collectedClasses$._ProjectConfigurations__listenToLaunchDir_closure[1];
    _ProjectConfigurations__listenToLaunchDir_closure.prototype = $desc;
    _ProjectConfigurations__listenToLaunchDir_closure.$__fields__ = ["$this"];
    function ShellLaunchType(type) {
      this.type = type;
      this.$deferredAction();
    }
    ShellLaunchType.builtin$cls = "ShellLaunchType";
    if (!("name" in ShellLaunchType))
      ShellLaunchType.name = "ShellLaunchType";
    $desc = $collectedClasses$.ShellLaunchType[1];
    ShellLaunchType.prototype = $desc;
    ShellLaunchType.$__fields__ = ["type"];
    function ShellLaunchType_performLaunch_closure(runner) {
      this.runner = runner;
      this.$deferredAction();
    }
    ShellLaunchType_performLaunch_closure.builtin$cls = "ShellLaunchType_performLaunch_closure";
    if (!("name" in ShellLaunchType_performLaunch_closure))
      ShellLaunchType_performLaunch_closure.name = "ShellLaunchType_performLaunch_closure";
    $desc = $collectedClasses$.ShellLaunchType_performLaunch_closure[1];
    ShellLaunchType_performLaunch_closure.prototype = $desc;
    ShellLaunchType_performLaunch_closure.$__fields__ = ["runner"];
    function ShellLaunchType_performLaunch_closure0(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    ShellLaunchType_performLaunch_closure0.builtin$cls = "ShellLaunchType_performLaunch_closure0";
    if (!("name" in ShellLaunchType_performLaunch_closure0))
      ShellLaunchType_performLaunch_closure0.name = "ShellLaunchType_performLaunch_closure0";
    $desc = $collectedClasses$.ShellLaunchType_performLaunch_closure0[1];
    ShellLaunchType_performLaunch_closure0.prototype = $desc;
    ShellLaunchType_performLaunch_closure0.$__fields__ = ["launch"];
    function ShellLaunchType_performLaunch_closure1(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    ShellLaunchType_performLaunch_closure1.builtin$cls = "ShellLaunchType_performLaunch_closure1";
    if (!("name" in ShellLaunchType_performLaunch_closure1))
      ShellLaunchType_performLaunch_closure1.name = "ShellLaunchType_performLaunch_closure1";
    $desc = $collectedClasses$.ShellLaunchType_performLaunch_closure1[1];
    ShellLaunchType_performLaunch_closure1.prototype = $desc;
    ShellLaunchType_performLaunch_closure1.$__fields__ = ["launch"];
    function ShellLaunchType_performLaunch_closure2(launch) {
      this.launch = launch;
      this.$deferredAction();
    }
    ShellLaunchType_performLaunch_closure2.builtin$cls = "ShellLaunchType_performLaunch_closure2";
    if (!("name" in ShellLaunchType_performLaunch_closure2))
      ShellLaunchType_performLaunch_closure2.name = "ShellLaunchType_performLaunch_closure2";
    $desc = $collectedClasses$.ShellLaunchType_performLaunch_closure2[1];
    ShellLaunchType_performLaunch_closure2.prototype = $desc;
    ShellLaunchType_performLaunch_closure2.$__fields__ = ["launch"];
    function RunApplicationManager(disposables) {
      this.disposables = disposables;
      this.$deferredAction();
    }
    RunApplicationManager.builtin$cls = "RunApplicationManager";
    if (!("name" in RunApplicationManager))
      RunApplicationManager.name = "RunApplicationManager";
    $desc = $collectedClasses$.RunApplicationManager[1];
    RunApplicationManager.prototype = $desc;
    RunApplicationManager.$__fields__ = ["disposables"];
    function RunApplicationManager_closure() {
      this.$deferredAction();
    }
    RunApplicationManager_closure.builtin$cls = "RunApplicationManager_closure";
    if (!("name" in RunApplicationManager_closure))
      RunApplicationManager_closure.name = "RunApplicationManager_closure";
    $desc = $collectedClasses$.RunApplicationManager_closure[1];
    RunApplicationManager_closure.prototype = $desc;
    RunApplicationManager_closure.$__fields__ = [];
    function RunApplicationManager_closure0($this, stop) {
      this.$this = $this;
      this.stop = stop;
      this.$deferredAction();
    }
    RunApplicationManager_closure0.builtin$cls = "RunApplicationManager_closure0";
    if (!("name" in RunApplicationManager_closure0))
      RunApplicationManager_closure0.name = "RunApplicationManager_closure0";
    $desc = $collectedClasses$.RunApplicationManager_closure0[1];
    RunApplicationManager_closure0.prototype = $desc;
    RunApplicationManager_closure0.$__fields__ = ["$this", "stop"];
    function RunApplicationManager_closure1($this, stop) {
      this.$this = $this;
      this.stop = stop;
      this.$deferredAction();
    }
    RunApplicationManager_closure1.builtin$cls = "RunApplicationManager_closure1";
    if (!("name" in RunApplicationManager_closure1))
      RunApplicationManager_closure1.name = "RunApplicationManager_closure1";
    $desc = $collectedClasses$.RunApplicationManager_closure1[1];
    RunApplicationManager_closure1.prototype = $desc;
    RunApplicationManager_closure1.$__fields__ = ["$this", "stop"];
    function RunApplicationManager_closure2($this, stop) {
      this.$this = $this;
      this.stop = stop;
      this.$deferredAction();
    }
    RunApplicationManager_closure2.builtin$cls = "RunApplicationManager_closure2";
    if (!("name" in RunApplicationManager_closure2))
      RunApplicationManager_closure2.name = "RunApplicationManager_closure2";
    $desc = $collectedClasses$.RunApplicationManager_closure2[1];
    RunApplicationManager_closure2.prototype = $desc;
    RunApplicationManager_closure2.$__fields__ = ["$this", "stop"];
    function RunApplicationManager_closure3($this, stop) {
      this.$this = $this;
      this.stop = stop;
      this.$deferredAction();
    }
    RunApplicationManager_closure3.builtin$cls = "RunApplicationManager_closure3";
    if (!("name" in RunApplicationManager_closure3))
      RunApplicationManager_closure3.name = "RunApplicationManager_closure3";
    $desc = $collectedClasses$.RunApplicationManager_closure3[1];
    RunApplicationManager_closure3.prototype = $desc;
    RunApplicationManager_closure3.$__fields__ = ["$this", "stop"];
    function RunApplicationManager__handleRunCommand_closure(path) {
      this.path = path;
      this.$deferredAction();
    }
    RunApplicationManager__handleRunCommand_closure.builtin$cls = "RunApplicationManager__handleRunCommand_closure";
    if (!("name" in RunApplicationManager__handleRunCommand_closure))
      RunApplicationManager__handleRunCommand_closure.name = "RunApplicationManager__handleRunCommand_closure";
    $desc = $collectedClasses$.RunApplicationManager__handleRunCommand_closure[1];
    RunApplicationManager__handleRunCommand_closure.prototype = $desc;
    RunApplicationManager__handleRunCommand_closure.$__fields__ = ["path"];
    function RunApplicationManager__handleFullRestartCommand_closure() {
      this.$deferredAction();
    }
    RunApplicationManager__handleFullRestartCommand_closure.builtin$cls = "RunApplicationManager__handleFullRestartCommand_closure";
    if (!("name" in RunApplicationManager__handleFullRestartCommand_closure))
      RunApplicationManager__handleFullRestartCommand_closure.name = "RunApplicationManager__handleFullRestartCommand_closure";
    $desc = $collectedClasses$.RunApplicationManager__handleFullRestartCommand_closure[1];
    RunApplicationManager__handleFullRestartCommand_closure.prototype = $desc;
    RunApplicationManager__handleFullRestartCommand_closure.$__fields__ = [];
    function RunApplicationManager_run_closure(config) {
      this.config = config;
      this.$deferredAction();
    }
    RunApplicationManager_run_closure.builtin$cls = "RunApplicationManager_run_closure";
    if (!("name" in RunApplicationManager_run_closure))
      RunApplicationManager_run_closure.name = "RunApplicationManager_run_closure";
    $desc = $collectedClasses$.RunApplicationManager_run_closure[1];
    RunApplicationManager_run_closure.prototype = $desc;
    RunApplicationManager_run_closure.$__fields__ = ["config"];
    function WorkspaceLaunchManager(disposeable, subs, _selectedRunnable, _runnables, _currentFile, _selectedRunnableController, _runnablesController) {
      this.disposeable = disposeable;
      this.subs = subs;
      this._selectedRunnable = _selectedRunnable;
      this._runnables = _runnables;
      this._currentFile = _currentFile;
      this._selectedRunnableController = _selectedRunnableController;
      this._runnablesController = _runnablesController;
      this.$deferredAction();
    }
    WorkspaceLaunchManager.builtin$cls = "WorkspaceLaunchManager";
    if (!("name" in WorkspaceLaunchManager))
      WorkspaceLaunchManager.name = "WorkspaceLaunchManager";
    $desc = $collectedClasses$.WorkspaceLaunchManager[1];
    WorkspaceLaunchManager.prototype = $desc;
    WorkspaceLaunchManager.$__fields__ = ["disposeable", "subs", "_selectedRunnable", "_runnables", "_currentFile", "_selectedRunnableController", "_runnablesController"];
    function WorkspaceLaunchManager_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    WorkspaceLaunchManager_closure.builtin$cls = "WorkspaceLaunchManager_closure";
    if (!("name" in WorkspaceLaunchManager_closure))
      WorkspaceLaunchManager_closure.name = "WorkspaceLaunchManager_closure";
    $desc = $collectedClasses$.WorkspaceLaunchManager_closure[1];
    WorkspaceLaunchManager_closure.prototype = $desc;
    WorkspaceLaunchManager_closure.$__fields__ = ["$this"];
    function WorkspaceLaunchManager_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    WorkspaceLaunchManager_closure0.builtin$cls = "WorkspaceLaunchManager_closure0";
    if (!("name" in WorkspaceLaunchManager_closure0))
      WorkspaceLaunchManager_closure0.name = "WorkspaceLaunchManager_closure0";
    $desc = $collectedClasses$.WorkspaceLaunchManager_closure0[1];
    WorkspaceLaunchManager_closure0.prototype = $desc;
    WorkspaceLaunchManager_closure0.$__fields__ = ["$this"];
    function WorkspaceLaunchManager_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    WorkspaceLaunchManager_closure1.builtin$cls = "WorkspaceLaunchManager_closure1";
    if (!("name" in WorkspaceLaunchManager_closure1))
      WorkspaceLaunchManager_closure1.name = "WorkspaceLaunchManager_closure1";
    $desc = $collectedClasses$.WorkspaceLaunchManager_closure1[1];
    WorkspaceLaunchManager_closure1.prototype = $desc;
    WorkspaceLaunchManager_closure1.$__fields__ = ["$this"];
    function WorkspaceLaunchManager__updateFromActiveEditor_closure() {
      this.$deferredAction();
    }
    WorkspaceLaunchManager__updateFromActiveEditor_closure.builtin$cls = "WorkspaceLaunchManager__updateFromActiveEditor_closure";
    if (!("name" in WorkspaceLaunchManager__updateFromActiveEditor_closure))
      WorkspaceLaunchManager__updateFromActiveEditor_closure.name = "WorkspaceLaunchManager__updateFromActiveEditor_closure";
    $desc = $collectedClasses$.WorkspaceLaunchManager__updateFromActiveEditor_closure[1];
    WorkspaceLaunchManager__updateFromActiveEditor_closure.prototype = $desc;
    WorkspaceLaunchManager__updateFromActiveEditor_closure.$__fields__ = [];
    function WorkspaceLaunchManager__updateFromActiveEditor_closure0() {
      this.$deferredAction();
    }
    WorkspaceLaunchManager__updateFromActiveEditor_closure0.builtin$cls = "WorkspaceLaunchManager__updateFromActiveEditor_closure0";
    if (!("name" in WorkspaceLaunchManager__updateFromActiveEditor_closure0))
      WorkspaceLaunchManager__updateFromActiveEditor_closure0.name = "WorkspaceLaunchManager__updateFromActiveEditor_closure0";
    $desc = $collectedClasses$.WorkspaceLaunchManager__updateFromActiveEditor_closure0[1];
    WorkspaceLaunchManager__updateFromActiveEditor_closure0.prototype = $desc;
    WorkspaceLaunchManager__updateFromActiveEditor_closure0.$__fields__ = [];
    function RunnableConfig(_launchable, _run$_config) {
      this._launchable = _launchable;
      this._run$_config = _run$_config;
      this.$deferredAction();
    }
    RunnableConfig.builtin$cls = "RunnableConfig";
    if (!("name" in RunnableConfig))
      RunnableConfig.name = "RunnableConfig";
    $desc = $collectedClasses$.RunnableConfig[1];
    RunnableConfig.prototype = $desc;
    RunnableConfig.$__fields__ = ["_launchable", "_run$_config"];
    function _RunAppContextCommand(label, command) {
      this.label = label;
      this.command = command;
      this.$deferredAction();
    }
    _RunAppContextCommand.builtin$cls = "_RunAppContextCommand";
    if (!("name" in _RunAppContextCommand))
      _RunAppContextCommand.name = "_RunAppContextCommand";
    $desc = $collectedClasses$._RunAppContextCommand[1];
    _RunAppContextCommand.prototype = $desc;
    _RunAppContextCommand.$__fields__ = ["label", "command"];
    function DartLinterProvider(grammarScopes, scope, lintOnFly, _key) {
      this.grammarScopes = grammarScopes;
      this.scope = scope;
      this.lintOnFly = lintOnFly;
      this._key = _key;
      this.$deferredAction();
    }
    DartLinterProvider.builtin$cls = "DartLinterProvider";
    if (!("name" in DartLinterProvider))
      DartLinterProvider.name = "DartLinterProvider";
    $desc = $collectedClasses$.DartLinterProvider[1];
    DartLinterProvider.prototype = $desc;
    DartLinterProvider.$__fields__ = ["grammarScopes", "scope", "lintOnFly", "_key"];
    function DartLinterConsumer(_errorRepository, _reportingDelay, _provider, _service, _linter$_disposables, _oldIssues) {
      this._errorRepository = _errorRepository;
      this._reportingDelay = _reportingDelay;
      this._provider = _provider;
      this._service = _service;
      this._linter$_disposables = _linter$_disposables;
      this._oldIssues = _oldIssues;
      this.$deferredAction();
    }
    DartLinterConsumer.builtin$cls = "DartLinterConsumer";
    if (!("name" in DartLinterConsumer))
      DartLinterConsumer.name = "DartLinterConsumer";
    $desc = $collectedClasses$.DartLinterConsumer[1];
    DartLinterConsumer.prototype = $desc;
    DartLinterConsumer.$__fields__ = ["_errorRepository", "_reportingDelay", "_provider", "_service", "_linter$_disposables", "_oldIssues"];
    function DartLinterConsumer_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DartLinterConsumer_closure.builtin$cls = "DartLinterConsumer_closure";
    if (!("name" in DartLinterConsumer_closure))
      DartLinterConsumer_closure.name = "DartLinterConsumer_closure";
    $desc = $collectedClasses$.DartLinterConsumer_closure[1];
    DartLinterConsumer_closure.prototype = $desc;
    DartLinterConsumer_closure.$__fields__ = ["$this"];
    function DartLinterConsumer__regenErrors_closure(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    DartLinterConsumer__regenErrors_closure.builtin$cls = "DartLinterConsumer__regenErrors_closure";
    if (!("name" in DartLinterConsumer__regenErrors_closure))
      DartLinterConsumer__regenErrors_closure.name = "DartLinterConsumer__regenErrors_closure";
    $desc = $collectedClasses$.DartLinterConsumer__regenErrors_closure[1];
    DartLinterConsumer__regenErrors_closure.prototype = $desc;
    DartLinterConsumer__regenErrors_closure.$__fields__ = ["_box_0", "$this"];
    function DartLinterConsumer__filter_closure(showInfos, showTodos) {
      this.showInfos = showInfos;
      this.showTodos = showTodos;
      this.$deferredAction();
    }
    DartLinterConsumer__filter_closure.builtin$cls = "DartLinterConsumer__filter_closure";
    if (!("name" in DartLinterConsumer__filter_closure))
      DartLinterConsumer__filter_closure.name = "DartLinterConsumer__filter_closure";
    $desc = $collectedClasses$.DartLinterConsumer__filter_closure[1];
    DartLinterConsumer__filter_closure.prototype = $desc;
    DartLinterConsumer__filter_closure.$__fields__ = ["showInfos", "showTodos"];
    function DartLinterConsumer__emit_closure() {
      this.$deferredAction();
    }
    DartLinterConsumer__emit_closure.builtin$cls = "DartLinterConsumer__emit_closure";
    if (!("name" in DartLinterConsumer__emit_closure))
      DartLinterConsumer__emit_closure.name = "DartLinterConsumer__emit_closure";
    $desc = $collectedClasses$.DartLinterConsumer__emit_closure[1];
    DartLinterConsumer__emit_closure.prototype = $desc;
    DartLinterConsumer__emit_closure.$__fields__ = [];
    function MIconButton(iconName, element) {
      this.iconName = iconName;
      this.element = element;
      this.$deferredAction();
    }
    MIconButton.builtin$cls = "MIconButton";
    if (!("name" in MIconButton))
      MIconButton.name = "MIconButton";
    $desc = $collectedClasses$.MIconButton[1];
    MIconButton.prototype = $desc;
    MIconButton.$__fields__ = ["iconName", "element"];
    function MTabGroup(tabs, _tabContainer, _contentContainer, _activeTab, element) {
      this.tabs = tabs;
      this._tabContainer = _tabContainer;
      this._contentContainer = _contentContainer;
      this._activeTab = _activeTab;
      this.element = element;
      this.$deferredAction();
    }
    MTabGroup.builtin$cls = "MTabGroup";
    if (!("name" in MTabGroup))
      MTabGroup.name = "MTabGroup";
    $desc = $collectedClasses$.MTabGroup[1];
    MTabGroup.prototype = $desc;
    MTabGroup.$__fields__ = ["tabs", "_tabContainer", "_contentContainer", "_activeTab", "element"];
    function MTabGroup__handleTabAdd_closure($this, tab) {
      this.$this = $this;
      this.tab = tab;
      this.$deferredAction();
    }
    MTabGroup__handleTabAdd_closure.builtin$cls = "MTabGroup__handleTabAdd_closure";
    if (!("name" in MTabGroup__handleTabAdd_closure))
      MTabGroup__handleTabAdd_closure.name = "MTabGroup__handleTabAdd_closure";
    $desc = $collectedClasses$.MTabGroup__handleTabAdd_closure[1];
    MTabGroup__handleTabAdd_closure.prototype = $desc;
    MTabGroup__handleTabAdd_closure.$__fields__ = ["$this", "tab"];
    function MTabGroup_hasTabId_closure(id) {
      this.id = id;
      this.$deferredAction();
    }
    MTabGroup_hasTabId_closure.builtin$cls = "MTabGroup_hasTabId_closure";
    if (!("name" in MTabGroup_hasTabId_closure))
      MTabGroup_hasTabId_closure.name = "MTabGroup_hasTabId_closure";
    $desc = $collectedClasses$.MTabGroup_hasTabId_closure[1];
    MTabGroup_hasTabId_closure.prototype = $desc;
    MTabGroup_hasTabId_closure.$__fields__ = ["id"];
    function MTab(id, name, _tabElement, content, active) {
      this.id = id;
      this.name = name;
      this._tabElement = _tabElement;
      this.content = content;
      this.active = active;
      this.$deferredAction();
    }
    MTab.builtin$cls = "MTab";
    if (!("name" in MTab))
      MTab.name = "MTab";
    $desc = $collectedClasses$.MTab[1];
    MTab.prototype = $desc;
    MTab.$__fields__ = ["id", "name", "_tabElement", "content", "active"];
    MTab.prototype.get$id = function(receiver) {
      return this.id;
    };
    MTab.prototype.get$name = function(receiver) {
      return this.name;
    };
    MTab.prototype.get$_tabElement = function() {
      return this._tabElement;
    };
    MTab.prototype.get$content = function(receiver) {
      return this.content;
    };
    MTab.prototype.get$active = function(receiver) {
      return this.active;
    };
    function MTab_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    MTab_closure.builtin$cls = "MTab_closure";
    if (!("name" in MTab_closure))
      MTab_closure.name = "MTab_closure";
    $desc = $collectedClasses$.MTab_closure[1];
    MTab_closure.prototype = $desc;
    MTab_closure.$__fields__ = ["$this"];
    function MList(renderer, sort, filter, selectedItem, _ul, _itemToElement, _singleClick, _material$_doubleClick, element, $ti) {
      this.renderer = renderer;
      this.sort = sort;
      this.filter = filter;
      this.selectedItem = selectedItem;
      this._ul = _ul;
      this._itemToElement = _itemToElement;
      this._singleClick = _singleClick;
      this._material$_doubleClick = _material$_doubleClick;
      this.element = element;
      this.$ti = $ti;
      this.$deferredAction();
    }
    MList.builtin$cls = "MList";
    if (!("name" in MList))
      MList.name = "MList";
    $desc = $collectedClasses$.MList[1];
    MList.prototype = $desc;
    MList.$__fields__ = ["renderer", "sort", "filter", "selectedItem", "_ul", "_itemToElement", "_singleClick", "_material$_doubleClick", "element"];
    function MList_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    MList_closure.builtin$cls = "MList_closure";
    if (!("name" in MList_closure))
      MList_closure.name = "MList_closure";
    $desc = $collectedClasses$.MList_closure[1];
    MList_closure.prototype = $desc;
    MList_closure.$__fields__ = ["$this"];
    function MList_update_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    MList_update_closure.builtin$cls = "MList_update_closure";
    if (!("name" in MList_update_closure))
      MList_update_closure.name = "MList_update_closure";
    $desc = $collectedClasses$.MList_update_closure[1];
    MList_update_closure.prototype = $desc;
    MList_update_closure.$__fields__ = ["$this"];
    function MList__populateChildren_closure($this, item) {
      this.$this = $this;
      this.item = item;
      this.$deferredAction();
    }
    MList__populateChildren_closure.builtin$cls = "MList__populateChildren_closure";
    if (!("name" in MList__populateChildren_closure))
      MList__populateChildren_closure.name = "MList__populateChildren_closure";
    $desc = $collectedClasses$.MList__populateChildren_closure[1];
    MList__populateChildren_closure.prototype = $desc;
    MList__populateChildren_closure.$__fields__ = ["$this", "item"];
    function MList__populateChildren_closure0($this, item) {
      this.$this = $this;
      this.item = item;
      this.$deferredAction();
    }
    MList__populateChildren_closure0.builtin$cls = "MList__populateChildren_closure0";
    if (!("name" in MList__populateChildren_closure0))
      MList__populateChildren_closure0.name = "MList__populateChildren_closure0";
    $desc = $collectedClasses$.MList__populateChildren_closure0[1];
    MList__populateChildren_closure0.prototype = $desc;
    MList__populateChildren_closure0.$__fields__ = ["$this", "item"];
    function TreeModel($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    TreeModel.builtin$cls = "TreeModel";
    if (!("name" in TreeModel))
      TreeModel.name = "TreeModel";
    $desc = $collectedClasses$.TreeModel[1];
    TreeModel.prototype = $desc;
    TreeModel.$__fields__ = [];
    function MTree(treeModel, renderer, sort, filter, selectedItem, _ul, _itemToElement, _singleClick, _material$_doubleClick, element, $ti) {
      this.treeModel = treeModel;
      this.renderer = renderer;
      this.sort = sort;
      this.filter = filter;
      this.selectedItem = selectedItem;
      this._ul = _ul;
      this._itemToElement = _itemToElement;
      this._singleClick = _singleClick;
      this._material$_doubleClick = _material$_doubleClick;
      this.element = element;
      this.$ti = $ti;
      this.$deferredAction();
    }
    MTree.builtin$cls = "MTree";
    if (!("name" in MTree))
      MTree.name = "MTree";
    $desc = $collectedClasses$.MTree[1];
    MTree.prototype = $desc;
    MTree.$__fields__ = ["treeModel", "renderer", "sort", "filter", "selectedItem", "_ul", "_itemToElement", "_singleClick", "_material$_doubleClick", "element"];
    function MTree__render_closure(_box_0, $this, item, element) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.item = item;
      this.element = element;
      this.$deferredAction();
    }
    MTree__render_closure.builtin$cls = "MTree__render_closure";
    if (!("name" in MTree__render_closure))
      MTree__render_closure.name = "MTree__render_closure";
    $desc = $collectedClasses$.MTree__render_closure[1];
    MTree__render_closure.prototype = $desc;
    MTree__render_closure.$__fields__ = ["_box_0", "$this", "item", "element"];
    function MTree__render__closure(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    MTree__render__closure.builtin$cls = "MTree__render__closure";
    if (!("name" in MTree__render__closure))
      MTree__render__closure.name = "MTree__render__closure";
    $desc = $collectedClasses$.MTree__render__closure[1];
    MTree__render__closure.prototype = $desc;
    MTree__render__closure.$__fields__ = ["_box_0", "$this"];
    function MTree__render__closure0() {
      this.$deferredAction();
    }
    MTree__render__closure0.builtin$cls = "MTree__render__closure0";
    if (!("name" in MTree__render__closure0))
      MTree__render__closure0.name = "MTree__render__closure0";
    $desc = $collectedClasses$.MTree__render__closure0[1];
    MTree__render__closure0.prototype = $desc;
    MTree__render__closure0.$__fields__ = [];
    function AtomDartPackage(disposables, subscriptions, errorsController, consoleController, _consumer, _registeredMethods, id) {
      this.disposables = disposables;
      this.subscriptions = subscriptions;
      this.errorsController = errorsController;
      this.consoleController = consoleController;
      this._consumer = _consumer;
      this._registeredMethods = _registeredMethods;
      this.id = id;
      this.$deferredAction();
    }
    AtomDartPackage.builtin$cls = "AtomDartPackage";
    if (!("name" in AtomDartPackage))
      AtomDartPackage.name = "AtomDartPackage";
    $desc = $collectedClasses$.AtomDartPackage[1];
    AtomDartPackage.prototype = $desc;
    AtomDartPackage.$__fields__ = ["disposables", "subscriptions", "errorsController", "consoleController", "_consumer", "_registeredMethods", "id"];
    function AtomDartPackage_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    AtomDartPackage_closure.builtin$cls = "AtomDartPackage_closure";
    if (!("name" in AtomDartPackage_closure))
      AtomDartPackage_closure.name = "AtomDartPackage_closure";
    $desc = $collectedClasses$.AtomDartPackage_closure[1];
    AtomDartPackage_closure.prototype = $desc;
    AtomDartPackage_closure.$__fields__ = ["$this"];
    function AtomDartPackage_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    AtomDartPackage_closure0.builtin$cls = "AtomDartPackage_closure0";
    if (!("name" in AtomDartPackage_closure0))
      AtomDartPackage_closure0.name = "AtomDartPackage_closure0";
    $desc = $collectedClasses$.AtomDartPackage_closure0[1];
    AtomDartPackage_closure0.prototype = $desc;
    AtomDartPackage_closure0.$__fields__ = ["$this"];
    function AtomDartPackage_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    AtomDartPackage_closure1.builtin$cls = "AtomDartPackage_closure1";
    if (!("name" in AtomDartPackage_closure1))
      AtomDartPackage_closure1.name = "AtomDartPackage_closure1";
    $desc = $collectedClasses$.AtomDartPackage_closure1[1];
    AtomDartPackage_closure1.prototype = $desc;
    AtomDartPackage_closure1.$__fields__ = ["$this"];
    function AtomDartPackage_closure2(dartCompleterProvider) {
      this.dartCompleterProvider = dartCompleterProvider;
      this.$deferredAction();
    }
    AtomDartPackage_closure2.builtin$cls = "AtomDartPackage_closure2";
    if (!("name" in AtomDartPackage_closure2))
      AtomDartPackage_closure2.name = "AtomDartPackage_closure2";
    $desc = $collectedClasses$.AtomDartPackage_closure2[1];
    AtomDartPackage_closure2.prototype = $desc;
    AtomDartPackage_closure2.$__fields__ = ["dartCompleterProvider"];
    function AtomDartPackage_activate_closure() {
      this.$deferredAction();
    }
    AtomDartPackage_activate_closure.builtin$cls = "AtomDartPackage_activate_closure";
    if (!("name" in AtomDartPackage_activate_closure))
      AtomDartPackage_activate_closure.name = "AtomDartPackage_activate_closure";
    $desc = $collectedClasses$.AtomDartPackage_activate_closure[1];
    AtomDartPackage_activate_closure.prototype = $desc;
    AtomDartPackage_activate_closure.$__fields__ = [];
    function AtomDartPackage_activate_closure0() {
      this.$deferredAction();
    }
    AtomDartPackage_activate_closure0.builtin$cls = "AtomDartPackage_activate_closure0";
    if (!("name" in AtomDartPackage_activate_closure0))
      AtomDartPackage_activate_closure0.name = "AtomDartPackage_activate_closure0";
    $desc = $collectedClasses$.AtomDartPackage_activate_closure0[1];
    AtomDartPackage_activate_closure0.prototype = $desc;
    AtomDartPackage_activate_closure0.$__fields__ = [];
    function AtomDartPackage_activate_closure1() {
      this.$deferredAction();
    }
    AtomDartPackage_activate_closure1.builtin$cls = "AtomDartPackage_activate_closure1";
    if (!("name" in AtomDartPackage_activate_closure1))
      AtomDartPackage_activate_closure1.name = "AtomDartPackage_activate_closure1";
    $desc = $collectedClasses$.AtomDartPackage_activate_closure1[1];
    AtomDartPackage_activate_closure1.prototype = $desc;
    AtomDartPackage_activate_closure1.$__fields__ = [];
    function AtomDartPackage_activate__closure() {
      this.$deferredAction();
    }
    AtomDartPackage_activate__closure.builtin$cls = "AtomDartPackage_activate__closure";
    if (!("name" in AtomDartPackage_activate__closure))
      AtomDartPackage_activate__closure.name = "AtomDartPackage_activate__closure";
    $desc = $collectedClasses$.AtomDartPackage_activate__closure[1];
    AtomDartPackage_activate__closure.prototype = $desc;
    AtomDartPackage_activate__closure.$__fields__ = [];
    function AtomDartPackage_activate__closure0() {
      this.$deferredAction();
    }
    AtomDartPackage_activate__closure0.builtin$cls = "AtomDartPackage_activate__closure0";
    if (!("name" in AtomDartPackage_activate__closure0))
      AtomDartPackage_activate__closure0.name = "AtomDartPackage_activate__closure0";
    $desc = $collectedClasses$.AtomDartPackage_activate__closure0[1];
    AtomDartPackage_activate__closure0.prototype = $desc;
    AtomDartPackage_activate__closure0.$__fields__ = [];
    function AtomDartPackage_activate_closure2($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    AtomDartPackage_activate_closure2.builtin$cls = "AtomDartPackage_activate_closure2";
    if (!("name" in AtomDartPackage_activate_closure2))
      AtomDartPackage_activate_closure2.name = "AtomDartPackage_activate_closure2";
    $desc = $collectedClasses$.AtomDartPackage_activate_closure2[1];
    AtomDartPackage_activate_closure2.prototype = $desc;
    AtomDartPackage_activate_closure2.$__fields__ = ["$this"];
    function AtomDartPackage__validateSettings_closure() {
      this.$deferredAction();
    }
    AtomDartPackage__validateSettings_closure.builtin$cls = "AtomDartPackage__validateSettings_closure";
    if (!("name" in AtomDartPackage__validateSettings_closure))
      AtomDartPackage__validateSettings_closure.name = "AtomDartPackage__validateSettings_closure";
    $desc = $collectedClasses$.AtomDartPackage__validateSettings_closure[1];
    AtomDartPackage__validateSettings_closure.prototype = $desc;
    AtomDartPackage__validateSettings_closure.$__fields__ = [];
    function AtomDartPackage__validateSettings_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    AtomDartPackage__validateSettings_closure0.builtin$cls = "AtomDartPackage__validateSettings_closure0";
    if (!("name" in AtomDartPackage__validateSettings_closure0))
      AtomDartPackage__validateSettings_closure0.name = "AtomDartPackage__validateSettings_closure0";
    $desc = $collectedClasses$.AtomDartPackage__validateSettings_closure0[1];
    AtomDartPackage__validateSettings_closure0.prototype = $desc;
    AtomDartPackage__validateSettings_closure0.$__fields__ = ["$this"];
    function AtomDartPackage__handleSendFeedback_closure() {
      this.$deferredAction();
    }
    AtomDartPackage__handleSendFeedback_closure.builtin$cls = "AtomDartPackage__handleSendFeedback_closure";
    if (!("name" in AtomDartPackage__handleSendFeedback_closure))
      AtomDartPackage__handleSendFeedback_closure.name = "AtomDartPackage__handleSendFeedback_closure";
    $desc = $collectedClasses$.AtomDartPackage__handleSendFeedback_closure[1];
    AtomDartPackage__handleSendFeedback_closure.prototype = $desc;
    AtomDartPackage__handleSendFeedback_closure.$__fields__ = [];
    function AtomDartPackage__registerLinter_closure(errorController, flushController) {
      this.errorController = errorController;
      this.flushController = flushController;
      this.$deferredAction();
    }
    AtomDartPackage__registerLinter_closure.builtin$cls = "AtomDartPackage__registerLinter_closure";
    if (!("name" in AtomDartPackage__registerLinter_closure))
      AtomDartPackage__registerLinter_closure.name = "AtomDartPackage__registerLinter_closure";
    $desc = $collectedClasses$.AtomDartPackage__registerLinter_closure[1];
    AtomDartPackage__registerLinter_closure.prototype = $desc;
    AtomDartPackage__registerLinter_closure.$__fields__ = ["errorController", "flushController"];
    function AtomDartPackage__registerLinter_closure0() {
      this.$deferredAction();
    }
    AtomDartPackage__registerLinter_closure0.builtin$cls = "AtomDartPackage__registerLinter_closure0";
    if (!("name" in AtomDartPackage__registerLinter_closure0))
      AtomDartPackage__registerLinter_closure0.name = "AtomDartPackage__registerLinter_closure0";
    $desc = $collectedClasses$.AtomDartPackage__registerLinter_closure0[1];
    AtomDartPackage__registerLinter_closure0.prototype = $desc;
    AtomDartPackage__registerLinter_closure0.$__fields__ = [];
    function AtomDartPackage__registerLinter_closure1(registerListeners) {
      this.registerListeners = registerListeners;
      this.$deferredAction();
    }
    AtomDartPackage__registerLinter_closure1.builtin$cls = "AtomDartPackage__registerLinter_closure1";
    if (!("name" in AtomDartPackage__registerLinter_closure1))
      AtomDartPackage__registerLinter_closure1.name = "AtomDartPackage__registerLinter_closure1";
    $desc = $collectedClasses$.AtomDartPackage__registerLinter_closure1[1];
    AtomDartPackage__registerLinter_closure1.prototype = $desc;
    AtomDartPackage__registerLinter_closure1.$__fields__ = ["registerListeners"];
    function AtomDartPackage__setupLogging_closure() {
      this.$deferredAction();
    }
    AtomDartPackage__setupLogging_closure.builtin$cls = "AtomDartPackage__setupLogging_closure";
    if (!("name" in AtomDartPackage__setupLogging_closure))
      AtomDartPackage__setupLogging_closure.name = "AtomDartPackage__setupLogging_closure";
    $desc = $collectedClasses$.AtomDartPackage__setupLogging_closure[1];
    AtomDartPackage__setupLogging_closure.prototype = $desc;
    AtomDartPackage__setupLogging_closure.$__fields__ = [];
    function ProjectManager(_projectsController, _projectAddController, _projectRemoveController, _nonProjectController, _projects$_sub, disposables, _directoryListeners, projects, _warnedProjects) {
      this._projectsController = _projectsController;
      this._projectAddController = _projectAddController;
      this._projectRemoveController = _projectRemoveController;
      this._nonProjectController = _nonProjectController;
      this._projects$_sub = _projects$_sub;
      this.disposables = disposables;
      this._directoryListeners = _directoryListeners;
      this.projects = projects;
      this._warnedProjects = _warnedProjects;
      this.$deferredAction();
    }
    ProjectManager.builtin$cls = "ProjectManager";
    if (!("name" in ProjectManager))
      ProjectManager.name = "ProjectManager";
    $desc = $collectedClasses$.ProjectManager[1];
    ProjectManager.prototype = $desc;
    ProjectManager.$__fields__ = ["_projectsController", "_projectAddController", "_projectRemoveController", "_nonProjectController", "_projects$_sub", "disposables", "_directoryListeners", "projects", "_warnedProjects"];
    ProjectManager.prototype.get$projects = function() {
      return this.projects;
    };
    function ProjectManager_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ProjectManager_closure.builtin$cls = "ProjectManager_closure";
    if (!("name" in ProjectManager_closure))
      ProjectManager_closure.name = "ProjectManager_closure";
    $desc = $collectedClasses$.ProjectManager_closure[1];
    ProjectManager_closure.prototype = $desc;
    ProjectManager_closure.$__fields__ = ["$this"];
    function ProjectManager_dispose_closure() {
      this.$deferredAction();
    }
    ProjectManager_dispose_closure.builtin$cls = "ProjectManager_dispose_closure";
    if (!("name" in ProjectManager_dispose_closure))
      ProjectManager_dispose_closure.name = "ProjectManager_dispose_closure";
    $desc = $collectedClasses$.ProjectManager_dispose_closure[1];
    ProjectManager_dispose_closure.prototype = $desc;
    ProjectManager_dispose_closure.$__fields__ = [];
    function ProjectManager__fullScanForProjects_closure() {
      this.$deferredAction();
    }
    ProjectManager__fullScanForProjects_closure.builtin$cls = "ProjectManager__fullScanForProjects_closure";
    if (!("name" in ProjectManager__fullScanForProjects_closure))
      ProjectManager__fullScanForProjects_closure.name = "ProjectManager__fullScanForProjects_closure";
    $desc = $collectedClasses$.ProjectManager__fullScanForProjects_closure[1];
    ProjectManager__fullScanForProjects_closure.prototype = $desc;
    ProjectManager__fullScanForProjects_closure.$__fields__ = [];
    function ProjectManager__fullScanForProjects_closure0(dir) {
      this.dir = dir;
      this.$deferredAction();
    }
    ProjectManager__fullScanForProjects_closure0.builtin$cls = "ProjectManager__fullScanForProjects_closure0";
    if (!("name" in ProjectManager__fullScanForProjects_closure0))
      ProjectManager__fullScanForProjects_closure0.name = "ProjectManager__fullScanForProjects_closure0";
    $desc = $collectedClasses$.ProjectManager__fullScanForProjects_closure0[1];
    ProjectManager__fullScanForProjects_closure0.prototype = $desc;
    ProjectManager__fullScanForProjects_closure0.$__fields__ = ["dir"];
    function ProjectManager__fullScanForProjects_closure1() {
      this.$deferredAction();
    }
    ProjectManager__fullScanForProjects_closure1.builtin$cls = "ProjectManager__fullScanForProjects_closure1";
    if (!("name" in ProjectManager__fullScanForProjects_closure1))
      ProjectManager__fullScanForProjects_closure1.name = "ProjectManager__fullScanForProjects_closure1";
    $desc = $collectedClasses$.ProjectManager__fullScanForProjects_closure1[1];
    ProjectManager__fullScanForProjects_closure1.prototype = $desc;
    ProjectManager__fullScanForProjects_closure1.$__fields__ = [];
    function ProjectManager__fullScanForProjects_closure2() {
      this.$deferredAction();
    }
    ProjectManager__fullScanForProjects_closure2.builtin$cls = "ProjectManager__fullScanForProjects_closure2";
    if (!("name" in ProjectManager__fullScanForProjects_closure2))
      ProjectManager__fullScanForProjects_closure2.name = "ProjectManager__fullScanForProjects_closure2";
    $desc = $collectedClasses$.ProjectManager__fullScanForProjects_closure2[1];
    ProjectManager__fullScanForProjects_closure2.prototype = $desc;
    ProjectManager__fullScanForProjects_closure2.$__fields__ = [];
    function ProjectManager__updateChangeListeners_closure($this, dir) {
      this.$this = $this;
      this.dir = dir;
      this.$deferredAction();
    }
    ProjectManager__updateChangeListeners_closure.builtin$cls = "ProjectManager__updateChangeListeners_closure";
    if (!("name" in ProjectManager__updateChangeListeners_closure))
      ProjectManager__updateChangeListeners_closure.name = "ProjectManager__updateChangeListeners_closure";
    $desc = $collectedClasses$.ProjectManager__updateChangeListeners_closure[1];
    ProjectManager__updateChangeListeners_closure.prototype = $desc;
    ProjectManager__updateChangeListeners_closure.$__fields__ = ["$this", "dir"];
    function ProjectManager__handleDirectoryChanged_closure(dir) {
      this.dir = dir;
      this.$deferredAction();
    }
    ProjectManager__handleDirectoryChanged_closure.builtin$cls = "ProjectManager__handleDirectoryChanged_closure";
    if (!("name" in ProjectManager__handleDirectoryChanged_closure))
      ProjectManager__handleDirectoryChanged_closure.name = "ProjectManager__handleDirectoryChanged_closure";
    $desc = $collectedClasses$.ProjectManager__handleDirectoryChanged_closure[1];
    ProjectManager__handleDirectoryChanged_closure.prototype = $desc;
    ProjectManager__handleDirectoryChanged_closure.$__fields__ = ["dir"];
    function ProjectManager__initProjectControllers_closure($this, knownProjects) {
      this.$this = $this;
      this.knownProjects = knownProjects;
      this.$deferredAction();
    }
    ProjectManager__initProjectControllers_closure.builtin$cls = "ProjectManager__initProjectControllers_closure";
    if (!("name" in ProjectManager__initProjectControllers_closure))
      ProjectManager__initProjectControllers_closure.name = "ProjectManager__initProjectControllers_closure";
    $desc = $collectedClasses$.ProjectManager__initProjectControllers_closure[1];
    ProjectManager__initProjectControllers_closure.prototype = $desc;
    ProjectManager__initProjectControllers_closure.$__fields__ = ["$this", "knownProjects"];
    function ProjectManager__initProjectControllers_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ProjectManager__initProjectControllers_closure0.builtin$cls = "ProjectManager__initProjectControllers_closure0";
    if (!("name" in ProjectManager__initProjectControllers_closure0))
      ProjectManager__initProjectControllers_closure0.name = "ProjectManager__initProjectControllers_closure0";
    $desc = $collectedClasses$.ProjectManager__initProjectControllers_closure0[1];
    ProjectManager__initProjectControllers_closure0.prototype = $desc;
    ProjectManager__initProjectControllers_closure0.$__fields__ = ["$this"];
    function DartProject(directory, pubspecFile, dotPackages, _analysisOptions, _pubspecDigest, _pubspecContents) {
      this.directory = directory;
      this.pubspecFile = pubspecFile;
      this.dotPackages = dotPackages;
      this._analysisOptions = _analysisOptions;
      this._pubspecDigest = _pubspecDigest;
      this._pubspecContents = _pubspecContents;
      this.$deferredAction();
    }
    DartProject.builtin$cls = "DartProject";
    if (!("name" in DartProject))
      DartProject.name = "DartProject";
    $desc = $collectedClasses$.DartProject[1];
    DartProject.prototype = $desc;
    DartProject.$__fields__ = ["directory", "pubspecFile", "dotPackages", "_analysisOptions", "_pubspecDigest", "_pubspecContents"];
    DartProject.prototype.get$directory = function(receiver) {
      return this.directory;
    };
    function DartProject_importsPackage_closure() {
      this.$deferredAction();
    }
    DartProject_importsPackage_closure.builtin$cls = "DartProject_importsPackage_closure";
    if (!("name" in DartProject_importsPackage_closure))
      DartProject_importsPackage_closure.name = "DartProject_importsPackage_closure";
    $desc = $collectedClasses$.DartProject_importsPackage_closure[1];
    DartProject_importsPackage_closure.prototype = $desc;
    DartProject_importsPackage_closure.$__fields__ = [];
    function DartProject_importsPackage_closure0(packageName) {
      this.packageName = packageName;
      this.$deferredAction();
    }
    DartProject_importsPackage_closure0.builtin$cls = "DartProject_importsPackage_closure0";
    if (!("name" in DartProject_importsPackage_closure0))
      DartProject_importsPackage_closure0.name = "DartProject_importsPackage_closure0";
    $desc = $collectedClasses$.DartProject_importsPackage_closure0[1];
    DartProject_importsPackage_closure0.prototype = $desc;
    DartProject_importsPackage_closure0.$__fields__ = ["packageName"];
    function ProjectScanJob(name, _schedulingRule) {
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    ProjectScanJob.builtin$cls = "ProjectScanJob";
    if (!("name" in ProjectScanJob))
      ProjectScanJob.name = "ProjectScanJob";
    $desc = $collectedClasses$.ProjectScanJob[1];
    ProjectScanJob.prototype = $desc;
    ProjectScanJob.$__fields__ = ["name", "_schedulingRule"];
    function SdkManager(_sdk$_controller, _sdk$_prefSub, _sdk$_commands, _sdk$_sdk, _alreadyWarned) {
      this._sdk$_controller = _sdk$_controller;
      this._sdk$_prefSub = _sdk$_prefSub;
      this._sdk$_commands = _sdk$_commands;
      this._sdk$_sdk = _sdk$_sdk;
      this._alreadyWarned = _alreadyWarned;
      this.$deferredAction();
    }
    SdkManager.builtin$cls = "SdkManager";
    if (!("name" in SdkManager))
      SdkManager.name = "SdkManager";
    $desc = $collectedClasses$.SdkManager[1];
    SdkManager.prototype = $desc;
    SdkManager.$__fields__ = ["_sdk$_controller", "_sdk$_prefSub", "_sdk$_commands", "_sdk$_sdk", "_alreadyWarned"];
    function SdkManager_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    SdkManager_closure.builtin$cls = "SdkManager_closure";
    if (!("name" in SdkManager_closure))
      SdkManager_closure.name = "SdkManager_closure";
    $desc = $collectedClasses$.SdkManager_closure[1];
    SdkManager_closure.prototype = $desc;
    SdkManager_closure.$__fields__ = ["$this"];
    function SdkManager_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    SdkManager_closure0.builtin$cls = "SdkManager_closure0";
    if (!("name" in SdkManager_closure0))
      SdkManager_closure0.name = "SdkManager_closure0";
    $desc = $collectedClasses$.SdkManager_closure0[1];
    SdkManager_closure0.prototype = $desc;
    SdkManager_closure0.$__fields__ = ["$this"];
    function SdkManager_closure1() {
      this.$deferredAction();
    }
    SdkManager_closure1.builtin$cls = "SdkManager_closure1";
    if (!("name" in SdkManager_closure1))
      SdkManager_closure1.name = "SdkManager_closure1";
    $desc = $collectedClasses$.SdkManager_closure1[1];
    SdkManager_closure1.prototype = $desc;
    SdkManager_closure1.$__fields__ = [];
    function SdkManager_tryToAutoConfigure_closure(verbose) {
      this.verbose = verbose;
      this.$deferredAction();
    }
    SdkManager_tryToAutoConfigure_closure.builtin$cls = "SdkManager_tryToAutoConfigure_closure";
    if (!("name" in SdkManager_tryToAutoConfigure_closure))
      SdkManager_tryToAutoConfigure_closure.name = "SdkManager_tryToAutoConfigure_closure";
    $desc = $collectedClasses$.SdkManager_tryToAutoConfigure_closure[1];
    SdkManager_tryToAutoConfigure_closure.prototype = $desc;
    SdkManager_tryToAutoConfigure_closure.$__fields__ = ["verbose"];
    function Sdk(directory) {
      this.directory = directory;
      this.$deferredAction();
    }
    Sdk.builtin$cls = "Sdk";
    if (!("name" in Sdk))
      Sdk.name = "Sdk";
    $desc = $collectedClasses$.Sdk[1];
    Sdk.prototype = $desc;
    Sdk.$__fields__ = ["directory"];
    Sdk.prototype.get$directory = function(receiver) {
      return this.directory;
    };
    function Sdk_getVersion_closure() {
      this.$deferredAction();
    }
    Sdk_getVersion_closure.builtin$cls = "Sdk_getVersion_closure";
    if (!("name" in Sdk_getVersion_closure))
      Sdk_getVersion_closure.name = "Sdk_getVersion_closure";
    $desc = $collectedClasses$.Sdk_getVersion_closure[1];
    Sdk_getVersion_closure.prototype = $desc;
    Sdk_getVersion_closure.$__fields__ = [];
    function SdkDiscovery() {
      this.$deferredAction();
    }
    SdkDiscovery.builtin$cls = "SdkDiscovery";
    if (!("name" in SdkDiscovery))
      SdkDiscovery.name = "SdkDiscovery";
    $desc = $collectedClasses$.SdkDiscovery[1];
    SdkDiscovery.prototype = $desc;
    SdkDiscovery.$__fields__ = [];
    function SdkDiscovery_discoverSdk_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    SdkDiscovery_discoverSdk_closure.builtin$cls = "SdkDiscovery_discoverSdk_closure";
    if (!("name" in SdkDiscovery_discoverSdk_closure))
      SdkDiscovery_discoverSdk_closure.name = "SdkDiscovery_discoverSdk_closure";
    $desc = $collectedClasses$.SdkDiscovery_discoverSdk_closure[1];
    SdkDiscovery_discoverSdk_closure.prototype = $desc;
    SdkDiscovery_discoverSdk_closure.$__fields__ = ["$this"];
    function SdkDiscovery__discoverSdk_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    SdkDiscovery__discoverSdk_closure.builtin$cls = "SdkDiscovery__discoverSdk_closure";
    if (!("name" in SdkDiscovery__discoverSdk_closure))
      SdkDiscovery__discoverSdk_closure.name = "SdkDiscovery__discoverSdk_closure";
    $desc = $collectedClasses$.SdkDiscovery__discoverSdk_closure[1];
    SdkDiscovery__discoverSdk_closure.prototype = $desc;
    SdkDiscovery__discoverSdk_closure.$__fields__ = ["$this"];
    function SdkDiscovery__discoverSdk_closure0() {
      this.$deferredAction();
    }
    SdkDiscovery__discoverSdk_closure0.builtin$cls = "SdkDiscovery__discoverSdk_closure0";
    if (!("name" in SdkDiscovery__discoverSdk_closure0))
      SdkDiscovery__discoverSdk_closure0.name = "SdkDiscovery__discoverSdk_closure0";
    $desc = $collectedClasses$.SdkDiscovery__discoverSdk_closure0[1];
    SdkDiscovery__discoverSdk_closure0.prototype = $desc;
    SdkDiscovery__discoverSdk_closure0.$__fields__ = [];
    function SdkDiscovery__discoverSdk_closure1($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    SdkDiscovery__discoverSdk_closure1.builtin$cls = "SdkDiscovery__discoverSdk_closure1";
    if (!("name" in SdkDiscovery__discoverSdk_closure1))
      SdkDiscovery__discoverSdk_closure1.name = "SdkDiscovery__discoverSdk_closure1";
    $desc = $collectedClasses$.SdkDiscovery__discoverSdk_closure1[1];
    SdkDiscovery__discoverSdk_closure1.prototype = $desc;
    SdkDiscovery__discoverSdk_closure1.$__fields__ = ["$this"];
    function SdkDiscovery__discoverSdk_closure2() {
      this.$deferredAction();
    }
    SdkDiscovery__discoverSdk_closure2.builtin$cls = "SdkDiscovery__discoverSdk_closure2";
    if (!("name" in SdkDiscovery__discoverSdk_closure2))
      SdkDiscovery__discoverSdk_closure2.name = "SdkDiscovery__discoverSdk_closure2";
    $desc = $collectedClasses$.SdkDiscovery__discoverSdk_closure2[1];
    SdkDiscovery__discoverSdk_closure2.prototype = $desc;
    SdkDiscovery__discoverSdk_closure2.$__fields__ = [];
    function SdkDiscovery__discoverSdk_closure3($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    SdkDiscovery__discoverSdk_closure3.builtin$cls = "SdkDiscovery__discoverSdk_closure3";
    if (!("name" in SdkDiscovery__discoverSdk_closure3))
      SdkDiscovery__discoverSdk_closure3.name = "SdkDiscovery__discoverSdk_closure3";
    $desc = $collectedClasses$.SdkDiscovery__discoverSdk_closure3[1];
    SdkDiscovery__discoverSdk_closure3.prototype = $desc;
    SdkDiscovery__discoverSdk_closure3.$__fields__ = ["$this"];
    function SdkDiscovery__discoverSdk_closure4() {
      this.$deferredAction();
    }
    SdkDiscovery__discoverSdk_closure4.builtin$cls = "SdkDiscovery__discoverSdk_closure4";
    if (!("name" in SdkDiscovery__discoverSdk_closure4))
      SdkDiscovery__discoverSdk_closure4.name = "SdkDiscovery__discoverSdk_closure4";
    $desc = $collectedClasses$.SdkDiscovery__discoverSdk_closure4[1];
    SdkDiscovery__discoverSdk_closure4.prototype = $desc;
    SdkDiscovery__discoverSdk_closure4.$__fields__ = [];
    function SdkLocationJob(sdkManager, name, _schedulingRule) {
      this.sdkManager = sdkManager;
      this.name = name;
      this._schedulingRule = _schedulingRule;
      this.$deferredAction();
    }
    SdkLocationJob.builtin$cls = "SdkLocationJob";
    if (!("name" in SdkLocationJob))
      SdkLocationJob.name = "SdkLocationJob";
    $desc = $collectedClasses$.SdkLocationJob[1];
    SdkLocationJob.prototype = $desc;
    SdkLocationJob.$__fields__ = ["sdkManager", "name", "_schedulingRule"];
    function State(_pluginState, _storables, _state$_controllers) {
      this._pluginState = _pluginState;
      this._storables = _storables;
      this._state$_controllers = _state$_controllers;
      this.$deferredAction();
    }
    State.builtin$cls = "State";
    if (!("name" in State))
      State.name = "State";
    $desc = $collectedClasses$.State[1];
    State.prototype = $desc;
    State.$__fields__ = ["_pluginState", "_storables", "_state$_controllers"];
    function State_onValueChanged_closure($this, key) {
      this.$this = $this;
      this.key = key;
      this.$deferredAction();
    }
    State_onValueChanged_closure.builtin$cls = "State_onValueChanged_closure";
    if (!("name" in State_onValueChanged_closure))
      State_onValueChanged_closure.name = "State_onValueChanged_closure";
    $desc = $collectedClasses$.State_onValueChanged_closure[1];
    State_onValueChanged_closure.prototype = $desc;
    State_onValueChanged_closure.$__fields__ = ["$this", "key"];
    function State_saveState_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    State_saveState_closure.builtin$cls = "State_saveState_closure";
    if (!("name" in State_saveState_closure))
      State_saveState_closure.name = "State_saveState_closure";
    $desc = $collectedClasses$.State_saveState_closure[1];
    State_saveState_closure.prototype = $desc;
    State_saveState_closure.$__fields__ = ["$this"];
    function StateStorable() {
      this.$deferredAction();
    }
    StateStorable.builtin$cls = "StateStorable";
    if (!("name" in StateStorable))
      StateStorable.name = "StateStorable";
    $desc = $collectedClasses$.StateStorable[1];
    StateStorable.prototype = $desc;
    StateStorable.$__fields__ = [];
    function UsageManager(_subs, _editorObserve) {
      this._subs = _subs;
      this._editorObserve = _editorObserve;
      this.$deferredAction();
    }
    UsageManager.builtin$cls = "UsageManager";
    if (!("name" in UsageManager))
      UsageManager.name = "UsageManager";
    $desc = $collectedClasses$.UsageManager[1];
    UsageManager.prototype = $desc;
    UsageManager.$__fields__ = ["_subs", "_editorObserve"];
    function UsageManager_closure() {
      this.$deferredAction();
    }
    UsageManager_closure.builtin$cls = "UsageManager_closure";
    if (!("name" in UsageManager_closure))
      UsageManager_closure.name = "UsageManager_closure";
    $desc = $collectedClasses$.UsageManager_closure[1];
    UsageManager_closure.prototype = $desc;
    UsageManager_closure.$__fields__ = [];
    function UsageManager__init_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    UsageManager__init_closure.builtin$cls = "UsageManager__init_closure";
    if (!("name" in UsageManager__init_closure))
      UsageManager__init_closure.name = "UsageManager__init_closure";
    $desc = $collectedClasses$.UsageManager__init_closure[1];
    UsageManager__init_closure.prototype = $desc;
    UsageManager__init_closure.$__fields__ = ["$this"];
    function UsageManager__init__closure(version) {
      this.version = version;
      this.$deferredAction();
    }
    UsageManager__init__closure.builtin$cls = "UsageManager__init__closure";
    if (!("name" in UsageManager__init__closure))
      UsageManager__init__closure.name = "UsageManager__init__closure";
    $desc = $collectedClasses$.UsageManager__init__closure[1];
    UsageManager__init__closure.prototype = $desc;
    UsageManager__init__closure.$__fields__ = ["version"];
    function UsageManager__init__closure0() {
      this.$deferredAction();
    }
    UsageManager__init__closure0.builtin$cls = "UsageManager__init__closure0";
    if (!("name" in UsageManager__init__closure0))
      UsageManager__init__closure0.name = "UsageManager__init__closure0";
    $desc = $collectedClasses$.UsageManager__init__closure0[1];
    UsageManager__init__closure0.prototype = $desc;
    UsageManager__init__closure0.$__fields__ = [];
    function Property(_utils$_value, _utils$_controller, $ti) {
      this._utils$_value = _utils$_value;
      this._utils$_controller = _utils$_controller;
      this.$ti = $ti;
      this.$deferredAction();
    }
    Property.builtin$cls = "Property";
    if (!("name" in Property))
      Property.name = "Property";
    $desc = $collectedClasses$.Property[1];
    Property.prototype = $desc;
    Property.$__fields__ = ["_utils$_value", "_utils$_controller"];
    function SelectionGroup(_selection, _items, _addedController, _selectionChangedController, _removedController, _mutationController, $ti) {
      this._selection = _selection;
      this._items = _items;
      this._addedController = _addedController;
      this._selectionChangedController = _selectionChangedController;
      this._removedController = _removedController;
      this._mutationController = _mutationController;
      this.$ti = $ti;
      this.$deferredAction();
    }
    SelectionGroup.builtin$cls = "SelectionGroup";
    if (!("name" in SelectionGroup))
      SelectionGroup.name = "SelectionGroup";
    $desc = $collectedClasses$.SelectionGroup[1];
    SelectionGroup.prototype = $desc;
    SelectionGroup.$__fields__ = ["_selection", "_items", "_addedController", "_selectionChangedController", "_removedController", "_mutationController"];
    function SelectionGroup_observeMutation_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    SelectionGroup_observeMutation_closure.builtin$cls = "SelectionGroup_observeMutation_closure";
    if (!("name" in SelectionGroup_observeMutation_closure))
      SelectionGroup_observeMutation_closure.name = "SelectionGroup_observeMutation_closure";
    $desc = $collectedClasses$.SelectionGroup_observeMutation_closure[1];
    SelectionGroup_observeMutation_closure.prototype = $desc;
    SelectionGroup_observeMutation_closure.$__fields__ = ["$this"];
    function ViewResizer(_views$_controller, _views$_offset, _moveSub, _upSub, element) {
      this._views$_controller = _views$_controller;
      this._views$_offset = _views$_offset;
      this._moveSub = _moveSub;
      this._upSub = _upSub;
      this.element = element;
      this.$deferredAction();
    }
    ViewResizer.builtin$cls = "ViewResizer";
    if (!("name" in ViewResizer))
      ViewResizer.name = "ViewResizer";
    $desc = $collectedClasses$.ViewResizer[1];
    ViewResizer.prototype = $desc;
    ViewResizer.$__fields__ = ["_views$_controller", "_views$_offset", "_moveSub", "_upSub", "element"];
    function ViewResizer__init_closure0($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ViewResizer__init_closure0.builtin$cls = "ViewResizer__init_closure0";
    if (!("name" in ViewResizer__init_closure0))
      ViewResizer__init_closure0.name = "ViewResizer__init_closure0";
    $desc = $collectedClasses$.ViewResizer__init_closure0[1];
    ViewResizer__init_closure0.prototype = $desc;
    ViewResizer__init_closure0.$__fields__ = ["$this"];
    function ViewResizer__init_closure($this, cancel) {
      this.$this = $this;
      this.cancel = cancel;
      this.$deferredAction();
    }
    ViewResizer__init_closure.builtin$cls = "ViewResizer__init_closure";
    if (!("name" in ViewResizer__init_closure))
      ViewResizer__init_closure.name = "ViewResizer__init_closure";
    $desc = $collectedClasses$.ViewResizer__init_closure[1];
    ViewResizer__init_closure.prototype = $desc;
    ViewResizer__init_closure.$__fields__ = ["$this", "cancel"];
    function ViewResizer__init__closure($this, cancel) {
      this.$this = $this;
      this.cancel = cancel;
      this.$deferredAction();
    }
    ViewResizer__init__closure.builtin$cls = "ViewResizer__init__closure";
    if (!("name" in ViewResizer__init__closure))
      ViewResizer__init__closure.name = "ViewResizer__init__closure";
    $desc = $collectedClasses$.ViewResizer__init__closure[1];
    ViewResizer__init__closure.prototype = $desc;
    ViewResizer__init__closure.$__fields__ = ["$this", "cancel"];
    function ViewResizer__init__closure0(cancel) {
      this.cancel = cancel;
      this.$deferredAction();
    }
    ViewResizer__init__closure0.builtin$cls = "ViewResizer__init__closure0";
    if (!("name" in ViewResizer__init__closure0))
      ViewResizer__init__closure0.name = "ViewResizer__init__closure0";
    $desc = $collectedClasses$.ViewResizer__init__closure0[1];
    ViewResizer__init__closure0.prototype = $desc;
    ViewResizer__init__closure0.$__fields__ = ["cancel"];
    function ViewResizer__minSize_closure() {
      this.$deferredAction();
    }
    ViewResizer__minSize_closure.builtin$cls = "ViewResizer__minSize_closure";
    if (!("name" in ViewResizer__minSize_closure))
      ViewResizer__minSize_closure.name = "ViewResizer__minSize_closure";
    $desc = $collectedClasses$.ViewResizer__minSize_closure[1];
    ViewResizer__minSize_closure.prototype = $desc;
    ViewResizer__minSize_closure.$__fields__ = [];
    function ViewResizer__targetSize_closure() {
      this.$deferredAction();
    }
    ViewResizer__targetSize_closure.builtin$cls = "ViewResizer__targetSize_closure";
    if (!("name" in ViewResizer__targetSize_closure))
      ViewResizer__targetSize_closure.name = "ViewResizer__targetSize_closure";
    $desc = $collectedClasses$.ViewResizer__targetSize_closure[1];
    ViewResizer__targetSize_closure.prototype = $desc;
    ViewResizer__targetSize_closure.$__fields__ = [];
    function ViewGroupManager(_groups) {
      this._groups = _groups;
      this.$deferredAction();
    }
    ViewGroupManager.builtin$cls = "ViewGroupManager";
    if (!("name" in ViewGroupManager))
      ViewGroupManager.name = "ViewGroupManager";
    $desc = $collectedClasses$.ViewGroupManager[1];
    ViewGroupManager.prototype = $desc;
    ViewGroupManager.$__fields__ = ["_groups"];
    function ViewGroupManager_isActiveId_closure(viewId) {
      this.viewId = viewId;
      this.$deferredAction();
    }
    ViewGroupManager_isActiveId_closure.builtin$cls = "ViewGroupManager_isActiveId_closure";
    if (!("name" in ViewGroupManager_isActiveId_closure))
      ViewGroupManager_isActiveId_closure.name = "ViewGroupManager_isActiveId_closure";
    $desc = $collectedClasses$.ViewGroupManager_isActiveId_closure[1];
    ViewGroupManager_isActiveId_closure.prototype = $desc;
    ViewGroupManager_isActiveId_closure.$__fields__ = ["viewId"];
    function ViewGroupManager_hasViewId_closure(viewId) {
      this.viewId = viewId;
      this.$deferredAction();
    }
    ViewGroupManager_hasViewId_closure.builtin$cls = "ViewGroupManager_hasViewId_closure";
    if (!("name" in ViewGroupManager_hasViewId_closure))
      ViewGroupManager_hasViewId_closure.name = "ViewGroupManager_hasViewId_closure";
    $desc = $collectedClasses$.ViewGroupManager_hasViewId_closure[1];
    ViewGroupManager_hasViewId_closure.prototype = $desc;
    ViewGroupManager_hasViewId_closure.$__fields__ = ["viewId"];
    function ViewGroup(name, views, root, tabHeader, tabContainer, _panel, _active, _history) {
      this.name = name;
      this.views = views;
      this.root = root;
      this.tabHeader = tabHeader;
      this.tabContainer = tabContainer;
      this._panel = _panel;
      this._active = _active;
      this._history = _history;
      this.$deferredAction();
    }
    ViewGroup.builtin$cls = "ViewGroup";
    if (!("name" in ViewGroup))
      ViewGroup.name = "ViewGroup";
    $desc = $collectedClasses$.ViewGroup[1];
    ViewGroup.prototype = $desc;
    ViewGroup.$__fields__ = ["name", "views", "root", "tabHeader", "tabContainer", "_panel", "_active", "_history"];
    ViewGroup.prototype.get$name = function(receiver) {
      return this.name;
    };
    ViewGroup.prototype.get$root = function(receiver) {
      return this.root;
    };
    function ViewGroup_getViewById_closure(viewId) {
      this.viewId = viewId;
      this.$deferredAction();
    }
    ViewGroup_getViewById_closure.builtin$cls = "ViewGroup_getViewById_closure";
    if (!("name" in ViewGroup_getViewById_closure))
      ViewGroup_getViewById_closure.name = "ViewGroup_getViewById_closure";
    $desc = $collectedClasses$.ViewGroup_getViewById_closure[1];
    ViewGroup_getViewById_closure.prototype = $desc;
    ViewGroup_getViewById_closure.$__fields__ = ["viewId"];
    function ViewGroup_getViewById_closure0() {
      this.$deferredAction();
    }
    ViewGroup_getViewById_closure0.builtin$cls = "ViewGroup_getViewById_closure0";
    if (!("name" in ViewGroup_getViewById_closure0))
      ViewGroup_getViewById_closure0.name = "ViewGroup_getViewById_closure0";
    $desc = $collectedClasses$.ViewGroup_getViewById_closure0[1];
    ViewGroup_getViewById_closure0.prototype = $desc;
    ViewGroup_getViewById_closure0.$__fields__ = [];
    function ViewGroup__setupResizer_closure(prefName) {
      this.prefName = prefName;
      this.$deferredAction();
    }
    ViewGroup__setupResizer_closure.builtin$cls = "ViewGroup__setupResizer_closure";
    if (!("name" in ViewGroup__setupResizer_closure))
      ViewGroup__setupResizer_closure.name = "ViewGroup__setupResizer_closure";
    $desc = $collectedClasses$.ViewGroup__setupResizer_closure[1];
    ViewGroup__setupResizer_closure.prototype = $desc;
    ViewGroup__setupResizer_closure.$__fields__ = ["prefName"];
    function View(root, content, tabElement, _closeButton, group) {
      this.root = root;
      this.content = content;
      this.tabElement = tabElement;
      this._closeButton = _closeButton;
      this.group = group;
      this.$deferredAction();
    }
    View.builtin$cls = "View";
    if (!("name" in View))
      View.name = "View";
    $desc = $collectedClasses$.View[1];
    View.prototype = $desc;
    View.$__fields__ = ["root", "content", "tabElement", "_closeButton", "group"];
    View.prototype.get$root = function(receiver) {
      return this.root;
    };
    View.prototype.get$content = function(receiver) {
      return this.content;
    };
    View.prototype.get$tabElement = function() {
      return this.tabElement;
    };
    View.prototype.get$_closeButton = function() {
      return this._closeButton;
    };
    View.prototype.set$group = function(v) {
      return this.group = v;
    };
    function ListTreeBuilder(_clickController, _doubleClickController, render, hasToggle, nodes, _selectedNodes, _nodeToElementMap, _selectionClass, element) {
      this._clickController = _clickController;
      this._doubleClickController = _doubleClickController;
      this.render = render;
      this.hasToggle = hasToggle;
      this.nodes = nodes;
      this._selectedNodes = _selectedNodes;
      this._nodeToElementMap = _nodeToElementMap;
      this._selectionClass = _selectionClass;
      this.element = element;
      this.$deferredAction();
    }
    ListTreeBuilder.builtin$cls = "ListTreeBuilder";
    if (!("name" in ListTreeBuilder))
      ListTreeBuilder.name = "ListTreeBuilder";
    $desc = $collectedClasses$.ListTreeBuilder[1];
    ListTreeBuilder.prototype = $desc;
    ListTreeBuilder.$__fields__ = ["_clickController", "_doubleClickController", "render", "hasToggle", "nodes", "_selectedNodes", "_nodeToElementMap", "_selectionClass", "element"];
    ListTreeBuilder.prototype.get$nodes = function(receiver) {
      return this.nodes;
    };
    function ListTreeBuilder__addNode_closure($this, node) {
      this.$this = $this;
      this.node = node;
      this.$deferredAction();
    }
    ListTreeBuilder__addNode_closure.builtin$cls = "ListTreeBuilder__addNode_closure";
    if (!("name" in ListTreeBuilder__addNode_closure))
      ListTreeBuilder__addNode_closure.name = "ListTreeBuilder__addNode_closure";
    $desc = $collectedClasses$.ListTreeBuilder__addNode_closure[1];
    ListTreeBuilder__addNode_closure.prototype = $desc;
    ListTreeBuilder__addNode_closure.$__fields__ = ["$this", "node"];
    function ListTreeBuilder__addNode_closure0($this, node) {
      this.$this = $this;
      this.node = node;
      this.$deferredAction();
    }
    ListTreeBuilder__addNode_closure0.builtin$cls = "ListTreeBuilder__addNode_closure0";
    if (!("name" in ListTreeBuilder__addNode_closure0))
      ListTreeBuilder__addNode_closure0.name = "ListTreeBuilder__addNode_closure0";
    $desc = $collectedClasses$.ListTreeBuilder__addNode_closure0[1];
    ListTreeBuilder__addNode_closure0.prototype = $desc;
    ListTreeBuilder__addNode_closure0.$__fields__ = ["$this", "node"];
    function ListTreeBuilder__addNode_closure1(element) {
      this.element = element;
      this.$deferredAction();
    }
    ListTreeBuilder__addNode_closure1.builtin$cls = "ListTreeBuilder__addNode_closure1";
    if (!("name" in ListTreeBuilder__addNode_closure1))
      ListTreeBuilder__addNode_closure1.name = "ListTreeBuilder__addNode_closure1";
    $desc = $collectedClasses$.ListTreeBuilder__addNode_closure1[1];
    ListTreeBuilder__addNode_closure1.prototype = $desc;
    ListTreeBuilder__addNode_closure1.$__fields__ = ["element"];
    function ListTreeBuilder__addNode_closure2($this, node) {
      this.$this = $this;
      this.node = node;
      this.$deferredAction();
    }
    ListTreeBuilder__addNode_closure2.builtin$cls = "ListTreeBuilder__addNode_closure2";
    if (!("name" in ListTreeBuilder__addNode_closure2))
      ListTreeBuilder__addNode_closure2.name = "ListTreeBuilder__addNode_closure2";
    $desc = $collectedClasses$.ListTreeBuilder__addNode_closure2[1];
    ListTreeBuilder__addNode_closure2.prototype = $desc;
    ListTreeBuilder__addNode_closure2.$__fields__ = ["$this", "node"];
    function ListTreeBuilder__addNode_closure3($this, node) {
      this.$this = $this;
      this.node = node;
      this.$deferredAction();
    }
    ListTreeBuilder__addNode_closure3.builtin$cls = "ListTreeBuilder__addNode_closure3";
    if (!("name" in ListTreeBuilder__addNode_closure3))
      ListTreeBuilder__addNode_closure3.name = "ListTreeBuilder__addNode_closure3";
    $desc = $collectedClasses$.ListTreeBuilder__addNode_closure3[1];
    ListTreeBuilder__addNode_closure3.prototype = $desc;
    ListTreeBuilder__addNode_closure3.$__fields__ = ["$this", "node"];
    function Node0(data, canHaveChildren, children, $ti) {
      this.data = data;
      this.canHaveChildren = canHaveChildren;
      this.children = children;
      this.$ti = $ti;
      this.$deferredAction();
    }
    Node0.builtin$cls = "Node0";
    if (!("name" in Node0))
      Node0.name = "Node0";
    $desc = $collectedClasses$.Node0[1];
    Node0.prototype = $desc;
    Node0.$__fields__ = ["data", "canHaveChildren", "children"];
    Node0.prototype.get$data = function(receiver) {
      return this.data;
    };
    Node0.prototype.get$canHaveChildren = function() {
      return this.canHaveChildren;
    };
    Node0.prototype.get$children = function(receiver) {
      return this.children;
    };
    function Node_decendentCount_closure() {
      this.$deferredAction();
    }
    Node_decendentCount_closure.builtin$cls = "Node_decendentCount_closure";
    if (!("name" in Node_decendentCount_closure))
      Node_decendentCount_closure.name = "Node_decendentCount_closure";
    $desc = $collectedClasses$.Node_decendentCount_closure[1];
    Node_decendentCount_closure.prototype = $desc;
    Node_decendentCount_closure.$__fields__ = [];
    function DoubleCancelCommand(handleCancel, _views$_command, _views$_timer) {
      this.handleCancel = handleCancel;
      this._views$_command = _views$_command;
      this._views$_timer = _views$_timer;
      this.$deferredAction();
    }
    DoubleCancelCommand.builtin$cls = "DoubleCancelCommand";
    if (!("name" in DoubleCancelCommand))
      DoubleCancelCommand.name = "DoubleCancelCommand";
    $desc = $collectedClasses$.DoubleCancelCommand[1];
    DoubleCancelCommand.prototype = $desc;
    DoubleCancelCommand.$__fields__ = ["handleCancel", "_views$_command", "_views$_timer"];
    function DoubleCancelCommand__handleCancel_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    DoubleCancelCommand__handleCancel_closure.builtin$cls = "DoubleCancelCommand__handleCancel_closure";
    if (!("name" in DoubleCancelCommand__handleCancel_closure))
      DoubleCancelCommand__handleCancel_closure.name = "DoubleCancelCommand__handleCancel_closure";
    $desc = $collectedClasses$.DoubleCancelCommand__handleCancel_closure[1];
    DoubleCancelCommand__handleCancel_closure.prototype = $desc;
    DoubleCancelCommand__handleCancel_closure.$__fields__ = ["$this"];
    function DefaultEquality($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    DefaultEquality.builtin$cls = "DefaultEquality";
    if (!("name" in DefaultEquality))
      DefaultEquality.name = "DefaultEquality";
    $desc = $collectedClasses$.DefaultEquality[1];
    DefaultEquality.prototype = $desc;
    DefaultEquality.$__fields__ = [];
    function IterableEquality(_elementEquality, $ti) {
      this._elementEquality = _elementEquality;
      this.$ti = $ti;
      this.$deferredAction();
    }
    IterableEquality.builtin$cls = "IterableEquality";
    if (!("name" in IterableEquality))
      IterableEquality.name = "IterableEquality";
    $desc = $collectedClasses$.IterableEquality[1];
    IterableEquality.prototype = $desc;
    IterableEquality.$__fields__ = ["_elementEquality"];
    function _UnorderedEquality($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    _UnorderedEquality.builtin$cls = "_UnorderedEquality";
    if (!("name" in _UnorderedEquality))
      _UnorderedEquality.name = "_UnorderedEquality";
    $desc = $collectedClasses$._UnorderedEquality[1];
    _UnorderedEquality.prototype = $desc;
    _UnorderedEquality.$__fields__ = [];
    function UnorderedIterableEquality(_elementEquality, $ti) {
      this._elementEquality = _elementEquality;
      this.$ti = $ti;
      this.$deferredAction();
    }
    UnorderedIterableEquality.builtin$cls = "UnorderedIterableEquality";
    if (!("name" in UnorderedIterableEquality))
      UnorderedIterableEquality.name = "UnorderedIterableEquality";
    $desc = $collectedClasses$.UnorderedIterableEquality[1];
    UnorderedIterableEquality.prototype = $desc;
    UnorderedIterableEquality.$__fields__ = ["_elementEquality"];
    function QueueList(_queue_list$_table, _queue_list$_head, _queue_list$_tail, $ti) {
      this._queue_list$_table = _queue_list$_table;
      this._queue_list$_head = _queue_list$_head;
      this._queue_list$_tail = _queue_list$_tail;
      this.$ti = $ti;
      this.$deferredAction();
    }
    QueueList.builtin$cls = "QueueList";
    if (!("name" in QueueList))
      QueueList.name = "QueueList";
    $desc = $collectedClasses$.QueueList[1];
    QueueList.prototype = $desc;
    QueueList.$__fields__ = ["_queue_list$_table", "_queue_list$_head", "_queue_list$_tail"];
    function Object_ListMixin0($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    Object_ListMixin0.builtin$cls = "Object_ListMixin0";
    if (!("name" in Object_ListMixin0))
      Object_ListMixin0.name = "Object_ListMixin0";
    $desc = $collectedClasses$.Object_ListMixin0[1];
    Object_ListMixin0.prototype = $desc;
    Object_ListMixin0.$__fields__ = [];
    function UnmodifiableMapMixin($ti) {
      this.$ti = $ti;
      this.$deferredAction();
    }
    UnmodifiableMapMixin.builtin$cls = "UnmodifiableMapMixin";
    if (!("name" in UnmodifiableMapMixin))
      UnmodifiableMapMixin.name = "UnmodifiableMapMixin";
    $desc = $collectedClasses$.UnmodifiableMapMixin[1];
    UnmodifiableMapMixin.prototype = $desc;
    UnmodifiableMapMixin.$__fields__ = [];
    function Haikunator_haikunate_closure() {
      this.$deferredAction();
    }
    Haikunator_haikunate_closure.builtin$cls = "Haikunator_haikunate_closure";
    if (!("name" in Haikunator_haikunate_closure))
      Haikunator_haikunate_closure.name = "Haikunator_haikunate_closure";
    $desc = $collectedClasses$.Haikunator_haikunate_closure[1];
    Haikunator_haikunate_closure.prototype = $desc;
    Haikunator_haikunate_closure.$__fields__ = [];
    function Logger(name, parent, _level, _children, children, _controller) {
      this.name = name;
      this.parent = parent;
      this._level = _level;
      this._children = _children;
      this.children = children;
      this._controller = _controller;
      this.$deferredAction();
    }
    Logger.builtin$cls = "Logger";
    if (!("name" in Logger))
      Logger.name = "Logger";
    $desc = $collectedClasses$.Logger[1];
    Logger.prototype = $desc;
    Logger.$__fields__ = ["name", "parent", "_level", "_children", "children", "_controller"];
    Logger.prototype.get$name = function(receiver) {
      return this.name;
    };
    Logger.prototype.get$parent = function(receiver) {
      return this.parent;
    };
    Logger.prototype.get$_children = function(receiver) {
      return this._children;
    };
    Logger.prototype.get$children = function(receiver) {
      return this.children;
    };
    function closure(name) {
      this.name = name;
      this.$deferredAction();
    }
    closure.builtin$cls = "closure";
    if (!("name" in closure))
      closure.name = "closure";
    $desc = $collectedClasses$.closure[1];
    closure.prototype = $desc;
    closure.$__fields__ = ["name"];
    function Level(name, value) {
      this.name = name;
      this.value = value;
      this.$deferredAction();
    }
    Level.builtin$cls = "Level";
    if (!("name" in Level))
      Level.name = "Level";
    $desc = $collectedClasses$.Level[1];
    Level.prototype = $desc;
    Level.$__fields__ = ["name", "value"];
    Level.prototype.get$name = function(receiver) {
      return this.name;
    };
    Level.prototype.get$value = function(receiver) {
      return this.value;
    };
    function LogRecord(level, message, object, loggerName, time, sequenceNumber, error, stackTrace, zone) {
      this.level = level;
      this.message = message;
      this.object = object;
      this.loggerName = loggerName;
      this.time = time;
      this.sequenceNumber = sequenceNumber;
      this.error = error;
      this.stackTrace = stackTrace;
      this.zone = zone;
      this.$deferredAction();
    }
    LogRecord.builtin$cls = "LogRecord";
    if (!("name" in LogRecord))
      LogRecord.name = "LogRecord";
    $desc = $collectedClasses$.LogRecord[1];
    LogRecord.prototype = $desc;
    LogRecord.$__fields__ = ["level", "message", "object", "loggerName", "time", "sequenceNumber", "error", "stackTrace", "zone"];
    LogRecord.prototype.get$level = function(receiver) {
      return this.level;
    };
    LogRecord.prototype.get$message = function(receiver) {
      return this.message;
    };
    LogRecord.prototype.get$loggerName = function() {
      return this.loggerName;
    };
    LogRecord.prototype.get$error = function(receiver) {
      return this.error;
    };
    LogRecord.prototype.get$stackTrace = function() {
      return this.stackTrace;
    };
    function Node1() {
      this.$deferredAction();
    }
    Node1.builtin$cls = "Node1";
    if (!("name" in Node1))
      Node1.name = "Node1";
    $desc = $collectedClasses$.Node1[1];
    Node1.prototype = $desc;
    Node1.$__fields__ = [];
    function Element1(tag, children, attributes, generatedId) {
      this.tag = tag;
      this.children = children;
      this.attributes = attributes;
      this.generatedId = generatedId;
      this.$deferredAction();
    }
    Element1.builtin$cls = "Element1";
    if (!("name" in Element1))
      Element1.name = "Element1";
    $desc = $collectedClasses$.Element1[1];
    Element1.prototype = $desc;
    Element1.$__fields__ = ["tag", "children", "attributes", "generatedId"];
    Element1.prototype.get$children = function(receiver) {
      return this.children;
    };
    Element1.prototype.get$attributes = function(receiver) {
      return this.attributes;
    };
    function Element_textContent_closure() {
      this.$deferredAction();
    }
    Element_textContent_closure.builtin$cls = "Element_textContent_closure";
    if (!("name" in Element_textContent_closure))
      Element_textContent_closure.name = "Element_textContent_closure";
    $desc = $collectedClasses$.Element_textContent_closure[1];
    Element_textContent_closure.prototype = $desc;
    Element_textContent_closure.$__fields__ = [];
    function Text(text) {
      this.text = text;
      this.$deferredAction();
    }
    Text.builtin$cls = "Text";
    if (!("name" in Text))
      Text.name = "Text";
    $desc = $collectedClasses$.Text[1];
    Text.prototype = $desc;
    Text.$__fields__ = ["text"];
    Text.prototype.get$text = function(receiver) {
      return this.text;
    };
    function UnparsedContent(textContent) {
      this.textContent = textContent;
      this.$deferredAction();
    }
    UnparsedContent.builtin$cls = "UnparsedContent";
    if (!("name" in UnparsedContent))
      UnparsedContent.name = "UnparsedContent";
    $desc = $collectedClasses$.UnparsedContent[1];
    UnparsedContent.prototype = $desc;
    UnparsedContent.$__fields__ = ["textContent"];
    UnparsedContent.prototype.get$textContent = function() {
      return this.textContent;
    };
    function BlockParser(lines, document, blockSyntaxes, _block_parser$_pos, encounteredBlankLine, standardBlockSyntaxes) {
      this.lines = lines;
      this.document = document;
      this.blockSyntaxes = blockSyntaxes;
      this._block_parser$_pos = _block_parser$_pos;
      this.encounteredBlankLine = encounteredBlankLine;
      this.standardBlockSyntaxes = standardBlockSyntaxes;
      this.$deferredAction();
    }
    BlockParser.builtin$cls = "BlockParser";
    if (!("name" in BlockParser))
      BlockParser.name = "BlockParser";
    $desc = $collectedClasses$.BlockParser[1];
    BlockParser.prototype = $desc;
    BlockParser.$__fields__ = ["lines", "document", "blockSyntaxes", "_block_parser$_pos", "encounteredBlankLine", "standardBlockSyntaxes"];
    BlockParser.prototype.get$lines = function() {
      return this.lines;
    };
    function BlockSyntax() {
      this.$deferredAction();
    }
    BlockSyntax.builtin$cls = "BlockSyntax";
    if (!("name" in BlockSyntax))
      BlockSyntax.name = "BlockSyntax";
    $desc = $collectedClasses$.BlockSyntax[1];
    BlockSyntax.prototype = $desc;
    BlockSyntax.$__fields__ = [];
    function BlockSyntax_isAtBlockEnd_closure(parser) {
      this.parser = parser;
      this.$deferredAction();
    }
    BlockSyntax_isAtBlockEnd_closure.builtin$cls = "BlockSyntax_isAtBlockEnd_closure";
    if (!("name" in BlockSyntax_isAtBlockEnd_closure))
      BlockSyntax_isAtBlockEnd_closure.name = "BlockSyntax_isAtBlockEnd_closure";
    $desc = $collectedClasses$.BlockSyntax_isAtBlockEnd_closure[1];
    BlockSyntax_isAtBlockEnd_closure.prototype = $desc;
    BlockSyntax_isAtBlockEnd_closure.$__fields__ = ["parser"];
    function EmptyBlockSyntax() {
      this.$deferredAction();
    }
    EmptyBlockSyntax.builtin$cls = "EmptyBlockSyntax";
    if (!("name" in EmptyBlockSyntax))
      EmptyBlockSyntax.name = "EmptyBlockSyntax";
    $desc = $collectedClasses$.EmptyBlockSyntax[1];
    EmptyBlockSyntax.prototype = $desc;
    EmptyBlockSyntax.$__fields__ = [];
    function SetextHeaderSyntax() {
      this.$deferredAction();
    }
    SetextHeaderSyntax.builtin$cls = "SetextHeaderSyntax";
    if (!("name" in SetextHeaderSyntax))
      SetextHeaderSyntax.name = "SetextHeaderSyntax";
    $desc = $collectedClasses$.SetextHeaderSyntax[1];
    SetextHeaderSyntax.prototype = $desc;
    SetextHeaderSyntax.$__fields__ = [];
    function HeaderSyntax() {
      this.$deferredAction();
    }
    HeaderSyntax.builtin$cls = "HeaderSyntax";
    if (!("name" in HeaderSyntax))
      HeaderSyntax.name = "HeaderSyntax";
    $desc = $collectedClasses$.HeaderSyntax[1];
    HeaderSyntax.prototype = $desc;
    HeaderSyntax.$__fields__ = [];
    function BlockquoteSyntax() {
      this.$deferredAction();
    }
    BlockquoteSyntax.builtin$cls = "BlockquoteSyntax";
    if (!("name" in BlockquoteSyntax))
      BlockquoteSyntax.name = "BlockquoteSyntax";
    $desc = $collectedClasses$.BlockquoteSyntax[1];
    BlockquoteSyntax.prototype = $desc;
    BlockquoteSyntax.$__fields__ = [];
    function BlockquoteSyntax_parseChildLines_closure(parser) {
      this.parser = parser;
      this.$deferredAction();
    }
    BlockquoteSyntax_parseChildLines_closure.builtin$cls = "BlockquoteSyntax_parseChildLines_closure";
    if (!("name" in BlockquoteSyntax_parseChildLines_closure))
      BlockquoteSyntax_parseChildLines_closure.name = "BlockquoteSyntax_parseChildLines_closure";
    $desc = $collectedClasses$.BlockquoteSyntax_parseChildLines_closure[1];
    BlockquoteSyntax_parseChildLines_closure.prototype = $desc;
    BlockquoteSyntax_parseChildLines_closure.$__fields__ = ["parser"];
    function CodeBlockSyntax() {
      this.$deferredAction();
    }
    CodeBlockSyntax.builtin$cls = "CodeBlockSyntax";
    if (!("name" in CodeBlockSyntax))
      CodeBlockSyntax.name = "CodeBlockSyntax";
    $desc = $collectedClasses$.CodeBlockSyntax[1];
    CodeBlockSyntax.prototype = $desc;
    CodeBlockSyntax.$__fields__ = [];
    function FencedCodeBlockSyntax() {
      this.$deferredAction();
    }
    FencedCodeBlockSyntax.builtin$cls = "FencedCodeBlockSyntax";
    if (!("name" in FencedCodeBlockSyntax))
      FencedCodeBlockSyntax.name = "FencedCodeBlockSyntax";
    $desc = $collectedClasses$.FencedCodeBlockSyntax[1];
    FencedCodeBlockSyntax.prototype = $desc;
    FencedCodeBlockSyntax.$__fields__ = [];
    function HorizontalRuleSyntax() {
      this.$deferredAction();
    }
    HorizontalRuleSyntax.builtin$cls = "HorizontalRuleSyntax";
    if (!("name" in HorizontalRuleSyntax))
      HorizontalRuleSyntax.name = "HorizontalRuleSyntax";
    $desc = $collectedClasses$.HorizontalRuleSyntax[1];
    HorizontalRuleSyntax.prototype = $desc;
    HorizontalRuleSyntax.$__fields__ = [];
    function BlockHtmlSyntax() {
      this.$deferredAction();
    }
    BlockHtmlSyntax.builtin$cls = "BlockHtmlSyntax";
    if (!("name" in BlockHtmlSyntax))
      BlockHtmlSyntax.name = "BlockHtmlSyntax";
    $desc = $collectedClasses$.BlockHtmlSyntax[1];
    BlockHtmlSyntax.prototype = $desc;
    BlockHtmlSyntax.$__fields__ = [];
    function BlockTagBlockHtmlSyntax() {
      this.$deferredAction();
    }
    BlockTagBlockHtmlSyntax.builtin$cls = "BlockTagBlockHtmlSyntax";
    if (!("name" in BlockTagBlockHtmlSyntax))
      BlockTagBlockHtmlSyntax.name = "BlockTagBlockHtmlSyntax";
    $desc = $collectedClasses$.BlockTagBlockHtmlSyntax[1];
    BlockTagBlockHtmlSyntax.prototype = $desc;
    BlockTagBlockHtmlSyntax.$__fields__ = [];
    function OtherTagBlockHtmlSyntax() {
      this.$deferredAction();
    }
    OtherTagBlockHtmlSyntax.builtin$cls = "OtherTagBlockHtmlSyntax";
    if (!("name" in OtherTagBlockHtmlSyntax))
      OtherTagBlockHtmlSyntax.name = "OtherTagBlockHtmlSyntax";
    $desc = $collectedClasses$.OtherTagBlockHtmlSyntax[1];
    OtherTagBlockHtmlSyntax.prototype = $desc;
    OtherTagBlockHtmlSyntax.$__fields__ = [];
    function LongBlockHtmlSyntax(_block_parser$_pattern, _endPattern) {
      this._block_parser$_pattern = _block_parser$_pattern;
      this._endPattern = _endPattern;
      this.$deferredAction();
    }
    LongBlockHtmlSyntax.builtin$cls = "LongBlockHtmlSyntax";
    if (!("name" in LongBlockHtmlSyntax))
      LongBlockHtmlSyntax.name = "LongBlockHtmlSyntax";
    $desc = $collectedClasses$.LongBlockHtmlSyntax[1];
    LongBlockHtmlSyntax.prototype = $desc;
    LongBlockHtmlSyntax.$__fields__ = ["_block_parser$_pattern", "_endPattern"];
    function ListItem(forceBlock, lines) {
      this.forceBlock = forceBlock;
      this.lines = lines;
      this.$deferredAction();
    }
    ListItem.builtin$cls = "ListItem";
    if (!("name" in ListItem))
      ListItem.name = "ListItem";
    $desc = $collectedClasses$.ListItem[1];
    ListItem.prototype = $desc;
    ListItem.$__fields__ = ["forceBlock", "lines"];
    ListItem.prototype.get$lines = function() {
      return this.lines;
    };
    function ListSyntax() {
      this.$deferredAction();
    }
    ListSyntax.builtin$cls = "ListSyntax";
    if (!("name" in ListSyntax))
      ListSyntax.name = "ListSyntax";
    $desc = $collectedClasses$.ListSyntax[1];
    ListSyntax.prototype = $desc;
    ListSyntax.$__fields__ = [];
    function ListSyntax_parse_endItem(_box_0, items) {
      this._box_0 = _box_0;
      this.items = items;
      this.$deferredAction();
    }
    ListSyntax_parse_endItem.builtin$cls = "ListSyntax_parse_endItem";
    if (!("name" in ListSyntax_parse_endItem))
      ListSyntax_parse_endItem.name = "ListSyntax_parse_endItem";
    $desc = $collectedClasses$.ListSyntax_parse_endItem[1];
    ListSyntax_parse_endItem.prototype = $desc;
    ListSyntax_parse_endItem.$__fields__ = ["_box_0", "items"];
    function ListSyntax_parse_tryMatch(_box_0, parser) {
      this._box_0 = _box_0;
      this.parser = parser;
      this.$deferredAction();
    }
    ListSyntax_parse_tryMatch.builtin$cls = "ListSyntax_parse_tryMatch";
    if (!("name" in ListSyntax_parse_tryMatch))
      ListSyntax_parse_tryMatch.name = "ListSyntax_parse_tryMatch";
    $desc = $collectedClasses$.ListSyntax_parse_tryMatch[1];
    ListSyntax_parse_tryMatch.prototype = $desc;
    ListSyntax_parse_tryMatch.$__fields__ = ["_box_0", "parser"];
    function UnorderedListSyntax() {
      this.$deferredAction();
    }
    UnorderedListSyntax.builtin$cls = "UnorderedListSyntax";
    if (!("name" in UnorderedListSyntax))
      UnorderedListSyntax.name = "UnorderedListSyntax";
    $desc = $collectedClasses$.UnorderedListSyntax[1];
    UnorderedListSyntax.prototype = $desc;
    UnorderedListSyntax.$__fields__ = [];
    function OrderedListSyntax() {
      this.$deferredAction();
    }
    OrderedListSyntax.builtin$cls = "OrderedListSyntax";
    if (!("name" in OrderedListSyntax))
      OrderedListSyntax.name = "OrderedListSyntax";
    $desc = $collectedClasses$.OrderedListSyntax[1];
    OrderedListSyntax.prototype = $desc;
    OrderedListSyntax.$__fields__ = [];
    function ParagraphSyntax() {
      this.$deferredAction();
    }
    ParagraphSyntax.builtin$cls = "ParagraphSyntax";
    if (!("name" in ParagraphSyntax))
      ParagraphSyntax.name = "ParagraphSyntax";
    $desc = $collectedClasses$.ParagraphSyntax[1];
    ParagraphSyntax.prototype = $desc;
    ParagraphSyntax.$__fields__ = [];
    function ParagraphSyntax__extractReflinkDefinitions_lineStartsReflinkDefinition(lines) {
      this.lines = lines;
      this.$deferredAction();
    }
    ParagraphSyntax__extractReflinkDefinitions_lineStartsReflinkDefinition.builtin$cls = "ParagraphSyntax__extractReflinkDefinitions_lineStartsReflinkDefinition";
    if (!("name" in ParagraphSyntax__extractReflinkDefinitions_lineStartsReflinkDefinition))
      ParagraphSyntax__extractReflinkDefinitions_lineStartsReflinkDefinition.name = "ParagraphSyntax__extractReflinkDefinitions_lineStartsReflinkDefinition";
    $desc = $collectedClasses$.ParagraphSyntax__extractReflinkDefinitions_lineStartsReflinkDefinition[1];
    ParagraphSyntax__extractReflinkDefinitions_lineStartsReflinkDefinition.prototype = $desc;
    ParagraphSyntax__extractReflinkDefinitions_lineStartsReflinkDefinition.$__fields__ = ["lines"];
    function ParagraphSyntax__parseReflinkDefinition_closure(_box_0, destination) {
      this._box_0 = _box_0;
      this.destination = destination;
      this.$deferredAction();
    }
    ParagraphSyntax__parseReflinkDefinition_closure.builtin$cls = "ParagraphSyntax__parseReflinkDefinition_closure";
    if (!("name" in ParagraphSyntax__parseReflinkDefinition_closure))
      ParagraphSyntax__parseReflinkDefinition_closure.name = "ParagraphSyntax__parseReflinkDefinition_closure";
    $desc = $collectedClasses$.ParagraphSyntax__parseReflinkDefinition_closure[1];
    ParagraphSyntax__parseReflinkDefinition_closure.prototype = $desc;
    ParagraphSyntax__parseReflinkDefinition_closure.$__fields__ = ["_box_0", "destination"];
    function Document(refLinks, blockSyntaxes, inlineSyntaxes, extensionSet, linkResolver, imageLinkResolver) {
      this.refLinks = refLinks;
      this.blockSyntaxes = blockSyntaxes;
      this.inlineSyntaxes = inlineSyntaxes;
      this.extensionSet = extensionSet;
      this.linkResolver = linkResolver;
      this.imageLinkResolver = imageLinkResolver;
      this.$deferredAction();
    }
    Document.builtin$cls = "Document";
    if (!("name" in Document))
      Document.name = "Document";
    $desc = $collectedClasses$.Document[1];
    Document.prototype = $desc;
    Document.$__fields__ = ["refLinks", "blockSyntaxes", "inlineSyntaxes", "extensionSet", "linkResolver", "imageLinkResolver"];
    function Link(id, url, title) {
      this.id = id;
      this.url = url;
      this.title = title;
      this.$deferredAction();
    }
    Link.builtin$cls = "Link";
    if (!("name" in Link))
      Link.name = "Link";
    $desc = $collectedClasses$.Link[1];
    Link.prototype = $desc;
    Link.$__fields__ = ["id", "url", "title"];
    Link.prototype.get$id = function(receiver) {
      return this.id;
    };
    Link.prototype.get$url = function(receiver) {
      return this.url;
    };
    Link.prototype.get$title = function(receiver) {
      return this.title;
    };
    function ExtensionSet(blockSyntaxes, inlineSyntaxes) {
      this.blockSyntaxes = blockSyntaxes;
      this.inlineSyntaxes = inlineSyntaxes;
      this.$deferredAction();
    }
    ExtensionSet.builtin$cls = "ExtensionSet";
    if (!("name" in ExtensionSet))
      ExtensionSet.name = "ExtensionSet";
    $desc = $collectedClasses$.ExtensionSet[1];
    ExtensionSet.prototype = $desc;
    ExtensionSet.$__fields__ = ["blockSyntaxes", "inlineSyntaxes"];
    function HtmlRenderer(buffer, uniqueIds) {
      this.buffer = buffer;
      this.uniqueIds = uniqueIds;
      this.$deferredAction();
    }
    HtmlRenderer.builtin$cls = "HtmlRenderer";
    if (!("name" in HtmlRenderer))
      HtmlRenderer.name = "HtmlRenderer";
    $desc = $collectedClasses$.HtmlRenderer[1];
    HtmlRenderer.prototype = $desc;
    HtmlRenderer.$__fields__ = ["buffer", "uniqueIds"];
    function HtmlRenderer_visitElementBefore_closure() {
      this.$deferredAction();
    }
    HtmlRenderer_visitElementBefore_closure.builtin$cls = "HtmlRenderer_visitElementBefore_closure";
    if (!("name" in HtmlRenderer_visitElementBefore_closure))
      HtmlRenderer_visitElementBefore_closure.name = "HtmlRenderer_visitElementBefore_closure";
    $desc = $collectedClasses$.HtmlRenderer_visitElementBefore_closure[1];
    HtmlRenderer_visitElementBefore_closure.prototype = $desc;
    HtmlRenderer_visitElementBefore_closure.$__fields__ = [];
    function InlineParser(source, document, syntaxes, pos, start, _stack) {
      this.source = source;
      this.document = document;
      this.syntaxes = syntaxes;
      this.pos = pos;
      this.start = start;
      this._stack = _stack;
      this.$deferredAction();
    }
    InlineParser.builtin$cls = "InlineParser";
    if (!("name" in InlineParser))
      InlineParser.name = "InlineParser";
    $desc = $collectedClasses$.InlineParser[1];
    InlineParser.prototype = $desc;
    InlineParser.$__fields__ = ["source", "document", "syntaxes", "pos", "start", "_stack"];
    InlineParser.prototype.get$start = function(receiver) {
      return this.start;
    };
    function InlineParser_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    InlineParser_closure.builtin$cls = "InlineParser_closure";
    if (!("name" in InlineParser_closure))
      InlineParser_closure.name = "InlineParser_closure";
    $desc = $collectedClasses$.InlineParser_closure[1];
    InlineParser_closure.prototype = $desc;
    InlineParser_closure.$__fields__ = ["$this"];
    function InlineSyntax() {
      this.$deferredAction();
    }
    InlineSyntax.builtin$cls = "InlineSyntax";
    if (!("name" in InlineSyntax))
      InlineSyntax.name = "InlineSyntax";
    $desc = $collectedClasses$.InlineSyntax[1];
    InlineSyntax.prototype = $desc;
    InlineSyntax.$__fields__ = [];
    function LineBreakSyntax(pattern) {
      this.pattern = pattern;
      this.$deferredAction();
    }
    LineBreakSyntax.builtin$cls = "LineBreakSyntax";
    if (!("name" in LineBreakSyntax))
      LineBreakSyntax.name = "LineBreakSyntax";
    $desc = $collectedClasses$.LineBreakSyntax[1];
    LineBreakSyntax.prototype = $desc;
    LineBreakSyntax.$__fields__ = ["pattern"];
    function TextSyntax(substitute, pattern) {
      this.substitute = substitute;
      this.pattern = pattern;
      this.$deferredAction();
    }
    TextSyntax.builtin$cls = "TextSyntax";
    if (!("name" in TextSyntax))
      TextSyntax.name = "TextSyntax";
    $desc = $collectedClasses$.TextSyntax[1];
    TextSyntax.prototype = $desc;
    TextSyntax.$__fields__ = ["substitute", "pattern"];
    function EscapeSyntax(pattern) {
      this.pattern = pattern;
      this.$deferredAction();
    }
    EscapeSyntax.builtin$cls = "EscapeSyntax";
    if (!("name" in EscapeSyntax))
      EscapeSyntax.name = "EscapeSyntax";
    $desc = $collectedClasses$.EscapeSyntax[1];
    EscapeSyntax.prototype = $desc;
    EscapeSyntax.$__fields__ = ["pattern"];
    function InlineHtmlSyntax(substitute, pattern) {
      this.substitute = substitute;
      this.pattern = pattern;
      this.$deferredAction();
    }
    InlineHtmlSyntax.builtin$cls = "InlineHtmlSyntax";
    if (!("name" in InlineHtmlSyntax))
      InlineHtmlSyntax.name = "InlineHtmlSyntax";
    $desc = $collectedClasses$.InlineHtmlSyntax[1];
    InlineHtmlSyntax.prototype = $desc;
    InlineHtmlSyntax.$__fields__ = ["substitute", "pattern"];
    function AutolinkSyntax(pattern) {
      this.pattern = pattern;
      this.$deferredAction();
    }
    AutolinkSyntax.builtin$cls = "AutolinkSyntax";
    if (!("name" in AutolinkSyntax))
      AutolinkSyntax.name = "AutolinkSyntax";
    $desc = $collectedClasses$.AutolinkSyntax[1];
    AutolinkSyntax.prototype = $desc;
    AutolinkSyntax.$__fields__ = ["pattern"];
    function TagSyntax(endPattern, tag, pattern) {
      this.endPattern = endPattern;
      this.tag = tag;
      this.pattern = pattern;
      this.$deferredAction();
    }
    TagSyntax.builtin$cls = "TagSyntax";
    if (!("name" in TagSyntax))
      TagSyntax.name = "TagSyntax";
    $desc = $collectedClasses$.TagSyntax[1];
    TagSyntax.prototype = $desc;
    TagSyntax.$__fields__ = ["endPattern", "tag", "pattern"];
    function LinkSyntax(linkResolver, endPattern, tag, pattern) {
      this.linkResolver = linkResolver;
      this.endPattern = endPattern;
      this.tag = tag;
      this.pattern = pattern;
      this.$deferredAction();
    }
    LinkSyntax.builtin$cls = "LinkSyntax";
    if (!("name" in LinkSyntax))
      LinkSyntax.name = "LinkSyntax";
    $desc = $collectedClasses$.LinkSyntax[1];
    LinkSyntax.prototype = $desc;
    LinkSyntax.$__fields__ = ["linkResolver", "endPattern", "tag", "pattern"];
    function LinkSyntax_getLink__contents($this, parser, state) {
      this.$this = $this;
      this.parser = parser;
      this.state = state;
      this.$deferredAction();
    }
    LinkSyntax_getLink__contents.builtin$cls = "LinkSyntax_getLink__contents";
    if (!("name" in LinkSyntax_getLink__contents))
      LinkSyntax_getLink__contents.name = "LinkSyntax_getLink__contents";
    $desc = $collectedClasses$.LinkSyntax_getLink__contents[1];
    LinkSyntax_getLink__contents.prototype = $desc;
    LinkSyntax_getLink__contents.$__fields__ = ["$this", "parser", "state"];
    function ImageSyntax(linkResolver, endPattern, tag, pattern) {
      this.linkResolver = linkResolver;
      this.endPattern = endPattern;
      this.tag = tag;
      this.pattern = pattern;
      this.$deferredAction();
    }
    ImageSyntax.builtin$cls = "ImageSyntax";
    if (!("name" in ImageSyntax))
      ImageSyntax.name = "ImageSyntax";
    $desc = $collectedClasses$.ImageSyntax[1];
    ImageSyntax.prototype = $desc;
    ImageSyntax.$__fields__ = ["linkResolver", "endPattern", "tag", "pattern"];
    function CodeSyntax(pattern) {
      this.pattern = pattern;
      this.$deferredAction();
    }
    CodeSyntax.builtin$cls = "CodeSyntax";
    if (!("name" in CodeSyntax))
      CodeSyntax.name = "CodeSyntax";
    $desc = $collectedClasses$.CodeSyntax[1];
    CodeSyntax.prototype = $desc;
    CodeSyntax.$__fields__ = ["pattern"];
    function TagState(startPos, endPos, syntax, children) {
      this.startPos = startPos;
      this.endPos = endPos;
      this.syntax = syntax;
      this.children = children;
      this.$deferredAction();
    }
    TagState.builtin$cls = "TagState";
    if (!("name" in TagState))
      TagState.name = "TagState";
    $desc = $collectedClasses$.TagState[1];
    TagState.prototype = $desc;
    TagState.$__fields__ = ["startPos", "endPos", "syntax", "children"];
    TagState.prototype.get$startPos = function() {
      return this.startPos;
    };
    TagState.prototype.get$endPos = function() {
      return this.endPos;
    };
    TagState.prototype.get$children = function(receiver) {
      return this.children;
    };
    function TagState_textContent_closure() {
      this.$deferredAction();
    }
    TagState_textContent_closure.builtin$cls = "TagState_textContent_closure";
    if (!("name" in TagState_textContent_closure))
      TagState_textContent_closure.name = "TagState_textContent_closure";
    $desc = $collectedClasses$.TagState_textContent_closure[1];
    TagState_textContent_closure.prototype = $desc;
    TagState_textContent_closure.$__fields__ = [];
    function Context(style, _context$_current) {
      this.style = style;
      this._context$_current = _context$_current;
      this.$deferredAction();
    }
    Context.builtin$cls = "Context";
    if (!("name" in Context))
      Context.name = "Context";
    $desc = $collectedClasses$.Context[1];
    Context.prototype = $desc;
    Context.$__fields__ = ["style", "_context$_current"];
    Context.prototype.get$style = function(receiver) {
      return this.style;
    };
    function Context_join_closure() {
      this.$deferredAction();
    }
    Context_join_closure.builtin$cls = "Context_join_closure";
    if (!("name" in Context_join_closure))
      Context_join_closure.name = "Context_join_closure";
    $desc = $collectedClasses$.Context_join_closure[1];
    Context_join_closure.prototype = $desc;
    Context_join_closure.$__fields__ = [];
    function Context_joinAll_closure() {
      this.$deferredAction();
    }
    Context_joinAll_closure.builtin$cls = "Context_joinAll_closure";
    if (!("name" in Context_joinAll_closure))
      Context_joinAll_closure.name = "Context_joinAll_closure";
    $desc = $collectedClasses$.Context_joinAll_closure[1];
    Context_joinAll_closure.prototype = $desc;
    Context_joinAll_closure.$__fields__ = [];
    function Context_split_closure() {
      this.$deferredAction();
    }
    Context_split_closure.builtin$cls = "Context_split_closure";
    if (!("name" in Context_split_closure))
      Context_split_closure.name = "Context_split_closure";
    $desc = $collectedClasses$.Context_split_closure[1];
    Context_split_closure.prototype = $desc;
    Context_split_closure.$__fields__ = [];
    function _validateArgList_closure() {
      this.$deferredAction();
    }
    _validateArgList_closure.builtin$cls = "_validateArgList_closure";
    if (!("name" in _validateArgList_closure))
      _validateArgList_closure.name = "_validateArgList_closure";
    $desc = $collectedClasses$._validateArgList_closure[1];
    _validateArgList_closure.prototype = $desc;
    _validateArgList_closure.$__fields__ = [];
    function InternalStyle() {
      this.$deferredAction();
    }
    InternalStyle.builtin$cls = "InternalStyle";
    if (!("name" in InternalStyle))
      InternalStyle.name = "InternalStyle";
    $desc = $collectedClasses$.InternalStyle[1];
    InternalStyle.prototype = $desc;
    InternalStyle.$__fields__ = [];
    function ParsedPath(style, root, isRootRelative, parts, separators) {
      this.style = style;
      this.root = root;
      this.isRootRelative = isRootRelative;
      this.parts = parts;
      this.separators = separators;
      this.$deferredAction();
    }
    ParsedPath.builtin$cls = "ParsedPath";
    if (!("name" in ParsedPath))
      ParsedPath.name = "ParsedPath";
    $desc = $collectedClasses$.ParsedPath[1];
    ParsedPath.prototype = $desc;
    ParsedPath.$__fields__ = ["style", "root", "isRootRelative", "parts", "separators"];
    ParsedPath.prototype.get$style = function(receiver) {
      return this.style;
    };
    ParsedPath.prototype.get$root = function(receiver) {
      return this.root;
    };
    function ParsedPath_normalize_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    ParsedPath_normalize_closure.builtin$cls = "ParsedPath_normalize_closure";
    if (!("name" in ParsedPath_normalize_closure))
      ParsedPath_normalize_closure.name = "ParsedPath_normalize_closure";
    $desc = $collectedClasses$.ParsedPath_normalize_closure[1];
    ParsedPath_normalize_closure.prototype = $desc;
    ParsedPath_normalize_closure.$__fields__ = ["$this"];
    function PathException(message) {
      this.message = message;
      this.$deferredAction();
    }
    PathException.builtin$cls = "PathException";
    if (!("name" in PathException))
      PathException.name = "PathException";
    $desc = $collectedClasses$.PathException[1];
    PathException.prototype = $desc;
    PathException.$__fields__ = ["message"];
    PathException.prototype.get$message = function(receiver) {
      return this.message;
    };
    function Style() {
      this.$deferredAction();
    }
    Style.builtin$cls = "Style";
    if (!("name" in Style))
      Style.name = "Style";
    $desc = $collectedClasses$.Style[1];
    Style.prototype = $desc;
    Style.$__fields__ = [];
    function PosixStyle(name, separator, separators, separatorPattern, needsSeparatorPattern, rootPattern, relativeRootPattern) {
      this.name = name;
      this.separator = separator;
      this.separators = separators;
      this.separatorPattern = separatorPattern;
      this.needsSeparatorPattern = needsSeparatorPattern;
      this.rootPattern = rootPattern;
      this.relativeRootPattern = relativeRootPattern;
      this.$deferredAction();
    }
    PosixStyle.builtin$cls = "PosixStyle";
    if (!("name" in PosixStyle))
      PosixStyle.name = "PosixStyle";
    $desc = $collectedClasses$.PosixStyle[1];
    PosixStyle.prototype = $desc;
    PosixStyle.$__fields__ = ["name", "separator", "separators", "separatorPattern", "needsSeparatorPattern", "rootPattern", "relativeRootPattern"];
    PosixStyle.prototype.get$name = function(receiver) {
      return this.name;
    };
    PosixStyle.prototype.get$separator = function() {
      return this.separator;
    };
    function UrlStyle(name, separator, separators, separatorPattern, needsSeparatorPattern, rootPattern, relativeRootPattern) {
      this.name = name;
      this.separator = separator;
      this.separators = separators;
      this.separatorPattern = separatorPattern;
      this.needsSeparatorPattern = needsSeparatorPattern;
      this.rootPattern = rootPattern;
      this.relativeRootPattern = relativeRootPattern;
      this.$deferredAction();
    }
    UrlStyle.builtin$cls = "UrlStyle";
    if (!("name" in UrlStyle))
      UrlStyle.name = "UrlStyle";
    $desc = $collectedClasses$.UrlStyle[1];
    UrlStyle.prototype = $desc;
    UrlStyle.$__fields__ = ["name", "separator", "separators", "separatorPattern", "needsSeparatorPattern", "rootPattern", "relativeRootPattern"];
    UrlStyle.prototype.get$name = function(receiver) {
      return this.name;
    };
    UrlStyle.prototype.get$separator = function() {
      return this.separator;
    };
    function WindowsStyle(name, separator, separators, separatorPattern, needsSeparatorPattern, rootPattern, relativeRootPattern) {
      this.name = name;
      this.separator = separator;
      this.separators = separators;
      this.separatorPattern = separatorPattern;
      this.needsSeparatorPattern = needsSeparatorPattern;
      this.rootPattern = rootPattern;
      this.relativeRootPattern = relativeRootPattern;
      this.$deferredAction();
    }
    WindowsStyle.builtin$cls = "WindowsStyle";
    if (!("name" in WindowsStyle))
      WindowsStyle.name = "WindowsStyle";
    $desc = $collectedClasses$.WindowsStyle[1];
    WindowsStyle.prototype = $desc;
    WindowsStyle.$__fields__ = ["name", "separator", "separators", "separatorPattern", "needsSeparatorPattern", "rootPattern", "relativeRootPattern"];
    WindowsStyle.prototype.get$name = function(receiver) {
      return this.name;
    };
    WindowsStyle.prototype.get$separator = function() {
      return this.separator;
    };
    function Version(major, minor, patch, preRelease, build, _version$_text) {
      this.major = major;
      this.minor = minor;
      this.patch = patch;
      this.preRelease = preRelease;
      this.build = build;
      this._version$_text = _version$_text;
      this.$deferredAction();
    }
    Version.builtin$cls = "Version";
    if (!("name" in Version))
      Version.name = "Version";
    $desc = $collectedClasses$.Version[1];
    Version.prototype = $desc;
    Version.$__fields__ = ["major", "minor", "patch", "preRelease", "build", "_version$_text"];
    Version.prototype.get$major = function() {
      return this.major;
    };
    Version.prototype.get$minor = function() {
      return this.minor;
    };
    function Version__splitParts_closure() {
      this.$deferredAction();
    }
    Version__splitParts_closure.builtin$cls = "Version__splitParts_closure";
    if (!("name" in Version__splitParts_closure))
      Version__splitParts_closure.name = "Version__splitParts_closure";
    $desc = $collectedClasses$.Version__splitParts_closure[1];
    Version__splitParts_closure.prototype = $desc;
    Version__splitParts_closure.$__fields__ = [];
    function VersionRange() {
      this.$deferredAction();
    }
    VersionRange.builtin$cls = "VersionRange";
    if (!("name" in VersionRange))
      VersionRange.name = "VersionRange";
    $desc = $collectedClasses$.VersionRange[1];
    VersionRange.prototype = $desc;
    VersionRange.$__fields__ = [];
    function SourceFile(url, _lineStarts, _decodedChars, _cachedLine) {
      this.url = url;
      this._lineStarts = _lineStarts;
      this._decodedChars = _decodedChars;
      this._cachedLine = _cachedLine;
      this.$deferredAction();
    }
    SourceFile.builtin$cls = "SourceFile";
    if (!("name" in SourceFile))
      SourceFile.name = "SourceFile";
    $desc = $collectedClasses$.SourceFile[1];
    SourceFile.prototype = $desc;
    SourceFile.$__fields__ = ["url", "_lineStarts", "_decodedChars", "_cachedLine"];
    SourceFile.prototype.get$url = function(receiver) {
      return this.url;
    };
    function FileLocation(file, offset) {
      this.file = file;
      this.offset = offset;
      this.$deferredAction();
    }
    FileLocation.builtin$cls = "FileLocation";
    if (!("name" in FileLocation))
      FileLocation.name = "FileLocation";
    $desc = $collectedClasses$.FileLocation[1];
    FileLocation.prototype = $desc;
    FileLocation.$__fields__ = ["file", "offset"];
    FileLocation.prototype.get$file = function(receiver) {
      return this.file;
    };
    FileLocation.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    function FileSpan() {
      this.$deferredAction();
    }
    FileSpan.builtin$cls = "FileSpan";
    if (!("name" in FileSpan))
      FileSpan.name = "FileSpan";
    $desc = $collectedClasses$.FileSpan[1];
    FileSpan.prototype = $desc;
    FileSpan.$__fields__ = [];
    function _FileSpan(file, _file$_start, _end) {
      this.file = file;
      this._file$_start = _file$_start;
      this._end = _end;
      this.$deferredAction();
    }
    _FileSpan.builtin$cls = "_FileSpan";
    if (!("name" in _FileSpan))
      _FileSpan.name = "_FileSpan";
    $desc = $collectedClasses$._FileSpan[1];
    _FileSpan.prototype = $desc;
    _FileSpan.$__fields__ = ["file", "_file$_start", "_end"];
    _FileSpan.prototype.get$file = function(receiver) {
      return this.file;
    };
    function SourceLocation() {
      this.$deferredAction();
    }
    SourceLocation.builtin$cls = "SourceLocation";
    if (!("name" in SourceLocation))
      SourceLocation.name = "SourceLocation";
    $desc = $collectedClasses$.SourceLocation[1];
    SourceLocation.prototype = $desc;
    SourceLocation.$__fields__ = [];
    function SourceLocationMixin() {
      this.$deferredAction();
    }
    SourceLocationMixin.builtin$cls = "SourceLocationMixin";
    if (!("name" in SourceLocationMixin))
      SourceLocationMixin.name = "SourceLocationMixin";
    $desc = $collectedClasses$.SourceLocationMixin[1];
    SourceLocationMixin.prototype = $desc;
    SourceLocationMixin.$__fields__ = [];
    function SourceSpan() {
      this.$deferredAction();
    }
    SourceSpan.builtin$cls = "SourceSpan";
    if (!("name" in SourceSpan))
      SourceSpan.name = "SourceSpan";
    $desc = $collectedClasses$.SourceSpan[1];
    SourceSpan.prototype = $desc;
    SourceSpan.$__fields__ = [];
    function SourceSpanException() {
      this.$deferredAction();
    }
    SourceSpanException.builtin$cls = "SourceSpanException";
    if (!("name" in SourceSpanException))
      SourceSpanException.name = "SourceSpanException";
    $desc = $collectedClasses$.SourceSpanException[1];
    SourceSpanException.prototype = $desc;
    SourceSpanException.$__fields__ = [];
    function SourceSpanFormatException() {
      this.$deferredAction();
    }
    SourceSpanFormatException.builtin$cls = "SourceSpanFormatException";
    if (!("name" in SourceSpanFormatException))
      SourceSpanFormatException.name = "SourceSpanFormatException";
    $desc = $collectedClasses$.SourceSpanFormatException[1];
    SourceSpanFormatException.prototype = $desc;
    SourceSpanFormatException.$__fields__ = [];
    function SourceSpanMixin() {
      this.$deferredAction();
    }
    SourceSpanMixin.builtin$cls = "SourceSpanMixin";
    if (!("name" in SourceSpanMixin))
      SourceSpanMixin.name = "SourceSpanMixin";
    $desc = $collectedClasses$.SourceSpanMixin[1];
    SourceSpanMixin.prototype = $desc;
    SourceSpanMixin.$__fields__ = [];
    function EagerSpanScanner(_line, _column, _sourceFile, _lastSpan, sourceUrl, string, _string_scanner$_position, _lastMatch, _lastMatchPosition) {
      this._line = _line;
      this._column = _column;
      this._sourceFile = _sourceFile;
      this._lastSpan = _lastSpan;
      this.sourceUrl = sourceUrl;
      this.string = string;
      this._string_scanner$_position = _string_scanner$_position;
      this._lastMatch = _lastMatch;
      this._lastMatchPosition = _lastMatchPosition;
      this.$deferredAction();
    }
    EagerSpanScanner.builtin$cls = "EagerSpanScanner";
    if (!("name" in EagerSpanScanner))
      EagerSpanScanner.name = "EagerSpanScanner";
    $desc = $collectedClasses$.EagerSpanScanner[1];
    EagerSpanScanner.prototype = $desc;
    EagerSpanScanner.$__fields__ = ["_line", "_column", "_sourceFile", "_lastSpan", "sourceUrl", "string", "_string_scanner$_position", "_lastMatch", "_lastMatchPosition"];
    function _EagerSpanScannerState(_eager_span_scanner$_scanner, position, line, column) {
      this._eager_span_scanner$_scanner = _eager_span_scanner$_scanner;
      this.position = position;
      this.line = line;
      this.column = column;
      this.$deferredAction();
    }
    _EagerSpanScannerState.builtin$cls = "_EagerSpanScannerState";
    if (!("name" in _EagerSpanScannerState))
      _EagerSpanScannerState.name = "_EagerSpanScannerState";
    $desc = $collectedClasses$._EagerSpanScannerState[1];
    _EagerSpanScannerState.prototype = $desc;
    _EagerSpanScannerState.$__fields__ = ["_eager_span_scanner$_scanner", "position", "line", "column"];
    _EagerSpanScannerState.prototype.get$line = function(receiver) {
      return this.line;
    };
    _EagerSpanScannerState.prototype.get$column = function() {
      return this.column;
    };
    function StringScannerException(_span_exception$_source, _span_exception$_message, _span_exception$_span) {
      this._span_exception$_source = _span_exception$_source;
      this._span_exception$_message = _span_exception$_message;
      this._span_exception$_span = _span_exception$_span;
      this.$deferredAction();
    }
    StringScannerException.builtin$cls = "StringScannerException";
    if (!("name" in StringScannerException))
      StringScannerException.name = "StringScannerException";
    $desc = $collectedClasses$.StringScannerException[1];
    StringScannerException.prototype = $desc;
    StringScannerException.$__fields__ = ["_span_exception$_source", "_span_exception$_message", "_span_exception$_span"];
    function SpanScanner() {
      this.$deferredAction();
    }
    SpanScanner.builtin$cls = "SpanScanner";
    if (!("name" in SpanScanner))
      SpanScanner.name = "SpanScanner";
    $desc = $collectedClasses$.SpanScanner[1];
    SpanScanner.prototype = $desc;
    SpanScanner.$__fields__ = [];
    function StringScanner(sourceUrl) {
      this.sourceUrl = sourceUrl;
      this.$deferredAction();
    }
    StringScanner.builtin$cls = "StringScanner";
    if (!("name" in StringScanner))
      StringScanner.name = "StringScanner";
    $desc = $collectedClasses$.StringScanner[1];
    StringScanner.prototype = $desc;
    StringScanner.$__fields__ = ["sourceUrl"];
    StringScanner.prototype.get$sourceUrl = function() {
      return this.sourceUrl;
    };
    function postEncode_closure(map) {
      this.map = map;
      this.$deferredAction();
    }
    postEncode_closure.builtin$cls = "postEncode_closure";
    if (!("name" in postEncode_closure))
      postEncode_closure.name = "postEncode_closure";
    $desc = $collectedClasses$.postEncode_closure[1];
    postEncode_closure.prototype = $desc;
    postEncode_closure.$__fields__ = ["map"];
    function ThrottlingBucket(startingCount, drops, _lastReplenish) {
      this.startingCount = startingCount;
      this.drops = drops;
      this._lastReplenish = _lastReplenish;
      this.$deferredAction();
    }
    ThrottlingBucket.builtin$cls = "ThrottlingBucket";
    if (!("name" in ThrottlingBucket))
      ThrottlingBucket.name = "ThrottlingBucket";
    $desc = $collectedClasses$.ThrottlingBucket[1];
    ThrottlingBucket.prototype = $desc;
    ThrottlingBucket.$__fields__ = ["startingCount", "drops", "_lastReplenish"];
    function AnalyticsImpl() {
      this.$deferredAction();
    }
    AnalyticsImpl.builtin$cls = "AnalyticsImpl";
    if (!("name" in AnalyticsImpl))
      AnalyticsImpl.name = "AnalyticsImpl";
    $desc = $collectedClasses$.AnalyticsImpl[1];
    AnalyticsImpl.prototype = $desc;
    AnalyticsImpl.$__fields__ = [];
    function AnalyticsImpl__sendPayload_closure(args) {
      this.args = args;
      this.$deferredAction();
    }
    AnalyticsImpl__sendPayload_closure.builtin$cls = "AnalyticsImpl__sendPayload_closure";
    if (!("name" in AnalyticsImpl__sendPayload_closure))
      AnalyticsImpl__sendPayload_closure.name = "AnalyticsImpl__sendPayload_closure";
    $desc = $collectedClasses$.AnalyticsImpl__sendPayload_closure[1];
    AnalyticsImpl__sendPayload_closure.prototype = $desc;
    AnalyticsImpl__sendPayload_closure.$__fields__ = ["args"];
    function AnalyticsImpl__recordFuture_closure($this, f) {
      this.$this = $this;
      this.f = f;
      this.$deferredAction();
    }
    AnalyticsImpl__recordFuture_closure.builtin$cls = "AnalyticsImpl__recordFuture_closure";
    if (!("name" in AnalyticsImpl__recordFuture_closure))
      AnalyticsImpl__recordFuture_closure.name = "AnalyticsImpl__recordFuture_closure";
    $desc = $collectedClasses$.AnalyticsImpl__recordFuture_closure[1];
    AnalyticsImpl__recordFuture_closure.prototype = $desc;
    AnalyticsImpl__recordFuture_closure.$__fields__ = ["$this", "f"];
    function PersistentProperties(name) {
      this.name = name;
      this.$deferredAction();
    }
    PersistentProperties.builtin$cls = "PersistentProperties";
    if (!("name" in PersistentProperties))
      PersistentProperties.name = "PersistentProperties";
    $desc = $collectedClasses$.PersistentProperties[1];
    PersistentProperties.prototype = $desc;
    PersistentProperties.$__fields__ = ["name"];
    PersistentProperties.prototype.get$name = function(receiver) {
      return this.name;
    };
    function PostHandler() {
      this.$deferredAction();
    }
    PostHandler.builtin$cls = "PostHandler";
    if (!("name" in PostHandler))
      PostHandler.name = "PostHandler";
    $desc = $collectedClasses$.PostHandler[1];
    PostHandler.prototype = $desc;
    PostHandler.$__fields__ = [];
    function HtmlPostHandler(mockRequestor) {
      this.mockRequestor = mockRequestor;
      this.$deferredAction();
    }
    HtmlPostHandler.builtin$cls = "HtmlPostHandler";
    if (!("name" in HtmlPostHandler))
      HtmlPostHandler.name = "HtmlPostHandler";
    $desc = $collectedClasses$.HtmlPostHandler[1];
    HtmlPostHandler.prototype = $desc;
    HtmlPostHandler.$__fields__ = ["mockRequestor"];
    function HtmlPostHandler_sendPost_closure() {
      this.$deferredAction();
    }
    HtmlPostHandler_sendPost_closure.builtin$cls = "HtmlPostHandler_sendPost_closure";
    if (!("name" in HtmlPostHandler_sendPost_closure))
      HtmlPostHandler_sendPost_closure.name = "HtmlPostHandler_sendPost_closure";
    $desc = $collectedClasses$.HtmlPostHandler_sendPost_closure[1];
    HtmlPostHandler_sendPost_closure.prototype = $desc;
    HtmlPostHandler_sendPost_closure.$__fields__ = [];
    function HtmlPersistentProperties(_usage_impl_html$_map, name) {
      this._usage_impl_html$_map = _usage_impl_html$_map;
      this.name = name;
      this.$deferredAction();
    }
    HtmlPersistentProperties.builtin$cls = "HtmlPersistentProperties";
    if (!("name" in HtmlPersistentProperties))
      HtmlPersistentProperties.name = "HtmlPersistentProperties";
    $desc = $collectedClasses$.HtmlPersistentProperties[1];
    HtmlPersistentProperties.prototype = $desc;
    HtmlPersistentProperties.$__fields__ = ["_usage_impl_html$_map", "name"];
    function Analytics() {
      this.$deferredAction();
    }
    Analytics.builtin$cls = "Analytics";
    if (!("name" in Analytics))
      Analytics.name = "Analytics";
    $desc = $collectedClasses$.Analytics[1];
    Analytics.prototype = $desc;
    Analytics.$__fields__ = [];
    function AnalyticsMock(logCalls, optIn, hasSetOptIn) {
      this.logCalls = logCalls;
      this.optIn = optIn;
      this.hasSetOptIn = hasSetOptIn;
      this.$deferredAction();
    }
    AnalyticsMock.builtin$cls = "AnalyticsMock";
    if (!("name" in AnalyticsMock))
      AnalyticsMock.name = "AnalyticsMock";
    $desc = $collectedClasses$.AnalyticsMock[1];
    AnalyticsMock.prototype = $desc;
    AnalyticsMock.$__fields__ = ["logCalls", "optIn", "hasSetOptIn"];
    function AnalyticsHtml(trackingId, properties, postHandler, _bucket, _variableMap, _futures, _url) {
      this.trackingId = trackingId;
      this.properties = properties;
      this.postHandler = postHandler;
      this._bucket = _bucket;
      this._variableMap = _variableMap;
      this._futures = _futures;
      this._url = _url;
      this.$deferredAction();
    }
    AnalyticsHtml.builtin$cls = "AnalyticsHtml";
    if (!("name" in AnalyticsHtml))
      AnalyticsHtml.name = "AnalyticsHtml";
    $desc = $collectedClasses$.AnalyticsHtml[1];
    AnalyticsHtml.prototype = $desc;
    AnalyticsHtml.$__fields__ = ["trackingId", "properties", "postHandler", "_bucket", "_variableMap", "_futures", "_url"];
    function _createObject_closure() {
      this.$deferredAction();
    }
    _createObject_closure.builtin$cls = "_createObject_closure";
    if (!("name" in _createObject_closure))
      _createObject_closure.name = "_createObject_closure";
    $desc = $collectedClasses$._createObject_closure[1];
    _createObject_closure.prototype = $desc;
    _createObject_closure.$__fields__ = [];
    function _createSpecificObject_closure(creator) {
      this.creator = creator;
      this.$deferredAction();
    }
    _createSpecificObject_closure.builtin$cls = "_createSpecificObject_closure";
    if (!("name" in _createSpecificObject_closure))
      _createSpecificObject_closure.name = "_createSpecificObject_closure";
    $desc = $collectedClasses$._createSpecificObject_closure[1];
    _createSpecificObject_closure.prototype = $desc;
    _createSpecificObject_closure.$__fields__ = ["creator"];
    function VmService(_vm_service_lib$_streamSub, _vm_service_lib$_writeMessage, _vm_service_lib$_id, _vm_service_lib$_completers, _methodCalls, _vm_service_lib$_log, _vm_service_lib$_onSend, _vm_service_lib$_onReceive, _eventControllers, _disposeHandler) {
      this._vm_service_lib$_streamSub = _vm_service_lib$_streamSub;
      this._vm_service_lib$_writeMessage = _vm_service_lib$_writeMessage;
      this._vm_service_lib$_id = _vm_service_lib$_id;
      this._vm_service_lib$_completers = _vm_service_lib$_completers;
      this._methodCalls = _methodCalls;
      this._vm_service_lib$_log = _vm_service_lib$_log;
      this._vm_service_lib$_onSend = _vm_service_lib$_onSend;
      this._vm_service_lib$_onReceive = _vm_service_lib$_onReceive;
      this._eventControllers = _eventControllers;
      this._disposeHandler = _disposeHandler;
      this.$deferredAction();
    }
    VmService.builtin$cls = "VmService";
    if (!("name" in VmService))
      VmService.name = "VmService";
    $desc = $collectedClasses$.VmService[1];
    VmService.prototype = $desc;
    VmService.$__fields__ = ["_vm_service_lib$_streamSub", "_vm_service_lib$_writeMessage", "_vm_service_lib$_id", "_vm_service_lib$_completers", "_methodCalls", "_vm_service_lib$_log", "_vm_service_lib$_onSend", "_vm_service_lib$_onReceive", "_eventControllers", "_disposeHandler"];
    function VmService_dispose_closure() {
      this.$deferredAction();
    }
    VmService_dispose_closure.builtin$cls = "VmService_dispose_closure";
    if (!("name" in VmService_dispose_closure))
      VmService_dispose_closure.name = "VmService_dispose_closure";
    $desc = $collectedClasses$.VmService_dispose_closure[1];
    VmService_dispose_closure.prototype = $desc;
    VmService_dispose_closure.$__fields__ = [];
    function RPCError(callingMethod, code, message, data) {
      this.callingMethod = callingMethod;
      this.code = code;
      this.message = message;
      this.data = data;
      this.$deferredAction();
    }
    RPCError.builtin$cls = "RPCError";
    if (!("name" in RPCError))
      RPCError.name = "RPCError";
    $desc = $collectedClasses$.RPCError[1];
    RPCError.prototype = $desc;
    RPCError.$__fields__ = ["callingMethod", "code", "message", "data"];
    RPCError.prototype.get$code = function(receiver) {
      return this.code;
    };
    RPCError.prototype.get$message = function(receiver) {
      return this.message;
    };
    RPCError.prototype.get$data = function(receiver) {
      return this.data;
    };
    function ExtensionData(data) {
      this.data = data;
      this.$deferredAction();
    }
    ExtensionData.builtin$cls = "ExtensionData";
    if (!("name" in ExtensionData))
      ExtensionData.name = "ExtensionData";
    $desc = $collectedClasses$.ExtensionData[1];
    ExtensionData.prototype = $desc;
    ExtensionData.$__fields__ = ["data"];
    ExtensionData.prototype.get$data = function(receiver) {
      return this.data;
    };
    function Log() {
      this.$deferredAction();
    }
    Log.builtin$cls = "Log";
    if (!("name" in Log))
      Log.name = "Log";
    $desc = $collectedClasses$.Log[1];
    Log.prototype = $desc;
    Log.$__fields__ = [];
    function BoundField(decl, value) {
      this.decl = decl;
      this.value = value;
      this.$deferredAction();
    }
    BoundField.builtin$cls = "BoundField";
    if (!("name" in BoundField))
      BoundField.name = "BoundField";
    $desc = $collectedClasses$.BoundField[1];
    BoundField.prototype = $desc;
    BoundField.$__fields__ = ["decl", "value"];
    BoundField.prototype.get$decl = function() {
      return this.decl;
    };
    BoundField.prototype.get$value = function(receiver) {
      return this.value;
    };
    function BoundVariable(name, value, declarationTokenPos, scopeStartTokenPos, scopeEndTokenPos) {
      this.name = name;
      this.value = value;
      this.declarationTokenPos = declarationTokenPos;
      this.scopeStartTokenPos = scopeStartTokenPos;
      this.scopeEndTokenPos = scopeEndTokenPos;
      this.$deferredAction();
    }
    BoundVariable.builtin$cls = "BoundVariable";
    if (!("name" in BoundVariable))
      BoundVariable.name = "BoundVariable";
    $desc = $collectedClasses$.BoundVariable[1];
    BoundVariable.prototype = $desc;
    BoundVariable.$__fields__ = ["name", "value", "declarationTokenPos", "scopeStartTokenPos", "scopeEndTokenPos"];
    BoundVariable.prototype.get$name = function(receiver) {
      return this.name;
    };
    BoundVariable.prototype.get$value = function(receiver) {
      return this.value;
    };
    function Breakpoint(breakpointNumber, resolved, isSyntheticAsyncContinuation, location, id, classRef, size, json, type) {
      this.breakpointNumber = breakpointNumber;
      this.resolved = resolved;
      this.isSyntheticAsyncContinuation = isSyntheticAsyncContinuation;
      this.location = location;
      this.id = id;
      this.classRef = classRef;
      this.size = size;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Breakpoint.builtin$cls = "Breakpoint";
    if (!("name" in Breakpoint))
      Breakpoint.name = "Breakpoint";
    $desc = $collectedClasses$.Breakpoint[1];
    Breakpoint.prototype = $desc;
    Breakpoint.$__fields__ = ["breakpointNumber", "resolved", "isSyntheticAsyncContinuation", "location", "id", "classRef", "size", "json", "type"];
    Breakpoint.prototype.get$resolved = function() {
      return this.resolved;
    };
    Breakpoint.prototype.get$location = function(receiver) {
      return this.location;
    };
    function ClassRef(name, id, json, type) {
      this.name = name;
      this.id = id;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    ClassRef.builtin$cls = "ClassRef";
    if (!("name" in ClassRef))
      ClassRef.name = "ClassRef";
    $desc = $collectedClasses$.ClassRef[1];
    ClassRef.prototype = $desc;
    ClassRef.$__fields__ = ["name", "id", "json", "type"];
    ClassRef.prototype.get$name = function(receiver) {
      return this.name;
    };
    function Class(name, error, isAbstract, isConst, library, location, superClass, superType, interfaces, mixin, fields, functions, subclasses, id, classRef, size, json, type) {
      this.name = name;
      this.error = error;
      this.isAbstract = isAbstract;
      this.isConst = isConst;
      this.library = library;
      this.location = location;
      this.superClass = superClass;
      this.superType = superType;
      this.interfaces = interfaces;
      this.mixin = mixin;
      this.fields = fields;
      this.functions = functions;
      this.subclasses = subclasses;
      this.id = id;
      this.classRef = classRef;
      this.size = size;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Class.builtin$cls = "Class";
    if (!("name" in Class))
      Class.name = "Class";
    $desc = $collectedClasses$.Class[1];
    Class.prototype = $desc;
    Class.$__fields__ = ["name", "error", "isAbstract", "isConst", "library", "location", "superClass", "superType", "interfaces", "mixin", "fields", "functions", "subclasses", "id", "classRef", "size", "json", "type"];
    Class.prototype.get$name = function(receiver) {
      return this.name;
    };
    Class.prototype.get$error = function(receiver) {
      return this.error;
    };
    Class.prototype.get$location = function(receiver) {
      return this.location;
    };
    Class.prototype.get$interfaces = function() {
      return this.interfaces;
    };
    Class.prototype.get$subclasses = function() {
      return this.subclasses;
    };
    function ClassList(classes, json, type) {
      this.classes = classes;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    ClassList.builtin$cls = "ClassList";
    if (!("name" in ClassList))
      ClassList.name = "ClassList";
    $desc = $collectedClasses$.ClassList[1];
    ClassList.prototype = $desc;
    ClassList.$__fields__ = ["classes", "json", "type"];
    ClassList.prototype.get$classes = function(receiver) {
      return this.classes;
    };
    function CodeRef(name, kind, id, json, type) {
      this.name = name;
      this.kind = kind;
      this.id = id;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    CodeRef.builtin$cls = "CodeRef";
    if (!("name" in CodeRef))
      CodeRef.name = "CodeRef";
    $desc = $collectedClasses$.CodeRef[1];
    CodeRef.prototype = $desc;
    CodeRef.$__fields__ = ["name", "kind", "id", "json", "type"];
    CodeRef.prototype.get$name = function(receiver) {
      return this.name;
    };
    CodeRef.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    function Code(name, kind, id, json, type) {
      this.name = name;
      this.kind = kind;
      this.id = id;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Code.builtin$cls = "Code";
    if (!("name" in Code))
      Code.name = "Code";
    $desc = $collectedClasses$.Code[1];
    Code.prototype = $desc;
    Code.$__fields__ = ["name", "kind", "id", "json", "type"];
    Code.prototype.get$name = function(receiver) {
      return this.name;
    };
    Code.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    function ContextRef(length, id, json, type) {
      this.length = length;
      this.id = id;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    ContextRef.builtin$cls = "ContextRef";
    if (!("name" in ContextRef))
      ContextRef.name = "ContextRef";
    $desc = $collectedClasses$.ContextRef[1];
    ContextRef.prototype = $desc;
    ContextRef.$__fields__ = ["length", "id", "json", "type"];
    ContextRef.prototype.get$length = function(receiver) {
      return this.length;
    };
    function Context0(length, parent, variables, id, classRef, size, json, type) {
      this.length = length;
      this.parent = parent;
      this.variables = variables;
      this.id = id;
      this.classRef = classRef;
      this.size = size;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Context0.builtin$cls = "Context0";
    if (!("name" in Context0))
      Context0.name = "Context0";
    $desc = $collectedClasses$.Context0[1];
    Context0.prototype = $desc;
    Context0.$__fields__ = ["length", "parent", "variables", "id", "classRef", "size", "json", "type"];
    Context0.prototype.get$length = function(receiver) {
      return this.length;
    };
    Context0.prototype.get$parent = function(receiver) {
      return this.parent;
    };
    function ContextElement(value) {
      this.value = value;
      this.$deferredAction();
    }
    ContextElement.builtin$cls = "ContextElement";
    if (!("name" in ContextElement))
      ContextElement.name = "ContextElement";
    $desc = $collectedClasses$.ContextElement[1];
    ContextElement.prototype = $desc;
    ContextElement.$__fields__ = ["value"];
    ContextElement.prototype.get$value = function(receiver) {
      return this.value;
    };
    function ErrorRef(kind, message, id, json, type) {
      this.kind = kind;
      this.message = message;
      this.id = id;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    ErrorRef.builtin$cls = "ErrorRef";
    if (!("name" in ErrorRef))
      ErrorRef.name = "ErrorRef";
    $desc = $collectedClasses$.ErrorRef[1];
    ErrorRef.prototype = $desc;
    ErrorRef.$__fields__ = ["kind", "message", "id", "json", "type"];
    ErrorRef.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    ErrorRef.prototype.get$message = function(receiver) {
      return this.message;
    };
    function Error0(kind, message, exception, stacktrace, id, classRef, size, json, type) {
      this.kind = kind;
      this.message = message;
      this.exception = exception;
      this.stacktrace = stacktrace;
      this.id = id;
      this.classRef = classRef;
      this.size = size;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Error0.builtin$cls = "Error0";
    if (!("name" in Error0))
      Error0.name = "Error0";
    $desc = $collectedClasses$.Error0[1];
    Error0.prototype = $desc;
    Error0.$__fields__ = ["kind", "message", "exception", "stacktrace", "id", "classRef", "size", "json", "type"];
    Error0.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    Error0.prototype.get$message = function(receiver) {
      return this.message;
    };
    Error0.prototype.get$exception = function() {
      return this.exception;
    };
    function Event1(kind, isolate, vm, timestamp, breakpoint, pauseBreakpoints, topFrame, exception, bytes, inspectee, extensionRPC, extensionKind, extensionData, timelineEvents, atAsyncSuspension, json, type) {
      this.kind = kind;
      this.isolate = isolate;
      this.vm = vm;
      this.timestamp = timestamp;
      this.breakpoint = breakpoint;
      this.pauseBreakpoints = pauseBreakpoints;
      this.topFrame = topFrame;
      this.exception = exception;
      this.bytes = bytes;
      this.inspectee = inspectee;
      this.extensionRPC = extensionRPC;
      this.extensionKind = extensionKind;
      this.extensionData = extensionData;
      this.timelineEvents = timelineEvents;
      this.atAsyncSuspension = atAsyncSuspension;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Event1.builtin$cls = "Event1";
    if (!("name" in Event1))
      Event1.name = "Event1";
    $desc = $collectedClasses$.Event1[1];
    Event1.prototype = $desc;
    Event1.$__fields__ = ["kind", "isolate", "vm", "timestamp", "breakpoint", "pauseBreakpoints", "topFrame", "exception", "bytes", "inspectee", "extensionRPC", "extensionKind", "extensionData", "timelineEvents", "atAsyncSuspension", "json", "type"];
    Event1.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    Event1.prototype.get$isolate = function() {
      return this.isolate;
    };
    Event1.prototype.get$timestamp = function(receiver) {
      return this.timestamp;
    };
    Event1.prototype.get$exception = function() {
      return this.exception;
    };
    Event1.prototype.get$bytes = function() {
      return this.bytes;
    };
    Event1.prototype.get$inspectee = function() {
      return this.inspectee;
    };
    Event1.prototype.get$extensionRPC = function() {
      return this.extensionRPC;
    };
    Event1.prototype.get$atAsyncSuspension = function() {
      return this.atAsyncSuspension;
    };
    function FieldRef(name, owner, declaredType, isConst, isFinal, isStatic, id, json, type) {
      this.name = name;
      this.owner = owner;
      this.declaredType = declaredType;
      this.isConst = isConst;
      this.isFinal = isFinal;
      this.isStatic = isStatic;
      this.id = id;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    FieldRef.builtin$cls = "FieldRef";
    if (!("name" in FieldRef))
      FieldRef.name = "FieldRef";
    $desc = $collectedClasses$.FieldRef[1];
    FieldRef.prototype = $desc;
    FieldRef.$__fields__ = ["name", "owner", "declaredType", "isConst", "isFinal", "isStatic", "id", "json", "type"];
    FieldRef.prototype.get$name = function(receiver) {
      return this.name;
    };
    FieldRef.prototype.get$owner = function() {
      return this.owner;
    };
    function Field(name, owner, declaredType, isConst, isFinal, isStatic, staticValue, location, id, classRef, size, json, type) {
      this.name = name;
      this.owner = owner;
      this.declaredType = declaredType;
      this.isConst = isConst;
      this.isFinal = isFinal;
      this.isStatic = isStatic;
      this.staticValue = staticValue;
      this.location = location;
      this.id = id;
      this.classRef = classRef;
      this.size = size;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Field.builtin$cls = "Field";
    if (!("name" in Field))
      Field.name = "Field";
    $desc = $collectedClasses$.Field[1];
    Field.prototype = $desc;
    Field.$__fields__ = ["name", "owner", "declaredType", "isConst", "isFinal", "isStatic", "staticValue", "location", "id", "classRef", "size", "json", "type"];
    Field.prototype.get$name = function(receiver) {
      return this.name;
    };
    Field.prototype.get$owner = function() {
      return this.owner;
    };
    Field.prototype.get$location = function(receiver) {
      return this.location;
    };
    function Flag(name, comment, modified, valueAsString) {
      this.name = name;
      this.comment = comment;
      this.modified = modified;
      this.valueAsString = valueAsString;
      this.$deferredAction();
    }
    Flag.builtin$cls = "Flag";
    if (!("name" in Flag))
      Flag.name = "Flag";
    $desc = $collectedClasses$.Flag[1];
    Flag.prototype = $desc;
    Flag.$__fields__ = ["name", "comment", "modified", "valueAsString"];
    Flag.prototype.get$name = function(receiver) {
      return this.name;
    };
    Flag.prototype.get$valueAsString = function(receiver) {
      return this.valueAsString;
    };
    function FlagList(flags, json, type) {
      this.flags = flags;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    FlagList.builtin$cls = "FlagList";
    if (!("name" in FlagList))
      FlagList.name = "FlagList";
    $desc = $collectedClasses$.FlagList[1];
    FlagList.prototype = $desc;
    FlagList.$__fields__ = ["flags", "json", "type"];
    FlagList.prototype.get$flags = function() {
      return this.flags;
    };
    function Frame(index, $function, code, location, vars, json, type) {
      this.index = index;
      this.$function = $function;
      this.code = code;
      this.location = location;
      this.vars = vars;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Frame.builtin$cls = "Frame";
    if (!("name" in Frame))
      Frame.name = "Frame";
    $desc = $collectedClasses$.Frame[1];
    Frame.prototype = $desc;
    Frame.$__fields__ = ["index", "$function", "code", "location", "vars", "json", "type"];
    Frame.prototype.get$index = function(receiver) {
      return this.index;
    };
    Frame.prototype.get$$function = function() {
      return this.$function;
    };
    Frame.prototype.get$code = function(receiver) {
      return this.code;
    };
    Frame.prototype.get$location = function(receiver) {
      return this.location;
    };
    Frame.prototype.get$vars = function() {
      return this.vars;
    };
    function FuncRef(name, owner, isStatic, isConst, id, json, type) {
      this.name = name;
      this.owner = owner;
      this.isStatic = isStatic;
      this.isConst = isConst;
      this.id = id;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    FuncRef.builtin$cls = "FuncRef";
    if (!("name" in FuncRef))
      FuncRef.name = "FuncRef";
    $desc = $collectedClasses$.FuncRef[1];
    FuncRef.prototype = $desc;
    FuncRef.$__fields__ = ["name", "owner", "isStatic", "isConst", "id", "json", "type"];
    FuncRef.prototype.get$name = function(receiver) {
      return this.name;
    };
    FuncRef.prototype.get$owner = function() {
      return this.owner;
    };
    function Func(name, owner, location, code, id, classRef, size, json, type) {
      this.name = name;
      this.owner = owner;
      this.location = location;
      this.code = code;
      this.id = id;
      this.classRef = classRef;
      this.size = size;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Func.builtin$cls = "Func";
    if (!("name" in Func))
      Func.name = "Func";
    $desc = $collectedClasses$.Func[1];
    Func.prototype = $desc;
    Func.$__fields__ = ["name", "owner", "location", "code", "id", "classRef", "size", "json", "type"];
    Func.prototype.get$name = function(receiver) {
      return this.name;
    };
    Func.prototype.get$owner = function() {
      return this.owner;
    };
    Func.prototype.get$location = function(receiver) {
      return this.location;
    };
    Func.prototype.get$code = function(receiver) {
      return this.code;
    };
    function InstanceRef(kind, classRef, valueAsString, valueAsStringIsTruncated, length, name, typeClass, parameterizedClass, pattern, id, json, type) {
      this.kind = kind;
      this.classRef = classRef;
      this.valueAsString = valueAsString;
      this.valueAsStringIsTruncated = valueAsStringIsTruncated;
      this.length = length;
      this.name = name;
      this.typeClass = typeClass;
      this.parameterizedClass = parameterizedClass;
      this.pattern = pattern;
      this.id = id;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    InstanceRef.builtin$cls = "InstanceRef";
    if (!("name" in InstanceRef))
      InstanceRef.name = "InstanceRef";
    $desc = $collectedClasses$.InstanceRef[1];
    InstanceRef.prototype = $desc;
    InstanceRef.$__fields__ = ["kind", "classRef", "valueAsString", "valueAsStringIsTruncated", "length", "name", "typeClass", "parameterizedClass", "pattern", "id", "json", "type"];
    InstanceRef.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    InstanceRef.prototype.get$classRef = function() {
      return this.classRef;
    };
    InstanceRef.prototype.get$valueAsString = function(receiver) {
      return this.valueAsString;
    };
    InstanceRef.prototype.get$valueAsStringIsTruncated = function() {
      return this.valueAsStringIsTruncated;
    };
    InstanceRef.prototype.get$length = function(receiver) {
      return this.length;
    };
    InstanceRef.prototype.get$name = function(receiver) {
      return this.name;
    };
    function Instance(kind, valueAsString, valueAsStringIsTruncated, length, offset, count, name, typeClass, parameterizedClass, fields, elements, associations, bytes, closureFunction, closureContext, mirrorReferent, pattern, isCaseSensitive, isMultiLine, propertyKey, propertyValue, typeArguments, parameterIndex, targetType, bound, id, classRef, size, json, type) {
      this.kind = kind;
      this.valueAsString = valueAsString;
      this.valueAsStringIsTruncated = valueAsStringIsTruncated;
      this.length = length;
      this.offset = offset;
      this.count = count;
      this.name = name;
      this.typeClass = typeClass;
      this.parameterizedClass = parameterizedClass;
      this.fields = fields;
      this.elements = elements;
      this.associations = associations;
      this.bytes = bytes;
      this.closureFunction = closureFunction;
      this.closureContext = closureContext;
      this.mirrorReferent = mirrorReferent;
      this.pattern = pattern;
      this.isCaseSensitive = isCaseSensitive;
      this.isMultiLine = isMultiLine;
      this.propertyKey = propertyKey;
      this.propertyValue = propertyValue;
      this.typeArguments = typeArguments;
      this.parameterIndex = parameterIndex;
      this.targetType = targetType;
      this.bound = bound;
      this.id = id;
      this.classRef = classRef;
      this.size = size;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Instance.builtin$cls = "Instance";
    if (!("name" in Instance))
      Instance.name = "Instance";
    $desc = $collectedClasses$.Instance[1];
    Instance.prototype = $desc;
    Instance.$__fields__ = ["kind", "valueAsString", "valueAsStringIsTruncated", "length", "offset", "count", "name", "typeClass", "parameterizedClass", "fields", "elements", "associations", "bytes", "closureFunction", "closureContext", "mirrorReferent", "pattern", "isCaseSensitive", "isMultiLine", "propertyKey", "propertyValue", "typeArguments", "parameterIndex", "targetType", "bound", "id", "classRef", "size", "json", "type"];
    Instance.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    Instance.prototype.get$valueAsString = function(receiver) {
      return this.valueAsString;
    };
    Instance.prototype.get$valueAsStringIsTruncated = function() {
      return this.valueAsStringIsTruncated;
    };
    Instance.prototype.get$length = function(receiver) {
      return this.length;
    };
    Instance.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    Instance.prototype.get$name = function(receiver) {
      return this.name;
    };
    Instance.prototype.get$bytes = function() {
      return this.bytes;
    };
    function IsolateRef(id, number, name, json, type) {
      this.id = id;
      this.number = number;
      this.name = name;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    IsolateRef.builtin$cls = "IsolateRef";
    if (!("name" in IsolateRef))
      IsolateRef.name = "IsolateRef";
    $desc = $collectedClasses$.IsolateRef[1];
    IsolateRef.prototype = $desc;
    IsolateRef.$__fields__ = ["id", "number", "name", "json", "type"];
    IsolateRef.prototype.get$id = function(receiver) {
      return this.id;
    };
    IsolateRef.prototype.get$name = function(receiver) {
      return this.name;
    };
    function Isolate(id, number, name, startTime, runnable, livePorts, pauseOnExit, pauseEvent, rootLib, libraries, breakpoints, error, exceptionPauseMode, extensionRPCs, json, type) {
      this.id = id;
      this.number = number;
      this.name = name;
      this.startTime = startTime;
      this.runnable = runnable;
      this.livePorts = livePorts;
      this.pauseOnExit = pauseOnExit;
      this.pauseEvent = pauseEvent;
      this.rootLib = rootLib;
      this.libraries = libraries;
      this.breakpoints = breakpoints;
      this.error = error;
      this.exceptionPauseMode = exceptionPauseMode;
      this.extensionRPCs = extensionRPCs;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Isolate.builtin$cls = "Isolate";
    if (!("name" in Isolate))
      Isolate.name = "Isolate";
    $desc = $collectedClasses$.Isolate[1];
    Isolate.prototype = $desc;
    Isolate.$__fields__ = ["id", "number", "name", "startTime", "runnable", "livePorts", "pauseOnExit", "pauseEvent", "rootLib", "libraries", "breakpoints", "error", "exceptionPauseMode", "extensionRPCs", "json", "type"];
    Isolate.prototype.get$id = function(receiver) {
      return this.id;
    };
    Isolate.prototype.get$name = function(receiver) {
      return this.name;
    };
    Isolate.prototype.get$runnable = function() {
      return this.runnable;
    };
    Isolate.prototype.set$runnable = function(v) {
      return this.runnable = v;
    };
    Isolate.prototype.get$pauseEvent = function(receiver) {
      return this.pauseEvent;
    };
    Isolate.prototype.get$libraries = function() {
      return this.libraries;
    };
    Isolate.prototype.get$breakpoints = function() {
      return this.breakpoints;
    };
    Isolate.prototype.get$error = function(receiver) {
      return this.error;
    };
    Isolate.prototype.get$extensionRPCs = function() {
      return this.extensionRPCs;
    };
    function LibraryRef(name, uri, id, json, type) {
      this.name = name;
      this.uri = uri;
      this.id = id;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    LibraryRef.builtin$cls = "LibraryRef";
    if (!("name" in LibraryRef))
      LibraryRef.name = "LibraryRef";
    $desc = $collectedClasses$.LibraryRef[1];
    LibraryRef.prototype = $desc;
    LibraryRef.$__fields__ = ["name", "uri", "id", "json", "type"];
    LibraryRef.prototype.get$name = function(receiver) {
      return this.name;
    };
    LibraryRef.prototype.get$uri = function() {
      return this.uri;
    };
    function Library(name, uri, debuggable, dependencies, scripts, variables, functions, classes, id, classRef, size, json, type) {
      this.name = name;
      this.uri = uri;
      this.debuggable = debuggable;
      this.dependencies = dependencies;
      this.scripts = scripts;
      this.variables = variables;
      this.functions = functions;
      this.classes = classes;
      this.id = id;
      this.classRef = classRef;
      this.size = size;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Library.builtin$cls = "Library";
    if (!("name" in Library))
      Library.name = "Library";
    $desc = $collectedClasses$.Library[1];
    Library.prototype = $desc;
    Library.$__fields__ = ["name", "uri", "debuggable", "dependencies", "scripts", "variables", "functions", "classes", "id", "classRef", "size", "json", "type"];
    Library.prototype.get$name = function(receiver) {
      return this.name;
    };
    Library.prototype.get$uri = function() {
      return this.uri;
    };
    Library.prototype.get$classes = function(receiver) {
      return this.classes;
    };
    function LibraryDependency(isImport, isDeferred, prefix, target) {
      this.isImport = isImport;
      this.isDeferred = isDeferred;
      this.prefix = prefix;
      this.target = target;
      this.$deferredAction();
    }
    LibraryDependency.builtin$cls = "LibraryDependency";
    if (!("name" in LibraryDependency))
      LibraryDependency.name = "LibraryDependency";
    $desc = $collectedClasses$.LibraryDependency[1];
    LibraryDependency.prototype = $desc;
    LibraryDependency.$__fields__ = ["isImport", "isDeferred", "prefix", "target"];
    LibraryDependency.prototype.get$prefix = function() {
      return this.prefix;
    };
    LibraryDependency.prototype.get$target = function(receiver) {
      return this.target;
    };
    function MapAssociation(key, value) {
      this.key = key;
      this.value = value;
      this.$deferredAction();
    }
    MapAssociation.builtin$cls = "MapAssociation";
    if (!("name" in MapAssociation))
      MapAssociation.name = "MapAssociation";
    $desc = $collectedClasses$.MapAssociation[1];
    MapAssociation.prototype = $desc;
    MapAssociation.$__fields__ = ["key", "value"];
    MapAssociation.prototype.get$key = function(receiver) {
      return this.key;
    };
    MapAssociation.prototype.get$value = function(receiver) {
      return this.value;
    };
    function Message(index, name, messageObjectId, size, handler, location, json, type) {
      this.index = index;
      this.name = name;
      this.messageObjectId = messageObjectId;
      this.size = size;
      this.handler = handler;
      this.location = location;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Message.builtin$cls = "Message";
    if (!("name" in Message))
      Message.name = "Message";
    $desc = $collectedClasses$.Message[1];
    Message.prototype = $desc;
    Message.$__fields__ = ["index", "name", "messageObjectId", "size", "handler", "location", "json", "type"];
    Message.prototype.get$index = function(receiver) {
      return this.index;
    };
    Message.prototype.get$name = function(receiver) {
      return this.name;
    };
    Message.prototype.get$location = function(receiver) {
      return this.location;
    };
    function NullRef(kind, classRef, valueAsString, valueAsStringIsTruncated, length, name, typeClass, parameterizedClass, pattern, id, json, type) {
      this.kind = kind;
      this.classRef = classRef;
      this.valueAsString = valueAsString;
      this.valueAsStringIsTruncated = valueAsStringIsTruncated;
      this.length = length;
      this.name = name;
      this.typeClass = typeClass;
      this.parameterizedClass = parameterizedClass;
      this.pattern = pattern;
      this.id = id;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    NullRef.builtin$cls = "NullRef";
    if (!("name" in NullRef))
      NullRef.name = "NullRef";
    $desc = $collectedClasses$.NullRef[1];
    NullRef.prototype = $desc;
    NullRef.$__fields__ = ["kind", "classRef", "valueAsString", "valueAsStringIsTruncated", "length", "name", "typeClass", "parameterizedClass", "pattern", "id", "json", "type"];
    function Null0(kind, valueAsString, valueAsStringIsTruncated, length, offset, count, name, typeClass, parameterizedClass, fields, elements, associations, bytes, closureFunction, closureContext, mirrorReferent, pattern, isCaseSensitive, isMultiLine, propertyKey, propertyValue, typeArguments, parameterIndex, targetType, bound, id, classRef, size, json, type) {
      this.kind = kind;
      this.valueAsString = valueAsString;
      this.valueAsStringIsTruncated = valueAsStringIsTruncated;
      this.length = length;
      this.offset = offset;
      this.count = count;
      this.name = name;
      this.typeClass = typeClass;
      this.parameterizedClass = parameterizedClass;
      this.fields = fields;
      this.elements = elements;
      this.associations = associations;
      this.bytes = bytes;
      this.closureFunction = closureFunction;
      this.closureContext = closureContext;
      this.mirrorReferent = mirrorReferent;
      this.pattern = pattern;
      this.isCaseSensitive = isCaseSensitive;
      this.isMultiLine = isMultiLine;
      this.propertyKey = propertyKey;
      this.propertyValue = propertyValue;
      this.typeArguments = typeArguments;
      this.parameterIndex = parameterIndex;
      this.targetType = targetType;
      this.bound = bound;
      this.id = id;
      this.classRef = classRef;
      this.size = size;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Null0.builtin$cls = "Null0";
    if (!("name" in Null0))
      Null0.name = "Null0";
    $desc = $collectedClasses$.Null0[1];
    Null0.prototype = $desc;
    Null0.$__fields__ = ["kind", "valueAsString", "valueAsStringIsTruncated", "length", "offset", "count", "name", "typeClass", "parameterizedClass", "fields", "elements", "associations", "bytes", "closureFunction", "closureContext", "mirrorReferent", "pattern", "isCaseSensitive", "isMultiLine", "propertyKey", "propertyValue", "typeArguments", "parameterIndex", "targetType", "bound", "id", "classRef", "size", "json", "type"];
    function ObjRef(id, json, type) {
      this.id = id;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    ObjRef.builtin$cls = "ObjRef";
    if (!("name" in ObjRef))
      ObjRef.name = "ObjRef";
    $desc = $collectedClasses$.ObjRef[1];
    ObjRef.prototype = $desc;
    ObjRef.$__fields__ = ["id", "json", "type"];
    ObjRef.prototype.get$id = function(receiver) {
      return this.id;
    };
    function Obj(id, classRef, size, json, type) {
      this.id = id;
      this.classRef = classRef;
      this.size = size;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Obj.builtin$cls = "Obj";
    if (!("name" in Obj))
      Obj.name = "Obj";
    $desc = $collectedClasses$.Obj[1];
    Obj.prototype = $desc;
    Obj.$__fields__ = ["id", "classRef", "size", "json", "type"];
    Obj.prototype.get$id = function(receiver) {
      return this.id;
    };
    Obj.prototype.get$classRef = function() {
      return this.classRef;
    };
    function Response(json, type) {
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Response.builtin$cls = "Response";
    if (!("name" in Response))
      Response.name = "Response";
    $desc = $collectedClasses$.Response[1];
    Response.prototype = $desc;
    Response.$__fields__ = ["json", "type"];
    Response.prototype.get$json = function(receiver) {
      return this.json;
    };
    Response.prototype.get$type = function(receiver) {
      return this.type;
    };
    function Sentinel(kind, valueAsString, json, type) {
      this.kind = kind;
      this.valueAsString = valueAsString;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Sentinel.builtin$cls = "Sentinel";
    if (!("name" in Sentinel))
      Sentinel.name = "Sentinel";
    $desc = $collectedClasses$.Sentinel[1];
    Sentinel.prototype = $desc;
    Sentinel.$__fields__ = ["kind", "valueAsString", "json", "type"];
    Sentinel.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    Sentinel.prototype.get$valueAsString = function(receiver) {
      return this.valueAsString;
    };
    function ScriptRef(uri, id, json, type) {
      this.uri = uri;
      this.id = id;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    ScriptRef.builtin$cls = "ScriptRef";
    if (!("name" in ScriptRef))
      ScriptRef.name = "ScriptRef";
    $desc = $collectedClasses$.ScriptRef[1];
    ScriptRef.prototype = $desc;
    ScriptRef.$__fields__ = ["uri", "id", "json", "type"];
    ScriptRef.prototype.get$uri = function() {
      return this.uri;
    };
    function Script(uri, library, source, tokenPosTable, id, classRef, size, json, type) {
      this.uri = uri;
      this.library = library;
      this.source = source;
      this.tokenPosTable = tokenPosTable;
      this.id = id;
      this.classRef = classRef;
      this.size = size;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Script.builtin$cls = "Script";
    if (!("name" in Script))
      Script.name = "Script";
    $desc = $collectedClasses$.Script[1];
    Script.prototype = $desc;
    Script.$__fields__ = ["uri", "library", "source", "tokenPosTable", "id", "classRef", "size", "json", "type"];
    Script.prototype.get$uri = function() {
      return this.uri;
    };
    function SourceLocation0(script, tokenPos, endTokenPos, json, type) {
      this.script = script;
      this.tokenPos = tokenPos;
      this.endTokenPos = endTokenPos;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    SourceLocation0.builtin$cls = "SourceLocation0";
    if (!("name" in SourceLocation0))
      SourceLocation0.name = "SourceLocation0";
    $desc = $collectedClasses$.SourceLocation0[1];
    SourceLocation0.prototype = $desc;
    SourceLocation0.$__fields__ = ["script", "tokenPos", "endTokenPos", "json", "type"];
    SourceLocation0.prototype.get$script = function() {
      return this.script;
    };
    SourceLocation0.prototype.get$tokenPos = function() {
      return this.tokenPos;
    };
    function SourceReport(ranges, scripts, json, type) {
      this.ranges = ranges;
      this.scripts = scripts;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    SourceReport.builtin$cls = "SourceReport";
    if (!("name" in SourceReport))
      SourceReport.name = "SourceReport";
    $desc = $collectedClasses$.SourceReport[1];
    SourceReport.prototype = $desc;
    SourceReport.$__fields__ = ["ranges", "scripts", "json", "type"];
    function SourceReportCoverage(hits, misses) {
      this.hits = hits;
      this.misses = misses;
      this.$deferredAction();
    }
    SourceReportCoverage.builtin$cls = "SourceReportCoverage";
    if (!("name" in SourceReportCoverage))
      SourceReportCoverage.name = "SourceReportCoverage";
    $desc = $collectedClasses$.SourceReportCoverage[1];
    SourceReportCoverage.prototype = $desc;
    SourceReportCoverage.$__fields__ = ["hits", "misses"];
    function SourceReportRange(scriptIndex, startPos, endPos, compiled, error, coverage, possibleBreakpoints) {
      this.scriptIndex = scriptIndex;
      this.startPos = startPos;
      this.endPos = endPos;
      this.compiled = compiled;
      this.error = error;
      this.coverage = coverage;
      this.possibleBreakpoints = possibleBreakpoints;
      this.$deferredAction();
    }
    SourceReportRange.builtin$cls = "SourceReportRange";
    if (!("name" in SourceReportRange))
      SourceReportRange.name = "SourceReportRange";
    $desc = $collectedClasses$.SourceReportRange[1];
    SourceReportRange.prototype = $desc;
    SourceReportRange.$__fields__ = ["scriptIndex", "startPos", "endPos", "compiled", "error", "coverage", "possibleBreakpoints"];
    SourceReportRange.prototype.get$startPos = function() {
      return this.startPos;
    };
    SourceReportRange.prototype.get$endPos = function() {
      return this.endPos;
    };
    SourceReportRange.prototype.get$error = function(receiver) {
      return this.error;
    };
    function Stack(frames, messages, json, type) {
      this.frames = frames;
      this.messages = messages;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Stack.builtin$cls = "Stack";
    if (!("name" in Stack))
      Stack.name = "Stack";
    $desc = $collectedClasses$.Stack[1];
    Stack.prototype = $desc;
    Stack.$__fields__ = ["frames", "messages", "json", "type"];
    Stack.prototype.get$frames = function() {
      return this.frames;
    };
    function Success(json, type) {
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Success.builtin$cls = "Success";
    if (!("name" in Success))
      Success.name = "Success";
    $desc = $collectedClasses$.Success[1];
    Success.prototype = $desc;
    Success.$__fields__ = ["json", "type"];
    function TimelineEvent() {
      this.$deferredAction();
    }
    TimelineEvent.builtin$cls = "TimelineEvent";
    if (!("name" in TimelineEvent))
      TimelineEvent.name = "TimelineEvent";
    $desc = $collectedClasses$.TimelineEvent[1];
    TimelineEvent.prototype = $desc;
    TimelineEvent.$__fields__ = [];
    function TypeArgumentsRef(name, id, json, type) {
      this.name = name;
      this.id = id;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    TypeArgumentsRef.builtin$cls = "TypeArgumentsRef";
    if (!("name" in TypeArgumentsRef))
      TypeArgumentsRef.name = "TypeArgumentsRef";
    $desc = $collectedClasses$.TypeArgumentsRef[1];
    TypeArgumentsRef.prototype = $desc;
    TypeArgumentsRef.$__fields__ = ["name", "id", "json", "type"];
    TypeArgumentsRef.prototype.get$name = function(receiver) {
      return this.name;
    };
    function TypeArguments(name, types, id, classRef, size, json, type) {
      this.name = name;
      this.types = types;
      this.id = id;
      this.classRef = classRef;
      this.size = size;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    TypeArguments.builtin$cls = "TypeArguments";
    if (!("name" in TypeArguments))
      TypeArguments.name = "TypeArguments";
    $desc = $collectedClasses$.TypeArguments[1];
    TypeArguments.prototype = $desc;
    TypeArguments.$__fields__ = ["name", "types", "id", "classRef", "size", "json", "type"];
    TypeArguments.prototype.get$name = function(receiver) {
      return this.name;
    };
    function UnresolvedSourceLocation(script, scriptUri, tokenPos, line, column, json, type) {
      this.script = script;
      this.scriptUri = scriptUri;
      this.tokenPos = tokenPos;
      this.line = line;
      this.column = column;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    UnresolvedSourceLocation.builtin$cls = "UnresolvedSourceLocation";
    if (!("name" in UnresolvedSourceLocation))
      UnresolvedSourceLocation.name = "UnresolvedSourceLocation";
    $desc = $collectedClasses$.UnresolvedSourceLocation[1];
    UnresolvedSourceLocation.prototype = $desc;
    UnresolvedSourceLocation.$__fields__ = ["script", "scriptUri", "tokenPos", "line", "column", "json", "type"];
    UnresolvedSourceLocation.prototype.get$script = function() {
      return this.script;
    };
    UnresolvedSourceLocation.prototype.get$tokenPos = function() {
      return this.tokenPos;
    };
    UnresolvedSourceLocation.prototype.get$line = function(receiver) {
      return this.line;
    };
    UnresolvedSourceLocation.prototype.get$column = function() {
      return this.column;
    };
    function Version0(major, minor, json, type) {
      this.major = major;
      this.minor = minor;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    Version0.builtin$cls = "Version0";
    if (!("name" in Version0))
      Version0.name = "Version0";
    $desc = $collectedClasses$.Version0[1];
    Version0.prototype = $desc;
    Version0.$__fields__ = ["major", "minor", "json", "type"];
    Version0.prototype.get$major = function() {
      return this.major;
    };
    Version0.prototype.get$minor = function() {
      return this.minor;
    };
    function VMRef(name, json, type) {
      this.name = name;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    VMRef.builtin$cls = "VMRef";
    if (!("name" in VMRef))
      VMRef.name = "VMRef";
    $desc = $collectedClasses$.VMRef[1];
    VMRef.prototype = $desc;
    VMRef.$__fields__ = ["name", "json", "type"];
    VMRef.prototype.get$name = function(receiver) {
      return this.name;
    };
    function VM(architectureBits, targetCPU, hostCPU, version, pid, startTime, isolates, json, type) {
      this.architectureBits = architectureBits;
      this.targetCPU = targetCPU;
      this.hostCPU = hostCPU;
      this.version = version;
      this.pid = pid;
      this.startTime = startTime;
      this.isolates = isolates;
      this.json = json;
      this.type = type;
      this.$deferredAction();
    }
    VM.builtin$cls = "VM";
    if (!("name" in VM))
      VM.name = "VM";
    $desc = $collectedClasses$.VM[1];
    VM.prototype = $desc;
    VM.$__fields__ = ["architectureBits", "targetCPU", "hostCPU", "version", "pid", "startTime", "isolates", "json", "type"];
    VM.prototype.get$targetCPU = function() {
      return this.targetCPU;
    };
    VM.prototype.get$hostCPU = function() {
      return this.hostCPU;
    };
    VM.prototype.get$version = function(receiver) {
      return this.version;
    };
    VM.prototype.get$isolates = function() {
      return this.isolates;
    };
    function _DeepEquals(_parents1, _parents2) {
      this._parents1 = _parents1;
      this._parents2 = _parents2;
      this.$deferredAction();
    }
    _DeepEquals.builtin$cls = "_DeepEquals";
    if (!("name" in _DeepEquals))
      _DeepEquals.name = "_DeepEquals";
    $desc = $collectedClasses$._DeepEquals[1];
    _DeepEquals.prototype = $desc;
    _DeepEquals.$__fields__ = ["_parents1", "_parents2"];
    function deepHashCode__deepHashCode(parents) {
      this.parents = parents;
      this.$deferredAction();
    }
    deepHashCode__deepHashCode.builtin$cls = "deepHashCode__deepHashCode";
    if (!("name" in deepHashCode__deepHashCode))
      deepHashCode__deepHashCode.name = "deepHashCode__deepHashCode";
    $desc = $collectedClasses$.deepHashCode__deepHashCode[1];
    deepHashCode__deepHashCode.prototype = $desc;
    deepHashCode__deepHashCode.$__fields__ = ["parents"];
    function deepHashCode__deepHashCode_closure(value) {
      this.value = value;
      this.$deferredAction();
    }
    deepHashCode__deepHashCode_closure.builtin$cls = "deepHashCode__deepHashCode_closure";
    if (!("name" in deepHashCode__deepHashCode_closure))
      deepHashCode__deepHashCode_closure.name = "deepHashCode__deepHashCode_closure";
    $desc = $collectedClasses$.deepHashCode__deepHashCode_closure[1];
    deepHashCode__deepHashCode_closure.prototype = $desc;
    deepHashCode__deepHashCode_closure.$__fields__ = ["value"];
    function Event0(type, span) {
      this.type = type;
      this.span = span;
      this.$deferredAction();
    }
    Event0.builtin$cls = "Event0";
    if (!("name" in Event0))
      Event0.name = "Event0";
    $desc = $collectedClasses$.Event0[1];
    Event0.prototype = $desc;
    Event0.$__fields__ = ["type", "span"];
    Event0.prototype.get$type = function(receiver) {
      return this.type;
    };
    Event0.prototype.get$span = function(receiver) {
      return this.span;
    };
    function DocumentStartEvent(span, versionDirective, tagDirectives, isImplicit) {
      this.span = span;
      this.versionDirective = versionDirective;
      this.tagDirectives = tagDirectives;
      this.isImplicit = isImplicit;
      this.$deferredAction();
    }
    DocumentStartEvent.builtin$cls = "DocumentStartEvent";
    if (!("name" in DocumentStartEvent))
      DocumentStartEvent.name = "DocumentStartEvent";
    $desc = $collectedClasses$.DocumentStartEvent[1];
    DocumentStartEvent.prototype = $desc;
    DocumentStartEvent.$__fields__ = ["span", "versionDirective", "tagDirectives", "isImplicit"];
    DocumentStartEvent.prototype.get$span = function(receiver) {
      return this.span;
    };
    DocumentStartEvent.prototype.get$versionDirective = function() {
      return this.versionDirective;
    };
    DocumentStartEvent.prototype.get$tagDirectives = function() {
      return this.tagDirectives;
    };
    DocumentStartEvent.prototype.get$isImplicit = function() {
      return this.isImplicit;
    };
    function DocumentEndEvent(span, isImplicit) {
      this.span = span;
      this.isImplicit = isImplicit;
      this.$deferredAction();
    }
    DocumentEndEvent.builtin$cls = "DocumentEndEvent";
    if (!("name" in DocumentEndEvent))
      DocumentEndEvent.name = "DocumentEndEvent";
    $desc = $collectedClasses$.DocumentEndEvent[1];
    DocumentEndEvent.prototype = $desc;
    DocumentEndEvent.$__fields__ = ["span", "isImplicit"];
    DocumentEndEvent.prototype.get$span = function(receiver) {
      return this.span;
    };
    DocumentEndEvent.prototype.get$isImplicit = function() {
      return this.isImplicit;
    };
    function AliasEvent(span, name) {
      this.span = span;
      this.name = name;
      this.$deferredAction();
    }
    AliasEvent.builtin$cls = "AliasEvent";
    if (!("name" in AliasEvent))
      AliasEvent.name = "AliasEvent";
    $desc = $collectedClasses$.AliasEvent[1];
    AliasEvent.prototype = $desc;
    AliasEvent.$__fields__ = ["span", "name"];
    AliasEvent.prototype.get$span = function(receiver) {
      return this.span;
    };
    AliasEvent.prototype.get$name = function(receiver) {
      return this.name;
    };
    function _ValueEvent() {
      this.$deferredAction();
    }
    _ValueEvent.builtin$cls = "_ValueEvent";
    if (!("name" in _ValueEvent))
      _ValueEvent.name = "_ValueEvent";
    $desc = $collectedClasses$._ValueEvent[1];
    _ValueEvent.prototype = $desc;
    _ValueEvent.$__fields__ = [];
    function ScalarEvent(span, anchor, tag, value, style) {
      this.span = span;
      this.anchor = anchor;
      this.tag = tag;
      this.value = value;
      this.style = style;
      this.$deferredAction();
    }
    ScalarEvent.builtin$cls = "ScalarEvent";
    if (!("name" in ScalarEvent))
      ScalarEvent.name = "ScalarEvent";
    $desc = $collectedClasses$.ScalarEvent[1];
    ScalarEvent.prototype = $desc;
    ScalarEvent.$__fields__ = ["span", "anchor", "tag", "value", "style"];
    ScalarEvent.prototype.get$span = function(receiver) {
      return this.span;
    };
    ScalarEvent.prototype.get$anchor = function() {
      return this.anchor;
    };
    ScalarEvent.prototype.get$tag = function(receiver) {
      return this.tag;
    };
    ScalarEvent.prototype.get$value = function(receiver) {
      return this.value;
    };
    ScalarEvent.prototype.get$style = function(receiver) {
      return this.style;
    };
    function SequenceStartEvent(span, anchor, tag, style) {
      this.span = span;
      this.anchor = anchor;
      this.tag = tag;
      this.style = style;
      this.$deferredAction();
    }
    SequenceStartEvent.builtin$cls = "SequenceStartEvent";
    if (!("name" in SequenceStartEvent))
      SequenceStartEvent.name = "SequenceStartEvent";
    $desc = $collectedClasses$.SequenceStartEvent[1];
    SequenceStartEvent.prototype = $desc;
    SequenceStartEvent.$__fields__ = ["span", "anchor", "tag", "style"];
    SequenceStartEvent.prototype.get$span = function(receiver) {
      return this.span;
    };
    SequenceStartEvent.prototype.get$anchor = function() {
      return this.anchor;
    };
    SequenceStartEvent.prototype.get$tag = function(receiver) {
      return this.tag;
    };
    SequenceStartEvent.prototype.get$style = function(receiver) {
      return this.style;
    };
    function MappingStartEvent(span, anchor, tag, style) {
      this.span = span;
      this.anchor = anchor;
      this.tag = tag;
      this.style = style;
      this.$deferredAction();
    }
    MappingStartEvent.builtin$cls = "MappingStartEvent";
    if (!("name" in MappingStartEvent))
      MappingStartEvent.name = "MappingStartEvent";
    $desc = $collectedClasses$.MappingStartEvent[1];
    MappingStartEvent.prototype = $desc;
    MappingStartEvent.$__fields__ = ["span", "anchor", "tag", "style"];
    MappingStartEvent.prototype.get$span = function(receiver) {
      return this.span;
    };
    MappingStartEvent.prototype.get$anchor = function() {
      return this.anchor;
    };
    MappingStartEvent.prototype.get$tag = function(receiver) {
      return this.tag;
    };
    MappingStartEvent.prototype.get$style = function(receiver) {
      return this.style;
    };
    function EventType(name) {
      this.name = name;
      this.$deferredAction();
    }
    EventType.builtin$cls = "EventType";
    if (!("name" in EventType))
      EventType.name = "EventType";
    $desc = $collectedClasses$.EventType[1];
    EventType.prototype = $desc;
    EventType.$__fields__ = ["name"];
    EventType.prototype.get$name = function(receiver) {
      return this.name;
    };
    function Loader(_parser, _aliases, _span) {
      this._parser = _parser;
      this._aliases = _aliases;
      this._span = _span;
      this.$deferredAction();
    }
    Loader.builtin$cls = "Loader";
    if (!("name" in Loader))
      Loader.name = "Loader";
    $desc = $collectedClasses$.Loader[1];
    Loader.prototype = $desc;
    Loader.$__fields__ = ["_parser", "_aliases", "_span"];
    function Loader__parseNumberValue_closure() {
      this.$deferredAction();
    }
    Loader__parseNumberValue_closure.builtin$cls = "Loader__parseNumberValue_closure";
    if (!("name" in Loader__parseNumberValue_closure))
      Loader__parseNumberValue_closure.name = "Loader__parseNumberValue_closure";
    $desc = $collectedClasses$.Loader__parseNumberValue_closure[1];
    Loader__parseNumberValue_closure.prototype = $desc;
    Loader__parseNumberValue_closure.$__fields__ = [];
    function Loader__parseNumberValue_closure0() {
      this.$deferredAction();
    }
    Loader__parseNumberValue_closure0.builtin$cls = "Loader__parseNumberValue_closure0";
    if (!("name" in Loader__parseNumberValue_closure0))
      Loader__parseNumberValue_closure0.name = "Loader__parseNumberValue_closure0";
    $desc = $collectedClasses$.Loader__parseNumberValue_closure0[1];
    Loader__parseNumberValue_closure0.prototype = $desc;
    Loader__parseNumberValue_closure0.$__fields__ = [];
    function Loader__parseNumberValue_closure1() {
      this.$deferredAction();
    }
    Loader__parseNumberValue_closure1.builtin$cls = "Loader__parseNumberValue_closure1";
    if (!("name" in Loader__parseNumberValue_closure1))
      Loader__parseNumberValue_closure1.name = "Loader__parseNumberValue_closure1";
    $desc = $collectedClasses$.Loader__parseNumberValue_closure1[1];
    Loader__parseNumberValue_closure1.prototype = $desc;
    Loader__parseNumberValue_closure1.$__fields__ = [];
    function Loader__parseNumberValue_closure2() {
      this.$deferredAction();
    }
    Loader__parseNumberValue_closure2.builtin$cls = "Loader__parseNumberValue_closure2";
    if (!("name" in Loader__parseNumberValue_closure2))
      Loader__parseNumberValue_closure2.name = "Loader__parseNumberValue_closure2";
    $desc = $collectedClasses$.Loader__parseNumberValue_closure2[1];
    Loader__parseNumberValue_closure2.prototype = $desc;
    Loader__parseNumberValue_closure2.$__fields__ = [];
    function Loader__parseNumberValue_closure3() {
      this.$deferredAction();
    }
    Loader__parseNumberValue_closure3.builtin$cls = "Loader__parseNumberValue_closure3";
    if (!("name" in Loader__parseNumberValue_closure3))
      Loader__parseNumberValue_closure3.name = "Loader__parseNumberValue_closure3";
    $desc = $collectedClasses$.Loader__parseNumberValue_closure3[1];
    Loader__parseNumberValue_closure3.prototype = $desc;
    Loader__parseNumberValue_closure3.$__fields__ = [];
    function Parser(_scanner, _states, _parser$_state, _tagDirectives) {
      this._scanner = _scanner;
      this._states = _states;
      this._parser$_state = _parser$_state;
      this._tagDirectives = _tagDirectives;
      this.$deferredAction();
    }
    Parser.builtin$cls = "Parser";
    if (!("name" in Parser))
      Parser.name = "Parser";
    $desc = $collectedClasses$.Parser[1];
    Parser.prototype = $desc;
    Parser.$__fields__ = ["_scanner", "_states", "_parser$_state", "_tagDirectives"];
    function Parser__parseNode_parseAnchor(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    Parser__parseNode_parseAnchor.builtin$cls = "Parser__parseNode_parseAnchor";
    if (!("name" in Parser__parseNode_parseAnchor))
      Parser__parseNode_parseAnchor.name = "Parser__parseNode_parseAnchor";
    $desc = $collectedClasses$.Parser__parseNode_parseAnchor[1];
    Parser__parseNode_parseAnchor.prototype = $desc;
    Parser__parseNode_parseAnchor.$__fields__ = ["_box_0", "$this"];
    function Parser__parseNode_parseTag(_box_0, $this) {
      this._box_0 = _box_0;
      this.$this = $this;
      this.$deferredAction();
    }
    Parser__parseNode_parseTag.builtin$cls = "Parser__parseNode_parseTag";
    if (!("name" in Parser__parseNode_parseTag))
      Parser__parseNode_parseTag.name = "Parser__parseNode_parseTag";
    $desc = $collectedClasses$.Parser__parseNode_parseTag[1];
    Parser__parseNode_parseTag.prototype = $desc;
    Parser__parseNode_parseTag.$__fields__ = ["_box_0", "$this"];
    function _State(name) {
      this.name = name;
      this.$deferredAction();
    }
    _State.builtin$cls = "_State";
    if (!("name" in _State))
      _State.name = "_State";
    $desc = $collectedClasses$._State[1];
    _State.prototype = $desc;
    _State.$__fields__ = ["name"];
    _State.prototype.get$name = function(receiver) {
      return this.name;
    };
    function Scanner(_scanner$_scanner, _streamStartProduced, _streamEndProduced, _tokens, _tokensParsed, _tokenAvailable, _indents, _simpleKeyAllowed, _simpleKeys) {
      this._scanner$_scanner = _scanner$_scanner;
      this._streamStartProduced = _streamStartProduced;
      this._streamEndProduced = _streamEndProduced;
      this._tokens = _tokens;
      this._tokensParsed = _tokensParsed;
      this._tokenAvailable = _tokenAvailable;
      this._indents = _indents;
      this._simpleKeyAllowed = _simpleKeyAllowed;
      this._simpleKeys = _simpleKeys;
      this.$deferredAction();
    }
    Scanner.builtin$cls = "Scanner";
    if (!("name" in Scanner))
      Scanner.name = "Scanner";
    $desc = $collectedClasses$.Scanner[1];
    Scanner.prototype = $desc;
    Scanner.$__fields__ = ["_scanner$_scanner", "_streamStartProduced", "_streamEndProduced", "_tokens", "_tokensParsed", "_tokenAvailable", "_indents", "_simpleKeyAllowed", "_simpleKeys"];
    function Scanner__fetchMoreTokens_closure($this) {
      this.$this = $this;
      this.$deferredAction();
    }
    Scanner__fetchMoreTokens_closure.builtin$cls = "Scanner__fetchMoreTokens_closure";
    if (!("name" in Scanner__fetchMoreTokens_closure))
      Scanner__fetchMoreTokens_closure.name = "Scanner__fetchMoreTokens_closure";
    $desc = $collectedClasses$.Scanner__fetchMoreTokens_closure[1];
    Scanner__fetchMoreTokens_closure.prototype = $desc;
    Scanner__fetchMoreTokens_closure.$__fields__ = ["$this"];
    function _SimpleKey(tokenNumber, location, line, column, required) {
      this.tokenNumber = tokenNumber;
      this.location = location;
      this.line = line;
      this.column = column;
      this.required = required;
      this.$deferredAction();
    }
    _SimpleKey.builtin$cls = "_SimpleKey";
    if (!("name" in _SimpleKey))
      _SimpleKey.name = "_SimpleKey";
    $desc = $collectedClasses$._SimpleKey[1];
    _SimpleKey.prototype = $desc;
    _SimpleKey.$__fields__ = ["tokenNumber", "location", "line", "column", "required"];
    _SimpleKey.prototype.get$tokenNumber = function() {
      return this.tokenNumber;
    };
    _SimpleKey.prototype.get$location = function(receiver) {
      return this.location;
    };
    _SimpleKey.prototype.get$line = function(receiver) {
      return this.line;
    };
    _SimpleKey.prototype.get$column = function() {
      return this.column;
    };
    function _Chomping(name) {
      this.name = name;
      this.$deferredAction();
    }
    _Chomping.builtin$cls = "_Chomping";
    if (!("name" in _Chomping))
      _Chomping.name = "_Chomping";
    $desc = $collectedClasses$._Chomping[1];
    _Chomping.prototype = $desc;
    _Chomping.$__fields__ = ["name"];
    _Chomping.prototype.get$name = function(receiver) {
      return this.name;
    };
    function ScalarStyle(name) {
      this.name = name;
      this.$deferredAction();
    }
    ScalarStyle.builtin$cls = "ScalarStyle";
    if (!("name" in ScalarStyle))
      ScalarStyle.name = "ScalarStyle";
    $desc = $collectedClasses$.ScalarStyle[1];
    ScalarStyle.prototype = $desc;
    ScalarStyle.$__fields__ = ["name"];
    ScalarStyle.prototype.get$name = function(receiver) {
      return this.name;
    };
    function CollectionStyle(name) {
      this.name = name;
      this.$deferredAction();
    }
    CollectionStyle.builtin$cls = "CollectionStyle";
    if (!("name" in CollectionStyle))
      CollectionStyle.name = "CollectionStyle";
    $desc = $collectedClasses$.CollectionStyle[1];
    CollectionStyle.prototype = $desc;
    CollectionStyle.$__fields__ = ["name"];
    CollectionStyle.prototype.get$name = function(receiver) {
      return this.name;
    };
    function Token(type, span) {
      this.type = type;
      this.span = span;
      this.$deferredAction();
    }
    Token.builtin$cls = "Token";
    if (!("name" in Token))
      Token.name = "Token";
    $desc = $collectedClasses$.Token[1];
    Token.prototype = $desc;
    Token.$__fields__ = ["type", "span"];
    Token.prototype.get$type = function(receiver) {
      return this.type;
    };
    Token.prototype.get$span = function(receiver) {
      return this.span;
    };
    function VersionDirectiveToken(span, major, minor) {
      this.span = span;
      this.major = major;
      this.minor = minor;
      this.$deferredAction();
    }
    VersionDirectiveToken.builtin$cls = "VersionDirectiveToken";
    if (!("name" in VersionDirectiveToken))
      VersionDirectiveToken.name = "VersionDirectiveToken";
    $desc = $collectedClasses$.VersionDirectiveToken[1];
    VersionDirectiveToken.prototype = $desc;
    VersionDirectiveToken.$__fields__ = ["span", "major", "minor"];
    VersionDirectiveToken.prototype.get$span = function(receiver) {
      return this.span;
    };
    VersionDirectiveToken.prototype.get$major = function() {
      return this.major;
    };
    VersionDirectiveToken.prototype.get$minor = function() {
      return this.minor;
    };
    function TagDirectiveToken(span, handle, prefix) {
      this.span = span;
      this.handle = handle;
      this.prefix = prefix;
      this.$deferredAction();
    }
    TagDirectiveToken.builtin$cls = "TagDirectiveToken";
    if (!("name" in TagDirectiveToken))
      TagDirectiveToken.name = "TagDirectiveToken";
    $desc = $collectedClasses$.TagDirectiveToken[1];
    TagDirectiveToken.prototype = $desc;
    TagDirectiveToken.$__fields__ = ["span", "handle", "prefix"];
    TagDirectiveToken.prototype.get$span = function(receiver) {
      return this.span;
    };
    TagDirectiveToken.prototype.get$prefix = function() {
      return this.prefix;
    };
    function AnchorToken(span, name) {
      this.span = span;
      this.name = name;
      this.$deferredAction();
    }
    AnchorToken.builtin$cls = "AnchorToken";
    if (!("name" in AnchorToken))
      AnchorToken.name = "AnchorToken";
    $desc = $collectedClasses$.AnchorToken[1];
    AnchorToken.prototype = $desc;
    AnchorToken.$__fields__ = ["span", "name"];
    AnchorToken.prototype.get$span = function(receiver) {
      return this.span;
    };
    AnchorToken.prototype.get$name = function(receiver) {
      return this.name;
    };
    function AliasToken(span, name) {
      this.span = span;
      this.name = name;
      this.$deferredAction();
    }
    AliasToken.builtin$cls = "AliasToken";
    if (!("name" in AliasToken))
      AliasToken.name = "AliasToken";
    $desc = $collectedClasses$.AliasToken[1];
    AliasToken.prototype = $desc;
    AliasToken.$__fields__ = ["span", "name"];
    AliasToken.prototype.get$span = function(receiver) {
      return this.span;
    };
    AliasToken.prototype.get$name = function(receiver) {
      return this.name;
    };
    function TagToken(span, handle, suffix) {
      this.span = span;
      this.handle = handle;
      this.suffix = suffix;
      this.$deferredAction();
    }
    TagToken.builtin$cls = "TagToken";
    if (!("name" in TagToken))
      TagToken.name = "TagToken";
    $desc = $collectedClasses$.TagToken[1];
    TagToken.prototype = $desc;
    TagToken.$__fields__ = ["span", "handle", "suffix"];
    TagToken.prototype.get$span = function(receiver) {
      return this.span;
    };
    function ScalarToken(span, value, style) {
      this.span = span;
      this.value = value;
      this.style = style;
      this.$deferredAction();
    }
    ScalarToken.builtin$cls = "ScalarToken";
    if (!("name" in ScalarToken))
      ScalarToken.name = "ScalarToken";
    $desc = $collectedClasses$.ScalarToken[1];
    ScalarToken.prototype = $desc;
    ScalarToken.$__fields__ = ["span", "value", "style"];
    ScalarToken.prototype.get$span = function(receiver) {
      return this.span;
    };
    ScalarToken.prototype.get$value = function(receiver) {
      return this.value;
    };
    ScalarToken.prototype.get$style = function(receiver) {
      return this.style;
    };
    function TokenType(name) {
      this.name = name;
      this.$deferredAction();
    }
    TokenType.builtin$cls = "TokenType";
    if (!("name" in TokenType))
      TokenType.name = "TokenType";
    $desc = $collectedClasses$.TokenType[1];
    TokenType.prototype = $desc;
    TokenType.$__fields__ = ["name"];
    TokenType.prototype.get$name = function(receiver) {
      return this.name;
    };
    function Pair(first, last, $ti) {
      this.first = first;
      this.last = last;
      this.$ti = $ti;
      this.$deferredAction();
    }
    Pair.builtin$cls = "Pair";
    if (!("name" in Pair))
      Pair.name = "Pair";
    $desc = $collectedClasses$.Pair[1];
    Pair.prototype = $desc;
    Pair.$__fields__ = ["first", "last"];
    Pair.prototype.get$first = function(receiver) {
      return this.first;
    };
    function closure4() {
      this.$deferredAction();
    }
    closure4.builtin$cls = "closure4";
    if (!("name" in closure4))
      closure4.name = "closure4";
    $desc = $collectedClasses$.closure4[1];
    closure4.prototype = $desc;
    closure4.$__fields__ = [];
    function YamlDocument(contents, span, versionDirective, tagDirectives, startImplicit, endImplicit) {
      this.contents = contents;
      this.span = span;
      this.versionDirective = versionDirective;
      this.tagDirectives = tagDirectives;
      this.startImplicit = startImplicit;
      this.endImplicit = endImplicit;
      this.$deferredAction();
    }
    YamlDocument.builtin$cls = "YamlDocument";
    if (!("name" in YamlDocument))
      YamlDocument.name = "YamlDocument";
    $desc = $collectedClasses$.YamlDocument[1];
    YamlDocument.prototype = $desc;
    YamlDocument.$__fields__ = ["contents", "span", "versionDirective", "tagDirectives", "startImplicit", "endImplicit"];
    YamlDocument.prototype.get$span = function(receiver) {
      return this.span;
    };
    function VersionDirective(major, minor) {
      this.major = major;
      this.minor = minor;
      this.$deferredAction();
    }
    VersionDirective.builtin$cls = "VersionDirective";
    if (!("name" in VersionDirective))
      VersionDirective.name = "VersionDirective";
    $desc = $collectedClasses$.VersionDirective[1];
    VersionDirective.prototype = $desc;
    VersionDirective.$__fields__ = ["major", "minor"];
    VersionDirective.prototype.get$major = function() {
      return this.major;
    };
    VersionDirective.prototype.get$minor = function() {
      return this.minor;
    };
    function TagDirective(handle, prefix) {
      this.handle = handle;
      this.prefix = prefix;
      this.$deferredAction();
    }
    TagDirective.builtin$cls = "TagDirective";
    if (!("name" in TagDirective))
      TagDirective.name = "TagDirective";
    $desc = $collectedClasses$.TagDirective[1];
    TagDirective.prototype = $desc;
    TagDirective.$__fields__ = ["handle", "prefix"];
    TagDirective.prototype.get$prefix = function() {
      return this.prefix;
    };
    function YamlException(_span_exception$_source, _span_exception$_message, _span_exception$_span) {
      this._span_exception$_source = _span_exception$_source;
      this._span_exception$_message = _span_exception$_message;
      this._span_exception$_span = _span_exception$_span;
      this.$deferredAction();
    }
    YamlException.builtin$cls = "YamlException";
    if (!("name" in YamlException))
      YamlException.name = "YamlException";
    $desc = $collectedClasses$.YamlException[1];
    YamlException.prototype = $desc;
    YamlException.$__fields__ = ["_span_exception$_source", "_span_exception$_message", "_span_exception$_span"];
    function YamlNode() {
      this.$deferredAction();
    }
    YamlNode.builtin$cls = "YamlNode";
    if (!("name" in YamlNode))
      YamlNode.name = "YamlNode";
    $desc = $collectedClasses$.YamlNode[1];
    YamlNode.prototype = $desc;
    YamlNode.$__fields__ = [];
    function YamlMap(nodes, style, _yaml_node$_span) {
      this.nodes = nodes;
      this.style = style;
      this._yaml_node$_span = _yaml_node$_span;
      this.$deferredAction();
    }
    YamlMap.builtin$cls = "YamlMap";
    if (!("name" in YamlMap))
      YamlMap.name = "YamlMap";
    $desc = $collectedClasses$.YamlMap[1];
    YamlMap.prototype = $desc;
    YamlMap.$__fields__ = ["nodes", "style", "_yaml_node$_span"];
    YamlMap.prototype.get$nodes = function(receiver) {
      return this.nodes;
    };
    YamlMap.prototype.get$style = function(receiver) {
      return this.style;
    };
    function YamlNode_MapMixin() {
      this.$deferredAction();
    }
    YamlNode_MapMixin.builtin$cls = "YamlNode_MapMixin";
    if (!("name" in YamlNode_MapMixin))
      YamlNode_MapMixin.name = "YamlNode_MapMixin";
    $desc = $collectedClasses$.YamlNode_MapMixin[1];
    YamlNode_MapMixin.prototype = $desc;
    YamlNode_MapMixin.$__fields__ = [];
    function YamlNode_MapMixin_UnmodifiableMapMixin() {
      this.$deferredAction();
    }
    YamlNode_MapMixin_UnmodifiableMapMixin.builtin$cls = "YamlNode_MapMixin_UnmodifiableMapMixin";
    if (!("name" in YamlNode_MapMixin_UnmodifiableMapMixin))
      YamlNode_MapMixin_UnmodifiableMapMixin.name = "YamlNode_MapMixin_UnmodifiableMapMixin";
    $desc = $collectedClasses$.YamlNode_MapMixin_UnmodifiableMapMixin[1];
    YamlNode_MapMixin_UnmodifiableMapMixin.prototype = $desc;
    YamlNode_MapMixin_UnmodifiableMapMixin.$__fields__ = [];
    function YamlMap_keys_closure() {
      this.$deferredAction();
    }
    YamlMap_keys_closure.builtin$cls = "YamlMap_keys_closure";
    if (!("name" in YamlMap_keys_closure))
      YamlMap_keys_closure.name = "YamlMap_keys_closure";
    $desc = $collectedClasses$.YamlMap_keys_closure[1];
    YamlMap_keys_closure.prototype = $desc;
    YamlMap_keys_closure.$__fields__ = [];
    function YamlList(nodes, style, _yaml_node$_span) {
      this.nodes = nodes;
      this.style = style;
      this._yaml_node$_span = _yaml_node$_span;
      this.$deferredAction();
    }
    YamlList.builtin$cls = "YamlList";
    if (!("name" in YamlList))
      YamlList.name = "YamlList";
    $desc = $collectedClasses$.YamlList[1];
    YamlList.prototype = $desc;
    YamlList.$__fields__ = ["nodes", "style", "_yaml_node$_span"];
    YamlList.prototype.get$nodes = function(receiver) {
      return this.nodes;
    };
    YamlList.prototype.get$style = function(receiver) {
      return this.style;
    };
    function YamlNode_ListMixin() {
      this.$deferredAction();
    }
    YamlNode_ListMixin.builtin$cls = "YamlNode_ListMixin";
    if (!("name" in YamlNode_ListMixin))
      YamlNode_ListMixin.name = "YamlNode_ListMixin";
    $desc = $collectedClasses$.YamlNode_ListMixin[1];
    YamlNode_ListMixin.prototype = $desc;
    YamlNode_ListMixin.$__fields__ = [];
    function YamlScalar(value, style, _yaml_node$_span) {
      this.value = value;
      this.style = style;
      this._yaml_node$_span = _yaml_node$_span;
      this.$deferredAction();
    }
    YamlScalar.builtin$cls = "YamlScalar";
    if (!("name" in YamlScalar))
      YamlScalar.name = "YamlScalar";
    $desc = $collectedClasses$.YamlScalar[1];
    YamlScalar.prototype = $desc;
    YamlScalar.$__fields__ = ["value", "style", "_yaml_node$_span"];
    YamlScalar.prototype.get$value = function(receiver) {
      return this.value;
    };
    YamlScalar.prototype.get$style = function(receiver) {
      return this.style;
    };
    function main_closure() {
      this.$deferredAction();
    }
    main_closure.builtin$cls = "main_closure";
    if (!("name" in main_closure))
      main_closure.name = "main_closure";
    $desc = $collectedClasses$.main_closure[1];
    main_closure.prototype = $desc;
    main_closure.$__fields__ = [];
    return [JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JavaScriptFunction, JSArray, JSUnmodifiableArray, ArrayIterator, JSNumber, JSInt, JSDouble, JSString, CodeUnits, ListIterable, SubListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, MappedListIterable, WhereIterable, WhereIterator, ExpandIterable, ExpandIterator, TakeIterable, EfficientLengthTakeIterable, TakeIterator, SkipIterable, EfficientLengthSkipIterable, SkipIterator, EmptyIterable, EmptyIterator, FixedLengthListMixin, UnmodifiableListMixin, UnmodifiableListBase, ReversedListIterable, Symbol, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _IsolateContext_handlePing_respond, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, IsolateNatives__startIsolate_runStartFunction, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _WorkerSendPort, RawReceivePortImpl, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, TimerImpl$periodic_closure, CapabilityImpl, _Serializer, _Deserializer, ConstantMapView, ConstantMap, ConstantStringMap, ConstantStringMap_values_closure, _ConstantMapKeyIterable, GeneralConstantMap, JSInvocationMirror, ReflectionInfo, Primitives_initTicker_closure, Primitives_functionNoSuchMethod_closure, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, ExceptionAndStackTrace, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, TearOffClosure, StaticClosure, BoundClosure, CastErrorImplementation, RuntimeError, RuntimeType, RuntimeFunctionType, DynamicRuntimeType, RuntimeTypePlain, RuntimeTypeGeneric, TypeImpl, JsLinkedHashMap, JsLinkedHashMap_values_closure, JsLinkedHashMap_addAll_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, initHooks_closure, initHooks_closure0, initHooks_closure1, JSSyntaxRegExp, _MatchImplementation, _AllMatchesIterable, _AllMatchesIterator, StringMatch, _StringAllMatchesIterable, _StringAllMatchesIterator, NativeByteBuffer, NativeTypedData, NativeByteData, NativeTypedArray, NativeTypedArrayOfDouble, NativeTypedArray_ListMixin, NativeTypedArray_ListMixin_FixedLengthListMixin, NativeTypedArrayOfInt, NativeTypedArray_ListMixin0, NativeTypedArray_ListMixin_FixedLengthListMixin0, NativeFloat32List, NativeFloat64List, NativeInt16List, NativeInt32List, NativeInt8List, NativeUint16List, NativeUint32List, NativeUint8ClampedList, NativeUint8List, _AsyncRun__initializeScheduleImmediate_internalCallback, _AsyncRun__initializeScheduleImmediate_closure, _AsyncRun__scheduleImmediateJsOverride_internalCallback, _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, _awaitOnObject_closure, _awaitOnObject_closure0, _wrapJsFunctionForAsync_closure, _IterationMarker, _SyncStarIterator, _SyncStarIterable, _BroadcastStream, _BroadcastSubscription, _BroadcastStreamController, _SyncBroadcastStreamController, _SyncBroadcastStreamController__sendData_closure, _SyncBroadcastStreamController__sendError_closure, _SyncBroadcastStreamController__sendDone_closure, _AsyncBroadcastStreamController, Future, closure0, Future_wait_handleError, Future_wait_closure, Future_forEach_closure, Future_forEach__closure, Future_forEach__closure0, Future_doWhile_closure, TimeoutException, _Completer, _AsyncCompleter, _SyncCompleter, _FutureListener, _Future, _Future__addListener_closure, _Future__prependListeners_closure, _Future__chainForeignFuture_closure, _Future__chainForeignFuture_closure0, _Future__chainForeignFuture_closure1, _Future__asyncComplete_closure, _Future__asyncComplete_closure0, _Future__asyncCompleteError_closure, _Future__propagateToListeners_handleWhenCompleteCallback, _Future__propagateToListeners_handleWhenCompleteCallback_closure, _Future__propagateToListeners_handleValueCallback, _Future__propagateToListeners_handleError, _Future_timeout_closure, _Future_timeout_closure0, _Future_timeout_closure1, _AsyncCallbackEntry, Stream, Stream_reduce_closure, Stream_reduce__closure, Stream_reduce__closure0, Stream_reduce_closure0, Stream_contains_closure, Stream_contains__closure, Stream_contains__closure0, Stream_contains_closure0, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_length_closure, Stream_length_closure0, Stream_isEmpty_closure, Stream_isEmpty_closure0, Stream_toList_closure, Stream_toList_closure0, Stream_first_closure, Stream_first_closure0, StreamSubscription, EventSink, _StreamController, _StreamController__subscribe_closure, _StreamController__recordCancel_complete, _SyncStreamControllerDispatch, _AsyncStreamControllerDispatch, _AsyncStreamController, _SyncStreamController, _ControllerStream, _ControllerSubscription, _EventSink, _BufferingStreamSubscription, _BufferingStreamSubscription__sendError_sendError, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _DelayedEvent, _DelayedData, _DelayedError, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _DoneStreamSubscription, _StreamIterator, _cancelAndError_closure, _cancelAndErrorClosure_closure, _cancelAndValue_closure, _ForwardingStream, _ForwardingStreamSubscription, _WhereStream, _MapStream, _HandleErrorStream, _StateStreamSubscription, _SkipStream, _EventSinkWrapper, _SinkTransformerStreamSubscription, _BoundSinkStream, AsyncError, Zone, _Zone, _rootHandleUncaughtError_closure, _RootZone, _RootZone_bindCallback_closure, _RootZone_bindCallback_closure0, _RootZone_bindUnaryCallback_closure, _HashMap, _HashMap_values_closure, _HashMap_addAll_closure, _IdentityHashMap, _CustomHashMap, _CustomHashMap_closure, _HashMapKeyIterable, _HashMapKeyIterator, _LinkedIdentityHashMap, _LinkedHashSet, _LinkedHashSetCell, _LinkedHashSetIterator, UnmodifiableListView, _HashSetBase, IterableBase, closure5, ListBase, Object_ListMixin, ListMixin, MapMixin, _MapBaseValueIterable, _MapBaseValueIterator, _UnmodifiableMapMixin, MapView, UnmodifiableMapView, Maps_mapToString_closure, ListQueue, _ListQueueIterator, SetMixin, SetBase, _JsonMap, _JsonMap_values_closure, _JsonMap_addAll_closure, _JsonMapKeyIterable, Base64Codec, Base64Encoder, Base64Decoder, _Base64Decoder, Codec, Converter, Encoding, JsonUnsupportedObjectError, JsonCyclicError, JsonCodec, JsonEncoder, JsonDecoder, _JsonStringifier, _JsonStringifier_writeMap_closure, _JsonStringStringifier, LineSplitter, LineSplitter_bind_closure, _LineSplitterSink, _LineSplitterEventSink, StringConversionSinkBase, StringConversionSinkMixin, _StringAdapterSink, Utf8Codec, Utf8Encoder, _Utf8Encoder, Utf8Decoder, _Utf8Decoder, _Utf8Decoder_convert_scanOneByteCharacters, _Utf8Decoder_convert_addSingleBytes, NoSuchMethodError_toString_closure, bool, Comparable, DateTime, $double, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, IndexError, NoSuchMethodError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, OutOfMemoryError, StackOverflowError, CyclicInitializationError, _Exception, FormatException, IntegerDivisionByZeroException, Expando, Function, $int, Iterable, Iterator, List, Map, Null, num, Object, Match, RegExp, StackTrace, _StringStackTrace, Stopwatch, String, Runes, RuneIterator, StringBuffer, Symbol0, Uri__parseIPv4Address_error, Uri_parseIPv6Address_error, Uri_parseIPv6Address_parseHex, _Uri, closure3, _Uri__checkNonWindowsPathReservedCharacters_closure, _Uri__makePath_closure, UriData, _createTables_closure, _createTables_build, _createTables_setChars, _createTables_setRange, _SimpleUri, HtmlElement, AnchorElement, Animation, ApplicationCacheErrorEvent, AreaElement, AudioTrack, AudioTrackList, BaseElement, BatteryManager, Blob, BluetoothDevice, Body, BodyElement, ButtonElement, CanvasElement, CanvasRenderingContext2D, CharacterData, Client, CloseEvent, CompositionEvent, CompositorWorker, Credential, CrossOriginConnectEvent, Crypto, CryptoKey, CssFontFaceRule, CssImportRule, CssKeyframeRule, CssKeyframesRule, CssPageRule, CssRule, CssStyleDeclaration, Interceptor_CssStyleDeclarationBase, _CssStyleDeclarationSet, Object_CssStyleDeclarationBase, _CssStyleDeclarationSet_closure, _CssStyleDeclarationSet_setProperty_closure, CssStyleDeclarationBase, CssStyleRule, CssViewportRule, CustomEvent, DataTransfer, DataTransferItem, DataTransferItemList, DeviceAcceleration, DeviceLightEvent, DirectoryEntry, DirectoryEntry__getFile_closure0, DirectoryEntry__getFile_closure, DivElement, Document0, DocumentFragment, DomError, DomException, DomIterator, DomPoint, DomPointReadOnly, DomRectReadOnly, DomSettableTokenList, DomStringList, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, DomTokenList, _ChildrenElementList, _FrozenElementList, Element, closure1, ScrollAlignment, EmbedElement, Entry, Entry_getParent_closure, Entry_getParent_closure0, Entry_remove_closure, Entry_remove_closure0, ErrorEvent, Event, EventSource, EventTarget, ExtendableEvent, FieldSetElement, File0, FileEntry, FileEntry_file_closure, FileEntry_file_closure0, FileError, FileList, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, FileReader, FileStream, FileSystem, FileWriter, FontFace, FontFaceSet, FormElement, Gamepad, GamepadButton, GeofencingEvent, GeofencingRegion, Geoposition, History, HtmlCollection, Interceptor_ListMixin1, Interceptor_ListMixin_ImmutableListMixin1, HtmlDocument, HttpRequest, HttpRequest_getString_closure, HttpRequest_request_closure, HttpRequestEventTarget, IFrameElement, ImageData, ImageElement, InputElement, KeyboardEvent, KeygenElement, LIElement, LinkElement, Location0, MapElement, MediaController, MediaDeviceInfo, MediaElement, MediaError, MediaKeyError, MediaKeyEvent, MediaKeyMessageEvent, MediaKeySession, MediaList, MediaQueryList, MediaStream, MediaStreamTrack, MenuElement, MenuItemElement, MessageEvent0, MessagePort, MetaElement, MeterElement, MidiConnectionEvent, MidiMessageEvent, MidiOutput, MidiPort, MimeType, MimeTypeArray, Interceptor_ListMixin2, Interceptor_ListMixin_ImmutableListMixin2, MouseEvent, MutationRecord, Navigator, NavigatorUserMediaError, NetworkInformation, _ChildNodeListLazy, Node, NodeIterator, NodeList, Interceptor_ListMixin3, Interceptor_ListMixin_ImmutableListMixin3, Notification0, OListElement, ObjectElement, OptGroupElement, OptionElement, OutputElement, ParamElement, Path2D, PerformanceEntry, PerformanceNavigation, PermissionStatus, Plugin, PluginArray, Interceptor_ListMixin4, Interceptor_ListMixin_ImmutableListMixin4, PluginPlaceholderElement, PositionError, PresentationAvailability, PresentationSession, ProcessingInstruction, ProgressElement0, ProgressEvent, PushEvent, PushMessageData, Range0, ReadableByteStream, ReadableByteStreamReader, ReadableStream, ReadableStreamReader, RtcDataChannel, RtcPeerConnection, RtcSessionDescription, RtcStatsReport, RtcStatsResponse, ScreenOrientation, ScriptElement0, SelectElement, Selection, ServicePort, ServiceWorkerMessageEvent, ServiceWorkerRegistration, ShadowRoot, SharedWorker, SharedWorkerGlobalScope, SourceBuffer, SourceBufferList, EventTarget_ListMixin, EventTarget_ListMixin_ImmutableListMixin, SourceElement, SourceInfo, SpeechGrammar, SpeechGrammarList, Interceptor_ListMixin5, Interceptor_ListMixin_ImmutableListMixin5, SpeechRecognition, SpeechRecognitionError, SpeechRecognitionEvent, SpeechRecognitionResult, SpeechSynthesis, SpeechSynthesisEvent, SpeechSynthesisUtterance, SpeechSynthesisVoice, StashedMessagePort, Storage, Storage_addAll_closure, Storage_keys_closure, Storage_values_closure, StorageEvent, StyleElement, StyleMedia, StyleSheet, TableColElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, TextAreaElement, TextEvent, TextTrack, TextTrackCue, TextTrackCueList, Interceptor_ListMixin6, Interceptor_ListMixin_ImmutableListMixin6, TextTrackList, EventTarget_ListMixin0, EventTarget_ListMixin_ImmutableListMixin0, TimeRanges, Touch, TouchEvent, TouchList, Interceptor_ListMixin7, Interceptor_ListMixin_ImmutableListMixin7, TrackDefault, TrackDefaultList, TrackElement, TreeWalker, UIEvent, Url, VideoElement, VideoTrack, VideoTrackList, VttCue, VttRegion, VttRegionList, WebSocket0, Window, Worker, WorkerGlobalScope, XsltProcessor, _Attr, _ClientRect, _ClientRectList, Interceptor_ListMixin8, Interceptor_ListMixin_ImmutableListMixin8, _CssRuleList, Interceptor_ListMixin9, Interceptor_ListMixin_ImmutableListMixin9, _DocumentType, _DomRect, _GamepadList, Interceptor_ListMixin10, Interceptor_ListMixin_ImmutableListMixin10, _HTMLFrameSetElement, _NamedNodeMap, Interceptor_ListMixin11, Interceptor_ListMixin_ImmutableListMixin11, _Request, _ServiceWorker, _SpeechRecognitionResultList, Interceptor_ListMixin12, Interceptor_ListMixin_ImmutableListMixin12, _StyleSheetList, Interceptor_ListMixin13, Interceptor_ListMixin_ImmutableListMixin13, _WorkerLocation, _WorkerNavigator, _AttributeMap, _AttributeMap_addAll_closure, _ElementAttributeMap, _MarginCssRect, CssRect, _MultiElementCssClassSet, closure2, _MultiElementCssClassSet_readClasses_closure, _MultiElementCssClassSet_modify_closure, _MultiElementCssClassSet_toggle_closure, _MultiElementCssClassSet_remove_closure, _ElementCssClassSet, Dimension, _EventStream, _ElementEventStreamImpl, _ElementListEventStreamImpl, _EventStreamSubscription, _StreamPool, _StreamPool_add_closure, _Html5NodeValidator, ImmutableListMixin, NodeValidatorBuilder, NodeValidatorBuilder_allowsElement_closure, NodeValidatorBuilder_allowsAttribute_closure, _SimpleNodeValidator, _SimpleNodeValidator_closure, _SimpleNodeValidator_closure0, _TemplatingNodeValidator, _TemplatingNodeValidator_closure, _SvgNodeValidator, FixedSizeListIterator, _DOMWindowCrossFrame, _LocationCrossFrame, NodeValidator, _SameOriginUriPolicy, _ValidatingTreeSanitizer, _ValidatingTreeSanitizer_sanitizeTree_walk, _StructuredClone, _StructuredClone_walk_closure, _AcceptStructuredClone, _AcceptStructuredClone_walk_closure, _StructuredCloneDart2Js, _AcceptStructuredCloneDart2Js, convertNativePromiseToDartFuture_closure, convertNativePromiseToDartFuture_closure0, CssClassSetImpl, CssClassSetImpl_add_closure, CssClassSetImpl_addAll_closure, FilteredElementList, FilteredElementList__iterable_closure, FilteredElementList__iterable_closure0, FilteredElementList_removeRange_closure, Cursor, CursorWithValue, Database, _completeRequest_closure, Index, KeyRange, ObjectStore, Request, Transaction, JsObject, JsObject__convertDataTree__convert, JsFunction, JsArray, JsObject_ListMixin, _convertToJS_closure, _convertToJS_closure0, _wrapToDart_closure, _wrapToDart_closure0, _wrapToDart_closure1, _JSRandom, Point, _RectangleBase, Rectangle, AElement, Angle, AnimationElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEFloodElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GeometryElement, GraphicsElement, ImageElement0, Length, LengthList, Interceptor_ListMixin14, Interceptor_ListMixin_ImmutableListMixin14, MarkerElement, MaskElement, Number, NumberList, Interceptor_ListMixin15, Interceptor_ListMixin_ImmutableListMixin15, PathSeg, PathSegArcAbs, PathSegArcRel, PathSegCurvetoCubicAbs, PathSegCurvetoCubicRel, PathSegCurvetoCubicSmoothAbs, PathSegCurvetoCubicSmoothRel, PathSegCurvetoQuadraticAbs, PathSegCurvetoQuadraticRel, PathSegCurvetoQuadraticSmoothAbs, PathSegCurvetoQuadraticSmoothRel, PathSegLinetoAbs, PathSegLinetoHorizontalAbs, PathSegLinetoHorizontalRel, PathSegLinetoRel, PathSegLinetoVerticalAbs, PathSegLinetoVerticalRel, PathSegList, Interceptor_ListMixin16, Interceptor_ListMixin_ImmutableListMixin16, PathSegMovetoAbs, PathSegMovetoRel, PatternElement, Point1, PointList, Rect, RectElement, ScriptElement, StringList, Interceptor_ListMixin17, Interceptor_ListMixin_ImmutableListMixin17, StyleElement0, _AttributeClassSet, SvgElement, SvgSvgElement, SymbolElement, TextContentElement, TextPathElement, TextPositioningElement, Transform, TransformList, Interceptor_ListMixin18, Interceptor_ListMixin_ImmutableListMixin18, UseElement, ViewElement, ViewSpec, _GradientElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGMPathElement, Uint8List, AudioBuffer, AudioBufferSourceNode, AudioContext, AudioNode, AudioParam, AudioSourceNode, BiquadFilterNode, OscillatorNode, ActiveInfo, RenderingContext, RenderingContext2, _WebGL2RenderingContextBase, SqlDatabase, SqlError, SqlResultSetRowList, Interceptor_ListMixin19, Interceptor_ListMixin_ImmutableListMixin19, Atom, Atom_pickFolder_closure, TrustedHtmlTreeSanitizer, which_closure, which_closure0, CommandRegistry, CommandRegistry_add_closure, ContextMenuManager, ContextMenuManager_add_closure, ContextMenuItem, ContextMenuItem_toJs_closure, _SeparatorMenuItem, AtomEvent, Config, Config_onDidChange_closure, Config_onDidChange_closure0, Grammar, GrammarRegistry, ScopeDescriptor, FS, Stats, Directory, Directory_getEntriesSync_closure, File, Entry0, NotificationManager, NotificationManager__options_closure, Notification, NotificationButton, NotificationButton_toProxy_closure, NotificationHelper, NotificationHelper_appendText_closure, ProcessNotifier, ProcessNotifier_watch_closure, ProcessNotifier_watch_closure0, ProcessNotifier_watch_closure1, ProcessNotifier_watch_closure2, promptUser_closure, promptUser_closure0, promptUser_closure1, promptUser_closure2, registerPackage_closure, registerPackage_closure0, registerPackage_closure1, registerPackage__closure, AtomPackage, AtomPackage_loadPackageJson_closure, AtomPackage_getPackageVersion_closure, PackageManager, Process, exec_closure, ProcessRunner, ProcessRunner_execSimple_closure, ProcessRunner_execSimple_closure0, ProcessRunner_execSimple_closure1, ProcessRunner_execStreaming_closure2, ProcessRunner_execStreaming_closure1, ProcessRunner_execStreaming_closure, ProcessRunner_execStreaming_closure0, ProcessRunner_kill_closure, ProcessResult, ShellWrangler, BufferedProcess, BufferedProcess_create_closure, Shell, ViewRegistry, Workspace, Workspace_getTextEditors_closure, Workspace_observeTextEditors_closure, Workspace_observeActivePaneItem_closure, Workspace_open_closure, Workspace_open__closure, Project, Project_getDirectories_closure, Panel, Panel_onDidDestroy_closure, Gutter, Marker, Decoration, Point0, Range, TextBuffer, TextEditorElement, TextEditor, TextEditor_setSelectedBufferRanges_closure, TextEditor_onDidChangeCursorPosition_closure, TextEditor_onDidAddGutter_closure, promiseToFuture_closure, promiseToFuture_closure0, ProxyHolder, ProxyHolder_eventStream_closure, ProxyHolder_eventStream_closure0, JsDisposable, Promise, Promise__jsObjectFromFuture_closure, Promise__jsObjectFromFuture__closure, Promise__jsObjectFromFuture__closure0, FutureSerializer, FutureSerializer__serviceQueue_closure, FutureSerializer__serviceQueue_closure0, FutureSerializer__serviceQueue_closure1, Dependencies, Disposable, Disposables, EventListener, EventListener_closure, StreamSubscriptions, Edit, AnalysisOptionsManager, Server, Domain, RefactoringOptions, RequestError, ServerDomain, ServerError, ServerStatus, VersionResult, AnalysisDomain, AnalysisErrors, AnalysisErrors_parse_closure, AnalysisFlushResults, AnalysisNavigation, AnalysisNavigation_parse_closure, AnalysisNavigation_parse_closure0, AnalysisOutline, HoverResult, HoverResult_parse_closure, CompletionDomain, CompletionResults, CompletionResults_parse_closure, SuggestionsResult, SearchDomain, SearchResults, SearchResults_parse_closure, FindElementReferencesResult, FindTopLevelDeclarationsResult, TypeHierarchyResult, TypeHierarchyResult_parse_closure, EditDomain, FormatResult, FormatResult_parse_closure, AssistsResult, AssistsResult_parse_closure, AvailableRefactoringsResult, FixesResult, FixesResult_parse_closure, RefactoringResult, RefactoringResult_parse_closure, RefactoringResult_parse_closure0, RefactoringResult_parse_closure1, SortMembersResult, OrganizeDirectivesResult, ExecutionDomain, CreateContextResult, MapUriResult, DiagnosticDomain, DiagnosticsResult, DiagnosticsResult_parse_closure, AddContentOverlay, AnalysisError, AnalysisErrorFixes, AnalysisErrorFixes_parse_closure, AnalysisOptions, AnalysisStatus, ChangeContentOverlay, CompletionSuggestion, ContextData, Element0, HoverInformation, LinkedEditGroup, LinkedEditGroup_parse_closure, LinkedEditGroup_parse_closure0, LinkedEditSuggestion, Location, NavigationRegion, NavigationTarget, Outline, Outline_parse_closure, Position, PubStatus, RefactoringProblem, RemoveContentOverlay, SearchResult, SearchResult_parse_closure, SourceChange, SourceChange_parse_closure, SourceChange_parse_closure0, SourceEdit, SourceFileEdit, SourceFileEdit_parse_closure, TypeHierarchyItem, ExtractLocalVariableRefactoringOptions, RenameRefactoringOptions, RefactoringFeedback, BufferObserverManager, BufferObserverManager_closure, BufferObserverManager__closure, BufferObserverManager_dispose_closure, BufferObserver, BufferFormatter, BufferFormatter_closure, BufferFormatter__closure, BufferFormatter___closure, BufferFormatter_closure0, BufferUpdater, OverlayManager, OverlayManager__serverActive_closure, OverlayInfo, OverlayInfo__flush_closure, _log_closure, DartAutocompleteProvider, DartAutocompleteProvider_getSuggestions_closure, DartAutocompleteProvider_getSuggestions_closure1, DartAutocompleteProvider_getSuggestions_closure0, DartAutocompleteProvider__handleCompletionResults_closure, DartAutocompleteProvider__makeSuggestion_closure, DartAutocompleteProvider__rightLabel_closure, DartdocHelper, DartdocHelper_closure, DartdocHelper__handleDartdoc_closure, DartdocHelper__handleDartdoc__closure, DartdocHelper__render_writeTitle, DartdocControl, DartdocControl_closure, DartdocControl_closure0, NavigationHelper, NavigationHelper__activate_closure, NavigationHelper__handleNavigateEditor_closure, NavigationHelper__handleNavigateEditor_closure0, NavigationHelper__processNavInfo_closure, _NavCompleterHelper, _NavCompleterHelper_handleNavInfo_closure, _NavCompleterHelper_getNavigationInfo_closure, FindTypeHelper, FindTypeHelper_closure, FindTypeHelper__handleFindType_closure, FindTypeHelper__handleFindType__closure, FindTypeHelper__handleFindType___closure, FormattingManager, FormattingManager_closure, FormattingManager_closure0, FormattingManager_formatFile_closure, FormattingManager_formatEditor_closure, FormattingManager_formatEditor_closure0, OrganizeFileManager, OrganizeFileManager__addEditorCommand_closure, OrganizeFileManager__handleSortMembers_closure, OrganizeFileManager__handleSortMembers__closure, OrganizeFileManager__handleOrganizeDirectives_closure, OrganizeFileManager__handleOrganizeDirectives__closure, OrganizeFileManager__handleOrganizeDirectives__closure0, QuickFixHelper, QuickFixHelper_closure, QuickFixHelper__handleQuickFix_closure, QuickFixHelper__handleFixesResult_closure, QuickFixHelper__handleFixesResult__closure, QuickFixHelper__handleFixesResult_closure0, QuickFixHelper__handleFixesResult_closure1, QuickFixHelper__handleFixesResult_closure2, _Change, _applyChange_closure, _applyChange__closure0, _applyChange_closure0, _applyChange__closure, _applyChange_closure1, RefactoringHelper, RefactoringHelper__addCommand_closure, RefactoringHelper__handleExtractLocal_closure, RefactoringHelper__handleExtractLocal__closure, RefactoringHelper__handleRenameRefactor_closure, RefactoringHelper__handleRenameRefactor__closure, RefactoringHelper__checkRefactoringAvailable_closure, RefactoringHelper__checkRefactoringAvailable__closure, RefactoringHelper__performRefactoring_closure, RefactoringHelper__performRefactoring__closure, RefactoringHelper__applyRefactoringResult_closure, RefactoringHelper__applyRefactoringResult__closure0, RefactoringHelper__applyRefactoringResult_closure0, RefactoringHelper__applyRefactoringResult_closure1, RefactoringHelper__applyRefactoringResult__closure, RefactoringHelper__applyRefactoringResult_closure2, RefactoringHelper__applyRefactoringResult_closure3, RefactoringHelper__applyRefactoringResult_closure4, RefactoringHelper__applyEdits_closure, RefactoringHelper__applyEdits__closure0, RefactoringHelper__applyEdits_closure0, RefactoringHelper__applyEdits__closure, RefactoringHelper__applyEdits_closure1, FindReferencesHelper, FindReferencesHelper__handleReferencesEditor_closure, FindReferencesHelper__handleReferencesEditor__closure, ReferencesSearch, FindReferencesView, FindReferencesView__handleSearchResults_closure, FindReferencesView__handleSearchResults_closure0, _MatchParser, TypeHierarchyHelper, TypeHierarchyHelper__handleHierarchyEditor_closure, TypeHierarchyHelper__handleHierarchyEditor__closure, TypeHierarchyView, TypeHierarchyView__sort_closure, TypeHierarchyView__render_closure, TypeHierarchyView__render_closure0, AnalysisServer, AnalysisServer_closure, AnalysisServer__setup_closure, AnalysisServer__setup_closure0, AnalysisServer__setup_closure1, AnalysisServer_updateRoots_closure, AnalysisServer__reconcileRoots_closure, AnalysisServer__focusedEditorChanged_closure, AnalysisServer__searchResultsStream_closure, AnalysisServer__searchResultsStream_closure0, AnalysisServer__initNewServer_closure, AnalysisServer__initNewServer_closure0, AnalysisServer__initNewServer_closure1, AnalysisServer__initNewServer_closure2, AnalysisServer__initNewServer_closure3, AnalysisServer__initNewServer_closure4, AnalysisServer__initNewServer_closure5, _AnalyzingJob, _AnalyzingJob_closure, _AnalyzingJob_start_closure, _AnalysisServerWrapper, _AnalysisServerWrapper_closure, _AnalysisServerWrapper_setup_closure, _AnalysisServerWrapper_setup_closure0, _AnalysisServerWrapper_setup_closure1, _AnalysisServerWrapper_setup__closure, _AnalysisServerWrapper_restart_closure, _AnalysisServerWrapper_restart__closure, _AnalysisServerWrapper_restart_closure0, _AnalysisServerWrapper_kill_closure, _AnalysisServerWrapper__startProcess_closure, _AnalysisServerWrapper__startProcess_closure0, _AnalysisServerWrapper__startProcess_closure1, _AnalysisServerWrapper__messageWriter_closure, AnalysisRequestJob, AnalysisRequestJob_run_closure, AutocompleteProvider, AutocompleteProvider__getSuggestions_suggestionToProxy, AutocompleteProvider__getSuggestions_closure, AutocompleteProvider__getSuggestions_closure0, AutocompleteProvider__getSuggestions_closure1, AutocompleteProvider__getSuggestions_closure2, AutocompleteProvider__getSuggestions_closure3, AutocompleteOptions, Suggestion, _AutoCompleteOverride, LinterProvider, LinterConsumer, LinterService, LinterService_setMessages_closure, LintMessage, Rn, Pt, install_closure, _InstallJob, _InstallJob_run_closure, _InstallJob_run_closure0, _InstallJob_run_closure1, _InstallJob__install_closure, StatusBar, Tile, PermissiveNodeValidator, _Dartino, _Dartino_enable_closure, _Dartino_enable_closure0, _promptCreateDartinoYaml_closure, _promptCreateDartinoYaml_closure0, DartinoProjectSettings, DartinoProjectSettings_operator$indexSet_closure, DartuinoBoard, Device0, LocalDevice, Stm32f, DartinoLaunchType, DartinoLaunch, DartinoLaunch_run_closure, DartinoLaunch_run_closure0, DartinoLaunch_debug_closure, DartinoLaunch_debug_closure0, DartinoLaunch_debug_closure1, DartinoLaunch_debug_closure2, DartinoLaunch_debug_closure3, DartinoSdk, DartinoSdk_promptOptIntoAnalytics_recordChoice, DartinoSdk_promptOptIntoAnalytics_optIn, DartinoSdk_promptOptIntoAnalytics_optOut, _installAdditionalTools_closure, DartinoCmd, DartinoCmd_start_closure, Sdk0, ExceptionBreakType, BreakpointManager, BreakpointManager_closure, BreakpointManager_closure0, BreakpointManager_getBreakpontsFor_closure, BreakpointManager__processEditor_closure, BreakpointManager__findSimilar_closure, BreakpointManager__findSimilar_closure0, BreakpointManager_toStorable_closure, AtomBreakpoint, _GutterTracker, _GutterTracker_closure, _GutterTracker__initLineNumberGutter_closure, _GutterTracker__initLineNumberGutter_closure0, _EditorBreakpoint, _EditorBreakpoint_closure, DebugManager, DebugManager_closure, DebugManager_closure0, DebugManager__closure, DebugManager_closure1, DebugManager_closure2, DebugManager_closure3, DebugManager_closure4, DebugManager_dispose_closure, UriTranslator, UriResolver, UriResolver_closure, UriResolver_closure0, UriResolver_resolveUriToPath_closure, UriResolver_resolvePathToUris_closure, UriResolver_dispose_closure, DebuggerView, DebuggerView_closure, DebuggerView__createConfigMenu__toggleExceptions, DebuggerView__createConfigMenu_closure, DebuggerView__createConfigMenu_closure0, DebuggerView__createConfigMenu_closure1, DebuggerView__createSecondarySection_closure, DebuggerView__handleIsolateTerminated_closure, DebuggerView__handleIsolateTerminated_closure0, DebuggerView__jumpToLocation_closure, FlowControlSection, FlowControlSection_closure, FlowControlSection__handleIsolateChange_closure, FlowControlSection__restart_closure, ExecutionTab, ExecutionTab__updateFrames_closure, ExecutionTab__selectFrame_closure, _LocalTreeModel, DetailSection, DetailSection_showDetails_closure, DetailSection_showDetails_closure0, DetailSection_showDetails_closure1, LibrariesTab, IsolatesTab, IsolatesTab_closure, BreakpointsTab, BreakpointsTab_closure, BreakpointsTab__render_closure, FocusManager, _TabTitlebar, DebugConnection, DebugIsolate, DebugFrame, DebugVariable, DebugValue, DebugLocation, ObservatoryDebugger_connect_closure, ObservatoryDebugger_connect__closure, ObservatoryDebugger_connect__closure0, ObservatoryDebugger_connect_closure0, ObservatoryDebugger_connect_closure1, ObservatoryConnection, ObservatoryConnection_closure, ObservatoryConnection__init_closure, ObservatoryConnection__init_closure0, ObservatoryConnection__init_closure1, ObservatoryConnection__init_closure2, ObservatoryConnection__init_closure3, ObservatoryConnection__init_closure4, ObservatoryConnection__init_closure5, ObservatoryConnection__init_closure6, ObservatoryConnection__init_closure7, ObservatoryConnection__init_closure8, ObservatoryConnection__installBreakpoints_closure, ObservatoryConnection__installBreakpoints_closure0, ObservatoryConnection__installBreakpoints__closure1, ObservatoryConnection__installBreakpoints___closure0, ObservatoryConnection__installBreakpoints____closure1, ObservatoryConnection__installBreakpoints____closure2, ObservatoryConnection__installBreakpoints__closure2, ObservatoryConnection__installBreakpoints_closure1, ObservatoryConnection__installBreakpoints__closure0, ObservatoryConnection__installBreakpoints_closure2, ObservatoryConnection__installBreakpoints__closure, ObservatoryConnection__installBreakpoints___closure, ObservatoryConnection__installBreakpoints____closure, ObservatoryConnection__installBreakpoints____closure0, ObservatoryConnection__installBreakpoints_closure3, ObservatoryConnection__handleIsolateEvent_closure, ObservatoryConnection__handleIsolateEvent__closure, ObservatoryConnection__handleIsolateEvent___closure, ObservatoryConnection__handleDebugEvent_closure, ObservatoryConnection__handleDebugEvent__closure, ObservatoryConnection__handleDebugEvent_closure0, ObservatoryConnection__registerNewIsolate_closure, ObservatoryConnection__registerNewIsolate_closure0, ObservatoryConnection__printExceptionToConsole_closure, ObservatoryConnection__printExceptionToConsole_closure0, ObservatoryLog, ObservatoryIsolate, ObservatoryIsolate_libraries_closure, ObservatoryIsolate__updateIsolateInfo_closure, ObservatoryIsolate__populateFrames_closure, ObservatoryIsolate__populateFrames__closure, ObservatoryIsolate__populateFrames___closure, ObservatoryFrame, ObservatoryFrame_eval_closure, ObservatoryVariable, ObservatoryFieldVariable, ObservatoryMapVariable, ObservatoryArrayVariable, ObservatoryCustomVariable, ObservatoryObjRefVariable, ObservatoryInstanceRefValue, ObservatoryInstanceRefValue_getChildren_closure, ObservatoryInstanceRefValue_getChildren__closure, ObservatoryInstanceRefValue_getChildren__closure0, ObservatoryInstanceRefValue_getChildren__closure1, ObservatoryInstanceRefValue_invokeToString_closure, ObservatoryObjRefValue, SimpleDebugValue, SentinelDebugValue, ObservatoryLocation, ObservatoryLocation_resolve_closure, ObservatoryLocation_resolve_closure0, ObservatoryLocation_resolve_closure1, ObservatoryLocation__resolve_closure, ObservatoryLibrary, ScriptManager, ScriptManager_resolveScript_closure, ScriptManager_resolveScript_closure0, ScriptManager_resolveScript_closure1, _ObservatoryServiceWrapper, _VmSourceCache, LineColumn, WebSocket, WebSocket_onOpen_closure, WebSocket_onMessage_closure, WebSocket_onError_closure, WebSocket_onClose_closure, MessageEvent, applyEdits_closure, applyEdits__closure, selectEditGroup_closure, _sortEdits_closure, EditorManager, EditorManager_jumpToLocation_closure, Editors, Editors__observeTextEditors_closure, CoreElement, CoreElement_add_closure, CoreElement_onClick_closure, CoreElement_click_closure, CoreElement_dblclick_closure, ProgressElement, CloseButton, TitledModelDialog, TitledModelDialog_closure, TitledModelDialog_closure0, Strobe, Strobe_strobe_closure, Strobe_strobe_closure0, ErrorRepository, Flutter, FlutterConnectManager, ConnectDialog, ConnectDialog_show_closure, ConnectDialog_show__closure, ConnectDialog__updateApps_closure, FlutterDaemonManager, FlutterDaemonManager_closure, FlutterDaemonManager__startFlutterDaemon_closure2, FlutterDaemonManager__startFlutterDaemon_closure1, FlutterDaemonManager__startFlutterDaemon_closure0, FlutterDaemonManager__startFlutterDaemon_closure, FlutterDaemonManager__startFlutterDaemon_closure3, FlutterDaemonManager__startFlutterDaemon_closure4, FlutterDaemonManager__startFlutterDaemon_closure5, FlutterDaemonManager__startFlutterDaemon_closure6, FlutterDaemonManager__startFlutterDaemon_closure7, FlutterDaemonManager__startFlutterDaemon_closure8, _ProcessDisposable, FlutterDaemon, Domain0, RequestError0, DaemonDomain, DiscoveredApp, AppDomain, AppDomain_start_closure, AppDomain_discover_closure, DaemonApp, DaemonApp_closure, DaemonApp_closure0, DaemonApp_closure1, DaemonApp_closure2, DaemonApp_closure3, DaemonApp_closure4, DaemonApp_closure5, DaemonApp_closure6, DaemonApp_stop_closure, AppStartedResult, AppEvent, DebugPortAppEvent, LogAppEvent, ProgressAppEvent, StopAppEvent, DeviceDomain, DeviceDomain_getDevices_closure, DeviceDomain_forward_closure, Device, LogMessage, DaemonRequestJob, DaemonRequestJob_run_closure, OperationResult, FlutterDeviceManager, FlutterDeviceManager__updateForDaemon_closure, BuildMode, FlutterExt, FlutterExt_debugPaint_closure, FlutterExt_repaintRainbow_closure, FlutterExt_timeDilation_closure, FlutterExt_performanceOverlay_closure, FlutterExt__init_closure, FlutterExt__checkIsolate_closure, FlutterLaunchType, FlutterLaunchType_connectToApp_closure, _LaunchInstance0, _LaunchInstance__connectToDebugger_closure, _LaunchInstance__connectToDebugger_closure0, _RunLaunchInstance, _RunLaunchInstance_launch_closure, _RunLaunchInstance_launch__closure, _RunLaunchInstance_launch__closure0, _RunLaunchInstance_launch__closure1, _RunLaunchInstance_launch__closure2, _RunLaunchInstance_launch_closure0, _RunLaunchInstance__kill_closure, _RunLaunchInstance__kill_closure0, _LogStatusJob, _ConnectLaunchInstance, _FlutterLaunch, _FlutterLaunch_closure, _FlutterLaunch_restart_closure, FlutterUriTranslator, FlutterSdkManager, FlutterSdkManager_closure, FlutterSdkManager_closure0, FlutterSdkManager_closure1, FlutterSdkManager_closure2, FlutterSdkManager_tryToAutoConfigure_closure, FlutterSdkManager_showInstallationInfo_closure, FlutterSdkManager_showInstallationInfo_closure0, _discoverSdk_closure, _discoverSdk_closure0, _discoverSdk_closure1, _discoverSdk_closure2, _discoverSdk_closure3, _discoverSdk_closure4, FlutterSdk, FlutterTool, _FlutterToolJob, SdkLocationJob0, FlutterToolsManager, FlutterToolsManager__createProject_closure, FlutterToolsManager__createProject_closure0, FlutterToolsManager__createProject__closure, FlutterSection, FlutterSection_closure, MojoLaunchType, _LaunchInstance, _LaunchInstance_launch_closure, _LaunchInstance_launch_closure0, _LaunchInstance_launch_closure1, _LaunchInstance__kill_closure, ChangelogManager, ChangelogManager_closure, ChangelogManager_closure0, ChangelogManager__handleReleaseNotes_closure, ChangelogManager__handleReleaseNotes_closure0, Debounce, Debounce_bind_closure, Debounce_bind__closure, Debounce_bind_closure0, _handleEnterKey_closure, _handleEnterKey_closure0, _handleEnterKey_closure1, _handleEnterKey_closure2, _handleEnterKey_closure3, _handleEnterKey_closure4, _handleEnterKey_closure5, _handleEnterKey_closure6, ErrorsController, ErrorsController_closure, ErrorsController__handleErrorsChanged_closure, ErrorsView, ErrorsView__cvtError_closure, ErrorsView__cvtError__closure, ErrorsView__cvtError_closure0, ErrorsView__cvtError_closure1, ErrorsView__cvtError_closure2, ErrorsView__jumpTo_closure, ErrorsStatusElement, NavigationManager, NavigationPosition, OutlineController, OutlineController_closure, OutlineController_closure0, OutlineController_closure1, OutlineView, OutlineView_closure, OutlineView__setupResizer_closure, OutlineView__setupResizer_closure0, _ErrorsList, _ErrorsList_updateWith_closure, PubManager, PubManager_closure, PubManager_closure0, PubManager_closure1, PubManager_closure2, PubManager_closure3, PubManager_closure4, PubManager_closure5, PubManager_closure6, PubManager_closure7, PubManager__addSdkCmd_closure, PubManager__handleRun_closure, PubManager__handleGlobalRun_closure, PubManager__handleGlobalActivate_closure, PubManager__showRunPubDialog_closure, PubJob, PubRunJob, PubGlobalActivate, PubContextCommand, RebuildManager, RebuildManager_closure, RebuildJob, RebuildJob_run_closure, RebuildJob_run_closure0, RebuildJob_run_closure1, RebuildJob_run__closure0, RebuildJob_run_closure2, RebuildJob_run__closure, RebuildJob__runBuild_closure, RebuildJob__runBuild_closure0, RebuildJob__runBuild_closure1, StatusViewManager, StatusViewManager_closure, StatusViewManager_closure0, StatusViewManager_closure1, StatusView, StatusView_closure, StatusView__registerSection_closure, StatusView__createPluginSection_closure, StatusView__createPluginSection_closure0, StatusView__createPluginSection_closure1, StatusView__createPluginSection_closure2, StatusView__createPluginSection__closure, StatusView__createDartSdkSection_closure, StatusView__createDartSdkSection__closure, StatusView__createDartSdkSection_closure0, StatusView__createAnalysisServerSection_closure, StatusView__createAnalysisServerSection__closure, StatusView__createAnalysisServerSection__closure0, StatusView__createAnalysisServerSection_closure0, StatusView__createAnalysisServerSection_closure1, StatusView__createAnalysisServerSection_closure2, StatusView__createDiagnostics_closure0, StatusView__createDiagnostics__closure0, StatusView__createDiagnostics__closure1, StatusView__createDiagnostics__closure2, StatusView__createDiagnostics__closure3, StatusView__createDiagnostics_closure, StatusView__createDiagnostics__closure, StatusView__createDiagnostics___closure, StatusView__createDiagnostics___closure0, StatusView__createAnalyticsSection_closure, StatusView__createAnalyticsSection_closure0, StatusView_showSection_closure, StatusView__handleSdkBrowse_closure, StatusHeader, _getPlatformVersions_closure, StatusDisplay, StatusDisplay_closure, StatusDisplay__closure, StatusDisplay__closure0, StatusDisplay_closure0, JobsDialog, TestManager, TestManager_isRunnableTest_closure, TestManager__createTest_closure, TestRunner, FlutterTestRunner, FlutterTestRunner_run_closure, FlutterTestRunner_run_closure0, FlutterTestRunner_run_closure1, FlutterTestRunner_run_closure2, TestPackageTestRunner, TestPackageTestRunner_run_closure, TestPackageTestRunner_run_closure0, TestPackageTestRunner_run_closure1, TestPackageTestRunner_run_closure2, CliTestRunner, CliTestRunner_run_closure, CliTestRunner_run_closure0, CliTestRunner_run_closure1, CliTestRunner_run_closure2, Toolbar, ToolbarTile, DartToolbarContribution, DartToolbarContribution_closure, DartToolbarContribution__buildFlutterTile_updateToolbar, DartToolbarContribution__buildFlutterTile_closure, DartToolbarContribution__buildFlutterTile_closure0, DartToolbarContribution__buildFlutterTile_closure1, DartToolbarContribution__buildRightTile_updateToolbar, DartToolbarContribution__buildRightTile_closure, DartToolbarContribution__bindLaunchManager_closure, DartToolbarContribution__bindLaunchManager_closure0, DartToolbarContribution__bindLaunchManager_closure1, DartToolbarContribution__bindLaunchManager_closure2, DartToolbarContribution__bindDevicesToSelect_closure, DartToolbarContribution__bindDevicesToSelect_closure0, DartToolbarContribution__bindDevicesToSelect_closure1, DartToolbarContribution__bindDevicesToSelect_closure2, DartToolbarContribution__bindDevicesToSelect_closure3, Job, Status, JobStatus, JobManager, JobManager_activeJob_closure, JobManager_activeJob_closure0, JobManager_runningJobs_closure, JobManager__exec_closure, JobManager__exec_closure0, JobManager__exec_closure1, JobInstance, ConsoleController, ConsoleController_closure, ConsoleController__toggleViews_closure, ConsoleView, ConsoleView_closure, ConsoleView_closure0, ConsoleView_closure1, ConsoleView_closure2, ConsoleView_closure3, ConsoleView__watchServicePort_closure, ConsoleView__emitText_closure, ConsoleStatusElement, LaunchManager, LaunchManager_addLaunch_closure, LaunchManager_addLaunch_closure0, LaunchType, LaunchData, Launchable, Launch, TextFragment, CachingServerResolver, _PathResolver, _ServerResolver, _ServerResolver_closure, _ServerResolver_closure0, _ServerResolver_dispose_closure, _ServerResolver_dispose__closure, CliLaunchType, CliLaunchType_performLaunch_closure, CliLaunchType_performLaunch_closure0, CliLaunchType_performLaunch__closure, CliLaunchType_performLaunch_closure1, CliLaunchType_performLaunch_closure2, _CliLaunch, _CliLaunch_closure, LaunchConfigurationManager, LaunchConfigurationManager_getAllConfigs_closure, _createUniqueFilename_closure, LaunchConfiguration, _ProjectConfigurations, _ProjectConfigurations_createConfig_closure, _ProjectConfigurations__listenToLaunchDir_closure, ShellLaunchType, ShellLaunchType_performLaunch_closure, ShellLaunchType_performLaunch_closure0, ShellLaunchType_performLaunch_closure1, ShellLaunchType_performLaunch_closure2, RunApplicationManager, RunApplicationManager_closure, RunApplicationManager_closure0, RunApplicationManager_closure1, RunApplicationManager_closure2, RunApplicationManager_closure3, RunApplicationManager__handleRunCommand_closure, RunApplicationManager__handleFullRestartCommand_closure, RunApplicationManager_run_closure, WorkspaceLaunchManager, WorkspaceLaunchManager_closure, WorkspaceLaunchManager_closure0, WorkspaceLaunchManager_closure1, WorkspaceLaunchManager__updateFromActiveEditor_closure, WorkspaceLaunchManager__updateFromActiveEditor_closure0, RunnableConfig, _RunAppContextCommand, DartLinterProvider, DartLinterConsumer, DartLinterConsumer_closure, DartLinterConsumer__regenErrors_closure, DartLinterConsumer__filter_closure, DartLinterConsumer__emit_closure, MIconButton, MTabGroup, MTabGroup__handleTabAdd_closure, MTabGroup_hasTabId_closure, MTab, MTab_closure, MList, MList_closure, MList_update_closure, MList__populateChildren_closure, MList__populateChildren_closure0, TreeModel, MTree, MTree__render_closure, MTree__render__closure, MTree__render__closure0, AtomDartPackage, AtomDartPackage_closure, AtomDartPackage_closure0, AtomDartPackage_closure1, AtomDartPackage_closure2, AtomDartPackage_activate_closure, AtomDartPackage_activate_closure0, AtomDartPackage_activate_closure1, AtomDartPackage_activate__closure, AtomDartPackage_activate__closure0, AtomDartPackage_activate_closure2, AtomDartPackage__validateSettings_closure, AtomDartPackage__validateSettings_closure0, AtomDartPackage__handleSendFeedback_closure, AtomDartPackage__registerLinter_closure, AtomDartPackage__registerLinter_closure0, AtomDartPackage__registerLinter_closure1, AtomDartPackage__setupLogging_closure, ProjectManager, ProjectManager_closure, ProjectManager_dispose_closure, ProjectManager__fullScanForProjects_closure, ProjectManager__fullScanForProjects_closure0, ProjectManager__fullScanForProjects_closure1, ProjectManager__fullScanForProjects_closure2, ProjectManager__updateChangeListeners_closure, ProjectManager__handleDirectoryChanged_closure, ProjectManager__initProjectControllers_closure, ProjectManager__initProjectControllers_closure0, DartProject, DartProject_importsPackage_closure, DartProject_importsPackage_closure0, ProjectScanJob, SdkManager, SdkManager_closure, SdkManager_closure0, SdkManager_closure1, SdkManager_tryToAutoConfigure_closure, Sdk, Sdk_getVersion_closure, SdkDiscovery, SdkDiscovery_discoverSdk_closure, SdkDiscovery__discoverSdk_closure, SdkDiscovery__discoverSdk_closure0, SdkDiscovery__discoverSdk_closure1, SdkDiscovery__discoverSdk_closure2, SdkDiscovery__discoverSdk_closure3, SdkDiscovery__discoverSdk_closure4, SdkLocationJob, State, State_onValueChanged_closure, State_saveState_closure, StateStorable, UsageManager, UsageManager_closure, UsageManager__init_closure, UsageManager__init__closure, UsageManager__init__closure0, Property, SelectionGroup, SelectionGroup_observeMutation_closure, ViewResizer, ViewResizer__init_closure0, ViewResizer__init_closure, ViewResizer__init__closure, ViewResizer__init__closure0, ViewResizer__minSize_closure, ViewResizer__targetSize_closure, ViewGroupManager, ViewGroupManager_isActiveId_closure, ViewGroupManager_hasViewId_closure, ViewGroup, ViewGroup_getViewById_closure, ViewGroup_getViewById_closure0, ViewGroup__setupResizer_closure, View, ListTreeBuilder, ListTreeBuilder__addNode_closure, ListTreeBuilder__addNode_closure0, ListTreeBuilder__addNode_closure1, ListTreeBuilder__addNode_closure2, ListTreeBuilder__addNode_closure3, Node0, Node_decendentCount_closure, DoubleCancelCommand, DoubleCancelCommand__handleCancel_closure, DefaultEquality, IterableEquality, _UnorderedEquality, UnorderedIterableEquality, QueueList, Object_ListMixin0, UnmodifiableMapMixin, Haikunator_haikunate_closure, Logger, closure, Level, LogRecord, Node1, Element1, Element_textContent_closure, Text, UnparsedContent, BlockParser, BlockSyntax, BlockSyntax_isAtBlockEnd_closure, EmptyBlockSyntax, SetextHeaderSyntax, HeaderSyntax, BlockquoteSyntax, BlockquoteSyntax_parseChildLines_closure, CodeBlockSyntax, FencedCodeBlockSyntax, HorizontalRuleSyntax, BlockHtmlSyntax, BlockTagBlockHtmlSyntax, OtherTagBlockHtmlSyntax, LongBlockHtmlSyntax, ListItem, ListSyntax, ListSyntax_parse_endItem, ListSyntax_parse_tryMatch, UnorderedListSyntax, OrderedListSyntax, ParagraphSyntax, ParagraphSyntax__extractReflinkDefinitions_lineStartsReflinkDefinition, ParagraphSyntax__parseReflinkDefinition_closure, Document, Link, ExtensionSet, HtmlRenderer, HtmlRenderer_visitElementBefore_closure, InlineParser, InlineParser_closure, InlineSyntax, LineBreakSyntax, TextSyntax, EscapeSyntax, InlineHtmlSyntax, AutolinkSyntax, TagSyntax, LinkSyntax, LinkSyntax_getLink__contents, ImageSyntax, CodeSyntax, TagState, TagState_textContent_closure, Context, Context_join_closure, Context_joinAll_closure, Context_split_closure, _validateArgList_closure, InternalStyle, ParsedPath, ParsedPath_normalize_closure, PathException, Style, PosixStyle, UrlStyle, WindowsStyle, Version, Version__splitParts_closure, VersionRange, SourceFile, FileLocation, FileSpan, _FileSpan, SourceLocation, SourceLocationMixin, SourceSpan, SourceSpanException, SourceSpanFormatException, SourceSpanMixin, EagerSpanScanner, _EagerSpanScannerState, StringScannerException, SpanScanner, StringScanner, postEncode_closure, ThrottlingBucket, AnalyticsImpl, AnalyticsImpl__sendPayload_closure, AnalyticsImpl__recordFuture_closure, PersistentProperties, PostHandler, HtmlPostHandler, HtmlPostHandler_sendPost_closure, HtmlPersistentProperties, Analytics, AnalyticsMock, AnalyticsHtml, _createObject_closure, _createSpecificObject_closure, VmService, VmService_dispose_closure, RPCError, ExtensionData, Log, BoundField, BoundVariable, Breakpoint, ClassRef, Class, ClassList, CodeRef, Code, ContextRef, Context0, ContextElement, ErrorRef, Error0, Event1, FieldRef, Field, Flag, FlagList, Frame, FuncRef, Func, InstanceRef, Instance, IsolateRef, Isolate, LibraryRef, Library, LibraryDependency, MapAssociation, Message, NullRef, Null0, ObjRef, Obj, Response, Sentinel, ScriptRef, Script, SourceLocation0, SourceReport, SourceReportCoverage, SourceReportRange, Stack, Success, TimelineEvent, TypeArgumentsRef, TypeArguments, UnresolvedSourceLocation, Version0, VMRef, VM, _DeepEquals, deepHashCode__deepHashCode, deepHashCode__deepHashCode_closure, Event0, DocumentStartEvent, DocumentEndEvent, AliasEvent, _ValueEvent, ScalarEvent, SequenceStartEvent, MappingStartEvent, EventType, Loader, Loader__parseNumberValue_closure, Loader__parseNumberValue_closure0, Loader__parseNumberValue_closure1, Loader__parseNumberValue_closure2, Loader__parseNumberValue_closure3, Parser, Parser__parseNode_parseAnchor, Parser__parseNode_parseTag, _State, Scanner, Scanner__fetchMoreTokens_closure, _SimpleKey, _Chomping, ScalarStyle, CollectionStyle, Token, VersionDirectiveToken, TagDirectiveToken, AnchorToken, AliasToken, TagToken, ScalarToken, TokenType, Pair, closure4, YamlDocument, VersionDirective, TagDirective, YamlException, YamlNode, YamlMap, YamlNode_MapMixin, YamlNode_MapMixin_UnmodifiableMapMixin, YamlMap_keys_closure, YamlList, YamlNode_ListMixin, YamlScalar, main_closure];
  };
  function setupProgram(programData, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var body = "";
      var fieldNames = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], accessors, name);
        fieldNames += "'" + field + "',";
        var parameter = "p_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += name + "." + "$__fields__" + "=[" + fieldNames + "];\n";
      str += accessors.join("");
      return str;
    }
    init.createNewIsolate = function() {
      return new Isolate();
    };
    init.classIdExtractor = function(o) {
      return o.constructor.name;
    };
    init.classFieldsExtractor = function(o) {
      var fieldNames = o.constructor.$__fields__;
      if (!fieldNames)
        return [];
      var result = [];
      result.length = fieldNames.length;
      for (var i = 0; i < fieldNames.length; i++)
        result[i] = o[fieldNames[i]];
      return result;
    };
    init.instanceFromClassId = function(name) {
      return new init.allClasses[name]();
    };
    init.initializeEmptyInstance = function(name, o, fields) {
      init.allClasses[name].apply(o, fields);
      return o;
    };
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      var constructors = init.precompiled(processedClasses.collected);
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (superclass && superclass.indexOf("+") > 0) {
          var s = superclass.split("+");
          superclass = s[0];
          var mixinClass = s[1];
          finishClass(mixinClass);
          var mixin = allClasses[mixinClass];
          var mixinPrototype = mixin.prototype;
          var clsPrototype = allClasses[cls].prototype;
          var properties = Object.keys(mixinPrototype);
          for (var i = 0; i < properties.length; i++) {
            var d = properties[i];
            if (!hasOwnProperty.call(clsPrototype, d))
              clsPrototype[d] = mixinPrototype[d];
          }
        }
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (mixinPrototype)
          prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
      var chain;
      if (targetPrototype.hasOwnProperty("$deferredAction"))
        chain = targetPrototype.$deferredAction;
      return function foo() {
        var prototype = this;
        while (!prototype.hasOwnProperty("$deferredAction"))
          prototype = prototype.__proto__;
        if (chain)
          prototype.$deferredAction = chain;
        else {
          delete prototype.$deferredAction;
          convertToFastObject(prototype);
        }
        mixinPrototype.$deferredAction();
        prototype.$deferredAction();
      };
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"], split, supr, fields = classData;
      var s = fields.split(";");
      fields = s[1] ? s[1].split(",") : [];
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0, alias = array[index], f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      var funcs = [prototype[name] = prototype[alias] = f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic) {
          init.globalFunctions[name] = f;
          functions.push(getterStubName);
        }
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
      }
      var isReflectable = array.length > unmangledNameIndex;
      if (isReflectable) {
        funcs[0].$reflectable = 1;
        funcs[0].$reflectionInfo = array;
        for (var i = 1; i < funcs.length; i++) {
          funcs[i].$reflectable = 2;
          funcs[i].$reflectionInfo = array;
        }
        var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
        var unmangledName = array[unmangledNameIndex];
        var reflectionName = unmangledName;
        if (getterStubName)
          mangledNames[getterStubName] = reflectionName;
        if (isSetter)
          reflectionName += "=";
        else if (!isGetter)
          reflectionName += ":" + (requiredParameterCount + optionalParameterCount);
        mangledNames[name] = reflectionName;
        funcs[0].$reflectionName = reflectionName;
        funcs[0].$metadataIndex = unmangledNameIndex + 1;
        if (optionalParameterCount)
          prototype[unmangledName + "*"] = funcs[0];
      }
    }
    function tearOffGetter(funcs, reflectionInfo, name, isIntercepted) {
      var cache = null;
      return isIntercepted ? function(x) {
        if (cache === null)
          cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
        return new cache(this, funcs[0], x, name);
      } : function() {
        if (cache === null)
          cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
        return new cache(this, funcs[0], null, name);
      };
    }
    function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
      var cache;
      return isStatic ? function() {
        if (cache === void 0)
          cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
        return cache;
      } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    if (!init.globalFunctions)
      init.globalFunctions = map();
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  Isolate.functionThatReturnsNull = function() {
  };
  var dart = [["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code>"
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    getInterceptor: function(object) {
      return void 0;
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(new P.UnimplementedError("Return interceptor for " + H.S(proto(object, record))));
      }
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor == null) {
        if (typeof object == "function")
          return C.JavaScriptFunction_methods;
        proto = Object.getPrototypeOf(object);
        if (proto == null || proto === Object.prototype)
          return C.PlainJavaScriptObject_methods;
        else
          return C.UnknownJavaScriptObject_methods;
      }
      return interceptor;
    },
    Interceptor: {
      "^": "Object;",
      $eq: function(receiver, other) {
        return receiver === other;
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      toString$0: ["super$Interceptor$toString", function(receiver) {
        return H.Primitives_objectToHumanReadableString(receiver);
      }],
      noSuchMethod$1: ["super$Interceptor$noSuchMethod", function(receiver, invocation) {
        throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }, null, "get$noSuchMethod", 2, 0, null, 48],
      get$runtimeType: function(receiver) {
        return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
      },
      "%": "ANGLEInstancedArrays|ANGLE_instanced_arrays|AnimationEffectReadOnly|AnimationEffectTiming|AnimationTimeline|AppBannerPromptResult|AudioListener|BarProp|Bluetooth|BluetoothGATTCharacteristic|BluetoothGATTRemoteServer|BluetoothGATTService|BluetoothUUID|CHROMIUMSubscribeUniform|CHROMIUMValuebuffer|CSS|Cache|CacheStorage|CanvasGradient|CanvasPattern|Clients|CompositorProxy|ConsoleBase|Coordinates|CredentialsContainer|DOMFileSystemSync|DOMImplementation|DOMMatrix|DOMMatrixReadOnly|DOMParser|DOMStringMap|DeprecatedStorageInfo|DeprecatedStorageQuota|DeviceRotationRate|DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|EXTBlendMinMax|EXTFragDepth|EXTShaderTextureLOD|EXTTextureFilterAnisotropic|EXT_blend_minmax|EXT_frag_depth|EXT_sRGB|EXT_shader_texture_lod|EXT_texture_filter_anisotropic|EXTsRGB|EffectModel|EntrySync|FileEntrySync|FileReaderSync|FileWriterSync|FormData|Geofencing|Geolocation|HMDVRDevice|HTMLAllCollection|Headers|IDBFactory|ImageBitmap|InjectedScriptHost|InputDevice|KeyframeEffect|MIDIInputMap|MIDIOutputMap|MediaDevices|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeys|MediaSession|MemoryInfo|MessageChannel|Metadata|MutationObserver|NavigatorStorageUtils|NodeFilter|NonDocumentTypeChildNode|NonElementParentNode|OESElementIndexUint|OESStandardDerivatives|OESTextureFloat|OESTextureFloatLinear|OESTextureHalfFloat|OESTextureHalfFloatLinear|OESVertexArrayObject|OES_element_index_uint|OES_standard_derivatives|OES_texture_float|OES_texture_float_linear|OES_texture_half_float|OES_texture_half_float_linear|OES_vertex_array_object|PagePopupController|PerformanceTiming|PeriodicSyncManager|PeriodicSyncRegistration|PeriodicWave|Permissions|PositionSensorVRDevice|PushManager|PushSubscription|RTCIceCandidate|SQLResultSet|SQLTransaction|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPreserveAspectRatio|SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGMatrix|SVGPreserveAspectRatio|SVGUnitTypes|Screen|ScrollState|SharedArrayBuffer|SpeechRecognitionAlternative|StorageInfo|StorageQuota|SubtleCrypto|SyncManager|SyncRegistration|TextMetrics|VRDevice|VREyeParameters|VRFieldOfView|VRPositionState|ValidityState|VideoPlaybackQuality|WEBGL_compressed_texture_atc|WEBGL_compressed_texture_etc1|WEBGL_compressed_texture_pvrtc|WEBGL_compressed_texture_s3tc|WEBGL_debug_renderer_info|WEBGL_debug_shaders|WEBGL_depth_texture|WEBGL_draw_buffers|WEBGL_lose_context|WebGLBuffer|WebGLCompressedTextureATC|WebGLCompressedTextureETC1|WebGLCompressedTexturePVRTC|WebGLCompressedTextureS3TC|WebGLDebugRendererInfo|WebGLDebugShaders|WebGLDepthTexture|WebGLDrawBuffers|WebGLExtensionLoseContext|WebGLFramebuffer|WebGLLoseContext|WebGLProgram|WebGLQuery|WebGLRenderbuffer|WebGLSampler|WebGLShader|WebGLShaderPrecisionFormat|WebGLSync|WebGLTexture|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES|WebKitCSSMatrix|WebKitMutationObserver|WorkerConsole|XMLSerializer|XPathEvaluator|XPathExpression|XPathNSResolver|XPathResult|mozRTCIceCandidate"
    },
    JSBool: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      get$hashCode: function(receiver) {
        return receiver ? 519018 : 218159;
      },
      get$runtimeType: function(receiver) {
        return C.Type_bool_lhE;
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;",
      $eq: function(receiver, other) {
        return null == other;
      },
      toString$0: function(receiver) {
        return "null";
      },
      get$hashCode: function(receiver) {
        return 0;
      },
      get$runtimeType: function(receiver) {
        return C.Type_Null_Yyn;
      },
      noSuchMethod$1: [function(receiver, invocation) {
        return this.super$Interceptor$noSuchMethod(receiver, invocation);
      }, null, "get$noSuchMethod", 2, 0, null, 48]
    },
    JavaScriptObject: {
      "^": "Interceptor;",
      get$hashCode: function(receiver) {
        return 0;
      },
      get$runtimeType: function(receiver) {
        return C.Type_JSObject_8k0;
      },
      toString$0: ["super$JavaScriptObject$toString", function(receiver) {
        return String(receiver);
      }],
      $isJSObject: 1
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    JavaScriptFunction: {
      "^": "JavaScriptObject;",
      toString$0: function(receiver) {
        var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
        return dartClosure == null ? this.super$JavaScriptObject$toString(receiver) : J.toString$0$(dartClosure);
      },
      $isFunction: 1,
      $signature: function() {
        return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
      }
    },
    JSArray: {
      "^": "Interceptor;$ti",
      checkMutable$1: function(receiver, reason) {
        if (!!receiver.immutable$list)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      checkGrowable$1: function(receiver, reason) {
        if (!!receiver.fixed$length)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      add$1: function(receiver, value) {
        this.checkGrowable$1(receiver, "add");
        receiver.push(value);
      },
      removeAt$1: function(receiver, index) {
        this.checkGrowable$1(receiver, "removeAt");
        if (index < 0 || index >= receiver.length)
          throw H.wrapException(P.RangeError$value(index, null, null));
        return receiver.splice(index, 1)[0];
      },
      insert$2: function(receiver, index, value) {
        this.checkGrowable$1(receiver, "insert");
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.argumentErrorValue(index));
        if (index < 0 || index > receiver.length)
          throw H.wrapException(P.RangeError$value(index, null, null));
        receiver.splice(index, 0, value);
      },
      insertAll$2: function(receiver, index, iterable) {
        var insertionLength, end;
        this.checkGrowable$1(receiver, "insertAll");
        P.RangeError_checkValueInInterval(index, 0, receiver.length, "index", null);
        if (!J.getInterceptor(iterable).$isEfficientLength) {
          iterable.toString;
          iterable = H.setRuntimeTypeInfo(iterable.slice(), [H.getTypeArgumentByIndex(iterable, 0)]);
        }
        insertionLength = iterable.length;
        this.set$length(receiver, receiver.length + insertionLength);
        end = index + insertionLength;
        this.setRange$4(receiver, end, receiver.length, receiver, index);
        this.setRange$3(receiver, index, end, iterable);
      },
      removeLast$0: function(receiver) {
        this.checkGrowable$1(receiver, "removeLast");
        if (receiver.length === 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, -1));
        return receiver.pop();
      },
      remove$1: function(receiver, element) {
        var i;
        this.checkGrowable$1(receiver, "remove");
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], element)) {
            receiver.splice(i, 1);
            return true;
          }
        return false;
      },
      _removeWhere$2: function(receiver, test, removeMatching) {
        var retained, end, i, element, t1;
        retained = [];
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          element = receiver[i];
          if (test.call$1(element) !== true)
            retained.push(element);
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        t1 = retained.length;
        if (t1 === end)
          return;
        this.set$length(receiver, t1);
        for (i = 0; i < retained.length; ++i)
          this.$indexSet(receiver, i, retained[i]);
      },
      where$1: function(receiver, f) {
        return new H.WhereIterable(receiver, f, [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      addAll$1: function(receiver, collection) {
        var t1;
        this.checkGrowable$1(receiver, "addAll");
        for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
          receiver.push(t1.get$current());
      },
      clear$0: function(receiver) {
        this.set$length(receiver, 0);
      },
      forEach$1: function(receiver, f) {
        var end, i;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          f.call$1(receiver[i]);
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      map$1: function(receiver, f) {
        return new H.MappedListIterable(receiver, f, [null, null]);
      },
      join$1: function(receiver, separator) {
        var t1, list, i, t2;
        t1 = receiver.length;
        list = new Array(t1);
        list.fixed$length = Array;
        for (i = 0; i < receiver.length; ++i) {
          t2 = H.S(receiver[i]);
          if (i >= t1)
            return H.ioore(list, i);
          list[i] = t2;
        }
        return list.join(separator);
      },
      skip$1: function(receiver, n) {
        return H.SubListIterable$(receiver, n, null, H.getTypeArgumentByIndex(receiver, 0));
      },
      reduce$1: function(receiver, combine) {
        var $length, value, i;
        $length = receiver.length;
        if ($length === 0)
          throw H.wrapException(H.IterableElementError_noElement());
        if (0 >= $length)
          return H.ioore(receiver, 0);
        value = receiver[0];
        for (i = 1; i < $length; ++i) {
          value = combine.call$2(value, receiver[i]);
          if ($length !== receiver.length)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return value;
      },
      fold$2: function(receiver, initialValue, combine) {
        var $length, value, i;
        $length = receiver.length;
        for (value = initialValue, i = 0; i < $length; ++i) {
          value = combine.call$2(value, receiver[i]);
          if (receiver.length !== $length)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return value;
      },
      firstWhere$2$orElse: function(receiver, test, orElse) {
        var end, i, element;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          element = receiver[i];
          if (test.call$1(element) === true)
            return element;
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        if (orElse != null)
          return orElse.call$0();
        throw H.wrapException(H.IterableElementError_noElement());
      },
      firstWhere$1: function($receiver, test) {
        return this.firstWhere$2$orElse($receiver, test, null);
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        if (typeof start !== "number" || Math.floor(start) !== start)
          throw H.wrapException(H.argumentErrorValue(start));
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
        if (end == null)
          end = receiver.length;
        else {
          if (typeof end !== "number" || Math.floor(end) !== end)
            throw H.wrapException(H.argumentErrorValue(end));
          if (end < start || end > receiver.length)
            throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
        }
        if (start === end)
          return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
        return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      get$last: function(receiver) {
        var t1 = receiver.length;
        if (t1 > 0)
          return receiver[t1 - 1];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      removeRange$2: function(receiver, start, end) {
        this.checkGrowable$1(receiver, "removeRange");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        if (typeof start !== "number")
          return H.iae(start);
        receiver.splice(start, end - start);
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        var $length, t1, t2, t3, i, t4, element;
        this.checkMutable$1(receiver, "set range");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        $length = J.$sub$n(end, start);
        t1 = J.getInterceptor($length);
        if (t1.$eq($length, 0))
          return;
        t2 = J.getInterceptor$n(skipCount);
        if (t2.$lt(skipCount, 0))
          H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
        t3 = J.getInterceptor$asx(iterable);
        if (J.$gt$n(t2.$add(skipCount, $length), t3.get$length(iterable)))
          throw H.wrapException(H.IterableElementError_tooFew());
        if (t2.$lt(skipCount, start))
          for (i = t1.$sub($length, 1), t1 = J.getInterceptor$ns(start); t4 = J.getInterceptor$n(i), t4.$ge(i, 0); i = t4.$sub(i, 1)) {
            element = t3.$index(iterable, t2.$add(skipCount, i));
            receiver[t1.$add(start, i)] = element;
          }
        else {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = J.getInterceptor$ns(start);
          i = 0;
          for (; i < $length; ++i) {
            element = t3.$index(iterable, t2.$add(skipCount, i));
            receiver[t1.$add(start, i)] = element;
          }
        }
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      fillRange$3: function(receiver, start, end, fillValue) {
        var i, t1;
        this.checkMutable$1(receiver, "fill range");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        for (i = start; t1 = J.getInterceptor$n(i), t1.$lt(i, end); i = t1.$add(i, 1))
          receiver[i] = fillValue;
      },
      replaceRange$3: function(receiver, start, end, replacement) {
        var removeLength, insertLength, t1, t2, delta, insertEnd, newLength;
        this.checkGrowable$1(receiver, "replace range");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        replacement = C.JSString_methods.toList$0(replacement);
        removeLength = J.$sub$n(end, start);
        insertLength = replacement.length;
        t1 = J.getInterceptor$n(removeLength);
        t2 = J.getInterceptor$ns(start);
        if (t1.$ge(removeLength, insertLength)) {
          delta = t1.$sub(removeLength, insertLength);
          insertEnd = t2.$add(start, insertLength);
          t1 = receiver.length;
          if (typeof delta !== "number")
            return H.iae(delta);
          newLength = t1 - delta;
          this.setRange$3(receiver, start, insertEnd, replacement);
          if (delta !== 0) {
            this.setRange$4(receiver, insertEnd, newLength, receiver, end);
            this.set$length(receiver, newLength);
          }
        } else {
          if (typeof removeLength !== "number")
            return H.iae(removeLength);
          newLength = receiver.length + (insertLength - removeLength);
          insertEnd = t2.$add(start, insertLength);
          this.set$length(receiver, newLength);
          this.setRange$4(receiver, insertEnd, newLength, receiver, end);
          this.setRange$3(receiver, start, insertEnd, replacement);
        }
      },
      any$1: function(receiver, test) {
        var end, i;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          if (test.call$1(receiver[i]) === true)
            return true;
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return false;
      },
      sort$1: function(receiver, compare) {
        var t1;
        this.checkMutable$1(receiver, "sort");
        t1 = compare == null ? P.core_Comparable_compare$closure() : compare;
        H.Sort__doSort(receiver, 0, receiver.length - 1, t1);
      },
      sort$0: function($receiver) {
        return this.sort$1($receiver, null);
      },
      indexOf$2: function(receiver, element, start) {
        var t1, i;
        t1 = J.getInterceptor$n(start);
        if (t1.$ge(start, receiver.length))
          return -1;
        if (t1.$lt(start, 0))
          start = 0;
        for (i = start; J.$lt$n(i, receiver.length); ++i) {
          if (i >>> 0 !== i || i >= receiver.length)
            return H.ioore(receiver, i);
          if (J.$eq$(receiver[i], element))
            return i;
        }
        return -1;
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      lastIndexOf$2: function(receiver, element, startIndex) {
        var i;
        if (startIndex == null)
          startIndex = receiver.length - 1;
        else {
          if (C.JSString_methods.$lt(startIndex, 0))
            return -1;
          if (C.JSString_methods.$ge(startIndex, receiver.length))
            startIndex = receiver.length - 1;
        }
        for (i = startIndex; J.$ge$n(i, 0); --i) {
          if (i >>> 0 !== i || i >= receiver.length)
            return H.ioore(receiver, i);
          if (J.$eq$(receiver[i], element))
            return i;
        }
        return -1;
      },
      lastIndexOf$1: function($receiver, element) {
        return this.lastIndexOf$2($receiver, element, null);
      },
      contains$1: function(receiver, other) {
        var i;
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], other))
            return true;
        return false;
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.length !== 0;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      toList$1$growable: function(receiver, growable) {
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$iterator: function(receiver) {
        return new J.ArrayIterator(receiver, receiver.length, 0, null, [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      set$length: function(receiver, newLength) {
        this.checkGrowable$1(receiver, "set length");
        if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
          throw H.wrapException(P.ArgumentError$value(newLength, "newLength", null));
        if (newLength < 0)
          throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
        receiver.length = newLength;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        if (!!receiver.immutable$list)
          H.throwExpression(new P.UnsupportedError("indexed set"));
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null,
      static: {
        JSArray_JSArray$fixed: function($length, $E) {
          var t1;
          if (typeof $length !== "number" || Math.floor($length) !== $length)
            throw H.wrapException(P.ArgumentError$value($length, "length", "is not an integer"));
          if ($length < 0 || $length > 4294967295)
            throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
          t1 = H.setRuntimeTypeInfo(new Array($length), [$E]);
          t1.fixed$length = Array;
          return t1;
        },
        JSArray_markUnmodifiableList: function(list) {
          list.fixed$length = Array;
          list.immutable$list = Array;
          return list;
        }
      }
    },
    JSUnmodifiableArray: {
      "^": "JSArray;$ti"
    },
    ArrayIterator: {
      "^": "Object;__interceptors$_iterable,__interceptors$_length,__interceptors$_index,__interceptors$_current,$ti",
      get$current: function() {
        return this.__interceptors$_current;
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this.__interceptors$_iterable;
        $length = t1.length;
        if (this.__interceptors$_length !== $length)
          throw H.wrapException(H.throwConcurrentModificationError(t1));
        t2 = this.__interceptors$_index;
        if (t2 >= $length) {
          this.__interceptors$_current = null;
          return false;
        }
        this.__interceptors$_current = t1[t2];
        this.__interceptors$_index = t2 + 1;
        return true;
      }
    },
    JSNumber: {
      "^": "Interceptor;",
      compareTo$1: function(receiver, b) {
        var bIsNegative;
        if (typeof b !== "number")
          throw H.wrapException(H.argumentErrorValue(b));
        if (receiver < b)
          return -1;
        else if (receiver > b)
          return 1;
        else if (receiver === b) {
          if (receiver === 0) {
            bIsNegative = this.get$isNegative(b);
            if (this.get$isNegative(receiver) === bIsNegative)
              return 0;
            if (this.get$isNegative(receiver))
              return -1;
            return 1;
          }
          return 0;
        } else if (isNaN(receiver)) {
          if (isNaN(b))
            return 0;
          return 1;
        } else
          return -1;
      },
      get$isNegative: function(receiver) {
        return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
      },
      remainder$1: function(receiver, b) {
        return receiver % b;
      },
      toInt$0: function(receiver) {
        var t1;
        if (receiver >= -2147483648 && receiver <= 2147483647)
          return receiver | 0;
        if (isFinite(receiver)) {
          t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
          return t1 + 0;
        }
        throw H.wrapException(new P.UnsupportedError("" + receiver + ".toInt()"));
      },
      floor$0: function(receiver) {
        var truncated, d;
        if (receiver >= 0) {
          if (receiver <= 2147483647)
            return receiver | 0;
        } else if (receiver >= -2147483648) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated - 1;
        }
        d = Math.floor(receiver);
        if (isFinite(d))
          return d;
        throw H.wrapException(new P.UnsupportedError("" + receiver + ".floor()"));
      },
      round$0: function(receiver) {
        if (receiver > 0) {
          if (receiver !== 1 / 0)
            return Math.round(receiver);
        } else if (receiver > -1 / 0)
          return 0 - Math.round(0 - receiver);
        throw H.wrapException(new P.UnsupportedError("" + receiver + ".round()"));
      },
      toRadixString$1: function(receiver, radix) {
        var result, match, t1, exponent;
        if (radix < 2 || radix > 36)
          throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
        result = receiver.toString(radix);
        if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
          return result;
        match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
        if (match == null)
          H.throwExpression(new P.UnsupportedError("Unexpected toString result: " + result));
        t1 = J.getInterceptor$asx(match);
        result = t1.$index(match, 1);
        exponent = +t1.$index(match, 3);
        if (t1.$index(match, 2) != null) {
          result += t1.$index(match, 2);
          exponent -= t1.$index(match, 2).length;
        }
        return result + C.JSString_methods.$mul("0", exponent);
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      get$hashCode: function(receiver) {
        return receiver & 0x1FFFFFFF;
      },
      $negate: function(receiver) {
        return -receiver;
      },
      $add: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver + other;
      },
      $sub: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver - other;
      },
      $mul: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver * other;
      },
      $tdiv: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        if ((receiver | 0) === receiver)
          if (other >= 1 || false)
            return receiver / other | 0;
        return this._tdivSlow$1(receiver, other);
      },
      _tdivFast$1: function(receiver, other) {
        return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
      },
      _tdivSlow$1: function(receiver, other) {
        var quotient = receiver / other;
        if (quotient >= -2147483648 && quotient <= 2147483647)
          return quotient | 0;
        if (quotient > 0) {
          if (quotient !== 1 / 0)
            return Math.floor(quotient);
        } else if (quotient > -1 / 0)
          return Math.ceil(quotient);
        throw H.wrapException(new P.UnsupportedError("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
      },
      $shl: function(receiver, other) {
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        return other > 31 ? 0 : receiver << other >>> 0;
      },
      _shlPositive$1: function(receiver, other) {
        return other > 31 ? 0 : receiver << other >>> 0;
      },
      $shr: function(receiver, other) {
        var t1;
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        if (receiver > 0)
          t1 = other > 31 ? 0 : receiver >>> other;
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrOtherPositive$1: function(receiver, other) {
        var t1;
        if (receiver > 0)
          t1 = other > 31 ? 0 : receiver >>> other;
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrReceiverPositive$1: function(receiver, other) {
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        return other > 31 ? 0 : receiver >>> other;
      },
      $and: function(receiver, other) {
        return (receiver & other) >>> 0;
      },
      $xor: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return (receiver ^ other) >>> 0;
      },
      $lt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver < other;
      },
      $gt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver > other;
      },
      $le: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver <= other;
      },
      $ge: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver >= other;
      },
      get$runtimeType: function(receiver) {
        return C.Type_num_cv7;
      },
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;",
      get$runtimeType: function(receiver) {
        return C.Type_int_tHn;
      },
      $is$double: 1,
      $isnum: 1,
      $is$int: 1
    },
    JSDouble: {
      "^": "JSNumber;",
      get$runtimeType: function(receiver) {
        return C.Type_double_K1J;
      },
      $is$double: 1,
      $isnum: 1
    },
    JSString: {
      "^": "Interceptor;",
      codeUnitAt$1: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      allMatches$2: function(receiver, string, start) {
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return new H._StringAllMatchesIterable(string, receiver, start);
      },
      allMatches$1: function($receiver, string) {
        return this.allMatches$2($receiver, string, 0);
      },
      matchAsPrefix$2: function(receiver, string, start) {
        var t1, t2, t3, i;
        t1 = J.getInterceptor$n(start);
        if (t1.$lt(start, 0) || t1.$gt(start, J.get$length$asx(string)))
          throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(string), null, null));
        t2 = receiver.length;
        t3 = J.getInterceptor$asx(string);
        if (J.$gt$n(t1.$add(start, t2), t3.get$length(string)))
          return;
        for (i = 0; i < t2; ++i)
          if (t3.codeUnitAt$1(string, t1.$add(start, i)) !== this.codeUnitAt$1(receiver, i))
            return;
        return new H.StringMatch(start, string, receiver);
      },
      $add: function(receiver, other) {
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$value(other, null, null));
        return receiver + other;
      },
      endsWith$1: function(receiver, other) {
        var t1, otherLength, t2;
        H.checkString(other);
        t1 = J.getInterceptor$asx(other);
        otherLength = t1.get$length(other);
        t2 = receiver.length;
        if (J.$gt$n(otherLength, t2))
          return false;
        if (typeof otherLength !== "number")
          return H.iae(otherLength);
        return t1.$eq(other, this.substring$1(receiver, t2 - otherLength));
      },
      replaceAll$2: function(receiver, from, to) {
        return H.stringReplaceAllUnchecked(receiver, from, to);
      },
      replaceFirst$3: function(receiver, from, to, startIndex) {
        P.RangeError_checkValueInInterval(startIndex, 0, receiver.length, "startIndex", null);
        return H.stringReplaceFirstUnchecked(receiver, from, to, startIndex);
      },
      replaceFirst$2: function($receiver, from, to) {
        return this.replaceFirst$3($receiver, from, to, 0);
      },
      split$1: function(receiver, pattern) {
        return receiver.split(pattern);
      },
      replaceRange$3: function(receiver, start, end, replacement) {
        H.checkInt(start);
        end = P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        H.checkInt(end);
        return H.stringReplaceRangeUnchecked(receiver, start, end, replacement);
      },
      startsWith$2: function(receiver, pattern, index) {
        var t1, endIndex;
        H.checkInt(index);
        t1 = J.getInterceptor$n(index);
        if (t1.$lt(index, 0) || t1.$gt(index, receiver.length))
          throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
        if (typeof pattern === "string") {
          endIndex = t1.$add(index, pattern.length);
          if (J.$gt$n(endIndex, receiver.length))
            return false;
          return pattern === receiver.substring(index, endIndex);
        }
        return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
      },
      startsWith$1: function($receiver, pattern) {
        return this.startsWith$2($receiver, pattern, 0);
      },
      substring$2: function(receiver, startIndex, endIndex) {
        var t1;
        if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
          H.throwExpression(H.argumentErrorValue(startIndex));
        if (endIndex == null)
          endIndex = receiver.length;
        if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
          H.throwExpression(H.argumentErrorValue(endIndex));
        t1 = J.getInterceptor$n(startIndex);
        if (t1.$lt(startIndex, 0))
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (t1.$gt(startIndex, endIndex))
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (J.$gt$n(endIndex, receiver.length))
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      toLowerCase$0: function(receiver) {
        return receiver.toLowerCase();
      },
      toUpperCase$0: function(receiver) {
        return receiver.toUpperCase();
      },
      trim$0: function(receiver) {
        var result, endIndex, startIndex, t1, endIndex0;
        result = receiver.trim();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        if (this.codeUnitAt$1(result, 0) === 133) {
          startIndex = J.JSString__skipLeadingWhitespace(result, 1);
          if (startIndex === endIndex)
            return "";
        } else
          startIndex = 0;
        t1 = endIndex - 1;
        endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
        if (startIndex === 0 && endIndex0 === endIndex)
          return result;
        return result.substring(startIndex, endIndex0);
      },
      trimLeft$0: function(receiver) {
        var result, startIndex;
        if (typeof receiver.trimLeft != "undefined") {
          result = receiver.trimLeft();
          if (result.length === 0)
            return result;
          startIndex = this.codeUnitAt$1(result, 0) === 133 ? J.JSString__skipLeadingWhitespace(result, 1) : 0;
        } else {
          startIndex = J.JSString__skipLeadingWhitespace(receiver, 0);
          result = receiver;
        }
        if (startIndex === 0)
          return result;
        if (startIndex === result.length)
          return "";
        return result.substring(startIndex);
      },
      trimRight$0: function(receiver) {
        var result, endIndex, t1;
        if (typeof receiver.trimRight != "undefined") {
          result = receiver.trimRight();
          endIndex = result.length;
          if (endIndex === 0)
            return result;
          t1 = endIndex - 1;
          if (this.codeUnitAt$1(result, t1) === 133)
            endIndex = J.JSString__skipTrailingWhitespace(result, t1);
        } else {
          endIndex = J.JSString__skipTrailingWhitespace(receiver, receiver.length);
          result = receiver;
        }
        if (endIndex === result.length)
          return result;
        if (endIndex === 0)
          return "";
        return result.substring(0, endIndex);
      },
      $mul: function(receiver, times) {
        var s, result;
        if (typeof times !== "number")
          return H.iae(times);
        if (0 >= times)
          return "";
        if (times === 1 || receiver.length === 0)
          return receiver;
        if (times !== times >>> 0)
          throw H.wrapException(C.C_OutOfMemoryError);
        for (s = receiver, result = ""; true;) {
          if ((times & 1) === 1)
            result = s + result;
          times = times >>> 1;
          if (times === 0)
            break;
          s += s;
        }
        return result;
      },
      padLeft$2: function(receiver, width, padding) {
        var delta = width - receiver.length;
        if (delta <= 0)
          return receiver;
        return this.$mul(padding, delta) + receiver;
      },
      get$codeUnits: function(receiver) {
        return new H.CodeUnits(receiver);
      },
      get$runes: function(receiver) {
        return new P.Runes(receiver);
      },
      indexOf$2: function(receiver, pattern, start) {
        if (typeof start !== "number" || Math.floor(start) !== start)
          throw H.wrapException(H.argumentErrorValue(start));
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        return receiver.indexOf(pattern, start);
      },
      indexOf$1: function($receiver, pattern) {
        return this.indexOf$2($receiver, pattern, 0);
      },
      lastIndexOf$2: function(receiver, pattern, start) {
        var t1, t2, i;
        if (pattern == null)
          H.throwExpression(H.argumentErrorValue(pattern));
        if (start == null)
          start = receiver.length;
        else if (typeof start !== "number" || Math.floor(start) !== start)
          throw H.wrapException(H.argumentErrorValue(start));
        else if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        if (typeof pattern === "string") {
          t1 = pattern.length;
          t2 = receiver.length;
          if (J.$add$ns(start, t1) > t2)
            start = t2 - t1;
          return receiver.lastIndexOf(pattern, start);
        }
        for (t1 = J.getInterceptor$s(pattern), i = start; t2 = J.getInterceptor$n(i), t2.$ge(i, 0); i = t2.$sub(i, 1))
          if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
            return i;
        return -1;
      },
      lastIndexOf$1: function($receiver, pattern) {
        return this.lastIndexOf$2($receiver, pattern, null);
      },
      contains$2: function(receiver, other, startIndex) {
        if (other == null)
          H.throwExpression(H.argumentErrorValue(other));
        if (startIndex > receiver.length)
          throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
        return H.stringContainsUnchecked(receiver, other, startIndex);
      },
      contains$1: function($receiver, other) {
        return this.contains$2($receiver, other, 0);
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.length !== 0;
      },
      compareTo$1: function(receiver, other) {
        var t1;
        if (typeof other !== "string")
          throw H.wrapException(H.argumentErrorValue(other));
        if (receiver === other)
          t1 = 0;
        else
          t1 = receiver < other ? -1 : 1;
        return t1;
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$hashCode: function(receiver) {
        var t1, hash, i;
        for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
          hash = 536870911 & hash + receiver.charCodeAt(i);
          hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
          hash ^= hash >> 6;
        }
        hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
        hash ^= hash >> 11;
        return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
      },
      get$runtimeType: function(receiver) {
        return C.Type_String_k8F;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $isString: 1,
      static: {
        JSString__isWhitespace: function(codeUnit) {
          if (codeUnit < 256)
            switch (codeUnit) {
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 32:
              case 133:
              case 160:
                return true;
              default:
                return false;
            }
          switch (codeUnit) {
            case 5760:
            case 6158:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8232:
            case 8233:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        },
        JSString__skipLeadingWhitespace: function(string, index) {
          var t1, codeUnit;
          for (t1 = string.length; index < t1;) {
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
            ++index;
          }
          return index;
        },
        JSString__skipTrailingWhitespace: function(string, index) {
          var index0, codeUnit;
          for (; index > 0; index = index0) {
            index0 = index - 1;
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
          }
          return index;
        }
      }
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    Sort__doSort: function(a, left, right, compare) {
      if (J.$le$n(J.$sub$n(right, left), 32))
        H.Sort__insertionSort(a, left, right, compare);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare);
    },
    Sort__insertionSort: function(a, left, right, compare) {
      var i, t1, t2, el, j, t3;
      for (i = J.$add$ns(left, 1), t1 = J.getInterceptor$asx(a); t2 = J.getInterceptor$n(i), t2.$le(i, right); i = t2.$add(i, 1)) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          t3 = J.getInterceptor$n(j);
          if (!(t3.$gt(j, left) && J.$gt$n(compare.call$2(t1.$index(a, t3.$sub(j, 1)), el), 0)))
            break;
          t1.$indexSet(a, j, t1.$index(a, t3.$sub(j, 1)));
          j = t3.$sub(j, 1);
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare) {
      var t1, sixth, t2, index1, index5, index3, t3, index2, index4, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t4, less0, great0, pivots_are_equal;
      t1 = J.getInterceptor$n(right);
      sixth = J.$tdiv$n(J.$add$ns(t1.$sub(right, left), 1), 6);
      t2 = J.getInterceptor$ns(left);
      index1 = t2.$add(left, sixth);
      index5 = t1.$sub(right, sixth);
      index3 = J.$tdiv$n(t2.$add(left, right), 2);
      t3 = J.getInterceptor$n(index3);
      index2 = t3.$sub(index3, sixth);
      index4 = t3.$add(index3, sixth);
      t3 = J.getInterceptor$asx(a);
      el1 = t3.$index(a, index1);
      el2 = t3.$index(a, index2);
      el3 = t3.$index(a, index3);
      el4 = t3.$index(a, index4);
      el5 = t3.$index(a, index5);
      if (J.$gt$n(compare.call$2(el1, el2), 0)) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el4), 0)) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el3, el4), 0)) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t3.$indexSet(a, index1, el1);
      t3.$indexSet(a, index3, el3);
      t3.$indexSet(a, index5, el5);
      t3.$indexSet(a, index2, t3.$index(a, left));
      t3.$indexSet(a, index4, t3.$index(a, right));
      less = t2.$add(left, 1);
      great = t1.$sub(right, 1);
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
          ak = t3.$index(a, k);
          comp = compare.call$2(ak, el2);
          t2 = J.getInterceptor(comp);
          if (t2.$eq(comp, 0))
            continue;
          if (t2.$lt(comp, 0)) {
            if (!t1.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = J.$add$ns(less, 1);
          } else
            for (; true;) {
              comp = compare.call$2(t3.$index(a, great), el2);
              t2 = J.getInterceptor$n(comp);
              if (t2.$gt(comp, 0)) {
                great = J.$sub$n(great, 1);
                continue;
              } else {
                t4 = J.getInterceptor$n(great);
                if (t2.$lt(comp, 0)) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = J.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t4.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t4.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
          ak = t3.$index(a, k);
          if (J.$lt$n(compare.call$2(ak, el2), 0)) {
            if (!t1.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = J.$add$ns(less, 1);
          } else if (J.$gt$n(compare.call$2(ak, el4), 0))
            for (; true;)
              if (J.$gt$n(compare.call$2(t3.$index(a, great), el4), 0)) {
                great = J.$sub$n(great, 1);
                if (J.$lt$n(great, k))
                  break;
                continue;
              } else {
                t2 = J.getInterceptor$n(great);
                if (J.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = J.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
        pivots_are_equal = false;
      }
      t1 = J.getInterceptor$n(less);
      t3.$indexSet(a, left, t3.$index(a, t1.$sub(less, 1)));
      t3.$indexSet(a, t1.$sub(less, 1), el2);
      t2 = J.getInterceptor$ns(great);
      t3.$indexSet(a, right, t3.$index(a, t2.$add(great, 1)));
      t3.$indexSet(a, t2.$add(great, 1), el4);
      H.Sort__doSort(a, left, t1.$sub(less, 2), compare);
      H.Sort__doSort(a, t2.$add(great, 2), right, compare);
      if (pivots_are_equal)
        return;
      if (t1.$lt(less, index1) && t2.$gt(great, index5)) {
        for (; J.$eq$(compare.call$2(t3.$index(a, less), el2), 0);)
          less = J.$add$ns(less, 1);
        for (; J.$eq$(compare.call$2(t3.$index(a, great), el4), 0);)
          great = J.$sub$n(great, 1);
        for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
          ak = t3.$index(a, k);
          if (J.$eq$(compare.call$2(ak, el2), 0)) {
            if (!t1.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = J.$add$ns(less, 1);
          } else if (J.$eq$(compare.call$2(ak, el4), 0))
            for (; true;)
              if (J.$eq$(compare.call$2(t3.$index(a, great), el4), 0)) {
                great = J.$sub$n(great, 1);
                if (J.$lt$n(great, k))
                  break;
                continue;
              } else {
                t2 = J.getInterceptor$n(great);
                if (J.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = J.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare);
      } else
        H.Sort__doSort(a, less, great, compare);
    },
    CodeUnits: {
      "^": "UnmodifiableListBase;__internal$_string",
      get$length: function(_) {
        return this.__internal$_string.length;
      },
      $index: function(_, i) {
        return C.JSString_methods.codeUnitAt$1(this.__internal$_string, i);
      },
      $asUnmodifiableListBase: function() {
        return [P.$int];
      },
      $asListBase: function() {
        return [P.$int];
      },
      $asObject_ListMixin: function() {
        return [P.$int];
      },
      $asList: function() {
        return [P.$int];
      },
      $asIterable: function() {
        return [P.$int];
      }
    },
    ListIterable: {
      "^": "Iterable;$ti",
      get$iterator: function(_) {
        return new H.ListIterator(this, this.get$length(this), 0, null, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      },
      forEach$1: function(_, action) {
        var $length, i;
        $length = this.get$length(this);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          action.call$1(this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      get$isEmpty: function(_) {
        return J.$eq$(this.get$length(this), 0);
      },
      get$first: function(_) {
        if (J.$eq$(this.get$length(this), 0))
          throw H.wrapException(H.IterableElementError_noElement());
        return this.elementAt$1(0, 0);
      },
      contains$1: function(_, element) {
        var $length, i;
        $length = this.get$length(this);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          if (J.$eq$(this.elementAt$1(0, i), element))
            return true;
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return false;
      },
      any$1: function(_, test) {
        var $length, i;
        $length = this.get$length(this);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          if (test.call$1(this.elementAt$1(0, i)) === true)
            return true;
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return false;
      },
      join$1: function(_, separator) {
        var $length, t1, first, i;
        $length = this.get$length(this);
        if (separator.length !== 0) {
          t1 = J.getInterceptor($length);
          if (t1.$eq($length, 0))
            return "";
          first = H.S(this.elementAt$1(0, 0));
          if (!t1.$eq($length, this.get$length(this)))
            throw H.wrapException(new P.ConcurrentModificationError(this));
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = first;
          i = 1;
          for (; i < $length; ++i) {
            t1 = t1 + separator + H.S(this.elementAt$1(0, i));
            if ($length !== this.get$length(this))
              throw H.wrapException(new P.ConcurrentModificationError(this));
          }
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        } else {
          if (typeof $length !== "number")
            return H.iae($length);
          i = 0;
          t1 = "";
          for (; i < $length; ++i) {
            t1 += H.S(this.elementAt$1(0, i));
            if ($length !== this.get$length(this))
              throw H.wrapException(new P.ConcurrentModificationError(this));
          }
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      },
      where$1: function(_, test) {
        return this.super$Iterable$where(0, test);
      },
      map$1: function(_, f) {
        return new H.MappedListIterable(this, f, [H.getRuntimeTypeArgument(this, "ListIterable", 0), null]);
      },
      reduce$1: function(_, combine) {
        var $length, value, i;
        $length = this.get$length(this);
        if (J.$eq$($length, 0))
          throw H.wrapException(H.IterableElementError_noElement());
        value = this.elementAt$1(0, 0);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 1;
        for (; i < $length; ++i) {
          value = combine.call$2(value, this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return value;
      },
      fold$2: function(_, initialValue, combine) {
        var $length, value, i;
        $length = this.get$length(this);
        if (typeof $length !== "number")
          return H.iae($length);
        value = initialValue;
        i = 0;
        for (; i < $length; ++i) {
          value = combine.call$2(value, this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return value;
      },
      skip$1: function(_, count) {
        return H.SubListIterable$(this, count, null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
      },
      toList$1$growable: function(_, growable) {
        var result, i, t1;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
        i = 0;
        while (true) {
          t1 = this.get$length(this);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.elementAt$1(0, i);
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = t1;
          ++i;
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      $isEfficientLength: 1
    },
    SubListIterable: {
      "^": "ListIterable;_iterable,__internal$_start,_endOrLength,$ti",
      get$_endIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this._iterable);
        t1 = this._endOrLength;
        if (t1 == null || J.$gt$n(t1, $length))
          return $length;
        return t1;
      },
      get$_startIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this._iterable);
        t1 = this.__internal$_start;
        if (J.$gt$n(t1, $length))
          return $length;
        return t1;
      },
      get$length: function(_) {
        var $length, t1, t2;
        $length = J.get$length$asx(this._iterable);
        t1 = this.__internal$_start;
        if (J.$ge$n(t1, $length))
          return 0;
        t2 = this._endOrLength;
        if (t2 == null || J.$ge$n(t2, $length))
          return J.$sub$n($length, t1);
        return J.$sub$n(t2, t1);
      },
      elementAt$1: function(_, index) {
        var realIndex = J.$add$ns(this.get$_startIndex(), index);
        if (J.$lt$n(index, 0) || J.$ge$n(realIndex, this.get$_endIndex()))
          throw H.wrapException(P.IndexError$(index, this, "index", null, null));
        return J.elementAt$1$ax(this._iterable, realIndex);
      },
      skip$1: function(_, count) {
        var newStart, t1;
        if (J.$lt$n(count, 0))
          H.throwExpression(P.RangeError$range(count, 0, null, "count", null));
        newStart = J.$add$ns(this.__internal$_start, count);
        t1 = this._endOrLength;
        if (t1 != null && J.$ge$n(newStart, t1))
          return new H.EmptyIterable(this.$ti);
        return H.SubListIterable$(this._iterable, newStart, t1, H.getTypeArgumentByIndex(this, 0));
      },
      take$1: function(_, count) {
        var t1, t2, newEnd;
        if (J.$lt$n(count, 0))
          H.throwExpression(P.RangeError$range(count, 0, null, "count", null));
        t1 = this._endOrLength;
        t2 = this.__internal$_start;
        if (t1 == null)
          return H.SubListIterable$(this._iterable, t2, J.$add$ns(t2, count), H.getTypeArgumentByIndex(this, 0));
        else {
          newEnd = J.$add$ns(t2, count);
          if (J.$lt$n(t1, newEnd))
            return this;
          return H.SubListIterable$(this._iterable, t2, newEnd, H.getTypeArgumentByIndex(this, 0));
        }
      },
      toList$1$growable: function(_, growable) {
        var start, t1, t2, end, end0, $length, t3, result, i, t4;
        start = this.__internal$_start;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        end = t2.get$length(t1);
        end0 = this._endOrLength;
        if (end0 != null && J.$lt$n(end0, end))
          end = end0;
        $length = J.$sub$n(end, start);
        if (J.$lt$n($length, 0))
          $length = 0;
        t3 = this.$ti;
        if (growable) {
          result = H.setRuntimeTypeInfo([], t3);
          C.JSArray_methods.set$length(result, $length);
        } else {
          if (typeof $length !== "number")
            return H.iae($length);
          result = H.setRuntimeTypeInfo(new Array($length), t3);
        }
        if (typeof $length !== "number")
          return H.iae($length);
        t3 = J.getInterceptor$ns(start);
        i = 0;
        for (; i < $length; ++i) {
          t4 = t2.elementAt$1(t1, t3.$add(start, i));
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = t4;
          if (J.$lt$n(t2.get$length(t1), end))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
        var t1, t2, t3;
        t1 = this.__internal$_start;
        t2 = J.getInterceptor$n(t1);
        if (t2.$lt(t1, 0))
          H.throwExpression(P.RangeError$range(t1, 0, null, "start", null));
        t3 = this._endOrLength;
        if (t3 != null) {
          if (J.$lt$n(t3, 0))
            H.throwExpression(P.RangeError$range(t3, 0, null, "end", null));
          if (t2.$gt(t1, t3))
            throw H.wrapException(P.RangeError$range(t1, 0, t3, "start", null));
        }
      },
      static: {
        SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
          var t1 = new H.SubListIterable(_iterable, _start, _endOrLength, [$E]);
          t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
          return t1;
        }
      }
    },
    ListIterator: {
      "^": "Object;_iterable,__internal$_length,_index,__internal$_current,$ti",
      get$current: function() {
        return this.__internal$_current;
      },
      moveNext$0: function() {
        var t1, t2, $length, t3;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        $length = t2.get$length(t1);
        if (!J.$eq$(this.__internal$_length, $length))
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        t3 = this._index;
        if (typeof $length !== "number")
          return H.iae($length);
        if (t3 >= $length) {
          this.__internal$_current = null;
          return false;
        }
        this.__internal$_current = t2.elementAt$1(t1, t3);
        ++this._index;
        return true;
      }
    },
    MappedIterable: {
      "^": "Iterable;_iterable,_f,$ti",
      get$iterator: function(_) {
        return new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f, this.$ti);
      },
      get$length: function(_) {
        return J.get$length$asx(this._iterable);
      },
      get$isEmpty: function(_) {
        return J.get$isEmpty$asx(this._iterable);
      },
      get$first: function(_) {
        return this._f.call$1(J.get$first$ax(this._iterable));
      },
      elementAt$1: function(_, index) {
        return this._f.call$1(J.elementAt$1$ax(this._iterable, index));
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      static: {
        MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
          if (!!J.getInterceptor(iterable).$isEfficientLength)
            return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
          return new H.MappedIterable(iterable, $function, [$S, $T]);
        }
      }
    },
    EfficientLengthMappedIterable: {
      "^": "MappedIterable;_iterable,_f,$ti",
      $isEfficientLength: 1
    },
    MappedIterator: {
      "^": "Iterator;__internal$_current,_iterator,_f,$ti",
      moveNext$0: function() {
        var t1 = this._iterator;
        if (t1.moveNext$0()) {
          this.__internal$_current = this._f.call$1(t1.get$current());
          return true;
        }
        this.__internal$_current = null;
        return false;
      },
      get$current: function() {
        return this.__internal$_current;
      },
      $asIterator: function($S, $T) {
        return [$T];
      }
    },
    MappedListIterable: {
      "^": "ListIterable;_source,_f,$ti",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      elementAt$1: function(_, index) {
        return this._f.call$1(J.elementAt$1$ax(this._source, index));
      },
      $asListIterable: function($S, $T) {
        return [$T];
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      $isEfficientLength: 1
    },
    WhereIterable: {
      "^": "Iterable;_iterable,_f,$ti",
      get$iterator: function(_) {
        return new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f, this.$ti);
      },
      map$1: function(_, f) {
        return new H.MappedIterable(this, f, [H.getTypeArgumentByIndex(this, 0), null]);
      }
    },
    WhereIterator: {
      "^": "Iterator;_iterator,_f,$ti",
      moveNext$0: function() {
        var t1, t2;
        for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
          if (t2.call$1(t1.get$current()) === true)
            return true;
        return false;
      },
      get$current: function() {
        return this._iterator.get$current();
      }
    },
    ExpandIterable: {
      "^": "Iterable;_iterable,_f,$ti",
      get$iterator: function(_) {
        return new H.ExpandIterator(J.get$iterator$ax(this._iterable), this._f, C.C_EmptyIterator, null, this.$ti);
      },
      $asIterable: function($S, $T) {
        return [$T];
      }
    },
    ExpandIterator: {
      "^": "Object;_iterator,_f,_currentExpansion,__internal$_current,$ti",
      get$current: function() {
        return this.__internal$_current;
      },
      moveNext$0: function() {
        var t1, t2, t3;
        t1 = this._currentExpansion;
        if (t1 == null)
          return false;
        for (t2 = this._iterator, t3 = this._f; !t1.moveNext$0();) {
          this.__internal$_current = null;
          if (t2.moveNext$0()) {
            this._currentExpansion = null;
            t1 = J.get$iterator$ax(t3.call$1(t2.get$current()));
            this._currentExpansion = t1;
          } else
            return false;
        }
        this.__internal$_current = this._currentExpansion.get$current();
        return true;
      }
    },
    TakeIterable: {
      "^": "Iterable;_iterable,_takeCount,$ti",
      get$iterator: function(_) {
        return new H.TakeIterator(J.get$iterator$ax(this._iterable), this._takeCount, this.$ti);
      },
      static: {
        TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
          if (typeof takeCount !== "number" || Math.floor(takeCount) !== takeCount || takeCount < 0)
            throw H.wrapException(P.ArgumentError$(takeCount));
          if (!!J.getInterceptor(iterable).$isEfficientLength)
            return new H.EfficientLengthTakeIterable(iterable, takeCount, [$E]);
          return new H.TakeIterable(iterable, takeCount, [$E]);
        }
      }
    },
    EfficientLengthTakeIterable: {
      "^": "TakeIterable;_iterable,_takeCount,$ti",
      get$length: function(_) {
        var iterableLength, t1;
        iterableLength = J.get$length$asx(this._iterable);
        t1 = this._takeCount;
        if (J.$gt$n(iterableLength, t1))
          return t1;
        return iterableLength;
      },
      $isEfficientLength: 1
    },
    TakeIterator: {
      "^": "Iterator;_iterator,_remaining,$ti",
      moveNext$0: function() {
        var t1 = J.$sub$n(this._remaining, 1);
        this._remaining = t1;
        if (J.$ge$n(t1, 0))
          return this._iterator.moveNext$0();
        this._remaining = -1;
        return false;
      },
      get$current: function() {
        if (J.$lt$n(this._remaining, 0))
          return;
        return this._iterator.get$current();
      }
    },
    SkipIterable: {
      "^": "Iterable;_iterable,_skipCount,$ti",
      skip$1: function(_, count) {
        var t1, t2;
        t1 = this._skipCount;
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          throw H.wrapException(P.ArgumentError$value(t1, "count is not an integer", null));
        t2 = J.getInterceptor$n(t1);
        if (t2.$lt(t1, 0))
          H.throwExpression(P.RangeError$range(t1, 0, null, "count", null));
        return H.SkipIterable$_(this._iterable, t2.$add(t1, count), H.getTypeArgumentByIndex(this, 0));
      },
      get$iterator: function(_) {
        return new H.SkipIterator(J.get$iterator$ax(this._iterable), this._skipCount, this.$ti);
      },
      SkipIterable$_$2: function(_iterable, _skipCount, $E) {
        var t1 = this._skipCount;
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          throw H.wrapException(P.ArgumentError$value(t1, "count is not an integer", null));
        if (J.$lt$n(t1, 0))
          H.throwExpression(P.RangeError$range(t1, 0, null, "count", null));
      },
      static: {
        SkipIterable_SkipIterable: function(iterable, count, $E) {
          var t1;
          if (!!J.getInterceptor(iterable).$isEfficientLength) {
            t1 = new H.EfficientLengthSkipIterable(iterable, count, [$E]);
            t1.SkipIterable$_$2(iterable, count, $E);
            return t1;
          }
          return H.SkipIterable$_(iterable, count, $E);
        },
        SkipIterable$_: function(_iterable, _skipCount, $E) {
          var t1 = new H.SkipIterable(_iterable, _skipCount, [$E]);
          t1.SkipIterable$_$2(_iterable, _skipCount, $E);
          return t1;
        }
      }
    },
    EfficientLengthSkipIterable: {
      "^": "SkipIterable;_iterable,_skipCount,$ti",
      get$length: function(_) {
        var $length = J.$sub$n(J.get$length$asx(this._iterable), this._skipCount);
        if (J.$ge$n($length, 0))
          return $length;
        return 0;
      },
      $isEfficientLength: 1
    },
    SkipIterator: {
      "^": "Iterator;_iterator,_skipCount,$ti",
      moveNext$0: function() {
        var t1, i, t2;
        t1 = this._iterator;
        i = 0;
        while (true) {
          t2 = this._skipCount;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          t1.moveNext$0();
          ++i;
        }
        this._skipCount = 0;
        return t1.moveNext$0();
      },
      get$current: function() {
        return this._iterator.get$current();
      }
    },
    EmptyIterable: {
      "^": "Iterable;$ti",
      get$iterator: function(_) {
        return C.C_EmptyIterator;
      },
      forEach$1: function(_, action) {
      },
      get$isEmpty: function(_) {
        return true;
      },
      get$length: function(_) {
        return 0;
      },
      get$first: function(_) {
        throw H.wrapException(H.IterableElementError_noElement());
      },
      elementAt$1: function(_, index) {
        throw H.wrapException(P.RangeError$range(index, 0, 0, "index", null));
      },
      contains$1: function(_, element) {
        return false;
      },
      where$1: function(_, test) {
        return this;
      },
      map$1: function(_, f) {
        return C.C_EmptyIterable;
      },
      reduce$1: function(_, combine) {
        throw H.wrapException(H.IterableElementError_noElement());
      },
      skip$1: function(_, count) {
        if (J.$lt$n(count, 0))
          H.throwExpression(P.RangeError$range(count, 0, null, "count", null));
        return this;
      },
      toList$1$growable: function(_, growable) {
        var t1, t2;
        t1 = this.$ti;
        if (growable)
          t1 = H.setRuntimeTypeInfo([], t1);
        else {
          t2 = new Array(0);
          t2.fixed$length = Array;
          t1 = H.setRuntimeTypeInfo(t2, t1);
        }
        return t1;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      $isEfficientLength: 1
    },
    EmptyIterator: {
      "^": "Object;$ti",
      moveNext$0: function() {
        return false;
      },
      get$current: function() {
        return;
      }
    },
    FixedLengthListMixin: {
      "^": "Object;$ti",
      set$length: function(receiver, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot change the length of a fixed-length list"));
      },
      add$1: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
      },
      insert$2: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
      },
      insertAll$2: function(receiver, at, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
      },
      addAll$1: function(receiver, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
      },
      remove$1: function(receiver, element) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
      },
      clear$0: function(receiver) {
        throw H.wrapException(new P.UnsupportedError("Cannot clear a fixed-length list"));
      },
      removeAt$1: function(receiver, index) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
      },
      replaceRange$3: function(receiver, start, end, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
      }
    },
    UnmodifiableListMixin: {
      "^": "Object;$ti",
      $indexSet: function(_, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
      },
      set$length: function(_, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot change the length of an unmodifiable list"));
      },
      setAll$2: function(_, at, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
      },
      add$1: function(_, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to an unmodifiable list"));
      },
      insert$2: function(_, index, element) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to an unmodifiable list"));
      },
      insertAll$2: function(_, at, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to an unmodifiable list"));
      },
      addAll$1: function(_, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to an unmodifiable list"));
      },
      remove$1: function(_, element) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from an unmodifiable list"));
      },
      sort$1: function(_, compare) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
      },
      clear$0: function(_) {
        throw H.wrapException(new P.UnsupportedError("Cannot clear an unmodifiable list"));
      },
      removeAt$1: function(_, index) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from an unmodifiable list"));
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      replaceRange$3: function(_, start, end, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from an unmodifiable list"));
      },
      fillRange$3: function(_, start, end, fillValue) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    UnmodifiableListBase: {
      "^": "ListBase+UnmodifiableListMixin;$ti",
      $asList: null,
      $asIterable: null,
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    ReversedListIterable: {
      "^": "ListIterable;_source,$ti",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      elementAt$1: function(_, index) {
        var t1, t2;
        t1 = this._source;
        t2 = J.getInterceptor$asx(t1);
        return t2.elementAt$1(t1, J.$sub$n(J.$sub$n(t2.get$length(t1), 1), index));
      }
    },
    Symbol: {
      "^": "Object;__internal$_name<",
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H.Symbol && J.$eq$(this.__internal$_name, other.__internal$_name);
      },
      get$hashCode: function(_) {
        var hash, t1;
        hash = this._hashCode;
        if (hash != null)
          return hash;
        t1 = J.get$hashCode$(this.__internal$_name);
        if (typeof t1 !== "number")
          return H.iae(t1);
        hash = 536870911 & 664597 * t1;
        this._hashCode = hash;
        return hash;
      },
      toString$0: function(_) {
        return 'Symbol("' + H.S(this.__internal$_name) + '")';
      },
      $isSymbol0: 1
    }
  }], ["_isolate_helper", "dart:_isolate_helper",, H, {
    "^": "",
    _callInIsolate: function(isolate, $function) {
      var result = isolate.eval$1($function);
      if (!init.globalState.currentContext._isExecutingEvent)
        init.globalState.topEventLoop.run$0();
      return result;
    },
    startRootIsolate: function(entry, args) {
      var t1, t2, t3, t4, t5, rootContext;
      t1 = {};
      t1.args = args;
      if (args == null) {
        args = [];
        t1.args = args;
        t2 = args;
      } else
        t2 = args;
      if (!J.getInterceptor(t2).$isList)
        throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
      init.globalState = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
      t2 = init.globalState;
      t3 = self.window == null;
      t4 = self.Worker;
      t5 = t3 && !!self.postMessage;
      t2.isWorker = t5;
      t5 = !t5;
      if (t5)
        t4 = t4 != null && $.$get$IsolateNatives_thisScript() != null;
      else
        t4 = true;
      t2.supportsWorkers = t4;
      t2.fromCommandLine = t3 && t5;
      t2.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
      t3 = P.$int;
      t2.isolates = new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [t3, H._IsolateContext]);
      t2.managers = new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [t3, null]);
      if (t2.isWorker === true) {
        t4 = new H._MainManagerStub();
        t2.mainManager = t4;
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t4);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log)
              self.console.log(object);
            else
              self.postMessage(serialize(object));
          };
        }(H._Manager__serializePrintMessage);
      }
      if (init.globalState.isWorker === true)
        return;
      t2 = init.globalState.nextIsolateId++;
      t4 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [t3, H.RawReceivePortImpl]);
      t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, t3);
      t5 = new H.RawReceivePortImpl(0, null, false);
      rootContext = new H._IsolateContext(t2, t4, t3, init.createNewIsolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
      t3.add$1(0, 0);
      rootContext._addRegistration$2(0, t5);
      init.globalState.rootContext = rootContext;
      init.globalState.currentContext = rootContext;
      t2 = H.getDynamicRuntimeType();
      t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
      if (t3)
        rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
      else {
        t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
        if (t2)
          rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
        else
          rootContext.eval$1(entry);
      }
      init.globalState.topEventLoop.run$0();
    },
    IsolateNatives_computeThisScript: function() {
      var currentScript = init.currentScript;
      if (currentScript != null)
        return String(currentScript.src);
      if (init.globalState.isWorker === true)
        return H.IsolateNatives_computeThisScriptFromTrace();
      return;
    },
    IsolateNatives_computeThisScriptFromTrace: function() {
      var stack, matches;
      stack = new Error().stack;
      if (stack == null) {
        stack = function() {
          try {
            throw new Error();
          } catch (e) {
            return e.stack;
          }
        }();
        if (stack == null)
          throw H.wrapException(new P.UnsupportedError("No stack trace"));
      }
      matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
      if (matches != null)
        return matches[1];
      matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
      if (matches != null)
        return matches[1];
      throw H.wrapException(new P.UnsupportedError('Cannot extract URI from "' + H.S(stack) + '"'));
    },
    IsolateNatives__processWorkerMessage: [function(sender, e) {
      var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
      msg = new H._Deserializer(true, []).deserialize$1(e.data);
      t1 = J.getInterceptor$asx(msg);
      switch (t1.$index(msg, "command")) {
        case "start":
          init.globalState.currentManagerId = t1.$index(msg, "id");
          functionName = t1.$index(msg, "functionName");
          entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
          args = t1.$index(msg, "args");
          message = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "msg"));
          isSpawnUri = t1.$index(msg, "isSpawnUri");
          startPaused = t1.$index(msg, "startPaused");
          replyTo = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "replyTo"));
          t1 = init.globalState.nextIsolateId++;
          t2 = P.$int;
          t3 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [t2, H.RawReceivePortImpl]);
          t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, t2);
          t4 = new H.RawReceivePortImpl(0, null, false);
          context = new H._IsolateContext(t1, t3, t2, init.createNewIsolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
          t2.add$1(0, 0);
          context._addRegistration$2(0, t4);
          init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
          init.globalState.currentContext = context;
          init.globalState.topEventLoop.run$0();
          break;
        case "spawn-worker":
          break;
        case "message":
          if (t1.$index(msg, "port") != null)
            J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
          init.globalState.topEventLoop.run$0();
          break;
        case "close":
          init.globalState.managers.remove$1(0, $.$get$IsolateNatives_workerIds().$index(0, sender));
          sender.terminate();
          init.globalState.topEventLoop.run$0();
          break;
        case "log":
          H.IsolateNatives__log(t1.$index(msg, "msg"));
          break;
        case "print":
          if (init.globalState.isWorker === true) {
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", msg]);
            t2 = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          } else
            P.print(t1.$index(msg, "msg"));
          break;
        case "error":
          throw H.wrapException(t1.$index(msg, "msg"));
      }
    }, null, null, 4, 0, null, 116, 0],
    IsolateNatives__log: function(msg) {
      var trace, t1, t2, exception;
      if (init.globalState.isWorker === true) {
        t1 = init.globalState.mainManager;
        t2 = P.LinkedHashMap__makeLiteral(["command", "log", "msg", msg]);
        t2 = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t2);
        t1.toString;
        self.postMessage(t2);
      } else
        try {
          self.console.log(msg);
        } catch (exception) {
          H.unwrapException(exception);
          trace = H.getTraceFromException(exception);
          throw H.wrapException(P.Exception_Exception(trace));
        }
    },
    IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
      var context, t1, t2, t3;
      context = init.globalState.currentContext;
      t1 = context.id;
      $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
      $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
      t1 = context.controlPort;
      t2 = init.globalState.currentContext.id;
      t3 = context.pauseCapability;
      J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
      t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
      if (startPaused === true) {
        context.addPause$2(t3, t3);
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, t2, "start isolate"));
      } else
        t2.call$0();
    },
    _clone: function(message) {
      return new H._Deserializer(true, []).deserialize$1(new H._Serializer(false, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(message));
    },
    startRootIsolate_closure: {
      "^": "Closure:1;_box_0,entry",
      call$0: function() {
        this.entry.call$1(this._box_0.args);
      }
    },
    startRootIsolate_closure0: {
      "^": "Closure:1;_box_0,entry",
      call$0: function() {
        this.entry.call$2(this._box_0.args, null);
      }
    },
    _Manager: {
      "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates<,mainManager,managers,entry",
      static: {
        _Manager__serializePrintMessage: [function(object) {
          var t1 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", object]);
          return new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t1);
        }, null, null, 2, 0, null, 53]
      }
    },
    _IsolateContext: {
      "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized?,isPaused<,delayedEvents<,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
      addPause$2: function(authentification, resume) {
        if (!this.pauseCapability.$eq(0, authentification))
          return;
        if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
          this.isPaused = true;
        this._updateGlobalState$0();
      },
      removePause$1: function(resume) {
        var t1, t2, $event, t3, t4, t5;
        if (!this.isPaused)
          return;
        t1 = this.pauseTokens;
        t1.remove$1(0, resume);
        if (t1._collection$_length === 0) {
          for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
            if (0 >= t2)
              return H.ioore(t1, -1);
            $event = t1.pop();
            t2 = init.globalState.topEventLoop.events;
            t3 = t2._head;
            t4 = t2._table;
            t5 = t4.length;
            t3 = (t3 - 1 & t5 - 1) >>> 0;
            t2._head = t3;
            if (t3 < 0 || t3 >= t5)
              return H.ioore(t4, t3);
            t4[t3] = $event;
            if (t3 === t2._tail)
              t2._grow$0();
            ++t2._modificationCount;
          }
          this.isPaused = false;
        }
        this._updateGlobalState$0();
      },
      addDoneListener$2: function(responsePort, response) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          this.doneHandlers = [];
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            t1 = this.doneHandlers;
            t2 = i + 1;
            if (t2 >= t1.length)
              return H.ioore(t1, t2);
            t1[t2] = response;
            return;
          }
        t2.push(responsePort);
        this.doneHandlers.push(response);
      },
      removeDoneListener$1: function(responsePort) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          return;
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            t1 = this.doneHandlers;
            t2 = i + 2;
            t1.toString;
            if (typeof t1 !== "object" || t1 === null || !!t1.fixed$length)
              H.throwExpression(new P.UnsupportedError("removeRange"));
            P.RangeError_checkValidRange(i, t2, t1.length, null, null, null);
            t1.splice(i, t2 - i);
            return;
          }
      },
      setErrorsFatal$2: function(authentification, errorsAreFatal) {
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        this.errorsAreFatal = errorsAreFatal;
      },
      handlePing$3: function(responsePort, pingType, response) {
        var t1 = J.getInterceptor(pingType);
        if (!t1.$eq(pingType, 0))
          t1 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          J.send$1$x(responsePort, response);
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(0, new H._IsolateContext_handlePing_respond(responsePort, response));
      },
      handleKill$2: function(authentification, priority) {
        var t1;
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        t1 = J.getInterceptor(priority);
        if (!t1.$eq(priority, 0))
          t1 = t1.$eq(priority, 1) && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          this.kill$0();
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(0, this.get$kill());
      },
      handleUncaughtError$2: function(error, stackTrace) {
        var t1, message, t2;
        t1 = this.errorPorts;
        if (t1._collection$_length === 0) {
          if (this.errorsAreFatal === true && this === init.globalState.rootContext)
            return;
          if (self.console && self.console.error)
            self.console.error(error, stackTrace);
          else {
            P.print(error);
            if (stackTrace != null)
              P.print(stackTrace);
          }
          return;
        }
        message = new Array(2);
        message.fixed$length = Array;
        message[0] = J.toString$0$(error);
        message[1] = stackTrace == null ? null : J.toString$0$(stackTrace);
        for (t2 = new P._LinkedHashSetIterator(t1, t1._collection$_modifications, null, null, [null]), t2._collection$_cell = t1._collection$_first; t2.moveNext$0();)
          J.send$1$x(t2._collection$_current, message);
      },
      eval$1: function(code) {
        var old, result, oldIsExecutingEvent, e, s, exception, t1;
        old = init.globalState.currentContext;
        init.globalState.currentContext = this;
        $ = this.isolateStatics;
        result = null;
        oldIsExecutingEvent = this._isExecutingEvent;
        this._isExecutingEvent = true;
        try {
          result = code.call$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this.handleUncaughtError$2(e, s);
          if (this.errorsAreFatal === true) {
            this.kill$0();
            if (this === init.globalState.rootContext)
              throw exception;
          }
        } finally {
          this._isExecutingEvent = oldIsExecutingEvent;
          init.globalState.currentContext = old;
          if (old != null)
            $ = old.get$isolateStatics();
          if (this._scheduledControlEvents != null)
            for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
              this._scheduledControlEvents.removeFirst$0().call$0();
        }
        return result;
      },
      handleControlMessage$1: function(message) {
        var t1 = J.getInterceptor$asx(message);
        switch (t1.$index(message, 0)) {
          case "pause":
            this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "resume":
            this.removePause$1(t1.$index(message, 1));
            break;
          case "add-ondone":
            this.addDoneListener$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "remove-ondone":
            this.removeDoneListener$1(t1.$index(message, 1));
            break;
          case "set-errors-fatal":
            this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "ping":
            this.handlePing$3(t1.$index(message, 1), t1.$index(message, 2), t1.$index(message, 3));
            break;
          case "kill":
            this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "getErrors":
            this.errorPorts.add$1(0, t1.$index(message, 1));
            break;
          case "stopErrors":
            this.errorPorts.remove$1(0, t1.$index(message, 1));
            break;
        }
      },
      lookup$1: function(portId) {
        return this.ports.$index(0, portId);
      },
      _addRegistration$2: function(portId, port) {
        var t1 = this.ports;
        if (t1.containsKey$1(0, portId))
          throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
        t1.$indexSet(0, portId, port);
      },
      _updateGlobalState$0: function() {
        var t1 = this.ports;
        if (t1.get$length(t1) - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
          init.globalState.isolates.$indexSet(0, this.id, this);
        else
          this.kill$0();
      },
      kill$0: [function() {
        var t1, t2, i, responsePort, t3;
        t1 = this._scheduledControlEvents;
        if (t1 != null)
          t1.clear$0(0);
        for (t1 = this.ports, t2 = t1.get$values(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();)
          t2.get$current().__isolate_helper$_close$0();
        t1.clear$0(0);
        this.weakPorts.clear$0(0);
        init.globalState.isolates.remove$1(0, this.id);
        this.errorPorts.clear$0(0);
        if (this.doneHandlers != null) {
          for (i = 0; t1 = this.doneHandlers, t2 = t1.length, i < t2; i += 2) {
            responsePort = t1[i];
            t3 = i + 1;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            J.send$1$x(responsePort, t1[t3]);
          }
          this.doneHandlers = null;
        }
      }, "call$0", "get$kill", 0, 0, 2]
    },
    _IsolateContext_handlePing_respond: {
      "^": "Closure:2;responsePort,response",
      call$0: [function() {
        J.send$1$x(this.responsePort, this.response);
      }, null, null, 0, 0, null, "call"]
    },
    _EventLoop: {
      "^": "Object;events,_activeJsAsyncCount",
      dequeue$0: function() {
        var t1 = this.events;
        if (t1._head === t1._tail)
          return;
        return t1.removeFirst$0();
      },
      runIteration$0: function() {
        var $event, t1, t2;
        $event = this.dequeue$0();
        if ($event == null) {
          if (init.globalState.rootContext != null)
            if (init.globalState.isolates.containsKey$1(0, init.globalState.rootContext.id))
              if (init.globalState.fromCommandLine === true) {
                t1 = init.globalState.rootContext.ports;
                t1 = t1.get$isEmpty(t1);
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
          t1 = init.globalState;
          if (t1.isWorker === true) {
            t2 = t1.isolates;
            t2 = t2.get$isEmpty(t2) && t1.topEventLoop._activeJsAsyncCount === 0;
          } else
            t2 = false;
          if (t2) {
            t1 = t1.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "close"]);
            t2 = new H._Serializer(true, new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0, [null, P.$int])).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
          return false;
        }
        $event.process$0();
        return true;
      },
      _runHelper$0: function() {
        if (self.window != null)
          new H._EventLoop__runHelper_next(this).call$0();
        else
          for (; this.runIteration$0();)
            ;
      },
      run$0: function() {
        var e, trace, exception, t1, t2;
        if (init.globalState.isWorker !== true)
          this._runHelper$0();
        else
          try {
            this._runHelper$0();
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            trace = H.getTraceFromException(exception);
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)]);
            t2 = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
      }
    },
    _EventLoop__runHelper_next: {
      "^": "Closure:2;$this",
      call$0: function() {
        if (!this.$this.runIteration$0())
          return;
        P.Timer_Timer(C.Duration_0, this);
      }
    },
    _IsolateEvent: {
      "^": "Object;isolate<,fn,message>",
      process$0: function() {
        if (this.isolate.get$isPaused()) {
          this.isolate.get$delayedEvents().push(this);
          return;
        }
        this.isolate.eval$1(this.fn);
      }
    },
    _MainManagerStub: {
      "^": "Object;"
    },
    IsolateNatives__processWorkerMessage_closure: {
      "^": "Closure:1;entryPoint,args,message,isSpawnUri,startPaused,replyTo",
      call$0: [function() {
        H.IsolateNatives__startIsolate(this.entryPoint, this.args, this.message, this.isSpawnUri, this.startPaused, this.replyTo);
      }, null, null, 0, 0, null, "call"]
    },
    IsolateNatives__startIsolate_runStartFunction: {
      "^": "Closure:2;topLevel,args,message,isSpawnUri,context",
      call$0: [function() {
        var t1, t2, t3, t4;
        t1 = this.context;
        t1.set$initialized(true);
        if (this.isSpawnUri !== true)
          this.topLevel.call$1(this.message);
        else {
          t2 = this.topLevel;
          t3 = H.getDynamicRuntimeType();
          t4 = H.buildFunctionType(t3, [t3, t3])._isTest$1(t2);
          if (t4)
            t2.call$2(this.args, this.message);
          else {
            t3 = H.buildFunctionType(t3, [t3])._isTest$1(t2);
            if (t3)
              t2.call$1(this.args);
            else
              t2.call$0();
          }
        }
        t1._updateGlobalState$0();
      }, null, null, 0, 0, null, "call"]
    },
    _BaseSendPort: {
      "^": "Object;"
    },
    _NativeJsSendPort: {
      "^": "_BaseSendPort;_receivePort,_isolateId",
      send$1: function(_, message) {
        var isolate, t1, msg;
        isolate = init.globalState.isolates.$index(0, this._isolateId);
        if (isolate == null)
          return;
        t1 = this._receivePort;
        if (t1.get$_isClosed())
          return;
        msg = H._clone(message);
        if (isolate.get$controlPort() === t1) {
          isolate.handleControlMessage$1(msg);
          return;
        }
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(this, msg), "receive"));
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H._NativeJsSendPort && J.$eq$(this._receivePort, other._receivePort);
      },
      get$hashCode: function(_) {
        return this._receivePort.get$_id();
      }
    },
    _NativeJsSendPort_send_closure: {
      "^": "Closure:1;$this,msg",
      call$0: [function() {
        var t1 = this.$this._receivePort;
        if (!t1.get$_isClosed())
          J.__isolate_helper$_add$1$x(t1, this.msg);
      }, null, null, 0, 0, null, "call"]
    },
    _WorkerSendPort: {
      "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
      send$1: function(_, message) {
        var t1, workerMessage, manager;
        t1 = P.LinkedHashMap__makeLiteral(["command", "message", "port", this, "msg", message]);
        workerMessage = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t1);
        if (init.globalState.isWorker === true) {
          init.globalState.mainManager.toString;
          self.postMessage(workerMessage);
        } else {
          manager = init.globalState.managers.$index(0, this._workerId);
          if (manager != null)
            manager.postMessage(workerMessage);
        }
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H._WorkerSendPort && J.$eq$(this._workerId, other._workerId) && J.$eq$(this._isolateId, other._isolateId) && J.$eq$(this._receivePortId, other._receivePortId);
      },
      get$hashCode: function(_) {
        var t1, t2, t3;
        t1 = J.$shl$n(this._workerId, 16);
        t2 = J.$shl$n(this._isolateId, 8);
        t3 = this._receivePortId;
        if (typeof t3 !== "number")
          return H.iae(t3);
        return (t1 ^ t2 ^ t3) >>> 0;
      }
    },
    RawReceivePortImpl: {
      "^": "Object;_id<,_handler,_isClosed<",
      __isolate_helper$_close$0: function() {
        this._isClosed = true;
        this._handler = null;
      },
      close$0: function(_) {
        var t1, t2;
        if (this._isClosed)
          return;
        this._isClosed = true;
        this._handler = null;
        t1 = init.globalState.currentContext;
        t2 = this._id;
        t1.ports.remove$1(0, t2);
        t1.weakPorts.remove$1(0, t2);
        t1._updateGlobalState$0();
      },
      __isolate_helper$_add$1: function(_, dataEvent) {
        if (this._isClosed)
          return;
        this._handler.call$1(dataEvent);
      },
      $isRawReceivePort: 1
    },
    TimerImpl: {
      "^": "Object;_once,_inEventLoop,_handle",
      cancel$0: function(_) {
        var t1;
        if (self.setTimeout != null) {
          if (this._inEventLoop)
            throw H.wrapException(new P.UnsupportedError("Timer in event loop cannot be canceled."));
          t1 = this._handle;
          if (t1 == null)
            return;
          --init.globalState.topEventLoop._activeJsAsyncCount;
          if (this._once)
            self.clearTimeout(t1);
          else
            self.clearInterval(t1);
          this._handle = null;
        } else
          throw H.wrapException(new P.UnsupportedError("Canceling a timer."));
      },
      get$isActive: function() {
        return this._handle != null;
      },
      TimerImpl$periodic$2: function(milliseconds, callback) {
        if (self.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = self.setInterval(H.convertDartClosureToJS(new H.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(new P.UnsupportedError("Periodic timer."));
      },
      TimerImpl$2: function(milliseconds, callback) {
        var t1, t2;
        if (milliseconds === 0)
          t1 = self.setTimeout == null || init.globalState.isWorker === true;
        else
          t1 = false;
        if (t1) {
          this._handle = 1;
          t1 = init.globalState.topEventLoop;
          t2 = init.globalState.currentContext;
          t1.events._add$1(0, new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
          this._inEventLoop = true;
        } else if (self.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(new P.UnsupportedError("Timer greater than 0."));
      },
      static: {
        TimerImpl$: function(milliseconds, callback) {
          var t1 = new H.TimerImpl(true, false, null);
          t1.TimerImpl$2(milliseconds, callback);
          return t1;
        },
        TimerImpl$periodic: function(milliseconds, callback) {
          var t1 = new H.TimerImpl(false, false, null);
          t1.TimerImpl$periodic$2(milliseconds, callback);
          return t1;
        }
      }
    },
    TimerImpl_internalCallback: {
      "^": "Closure:2;$this,callback",
      call$0: [function() {
        this.$this._handle = null;
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    TimerImpl_internalCallback0: {
      "^": "Closure:2;$this,callback",
      call$0: [function() {
        this.$this._handle = null;
        --init.globalState.topEventLoop._activeJsAsyncCount;
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    TimerImpl$periodic_closure: {
      "^": "Closure:1;$this,callback",
      call$0: [function() {
        this.callback.call$1(this.$this);
      }, null, null, 0, 0, null, "call"]
    },
    CapabilityImpl: {
      "^": "Object;_id<",
      get$hashCode: function(_) {
        var hash, t1, t2;
        hash = this._id;
        t1 = J.getInterceptor$n(hash);
        t2 = t1.$shr(hash, 0);
        t1 = t1.$tdiv(hash, 4294967296);
        if (typeof t1 !== "number")
          return H.iae(t1);
        hash = t2 ^ t1;
        hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
        hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
        hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
        return (hash ^ hash >>> 16) >>> 0;
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other === this)
          return true;
        if (other instanceof H.CapabilityImpl) {
          t1 = this._id;
          t2 = other._id;
          return t1 == null ? t2 == null : t1 === t2;
        }
        return false;
      }
    },
    _Serializer: {
      "^": "Object;_serializeSendPorts,serializedObjectIds",
      serialize$1: [function(x) {
        var t1, serializationId, serializeTearOff, t2, $name;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        t1 = this.serializedObjectIds;
        serializationId = t1.$index(0, x);
        if (serializationId != null)
          return ["ref", serializationId];
        t1.$indexSet(0, x, t1.get$length(t1));
        t1 = J.getInterceptor(x);
        if (!!t1.$isNativeByteBuffer)
          return ["buffer", x];
        if (!!t1.$isNativeTypedData)
          return ["typed", x];
        if (!!t1.$isJSIndexable)
          return this.serializeJSIndexable$1(x);
        if (!!t1.$isInternalMap) {
          serializeTearOff = this.get$serialize();
          t2 = t1.get$keys(x);
          t2 = H.MappedIterable_MappedIterable(t2, serializeTearOff, H.getRuntimeTypeArgument(t2, "Iterable", 0), null);
          t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0));
          t1 = t1.get$values(x);
          t1 = H.MappedIterable_MappedIterable(t1, serializeTearOff, H.getRuntimeTypeArgument(t1, "Iterable", 0), null);
          return ["map", t2, P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0))];
        }
        if (!!t1.$isJSObject)
          return this.serializeJSObject$1(x);
        if (!!t1.$isInterceptor)
          this.unsupported$1(x);
        if (!!t1.$isRawReceivePort)
          this.unsupported$2(x, "RawReceivePorts can't be transmitted:");
        if (!!t1.$is_NativeJsSendPort)
          return this.serializeJsSendPort$1(x);
        if (!!t1.$is_WorkerSendPort)
          return this.serializeWorkerSendPort$1(x);
        if (!!t1.$isClosure) {
          $name = x.$static_name;
          if ($name == null)
            this.unsupported$2(x, "Closures can't be transmitted:");
          return ["function", $name];
        }
        if (!!t1.$isCapabilityImpl)
          return ["capability", x._id];
        if (!(x instanceof P.Object))
          this.unsupported$1(x);
        return ["dart", init.classIdExtractor(x), this.serializeArrayInPlace$1(init.classFieldsExtractor(x))];
      }, "call$1", "get$serialize", 2, 0, 0, 54],
      unsupported$2: function(x, message) {
        throw H.wrapException(new P.UnsupportedError(H.S(message == null ? "Can't transmit:" : message) + " " + H.S(x)));
      },
      unsupported$1: function(x) {
        return this.unsupported$2(x, null);
      },
      isPrimitive$1: [function(x) {
        return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
      }, "call$1", "get$isPrimitive", 2, 0, 72],
      serializeJSIndexable$1: function(indexable) {
        var serialized = this.serializeArray$1(indexable);
        if (!!indexable.fixed$length)
          return ["fixed", serialized];
        if (!indexable.fixed$length)
          return ["extendable", serialized];
        if (!indexable.immutable$list)
          return ["mutable", serialized];
        if (indexable.constructor === Array)
          return ["const", serialized];
        this.unsupported$2(indexable, "Can't serialize indexable: ");
      },
      serializeArray$1: function(x) {
        var serialized, i, t1;
        serialized = [];
        C.JSArray_methods.set$length(serialized, x.length);
        for (i = 0; i < x.length; ++i) {
          t1 = this.serialize$1(x[i]);
          if (i >= serialized.length)
            return H.ioore(serialized, i);
          serialized[i] = t1;
        }
        return serialized;
      },
      serializeArrayInPlace$1: function(x) {
        var i;
        for (i = 0; i < x.length; ++i)
          C.JSArray_methods.$indexSet(x, i, this.serialize$1(x[i]));
        return x;
      },
      serializeJSObject$1: function(x) {
        var keys, values, i, t1;
        if (!!x.constructor && x.constructor !== Object)
          this.unsupported$2(x, "Only plain JS Objects are supported:");
        keys = Object.keys(x);
        values = [];
        C.JSArray_methods.set$length(values, keys.length);
        for (i = 0; i < keys.length; ++i) {
          t1 = this.serialize$1(x[keys[i]]);
          if (i >= values.length)
            return H.ioore(values, i);
          values[i] = t1;
        }
        return ["js-object", keys, values];
      },
      serializeWorkerSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", x._workerId, x._isolateId, x._receivePortId];
        return ["raw sendport", x];
      },
      serializeJsSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
        return ["raw sendport", x];
      }
    },
    _Deserializer: {
      "^": "Object;_adjustSendPorts,deserializedObjects",
      deserialize$1: [function(x) {
        var serializationId, t1, result, classId, fields, emptyInstance;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        if (typeof x !== "object" || x === null || x.constructor !== Array)
          throw H.wrapException(P.ArgumentError$("Bad serialized message: " + H.S(x)));
        switch (C.JSArray_methods.get$first(x)) {
          case "ref":
            if (1 >= x.length)
              return H.ioore(x, 1);
            serializationId = x[1];
            t1 = this.deserializedObjects;
            if (serializationId >>> 0 !== serializationId || serializationId >= t1.length)
              return H.ioore(t1, serializationId);
            return t1[serializationId];
          case "buffer":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "typed":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "fixed":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
            t1.fixed$length = Array;
            return t1;
          case "extendable":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
          case "mutable":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return this.deserializeArrayInPlace$1(result);
          case "const":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
            t1.fixed$length = Array;
            return t1;
          case "map":
            return this.deserializeMap$1(x);
          case "sendport":
            return this.deserializeSendPort$1(x);
          case "raw sendport":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "js-object":
            return this.deserializeJSObject$1(x);
          case "function":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = init.globalFunctions[x[1]]();
            this.deserializedObjects.push(result);
            return result;
          case "capability":
            if (1 >= x.length)
              return H.ioore(x, 1);
            return new H.CapabilityImpl(x[1]);
          case "dart":
            t1 = x.length;
            if (1 >= t1)
              return H.ioore(x, 1);
            classId = x[1];
            if (2 >= t1)
              return H.ioore(x, 2);
            fields = x[2];
            emptyInstance = init.instanceFromClassId(classId);
            this.deserializedObjects.push(emptyInstance);
            this.deserializeArrayInPlace$1(fields);
            return init.initializeEmptyInstance(classId, emptyInstance, fields);
          default:
            throw H.wrapException("couldn't deserialize: " + H.S(x));
        }
      }, "call$1", "get$deserialize", 2, 0, 0, 54],
      isPrimitive$1: [function(x) {
        return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
      }, "call$1", "get$isPrimitive", 2, 0, 72],
      deserializeArrayInPlace$1: function(x) {
        var t1, i, t2;
        t1 = J.getInterceptor$asx(x);
        i = 0;
        while (true) {
          t2 = t1.get$length(x);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          t1.$indexSet(x, i, this.deserialize$1(t1.$index(x, i)));
          ++i;
        }
        return x;
      },
      deserializeMap$1: function(x) {
        var t1, keys, values, result, t2, i;
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        keys = x[1];
        if (2 >= t1)
          return H.ioore(x, 2);
        values = x[2];
        result = P.LinkedHashMap__makeEmpty();
        this.deserializedObjects.push(result);
        keys = J.map$1$ax(keys, this.get$deserialize()).toList$0(0);
        for (t1 = J.getInterceptor$asx(keys), t2 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(keys); ++i)
          result.$indexSet(0, t1.$index(keys, i), this.deserialize$1(t2.$index(values, i)));
        return result;
      },
      deserializeSendPort$1: function(x) {
        var t1, managerId, isolateId, receivePortId, isolate, receivePort, result;
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        managerId = x[1];
        if (2 >= t1)
          return H.ioore(x, 2);
        isolateId = x[2];
        if (3 >= t1)
          return H.ioore(x, 3);
        receivePortId = x[3];
        if (J.$eq$(managerId, init.globalState.currentManagerId)) {
          isolate = init.globalState.isolates.$index(0, isolateId);
          if (isolate == null)
            return;
          receivePort = isolate.lookup$1(receivePortId);
          if (receivePort == null)
            return;
          result = new H._NativeJsSendPort(receivePort, isolateId);
        } else
          result = new H._WorkerSendPort(managerId, receivePortId, isolateId);
        this.deserializedObjects.push(result);
        return result;
      },
      deserializeJSObject$1: function(x) {
        var t1, keys, values, o, t2, i, t3;
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        keys = x[1];
        if (2 >= t1)
          return H.ioore(x, 2);
        values = x[2];
        o = {};
        this.deserializedObjects.push(o);
        t1 = J.getInterceptor$asx(keys);
        t2 = J.getInterceptor$asx(values);
        i = 0;
        while (true) {
          t3 = t1.get$length(keys);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          o[t1.$index(keys, i)] = this.deserialize$1(t2.$index(values, i));
          ++i;
        }
        return o;
      }
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable Map"));
    },
    jsConstructorNameToRti: function(constructorName) {
      return init.getTypeFromName(constructorName);
    },
    getType: function(index) {
      return init.types[index];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives__parseIntError: function(source, handleError) {
      if (handleError == null)
        throw H.wrapException(new P.FormatException(source, null, null));
      return handleError.call$1(source);
    },
    Primitives_parseInt: function(source, radix, handleError) {
      var match, decimalMatch, maxCharCode, digitsPart, t1, i;
      H.checkString(source);
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return H.Primitives__parseIntError(source, handleError);
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return H.Primitives__parseIntError(source, handleError);
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((C.JSString_methods.codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return H.Primitives__parseIntError(source, handleError);
      }
      return parseInt(source, radix);
    },
    Primitives__parseDoubleError: function(source, handleError) {
      if (handleError == null)
        throw H.wrapException(new P.FormatException("Invalid double", source, null));
      return handleError.call$1(source);
    },
    Primitives_parseDouble: function(source, handleError) {
      var result, trimmed;
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return H.Primitives__parseDoubleError(source, handleError);
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = C.JSString_methods.trim$0(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return H.Primitives__parseDoubleError(source, handleError);
      }
      return result;
    },
    Primitives_objectTypeName: function(object) {
      var interceptor, interceptorConstructor, interceptorConstructorName, $name, dispatchName, objectConstructor, match, decompiledName;
      interceptor = J.getInterceptor(object);
      interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      if ($name == null || interceptor === C.Interceptor_methods || !!J.getInterceptor(object).$isUnknownJavaScriptObject) {
        dispatchName = C.JS_CONST_8ZY(object);
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
          if ($name == null)
            $name = dispatchName;
        } else
          $name = dispatchName;
      }
      $name = $name;
      if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
        $name = C.JSString_methods.substring$1($name, 1);
      return function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null), init.mangledGlobalNames);
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    Primitives_dateNow: [function() {
      return Date.now();
    }, "call$0", "_js_helper_Primitives_dateNow$closure", 0, 0, 215],
    Primitives_initTicker: function() {
      var $window, performance;
      if ($.Primitives_timerFrequency != null)
        return;
      $.Primitives_timerFrequency = 1000;
      $.Primitives_timerTicks = H._js_helper_Primitives_dateNow$closure();
      if (typeof window == "undefined")
        return;
      $window = window;
      if ($window == null)
        return;
      performance = $window.performance;
      if (performance == null)
        return;
      if (typeof performance.now != "function")
        return;
      $.Primitives_timerFrequency = 1000000;
      $.Primitives_timerTicks = new H.Primitives_initTicker_closure(performance);
    },
    Primitives_currentUri: function() {
      if (!!self.location)
        return self.location.href;
      return;
    },
    Primitives__fromCharCodeApply: function(array) {
      var end, result, i, i0, chunkEnd;
      end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var a, t1, _i, i;
      a = H.setRuntimeTypeInfo([], [P.$int]);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          a.push(i);
        else if (i <= 1114111) {
          a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          a.push(56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, t2, i;
      for (t1 = charCodes.length, _i = 0; t2 = charCodes.length, _i < t2; t2 === t1 || (0, H.throwConcurrentModificationError)(charCodes), ++_i) {
        i = charCodes[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var t1, i, result, i0, chunkEnd;
      t1 = J.getInterceptor$n(end);
      if (t1.$le(end, 500) && start === 0 && t1.$eq(end, charCodes.length))
        return String.fromCharCode.apply(null, charCodes);
      if (typeof end !== "number")
        return H.iae(end);
      i = start;
      result = "";
      for (; i < end; i = i0) {
        i0 = i + 500;
        if (i0 < end)
          chunkEnd = i0;
        else
          chunkEnd = end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (typeof charCode !== "number")
        return H.iae(charCode);
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((55296 | C.JSNumber_methods._shrOtherPositive$1(bits, 10)) >>> 0, (56320 | bits & 1023) >>> 0);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getProperty: function(object, key) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      return object[key];
    },
    Primitives_setProperty: function(object, key, value) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      object[key] = value;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, namedArgumentList;
      t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, "call" + "$" + t1.argumentCount + t1.names, 0, $arguments, namedArgumentList, null));
    },
    Primitives_applyFunctionWithPositionalArguments: function($function, positionalArguments) {
      var $arguments, t1;
      $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      t1 = $arguments.length;
      if (t1 === 0) {
        if (!!$function.call$0)
          return $function.call$0();
      } else if (t1 === 1) {
        if (!!$function.call$1)
          return $function.call$1($arguments[0]);
      } else if (t1 === 2) {
        if (!!$function.call$2)
          return $function.call$2($arguments[0], $arguments[1]);
      } else if (t1 === 3) {
        if (!!$function.call$3)
          return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
      } else if (t1 === 4) {
        if (!!$function.call$4)
          return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
      } else if (t1 === 5)
        if (!!$function.call$5)
          return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
      return H.Primitives__genericApplyFunctionWithPositionalArguments($function, $arguments);
    },
    Primitives__genericApplyFunctionWithPositionalArguments: function($function, $arguments) {
      var argumentCount, jsFunction, info, requiredArgumentCount, maxArgumentCount, pos;
      argumentCount = $arguments.length;
      jsFunction = $function["call" + "$" + argumentCount];
      if (jsFunction == null) {
        jsFunction = J.getInterceptor($function)["call*"];
        if (jsFunction == null)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        info = H.ReflectionInfo_ReflectionInfo(jsFunction);
        requiredArgumentCount = info.requiredParameterCount;
        maxArgumentCount = requiredArgumentCount + info.optionalParameterCount;
        if (info.areOptionalParametersNamed || requiredArgumentCount > argumentCount || maxArgumentCount < argumentCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        $arguments = P.List_List$from($arguments, true, null);
        for (pos = argumentCount; pos < maxArgumentCount; ++pos)
          C.JSArray_methods.add$1($arguments, init.metadata[info.defaultValue$1(0, pos)]);
      }
      return jsFunction.apply($function, $arguments);
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, "index", null);
      $length = J.get$length$asx(indexable);
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index", null);
    },
    diagnoseRangeError: function(start, end, $length) {
      if (typeof start !== "number" || Math.floor(start) !== start)
        return new P.ArgumentError(true, start, "start", null);
      if (start < 0 || start > $length)
        return new P.RangeError(0, $length, true, start, "start", "Invalid value");
      if (end != null) {
        if (typeof end !== "number" || Math.floor(end) !== end)
          return new P.ArgumentError(true, end, "end", null);
        if (end < start || end > $length)
          return new P.RangeError(start, $length, true, end, "end", "Invalid value");
      }
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkInt: function(value) {
      if (typeof value !== "number" || Math.floor(value) !== value)
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    checkString: function(value) {
      if (typeof value !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: [function() {
      return J.toString$0$(this.dartException);
    }, null, null, 0, 0, null],
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(new P.ConcurrentModificationError(collection));
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, t2, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              t2 = H.S(message) + " (Error " + ieErrorCode + ")";
              return t1.call$1(new H.NullError(t2, null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(message, match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(new H.NullError(message, match == null ? null : match.method));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, null, null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception, null);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception, null);
    },
    objectHashCode: function(object) {
      if (object == null || typeof object != 'object')
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var $length, index, index0, index1;
      $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
      switch (numberOfArguments) {
        case 0:
          return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
        case 1:
          return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
        case 2:
          return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
        case 3:
          return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
        case 4:
          return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    }, null, null, 14, 0, null, 149, 13, 150, 105, 139, 168, 107],
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, context, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, context, arity, a1, a2, a3, a4);
        };
      }(closure, arity, init.globalState.currentContext, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function() {
          this.$initialize();
        };
      else
        $constructor = function(a, b, c, d) {
          this.$initialize(a, b, c, d);
        };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      t1 = !isStatic;
      if (t1) {
        isIntercepted = jsArguments.length == 1 && true;
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
        isIntercepted = false;
      }
      if (typeof functionType == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      else if (t1 && typeof functionType == "function") {
        getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
        signatureFunction = function(f, r) {
          return function() {
            return f.apply({$receiver: r(this)}, arguments);
          };
        }(functionType, getReceiver);
      } else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (t1 = functions.length, i = 1; i < t1; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = t2;
        }
      }
      $prototype["call*"] = trampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t1, stubName, arity, lookedUpFunction;
      H.BoundClosure_selfFieldName();
      t1 = $.BoundClosure_receiverFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t1;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
    },
    closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
      var t1;
      functions.fixed$length = Array;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        reflectionInfo.fixed$length = Array;
        t1 = reflectionInfo;
      } else
        t1 = reflectionInfo;
      return H.Closure_fromTearOff(receiver, functions, t1, !!isStatic, jsArguments, $name);
    },
    stringTypeCast: function(value) {
      if (typeof value === "string" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), "String"));
    },
    propertyTypeCastError: function(value, property) {
      var t1 = J.getInterceptor$asx(property);
      throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    listTypeCast: function(value) {
      if (!!J.getInterceptor(value).$isList || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), "List"));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(staticName)));
    },
    buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
      return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
    },
    buildInterfaceType: function(rti, typeArguments) {
      var jsConstructorName = rti.builtin$cls;
      if (typeArguments == null || typeArguments.length === 0)
        return new H.RuntimeTypePlain(jsConstructorName);
      return new H.RuntimeTypeGeneric(jsConstructorName, typeArguments, null);
    },
    getDynamicRuntimeType: function() {
      return C.C_DynamicRuntimeType;
    },
    random64: function() {
      return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    createRuntimeType: function($name) {
      return new H.TypeImpl($name, null);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(target, substitutionName) {
      return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti, onTypeVariable) {
      if (rti == null)
        return "dynamic";
      else if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return rti[0].builtin$cls + H.joinArguments(rti, 1, onTypeVariable);
      else if (typeof rti == "function")
        return rti.builtin$cls;
      else if (typeof rti === "number" && Math.floor(rti) === rti)
        return C.JSInt_methods.toString$0(rti);
      else
        return;
    },
    joinArguments: function(types, startIndex, onTypeVariable) {
      var buffer, index, firstArgument, allDynamic, t1, argument;
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, firstArgument = true, allDynamic = true, t1 = ""; index < types.length; ++index) {
        if (firstArgument)
          firstArgument = false;
        else
          buffer._contents = t1 + ", ";
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H.S(H.runtimeTypeToString(argument, onTypeVariable));
      }
      return allDynamic ? "" : "<" + buffer.toString$0(0) + ">";
    },
    getRuntimeTypeString: function(object) {
      var className = J.getInterceptor(object).constructor.builtin$cls;
      if (object == null)
        return className;
      return className + H.joinArguments(object.$ti, 0, null);
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
    },
    subtypeCast: function(object, isField, checks, asField) {
      if (object != null && !H.checkSubtype(object, isField, checks, asField))
        throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(object), function(str, names) {
          return str.replace(/[^<,> ]+/g, function(m) {
            return names[m] || m;
          });
        }(isField.substring(3) + H.joinArguments(checks, 0, null), init.mangledGlobalNames)));
      return object;
    },
    areSubtypes: function(s, t) {
      var len, i;
      if (s == null || t == null)
        return true;
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H.isSubtype(s[i], t[i]))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.getRuntimeTypeArguments(context, contextName));
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var rti, type, targetSignatureFunction;
      if (o == null)
        return t == null || t.builtin$cls === "Object" || t.builtin$cls === "Null";
      if (t == null)
        return true;
      rti = H.getRuntimeTypeInfo(o);
      o = J.getInterceptor(o);
      type = o.constructor;
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      if ('func' in t) {
        targetSignatureFunction = o.$signature;
        if (targetSignatureFunction == null)
          return false;
        return H.isFunctionSubtype(targetSignatureFunction.apply(o, null), t);
      }
      return H.isSubtype(type, t);
    },
    isSubtype: function(s, t) {
      var t1, typeOfS, t2, typeOfT, typeOfTString, substitution;
      if (s === t)
        return true;
      if (s == null || t == null)
        return true;
      if ('func' in t)
        return H.isFunctionSubtype(s, t);
      if ('func' in s)
        return t.builtin$cls === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = H.runtimeTypeToString(typeOfT, null);
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + H.S(typeOfTString)];
      } else
        substitution = null;
      if (!t1 && substitution == null || !t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t.slice(1);
      return H.areSubtypes(H.substitute(substitution, t1), t2);
    },
    areAssignable: function(s, t, allowShorter) {
      var t1, sLength, tLength, i, t2;
      t1 = t == null;
      if (t1 && s == null)
        return true;
      if (t1)
        return allowShorter;
      if (s == null)
        return false;
      sLength = s.length;
      tLength = t.length;
      if (allowShorter) {
        if (sLength < tLength)
          return false;
      } else if (sLength !== tLength)
        return false;
      for (i = 0; i < tLength; ++i) {
        t1 = s[i];
        t2 = t[i];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      return true;
    },
    areAssignableMaps: function(s, t) {
      var t1, names, i, $name, tType, sType;
      if (t == null)
        return true;
      if (s == null)
        return false;
      t1 = Object.getOwnPropertyNames(t);
      t1.fixed$length = Array;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        tType = t[$name];
        sType = s[$name];
        if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
          return false;
      }
      return true;
    },
    isFunctionSubtype: function(s, t) {
      var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
      if (!('func' in s))
        return false;
      if ("v" in s) {
        if (!("v" in t) && "ret" in t)
          return false;
      } else if (!("v" in t)) {
        sReturnType = s.ret;
        tReturnType = t.ret;
        if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
          return false;
      }
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      if (sParametersLen === tParametersLen) {
        if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
          return false;
        if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
          return false;
      } else {
        for (pos = 0; pos < sParametersLen; ++pos) {
          t1 = sParameterTypes[pos];
          t2 = tParameterTypes[pos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tOptionalParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
      }
      return H.areAssignableMaps(s.named, t.named);
    },
    toStringForNativeObject: function(obj) {
      var t1 = $.getTagFunction;
      return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
    },
    hashCodeForNativeObject: function(object) {
      return H.Primitives_objectHashCode(object);
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      tag = $.getTagFunction.call$1(obj);
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = $.alternateTagFunction.call$2(obj, tag);
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(new P.UnimplementedError(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_gkc();
      hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc0, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1;
      if (typeof other === "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else {
        t1 = J.getInterceptor(other);
        if (!!t1.$isJSSyntaxRegExp) {
          t1 = C.JSString_methods.substring$1(receiver, startIndex);
          return other._nativeRegExp.test(t1);
        } else {
          t1 = t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex));
          return !t1.get$isEmpty(t1);
        }
      }
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var $length, t1, i, nativeRegexp;
      if (typeof pattern === "string")
        if (pattern === "")
          if (receiver === "")
            return replacement;
          else {
            $length = receiver.length;
            for (t1 = replacement, i = 0; i < $length; ++i)
              t1 = t1 + receiver[i] + replacement;
            return t1.charCodeAt(0) == 0 ? t1 : t1;
          }
        else
          return receiver.replace(new RegExp(pattern.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&"), 'g'), replacement.replace(/\$/g, "$$$$"));
      else if (pattern instanceof H.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, replacement.replace(/\$/g, "$$$$"));
      } else {
        if (pattern == null)
          H.throwExpression(H.argumentErrorValue(pattern));
        throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
      }
    },
    stringReplaceFirstUnchecked: function(receiver, pattern, replacement, startIndex) {
      var index, t1, matches, match;
      if (typeof pattern === "string") {
        index = receiver.indexOf(pattern, startIndex);
        if (index < 0)
          return receiver;
        return H.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
      }
      t1 = J.allMatches$2$s(pattern, receiver, startIndex);
      matches = new H._StringAllMatchesIterator(t1._input, t1._pattern, t1.__js_helper$_index, null);
      if (!matches.moveNext$0())
        return receiver;
      match = matches.__js_helper$_current;
      t1 = match.start;
      return C.JSString_methods.replaceRange$3(receiver, t1, J.$add$ns(t1, match.pattern.length), replacement);
    },
    stringReplaceRangeUnchecked: function(receiver, start, end, replacement) {
      var prefix, suffix;
      prefix = receiver.substring(0, start);
      suffix = receiver.substring(end);
      return prefix + replacement + suffix;
    },
    ConstantMapView: {
      "^": "UnmodifiableMapView;_collection$_map,$ti",
      $asUnmodifiableMapView: Isolate.functionThatReturnsNull,
      $asMapView: Isolate.functionThatReturnsNull,
      $asMap: Isolate.functionThatReturnsNull,
      $isMap: 1
    },
    ConstantMap: {
      "^": "Object;$ti",
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$length(this) !== 0;
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      $indexSet: function(_, key, val) {
        return H.ConstantMap__throwUnmodifiable();
      },
      remove$1: function(_, key) {
        return H.ConstantMap__throwUnmodifiable();
      },
      addAll$1: function(_, other) {
        return H.ConstantMap__throwUnmodifiable();
      },
      $isMap: 1,
      $asMap: null
    },
    ConstantStringMap: {
      "^": "ConstantMap;_length,__js_helper$_jsObject,_keys,$ti",
      get$length: function(_) {
        return this._length;
      },
      containsKey$1: function(_, key) {
        if (typeof key !== "string")
          return false;
        if ("__proto__" === key)
          return false;
        return this.__js_helper$_jsObject.hasOwnProperty(key);
      },
      $index: function(_, key) {
        if (!this.containsKey$1(0, key))
          return;
        return this._fetch$1(key);
      },
      _fetch$1: function(key) {
        return this.__js_helper$_jsObject[key];
      },
      forEach$1: function(_, f) {
        var keys, t1, i, key;
        keys = this._keys;
        for (t1 = keys.length, i = 0; i < t1; ++i) {
          key = keys[i];
          f.call$2(key, this._fetch$1(key));
        }
      },
      get$keys: function(_) {
        return new H._ConstantMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
      },
      get$values: function(_) {
        return H.MappedIterable_MappedIterable(this._keys, new H.ConstantStringMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
      }
    },
    ConstantStringMap_values_closure: {
      "^": "Closure:0;$this",
      call$1: [function(key) {
        return this.$this._fetch$1(key);
      }, null, null, 2, 0, null, 50, "call"]
    },
    _ConstantMapKeyIterable: {
      "^": "Iterable;_map,$ti",
      get$iterator: function(_) {
        var t1 = this._map._keys;
        return new J.ArrayIterator(t1, t1.length, 0, null, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$length: function(_) {
        return this._map._keys.length;
      }
    },
    GeneralConstantMap: {
      "^": "ConstantMap;_jsData,$ti",
      _getMap$0: function() {
        var backingMap = this.$map;
        if (backingMap == null) {
          backingMap = new H.JsLinkedHashMap(0, null, null, null, null, null, 0, this.$ti);
          H.fillLiteralMap(this._jsData, backingMap);
          this.$map = backingMap;
        }
        return backingMap;
      },
      containsKey$1: function(_, key) {
        return this._getMap$0().containsKey$1(0, key);
      },
      $index: function(_, key) {
        return this._getMap$0().$index(0, key);
      },
      forEach$1: function(_, f) {
        this._getMap$0().forEach$1(0, f);
      },
      get$keys: function(_) {
        var t1 = this._getMap$0();
        return t1.get$keys(t1);
      },
      get$values: function(_) {
        var t1 = this._getMap$0();
        return t1.get$values(t1);
      },
      get$length: function(_) {
        var t1 = this._getMap$0();
        return t1.get$length(t1);
      }
    },
    JSInvocationMirror: {
      "^": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
      get$memberName: function() {
        return this.__js_helper$_memberName;
      },
      get$positionalArguments: function() {
        var t1, argumentCount, list, index;
        if (this._kind === 1)
          return C.List_empty;
        t1 = this._arguments;
        argumentCount = t1.length - this._namedArgumentNames.length;
        if (argumentCount === 0)
          return C.List_empty;
        list = [];
        for (index = 0; index < argumentCount; ++index) {
          if (index >= t1.length)
            return H.ioore(t1, index);
          list.push(t1[index]);
        }
        return J.JSArray_markUnmodifiableList(list);
      },
      get$namedArguments: function() {
        var t1, namedArgumentCount, t2, namedArgumentsStartIndex, t3, map, i, t4, t5;
        if (this._kind !== 0)
          return C.Map_empty;
        t1 = this._namedArgumentNames;
        namedArgumentCount = t1.length;
        t2 = this._arguments;
        namedArgumentsStartIndex = t2.length - namedArgumentCount;
        if (namedArgumentCount === 0)
          return C.Map_empty;
        t3 = P.Symbol0;
        map = new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [t3, null]);
        for (i = 0; i < namedArgumentCount; ++i) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t4 = t1[i];
          t5 = namedArgumentsStartIndex + i;
          if (t5 < 0 || t5 >= t2.length)
            return H.ioore(t2, t5);
          map.$indexSet(0, new H.Symbol(t4), t2[t5]);
        }
        return new H.ConstantMapView(map, [t3, null]);
      }
    },
    ReflectionInfo: {
      "^": "Object;jsFunction,data>,isAccessor,requiredParameterCount<,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
      defaultValue$1: function(_, parameter) {
        var t1 = this.requiredParameterCount;
        if (typeof parameter !== "number")
          return parameter.$lt();
        if (parameter < t1)
          return;
        return this.data[3 + parameter - t1];
      },
      static: {
        ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data.fixed$length = Array;
          data = data;
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
        }
      }
    },
    Primitives_initTicker_closure: {
      "^": "Closure:1;performance",
      call$0: function() {
        return C.JSNumber_methods.floor$0(1000 * this.performance.now());
      }
    },
    Primitives_functionNoSuchMethod_closure: {
      "^": "Closure:155;_box_0,$arguments,namedArgumentList",
      call$2: function($name, argument) {
        var t1 = this._box_0;
        t1.names = t1.names + "$" + H.S($name);
        this.namedArgumentList.push($name);
        this.$arguments.push(argument);
        ++t1.argumentCount;
      }
    },
    TypeErrorDecoder: {
      "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
      matchTypeError$1: function(message) {
        var match, result, t1;
        match = new RegExp(this._pattern).exec(message);
        if (match == null)
          return;
        result = Object.create(null);
        t1 = this._arguments;
        if (t1 !== -1)
          result.arguments = match[t1 + 1];
        t1 = this._argumentsExpr;
        if (t1 !== -1)
          result.argumentsExpr = match[t1 + 1];
        t1 = this._expr;
        if (t1 !== -1)
          result.expr = match[t1 + 1];
        t1 = this._method;
        if (t1 !== -1)
          result.method = match[t1 + 1];
        t1 = this._receiver;
        if (t1 !== -1)
          result.receiver = match[t1 + 1];
        return result;
      },
      static: {
        TypeErrorDecoder_extractPattern: function(message) {
          var match, $arguments, argumentsExpr, expr, method, receiver;
          message = message.replace(String({}), '$receiver$').replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
          match = message.match(/\\\$[a-zA-Z]+\\\$/g);
          if (match == null)
            match = [];
          $arguments = match.indexOf("\\$arguments\\$");
          argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
          expr = match.indexOf("\\$expr\\$");
          method = match.indexOf("\\$method\\$");
          receiver = match.indexOf("\\$receiver\\$");
          return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
        },
        TypeErrorDecoder_provokeCallErrorOn: function(expression) {
          return function($expr$) {
            var $argumentsExpr$ = '$arguments$';
            try {
              $expr$.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }(expression);
        },
        TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
          return function($expr$) {
            try {
              $expr$.$method$;
            } catch (e) {
              return e.message;
            }
          }(expression);
        }
      }
    },
    NullError: {
      "^": "Error;_message,_method",
      toString$0: function(_) {
        var t1 = this._method;
        if (t1 == null)
          return "NullError: " + H.S(this._message);
        return "NullError: method not found: '" + H.S(t1) + "' on null";
      }
    },
    JsNoSuchMethodError: {
      "^": "Error;_message,_method,_receiver",
      toString$0: function(_) {
        var t1, t2;
        t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        t2 = this._receiver;
        if (t2 == null)
          return "NoSuchMethodError: method not found: '" + H.S(t1) + "' (" + H.S(this._message) + ")";
        return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on '" + H.S(t2) + "' (" + H.S(this._message) + ")";
      },
      static: {
        JsNoSuchMethodError$: function(_message, match) {
          var t1, t2;
          t1 = match == null;
          t2 = t1 ? null : match.method;
          return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
        }
      }
    },
    UnknownJsTypeError: {
      "^": "Error;_message",
      toString$0: function(_) {
        var t1 = this._message;
        return t1.length === 0 ? "Error" : "Error: " + t1;
      }
    },
    ExceptionAndStackTrace: {
      "^": "Object;dartException,stackTrace<"
    },
    unwrapException_saveStackTrace: {
      "^": "Closure:0;ex",
      call$1: function(error) {
        if (!!J.getInterceptor(error).$isError)
          if (error.$thrownJsError == null)
            error.$thrownJsError = this.ex;
        return error;
      }
    },
    _StackTrace: {
      "^": "Object;_exception,_trace",
      toString$0: function(_) {
        var t1, trace;
        t1 = this._trace;
        if (t1 != null)
          return t1;
        t1 = this._exception;
        trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
        t1 = trace == null ? "" : trace;
        this._trace = t1;
        return t1;
      }
    },
    invokeClosure_closure: {
      "^": "Closure:1;closure",
      call$0: function() {
        return this.closure.call$0();
      }
    },
    invokeClosure_closure0: {
      "^": "Closure:1;closure,arg1",
      call$0: function() {
        return this.closure.call$1(this.arg1);
      }
    },
    invokeClosure_closure1: {
      "^": "Closure:1;closure,arg1,arg2",
      call$0: function() {
        return this.closure.call$2(this.arg1, this.arg2);
      }
    },
    invokeClosure_closure2: {
      "^": "Closure:1;closure,arg1,arg2,arg3",
      call$0: function() {
        return this.closure.call$3(this.arg1, this.arg2, this.arg3);
      }
    },
    invokeClosure_closure3: {
      "^": "Closure:1;closure,arg1,arg2,arg3,arg4",
      call$0: function() {
        return this.closure.call$4(this.arg1, this.arg2, this.arg3, this.arg4);
      }
    },
    Closure: {
      "^": "Object;",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this) + "'";
      },
      get$$call: function() {
        return this;
      },
      $isFunction: 1,
      get$$call: function() {
        return this;
      }
    },
    TearOffClosure: {
      "^": "Closure;"
    },
    StaticClosure: {
      "^": "TearOffClosure;",
      toString$0: function(_) {
        var $name = this.$static_name;
        if ($name == null)
          return "Closure of unknown static method";
        return "Closure '" + $name + "'";
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self,_target,_receiver,_name",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof H.BoundClosure))
          return false;
        return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
      },
      get$hashCode: function(_) {
        var t1, receiverHashCode;
        t1 = this._receiver;
        if (t1 == null)
          receiverHashCode = H.Primitives_objectHashCode(this._self);
        else
          receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
        return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this._target));
      },
      toString$0: function(_) {
        var receiver = this._receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this._name) + "' of " + H.Primitives_objectToHumanReadableString(receiver);
      },
      static: {
        BoundClosure_selfOf: function(closure) {
          return closure._self;
        },
        BoundClosure_receiverOf: function(closure) {
          return closure._receiver;
        },
        BoundClosure_selfFieldName: function() {
          var t1 = $.BoundClosure_selfFieldNameCache;
          if (t1 == null) {
            t1 = H.BoundClosure_computeFieldNamed("self");
            $.BoundClosure_selfFieldNameCache = t1;
          }
          return t1;
        },
        BoundClosure_computeFieldNamed: function(fieldName) {
          var template, t1, names, i, $name;
          template = new H.BoundClosure("self", "target", "receiver", "name");
          t1 = Object.getOwnPropertyNames(template);
          t1.fixed$length = Array;
          names = t1;
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }
      }
    },
    CastErrorImplementation: {
      "^": "Error;message>",
      toString$0: function(_) {
        return this.message;
      },
      static: {
        CastErrorImplementation$: function(actualType, expectedType) {
          return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
        }
      }
    },
    RuntimeError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      }
    },
    RuntimeType: {
      "^": "Object;"
    },
    RuntimeFunctionType: {
      "^": "RuntimeType;returnType<,parameterTypes,optionalParameterTypes,namedParameters",
      _isTest$1: function(expression) {
        var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
        return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
      },
      _extractFunctionTypeObjectFrom$1: function(o) {
        var interceptor = J.getInterceptor(o);
        return "$signature" in interceptor ? interceptor.$signature() : null;
      },
      toRti$0: function() {
        var result, t1, t2, namedRti, keys, i, $name;
        result = {func: "dynafunc"};
        t1 = this.returnType;
        t2 = J.getInterceptor(t1);
        if (!!t2.$isVoidRuntimeType)
          result.v = true;
        else if (!t2.$isDynamicRuntimeType)
          result.ret = t1.toRti$0();
        t1 = this.parameterTypes;
        if (t1 != null && t1.length !== 0)
          result.args = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0)
          result.opt = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.namedParameters;
        if (t1 != null) {
          namedRti = Object.create(null);
          keys = H.extractKeys(t1);
          for (t2 = keys.length, i = 0; i < t2; ++i) {
            $name = keys[i];
            namedRti[$name] = t1[$name].toRti$0();
          }
          result.named = namedRti;
        }
        return result;
      },
      toString$0: function(_) {
        var t1, t2, result, needsComma, i, type, keys, $name;
        t1 = this.parameterTypes;
        if (t1 != null)
          for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = t1[i];
            if (needsComma)
              result += ", ";
            result += H.S(type);
          }
        else {
          result = "(";
          needsComma = false;
        }
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0) {
          result = (needsComma ? result + ", " : result) + "[";
          for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = t1[i];
            if (needsComma)
              result += ", ";
            result += H.S(type);
          }
          result += "]";
        } else {
          t1 = this.namedParameters;
          if (t1 != null) {
            result = (needsComma ? result + ", " : result) + "{";
            keys = H.extractKeys(t1);
            for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
              $name = keys[i];
              if (needsComma)
                result += ", ";
              result += H.S(t1[$name].toRti$0()) + " " + $name;
            }
            result += "}";
          }
        }
        return result + (") -> " + H.S(this.returnType));
      },
      static: {
        RuntimeFunctionType_listToRti: function(list) {
          var result, t1, i;
          list = list;
          result = [];
          for (t1 = list.length, i = 0; i < t1; ++i)
            result.push(list[i].toRti$0());
          return result;
        }
      }
    },
    DynamicRuntimeType: {
      "^": "RuntimeType;",
      toString$0: function(_) {
        return "dynamic";
      },
      toRti$0: function() {
        return;
      }
    },
    RuntimeTypePlain: {
      "^": "RuntimeType;_jsConstructorName",
      toRti$0: function() {
        var t1, rti;
        t1 = this._jsConstructorName;
        rti = H.jsConstructorNameToRti(t1);
        if (rti == null)
          throw H.wrapException("no type for '" + t1 + "'");
        return rti;
      },
      toString$0: function(_) {
        return this._jsConstructorName;
      }
    },
    RuntimeTypeGeneric: {
      "^": "RuntimeType;_jsConstructorName,$arguments,rti",
      toRti$0: function() {
        var t1, result, t2, _i;
        t1 = this.rti;
        if (t1 != null)
          return t1;
        t1 = this._jsConstructorName;
        result = [H.jsConstructorNameToRti(t1)];
        if (0 >= result.length)
          return H.ioore(result, 0);
        if (result[0] == null)
          throw H.wrapException("no type for '" + t1 + "<...>'");
        for (t1 = this.$arguments, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          result.push(t1[_i].toRti$0());
        this.rti = result;
        return result;
      },
      toString$0: function(_) {
        var t1 = this.$arguments;
        return this._jsConstructorName + "<" + (t1 && C.JSArray_methods).join$1(t1, ", ") + ">";
      }
    },
    TypeImpl: {
      "^": "Object;_typeName,_unmangledName",
      toString$0: function(_) {
        var t1, unmangledName;
        t1 = this._unmangledName;
        if (t1 != null)
          return t1;
        unmangledName = function(str, names) {
          return str.replace(/[^<,> ]+/g, function(m) {
            return names[m] || m;
          });
        }(this._typeName, init.mangledGlobalNames);
        this._unmangledName = unmangledName;
        return unmangledName;
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this._typeName);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H.TypeImpl && J.$eq$(this._typeName, other._typeName);
      }
    },
    JsLinkedHashMap: {
      "^": "Object;_length,_strings,_nums,_rest,_first,_last,_modifications,$ti",
      get$length: function(_) {
        return this._length;
      },
      get$isEmpty: function(_) {
        return this._length === 0;
      },
      get$isNotEmpty: function(_) {
        return !this.get$isEmpty(this);
      },
      get$keys: function(_) {
        return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
      },
      get$values: function(_) {
        return H.MappedIterable_MappedIterable(this.get$keys(this), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
      },
      containsKey$1: function(_, key) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return false;
          return this._containsTableEntry$2(strings, key);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return false;
          return this._containsTableEntry$2(nums, key);
        } else
          return this.internalContainsKey$1(key);
      },
      internalContainsKey$1: function(key) {
        var rest = this._rest;
        if (rest == null)
          return false;
        return this.internalFindBucketIndex$2(this._getTableBucket$2(rest, this.internalComputeHashCode$1(key)), key) >= 0;
      },
      addAll$1: function(_, other) {
        other.forEach$1(0, new H.JsLinkedHashMap_addAll_closure(this));
      },
      $index: function(_, key) {
        var strings, cell, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return;
          cell = this._getTableCell$2(strings, key);
          return cell == null ? null : cell.get$hashMapCellValue();
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return;
          cell = this._getTableCell$2(nums, key);
          return cell == null ? null : cell.get$hashMapCellValue();
        } else
          return this.internalGet$1(key);
      },
      internalGet$1: function(key) {
        var rest, bucket, index;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableBucket$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].get$hashMapCellValue();
      },
      $indexSet: function(_, key, value) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null) {
            strings = this._newHashTable$0();
            this._strings = strings;
          }
          this._addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null) {
            nums = this._newHashTable$0();
            this._nums = nums;
          }
          this._addHashTableEntry$3(nums, key, value);
        } else
          this.internalSet$2(key, value);
      },
      internalSet$2: function(key, value) {
        var rest, hash, bucket, index;
        rest = this._rest;
        if (rest == null) {
          rest = this._newHashTable$0();
          this._rest = rest;
        }
        hash = this.internalComputeHashCode$1(key);
        bucket = this._getTableBucket$2(rest, hash);
        if (bucket == null)
          this._setTableEntry$3(rest, hash, [this._newLinkedCell$2(key, value)]);
        else {
          index = this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].set$hashMapCellValue(value);
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      },
      putIfAbsent$2: function(_, key, ifAbsent) {
        var value;
        if (this.containsKey$1(0, key))
          return this.$index(0, key);
        value = ifAbsent.call$0();
        this.$indexSet(0, key, value);
        return value;
      },
      remove$1: [function(_, key) {
        if (typeof key === "string")
          return this.__js_helper$_removeHashTableEntry$2(this._strings, key);
        else if (typeof key === "number" && (key & 0x3ffffff) === key)
          return this.__js_helper$_removeHashTableEntry$2(this._nums, key);
        else
          return this.internalRemove$1(key);
      }, "call$1", "get$remove", 2, 0, function() {
        return H.computeSignature(function(K, V) {
          return {func: 1, ret: V, args: [P.Object]};
        }, this.$receiver, "JsLinkedHashMap");
      }],
      internalRemove$1: function(key) {
        var rest, bucket, index, cell;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableBucket$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        cell = bucket.splice(index, 1)[0];
        this._unlinkCell$1(cell);
        return cell.get$hashMapCellValue();
      },
      clear$0: function(_) {
        if (this._length > 0) {
          this._last = null;
          this._first = null;
          this._rest = null;
          this._nums = null;
          this._strings = null;
          this._length = 0;
          this._modifications = this._modifications + 1 & 67108863;
        }
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        cell = this._first;
        modifications = this._modifications;
        for (; cell != null;) {
          action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
          if (modifications !== this._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell._next;
        }
      },
      _addHashTableEntry$3: function(table, key, value) {
        var cell = this._getTableCell$2(table, key);
        if (cell == null)
          this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
        else
          cell.set$hashMapCellValue(value);
      },
      __js_helper$_removeHashTableEntry$2: function(table, key) {
        var cell;
        if (table == null)
          return;
        cell = this._getTableCell$2(table, key);
        if (cell == null)
          return;
        this._unlinkCell$1(cell);
        this._deleteTableEntry$2(table, key);
        return cell.get$hashMapCellValue();
      },
      _newLinkedCell$2: function(key, value) {
        var cell, last;
        cell = new H.LinkedHashMapCell(key, value, null, null, [null, null]);
        if (this._first == null) {
          this._last = cell;
          this._first = cell;
        } else {
          last = this._last;
          cell._previous = last;
          last._next = cell;
          this._last = cell;
        }
        ++this._length;
        this._modifications = this._modifications + 1 & 67108863;
        return cell;
      },
      _unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell.get$_previous();
        next = cell.get$_next();
        if (previous == null)
          this._first = next;
        else
          previous._next = next;
        if (next == null)
          this._last = previous;
        else
          next._previous = previous;
        --this._length;
        this._modifications = this._modifications + 1 & 67108863;
      },
      internalComputeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].get$hashMapCellKey(), key))
            return i;
        return -1;
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      _getTableCell$2: function(table, key) {
        return table[key];
      },
      _getTableBucket$2: function(table, key) {
        return table[key];
      },
      _setTableEntry$3: function(table, key, value) {
        table[key] = value;
      },
      _deleteTableEntry$2: function(table, key) {
        delete table[key];
      },
      _containsTableEntry$2: function(table, key) {
        return this._getTableCell$2(table, key) != null;
      },
      _newHashTable$0: function() {
        var table = Object.create(null);
        this._setTableEntry$3(table, "<non-identifier-key>", table);
        this._deleteTableEntry$2(table, "<non-identifier-key>");
        return table;
      },
      $isInternalMap: 1,
      $isMap: 1,
      $asMap: null
    },
    JsLinkedHashMap_values_closure: {
      "^": "Closure:0;$this",
      call$1: [function(each) {
        return this.$this.$index(0, each);
      }, null, null, 2, 0, null, 39, "call"]
    },
    JsLinkedHashMap_addAll_closure: {
      "^": "Closure;$this",
      call$2: function(key, value) {
        this.$this.$indexSet(0, key, value);
      },
      $signature: function() {
        return H.computeSignature(function(K, V) {
          return {func: 1, args: [K, V]};
        }, this.$this, "JsLinkedHashMap");
      }
    },
    LinkedHashMapCell: {
      "^": "Object;hashMapCellKey<,hashMapCellValue@,_next<,_previous<,$ti"
    },
    LinkedHashMapKeyIterable: {
      "^": "Iterable;_map,$ti",
      get$length: function(_) {
        return this._map._length;
      },
      get$isEmpty: function(_) {
        return this._map._length === 0;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this._map;
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, null, null, this.$ti);
        t2._cell = t1._first;
        return t2;
      },
      contains$1: function(_, element) {
        return this._map.containsKey$1(0, element);
      },
      forEach$1: function(_, f) {
        var t1, cell, modifications;
        t1 = this._map;
        cell = t1._first;
        modifications = t1._modifications;
        for (; cell != null;) {
          f.call$1(cell.hashMapCellKey);
          if (modifications !== t1._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(t1));
          cell = cell._next;
        }
      },
      $isEfficientLength: 1
    },
    LinkedHashMapKeyIterator: {
      "^": "Object;_map,_modifications,_cell,__js_helper$_current,$ti",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1 = this._map;
        if (this._modifications !== t1._modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._cell;
          if (t1 == null) {
            this.__js_helper$_current = null;
            return false;
          } else {
            this.__js_helper$_current = t1.hashMapCellKey;
            this._cell = t1._next;
            return true;
          }
        }
      }
    },
    initHooks_closure: {
      "^": "Closure:0;getTag",
      call$1: function(o) {
        return this.getTag(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:112;getUnknownTag",
      call$2: function(o, tag) {
        return this.getUnknownTag(o, tag);
      }
    },
    initHooks_closure1: {
      "^": "Closure:3;prototypeForTag",
      call$1: function(tag) {
        return this.prototypeForTag(tag);
      }
    },
    JSSyntaxRegExp: {
      "^": "Object;pattern,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
      toString$0: function(_) {
        return "RegExp/" + this.pattern + "/";
      },
      get$_nativeGlobalVersion: function() {
        var t1 = this._nativeGlobalRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
        this._nativeGlobalRegExp = t1;
        return t1;
      },
      get$_nativeAnchoredVersion: function() {
        var t1 = this._nativeAnchoredRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern + "|()", t1.multiline, !t1.ignoreCase, true);
        this._nativeAnchoredRegExp = t1;
        return t1;
      },
      firstMatch$1: function(string) {
        var m = this._nativeRegExp.exec(H.checkString(string));
        if (m == null)
          return;
        return new H._MatchImplementation(this, m);
      },
      allMatches$2: function(_, string, start) {
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return new H._AllMatchesIterable(this, string, start);
      },
      allMatches$1: function($receiver, string) {
        return this.allMatches$2($receiver, string, 0);
      },
      _execGlobal$2: function(string, start) {
        var regexp, match;
        regexp = this.get$_nativeGlobalVersion();
        regexp.lastIndex = start;
        match = regexp.exec(string);
        if (match == null)
          return;
        return new H._MatchImplementation(this, match);
      },
      _execAnchored$2: function(string, start) {
        var regexp, match;
        regexp = this.get$_nativeAnchoredVersion();
        regexp.lastIndex = start;
        match = regexp.exec(string);
        if (match == null)
          return;
        if (0 >= match.length)
          return H.ioore(match, -1);
        if (match.pop() != null)
          return;
        return new H._MatchImplementation(this, match);
      },
      matchAsPrefix$2: function(_, string, start) {
        var t1 = J.getInterceptor$n(start);
        if (t1.$lt(start, 0) || t1.$gt(start, J.get$length$asx(string)))
          throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(string), null, null));
        return this._execAnchored$2(string, start);
      },
      $isRegExp: 1,
      static: {
        JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
          var m, i, g, regexp;
          m = multiLine ? "m" : "";
          i = caseSensitive ? "" : "i";
          g = global ? "g" : "";
          regexp = function(source, modifiers) {
            try {
              return new RegExp(source, modifiers);
            } catch (e) {
              return e;
            }
          }(source, m + i + g);
          if (regexp instanceof RegExp)
            return regexp;
          throw H.wrapException(new P.FormatException("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
        }
      }
    },
    _MatchImplementation: {
      "^": "Object;pattern,_match<",
      get$start: function(_) {
        return this._match.index;
      },
      get$end: function(_) {
        var t1 = this._match;
        return t1.index + t1[0].length;
      },
      group$1: function(index) {
        var t1 = this._match;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $index: function(_, index) {
        var t1 = this._match;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      start$0: function($receiver) {
        return this.get$start(this).call$0();
      },
      $isMatch: 1
    },
    _AllMatchesIterable: {
      "^": "IterableBase;_re,_string,_start",
      get$iterator: function(_) {
        return new H._AllMatchesIterator(this._re, this._string, this._start, null);
      },
      $asIterableBase: function() {
        return [P.Match];
      },
      $asIterable: function() {
        return [P.Match];
      }
    },
    _AllMatchesIterator: {
      "^": "Object;_regExp,_string,_nextIndex,__js_helper$_current",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1, t2, match, nextIndex;
        t1 = this._string;
        if (t1 == null)
          return false;
        t2 = this._nextIndex;
        if (t2 <= t1.length) {
          match = this._regExp._execGlobal$2(t1, t2);
          if (match != null) {
            this.__js_helper$_current = match;
            t1 = match._match;
            t2 = t1.index;
            nextIndex = t2 + t1[0].length;
            this._nextIndex = t2 === nextIndex ? nextIndex + 1 : nextIndex;
            return true;
          }
        }
        this.__js_helper$_current = null;
        this._string = null;
        return false;
      }
    },
    StringMatch: {
      "^": "Object;start>,input,pattern",
      get$end: function(_) {
        return J.$add$ns(this.start, this.pattern.length);
      },
      $index: function(_, g) {
        return this.group$1(g);
      },
      group$1: function(group_) {
        if (!J.$eq$(group_, 0))
          throw H.wrapException(P.RangeError$value(group_, null, null));
        return this.pattern;
      },
      start$0: function($receiver) {
        return this.start.call$0();
      },
      $isMatch: 1
    },
    _StringAllMatchesIterable: {
      "^": "Iterable;_input,_pattern,__js_helper$_index",
      get$iterator: function(_) {
        return new H._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index, null);
      },
      get$first: function(_) {
        var t1, t2, index;
        t1 = this._input;
        t2 = this._pattern;
        index = t1.indexOf(t2, this.__js_helper$_index);
        if (index >= 0)
          return new H.StringMatch(index, t1, t2);
        throw H.wrapException(H.IterableElementError_noElement());
      },
      $asIterable: function() {
        return [P.Match];
      }
    },
    _StringAllMatchesIterator: {
      "^": "Object;_input,_pattern,__js_helper$_index,__js_helper$_current",
      moveNext$0: function() {
        var t1, t2, t3, t4, t5, index, end;
        t1 = this.__js_helper$_index;
        t2 = this._pattern;
        t3 = t2.length;
        t4 = this._input;
        t5 = t4.length;
        if (t1 + t3 > t5) {
          this.__js_helper$_current = null;
          return false;
        }
        index = t4.indexOf(t2, t1);
        if (index < 0) {
          this.__js_helper$_index = t5 + 1;
          this.__js_helper$_current = null;
          return false;
        }
        end = index + t3;
        this.__js_helper$_current = new H.StringMatch(index, t4, t2);
        this.__js_helper$_index = end === this.__js_helper$_index ? end + 1 : end;
        return true;
      },
      get$current: function() {
        return this.__js_helper$_current;
      }
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      var t1 = H.setRuntimeTypeInfo(victim ? Object.keys(victim) : [], [null]);
      t1.fixed$length = Array;
      return t1;
    }
  }], ["dart2js._js_primitives", "dart:_js_primitives",, H, {
    "^": "",
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  }], ["dart.typed_data.implementation", "dart:_native_typed_data",, H, {
    "^": "",
    _checkLength: function($length) {
      if (typeof $length !== "number" || Math.floor($length) !== $length)
        throw H.wrapException(P.ArgumentError$("Invalid length " + H.S($length)));
      return $length;
    },
    _ensureNativeList: function(list) {
      return list;
    },
    NativeInt8List_NativeInt8List$fromList: function(elements) {
      return new Int8Array(H._ensureNativeList(elements));
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      var t1 = $length == null;
      !t1;
      return t1 ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = J.$gt$n(start, $length);
        else
          t1 = end >>> 0 !== end || J.$gt$n(start, end) || J.$gt$n(end, $length);
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: {
      "^": "Interceptor;",
      get$runtimeType: function(receiver) {
        return C.Type_ByteBuffer_RkP;
      },
      $isNativeByteBuffer: 1,
      $isByteBuffer: 1,
      $isObject: 1,
      "%": "ArrayBuffer"
    },
    NativeTypedData: {
      "^": "Interceptor;",
      _invalidPosition$3: function(receiver, position, $length, $name) {
        if (typeof position !== "number" || Math.floor(position) !== position)
          throw H.wrapException(P.ArgumentError$value(position, $name, "Invalid list position"));
        else
          throw H.wrapException(P.RangeError$range(position, 0, $length, $name, null));
      },
      _checkPosition$3: function(receiver, position, $length, $name) {
        if (position >>> 0 !== position || position > $length)
          this._invalidPosition$3(receiver, position, $length, $name);
      },
      $isNativeTypedData: 1,
      $isTypedData: 1,
      $isObject: 1,
      "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
    },
    NativeByteData: {
      "^": "NativeTypedData;",
      get$runtimeType: function(receiver) {
        return C.Type_ByteData_zNC;
      },
      $isTypedData: 1,
      $isObject: 1,
      "%": "DataView"
    },
    NativeTypedArray: {
      "^": "NativeTypedData;",
      get$length: function(receiver) {
        return receiver.length;
      },
      _setRangeFast$4: function(receiver, start, end, source, skipCount) {
        var targetLength, count, sourceLength;
        targetLength = receiver.length;
        this._checkPosition$3(receiver, start, targetLength, "start");
        this._checkPosition$3(receiver, end, targetLength, "end");
        if (J.$gt$n(start, end))
          throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
        count = J.$sub$n(end, start);
        if (J.$lt$n(skipCount, 0))
          throw H.wrapException(P.ArgumentError$(skipCount));
        sourceLength = source.length;
        if (typeof skipCount !== "number")
          return H.iae(skipCount);
        if (typeof count !== "number")
          return H.iae(count);
        if (sourceLength - skipCount < count)
          throw H.wrapException(new P.StateError("Not enough elements"));
        if (skipCount !== 0 || sourceLength !== count)
          source = source.subarray(skipCount, skipCount + count);
        receiver.set(source, start);
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull,
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull
    },
    NativeTypedArrayOfDouble: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
          this._setRangeFast$4(receiver, start, end, iterable, skipCount);
          return;
        }
        this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      }
    },
    NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;",
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $asList: function() {
        return [P.$double];
      },
      $asIterable: function() {
        return [P.$double];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;",
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $asList: function() {
        return [P.$double];
      },
      $asIterable: function() {
        return [P.$double];
      }
    },
    NativeTypedArrayOfInt: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
      $indexSet: function(receiver, index, value) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
          this._setRangeFast$4(receiver, start, end, iterable, skipCount);
          return;
        }
        this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    },
    NativeTypedArray_ListMixin0: {
      "^": "NativeTypedArray+ListMixin;",
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $asList: function() {
        return [P.$int];
      },
      $asIterable: function() {
        return [P.$int];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin0: {
      "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;",
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $asList: function() {
        return [P.$int];
      },
      $asIterable: function() {
        return [P.$int];
      }
    },
    NativeFloat32List: {
      "^": "NativeTypedArrayOfDouble;",
      get$runtimeType: function(receiver) {
        return C.Type_Float32List_LB7;
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      },
      "%": "Float32Array"
    },
    NativeFloat64List: {
      "^": "NativeTypedArrayOfDouble;",
      get$runtimeType: function(receiver) {
        return C.Type_Float64List_LB7;
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      },
      "%": "Float64Array"
    },
    NativeInt16List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Int16List_uXf;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int16Array"
    },
    NativeInt32List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Int32List_O50;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int32Array"
    },
    NativeInt8List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Int8List_ekJ;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int8Array"
    },
    NativeUint16List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Uint16List_2bx;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Uint16Array"
    },
    NativeUint32List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Uint32List_2bx;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Uint32Array"
    },
    NativeUint8ClampedList: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Uint8ClampedList_Jik;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "CanvasPixelArray|Uint8ClampedArray"
    },
    NativeUint8List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Uint8List_WLA;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
      },
      $isNativeUint8List: 1,
      $isUint8List: 1,
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": ";Uint8Array"
    }
  }], ["dart.async", "dart:async",, P, {
    "^": "",
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 28],
    _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 28],
    _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
      P.Timer__createTimer(C.Duration_0, callback);
    }, "call$1", "async__AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 28],
    _asyncHelper: function(object, bodyFunctionOrErrorCode, completer) {
      if (bodyFunctionOrErrorCode === 0) {
        J.complete$1$x(completer, object);
        return;
      } else if (bodyFunctionOrErrorCode === 1) {
        completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
        return;
      }
      P._awaitOnObject(object, bodyFunctionOrErrorCode);
      return completer.get$future();
    },
    _awaitOnObject: function(object, bodyFunction) {
      var thenCallback, errorCallback, t1, future;
      thenCallback = new P._awaitOnObject_closure(bodyFunction);
      errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      t1 = J.getInterceptor(object);
      if (!!t1.$is_Future)
        object._thenNoZoneRegistration$2(thenCallback, errorCallback);
      else if (!!t1.$isFuture)
        object.then$2$onError(thenCallback, errorCallback);
      else {
        future = new P._Future(0, $.Zone__current, null, [null]);
        future._state = 4;
        future._resultOrListeners = object;
        future._thenNoZoneRegistration$2(thenCallback, null);
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      $.Zone__current.toString;
      return new P._wrapJsFunctionForAsync_closure($protected);
    },
    _invokeErrorHandler: function(errorHandler, error, stackTrace) {
      var t1 = H.getDynamicRuntimeType();
      t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
      if (t1)
        return errorHandler.call$2(error, stackTrace);
      else
        return errorHandler.call$1(error);
    },
    _registerErrorHandler: function(errorHandler, zone) {
      var t1 = H.getDynamicRuntimeType();
      t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
      if (t1) {
        zone.toString;
        return errorHandler;
      } else {
        zone.toString;
        return errorHandler;
      }
    },
    Future_Future$sync: function(computation, $T) {
      var result, error, stackTrace, t1, exception;
      try {
        result = computation.call$0();
        t1 = new P._Future(0, $.Zone__current, null, [$T]);
        t1._asyncComplete$1(result);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        error = t1;
        stackTrace = H.getTraceFromException(exception);
        return P.Future_Future$error(error, stackTrace, $T);
      }
    },
    Future_Future$value: function(value, $T) {
      var t1 = new P._Future(0, $.Zone__current, null, [$T]);
      t1._asyncComplete$1(value);
      return t1;
    },
    Future_Future$error: function(error, stackTrace, $T) {
      var t1;
      error = error != null ? error : new P.NullThrownError();
      t1 = $.Zone__current;
      if (t1 !== C.C__RootZone)
        t1.toString;
      t1 = new P._Future(0, t1, null, [$T]);
      t1._asyncCompleteError$2(error, stackTrace);
      return t1;
    },
    Future_Future$delayed: function(duration, computation, $T) {
      var result = new P._Future(0, $.Zone__current, null, [$T]);
      P.Timer_Timer(duration, new P.closure0(computation, result));
      return result;
    },
    Future_wait: function(futures, cleanUp, eagerError) {
      var t1, result, handleError, future, pos, e, st, t2, values, exception;
      t1 = {};
      result = new P._Future(0, $.Zone__current, null, [P.List]);
      t1.values = null;
      t1.remaining = 0;
      t1.error = null;
      t1.stackTrace = null;
      handleError = new P.Future_wait_handleError(t1, false, cleanUp, result);
      try {
        for (t2 = J.get$iterator$ax(futures); t2.moveNext$0();) {
          future = t2.get$current();
          pos = t1.remaining;
          future.then$2$onError(new P.Future_wait_closure(t1, false, cleanUp, result, pos), handleError);
          ++t1.remaining;
        }
        t2 = t1.remaining;
        if (t2 === 0) {
          t2 = new P._Future(0, $.Zone__current, null, [null]);
          t2._asyncComplete$1(C.List_empty);
          return t2;
        }
        values = new Array(t2);
        values.fixed$length = Array;
        t1.values = values;
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        st = H.getTraceFromException(exception);
        if (t1.remaining === 0 || false)
          return P.Future_Future$error(e, st, null);
        else {
          t1.error = e;
          t1.stackTrace = st;
        }
      }
      return result;
    },
    Future_forEach: function(input, f) {
      return P.Future_doWhile(new P.Future_forEach_closure(f, J.get$iterator$ax(input)));
    },
    Future_doWhile: function(f) {
      var t1, t2, doneSignal, nextIteration;
      t1 = {};
      t2 = $.Zone__current;
      doneSignal = new P._Future(0, t2, null, [null]);
      t1.nextIteration = null;
      nextIteration = t2.bindUnaryCallback$2$runGuarded(new P.Future_doWhile_closure(t1, f, doneSignal), true);
      t1.nextIteration = nextIteration;
      nextIteration.call$1(true);
      return doneSignal;
    },
    Completer_Completer$sync: function($T) {
      return new P._SyncCompleter(new P._Future(0, $.Zone__current, null, [$T]), [$T]);
    },
    _completeWithErrorCallback: function(result, error, stackTrace) {
      $.Zone__current.toString;
      result._completeError$2(error, stackTrace);
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = J.get$next$x(t1);
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.get$callback().call$0();
      }
    },
    _startMicrotaskLoop: [function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    }, "call$0", "async___startMicrotaskLoop$closure", 0, 0, 2],
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback, null);
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else {
        $._lastCallback.next = newEntry;
        $._lastCallback = newEntry;
      }
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var t1, entry, t2;
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback, null);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t2.next;
        t2.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      P._rootScheduleMicrotask(null, null, currentZone, currentZone.bindCallback$2$runGuarded(callback, true));
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      return new P._StreamIterator(null, stream, false, [$T]);
    },
    StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
      return sync ? new P._SyncStreamController(null, 0, null, onListen, onPause, onResume, onCancel, [$T]) : new P._AsyncStreamController(null, 0, null, onListen, onPause, onResume, onCancel, [$T]);
    },
    StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
      return sync ? new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null, [$T]) : new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null, [$T]);
    },
    _runGuarded: function(notificationHandler) {
      var result, e, s, exception, t1;
      if (notificationHandler == null)
        return;
      try {
        result = notificationHandler.call$0();
        if (!!J.getInterceptor(result).$isFuture)
          return result;
        return;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        t1 = $.Zone__current;
        t1.toString;
        P._rootHandleUncaughtError(null, null, t1, e, s);
      }
    },
    _nullDataHandler: [function(value) {
    }, "call$1", "async___nullDataHandler$closure", 2, 0, 15, 7],
    _nullErrorHandler: [function(error, stackTrace) {
      var t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(null, null, t1, error, stackTrace);
    }, function(error) {
      return P._nullErrorHandler(error, null);
    }, "call$2", "call$1", "async___nullErrorHandler$closure", 2, 2, 46, 2, 8, 16],
    _nullDoneHandler: [function() {
    }, "call$0", "async___nullDoneHandler$closure", 0, 0, 2],
    _runUserCode: function(userCode, onSuccess, onError) {
      var e, s, replacement, error, stackTrace, exception, t1;
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        $.Zone__current.toString;
        replacement = null;
        if (replacement == null)
          onError.call$2(e, s);
        else {
          t1 = J.get$error$x(replacement);
          error = t1;
          stackTrace = replacement.get$stackTrace();
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError: function(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0(0);
      if (!!J.getInterceptor(cancelFuture).$isFuture && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorClosure: function(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    _cancelAndValue: function(subscription, future, value) {
      var cancelFuture = subscription.cancel$0(0);
      if (!!J.getInterceptor(cancelFuture).$isFuture && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    _addErrorWithReplacement: function(sink, error, stackTrace) {
      $.Zone__current.toString;
      sink._addError$2(error, stackTrace);
    },
    Timer_Timer: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone) {
        t1.toString;
        return P.Timer__createTimer(duration, callback);
      }
      return P.Timer__createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
    },
    Timer_Timer$periodic: function(duration, callback) {
      var t1, boundCallback;
      t1 = $.Zone__current;
      if (t1 === C.C__RootZone) {
        t1.toString;
        return P.Timer__createPeriodicTimer(duration, callback);
      }
      boundCallback = t1.bindUnaryCallback$2$runGuarded(callback, true);
      $.Zone__current.toString;
      return P.Timer__createPeriodicTimer(duration, boundCallback);
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = C.JSNumber_methods._tdivFast$1(duration._duration, 1000);
      return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Timer__createPeriodicTimer: function(duration, callback) {
      var milliseconds = C.JSNumber_methods._tdivFast$1(duration._duration, 1000);
      return H.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1 = C.C__RootZone !== zone;
      if (t1)
        f = zone.bindCallback$2$runGuarded(f, !(!t1 || false));
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: {
      "^": "Closure:0;_box_0",
      call$1: [function(_) {
        var t1, f;
        --init.globalState.topEventLoop._activeJsAsyncCount;
        t1 = this._box_0;
        f = t1.storedCallback;
        t1.storedCallback = null;
        f.call$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    _AsyncRun__initializeScheduleImmediate_closure: {
      "^": "Closure:159;_box_0,div,span",
      call$1: function(callback) {
        var t1, t2;
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._box_0.storedCallback = callback;
        t1 = this.div;
        t2 = this.span;
        t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
      }
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
      "^": "Closure:1;callback",
      call$0: [function() {
        --init.globalState.topEventLoop._activeJsAsyncCount;
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
      "^": "Closure:1;callback",
      call$0: [function() {
        --init.globalState.topEventLoop._activeJsAsyncCount;
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _awaitOnObject_closure: {
      "^": "Closure:0;bodyFunction",
      call$1: [function(result) {
        return this.bodyFunction.call$2(0, result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    _awaitOnObject_closure0: {
      "^": "Closure:42;bodyFunction",
      call$2: [function(error, stackTrace) {
        this.bodyFunction.call$2(1, new H.ExceptionAndStackTrace(error, stackTrace));
      }, null, null, 4, 0, null, 8, 16, "call"]
    },
    _wrapJsFunctionForAsync_closure: {
      "^": "Closure:183;$protected",
      call$2: [function(errorCode, result) {
        this.$protected(errorCode, result);
      }, null, null, 4, 0, null, 145, 3, "call"]
    },
    _IterationMarker: {
      "^": "Object;value>,state",
      toString$0: function(_) {
        return "IterationMarker(" + this.state + ", " + H.S(this.value) + ")";
      },
      static: {
        _IterationMarker_yieldStar: function(values) {
          return new P._IterationMarker(values, 1);
        },
        _IterationMarker_endOfIteration: function() {
          return C._IterationMarker_null_2;
        },
        _IterationMarker_uncaughtError: function(error) {
          return new P._IterationMarker(error, 3);
        }
      }
    },
    _SyncStarIterator: {
      "^": "Object;_body,_async$_current,_nestedIterator,_suspendedBodies",
      get$current: function() {
        var t1 = this._nestedIterator;
        return t1 == null ? this._async$_current : t1.get$current();
      },
      moveNext$0: function() {
        var t1, value, state, inner;
        for (; true;) {
          t1 = this._nestedIterator;
          if (t1 != null)
            if (t1.moveNext$0())
              return true;
            else
              this._nestedIterator = null;
          value = function(body, SUCCESS, ERROR) {
            var errorValue, errorCode = SUCCESS;
            while (true)
              try {
                return body(errorCode, errorValue);
              } catch (error) {
                errorValue = error;
                errorCode = ERROR;
              }
          }(this._body, 0, 1);
          if (value instanceof P._IterationMarker) {
            state = value.state;
            if (state === 2) {
              t1 = this._suspendedBodies;
              if (t1 == null || t1.length === 0) {
                this._async$_current = null;
                return false;
              }
              if (0 >= t1.length)
                return H.ioore(t1, -1);
              this._body = t1.pop();
              continue;
            } else {
              t1 = value.value;
              if (state === 3)
                throw t1;
              else {
                inner = J.get$iterator$ax(t1);
                if (!!inner.$is_SyncStarIterator) {
                  t1 = this._suspendedBodies;
                  if (t1 == null) {
                    t1 = [];
                    this._suspendedBodies = t1;
                  }
                  t1.push(this._body);
                  this._body = inner._body;
                  continue;
                } else {
                  this._nestedIterator = inner;
                  continue;
                }
              }
            }
          } else {
            this._async$_current = value;
            return true;
          }
        }
        return false;
      }
    },
    _SyncStarIterable: {
      "^": "IterableBase;_outerHelper",
      get$iterator: function(_) {
        return new P._SyncStarIterator(this._outerHelper(), null, null, null);
      },
      $asIterableBase: Isolate.functionThatReturnsNull,
      $asIterable: Isolate.functionThatReturnsNull,
      static: {
        _SyncStarIterable$: function(_outerHelper) {
          return new P._SyncStarIterable(_outerHelper);
        }
      }
    },
    _BroadcastStream: {
      "^": "_ControllerStream;_async$_controller,$ti"
    },
    _BroadcastSubscription: {
      "^": "_ControllerSubscription;_eventState@,_async$_next@,_async$_previous@,_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending,$ti",
      _expectsEvent$1: function(eventId) {
        return (this._eventState & 1) === eventId;
      },
      _toggleEventId$0: function() {
        this._eventState ^= 1;
      },
      get$_isFiring: function() {
        return (this._eventState & 2) !== 0;
      },
      _setRemoveAfterFiring$0: function() {
        this._eventState |= 4;
      },
      get$_removeAfterFiring: function() {
        return (this._eventState & 4) !== 0;
      },
      _onPause$0: [function() {
      }, "call$0", "get$_onPause", 0, 0, 2],
      _onResume$0: [function() {
      }, "call$0", "get$_onResume", 0, 0, 2]
    },
    _BroadcastStreamController: {
      "^": "Object;_state<,$ti",
      get$isPaused: function() {
        return false;
      },
      get$_mayAddEvent: function() {
        return this._state < 4;
      },
      _ensureDoneFuture$0: function() {
        var t1 = this._doneFuture;
        if (t1 != null)
          return t1;
        t1 = new P._Future(0, $.Zone__current, null, [null]);
        this._doneFuture = t1;
        return t1;
      },
      _addListener$1: function(subscription) {
        var oldLast;
        subscription.set$_eventState(this._state & 1);
        oldLast = this._lastSubscription;
        this._lastSubscription = subscription;
        subscription.set$_async$_next(null);
        subscription.set$_async$_previous(oldLast);
        if (oldLast == null)
          this._firstSubscription = subscription;
        else
          oldLast.set$_async$_next(subscription);
      },
      _removeListener$1: function(subscription) {
        var previous, next;
        previous = subscription.get$_async$_previous();
        next = subscription.get$_async$_next();
        if (previous == null)
          this._firstSubscription = next;
        else
          previous.set$_async$_next(next);
        if (next == null)
          this._lastSubscription = previous;
        else
          next.set$_async$_previous(previous);
        subscription.set$_async$_previous(subscription);
        subscription.set$_async$_next(subscription);
      },
      _subscribe$4: function(onData, onError, onDone, cancelOnError) {
        var t1, t2, subscription;
        if ((this._state & 4) !== 0) {
          if (onDone == null)
            onDone = P.async___nullDoneHandler$closure();
          t1 = new P._DoneStreamSubscription($.Zone__current, 0, onDone, this.$ti);
          t1._schedule$0();
          return t1;
        }
        t1 = $.Zone__current;
        t2 = cancelOnError ? 1 : 0;
        subscription = new P._BroadcastSubscription(0, null, null, this, null, null, null, t1, t2, null, null, this.$ti);
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
        subscription._async$_previous = subscription;
        subscription._async$_next = subscription;
        this._addListener$1(subscription);
        t1 = this._firstSubscription;
        t2 = this._lastSubscription;
        if (t1 == null ? t2 == null : t1 === t2)
          P._runGuarded(this.onListen);
        return subscription;
      },
      _recordCancel$1: function(sub) {
        if (sub.get$_async$_next() === sub)
          return;
        if (sub.get$_isFiring())
          sub._setRemoveAfterFiring$0();
        else {
          this._removeListener$1(sub);
          if ((this._state & 2) === 0 && this._firstSubscription == null)
            this._callOnCancel$0();
        }
        return;
      },
      _recordPause$1: function(subscription) {
      },
      _recordResume$1: function(subscription) {
      },
      _addEventError$0: ["super$_BroadcastStreamController$_addEventError", function() {
        if ((this._state & 4) !== 0)
          return new P.StateError("Cannot add new events after calling close");
        return new P.StateError("Cannot add new events while doing an addStream");
      }],
      add$1: [function(_, data) {
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        this._sendData$1(data);
      }, "call$1", "get$add", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, v: true, args: [T]};
        }, this.$receiver, "_BroadcastStreamController");
      }, 11],
      addError$2: [function(error, stackTrace) {
        error = error != null ? error : new P.NullThrownError();
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        $.Zone__current.toString;
        this._sendError$2(error, stackTrace);
      }, function(error) {
        return this.addError$2(error, null);
      }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 44, 2, 8, 16],
      close$0: function(_) {
        var doneFuture;
        if ((this._state & 4) !== 0)
          return this._doneFuture;
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        this._state |= 4;
        doneFuture = this._ensureDoneFuture$0();
        this._sendDone$0();
        return doneFuture;
      },
      _forEachListener$1: function(action) {
        var t1, subscription, id, next;
        t1 = this._state;
        if ((t1 & 2) !== 0)
          throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
        subscription = this._firstSubscription;
        if (subscription == null)
          return;
        id = t1 & 1;
        this._state = t1 ^ 3;
        for (; subscription != null;)
          if (subscription._expectsEvent$1(id)) {
            subscription.set$_eventState(subscription.get$_eventState() | 2);
            action.call$1(subscription);
            subscription._toggleEventId$0();
            next = subscription.get$_async$_next();
            if (subscription.get$_removeAfterFiring())
              this._removeListener$1(subscription);
            subscription.set$_eventState(subscription.get$_eventState() & 4294967293);
            subscription = next;
          } else
            subscription = subscription.get$_async$_next();
        this._state &= 4294967293;
        if (this._firstSubscription == null)
          this._callOnCancel$0();
      },
      _callOnCancel$0: function() {
        if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
          this._doneFuture._asyncComplete$1(null);
        P._runGuarded(this.onCancel);
      }
    },
    _SyncBroadcastStreamController: {
      "^": "_BroadcastStreamController;onListen,onCancel,_state,_firstSubscription,_lastSubscription,_addStreamState,_doneFuture,$ti",
      get$_mayAddEvent: function() {
        return P._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
      },
      _addEventError$0: function() {
        if ((this._state & 2) !== 0)
          return new P.StateError("Cannot fire new event. Controller is already firing an event");
        return this.super$_BroadcastStreamController$_addEventError();
      },
      _sendData$1: function(data) {
        var t1, t2;
        t1 = this._firstSubscription;
        if (t1 == null)
          return;
        t2 = this._lastSubscription;
        if (t1 == null ? t2 == null : t1 === t2) {
          this._state |= 2;
          t1._async$_add$1(0, data);
          this._state &= 4294967293;
          if (this._firstSubscription == null)
            this._callOnCancel$0();
          return;
        }
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
      },
      _sendError$2: function(error, stackTrace) {
        if (this._firstSubscription == null)
          return;
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
      },
      _sendDone$0: function() {
        if (this._firstSubscription != null)
          this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
        else
          this._doneFuture._asyncComplete$1(null);
      }
    },
    _SyncBroadcastStreamController__sendData_closure: {
      "^": "Closure;$this,data",
      call$1: function(subscription) {
        subscription._async$_add$1(0, this.data);
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this.$this, "_SyncBroadcastStreamController");
      }
    },
    _SyncBroadcastStreamController__sendError_closure: {
      "^": "Closure;$this,error,stackTrace",
      call$1: function(subscription) {
        subscription._addError$2(this.error, this.stackTrace);
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this.$this, "_SyncBroadcastStreamController");
      }
    },
    _SyncBroadcastStreamController__sendDone_closure: {
      "^": "Closure;$this",
      call$1: function(subscription) {
        subscription._close$0();
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this.$this, "_SyncBroadcastStreamController");
      }
    },
    _AsyncBroadcastStreamController: {
      "^": "_BroadcastStreamController;onListen,onCancel,_state,_firstSubscription,_lastSubscription,_addStreamState,_doneFuture,$ti",
      _sendData$1: function(data) {
        var subscription, t1;
        for (subscription = this._firstSubscription, t1 = this.$ti; subscription != null; subscription = subscription.get$_async$_next())
          subscription._addPending$1(new P._DelayedData(data, null, t1));
      },
      _sendError$2: function(error, stackTrace) {
        var subscription;
        for (subscription = this._firstSubscription; subscription != null; subscription = subscription.get$_async$_next())
          subscription._addPending$1(new P._DelayedError(error, stackTrace, null));
      },
      _sendDone$0: function() {
        var subscription = this._firstSubscription;
        if (subscription != null)
          for (; subscription != null; subscription = subscription.get$_async$_next())
            subscription._addPending$1(C.C__DelayedDone);
        else
          this._doneFuture._asyncComplete$1(null);
      }
    },
    Future: {
      "^": "Object;$ti"
    },
    closure0: {
      "^": "Closure:1;computation,result",
      call$0: function() {
        var e, s, t1, exception;
        try {
          t1 = this.computation;
          t1 = t1 == null ? t1 : t1.call$0();
          this.result._complete$1(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this.result, e, s);
        }
      }
    },
    Future_wait_handleError: {
      "^": "Closure:173;_box_0,eagerError,cleanUp,result",
      call$2: [function(theError, theStackTrace) {
        var t1, t2;
        t1 = this._box_0;
        t2 = --t1.remaining;
        if (t1.values != null) {
          t1.values = null;
          if (t1.remaining === 0 || this.eagerError)
            this.result._completeError$2(theError, theStackTrace);
          else {
            t1.error = theError;
            t1.stackTrace = theStackTrace;
          }
        } else if (t2 === 0 && !this.eagerError)
          this.result._completeError$2(t1.error, t1.stackTrace);
      }, null, null, 4, 0, null, 90, 100, "call"]
    },
    Future_wait_closure: {
      "^": "Closure:45;_box_0,eagerError,cleanUp,result,pos",
      call$1: [function(value) {
        var t1, t2, t3;
        t1 = this._box_0;
        t2 = --t1.remaining;
        t3 = t1.values;
        if (t3 != null) {
          t1 = this.pos;
          if (t1 < 0 || t1 >= t3.length)
            return H.ioore(t3, t1);
          t3[t1] = value;
          if (t2 === 0)
            this.result._completeWithValue$1(t3);
        } else if (t1.remaining === 0 && !this.eagerError)
          this.result._completeError$2(t1.error, t1.stackTrace);
      }, null, null, 2, 0, null, 7, "call"]
    },
    Future_forEach_closure: {
      "^": "Closure:1;f,iterator",
      call$0: function() {
        var t1 = this.iterator;
        if (!t1.moveNext$0())
          return false;
        return P.Future_Future$sync(new P.Future_forEach__closure(this.f, t1), null).then$1(new P.Future_forEach__closure0());
      }
    },
    Future_forEach__closure: {
      "^": "Closure:1;f,iterator",
      call$0: function() {
        return this.f.call$1(this.iterator.get$current());
      }
    },
    Future_forEach__closure0: {
      "^": "Closure:0;",
      call$1: [function(_) {
        return true;
      }, null, null, 2, 0, null, 1, "call"]
    },
    Future_doWhile_closure: {
      "^": "Closure:18;_box_0,f,doneSignal",
      call$1: function(keepGoing) {
        var t1 = this.doneSignal;
        if (keepGoing === true)
          P.Future_Future$sync(this.f, null).then$2$onError(this._box_0.nextIteration, t1.get$_completeError());
        else
          t1._complete$1(null);
      }
    },
    TimeoutException: {
      "^": "Object;message>,duration",
      toString$0: function(_) {
        var result = "TimeoutException after " + this.duration.toString$0(0);
        return result + ": " + this.message;
      }
    },
    _Completer: {
      "^": "Object;future<,$ti",
      completeError$2: [function(error, stackTrace) {
        error = error != null ? error : new P.NullThrownError();
        if (this.future._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        $.Zone__current.toString;
        this._completeError$2(error, stackTrace);
      }, function(error) {
        return this.completeError$2(error, null);
      }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 44, 2, 8, 16]
    },
    _AsyncCompleter: {
      "^": "_Completer;future,$ti",
      complete$1: function(_, value) {
        var t1 = this.future;
        if (t1._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        t1._asyncComplete$1(value);
      },
      complete$0: function($receiver) {
        return this.complete$1($receiver, null);
      },
      _completeError$2: function(error, stackTrace) {
        this.future._asyncCompleteError$2(error, stackTrace);
      }
    },
    _SyncCompleter: {
      "^": "_Completer;future,$ti",
      complete$1: function(_, value) {
        var t1 = this.future;
        if (t1._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        t1._complete$1(value);
      },
      _completeError$2: function(error, stackTrace) {
        this.future._completeError$2(error, stackTrace);
      }
    },
    _FutureListener: {
      "^": "Object;_nextListener@,result>,state,callback<,errorCallback,$ti",
      get$_zone: function() {
        return this.result._zone;
      },
      get$handlesValue: function() {
        return (this.state & 1) !== 0;
      },
      get$handlesError: function() {
        return (this.state & 2) !== 0;
      },
      get$handlesComplete: function() {
        return this.state === 8;
      },
      get$hasErrorCallback: function() {
        return this.errorCallback != null;
      },
      handleValue$1: function(sourceResult) {
        return this.result._zone.runUnary$2(this.callback, sourceResult);
      },
      matchesErrorTest$1: function(asyncError) {
        if (this.state !== 6)
          return true;
        return this.result._zone.runUnary$2(this.callback, J.get$error$x(asyncError));
      },
      handleError$1: function(asyncError) {
        var t1, t2, t3, t4;
        t1 = this.errorCallback;
        t2 = H.getDynamicRuntimeType();
        t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        t3 = J.getInterceptor$x(asyncError);
        t4 = this.result._zone;
        if (t2)
          return t4.runBinary$3(t1, t3.get$error(asyncError), asyncError.get$stackTrace());
        else
          return t4.runUnary$2(t1, t3.get$error(asyncError));
      },
      handleWhenComplete$0: function() {
        return this.result._zone.run$1(this.callback);
      }
    },
    _Future: {
      "^": "Object;_state<,_zone<,_resultOrListeners<,$ti",
      get$_isChained: function() {
        return this._state === 2;
      },
      get$_isComplete: function() {
        return this._state >= 4;
      },
      get$_hasError: function() {
        return this._state === 8;
      },
      _setChained$1: function(source) {
        this._state = 2;
        this._resultOrListeners = source;
      },
      then$2$onError: function(f, onError) {
        var currentZone = $.Zone__current;
        if (currentZone !== C.C__RootZone) {
          currentZone.toString;
          if (onError != null)
            onError = P._registerErrorHandler(onError, currentZone);
        }
        return this._thenNoZoneRegistration$2(f, onError);
      },
      then$1: function(f) {
        return this.then$2$onError(f, null);
      },
      _thenNoZoneRegistration$2: function(f, onError) {
        var result, t1;
        result = new P._Future(0, $.Zone__current, null, [null]);
        t1 = onError == null ? 1 : 3;
        this._addListener$1(new P._FutureListener(null, result, t1, f, onError, [null, null]));
        return result;
      },
      catchError$2$test: function(onError, test) {
        var t1, result;
        t1 = $.Zone__current;
        result = new P._Future(0, t1, null, [null]);
        if (t1 !== C.C__RootZone)
          onError = P._registerErrorHandler(onError, t1);
        this._addListener$1(new P._FutureListener(null, result, 2, test, onError, [null, null]));
        return result;
      },
      catchError$1: function(onError) {
        return this.catchError$2$test(onError, null);
      },
      whenComplete$1: function(action) {
        var t1, result;
        t1 = $.Zone__current;
        result = new P._Future(0, t1, null, this.$ti);
        if (t1 !== C.C__RootZone)
          t1.toString;
        this._addListener$1(new P._FutureListener(null, result, 8, action, null, [null, null]));
        return result;
      },
      _setPendingComplete$0: function() {
        this._state = 1;
      },
      _clearPendingComplete$0: function() {
        this._state = 0;
      },
      get$_error: function() {
        return this._resultOrListeners;
      },
      get$_chainSource: function() {
        return this._resultOrListeners;
      },
      _setValue$1: function(value) {
        this._state = 4;
        this._resultOrListeners = value;
      },
      _setErrorObject$1: function(error) {
        this._state = 8;
        this._resultOrListeners = error;
      },
      _cloneResult$1: function(source) {
        this._state = source.get$_state();
        this._resultOrListeners = source.get$_resultOrListeners();
      },
      _addListener$1: function(listener) {
        var t1, source;
        t1 = this._state;
        if (t1 <= 1) {
          listener._nextListener = this._resultOrListeners;
          this._resultOrListeners = listener;
        } else {
          if (t1 === 2) {
            source = this._resultOrListeners;
            if (!source.get$_isComplete()) {
              source._addListener$1(listener);
              return;
            }
            this._state = source.get$_state();
            this._resultOrListeners = source.get$_resultOrListeners();
          }
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, new P._Future__addListener_closure(this, listener));
        }
      },
      _prependListeners$1: function(listeners) {
        var t1, t2, existingListeners, cursor, source;
        t1 = {};
        t1.listeners = listeners;
        if (listeners == null)
          return;
        t2 = this._state;
        if (t2 <= 1) {
          existingListeners = this._resultOrListeners;
          this._resultOrListeners = listeners;
          if (existingListeners != null) {
            for (cursor = listeners; cursor.get$_nextListener() != null;)
              cursor = cursor.get$_nextListener();
            cursor.set$_nextListener(existingListeners);
          }
        } else {
          if (t2 === 2) {
            source = this._resultOrListeners;
            if (!source.get$_isComplete()) {
              source._prependListeners$1(listeners);
              return;
            }
            this._state = source.get$_state();
            this._resultOrListeners = source.get$_resultOrListeners();
          }
          t1.listeners = this._reverseListeners$1(listeners);
          t2 = this._zone;
          t2.toString;
          P._rootScheduleMicrotask(null, null, t2, new P._Future__prependListeners_closure(t1, this));
        }
      },
      _removeListeners$0: function() {
        var current = this._resultOrListeners;
        this._resultOrListeners = null;
        return this._reverseListeners$1(current);
      },
      _reverseListeners$1: function(listeners) {
        var current, prev, next;
        for (current = listeners, prev = null; current != null; prev = current, current = next) {
          next = current.get$_nextListener();
          current.set$_nextListener(prev);
        }
        return prev;
      },
      _complete$1: function(value) {
        var listeners;
        if (!!J.getInterceptor(value).$isFuture)
          P._Future__chainCoreFuture(value, this);
        else {
          listeners = this._removeListeners$0();
          this._state = 4;
          this._resultOrListeners = value;
          P._Future__propagateToListeners(this, listeners);
        }
      },
      _completeWithValue$1: function(value) {
        var listeners = this._removeListeners$0();
        this._state = 4;
        this._resultOrListeners = value;
        P._Future__propagateToListeners(this, listeners);
      },
      _completeError$2: [function(error, stackTrace) {
        var listeners = this._removeListeners$0();
        this._state = 8;
        this._resultOrListeners = new P.AsyncError(error, stackTrace);
        P._Future__propagateToListeners(this, listeners);
      }, function(error) {
        return this._completeError$2(error, null);
      }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 46, 2, 8, 16],
      _asyncComplete$1: function(value) {
        var t1;
        if (!!J.getInterceptor(value).$isFuture) {
          if (value._state === 8) {
            this._state = 1;
            t1 = this._zone;
            t1.toString;
            P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure(this, value));
          } else
            P._Future__chainCoreFuture(value, this);
          return;
        }
        this._state = 1;
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure0(this, value));
      },
      _asyncCompleteError$2: function(error, stackTrace) {
        var t1;
        this._state = 1;
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
      },
      timeout$2$onTimeout: function(_, timeLimit, onTimeout) {
        var t1, t2, result;
        t1 = {};
        t1.onTimeout = onTimeout;
        if (this._state >= 4) {
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(this);
          return t1;
        }
        t2 = $.Zone__current;
        result = new P._Future(0, t2, null, this.$ti);
        t1.timer = null;
        t2.toString;
        t1.onTimeout = onTimeout;
        t1.timer = P.Timer_Timer(timeLimit, new P._Future_timeout_closure(t1, result, t2));
        this.then$2$onError(new P._Future_timeout_closure0(t1, this, result), new P._Future_timeout_closure1(t1, result));
        return result;
      },
      $isFuture: 1,
      static: {
        _Future__chainForeignFuture: function(source, target) {
          var e, s, exception, t1;
          target._setPendingComplete$0();
          try {
            source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
          }
        },
        _Future__chainCoreFuture: function(source, target) {
          var listeners;
          for (; source.get$_isChained();)
            source = source.get$_chainSource();
          if (source.get$_isComplete()) {
            listeners = target._removeListeners$0();
            target._cloneResult$1(source);
            P._Future__propagateToListeners(target, listeners);
          } else {
            listeners = target.get$_resultOrListeners();
            target._setChained$1(source);
            source._prependListeners$1(listeners);
          }
        },
        _Future__propagateToListeners: function(source, listeners) {
          var t1, t2, t3, hasError, asyncError, t4, listeners0, sourceResult, zone, oldZone, result;
          t1 = {};
          t1.source = source;
          for (t2 = source; true;) {
            t3 = {};
            hasError = t2.get$_hasError();
            if (listeners == null) {
              if (hasError) {
                asyncError = t1.source.get$_error();
                t2 = t1.source.get$_zone();
                t3 = J.get$error$x(asyncError);
                t4 = asyncError.get$stackTrace();
                t2.toString;
                P._rootHandleUncaughtError(null, null, t2, t3, t4);
              }
              return;
            }
            for (; listeners.get$_nextListener() != null; listeners = listeners0) {
              listeners0 = listeners.get$_nextListener();
              listeners.set$_nextListener(null);
              P._Future__propagateToListeners(t1.source, listeners);
            }
            sourceResult = t1.source.get$_resultOrListeners();
            t3.listenerHasError = hasError;
            t3.listenerValueOrError = sourceResult;
            t2 = !hasError;
            if (!t2 || listeners.get$handlesValue() || listeners.get$handlesComplete()) {
              zone = listeners.get$_zone();
              if (hasError) {
                t4 = t1.source.get$_zone();
                t4.toString;
                t4 = t4 == null ? zone == null : t4 === zone;
                if (!t4)
                  zone.toString;
                else
                  t4 = true;
                t4 = !t4;
              } else
                t4 = false;
              if (t4) {
                asyncError = t1.source.get$_error();
                t2 = t1.source.get$_zone();
                t3 = J.get$error$x(asyncError);
                t4 = asyncError.get$stackTrace();
                t2.toString;
                P._rootHandleUncaughtError(null, null, t2, t3, t4);
                return;
              }
              oldZone = $.Zone__current;
              if (oldZone == null ? zone != null : oldZone !== zone)
                $.Zone__current = zone;
              else
                oldZone = null;
              if (listeners.get$handlesComplete())
                new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners).call$0();
              else if (t2) {
                if (listeners.get$handlesValue())
                  new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceResult).call$0();
              } else if (listeners.get$handlesError())
                new P._Future__propagateToListeners_handleError(t1, t3, listeners).call$0();
              if (oldZone != null)
                $.Zone__current = oldZone;
              t2 = t3.listenerValueOrError;
              t4 = J.getInterceptor(t2);
              if (!!t4.$isFuture) {
                result = J.get$result$x(listeners);
                if (!!t4.$is_Future)
                  if (t2._state >= 4) {
                    listeners = result._removeListeners$0();
                    result._cloneResult$1(t2);
                    t1.source = t2;
                    continue;
                  } else
                    P._Future__chainCoreFuture(t2, result);
                else
                  P._Future__chainForeignFuture(t2, result);
                return;
              }
            }
            result = J.get$result$x(listeners);
            listeners = result._removeListeners$0();
            t2 = t3.listenerHasError;
            t3 = t3.listenerValueOrError;
            if (!t2)
              result._setValue$1(t3);
            else
              result._setErrorObject$1(t3);
            t1.source = result;
            t2 = result;
          }
        }
      }
    },
    _Future__addListener_closure: {
      "^": "Closure:1;$this,listener",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this.listener);
      }
    },
    _Future__prependListeners_closure: {
      "^": "Closure:1;_box_0,$this",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this._box_0.listeners);
      }
    },
    _Future__chainForeignFuture_closure: {
      "^": "Closure:0;target",
      call$1: [function(value) {
        var t1 = this.target;
        t1._clearPendingComplete$0();
        t1._complete$1(value);
      }, null, null, 2, 0, null, 7, "call"]
    },
    _Future__chainForeignFuture_closure0: {
      "^": "Closure:48;target",
      call$2: [function(error, stackTrace) {
        this.target._completeError$2(error, stackTrace);
      }, function(error) {
        return this.call$2(error, null);
      }, "call$1", null, null, null, 2, 2, null, 2, 8, 16, "call"]
    },
    _Future__chainForeignFuture_closure1: {
      "^": "Closure:1;target,e,s",
      call$0: [function() {
        this.target._completeError$2(this.e, this.s);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__asyncComplete_closure: {
      "^": "Closure:1;$this,coreFuture",
      call$0: function() {
        P._Future__chainCoreFuture(this.coreFuture, this.$this);
      }
    },
    _Future__asyncComplete_closure0: {
      "^": "Closure:1;$this,typedValue",
      call$0: function() {
        this.$this._completeWithValue$1(this.typedValue);
      }
    },
    _Future__asyncCompleteError_closure: {
      "^": "Closure:1;$this,error,stackTrace",
      call$0: function() {
        this.$this._completeError$2(this.error, this.stackTrace);
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: {
      "^": "Closure:2;_box_1,_box_0,hasError,listener",
      call$0: function() {
        var completeResult, e, s, exception, t1, t2, originalSource;
        completeResult = null;
        try {
          completeResult = this.listener.handleWhenComplete$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          if (this.hasError) {
            t1 = J.get$error$x(this._box_1.source.get$_error());
            t2 = e;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          t2 = this._box_0;
          if (t1)
            t2.listenerValueOrError = this._box_1.source.get$_error();
          else
            t2.listenerValueOrError = new P.AsyncError(e, s);
          t2.listenerHasError = true;
          return;
        }
        if (!!J.getInterceptor(completeResult).$isFuture) {
          if (completeResult instanceof P._Future && completeResult.get$_state() >= 4) {
            if (completeResult.get$_state() === 8) {
              t1 = this._box_0;
              t1.listenerValueOrError = completeResult.get$_resultOrListeners();
              t1.listenerHasError = true;
            }
            return;
          }
          originalSource = this._box_1.source;
          t1 = this._box_0;
          t1.listenerValueOrError = completeResult.then$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource));
          t1.listenerHasError = false;
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
      "^": "Closure:0;originalSource",
      call$1: [function(_) {
        return this.originalSource;
      }, null, null, 2, 0, null, 1, "call"]
    },
    _Future__propagateToListeners_handleValueCallback: {
      "^": "Closure:2;_box_0,listener,sourceResult",
      call$0: function() {
        var e, s, exception, t1;
        try {
          this._box_0.listenerValueOrError = this.listener.handleValue$1(this.sourceResult);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          t1 = this._box_0;
          t1.listenerValueOrError = new P.AsyncError(e, s);
          t1.listenerHasError = true;
        }
      }
    },
    _Future__propagateToListeners_handleError: {
      "^": "Closure:2;_box_1,_box_0,listener",
      call$0: function() {
        var asyncError, e, s, t1, t2, exception, t3, t4;
        try {
          asyncError = this._box_1.source.get$_error();
          t1 = this.listener;
          if (t1.matchesErrorTest$1(asyncError) === true && t1.get$hasErrorCallback()) {
            t2 = this._box_0;
            t2.listenerValueOrError = t1.handleError$1(asyncError);
            t2.listenerHasError = false;
          }
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          t1 = this._box_1;
          t2 = J.get$error$x(t1.source.get$_error());
          t3 = e;
          t4 = this._box_0;
          if (t2 == null ? t3 == null : t2 === t3)
            t4.listenerValueOrError = t1.source.get$_error();
          else
            t4.listenerValueOrError = new P.AsyncError(e, s);
          t4.listenerHasError = true;
        }
      }
    },
    _Future_timeout_closure: {
      "^": "Closure:1;_box_0,result,zone",
      call$0: function() {
        var e, s, exception, t1;
        try {
          this.result._complete$1(this.zone.run$1(this._box_0.onTimeout));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this.result._completeError$2(e, s);
        }
      }
    },
    _Future_timeout_closure0: {
      "^": "Closure;_box_0,$this,result",
      call$1: [function(v) {
        var t1 = this._box_0.timer;
        if (t1._handle != null) {
          t1.cancel$0(0);
          this.result._completeWithValue$1(v);
        }
      }, null, null, 2, 0, null, 18, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "_Future");
      }
    },
    _Future_timeout_closure1: {
      "^": "Closure:4;_box_0,result",
      call$2: [function(e, s) {
        var t1 = this._box_0.timer;
        if (t1._handle != null) {
          t1.cancel$0(0);
          this.result._completeError$2(e, s);
        }
      }, null, null, 4, 0, null, 0, 19, "call"]
    },
    _AsyncCallbackEntry: {
      "^": "Object;callback<,next*"
    },
    Stream: {
      "^": "Object;$ti",
      where$1: function(_, test) {
        return new P._WhereStream(test, this, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      },
      map$1: function(_, convert) {
        return new P._MapStream(convert, this, [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
      },
      handleError$2$test: function(onError, test) {
        return new P._HandleErrorStream(onError, test, this, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      },
      handleError$1: function(onError) {
        return this.handleError$2$test(onError, null);
      },
      transform$1: function(_, streamTransformer) {
        return streamTransformer.bind$1(this);
      },
      reduce$1: function(_, combine) {
        var t1, result;
        t1 = {};
        result = new P._Future(0, $.Zone__current, null, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        t1.seenFirst = false;
        t1.value = null;
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_reduce_closure(t1, this, combine, result), true, new P.Stream_reduce_closure0(t1, result), result.get$_completeError());
        return result;
      },
      contains$1: function(_, needle) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null, [P.bool]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
        return future;
      },
      forEach$1: function(_, action) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null, [null]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
        return future;
      },
      get$length: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null, [P.$int]);
        t1.count = 0;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
        return future;
      },
      get$isEmpty: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null, [P.bool]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
        return future;
      },
      toList$0: function(_) {
        var t1, result, future;
        t1 = H.getRuntimeTypeArgument(this, "Stream", 0);
        result = H.setRuntimeTypeInfo([], [t1]);
        future = new P._Future(0, $.Zone__current, null, [[P.List, t1]]);
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
        return future;
      },
      skip$1: function(_, count) {
        if (typeof count !== "number" || Math.floor(count) !== count || count < 0)
          H.throwExpression(P.ArgumentError$(count));
        return new P._SkipStream(count, this, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      },
      get$first: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
        return future;
      }
    },
    Stream_reduce_closure: {
      "^": "Closure;_box_0,$this,combine,result",
      call$1: [function(element) {
        var t1 = this._box_0;
        if (t1.seenFirst)
          P._runUserCode(new P.Stream_reduce__closure(t1, this.combine, element), new P.Stream_reduce__closure0(t1, this.$this), P._cancelAndErrorClosure(t1.subscription, this.result));
        else {
          t1.value = element;
          t1.seenFirst = true;
        }
      }, null, null, 2, 0, null, 20, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_reduce__closure: {
      "^": "Closure:1;_box_0,combine,element",
      call$0: function() {
        return this.combine.call$2(this._box_0.value, this.element);
      }
    },
    Stream_reduce__closure0: {
      "^": "Closure;_box_0,$this",
      call$1: function(newValue) {
        this._box_0.value = newValue;
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_reduce_closure0: {
      "^": "Closure:1;_box_0,result",
      call$0: [function() {
        var e, s, t1, exception;
        t1 = this._box_0;
        if (!t1.seenFirst)
          try {
            t1 = H.IterableElementError_noElement();
            throw H.wrapException(t1);
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            P._completeWithErrorCallback(this.result, e, s);
          }
        else
          this.result._complete$1(t1.value);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_contains_closure: {
      "^": "Closure;_box_0,$this,needle,future",
      call$1: [function(element) {
        var t1, t2;
        t1 = this._box_0;
        t2 = this.future;
        P._runUserCode(new P.Stream_contains__closure(this.needle, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription, t2));
      }, null, null, 2, 0, null, 20, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_contains__closure: {
      "^": "Closure:1;needle,element",
      call$0: function() {
        return J.$eq$(this.element, this.needle);
      }
    },
    Stream_contains__closure0: {
      "^": "Closure:18;_box_0,future",
      call$1: function(isMatch) {
        if (isMatch === true)
          P._cancelAndValue(this._box_0.subscription, this.future, true);
      }
    },
    Stream_contains_closure0: {
      "^": "Closure:1;future",
      call$0: [function() {
        this.future._complete$1(false);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_forEach_closure: {
      "^": "Closure;_box_0,$this,action,future",
      call$1: [function(element) {
        P._runUserCode(new P.Stream_forEach__closure(this.action, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this._box_0.subscription, this.future));
      }, null, null, 2, 0, null, 20, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_forEach__closure: {
      "^": "Closure:1;action,element",
      call$0: function() {
        return this.action.call$1(this.element);
      }
    },
    Stream_forEach__closure0: {
      "^": "Closure:0;",
      call$1: function(_) {
      }
    },
    Stream_forEach_closure0: {
      "^": "Closure:1;future",
      call$0: [function() {
        this.future._complete$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_length_closure: {
      "^": "Closure:0;_box_0",
      call$1: [function(_) {
        ++this._box_0.count;
      }, null, null, 2, 0, null, 1, "call"]
    },
    Stream_length_closure0: {
      "^": "Closure:1;_box_0,future",
      call$0: [function() {
        this.future._complete$1(this._box_0.count);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_isEmpty_closure: {
      "^": "Closure:0;_box_0,future",
      call$1: [function(_) {
        P._cancelAndValue(this._box_0.subscription, this.future, false);
      }, null, null, 2, 0, null, 1, "call"]
    },
    Stream_isEmpty_closure0: {
      "^": "Closure:1;future",
      call$0: [function() {
        this.future._complete$1(true);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_toList_closure: {
      "^": "Closure;$this,result",
      call$1: [function(data) {
        this.result.push(data);
      }, null, null, 2, 0, null, 11, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_toList_closure0: {
      "^": "Closure:1;result,future",
      call$0: [function() {
        this.future._complete$1(this.result);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_first_closure: {
      "^": "Closure;_box_0,$this,future",
      call$1: [function(value) {
        P._cancelAndValue(this._box_0.subscription, this.future, value);
      }, null, null, 2, 0, null, 7, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_first_closure0: {
      "^": "Closure:1;future",
      call$0: [function() {
        var e, s, t1, exception;
        try {
          t1 = H.IterableElementError_noElement();
          throw H.wrapException(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this.future, e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    StreamSubscription: {
      "^": "Object;$ti"
    },
    EventSink: {
      "^": "Object;$ti"
    },
    _StreamController: {
      "^": "Object;_state<,$ti",
      get$isPaused: function() {
        var t1 = this._state;
        return (t1 & 1) !== 0 ? this.get$_subscription().get$_isInputPaused() : (t1 & 2) === 0;
      },
      get$_mayAddEvent: function() {
        return this._state < 4;
      },
      get$_pendingEvents: function() {
        if ((this._state & 8) === 0)
          return this._varData;
        return this._varData.get$varData();
      },
      _ensurePendingEvents$0: function() {
        var t1, state;
        if ((this._state & 8) === 0) {
          t1 = this._varData;
          if (t1 == null) {
            t1 = new P._StreamImplEvents(null, null, 0, this.$ti);
            this._varData = t1;
          }
          return t1;
        }
        state = this._varData;
        state.get$varData();
        return state.get$varData();
      },
      get$_subscription: function() {
        if ((this._state & 8) !== 0)
          return this._varData.get$varData();
        return this._varData;
      },
      _badEventState$0: function() {
        if ((this._state & 4) !== 0)
          return new P.StateError("Cannot add event after closing");
        return new P.StateError("Cannot add event while adding a stream");
      },
      _ensureDoneFuture$0: function() {
        var t1 = this._doneFuture;
        if (t1 == null) {
          t1 = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new P._Future(0, $.Zone__current, null, [null]);
          this._doneFuture = t1;
        }
        return t1;
      },
      add$1: function(_, value) {
        if (this._state >= 4)
          throw H.wrapException(this._badEventState$0());
        this._async$_add$1(0, value);
      },
      addError$2: function(error, stackTrace) {
        if (this._state >= 4)
          throw H.wrapException(this._badEventState$0());
        error = error != null ? error : new P.NullThrownError();
        $.Zone__current.toString;
        this._addError$2(error, stackTrace);
      },
      close$0: function(_) {
        var t1 = this._state;
        if ((t1 & 4) !== 0)
          return this._ensureDoneFuture$0();
        if (t1 >= 4)
          throw H.wrapException(this._badEventState$0());
        t1 |= 4;
        this._state = t1;
        if ((t1 & 1) !== 0)
          this._sendDone$0();
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
        return this._ensureDoneFuture$0();
      },
      _async$_add$1: function(_, value) {
        var t1 = this._state;
        if ((t1 & 1) !== 0)
          this._sendData$1(value);
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, null, this.$ti));
      },
      _addError$2: function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 1) !== 0)
          this._sendError$2(error, stackTrace);
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace, null));
      },
      _subscribe$4: function(onData, onError, onDone, cancelOnError) {
        var t1, t2, subscription, pendingEvents, addState;
        if ((this._state & 3) !== 0)
          throw H.wrapException(new P.StateError("Stream has already been listened to."));
        t1 = $.Zone__current;
        t2 = cancelOnError ? 1 : 0;
        subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null, this.$ti);
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
        pendingEvents = this.get$_pendingEvents();
        t2 = this._state |= 1;
        if ((t2 & 8) !== 0) {
          addState = this._varData;
          addState.set$varData(subscription);
          addState.resume$0(0);
        } else
          this._varData = subscription;
        subscription._setPendingEvents$1(pendingEvents);
        subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
        return subscription;
      },
      _recordCancel$1: function(subscription) {
        var result, e, s, t1, exception, result0;
        result = null;
        if ((this._state & 8) !== 0)
          result = this._varData.cancel$0(0);
        this._varData = null;
        this._state = this._state & 4294967286 | 2;
        t1 = this.onCancel;
        if (t1 != null)
          if (result == null)
            try {
              result = t1.call$0();
            } catch (exception) {
              t1 = H.unwrapException(exception);
              e = t1;
              s = H.getTraceFromException(exception);
              result0 = new P._Future(0, $.Zone__current, null, [null]);
              result0._asyncCompleteError$2(e, s);
              result = result0;
            }
          else
            result = result.whenComplete$1(t1);
        t1 = new P._StreamController__recordCancel_complete(this);
        if (result != null)
          result = result.whenComplete$1(t1);
        else
          t1.call$0();
        return result;
      },
      _recordPause$1: function(subscription) {
        if ((this._state & 8) !== 0)
          this._varData.pause$0(0);
        P._runGuarded(this.onPause);
      },
      _recordResume$1: function(subscription) {
        if ((this._state & 8) !== 0)
          this._varData.resume$0(0);
        P._runGuarded(this.onResume);
      }
    },
    _StreamController__subscribe_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        P._runGuarded(this.$this.onListen);
      }
    },
    _StreamController__recordCancel_complete: {
      "^": "Closure:2;$this",
      call$0: [function() {
        var t1 = this.$this._doneFuture;
        if (t1 != null && t1._state === 0)
          t1._asyncComplete$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    _SyncStreamControllerDispatch: {
      "^": "Object;$ti",
      _sendData$1: function(data) {
        this.get$_subscription()._async$_add$1(0, data);
      },
      _sendError$2: function(error, stackTrace) {
        this.get$_subscription()._addError$2(error, stackTrace);
      },
      _sendDone$0: function() {
        this.get$_subscription()._close$0();
      }
    },
    _AsyncStreamControllerDispatch: {
      "^": "Object;$ti",
      _sendData$1: function(data) {
        this.get$_subscription()._addPending$1(new P._DelayedData(data, null, [null]));
      },
      _sendError$2: function(error, stackTrace) {
        this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
      },
      _sendDone$0: function() {
        this.get$_subscription()._addPending$1(C.C__DelayedDone);
      }
    },
    _AsyncStreamController: {
      "^": "_StreamController+_AsyncStreamControllerDispatch;_varData,_state,_doneFuture,onListen,onPause,onResume,onCancel,$ti"
    },
    _SyncStreamController: {
      "^": "_StreamController+_SyncStreamControllerDispatch;_varData,_state,_doneFuture,onListen,onPause,onResume,onCancel,$ti"
    },
    _ControllerStream: {
      "^": "_StreamImpl;_async$_controller,$ti",
      get$hashCode: function(_) {
        return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof P._ControllerStream))
          return false;
        return other._async$_controller === this._async$_controller;
      }
    },
    _ControllerSubscription: {
      "^": "_BufferingStreamSubscription;_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending,$ti",
      _onCancel$0: function() {
        return this._async$_controller._recordCancel$1(this);
      },
      _onPause$0: [function() {
        this._async$_controller._recordPause$1(this);
      }, "call$0", "get$_onPause", 0, 0, 2],
      _onResume$0: [function() {
        this._async$_controller._recordResume$1(this);
      }, "call$0", "get$_onResume", 0, 0, 2]
    },
    _EventSink: {
      "^": "Object;$ti"
    },
    _BufferingStreamSubscription: {
      "^": "Object;_zone<,_state<,$ti",
      _setPendingEvents$1: function(pendingEvents) {
        if (pendingEvents == null)
          return;
        this._pending = pendingEvents;
        if (!pendingEvents.get$isEmpty(pendingEvents)) {
          this._state = (this._state | 64) >>> 0;
          this._pending.schedule$1(this);
        }
      },
      pause$1: function(_, resumeSignal) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        this._state = (t1 + 128 | 4) >>> 0;
        if (t1 < 128 && this._pending != null)
          this._pending.cancelSchedule$0();
        if ((t1 & 4) === 0 && (this._state & 32) === 0)
          this._guardCallback$1(this.get$_onPause());
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function(_) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 >= 128) {
          t1 -= 128;
          this._state = t1;
          if (t1 < 128) {
            if ((t1 & 64) !== 0) {
              t1 = this._pending;
              t1 = !t1.get$isEmpty(t1);
            } else
              t1 = false;
            if (t1)
              this._pending.schedule$1(this);
            else {
              t1 = (this._state & 4294967291) >>> 0;
              this._state = t1;
              if ((t1 & 32) === 0)
                this._guardCallback$1(this.get$_onResume());
            }
          }
        }
      },
      cancel$0: function(_) {
        var t1 = (this._state & 4294967279) >>> 0;
        this._state = t1;
        if ((t1 & 8) === 0)
          this._cancel$0();
        t1 = this._cancelFuture;
        return t1 == null ? $.$get$Future__nullFuture() : t1;
      },
      get$_isInputPaused: function() {
        return (this._state & 4) !== 0;
      },
      get$isPaused: function() {
        return this._state >= 128;
      },
      _cancel$0: function() {
        var t1 = (this._state | 8) >>> 0;
        this._state = t1;
        if ((t1 & 64) !== 0)
          this._pending.cancelSchedule$0();
        if ((this._state & 32) === 0)
          this._pending = null;
        this._cancelFuture = this._onCancel$0();
      },
      _async$_add$1: ["super$_BufferingStreamSubscription$_add", function(_, data) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendData$1(data);
        else
          this._addPending$1(new P._DelayedData(data, null, [null]));
      }],
      _addError$2: ["super$_BufferingStreamSubscription$_addError", function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendError$2(error, stackTrace);
        else
          this._addPending$1(new P._DelayedError(error, stackTrace, null));
      }],
      _close$0: ["super$_BufferingStreamSubscription$_close", function() {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        t1 = (t1 | 2) >>> 0;
        this._state = t1;
        if (t1 < 32)
          this._sendDone$0();
        else
          this._addPending$1(C.C__DelayedDone);
      }],
      _onPause$0: [function() {
      }, "call$0", "get$_onPause", 0, 0, 2],
      _onResume$0: [function() {
      }, "call$0", "get$_onResume", 0, 0, 2],
      _onCancel$0: function() {
        return;
      },
      _addPending$1: function($event) {
        var pending, t1;
        pending = this._pending;
        if (pending == null) {
          pending = new P._StreamImplEvents(null, null, 0, [null]);
          this._pending = pending;
        }
        pending.add$1(0, $event);
        t1 = this._state;
        if ((t1 & 64) === 0) {
          t1 = (t1 | 64) >>> 0;
          this._state = t1;
          if (t1 < 128)
            this._pending.schedule$1(this);
        }
      },
      _sendData$1: function(data) {
        var t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        this._zone.runUnaryGuarded$2(this._onData, data);
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _sendError$2: function(error, stackTrace) {
        var t1, t2, t3;
        t1 = this._state;
        t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
        if ((t1 & 1) !== 0) {
          this._state = (t1 | 16) >>> 0;
          this._cancel$0();
          t1 = this._cancelFuture;
          if (!!J.getInterceptor(t1).$isFuture) {
            t3 = $.$get$Future__nullFuture();
            t3 = t1 == null ? t3 != null : t1 !== t3;
          } else
            t3 = false;
          if (t3)
            t1.whenComplete$1(t2);
          else
            t2.call$0();
        } else {
          t2.call$0();
          this._checkState$1((t1 & 4) !== 0);
        }
      },
      _sendDone$0: function() {
        var t1, t2, t3;
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
        this._cancel$0();
        this._state = (this._state | 16) >>> 0;
        t2 = this._cancelFuture;
        if (!!J.getInterceptor(t2).$isFuture) {
          t3 = $.$get$Future__nullFuture();
          t3 = t2 == null ? t3 != null : t2 !== t3;
        } else
          t3 = false;
        if (t3)
          t2.whenComplete$1(t1);
        else
          t1.call$0();
      },
      _guardCallback$1: function(callback) {
        var t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        callback.call$0();
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _checkState$1: function(wasInputPaused) {
        var t1, isInputPaused;
        if ((this._state & 64) !== 0) {
          t1 = this._pending;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
        if (t1) {
          t1 = (this._state & 4294967231) >>> 0;
          this._state = t1;
          if ((t1 & 4) !== 0)
            if (t1 < 128) {
              t1 = this._pending;
              t1 = t1 == null || t1.get$isEmpty(t1);
            } else
              t1 = false;
          else
            t1 = false;
          if (t1)
            this._state = (this._state & 4294967291) >>> 0;
        }
        for (; true; wasInputPaused = isInputPaused) {
          t1 = this._state;
          if ((t1 & 8) !== 0) {
            this._pending = null;
            return;
          }
          isInputPaused = (t1 & 4) !== 0;
          if (wasInputPaused === isInputPaused)
            break;
          this._state = (t1 ^ 32) >>> 0;
          if (isInputPaused)
            this._onPause$0();
          else
            this._onResume$0();
          this._state = (this._state & 4294967263) >>> 0;
        }
        t1 = this._state;
        if ((t1 & 64) !== 0 && t1 < 128)
          this._pending.schedule$1(this);
      },
      _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
        var handleData, t1;
        handleData = onData == null ? P.async___nullDataHandler$closure() : onData;
        t1 = this._zone;
        t1.toString;
        this._onData = handleData;
        this._onError = P._registerErrorHandler(onError == null ? P.async___nullErrorHandler$closure() : onError, t1);
        this._onDone = onDone == null ? P.async___nullDoneHandler$closure() : onDone;
      },
      $is_EventSink: 1,
      $isStreamSubscription: 1
    },
    _BufferingStreamSubscription__sendError_sendError: {
      "^": "Closure:2;$this,error,stackTrace",
      call$0: [function() {
        var t1, t2, t3, t4, t5, t6;
        t1 = this.$this;
        t2 = t1._state;
        if ((t2 & 8) !== 0 && (t2 & 16) === 0)
          return;
        t1._state = (t2 | 32) >>> 0;
        t2 = t1._onError;
        t3 = H.buildFunctionType(H.getDynamicRuntimeType(), [H.buildInterfaceType(P.Object), H.buildInterfaceType(P.StackTrace)])._isTest$1(t2);
        t4 = t1._zone;
        t5 = this.error;
        t6 = t1._onError;
        if (t3)
          t4.runBinaryGuarded$3(t6, t5, this.stackTrace);
        else
          t4.runUnaryGuarded$2(t6, t5);
        t1._state = (t1._state & 4294967263) >>> 0;
      }, null, null, 0, 0, null, "call"]
    },
    _BufferingStreamSubscription__sendDone_sendDone: {
      "^": "Closure:2;$this",
      call$0: [function() {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._state;
        if ((t2 & 16) === 0)
          return;
        t1._state = (t2 | 42) >>> 0;
        t1._zone.runGuarded$1(t1._onDone);
        t1._state = (t1._state & 4294967263) >>> 0;
      }, null, null, 0, 0, null, "call"]
    },
    _StreamImpl: {
      "^": "Stream;$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return this._async$_controller._subscribe$4(onData, onError, onDone, true === cancelOnError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$2$onDone: function(onData, onDone) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
      }
    },
    _DelayedEvent: {
      "^": "Object;next*,$ti"
    },
    _DelayedData: {
      "^": "_DelayedEvent;value>,next,$ti",
      perform$1: function(dispatch) {
        dispatch._sendData$1(this.value);
      }
    },
    _DelayedError: {
      "^": "_DelayedEvent;error>,stackTrace<,next",
      perform$1: function(dispatch) {
        dispatch._sendError$2(this.error, this.stackTrace);
      },
      $as_DelayedEvent: Isolate.functionThatReturnsNull
    },
    _DelayedDone: {
      "^": "Object;",
      perform$1: function(dispatch) {
        dispatch._sendDone$0();
      },
      get$next: function(_) {
        return;
      },
      set$next: function(_, _0) {
        throw H.wrapException(new P.StateError("No events after a done."));
      }
    },
    _PendingEvents: {
      "^": "Object;_state<,$ti",
      schedule$1: function(dispatch) {
        var t1 = this._state;
        if (t1 === 1)
          return;
        if (t1 >= 1) {
          this._state = 1;
          return;
        }
        P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
        this._state = 1;
      },
      cancelSchedule$0: function() {
        if (this._state === 1)
          this._state = 3;
      }
    },
    _PendingEvents_schedule_closure: {
      "^": "Closure:1;$this,dispatch",
      call$0: [function() {
        var t1, oldState, $event, t2;
        t1 = this.$this;
        oldState = t1._state;
        t1._state = 0;
        if (oldState === 3)
          return;
        $event = t1.firstPendingEvent;
        t2 = J.get$next$x($event);
        t1.firstPendingEvent = t2;
        if (t2 == null)
          t1.lastPendingEvent = null;
        $event.perform$1(this.dispatch);
      }, null, null, 0, 0, null, "call"]
    },
    _StreamImplEvents: {
      "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state,$ti",
      get$isEmpty: function(_) {
        return this.lastPendingEvent == null;
      },
      add$1: function(_, $event) {
        var t1 = this.lastPendingEvent;
        if (t1 == null) {
          this.lastPendingEvent = $event;
          this.firstPendingEvent = $event;
        } else {
          J.set$next$x(t1, $event);
          this.lastPendingEvent = $event;
        }
      }
    },
    _DoneStreamSubscription: {
      "^": "Object;_zone<,_state<,_onDone,$ti",
      get$isPaused: function() {
        return this._state >= 4;
      },
      _schedule$0: function() {
        if ((this._state & 2) !== 0)
          return;
        var t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, this.get$_sendDone());
        this._state = (this._state | 2) >>> 0;
      },
      pause$1: function(_, resumeSignal) {
        this._state += 4;
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function(_) {
        var t1 = this._state;
        if (t1 >= 4) {
          t1 -= 4;
          this._state = t1;
          if (t1 < 4 && (t1 & 1) === 0)
            this._schedule$0();
        }
      },
      cancel$0: function(_) {
        return $.$get$Future__nullFuture();
      },
      _sendDone$0: [function() {
        var t1 = (this._state & 4294967293) >>> 0;
        this._state = t1;
        if (t1 >= 4)
          return;
        this._state = (t1 | 1) >>> 0;
        t1 = this._onDone;
        if (t1 != null)
          this._zone.runGuarded$1(t1);
      }, "call$0", "get$_sendDone", 0, 0, 2],
      $isStreamSubscription: 1
    },
    _StreamIterator: {
      "^": "Object;_subscription,_stateData,_isPaused,$ti",
      cancel$0: function(_) {
        var subscription, stateData;
        subscription = this._subscription;
        stateData = this._stateData;
        this._stateData = null;
        if (subscription != null) {
          this._subscription = null;
          if (!this._isPaused)
            stateData._asyncComplete$1(false);
          return subscription.cancel$0(0);
        }
        return $.$get$Future__nullFuture();
      }
    },
    _cancelAndError_closure: {
      "^": "Closure:1;future,error,stackTrace",
      call$0: [function() {
        return this.future._completeError$2(this.error, this.stackTrace);
      }, null, null, 0, 0, null, "call"]
    },
    _cancelAndErrorClosure_closure: {
      "^": "Closure:42;subscription,future",
      call$2: function(error, stackTrace) {
        P._cancelAndError(this.subscription, this.future, error, stackTrace);
      }
    },
    _cancelAndValue_closure: {
      "^": "Closure:1;future,value",
      call$0: [function() {
        return this.future._complete$1(this.value);
      }, null, null, 0, 0, null, "call"]
    },
    _ForwardingStream: {
      "^": "Stream;$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$2$onDone: function(onData, onDone) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
      },
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        return P._ForwardingStreamSubscription$(this, onData, onError, onDone, cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
      },
      _handleData$2: function(data, sink) {
        sink._async$_add$1(0, data);
      },
      _handleError$3: function(error, stackTrace, sink) {
        sink._addError$2(error, stackTrace);
      },
      $asStream: function($S, $T) {
        return [$T];
      }
    },
    _ForwardingStreamSubscription: {
      "^": "_BufferingStreamSubscription;_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending,$ti",
      _async$_add$1: function(_, data) {
        if ((this._state & 2) !== 0)
          return;
        this.super$_BufferingStreamSubscription$_add(0, data);
      },
      _addError$2: function(error, stackTrace) {
        if ((this._state & 2) !== 0)
          return;
        this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
      },
      _onPause$0: [function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.pause$0(0);
      }, "call$0", "get$_onPause", 0, 0, 2],
      _onResume$0: [function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.resume$0(0);
      }, "call$0", "get$_onResume", 0, 0, 2],
      _onCancel$0: function() {
        var t1 = this._subscription;
        if (t1 != null) {
          this._subscription = null;
          return t1.cancel$0(0);
        }
        return;
      },
      _handleData$1: [function(data) {
        this._stream._handleData$2(data, this);
      }, "call$1", "get$_handleData", 2, 0, function() {
        return H.computeSignature(function(S, T) {
          return {func: 1, v: true, args: [S]};
        }, this.$receiver, "_ForwardingStreamSubscription");
      }, 11],
      _handleError$2: [function(error, stackTrace) {
        this._stream._handleError$3(error, stackTrace, this);
      }, "call$2", "get$_handleError", 4, 0, 108, 8, 16],
      _handleDone$0: [function() {
        this._close$0();
      }, "call$0", "get$_handleDone", 0, 0, 2],
      _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
        this._subscription = this._stream._async$_source.listen$3$onDone$onError(this.get$_handleData(), this.get$_handleDone(), this.get$_handleError());
      },
      $as_BufferingStreamSubscription: function($S, $T) {
        return [$T];
      },
      $asStreamSubscription: function($S, $T) {
        return [$T];
      },
      static: {
        _ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
          var t1, t2;
          t1 = $.Zone__current;
          t2 = cancelOnError ? 1 : 0;
          t2 = new P._ForwardingStreamSubscription(_stream, null, null, null, null, t1, t2, null, null, [$S, $T]);
          t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
          t2._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, $S, $T);
          return t2;
        }
      }
    },
    _WhereStream: {
      "^": "_ForwardingStream;_test,_async$_source,$ti",
      _handleData$2: function(inputEvent, sink) {
        var satisfies, e, s, exception, t1;
        satisfies = null;
        try {
          satisfies = this._test.call$1(inputEvent);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._addErrorWithReplacement(sink, e, s);
          return;
        }
        if (satisfies === true)
          sink._async$_add$1(0, inputEvent);
      },
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      },
      $asStream: null
    },
    _MapStream: {
      "^": "_ForwardingStream;_transform,_async$_source,$ti",
      _handleData$2: function(inputEvent, sink) {
        var outputEvent, e, s, exception, t1;
        outputEvent = null;
        try {
          outputEvent = this._transform.call$1(inputEvent);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._addErrorWithReplacement(sink, e, s);
          return;
        }
        sink._async$_add$1(0, outputEvent);
      }
    },
    _HandleErrorStream: {
      "^": "_ForwardingStream;_transform,_test,_async$_source,$ti",
      _handleError$3: function(error, stackTrace, sink) {
        var matches, e, s, exception, t1;
        matches = true;
        if (matches === true)
          try {
            P._invokeErrorHandler(this._transform, error, stackTrace);
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            t1 = e;
            if (t1 == null ? error == null : t1 === error)
              sink._addError$2(error, stackTrace);
            else
              P._addErrorWithReplacement(sink, e, s);
            return;
          }
        else
          sink._addError$2(error, stackTrace);
      },
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      },
      $asStream: null
    },
    _StateStreamSubscription: {
      "^": "_ForwardingStreamSubscription;_sharedState,_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending,$ti",
      get$_count: function(_) {
        return this._sharedState;
      },
      set$_count: function(_, count) {
        this._sharedState = count;
      },
      $as_ForwardingStreamSubscription: function($T) {
        return [$T, $T];
      },
      $as_BufferingStreamSubscription: null,
      $asStreamSubscription: null
    },
    _SkipStream: {
      "^": "_ForwardingStream;_count,_async$_source,$ti",
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        var t1, t2, t3;
        t1 = H.getTypeArgumentByIndex(this, 0);
        t2 = $.Zone__current;
        t3 = cancelOnError ? 1 : 0;
        t3 = new P._StateStreamSubscription(this._count, this, null, null, null, null, t2, t3, null, null, this.$ti);
        t3._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
        t3._ForwardingStreamSubscription$5(this, onData, onError, onDone, cancelOnError, t1, t1);
        return t3;
      },
      _handleData$2: function(inputEvent, sink) {
        var count, t1;
        count = sink.get$_count(sink);
        t1 = J.getInterceptor$n(count);
        if (t1.$gt(count, 0)) {
          sink.set$_count(0, t1.$sub(count, 1));
          return;
        }
        sink._async$_add$1(0, inputEvent);
      },
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      },
      $asStream: null
    },
    _EventSinkWrapper: {
      "^": "Object;_async$_sink,$ti",
      add$1: function(_, data) {
        var t1 = this._async$_sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_add(0, data);
      },
      addError$2: function(error, stackTrace) {
        var t1 = this._async$_sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_addError(error, stackTrace);
      },
      close$0: function(_) {
        var t1 = this._async$_sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_close();
      }
    },
    _SinkTransformerStreamSubscription: {
      "^": "_BufferingStreamSubscription;_transformerSink,_subscription,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending,$ti",
      _onPause$0: [function() {
        var t1 = this._subscription;
        if (t1 != null)
          t1.pause$0(0);
      }, "call$0", "get$_onPause", 0, 0, 2],
      _onResume$0: [function() {
        var t1 = this._subscription;
        if (t1 != null)
          t1.resume$0(0);
      }, "call$0", "get$_onResume", 0, 0, 2],
      _onCancel$0: function() {
        var t1 = this._subscription;
        if (t1 != null) {
          this._subscription = null;
          return t1.cancel$0(0);
        }
        return;
      },
      _handleData$1: [function(data) {
        var e, s, exception, t1;
        try {
          J.add$1$ax(this._transformerSink, data);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          if ((this._state & 2) !== 0)
            H.throwExpression(new P.StateError("Stream is already closed"));
          this.super$_BufferingStreamSubscription$_addError(e, s);
        }
      }, "call$1", "get$_handleData", 2, 0, function() {
        return H.computeSignature(function(S, T) {
          return {func: 1, v: true, args: [S]};
        }, this.$receiver, "_SinkTransformerStreamSubscription");
      }, 11],
      _handleError$2: [function(error, stackTrace) {
        var e, s, exception, t1;
        try {
          this._transformerSink.addError$2(error, stackTrace);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          t1 = e;
          if (t1 == null ? error == null : t1 === error) {
            if ((this._state & 2) !== 0)
              H.throwExpression(new P.StateError("Stream is already closed"));
            this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
          } else {
            if ((this._state & 2) !== 0)
              H.throwExpression(new P.StateError("Stream is already closed"));
            this.super$_BufferingStreamSubscription$_addError(e, s);
          }
        }
      }, function(error) {
        return this._handleError$2(error, null);
      }, "_handleError$1", "call$2", "call$1", "get$_handleError", 2, 2, 106, 2, 8, 16],
      _handleDone$0: [function() {
        var e, s, exception, t1;
        try {
          this._subscription = null;
          J.close$0$x(this._transformerSink);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          if ((this._state & 2) !== 0)
            H.throwExpression(new P.StateError("Stream is already closed"));
          this.super$_BufferingStreamSubscription$_addError(e, s);
        }
      }, "call$0", "get$_handleDone", 0, 0, 2],
      $as_BufferingStreamSubscription: function($S, $T) {
        return [$T];
      },
      $asStreamSubscription: function($S, $T) {
        return [$T];
      }
    },
    _BoundSinkStream: {
      "^": "Stream;_sinkMapper,_stream,$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1, t2, t3, subscription;
        cancelOnError = true === cancelOnError;
        t1 = H.getTypeArgumentByIndex(this, 1);
        t2 = $.Zone__current;
        t3 = cancelOnError ? 1 : 0;
        subscription = new P._SinkTransformerStreamSubscription(null, null, null, null, null, t2, t3, null, null, this.$ti);
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
        subscription._transformerSink = this._sinkMapper.call$1(new P._EventSinkWrapper(subscription, [t1]));
        subscription._subscription = this._stream.listen$3$onDone$onError(subscription.get$_handleData(), subscription.get$_handleDone(), subscription.get$_handleError());
        return subscription;
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$2$onDone: function(onData, onDone) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
      },
      $asStream: function($S, $T) {
        return [$T];
      }
    },
    AsyncError: {
      "^": "Object;error>,stackTrace<",
      toString$0: function(_) {
        return H.S(this.error);
      },
      $isError: 1
    },
    Zone: {
      "^": "Object;"
    },
    _Zone: {
      "^": "Object;"
    },
    _rootHandleUncaughtError_closure: {
      "^": "Closure:1;_box_0,stackTrace",
      call$0: function() {
        var t1, t2, error;
        t1 = this._box_0;
        t2 = t1.error;
        if (t2 == null) {
          error = new P.NullThrownError();
          t1.error = error;
          t1 = error;
        } else
          t1 = t2;
        t2 = this.stackTrace;
        if (t2 == null)
          throw H.wrapException(t1);
        error = H.wrapException(t1);
        error.stack = J.toString$0$(t2);
        throw error;
      }
    },
    _RootZone: {
      "^": "_Zone;",
      get$parent: function(_) {
        return;
      },
      runGuarded$1: function(f) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$0();
            return t1;
          }
          t1 = P._rootRun(null, null, this, f);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      runUnaryGuarded$2: function(f, arg) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$1(arg);
            return t1;
          }
          t1 = P._rootRunUnary(null, null, this, f, arg);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      runBinaryGuarded$3: function(f, arg1, arg2) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$2(arg1, arg2);
            return t1;
          }
          t1 = P._rootRunBinary(null, null, this, f, arg1, arg2);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      bindCallback$2$runGuarded: function(f, runGuarded) {
        if (runGuarded)
          return new P._RootZone_bindCallback_closure(this, f);
        else
          return new P._RootZone_bindCallback_closure0(this, f);
      },
      bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
        return new P._RootZone_bindUnaryCallback_closure(this, f);
      },
      $index: function(_, key) {
        return;
      },
      run$1: function(f) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$0();
        return P._rootRun(null, null, this, f);
      },
      runUnary$2: function(f, arg) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$1(arg);
        return P._rootRunUnary(null, null, this, f, arg);
      },
      runBinary$3: function(f, arg1, arg2) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$2(arg1, arg2);
        return P._rootRunBinary(null, null, this, f, arg1, arg2);
      }
    },
    _RootZone_bindCallback_closure: {
      "^": "Closure:1;$this,f",
      call$0: function() {
        return this.$this.runGuarded$1(this.f);
      }
    },
    _RootZone_bindCallback_closure0: {
      "^": "Closure:1;$this,f",
      call$0: function() {
        return this.$this.run$1(this.f);
      }
    },
    _RootZone_bindUnaryCallback_closure: {
      "^": "Closure:0;$this,f",
      call$1: [function(arg) {
        return this.$this.runUnaryGuarded$2(this.f, arg);
      }, null, null, 2, 0, null, 36, "call"]
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    _HashMap__getTableEntry: function(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry: function(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable: function() {
      var table = Object.create(null);
      P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [$K, $V]);
    },
    LinkedHashMap__makeEmpty: function() {
      return new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [null, null]);
    },
    LinkedHashMap__makeLiteral: function(keyValuePairs) {
      return H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [null, null]));
    },
    HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
      if (isValidKey == null)
        if (P.core__identityHashCode$closure() === hashCode && P.core__identical$closure() === equals)
          return new P._IdentityHashMap(0, null, null, null, null, [$K, $V]);
      return P._CustomHashMap$(equals, hashCode, isValidKey, $K, $V);
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = [];
      t1 = $.$get$_toStringVisiting();
      t1.push(iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, parts, ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      t1.push(iterable);
      try {
        t2 = buffer;
        t2.set$_contents(P.StringBuffer__writeAll(t2.get$_contents(), iterable, ", "));
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = buffer;
      t1.set$_contents(t1.get$_contents() + rightDelimiter);
      t1 = buffer.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i)
        if (o === t1[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      it = iterable.get$iterator(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        parts.push(next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            parts.push(H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              parts.push("...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        parts.push(elision);
      parts.push(penultimateString);
      parts.push(ultimateString);
    },
    LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
      return new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [$K, $V]);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
      J.forEach$1$ax(other, new P.closure5(result));
      return result;
    },
    LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
      return new P._LinkedHashSet(0, null, null, null, null, null, 0, [$E]);
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var result, t1;
      result = P.LinkedHashSet_LinkedHashSet(null, null, null, $E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, t1.get$current());
      return result;
    },
    Maps_mapToString: function(m) {
      var t1, result, t2;
      t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        $.$get$_toStringVisiting().push(m);
        t2 = result;
        t2.set$_contents(t2.get$_contents() + "{");
        t1.first = true;
        J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
        t1 = result;
        t1.set$_contents(t1.get$_contents() + "}");
      } finally {
        t1 = $.$get$_toStringVisiting();
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = result.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _HashMap: {
      "^": "Object;$ti",
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      get$keys: function(_) {
        return new P._HashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
      },
      get$values: function(_) {
        var t1 = H.getTypeArgumentByIndex(this, 0);
        return H.MappedIterable_MappedIterable(new P._HashMapKeyIterable(this, [t1]), new P._HashMap_values_closure(this), t1, H.getTypeArgumentByIndex(this, 1));
      },
      containsKey$1: function(_, key) {
        var strings, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          return strings == null ? false : strings[key] != null;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          return nums == null ? false : nums[key] != null;
        } else
          return this._containsKey$1(key);
      },
      _containsKey$1: ["super$_HashMap$_containsKey", function(key) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      }],
      addAll$1: function(_, other) {
        other.forEach$1(0, new P._HashMap_addAll_closure(this));
      },
      $index: function(_, key) {
        var strings, t1, entry, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            t1 = null;
          else {
            entry = strings[key];
            t1 = entry === strings ? null : entry;
          }
          return t1;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          if (nums == null)
            t1 = null;
          else {
            entry = nums[key];
            t1 = entry === nums ? null : entry;
          }
          return t1;
        } else
          return this._get$1(0, key);
      },
      _get$1: ["super$_HashMap$_get", function(_, key) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        return index < 0 ? null : bucket[index + 1];
      }],
      $indexSet: function(_, key, value) {
        var strings, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            strings = P._HashMap__newHashTable();
            this._collection$_strings = strings;
          }
          this._collection$_addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          if (nums == null) {
            nums = P._HashMap__newHashTable();
            this._collection$_nums = nums;
          }
          this._collection$_addHashTableEntry$3(nums, key, value);
        } else
          this._set$2(key, value);
      },
      _set$2: ["super$_HashMap$_set", function(key, value) {
        var rest, hash, bucket, index;
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._HashMap__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null) {
          P._HashMap__setTableEntry(rest, hash, [key, value]);
          ++this._collection$_length;
          this._collection$_keys = null;
        } else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            ++this._collection$_length;
            this._collection$_keys = null;
          }
        }
      }],
      remove$1: function(_, key) {
        if (typeof key === "string" && key !== "__proto__")
          return this._removeHashTableEntry$2(this._collection$_strings, key);
        else if (typeof key === "number" && (key & 0x3ffffff) === key)
          return this._removeHashTableEntry$2(this._collection$_nums, key);
        else
          return this._remove$1(0, key);
      },
      _remove$1: ["super$_HashMap$_remove", function(_, key) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        --this._collection$_length;
        this._collection$_keys = null;
        return bucket.splice(index, 2)[1];
      }],
      forEach$1: function(_, action) {
        var keys, $length, i, key;
        keys = this._computeKeys$0();
        for ($length = keys.length, i = 0; i < $length; ++i) {
          key = keys[i];
          action.call$2(key, this.$index(0, key));
          if (keys !== this._collection$_keys)
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      _computeKeys$0: function() {
        var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
        t1 = this._collection$_keys;
        if (t1 != null)
          return t1;
        result = new Array(this._collection$_length);
        result.fixed$length = Array;
        strings = this._collection$_strings;
        if (strings != null) {
          names = Object.getOwnPropertyNames(strings);
          entries = names.length;
          for (index = 0, i = 0; i < entries; ++i) {
            result[index] = names[i];
            ++index;
          }
        } else
          index = 0;
        nums = this._collection$_nums;
        if (nums != null) {
          names = Object.getOwnPropertyNames(nums);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            result[index] = +names[i];
            ++index;
          }
        }
        rest = this._collection$_rest;
        if (rest != null) {
          names = Object.getOwnPropertyNames(rest);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            bucket = rest[names[i]];
            $length = bucket.length;
            for (i0 = 0; i0 < $length; i0 += 2) {
              result[index] = bucket[i0];
              ++index;
            }
          }
        }
        this._collection$_keys = result;
        return result;
      },
      _collection$_addHashTableEntry$3: function(table, key, value) {
        if (table[key] == null) {
          ++this._collection$_length;
          this._collection$_keys = null;
        }
        P._HashMap__setTableEntry(table, key, value);
      },
      _removeHashTableEntry$2: function(table, key) {
        var value;
        if (table != null && table[key] != null) {
          value = P._HashMap__getTableEntry(table, key);
          delete table[key];
          --this._collection$_length;
          this._collection$_keys = null;
          return value;
        } else
          return;
      },
      _computeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; i += 2)
          if (J.$eq$(bucket[i], key))
            return i;
        return -1;
      },
      $isMap: 1,
      $asMap: null
    },
    _HashMap_values_closure: {
      "^": "Closure:0;$this",
      call$1: [function(each) {
        return this.$this.$index(0, each);
      }, null, null, 2, 0, null, 39, "call"]
    },
    _HashMap_addAll_closure: {
      "^": "Closure;$this",
      call$2: function(key, value) {
        this.$this.$indexSet(0, key, value);
      },
      $signature: function() {
        return H.computeSignature(function(K, V) {
          return {func: 1, args: [K, V]};
        }, this.$this, "_HashMap");
      }
    },
    _IdentityHashMap: {
      "^": "_HashMap;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_keys,$ti",
      _computeHashCode$1: function(key) {
        return H.objectHashCode(key) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, key) {
        var $length, i, t1;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; i += 2) {
          t1 = bucket[i];
          if (t1 == null ? key == null : t1 === key)
            return i;
        }
        return -1;
      }
    },
    _CustomHashMap: {
      "^": "_HashMap;_equals,_hashCode,_validKey,_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_keys,$ti",
      $index: function(_, key) {
        if (this._validKey.call$1(key) !== true)
          return;
        return this.super$_HashMap$_get(0, key);
      },
      $indexSet: function(_, key, value) {
        this.super$_HashMap$_set(key, value);
      },
      containsKey$1: function(_, key) {
        if (this._validKey.call$1(key) !== true)
          return false;
        return this.super$_HashMap$_containsKey(key);
      },
      remove$1: function(_, key) {
        if (this._validKey.call$1(key) !== true)
          return;
        return this.super$_HashMap$_remove(0, key);
      },
      _computeHashCode$1: function(key) {
        return this._hashCode.call$1(key) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, key) {
        var $length, t1, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (t1 = this._equals, i = 0; i < $length; i += 2)
          if (t1.call$2(bucket[i], key) === true)
            return i;
        return -1;
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      static: {
        _CustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
          var t1 = validKey != null ? validKey : new P._CustomHashMap_closure($K);
          return new P._CustomHashMap(_equals, _hashCode, t1, 0, null, null, null, null, [$K, $V]);
        }
      }
    },
    _CustomHashMap_closure: {
      "^": "Closure:0;K",
      call$1: function(v) {
        var t1 = H.checkSubtypeOfRuntimeType(v, this.K);
        return t1;
      }
    },
    _HashMapKeyIterable: {
      "^": "Iterable;_collection$_map,$ti",
      get$length: function(_) {
        return this._collection$_map._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_map._collection$_length === 0;
      },
      get$iterator: function(_) {
        var t1 = this._collection$_map;
        return new P._HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null, this.$ti);
      },
      contains$1: function(_, element) {
        return this._collection$_map.containsKey$1(0, element);
      },
      forEach$1: function(_, f) {
        var t1, keys, $length, i;
        t1 = this._collection$_map;
        keys = t1._computeKeys$0();
        for ($length = keys.length, i = 0; i < $length; ++i) {
          f.call$1(keys[i]);
          if (keys !== t1._collection$_keys)
            throw H.wrapException(new P.ConcurrentModificationError(t1));
        }
      },
      $isEfficientLength: 1
    },
    _HashMapKeyIterator: {
      "^": "Object;_collection$_map,_collection$_keys,_offset,_collection$_current,$ti",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var keys, offset, t1;
        keys = this._collection$_keys;
        offset = this._offset;
        t1 = this._collection$_map;
        if (keys !== t1._collection$_keys)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else if (offset >= keys.length) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = keys[offset];
          this._offset = offset + 1;
          return true;
        }
      }
    },
    _LinkedIdentityHashMap: {
      "^": "JsLinkedHashMap;_length,_strings,_nums,_rest,_first,_last,_modifications,$ti",
      internalComputeHashCode$1: function(key) {
        return H.objectHashCode(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i, t1;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i) {
          t1 = bucket[i].get$hashMapCellKey();
          if (t1 == null ? key == null : t1 === key)
            return i;
        }
        return -1;
      },
      static: {
        _LinkedIdentityHashMap__LinkedIdentityHashMap$es6: function($K, $V) {
          return new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0, [$K, $V]);
        }
      }
    },
    _LinkedHashSet: {
      "^": "_HashSetBase;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_first,_collection$_last,_collection$_modifications,$ti",
      _newSet$0: function() {
        return new P._LinkedHashSet(0, null, null, null, null, null, 0, this.$ti);
      },
      get$iterator: function(_) {
        var t1 = new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null, [null]);
        t1._collection$_cell = this._collection$_first;
        return t1;
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      contains$1: function(_, object) {
        var strings, nums;
        if (typeof object === "string" && object !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            return false;
          return strings[object] != null;
        } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
          nums = this._collection$_nums;
          if (nums == null)
            return false;
          return nums[object] != null;
        } else
          return this._contains$1(object);
      },
      _contains$1: function(object) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      },
      lookup$1: function(object) {
        var t1;
        if (!(typeof object === "string" && object !== "__proto__"))
          t1 = typeof object === "number" && (object & 0x3ffffff) === object;
        else
          t1 = true;
        if (t1)
          return this.contains$1(0, object) ? object : null;
        else
          return this._lookup$1(object);
      },
      _lookup$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return;
        return J.$index$asx(bucket, index).get$_element();
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        cell = this._collection$_first;
        modifications = this._collection$_modifications;
        for (; cell != null;) {
          action.call$1(cell.get$_element());
          if (modifications !== this._collection$_modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell.get$_collection$_next();
        }
      },
      get$first: function(_) {
        var t1 = this._collection$_first;
        if (t1 == null)
          throw H.wrapException(new P.StateError("No elements"));
        return t1.get$_element();
      },
      add$1: function(_, element) {
        var strings, table, nums;
        if (typeof element === "string" && element !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_strings = table;
            strings = table;
          }
          return this._collection$_addHashTableEntry$2(strings, element);
        } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._collection$_nums;
          if (nums == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_nums = table;
            nums = table;
          }
          return this._collection$_addHashTableEntry$2(nums, element);
        } else
          return this._add$1(0, element);
      },
      _add$1: function(_, element) {
        var rest, hash, bucket;
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._LinkedHashSet__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._collection$_newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._collection$_newLinkedCell$1(element));
        }
        return true;
      },
      remove$1: function(_, object) {
        if (typeof object === "string" && object !== "__proto__")
          return this._removeHashTableEntry$2(this._collection$_strings, object);
        else if (typeof object === "number" && (object & 0x3ffffff) === object)
          return this._removeHashTableEntry$2(this._collection$_nums, object);
        else
          return this._remove$1(0, object);
      },
      _remove$1: function(_, object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return false;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._collection$_unlinkCell$1(bucket.splice(index, 1)[0]);
        return true;
      },
      clear$0: function(_) {
        if (this._collection$_length > 0) {
          this._collection$_last = null;
          this._collection$_first = null;
          this._collection$_rest = null;
          this._collection$_nums = null;
          this._collection$_strings = null;
          this._collection$_length = 0;
          this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        }
      },
      _collection$_addHashTableEntry$2: function(table, element) {
        if (table[element] != null)
          return false;
        table[element] = this._collection$_newLinkedCell$1(element);
        return true;
      },
      _removeHashTableEntry$2: function(table, element) {
        var cell;
        if (table == null)
          return false;
        cell = table[element];
        if (cell == null)
          return false;
        this._collection$_unlinkCell$1(cell);
        delete table[element];
        return true;
      },
      _collection$_newLinkedCell$1: function(element) {
        var cell, last;
        cell = new P._LinkedHashSetCell(element, null, null);
        if (this._collection$_first == null) {
          this._collection$_last = cell;
          this._collection$_first = cell;
        } else {
          last = this._collection$_last;
          cell._collection$_previous = last;
          last._collection$_next = cell;
          this._collection$_last = cell;
        }
        ++this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        return cell;
      },
      _collection$_unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell.get$_collection$_previous();
        next = cell.get$_collection$_next();
        if (previous == null)
          this._collection$_first = next;
        else
          previous._collection$_next = next;
        if (next == null)
          this._collection$_last = previous;
        else
          next.set$_collection$_previous(previous);
        --this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].get$_element(), element))
            return i;
        return -1;
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null,
      static: {
        _LinkedHashSet__newHashTable: function() {
          var table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }
      }
    },
    _LinkedHashSetCell: {
      "^": "Object;_element<,_collection$_next<,_collection$_previous@"
    },
    _LinkedHashSetIterator: {
      "^": "Object;_set,_collection$_modifications,_collection$_cell,_collection$_current,$ti",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1 = this._set;
        if (this._collection$_modifications !== t1._collection$_modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._collection$_cell;
          if (t1 == null) {
            this._collection$_current = null;
            return false;
          } else {
            this._collection$_current = t1.get$_element();
            this._collection$_cell = this._collection$_cell.get$_collection$_next();
            return true;
          }
        }
      }
    },
    UnmodifiableListView: {
      "^": "UnmodifiableListBase;_collection$_source,$ti",
      get$length: function(_) {
        return this._collection$_source.length;
      },
      $index: function(_, index) {
        return J.elementAt$1$ax(this._collection$_source, index);
      }
    },
    _HashSetBase: {
      "^": "SetBase;$ti",
      difference$1: function(other) {
        var result, t1, element;
        result = this._newSet$0();
        for (t1 = new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null, [null]), t1._collection$_cell = this._collection$_first; t1.moveNext$0();) {
          element = t1._collection$_current;
          if (!other.contains$1(0, element))
            result.add$1(0, element);
        }
        return result;
      }
    },
    IterableBase: {
      "^": "Iterable;$ti"
    },
    closure5: {
      "^": "Closure:4;result",
      call$2: [function(k, v) {
        this.result.$indexSet(0, k, v);
      }, null, null, 4, 0, null, 172, 18, "call"]
    },
    ListBase: {
      "^": "Object_ListMixin;$ti"
    },
    Object_ListMixin: {
      "^": "Object+ListMixin;$ti",
      $asList: null,
      $asIterable: null,
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    ListMixin: {
      "^": "Object;$ti",
      get$iterator: function(receiver) {
        return new H.ListIterator(receiver, this.get$length(receiver), 0, null, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      forEach$1: function(receiver, action) {
        var $length, i;
        $length = this.get$length(receiver);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          action.call$1(this.$index(receiver, i));
          if ($length !== this.get$length(receiver))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      get$isEmpty: function(receiver) {
        return J.$eq$(this.get$length(receiver), 0);
      },
      get$isNotEmpty: function(receiver) {
        return !this.get$isEmpty(receiver);
      },
      get$first: function(receiver) {
        if (J.$eq$(this.get$length(receiver), 0))
          throw H.wrapException(H.IterableElementError_noElement());
        return this.$index(receiver, 0);
      },
      contains$1: function(receiver, element) {
        var $length, t1, i, t2;
        $length = this.get$length(receiver);
        t1 = J.getInterceptor($length);
        i = 0;
        while (true) {
          t2 = this.get$length(receiver);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          if (J.$eq$(this.$index(receiver, i), element))
            return true;
          if (!t1.$eq($length, this.get$length(receiver)))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
          ++i;
        }
        return false;
      },
      where$1: function(receiver, test) {
        return new H.WhereIterable(receiver, test, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      },
      map$1: function(receiver, f) {
        return new H.MappedListIterable(receiver, f, [null, null]);
      },
      reduce$1: function(receiver, combine) {
        var $length, value, i;
        $length = this.get$length(receiver);
        if (J.$eq$($length, 0))
          throw H.wrapException(H.IterableElementError_noElement());
        value = this.$index(receiver, 0);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 1;
        for (; i < $length; ++i) {
          value = combine.call$2(value, this.$index(receiver, i));
          if ($length !== this.get$length(receiver))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return value;
      },
      skip$1: function(receiver, count) {
        return H.SubListIterable$(receiver, count, null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      },
      toList$1$growable: function(receiver, growable) {
        var result, i, t1;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
        i = 0;
        while (true) {
          t1 = this.get$length(receiver);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.$index(receiver, i);
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = t1;
          ++i;
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      add$1: function(receiver, element) {
        var t1 = this.get$length(receiver);
        this.set$length(receiver, J.$add$ns(t1, 1));
        this.$indexSet(receiver, t1, element);
      },
      addAll$1: function(receiver, iterable) {
        var i, t1, element, t2;
        i = this.get$length(receiver);
        for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
          element = t1.get$current();
          t2 = J.getInterceptor$ns(i);
          this.set$length(receiver, t2.$add(i, 1));
          this.$indexSet(receiver, i, element);
          i = t2.$add(i, 1);
        }
      },
      remove$1: function(receiver, element) {
        var i, t1;
        i = 0;
        while (true) {
          t1 = this.get$length(receiver);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          if (J.$eq$(this.$index(receiver, i), element)) {
            this.setRange$4(receiver, i, J.$sub$n(this.get$length(receiver), 1), receiver, i + 1);
            this.set$length(receiver, J.$sub$n(this.get$length(receiver), 1));
            return true;
          }
          ++i;
        }
        return false;
      },
      clear$0: function(receiver) {
        this.set$length(receiver, 0);
      },
      sort$1: function(receiver, compare) {
        H.Sort__doSort(receiver, 0, J.$sub$n(this.get$length(receiver), 1), compare);
      },
      fillRange$3: function(receiver, start, end, fill) {
        var i;
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        for (i = start; i < end; ++i)
          this.$indexSet(receiver, i, fill);
      },
      setRange$4: ["super$ListMixin$setRange", function(receiver, start, end, iterable, skipCount) {
        var $length, t1, t2, otherStart, otherList, t3, i, t4;
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        $length = J.$sub$n(end, start);
        t1 = J.getInterceptor($length);
        if (t1.$eq($length, 0))
          return;
        if (J.$lt$n(skipCount, 0))
          H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
        t2 = J.getInterceptor(iterable);
        if (!!t2.$isList) {
          otherStart = skipCount;
          otherList = iterable;
        } else {
          otherList = t2.skip$1(iterable, skipCount).toList$1$growable(0, false);
          otherStart = 0;
        }
        t2 = J.getInterceptor$ns(otherStart);
        t3 = J.getInterceptor$asx(otherList);
        if (J.$gt$n(t2.$add(otherStart, $length), t3.get$length(otherList)))
          throw H.wrapException(H.IterableElementError_tooFew());
        if (t2.$lt(otherStart, start))
          for (i = t1.$sub($length, 1), t1 = J.getInterceptor$ns(start); t4 = J.getInterceptor$n(i), t4.$ge(i, 0); i = t4.$sub(i, 1))
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(otherList, t2.$add(otherStart, i)));
        else {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = J.getInterceptor$ns(start);
          i = 0;
          for (; i < $length; ++i)
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(otherList, t2.$add(otherStart, i)));
        }
      }, function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      }, "setRange$3", null, null, "get$setRange", 6, 2, null, 83],
      replaceRange$3: function(receiver, start, end, newContents) {
        var removeLength, insertLength, t1, t2, delta, insertEnd, newLength;
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        newContents = C.JSString_methods.toList$0(newContents);
        removeLength = J.$sub$n(end, start);
        insertLength = newContents.length;
        t1 = J.getInterceptor$n(removeLength);
        t2 = J.getInterceptor$ns(start);
        if (t1.$ge(removeLength, insertLength)) {
          delta = t1.$sub(removeLength, insertLength);
          insertEnd = t2.$add(start, insertLength);
          newLength = J.$sub$n(this.get$length(receiver), delta);
          this.setRange$3(receiver, start, insertEnd, newContents);
          if (!J.$eq$(delta, 0)) {
            this.setRange$4(receiver, insertEnd, newLength, receiver, end);
            this.set$length(receiver, newLength);
          }
        } else {
          if (typeof removeLength !== "number")
            return H.iae(removeLength);
          newLength = J.$add$ns(this.get$length(receiver), insertLength - removeLength);
          insertEnd = t2.$add(start, insertLength);
          this.set$length(receiver, newLength);
          this.setRange$4(receiver, insertEnd, newLength, receiver, end);
          this.setRange$3(receiver, start, insertEnd, newContents);
        }
      },
      indexOf$2: function(receiver, element, startIndex) {
        var t1, i;
        t1 = J.getInterceptor$n(startIndex);
        if (t1.$ge(startIndex, this.get$length(receiver)))
          return -1;
        if (t1.$lt(startIndex, 0))
          startIndex = 0;
        for (i = startIndex; t1 = J.getInterceptor$n(i), t1.$lt(i, this.get$length(receiver)); i = t1.$add(i, 1))
          if (J.$eq$(this.$index(receiver, i), element))
            return i;
        return -1;
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      lastIndexOf$2: function(receiver, element, startIndex) {
        var i, t1;
        if (startIndex == null)
          startIndex = J.$sub$n(this.get$length(receiver), 1);
        else {
          if (C.JSString_methods.$lt(startIndex, 0))
            return -1;
          if (C.JSString_methods.$ge(startIndex, this.get$length(receiver)))
            startIndex = J.$sub$n(this.get$length(receiver), 1);
        }
        for (i = startIndex; t1 = J.getInterceptor$n(i), t1.$ge(i, 0); i = t1.$sub(i, 1))
          if (J.$eq$(this.$index(receiver, i), element))
            return i;
        return -1;
      },
      lastIndexOf$1: function($receiver, element) {
        return this.lastIndexOf$2($receiver, element, null);
      },
      insert$2: function(receiver, index, element) {
        P.RangeError_checkValueInInterval(index, 0, this.get$length(receiver), "index", null);
        if (J.$eq$(index, this.get$length(receiver))) {
          this.add$1(receiver, element);
          return;
        }
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$(index));
        this.set$length(receiver, J.$add$ns(this.get$length(receiver), 1));
        this.setRange$4(receiver, index + 1, this.get$length(receiver), receiver, index);
        this.$indexSet(receiver, index, element);
      },
      removeAt$1: function(receiver, index) {
        var result = this.$index(receiver, index);
        this.setRange$4(receiver, index, J.$sub$n(this.get$length(receiver), 1), receiver, index + 1);
        this.set$length(receiver, J.$sub$n(this.get$length(receiver), 1));
        return result;
      },
      insertAll$2: function(receiver, index, iterable) {
        var insertionLength;
        P.RangeError_checkValueInInterval(index, 0, this.get$length(receiver), "index", null);
        if (!J.getInterceptor(iterable).$isEfficientLength || false) {
          iterable.toString;
          iterable = H.setRuntimeTypeInfo(iterable.slice(), [H.getTypeArgumentByIndex(iterable, 0)]);
        }
        insertionLength = iterable.length;
        this.set$length(receiver, J.$add$ns(this.get$length(receiver), insertionLength));
        if (iterable.length !== insertionLength) {
          this.set$length(receiver, J.$sub$n(this.get$length(receiver), insertionLength));
          throw H.wrapException(new P.ConcurrentModificationError(iterable));
        }
        this.setRange$4(receiver, index + insertionLength, this.get$length(receiver), receiver, index);
        this.setAll$2(receiver, index, iterable);
      },
      setAll$2: function(receiver, index, iterable) {
        var t1, _i, index0;
        if (!!J.getInterceptor(iterable).$isList)
          this.setRange$3(receiver, index, index + iterable.length, iterable);
        else
          for (t1 = iterable.length, _i = 0; _i < iterable.length; iterable.length === t1 || (0, H.throwConcurrentModificationError)(iterable), ++_i, index = index0) {
            index0 = index + 1;
            this.$indexSet(receiver, index, iterable[_i]);
          }
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    MapMixin: {
      "^": "Object;$ti",
      forEach$1: function(_, action) {
        var t1, t2, key, node;
        for (t1 = this.get$keys(this), t1 = new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]), t2 = this.nodes._collection$_map; t1.moveNext$0();) {
          key = t1.__internal$_current;
          node = t2.$index(0, key);
          action.call$2(key, node == null ? null : J.get$value$x(node));
        }
      },
      addAll$1: function(_, other) {
        var t1, key;
        for (t1 = other.get$keys(other), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          key = t1.get$current();
          this.$indexSet(0, key, other.$index(0, key));
        }
      },
      containsKey$1: function(_, key) {
        return this.get$keys(this).contains$1(0, key);
      },
      get$length: function(_) {
        return J.get$length$asx(this.get$keys(this)._iterable);
      },
      get$isEmpty: function(_) {
        return J.get$isEmpty$asx(this.get$keys(this)._iterable);
      },
      get$isNotEmpty: function(_) {
        var t1 = this.get$keys(this);
        return !t1.get$isEmpty(t1);
      },
      get$values: function(_) {
        return new P._MapBaseValueIterable(this, [H.getRuntimeTypeArgument(this, "MapMixin", 0), H.getRuntimeTypeArgument(this, "MapMixin", 1)]);
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      $isMap: 1,
      $asMap: null
    },
    _MapBaseValueIterable: {
      "^": "Iterable;_collection$_map,$ti",
      get$length: function(_) {
        var t1 = this._collection$_map;
        return J.get$length$asx(t1.get$keys(t1)._iterable);
      },
      get$isEmpty: function(_) {
        var t1 = this._collection$_map;
        return J.get$isEmpty$asx(t1.get$keys(t1)._iterable);
      },
      get$isNotEmpty: function(_) {
        var t1 = this._collection$_map;
        t1 = t1.get$keys(t1);
        return !t1.get$isEmpty(t1);
      },
      get$first: function(_) {
        var t1, t2;
        t1 = this._collection$_map;
        t2 = t1.get$keys(t1);
        return t1.$index(0, t2._f.call$1(J.get$first$ax(t2._iterable)));
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this._collection$_map;
        t2 = t1.get$keys(t1);
        return new P._MapBaseValueIterator(new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f, [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]), t1, null, this.$ti);
      },
      $asIterable: function($K, $V) {
        return [$V];
      },
      $isEfficientLength: 1
    },
    _MapBaseValueIterator: {
      "^": "Object;_collection$_keys,_collection$_map,_collection$_current,$ti",
      moveNext$0: function() {
        var t1 = this._collection$_keys;
        if (t1.moveNext$0()) {
          this._collection$_current = this._collection$_map.$index(0, t1.__internal$_current);
          return true;
        }
        this._collection$_current = null;
        return false;
      },
      get$current: function() {
        return this._collection$_current;
      }
    },
    _UnmodifiableMapMixin: {
      "^": "Object;$ti",
      $indexSet: function(_, key, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      addAll$1: function(_, other) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      clear$0: function(_) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      remove$1: function(_, key) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      $isMap: 1,
      $asMap: null
    },
    MapView: {
      "^": "Object;$ti",
      $index: function(_, key) {
        return this._collection$_map.$index(0, key);
      },
      $indexSet: function(_, key, value) {
        this._collection$_map.$indexSet(0, key, value);
      },
      addAll$1: function(_, other) {
        this._collection$_map.addAll$1(0, other);
      },
      containsKey$1: function(_, key) {
        return this._collection$_map.containsKey$1(0, key);
      },
      forEach$1: function(_, action) {
        this._collection$_map.forEach$1(0, action);
      },
      get$isEmpty: function(_) {
        var t1 = this._collection$_map;
        return t1.get$isEmpty(t1);
      },
      get$isNotEmpty: function(_) {
        var t1 = this._collection$_map;
        return t1.get$isNotEmpty(t1);
      },
      get$length: function(_) {
        var t1 = this._collection$_map;
        return t1.get$length(t1);
      },
      get$keys: function(_) {
        var t1 = this._collection$_map;
        return t1.get$keys(t1);
      },
      remove$1: function(_, key) {
        return this._collection$_map.remove$1(0, key);
      },
      toString$0: function(_) {
        return this._collection$_map.toString$0(0);
      },
      get$values: function(_) {
        var t1 = this._collection$_map;
        return t1.get$values(t1);
      },
      $isMap: 1,
      $asMap: null
    },
    UnmodifiableMapView: {
      "^": "MapView+_UnmodifiableMapMixin;_collection$_map,$ti",
      $asMap: null,
      $isMap: 1
    },
    Maps_mapToString_closure: {
      "^": "Closure:4;_box_0,result",
      call$2: function(k, v) {
        var t1, t2;
        t1 = this._box_0;
        if (!t1.first)
          this.result._contents += ", ";
        t1.first = false;
        t1 = this.result;
        t2 = t1._contents += H.S(k);
        t1._contents = t2 + ": ";
        t1._contents += H.S(v);
      }
    },
    ListQueue: {
      "^": "ListIterable;_table,_head,_tail,_modificationCount,$ti",
      get$iterator: function(_) {
        return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null, this.$ti);
      },
      forEach$1: function(_, action) {
        var modificationCount, i, t1;
        modificationCount = this._modificationCount;
        for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
          t1 = this._table;
          if (i < 0 || i >= t1.length)
            return H.ioore(t1, i);
          action.call$1(t1[i]);
          if (modificationCount !== this._modificationCount)
            H.throwExpression(new P.ConcurrentModificationError(this));
        }
      },
      get$isEmpty: function(_) {
        return this._head === this._tail;
      },
      get$length: function(_) {
        return (this._tail - this._head & this._table.length - 1) >>> 0;
      },
      get$first: function(_) {
        var t1, t2;
        t1 = this._head;
        if (t1 === this._tail)
          throw H.wrapException(H.IterableElementError_noElement());
        t2 = this._table;
        if (t1 >= t2.length)
          return H.ioore(t2, t1);
        return t2[t1];
      },
      elementAt$1: function(_, index) {
        var $length, t1, t2, t3;
        $length = (this._tail - this._head & this._table.length - 1) >>> 0;
        if (typeof index !== "number")
          return H.iae(index);
        if (0 > index || index >= $length)
          H.throwExpression(P.IndexError$(index, this, "index", null, $length));
        t1 = this._table;
        t2 = t1.length;
        t3 = (this._head + index & t2 - 1) >>> 0;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        return t1[t3];
      },
      toList$1$growable: function(_, growable) {
        var list = H.setRuntimeTypeInfo([], this.$ti);
        C.JSArray_methods.set$length(list, this.get$length(this));
        this._collection$_writeToList$1(list);
        return list;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      add$1: function(_, value) {
        this._add$1(0, value);
      },
      addAll$1: function(_, elements) {
        var addCount, $length, t1, t2, newCapacity, newTable, endSpace, preSpace;
        addCount = elements.get$length(elements);
        $length = this.get$length(this);
        t1 = C.JSInt_methods.$add($length, addCount);
        t2 = this._table.length;
        if (t1 >= t2) {
          t1 = C.JSInt_methods.$add($length, addCount);
          newCapacity = P.ListQueue__nextPowerOf2(t1 + C.JSNumber_methods._shrOtherPositive$1(t1, 1));
          if (typeof newCapacity !== "number")
            return H.iae(newCapacity);
          t1 = new Array(newCapacity);
          t1.fixed$length = Array;
          newTable = H.setRuntimeTypeInfo(t1, this.$ti);
          this._tail = this._collection$_writeToList$1(newTable);
          this._table = newTable;
          this._head = 0;
          C.JSArray_methods.setRange$4(newTable, $length, C.JSInt_methods.$add($length, addCount), elements, 0);
          this._tail = C.JSInt_methods.$add(this._tail, addCount);
        } else {
          endSpace = t2 - this._tail;
          if (addCount.$lt(0, endSpace)) {
            t1 = this._table;
            t2 = this._tail;
            C.JSArray_methods.setRange$4(t1, t2, C.JSInt_methods.$add(t2, addCount), elements, 0);
            this._tail = C.JSInt_methods.$add(this._tail, addCount);
          } else {
            preSpace = addCount.$sub(0, endSpace);
            t1 = this._table;
            t2 = this._tail;
            C.JSArray_methods.setRange$4(t1, t2, t2 + endSpace, elements, 0);
            C.JSArray_methods.setRange$4(this._table, 0, preSpace, elements, endSpace);
            this._tail = preSpace;
          }
        }
        ++this._modificationCount;
      },
      remove$1: function(_, value) {
        var i, t1;
        for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
          t1 = this._table;
          if (i < 0 || i >= t1.length)
            return H.ioore(t1, i);
          if (J.$eq$(t1[i], value)) {
            this._remove$1(0, i);
            ++this._modificationCount;
            return true;
          }
        }
        return false;
      },
      clear$0: function(_) {
        var i, t1, t2, t3, t4;
        i = this._head;
        t1 = this._tail;
        if (i !== t1) {
          for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
            if (i < 0 || i >= t3)
              return H.ioore(t2, i);
            t2[i] = null;
          }
          this._tail = 0;
          this._head = 0;
          ++this._modificationCount;
        }
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      removeFirst$0: function() {
        var t1, t2, t3, result;
        t1 = this._head;
        if (t1 === this._tail)
          throw H.wrapException(H.IterableElementError_noElement());
        ++this._modificationCount;
        t2 = this._table;
        t3 = t2.length;
        if (t1 >= t3)
          return H.ioore(t2, t1);
        result = t2[t1];
        t2[t1] = null;
        this._head = (t1 + 1 & t3 - 1) >>> 0;
        return result;
      },
      _add$1: function(_, element) {
        var t1, t2, t3;
        t1 = this._table;
        t2 = this._tail;
        t3 = t1.length;
        if (t2 < 0 || t2 >= t3)
          return H.ioore(t1, t2);
        t1[t2] = element;
        t3 = (t2 + 1 & t3 - 1) >>> 0;
        this._tail = t3;
        if (this._head === t3)
          this._grow$0();
        ++this._modificationCount;
      },
      _remove$1: function(_, offset) {
        var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
        t1 = this._table;
        t2 = t1.length;
        mask = t2 - 1;
        t3 = this._head;
        t4 = this._tail;
        if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
          for (i = offset; i !== t3; i = prevOffset) {
            prevOffset = (i - 1 & mask) >>> 0;
            if (prevOffset < 0 || prevOffset >= t2)
              return H.ioore(t1, prevOffset);
            t4 = t1[prevOffset];
            if (i < 0 || i >= t2)
              return H.ioore(t1, i);
            t1[i] = t4;
          }
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = null;
          this._head = (t3 + 1 & mask) >>> 0;
          return (offset + 1 & mask) >>> 0;
        } else {
          t3 = (t4 - 1 & mask) >>> 0;
          this._tail = t3;
          for (i = offset; i !== t3; i = nextOffset) {
            nextOffset = (i + 1 & mask) >>> 0;
            if (nextOffset < 0 || nextOffset >= t2)
              return H.ioore(t1, nextOffset);
            t4 = t1[nextOffset];
            if (i < 0 || i >= t2)
              return H.ioore(t1, i);
            t1[i] = t4;
          }
          if (t3 < 0 || t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = null;
          return offset;
        }
      },
      _grow$0: function() {
        var t1, newTable, t2, split;
        t1 = new Array(this._table.length * 2);
        t1.fixed$length = Array;
        newTable = H.setRuntimeTypeInfo(t1, this.$ti);
        t1 = this._table;
        t2 = this._head;
        split = t1.length - t2;
        C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        C.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
        this._head = 0;
        this._tail = this._table.length;
        this._table = newTable;
      },
      _collection$_writeToList$1: function(target) {
        var t1, t2, t3, $length, firstPartSize;
        t1 = this._head;
        t2 = this._tail;
        t3 = this._table;
        if (t1 <= t2) {
          $length = t2 - t1;
          C.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
          return $length;
        } else {
          firstPartSize = t3.length - t1;
          C.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
          C.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + this._tail, this._table, 0);
          return this._tail + firstPartSize;
        }
      },
      ListQueue$1: function(initialCapacity, $E) {
        var t1 = new Array(8);
        t1.fixed$length = Array;
        this._table = H.setRuntimeTypeInfo(t1, [$E]);
      },
      $isEfficientLength: 1,
      $asIterable: null,
      static: {
        ListQueue$: function(initialCapacity, $E) {
          var t1 = new P.ListQueue(null, 0, 0, 0, [$E]);
          t1.ListQueue$1(initialCapacity, $E);
          return t1;
        },
        ListQueue__nextPowerOf2: function(number) {
          var nextNumber;
          number = C.JSNull_methods.$shl(number, 1) - 1;
          for (; true; number = nextNumber)
            nextNumber = (number & number - 1) >>> 0;
        }
      }
    },
    _ListQueueIterator: {
      "^": "Object;_queue,_collection$_end,_modificationCount,_collection$_position,_collection$_current,$ti",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1, t2, t3;
        t1 = this._queue;
        if (this._modificationCount !== t1._modificationCount)
          H.throwExpression(new P.ConcurrentModificationError(t1));
        t2 = this._collection$_position;
        if (t2 === this._collection$_end) {
          this._collection$_current = null;
          return false;
        }
        t1 = t1._table;
        t3 = t1.length;
        if (t2 >= t3)
          return H.ioore(t1, t2);
        this._collection$_current = t1[t2];
        this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
        return true;
      }
    },
    SetMixin: {
      "^": "Object;$ti",
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      addAll$1: function(_, elements) {
        var t1;
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
          this.add$1(0, t1.get$current());
      },
      removeAll$1: function(elements) {
        var t1, _i;
        for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i)
          this.remove$1(0, elements[_i]);
      },
      toList$1$growable: function(_, growable) {
        var result, t1, i, element, i0;
        result = H.setRuntimeTypeInfo([], this.$ti);
        C.JSArray_methods.set$length(result, this._collection$_length);
        for (t1 = new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null, [null]), t1._collection$_cell = this._collection$_first, i = 0; t1.moveNext$0(); i = i0) {
          element = t1._collection$_current;
          i0 = i + 1;
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = element;
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      map$1: function(_, f) {
        return new H.EfficientLengthMappedIterable(this, f, [H.getTypeArgumentByIndex(this, 0), null]);
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      where$1: function(_, f) {
        return new H.WhereIterable(this, f, this.$ti);
      },
      forEach$1: function(_, f) {
        var t1;
        for (t1 = new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null, [null]), t1._collection$_cell = this._collection$_first; t1.moveNext$0();)
          f.call$1(t1._collection$_current);
      },
      reduce$1: function(_, combine) {
        var iterator, value;
        iterator = new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null, [null]);
        iterator._collection$_cell = this._collection$_first;
        if (!iterator.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        value = iterator._collection$_current;
        for (; iterator.moveNext$0();)
          value = combine.call$2(value, iterator._collection$_current);
        return value;
      },
      join$1: function(_, separator) {
        var iterator, t1;
        iterator = new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null, [null]);
        iterator._collection$_cell = this._collection$_first;
        if (!iterator.moveNext$0())
          return "";
        if (separator === "") {
          t1 = "";
          do
            t1 += H.S(iterator._collection$_current);
          while (iterator.moveNext$0());
        } else {
          t1 = H.S(iterator._collection$_current);
          for (; iterator.moveNext$0();)
            t1 = t1 + separator + H.S(iterator._collection$_current);
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      any$1: function(_, test) {
        var t1;
        for (t1 = new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null, [null]), t1._collection$_cell = this._collection$_first; t1.moveNext$0();)
          if (test.call$1(t1._collection$_current) === true)
            return true;
        return false;
      },
      skip$1: function(_, n) {
        return H.SkipIterable_SkipIterable(this, n, H.getTypeArgumentByIndex(this, 0));
      },
      get$first: function(_) {
        var it = new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null, [null]);
        it._collection$_cell = this._collection$_first;
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        return it._collection$_current;
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$notNull("index"));
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null, [null]), t1._collection$_cell = this._collection$_first, elementIndex = 0; t1.moveNext$0();) {
          element = t1._collection$_current;
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    SetBase: {
      "^": "SetMixin;$ti"
    }
  }], ["dart.convert", "dart:convert",, P, {
    "^": "",
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null), null);
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    _parseJson: function(source, reviver) {
      var parsed, e, exception, t1;
      if (typeof source !== "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        throw H.wrapException(new P.FormatException(String(e), null, null));
      }
      return P._convertJsonToDartLazy(parsed);
    },
    _defaultToEncodable: [function(object) {
      return object.toJson$0();
    }, "call$1", "convert___defaultToEncodable$closure", 2, 0, 0, 53],
    _JsonMap: {
      "^": "Object;_original,_processed,_data",
      $index: function(_, key) {
        var t1, result;
        t1 = this._processed;
        if (t1 == null)
          return this._data.$index(0, key);
        else if (typeof key !== "string")
          return;
        else {
          result = t1[key];
          return typeof result == "undefined" ? this._process$1(key) : result;
        }
      },
      get$length: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._convert$_computeKeys$0().length;
        return t1;
      },
      get$isEmpty: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._convert$_computeKeys$0().length;
        return t1 === 0;
      },
      get$isNotEmpty: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._convert$_computeKeys$0().length;
        return t1 > 0;
      },
      get$keys: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          return t1.get$keys(t1);
        }
        return new P._JsonMapKeyIterable(this);
      },
      get$values: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          return t1.get$values(t1);
        }
        return H.MappedIterable_MappedIterable(this._convert$_computeKeys$0(), new P._JsonMap_values_closure(this), null, null);
      },
      $indexSet: function(_, key, value) {
        var processed, original;
        if (this._processed == null)
          this._data.$indexSet(0, key, value);
        else if (this.containsKey$1(0, key)) {
          processed = this._processed;
          processed[key] = value;
          original = this._original;
          if (original == null ? processed != null : original !== processed)
            original[key] = null;
        } else
          this._convert$_upgrade$0().$indexSet(0, key, value);
      },
      addAll$1: function(_, other) {
        other.forEach$1(0, new P._JsonMap_addAll_closure(this));
      },
      containsKey$1: function(_, key) {
        if (this._processed == null)
          return this._data.containsKey$1(0, key);
        if (typeof key !== "string")
          return false;
        return Object.prototype.hasOwnProperty.call(this._original, key);
      },
      putIfAbsent$2: function(_, key, ifAbsent) {
        var value;
        if (this.containsKey$1(0, key))
          return this.$index(0, key);
        value = ifAbsent.call$0();
        this.$indexSet(0, key, value);
        return value;
      },
      remove$1: [function(_, key) {
        if (this._processed != null && !this.containsKey$1(0, key))
          return;
        return this._convert$_upgrade$0().remove$1(0, key);
      }, "call$1", "get$remove", 2, 0, 45],
      clear$0: function(_) {
        var t1;
        if (this._processed == null)
          this._data.clear$0(0);
        else {
          t1 = this._data;
          if (t1 != null)
            J.clear$0$ax(t1);
          this._processed = null;
          this._original = null;
          this._data = P.LinkedHashMap__makeEmpty();
        }
      },
      forEach$1: function(_, f) {
        var keys, i, key, value;
        if (this._processed == null)
          return this._data.forEach$1(0, f);
        keys = this._convert$_computeKeys$0();
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          value = this._processed[key];
          if (typeof value == "undefined") {
            value = P._convertJsonToDartLazy(this._original[key]);
            this._processed[key] = value;
          }
          f.call$2(key, value);
          if (keys !== this._data)
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      _convert$_computeKeys$0: function() {
        var keys = this._data;
        if (keys == null) {
          keys = Object.keys(this._original);
          this._data = keys;
        }
        return keys;
      },
      _convert$_upgrade$0: function() {
        var result, keys, i, t1, key;
        if (this._processed == null)
          return this._data;
        result = P.LinkedHashMap__makeEmpty();
        keys = this._convert$_computeKeys$0();
        for (i = 0; t1 = keys.length, i < t1; ++i) {
          key = keys[i];
          result.$indexSet(0, key, this.$index(0, key));
        }
        if (t1 === 0)
          keys.push(null);
        else
          C.JSArray_methods.set$length(keys, 0);
        this._processed = null;
        this._original = null;
        this._data = result;
        return result;
      },
      _process$1: function(key) {
        var result;
        if (!Object.prototype.hasOwnProperty.call(this._original, key))
          return;
        result = P._convertJsonToDartLazy(this._original[key]);
        return this._processed[key] = result;
      },
      $isMap: 1,
      $asMap: Isolate.functionThatReturnsNull
    },
    _JsonMap_values_closure: {
      "^": "Closure:0;$this",
      call$1: [function(each) {
        return this.$this.$index(0, each);
      }, null, null, 2, 0, null, 39, "call"]
    },
    _JsonMap_addAll_closure: {
      "^": "Closure:4;$this",
      call$2: function(key, value) {
        this.$this.$indexSet(0, key, value);
      }
    },
    _JsonMapKeyIterable: {
      "^": "ListIterable;_parent",
      get$length: function(_) {
        var t1 = this._parent;
        if (t1._processed == null) {
          t1 = t1._data;
          t1 = t1.get$length(t1);
        } else
          t1 = t1._convert$_computeKeys$0().length;
        return t1;
      },
      elementAt$1: function(_, index) {
        var t1 = this._parent;
        if (t1._processed == null)
          t1 = t1.get$keys(t1).elementAt$1(0, index);
        else {
          t1 = t1._convert$_computeKeys$0();
          if (index >>> 0 !== index || index >= t1.length)
            return H.ioore(t1, index);
          t1 = t1[index];
        }
        return t1;
      },
      get$iterator: function(_) {
        var t1 = this._parent;
        if (t1._processed == null) {
          t1 = t1.get$keys(t1);
          t1 = t1.get$iterator(t1);
        } else {
          t1 = t1._convert$_computeKeys$0();
          t1 = new J.ArrayIterator(t1, t1.length, 0, null, [H.getTypeArgumentByIndex(t1, 0)]);
        }
        return t1;
      },
      contains$1: function(_, key) {
        return this._parent.containsKey$1(0, key);
      },
      $asListIterable: Isolate.functionThatReturnsNull,
      $asIterable: Isolate.functionThatReturnsNull
    },
    Base64Codec: {
      "^": "Codec;_encoder",
      get$decoder: function() {
        return C.C_Base64Decoder;
      },
      $asCodec: function() {
        return [[P.List, P.$int], P.String];
      }
    },
    Base64Encoder: {
      "^": "Converter;_urlSafe",
      $asConverter: function() {
        return [[P.List, P.$int], P.String];
      }
    },
    Base64Decoder: {
      "^": "Converter;",
      convert$3: function(input, start, end) {
        var decoder, buffer;
        end = P.RangeError_checkValidRange(start, end, J.get$length$asx(input), null, null, null);
        if (start === end)
          return new Uint8Array(H._checkLength(0));
        decoder = new P._Base64Decoder(0);
        buffer = decoder.decode$3(input, start, end);
        decoder.close$2(0, input, end);
        return buffer;
      },
      convert$1: function(input) {
        return this.convert$3(input, 0, null);
      },
      $asConverter: function() {
        return [P.String, [P.List, P.$int]];
      }
    },
    _Base64Decoder: {
      "^": "Object;_convert$_state",
      decode$3: function(input, start, end) {
        var t1, buffer;
        t1 = this._convert$_state;
        if (t1 < 0) {
          this._convert$_state = P._Base64Decoder__checkPadding(input, start, end, t1);
          return;
        }
        if (start === end)
          return new Uint8Array(H._checkLength(0));
        buffer = P._Base64Decoder__allocateBuffer(input, start, end, t1);
        this._convert$_state = P._Base64Decoder_decodeChunk(input, start, end, buffer, 0, this._convert$_state);
        return buffer;
      },
      close$2: function(_, input, end) {
        var t1 = this._convert$_state;
        if (t1 < -1)
          throw H.wrapException(new P.FormatException("Missing padding character", input, end));
        if (t1 > 0)
          throw H.wrapException(new P.FormatException("Invalid length, must be multiple of four", input, end));
        this._convert$_state = -1;
      },
      static: {
        _Base64Decoder_decodeChunk: function(input, start, end, output, outIndex, state) {
          var bits, count, t1, i, charOr, $char, t2, t3, code, outIndex0, expectedPadding;
          bits = C.JSInt_methods._shrOtherPositive$1(state, 2);
          count = state & 3;
          if (typeof end !== "number")
            return H.iae(end);
          t1 = J.getInterceptor$s(input);
          i = start;
          charOr = 0;
          for (; i < end; ++i) {
            $char = t1.codeUnitAt$1(input, i);
            charOr |= $char;
            t2 = $.$get$_Base64Decoder__inverseAlphabet();
            t3 = $char & 127;
            if (t3 >= t2.length)
              return H.ioore(t2, t3);
            code = t2[t3];
            if (code >= 0) {
              bits = (bits << 6 | code) & 16777215;
              count = count + 1 & 3;
              if (count === 0) {
                outIndex0 = outIndex + 1;
                t2 = output.length;
                if (outIndex >= t2)
                  return H.ioore(output, outIndex);
                output[outIndex] = bits >>> 16 & 255;
                outIndex = outIndex0 + 1;
                if (outIndex0 >= t2)
                  return H.ioore(output, outIndex0);
                output[outIndex0] = bits >>> 8 & 255;
                outIndex0 = outIndex + 1;
                if (outIndex >= t2)
                  return H.ioore(output, outIndex);
                output[outIndex] = bits & 255;
                outIndex = outIndex0;
                bits = 0;
              }
              continue;
            } else if (code === -1 && count > 1) {
              if (charOr > 127)
                break;
              if (count === 3) {
                if ((bits & 3) !== 0)
                  throw H.wrapException(new P.FormatException("Invalid encoding before padding", input, i));
                outIndex0 = outIndex + 1;
                t1 = output.length;
                if (outIndex >= t1)
                  return H.ioore(output, outIndex);
                output[outIndex] = bits >>> 10;
                if (outIndex0 >= t1)
                  return H.ioore(output, outIndex0);
                output[outIndex0] = bits >>> 2;
              } else {
                if ((bits & 15) !== 0)
                  throw H.wrapException(new P.FormatException("Invalid encoding before padding", input, i));
                if (outIndex >= output.length)
                  return H.ioore(output, outIndex);
                output[outIndex] = bits >>> 4;
              }
              expectedPadding = (3 - count) * 3;
              if ($char === 37)
                expectedPadding += 2;
              return P._Base64Decoder__checkPadding(input, i + 1, end, -expectedPadding - 1);
            }
            throw H.wrapException(new P.FormatException("Invalid character", input, i));
          }
          if (charOr >= 0 && charOr <= 127)
            return (bits << 2 | count) >>> 0;
          for (i = start; i < end; ++i) {
            $char = t1.codeUnitAt$1(input, i);
            if ($char > 127)
              break;
          }
          throw H.wrapException(new P.FormatException("Invalid character", input, i));
        },
        _Base64Decoder__allocateBuffer: function(input, start, end, state) {
          var paddingStart, t1, t2, $length, bufferLength, remainderLength;
          paddingStart = P._Base64Decoder__trimPaddingChars(input, start, end);
          t1 = J.getInterceptor$n(paddingStart);
          t2 = t1.$sub(paddingStart, start);
          if (typeof t2 !== "number")
            return H.iae(t2);
          $length = (state & 3) + t2;
          bufferLength = C.JSNumber_methods._shrOtherPositive$1($length, 2) * 3;
          remainderLength = $length & 3;
          if (remainderLength !== 0 && t1.$lt(paddingStart, end))
            bufferLength += remainderLength - 1;
          if (bufferLength > 0)
            return new Uint8Array(H._checkLength(bufferLength));
          return;
        },
        _Base64Decoder__trimPaddingChars: function(input, start, end) {
          var t1, newEnd, index, padding, t2, $char;
          t1 = J.getInterceptor$s(input);
          newEnd = end;
          index = newEnd;
          padding = 0;
          while (true) {
            t2 = J.getInterceptor$n(index);
            if (!(t2.$gt(index, start) && padding < 2))
              break;
            c$0: {
              index = t2.$sub(index, 1);
              $char = t1.codeUnitAt$1(input, index);
              if ($char === 61) {
                ++padding;
                newEnd = index;
                break c$0;
              }
              if (($char | 32) === 100) {
                t2 = J.getInterceptor(index);
                if (t2.$eq(index, start))
                  break;
                index = t2.$sub(index, 1);
                $char = t1.codeUnitAt$1(input, index);
              }
              if ($char === 51) {
                t2 = J.getInterceptor(index);
                if (t2.$eq(index, start))
                  break;
                index = t2.$sub(index, 1);
                $char = t1.codeUnitAt$1(input, index);
              }
              if ($char === 37) {
                ++padding;
                newEnd = index;
                break c$0;
              }
              break;
            }
          }
          return newEnd;
        },
        _Base64Decoder__checkPadding: function(input, start, end, state) {
          var expectedPadding, t1, $char;
          if (start === end)
            return state;
          expectedPadding = -state - 1;
          for (t1 = J.getInterceptor$s(input); expectedPadding > 0;) {
            $char = t1.codeUnitAt$1(input, start);
            if (expectedPadding === 3) {
              if ($char === 61) {
                expectedPadding -= 3;
                ++start;
                break;
              }
              if ($char === 37) {
                --expectedPadding;
                ++start;
                if (start === end)
                  break;
                $char = t1.codeUnitAt$1(input, start);
              } else
                break;
            }
            if ((expectedPadding > 3 ? expectedPadding - 3 : expectedPadding) === 2) {
              if ($char !== 51)
                break;
              ++start;
              --expectedPadding;
              if (start === end)
                break;
              $char = t1.codeUnitAt$1(input, start);
            }
            if (($char | 32) !== 100)
              break;
            ++start;
            --expectedPadding;
            if (start === end)
              break;
          }
          if (start !== end)
            throw H.wrapException(new P.FormatException("Invalid padding character", input, start));
          return -expectedPadding - 1;
        }
      }
    },
    Codec: {
      "^": "Object;$ti"
    },
    Converter: {
      "^": "Object;$ti"
    },
    Encoding: {
      "^": "Codec;",
      $asCodec: function() {
        return [P.String, [P.List, P.$int]];
      }
    },
    JsonUnsupportedObjectError: {
      "^": "Error;unsupportedObject,cause",
      toString$0: function(_) {
        if (this.cause != null)
          return "Converting object to an encodable object failed.";
        else
          return "Converting object did not return an encodable object.";
      }
    },
    JsonCyclicError: {
      "^": "JsonUnsupportedObjectError;unsupportedObject,cause",
      toString$0: function(_) {
        return "Cyclic error in JSON stringify";
      }
    },
    JsonCodec: {
      "^": "Codec;_reviver,_toEncodable",
      decode$2$reviver: function(source, reviver) {
        return P._parseJson(source, this.get$decoder()._reviver);
      },
      decode$1: function(source) {
        return this.decode$2$reviver(source, null);
      },
      encode$2$toEncodable: function(value, toEncodable) {
        var t1;
        toEncodable = this._toEncodable;
        if (toEncodable == null) {
          t1 = this.get$encoder();
          return P._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
        }
        return P._JsonStringStringifier_stringify(value, toEncodable, null);
      },
      encode$1: function(value) {
        return this.encode$2$toEncodable(value, null);
      },
      get$encoder: function() {
        var t1 = this._toEncodable;
        if (t1 == null)
          return C.JsonEncoder_null_null;
        return new P.JsonEncoder(null, t1);
      },
      get$decoder: function() {
        return C.JsonDecoder_null;
      },
      $asCodec: function() {
        return [P.Object, P.String];
      }
    },
    JsonEncoder: {
      "^": "Converter;indent,_toEncodable",
      $asConverter: function() {
        return [P.Object, P.String];
      }
    },
    JsonDecoder: {
      "^": "Converter;_reviver",
      $asConverter: function() {
        return [P.String, P.Object];
      }
    },
    _JsonStringifier: {
      "^": "Object;",
      writeStringContent$1: function(s) {
        var t1, $length, offset, i, charCode, t2;
        t1 = J.getInterceptor$asx(s);
        $length = t1.get$length(s);
        if (typeof $length !== "number")
          return H.iae($length);
        offset = 0;
        i = 0;
        for (; i < $length; ++i) {
          charCode = t1.codeUnitAt$1(s, i);
          if (charCode > 92)
            continue;
          if (charCode < 32) {
            if (i > offset)
              this.writeStringSlice$3(s, offset, i);
            offset = i + 1;
            this.writeCharCode$1(92);
            switch (charCode) {
              case 8:
                this.writeCharCode$1(98);
                break;
              case 9:
                this.writeCharCode$1(116);
                break;
              case 10:
                this.writeCharCode$1(110);
                break;
              case 12:
                this.writeCharCode$1(102);
                break;
              case 13:
                this.writeCharCode$1(114);
                break;
              default:
                this.writeCharCode$1(117);
                this.writeCharCode$1(48);
                this.writeCharCode$1(48);
                t2 = charCode >>> 4 & 15;
                this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
                t2 = charCode & 15;
                this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
                break;
            }
          } else if (charCode === 34 || charCode === 92) {
            if (i > offset)
              this.writeStringSlice$3(s, offset, i);
            offset = i + 1;
            this.writeCharCode$1(92);
            this.writeCharCode$1(charCode);
          }
        }
        if (offset === 0)
          this.writeString$1(s);
        else if (offset < $length)
          this.writeStringSlice$3(s, offset, $length);
      },
      _checkCycle$1: function(object) {
        var t1, t2, i, t3;
        for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
          t3 = t1[i];
          if (object == null ? t3 == null : object === t3)
            throw H.wrapException(new P.JsonCyclicError(object, null));
        }
        t1.push(object);
      },
      writeObject$1: function(object) {
        var customJson, e, t1, exception;
        if (this.writeJsonValue$1(object))
          return;
        this._checkCycle$1(object);
        try {
          customJson = this._toEncodable.call$1(object);
          if (!this.writeJsonValue$1(customJson))
            throw H.wrapException(new P.JsonUnsupportedObjectError(object, null));
          t1 = this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          throw H.wrapException(new P.JsonUnsupportedObjectError(object, e));
        }
      },
      writeJsonValue$1: function(object) {
        var t1, success;
        if (typeof object === "number") {
          if (!isFinite(object))
            return false;
          this.writeNumber$1(object);
          return true;
        } else if (object === true) {
          this.writeString$1("true");
          return true;
        } else if (object === false) {
          this.writeString$1("false");
          return true;
        } else if (object == null) {
          this.writeString$1("null");
          return true;
        } else if (typeof object === "string") {
          this.writeString$1('"');
          this.writeStringContent$1(object);
          this.writeString$1('"');
          return true;
        } else {
          t1 = J.getInterceptor(object);
          if (!!t1.$isList) {
            this._checkCycle$1(object);
            this.writeList$1(object);
            t1 = this._seen;
            if (0 >= t1.length)
              return H.ioore(t1, -1);
            t1.pop();
            return true;
          } else if (!!t1.$isMap) {
            this._checkCycle$1(object);
            success = this.writeMap$1(object);
            t1 = this._seen;
            if (0 >= t1.length)
              return H.ioore(t1, -1);
            t1.pop();
            return success;
          } else
            return false;
        }
      },
      writeList$1: function(list) {
        var t1, i, t2;
        this.writeString$1("[");
        t1 = J.getInterceptor$asx(list);
        if (J.$gt$n(t1.get$length(list), 0)) {
          this.writeObject$1(t1.$index(list, 0));
          i = 1;
          while (true) {
            t2 = t1.get$length(list);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            this.writeString$1(",");
            this.writeObject$1(t1.$index(list, i));
            ++i;
          }
        }
        this.writeString$1("]");
      },
      writeMap$1: function(map) {
        var t1, t2, t3, keyValueList, separator, i;
        t1 = {};
        t2 = J.getInterceptor$asx(map);
        if (t2.get$isEmpty(map)) {
          this.writeString$1("{}");
          return true;
        }
        t3 = J.$mul$ns(t2.get$length(map), 2);
        if (typeof t3 !== "number")
          return H.iae(t3);
        keyValueList = new Array(t3);
        t1.i = 0;
        t1.allStringKeys = true;
        t2.forEach$1(map, new P._JsonStringifier_writeMap_closure(t1, keyValueList));
        if (!t1.allStringKeys)
          return false;
        this.writeString$1("{");
        for (t1 = keyValueList.length, separator = '"', i = 0; i < t1; i += 2, separator = ',"') {
          this.writeString$1(separator);
          this.writeStringContent$1(keyValueList[i]);
          this.writeString$1('":');
          t2 = i + 1;
          if (t2 >= t1)
            return H.ioore(keyValueList, t2);
          this.writeObject$1(keyValueList[t2]);
        }
        this.writeString$1("}");
        return true;
      }
    },
    _JsonStringifier_writeMap_closure: {
      "^": "Closure:4;_box_0,keyValueList",
      call$2: function(key, value) {
        var t1, t2, t3, i, t4;
        if (typeof key !== "string")
          this._box_0.allStringKeys = false;
        t1 = this.keyValueList;
        t2 = this._box_0;
        t3 = t2.i;
        i = t3 + 1;
        t2.i = i;
        t4 = t1.length;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = key;
        t2.i = i + 1;
        if (i >= t4)
          return H.ioore(t1, i);
        t1[i] = value;
      }
    },
    _JsonStringStringifier: {
      "^": "_JsonStringifier;_sink,_seen,_toEncodable",
      writeNumber$1: function(number) {
        this._sink.write$1(0, C.JSNumber_methods.toString$0(number));
      },
      writeString$1: function(string) {
        this._sink.write$1(0, string);
      },
      writeStringSlice$3: function(string, start, end) {
        this._sink.write$1(0, J.substring$2$s(string, start, end));
      },
      writeCharCode$1: function(charCode) {
        this._sink.writeCharCode$1(charCode);
      },
      static: {
        _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
          var output, t1;
          output = new P.StringBuffer("");
          P._JsonStringStringifier_printOn(object, output, toEncodable, indent);
          t1 = output._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        },
        _JsonStringStringifier_printOn: function(object, output, toEncodable, indent) {
          var t1, stringifier;
          t1 = toEncodable == null ? P.convert___defaultToEncodable$closure() : toEncodable;
          stringifier = new P._JsonStringStringifier(output, [], t1);
          stringifier.writeObject$1(object);
        }
      }
    },
    LineSplitter: {
      "^": "Converter;",
      bind$1: function(stream) {
        return new P._BoundSinkStream(new P.LineSplitter_bind_closure(), stream, [null, null]);
      },
      $asConverter: function() {
        return [P.String, [P.List, P.String]];
      },
      static: {
        LineSplitter_split: function($async$lines, $async$start, $async$end) {
          return new P._SyncStarIterable$(function() {
            var lines = $async$lines, start = $async$start, end = $async$end;
            var $async$goto = 0, $async$handler = 1, $async$currentError, t1, i, sliceStart, $char, t2, char0;
            return function $async$LineSplitter_split($async$errorCode, $async$result) {
              if ($async$errorCode === 1) {
                $async$currentError = $async$result;
                $async$goto = $async$handler;
              }
              while (true)
                switch ($async$goto) {
                  case 0:
                    // Function start
                    t1 = J.getInterceptor$asx(lines);
                    end = P.RangeError_checkValidRange(start, end, t1.get$length(lines), null, null, null);
                    i = start;
                    sliceStart = i;
                    $char = 0;
                  case 2:
                    // while condition
                    t2 = end;
                    if (typeof t2 !== "number")
                      H.iae(t2);
                    if (!(i < t2)) {
                      // goto after while
                      $async$goto = 3;
                      break;
                    }
                    char0 = t1.codeUnitAt$1(lines, i);
                    if (char0 !== 13) {
                      if (char0 !== 10) {
                        // goto break c$0
                        $async$goto = 4;
                        break;
                      }
                      if ($char === 13) {
                        sliceStart = i + 1;
                        // goto break c$0
                        $async$goto = 4;
                        break;
                      }
                    }
                    $async$goto = 5;
                    return t1.substring$2(lines, sliceStart, i);
                  case 5:
                    // after yield
                    sliceStart = i + 1;
                  case 4:
                    // break c$0
                    ++i;
                    $char = char0;
                    // goto while condition
                    $async$goto = 2;
                    break;
                  case 3:
                    // after while
                    t2 = end;
                    if (typeof t2 !== "number")
                      H.iae(t2);
                    $async$goto = sliceStart < t2 ? 6 : 7;
                    break;
                  case 6:
                    // then
                    $async$goto = 8;
                    return t1.substring$2(lines, sliceStart, end);
                  case 8:
                    // after yield
                  case 7:
                    // join
                    // implicit return
                    return P._IterationMarker_endOfIteration();
                  case 1:
                    // rethrow
                    return P._IterationMarker_uncaughtError($async$currentError);
                }
            };
          });
        }
      }
    },
    LineSplitter_bind_closure: {
      "^": "Closure:102;",
      call$1: function(sink) {
        return new P._LineSplitterEventSink(sink, new P._StringAdapterSink(sink), null, false);
      }
    },
    _LineSplitterSink: {
      "^": "StringConversionSinkBase;",
      addSlice$4: function(chunk, start, end, isLast) {
        var t1, t2;
        t1 = J.getInterceptor$asx(chunk);
        end = P.RangeError_checkValidRange(start, end, t1.get$length(chunk), null, null, null);
        if (typeof end !== "number")
          return H.iae(end);
        if (start >= end) {
          if (isLast)
            this.close$0(0);
          return;
        }
        t2 = this._carry;
        if (t2 != null) {
          t1 = t1.substring$2(chunk, start, end);
          if (t2 == null)
            return t2.$add();
          chunk = t2 + t1;
          end = chunk.length;
          this._carry = null;
          start = 0;
        } else if (this._skipLeadingLF) {
          if (t1.codeUnitAt$1(chunk, start) === 10)
            ++start;
          this._skipLeadingLF = false;
        }
        this._addLines$3(chunk, start, end);
        if (isLast)
          this.close$0(0);
      },
      close$0: function(_) {
        var t1, t2;
        t1 = this._carry;
        if (t1 != null) {
          t2 = this._sink._sink._async$_sink;
          if ((t2._state & 2) !== 0)
            H.throwExpression(new P.StateError("Stream is already closed"));
          t2.super$_BufferingStreamSubscription$_add(0, t1);
          this._carry = null;
        }
        t1 = this._sink._sink._async$_sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_close();
      },
      _addLines$3: function(lines, start, end) {
        var t1, t2, i, sliceStart, $char, char0, t3, t4;
        if (typeof end !== "number")
          return H.iae(end);
        t1 = J.getInterceptor$s(lines);
        t2 = this._sink._sink;
        i = start;
        sliceStart = i;
        $char = 0;
        for (; i < end; ++i, $char = char0) {
          char0 = t1.codeUnitAt$1(lines, i);
          if (char0 !== 13) {
            if (char0 !== 10)
              continue;
            if ($char === 13) {
              sliceStart = i + 1;
              continue;
            }
          }
          t3 = t1.substring$2(lines, sliceStart, i);
          t4 = t2._async$_sink;
          if ((t4._state & 2) !== 0)
            H.throwExpression(new P.StateError("Stream is already closed"));
          t4.super$_BufferingStreamSubscription$_add(0, t3);
          sliceStart = i + 1;
        }
        if (sliceStart < end)
          this._carry = t1.substring$2(lines, sliceStart, end);
        else
          this._skipLeadingLF = $char === 13;
      }
    },
    _LineSplitterEventSink: {
      "^": "_LineSplitterSink;_eventSink,_sink,_carry,_skipLeadingLF",
      addError$2: function(o, stackTrace) {
        var t1 = this._eventSink._async$_sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_addError(o, stackTrace);
      }
    },
    StringConversionSinkBase: {
      "^": "StringConversionSinkMixin;"
    },
    StringConversionSinkMixin: {
      "^": "Object;",
      add$1: function(_, str) {
        this.addSlice$4(str, 0, J.get$length$asx(str), false);
      }
    },
    _StringAdapterSink: {
      "^": "StringConversionSinkBase;_sink",
      add$1: function(_, str) {
        var t1 = this._sink._async$_sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_add(0, str);
      },
      addSlice$4: function(str, start, end, isLast) {
        var t1, t2, t3;
        t1 = start === 0 && J.$eq$(end, J.get$length$asx(str));
        t2 = this._sink;
        if (t1) {
          t1 = t2._async$_sink;
          if ((t1._state & 2) !== 0)
            H.throwExpression(new P.StateError("Stream is already closed"));
          t1.super$_BufferingStreamSubscription$_add(0, str);
        } else {
          t1 = J.substring$2$s(str, start, end);
          t3 = t2._async$_sink;
          if ((t3._state & 2) !== 0)
            H.throwExpression(new P.StateError("Stream is already closed"));
          t3.super$_BufferingStreamSubscription$_add(0, t1);
        }
        if (isLast) {
          t1 = t2._async$_sink;
          if ((t1._state & 2) !== 0)
            H.throwExpression(new P.StateError("Stream is already closed"));
          t1.super$_BufferingStreamSubscription$_close();
        }
      },
      close$0: function(_) {
        var t1 = this._sink._async$_sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_close();
      }
    },
    Utf8Codec: {
      "^": "Encoding;_allowMalformed",
      get$name: function(_) {
        return "utf-8";
      },
      get$encoder: function() {
        return C.C_Utf8Encoder;
      }
    },
    Utf8Encoder: {
      "^": "Converter;",
      convert$3: function(string, start, end) {
        var t1, stringLength, t2, $length, t3, encoder;
        t1 = J.getInterceptor$asx(string);
        stringLength = t1.get$length(string);
        P.RangeError_checkValidRange(start, end, stringLength, null, null, null);
        t2 = J.getInterceptor$n(stringLength);
        $length = t2.$sub(stringLength, start);
        t3 = J.getInterceptor($length);
        if (t3.$eq($length, 0))
          return new Uint8Array(H._checkLength(0));
        t3 = new Uint8Array(H._checkLength(t3.$mul($length, 3)));
        encoder = new P._Utf8Encoder(0, 0, t3);
        if (encoder._fillBuffer$3(string, start, stringLength) !== stringLength)
          encoder._writeSurrogate$2(t1.codeUnitAt$1(string, t2.$sub(stringLength, 1)), 0);
        return C.NativeUint8List_methods.sublist$2(t3, 0, encoder._bufferIndex);
      },
      convert$1: function(string) {
        return this.convert$3(string, 0, null);
      },
      $asConverter: function() {
        return [P.String, [P.List, P.$int]];
      }
    },
    _Utf8Encoder: {
      "^": "Object;_carry,_bufferIndex,_buffer",
      _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
        var t1, t2, t3, t4, rune;
        t1 = this._buffer;
        t2 = this._bufferIndex;
        t3 = t2 + 1;
        t4 = t1.length;
        if ((nextCodeUnit & 64512) === 56320) {
          rune = 65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023;
          this._bufferIndex = t3;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = (240 | rune >>> 18) >>> 0;
          t2 = t3 + 1;
          this._bufferIndex = t2;
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = 128 | rune >>> 12 & 63;
          t3 = t2 + 1;
          this._bufferIndex = t3;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 128 | rune >>> 6 & 63;
          this._bufferIndex = t3 + 1;
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = 128 | rune & 63;
          return true;
        } else {
          this._bufferIndex = t3;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 224 | leadingSurrogate >>> 12;
          t2 = t3 + 1;
          this._bufferIndex = t2;
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
          this._bufferIndex = t2 + 1;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 128 | leadingSurrogate & 63;
          return false;
        }
      },
      _fillBuffer$3: function(str, start, end) {
        var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
        if (start !== end && (J.codeUnitAt$1$s(str, J.$sub$n(end, 1)) & 64512) === 55296)
          end = J.$sub$n(end, 1);
        if (typeof end !== "number")
          return H.iae(end);
        t1 = this._buffer;
        t2 = t1.length;
        t3 = J.getInterceptor$s(str);
        stringIndex = start;
        for (; stringIndex < end; ++stringIndex) {
          codeUnit = t3.codeUnitAt$1(str, stringIndex);
          if (codeUnit <= 127) {
            t4 = this._bufferIndex;
            if (t4 >= t2)
              break;
            this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit;
          } else if ((codeUnit & 64512) === 55296) {
            if (this._bufferIndex + 3 >= t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (this._writeSurrogate$2(codeUnit, t3.codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (codeUnit <= 2047) {
            t4 = this._bufferIndex;
            t5 = t4 + 1;
            if (t5 >= t2)
              break;
            this._bufferIndex = t5;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = 192 | codeUnit >>> 6;
            this._bufferIndex = t5 + 1;
            t1[t5] = 128 | codeUnit & 63;
          } else {
            t4 = this._bufferIndex;
            if (t4 + 2 >= t2)
              break;
            t5 = t4 + 1;
            this._bufferIndex = t5;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = 224 | codeUnit >>> 12;
            t4 = t5 + 1;
            this._bufferIndex = t4;
            if (t5 >= t2)
              return H.ioore(t1, t5);
            t1[t5] = 128 | codeUnit >>> 6 & 63;
            this._bufferIndex = t4 + 1;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = 128 | codeUnit & 63;
          }
        }
        return stringIndex;
      }
    },
    Utf8Decoder: {
      "^": "Converter;_allowMalformed",
      convert$3: function(codeUnits, start, end) {
        var $length, buffer, decoder, t1;
        $length = J.get$length$asx(codeUnits);
        P.RangeError_checkValidRange(start, end, $length, null, null, null);
        buffer = new P.StringBuffer("");
        decoder = new P._Utf8Decoder(false, buffer, true, 0, 0, 0);
        decoder.convert$3(codeUnits, start, $length);
        decoder.flush$0(0);
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      convert$1: function(codeUnits) {
        return this.convert$3(codeUnits, 0, null);
      },
      $asConverter: function() {
        return [[P.List, P.$int], P.String];
      }
    },
    _Utf8Decoder: {
      "^": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
      close$0: function(_) {
        this.flush$0(0);
      },
      flush$0: function(_) {
        if (this._expectedUnits > 0)
          throw H.wrapException(new P.FormatException("Unfinished UTF-8 octet sequence", null, null));
      },
      convert$3: function(codeUnits, startIndex, endIndex) {
        var value, expectedUnits, extraUnits, t1, t2, t3, t4, i, unit, t5, oneBytes, i0, i1, t6;
        value = this._convert$_value;
        expectedUnits = this._expectedUnits;
        extraUnits = this._extraUnits;
        this._convert$_value = 0;
        this._expectedUnits = 0;
        this._extraUnits = 0;
        t1 = new P._Utf8Decoder_convert_scanOneByteCharacters(endIndex);
        t2 = new P._Utf8Decoder_convert_addSingleBytes(this, codeUnits, startIndex, endIndex);
        $loop$0:
          for (t3 = J.getInterceptor$asx(codeUnits), t4 = this._stringSink, i = startIndex; true; i = i1) {
            $multibyte$2:
              if (expectedUnits > 0) {
                do {
                  if (i === endIndex)
                    break $loop$0;
                  unit = t3.$index(codeUnits, i);
                  t5 = J.getInterceptor$n(unit);
                  if (t5.$and(unit, 192) !== 128)
                    throw H.wrapException(new P.FormatException("Bad UTF-8 encoding 0x" + t5.toRadixString$1(unit, 16), null, null));
                  else {
                    value = (value << 6 | t5.$and(unit, 63)) >>> 0;
                    --expectedUnits;
                    ++i;
                  }
                } while (expectedUnits > 0);
                t5 = extraUnits - 1;
                if (t5 < 0 || t5 >= 4)
                  return H.ioore(C.List_127_2047_65535_1114111, t5);
                if (value <= C.List_127_2047_65535_1114111[t5])
                  throw H.wrapException(new P.FormatException("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16), null, null));
                if (value > 1114111)
                  throw H.wrapException(new P.FormatException("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16), null, null));
                if (!this._isFirstCharacter || value !== 65279)
                  t4._contents += H.Primitives_stringFromCharCode(value);
                this._isFirstCharacter = false;
              }
            if (typeof endIndex !== "number")
              return H.iae(endIndex);
            t5 = i < endIndex;
            for (; t5;) {
              oneBytes = t1.call$2(codeUnits, i);
              if (J.$gt$n(oneBytes, 0)) {
                this._isFirstCharacter = false;
                if (typeof oneBytes !== "number")
                  return H.iae(oneBytes);
                i0 = i + oneBytes;
                t2.call$2(i, i0);
                if (i0 === endIndex)
                  break;
              } else
                i0 = i;
              i1 = i0 + 1;
              unit = t3.$index(codeUnits, i0);
              t6 = J.getInterceptor$n(unit);
              if (t6.$lt(unit, 0))
                throw H.wrapException(new P.FormatException("Negative UTF-8 code unit: -0x" + J.toRadixString$1$n(t6.$negate(unit), 16), null, null));
              else {
                if (t6.$and(unit, 224) === 192) {
                  value = t6.$and(unit, 31);
                  expectedUnits = 1;
                  extraUnits = 1;
                  continue $loop$0;
                }
                if (t6.$and(unit, 240) === 224) {
                  value = t6.$and(unit, 15);
                  expectedUnits = 2;
                  extraUnits = 2;
                  continue $loop$0;
                }
                if (t6.$and(unit, 248) === 240 && t6.$lt(unit, 245)) {
                  value = t6.$and(unit, 7);
                  expectedUnits = 3;
                  extraUnits = 3;
                  continue $loop$0;
                }
                throw H.wrapException(new P.FormatException("Bad UTF-8 encoding 0x" + t6.toRadixString$1(unit, 16), null, null));
              }
            }
            break $loop$0;
          }
        if (expectedUnits > 0) {
          this._convert$_value = value;
          this._expectedUnits = expectedUnits;
          this._extraUnits = extraUnits;
        }
      }
    },
    _Utf8Decoder_convert_scanOneByteCharacters: {
      "^": "Closure:92;endIndex",
      call$2: function(units, from) {
        var to, t1, i, unit;
        to = this.endIndex;
        if (typeof to !== "number")
          return H.iae(to);
        t1 = J.getInterceptor$asx(units);
        i = from;
        for (; i < to; ++i) {
          unit = t1.$index(units, i);
          if (J.$and$n(unit, 127) !== unit)
            return i - from;
        }
        return to - from;
      }
    },
    _Utf8Decoder_convert_addSingleBytes: {
      "^": "Closure:90;$this,codeUnits,startIndex,endIndex",
      call$2: function(from, to) {
        this.$this._stringSink._contents += P.String_String$fromCharCodes(this.codeUnits, from, to);
      }
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list;
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), null, null));
      t1 = end == null;
      if (!t1 && J.$lt$n(end, start))
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), null, null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, null, null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else {
        if (typeof end !== "number")
          return H.iae(end);
        i = start;
        for (; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, null, null));
          list.push(it.get$current());
        }
      }
      return H.Primitives_stringFromCharCodes(list);
    },
    Comparable_compare: [function(a, b) {
      return J.compareTo$1$ns(a, b);
    }, "call$2", "core_Comparable_compare$closure", 4, 0, 217],
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    Error__objectToString: function(object) {
      var t1 = J.getInterceptor(object);
      if (!!t1.$isClosure)
        return t1.toString$0(object);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    identical: [function(a, b) {
      return a == null ? b == null : a === b;
    }, "call$2", "core__identical$closure", 4, 0, 218],
    identityHashCode: [function(object) {
      return H.objectHashCode(object);
    }, "call$1", "core__identityHashCode$closure", 2, 0, 219],
    List_List$filled: function($length, fill, growable, $E) {
      var result, t1, i;
      result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && true)
        for (t1 = result.length, i = 0; i < t1; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from: function(elements, growable, $E) {
      var list, t1;
      list = H.setRuntimeTypeInfo([], [$E]);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current());
      if (growable)
        return list;
      list.fixed$length = Array;
      return list;
    },
    List_List$generate: function($length, generator, growable, $E) {
      var result, i, t1;
      result = H.setRuntimeTypeInfo([], [$E]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i) {
        t1 = generator.call$1(i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    List_List$unmodifiable: function(elements, $E) {
      return J.JSArray_markUnmodifiableList(P.List_List$from(elements, false, $E));
    },
    num_parse: function(input, onError) {
      var source, result;
      source = C.JSString_methods.trim$0(input);
      result = H.Primitives_parseInt(source, null, P.core_num__returnIntNull$closure());
      if (result != null)
        return result;
      result = H.Primitives_parseDouble(source, P.core_num__returnDoubleNull$closure());
      if (result != null)
        return result;
      return onError.call$1(input);
    },
    num__returnIntNull: [function(_) {
      return;
    }, "call$1", "core_num__returnIntNull$closure", 2, 0, 220],
    num__returnDoubleNull: [function(_) {
      return;
    }, "call$1", "core_num__returnDoubleNull$closure", 2, 0, 221],
    print: function(object) {
      var line = H.S(object);
      H.printString(line);
    },
    RegExp_RegExp: function(source, caseSensitive, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, multiLine, true, false), null, null);
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var len;
      if (typeof charCodes === "object" && charCodes !== null && charCodes.constructor === Array) {
        len = charCodes.length;
        end = P.RangeError_checkValidRange(start, end, len, null, null, null);
        return H.Primitives_stringFromCharCodes(start > 0 || J.$lt$n(end, len) ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
      }
      if (!!J.getInterceptor(charCodes).$isNativeUint8List)
        return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, end, charCodes.length, null, null, null));
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode: function(charCode) {
      return H.Primitives_stringFromCharCode(charCode);
    },
    _combineSurrogatePair: function(start, end) {
      return 65536 + ((start & 1023) << 10 >>> 0) + (end & 1023);
    },
    Uri_base: function() {
      var uri = H.Primitives_currentUri();
      if (uri != null)
        return P.Uri_parse(uri, 0, null);
      throw H.wrapException(new P.UnsupportedError("'Uri.base' is not supported"));
    },
    Uri_parse: function(uri, start, end) {
      var t1, t2, t3, delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, t4, t5, isSimple, scheme, t6, t7, t8, schemeAuth, t9;
      end = J.get$length$asx(uri);
      t1 = start + 5;
      t2 = J.getInterceptor$n(end);
      if (t2.$ge(end, t1)) {
        t3 = J.getInterceptor$s(uri);
        delta = ((t3.codeUnitAt$1(uri, start + 4) ^ 58) * 3 | t3.codeUnitAt$1(uri, start) ^ 100 | t3.codeUnitAt$1(uri, start + 1) ^ 97 | t3.codeUnitAt$1(uri, start + 2) ^ 116 | t3.codeUnitAt$1(uri, start + 3) ^ 97) >>> 0;
        if (delta === 0)
          return P.UriData__parse(start > 0 || t2.$lt(end, t3.get$length(uri)) ? t3.substring$2(uri, start, end) : uri, 5, null).get$uri();
        else if (delta === 32)
          return P.UriData__parse(t3.substring$2(uri, t1, end), 0, null).get$uri();
      }
      t3 = new Array(8);
      t3.fixed$length = Array;
      indices = H.setRuntimeTypeInfo(t3, [P.$int]);
      indices[0] = 0;
      t3 = start - 1;
      indices[1] = t3;
      indices[2] = t3;
      indices[7] = t3;
      indices[3] = start;
      indices[4] = start;
      indices[5] = end;
      indices[6] = end;
      if (P._scan(uri, start, end, 0, indices) >= 14)
        indices[7] = end;
      schemeEnd = indices[1];
      t3 = J.getInterceptor$n(schemeEnd);
      if (t3.$ge(schemeEnd, start))
        if (P._scan(uri, start, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = J.$add$ns(indices[2], 1);
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      t4 = J.getInterceptor$n(fragmentStart);
      if (t4.$lt(fragmentStart, queryStart))
        queryStart = fragmentStart;
      t5 = J.getInterceptor$n(pathStart);
      if (t5.$lt(pathStart, hostStart) || t5.$le(pathStart, schemeEnd))
        pathStart = queryStart;
      if (J.$lt$n(portStart, hostStart))
        portStart = pathStart;
      isSimple = J.$lt$n(indices[7], start);
      if (isSimple) {
        t5 = J.getInterceptor$n(hostStart);
        if (t5.$gt(hostStart, t3.$add(schemeEnd, 3))) {
          scheme = null;
          isSimple = false;
        } else {
          t6 = J.getInterceptor$n(portStart);
          if (t6.$gt(portStart, start) && J.$eq$(t6.$add(portStart, 1), pathStart)) {
            scheme = null;
            isSimple = false;
          } else {
            t7 = J.getInterceptor$n(queryStart);
            if (!(t7.$lt(queryStart, end) && t7.$eq(queryStart, J.$add$ns(pathStart, 2)) && J.startsWith$2$s(uri, "..", pathStart)))
              t8 = t7.$gt(queryStart, J.$add$ns(pathStart, 2)) && J.startsWith$2$s(uri, "/..", t7.$sub(queryStart, 3));
            else
              t8 = true;
            if (t8) {
              scheme = null;
              isSimple = false;
            } else {
              if (t3.$eq(schemeEnd, start + 4)) {
                t1 = J.getInterceptor$s(uri);
                if (t1.startsWith$2(uri, "file", start)) {
                  if (t5.$le(hostStart, start)) {
                    if (!t1.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = schemeAuth + t1.substring$2(uri, pathStart, end);
                    schemeEnd = t3.$sub(schemeEnd, start);
                    t1 = delta - start;
                    queryStart = t7.$add(queryStart, t1);
                    fragmentStart = t4.$add(fragmentStart, t1);
                    end = uri.length;
                    start = 0;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else {
                    t8 = J.getInterceptor(pathStart);
                    if (t8.$eq(pathStart, queryStart))
                      if (start === 0 && t2.$eq(end, t1.get$length(uri))) {
                        uri = t1.replaceRange$3(uri, pathStart, queryStart, "/");
                        queryStart = t7.$add(queryStart, 1);
                        fragmentStart = t4.$add(fragmentStart, 1);
                        end = t2.$add(end, 1);
                      } else {
                        uri = t1.substring$2(uri, start, pathStart) + "/" + t1.substring$2(uri, queryStart, end);
                        schemeEnd = t3.$sub(schemeEnd, start);
                        hostStart = t5.$sub(hostStart, start);
                        portStart = t6.$sub(portStart, start);
                        pathStart = t8.$sub(pathStart, start);
                        t1 = 1 - start;
                        queryStart = t7.$add(queryStart, t1);
                        fragmentStart = t4.$add(fragmentStart, t1);
                        end = uri.length;
                        start = 0;
                      }
                  }
                  scheme = "file";
                } else if (t1.startsWith$2(uri, "http", start)) {
                  if (t6.$gt(portStart, start) && J.$eq$(t6.$add(portStart, 3), pathStart) && t1.startsWith$2(uri, "80", t6.$add(portStart, 1))) {
                    t8 = start === 0 && t2.$eq(end, t1.get$length(uri));
                    t9 = J.getInterceptor$n(pathStart);
                    if (t8) {
                      uri = t1.replaceRange$3(uri, portStart, pathStart, "");
                      pathStart = t9.$sub(pathStart, 3);
                      queryStart = t7.$sub(queryStart, 3);
                      fragmentStart = t4.$sub(fragmentStart, 3);
                      end = t2.$sub(end, 3);
                    } else {
                      uri = t1.substring$2(uri, start, portStart) + t1.substring$2(uri, pathStart, end);
                      schemeEnd = t3.$sub(schemeEnd, start);
                      hostStart = t5.$sub(hostStart, start);
                      portStart = t6.$sub(portStart, start);
                      t1 = 3 + start;
                      pathStart = t9.$sub(pathStart, t1);
                      queryStart = t7.$sub(queryStart, t1);
                      fragmentStart = t4.$sub(fragmentStart, t1);
                      end = uri.length;
                      start = 0;
                    }
                  }
                  scheme = "http";
                } else
                  scheme = null;
              } else if (t3.$eq(schemeEnd, t1) && J.startsWith$2$s(uri, "https", start)) {
                if (t6.$gt(portStart, start) && J.$eq$(t6.$add(portStart, 4), pathStart) && J.startsWith$2$s(uri, "443", t6.$add(portStart, 1))) {
                  t1 = start === 0 && t2.$eq(end, J.get$length$asx(uri));
                  t8 = J.getInterceptor$asx(uri);
                  t9 = J.getInterceptor$n(pathStart);
                  if (t1) {
                    uri = t8.replaceRange$3(uri, portStart, pathStart, "");
                    pathStart = t9.$sub(pathStart, 4);
                    queryStart = t7.$sub(queryStart, 4);
                    fragmentStart = t4.$sub(fragmentStart, 4);
                    end = t2.$sub(end, 3);
                  } else {
                    uri = t8.substring$2(uri, start, portStart) + t8.substring$2(uri, pathStart, end);
                    schemeEnd = t3.$sub(schemeEnd, start);
                    hostStart = t5.$sub(hostStart, start);
                    portStart = t6.$sub(portStart, start);
                    t1 = 4 + start;
                    pathStart = t9.$sub(pathStart, t1);
                    queryStart = t7.$sub(queryStart, t1);
                    fragmentStart = t4.$sub(fragmentStart, t1);
                    end = uri.length;
                    start = 0;
                  }
                }
                scheme = "https";
              } else
                scheme = null;
              isSimple = true;
            }
          }
        }
      } else
        scheme = null;
      if (isSimple) {
        if (start > 0 || J.$lt$n(end, J.get$length$asx(uri))) {
          uri = J.substring$2$s(uri, start, end);
          schemeEnd = J.$sub$n(schemeEnd, start);
          hostStart = J.$sub$n(hostStart, start);
          portStart = J.$sub$n(portStart, start);
          pathStart = J.$sub$n(pathStart, start);
          queryStart = J.$sub$n(queryStart, start);
          fragmentStart = J.$sub$n(fragmentStart, start);
        }
        return new P._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme, null);
      }
      return P._Uri__Uri$notSimple(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
    },
    Uri_decodeComponent: [function(encodedComponent) {
      return P._Uri__uriDecode(encodedComponent, 0, J.get$length$asx(encodedComponent), C.Utf8Codec_false, false);
    }, "call$1", "core_Uri_decodeComponent$closure", 2, 0, 41, 85],
    Uri__parseIPv4Address: function(host, start, end) {
      var t1, t2, result, t3, i, partStart, partIndex, t4, $char, part, partIndex0;
      t1 = new P.Uri__parseIPv4Address_error(host);
      t2 = H._checkLength(4);
      result = new Uint8Array(t2);
      for (t3 = J.getInterceptor$s(host), i = start, partStart = i, partIndex = 0; t4 = J.getInterceptor$n(i), t4.$lt(i, end); i = t4.$add(i, 1)) {
        $char = t3.codeUnitAt$1(host, i);
        if ($char !== 46) {
          if (($char ^ 48) > 9)
            t1.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            t1.call$2("IPv4 address should contain exactly 4 parts", i);
          part = H.Primitives_parseInt(t3.substring$2(host, partStart, i), null, null);
          if (J.$gt$n(part, 255))
            t1.call$2("each part must be in the range 0..255", partStart);
          partIndex0 = partIndex + 1;
          if (partIndex >= t2)
            return H.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = t4.$add(i, 1);
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        t1.call$2("IPv4 address should contain exactly 4 parts", end);
      part = H.Primitives_parseInt(t3.substring$2(host, partStart, end), null, null);
      if (J.$gt$n(part, 255))
        t1.call$2("each part must be in the range 0..255", partStart);
      if (partIndex >= t2)
        return H.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address: function(host, start, end) {
      var t1, t2, t3, parts, i, partStart, wildcardSeen, seenDot, t4, $char, atEnd, isLastWildcard, last, bytes, index, value, wildCardLength, j;
      if (end == null)
        end = J.get$length$asx(host);
      t1 = new P.Uri_parseIPv6Address_error(host);
      t2 = new P.Uri_parseIPv6Address_parseHex(host, t1);
      t3 = J.getInterceptor$asx(host);
      if (J.$lt$n(t3.get$length(host), 2))
        t1.call$1("address is too short");
      parts = [];
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; t4 = J.getInterceptor$n(i), t4.$lt(i, end); i = J.$add$ns(i, 1)) {
        $char = t3.codeUnitAt$1(host, i);
        if ($char === 58) {
          if (t4.$eq(i, start)) {
            i = t4.$add(i, 1);
            if (t3.codeUnitAt$1(host, i) !== 58)
              t1.call$2("invalid start colon.", i);
            partStart = i;
          }
          t4 = J.getInterceptor(i);
          if (t4.$eq(i, partStart)) {
            if (wildcardSeen)
              t1.call$2("only one wildcard `::` is allowed", i);
            parts.push(-1);
            wildcardSeen = true;
          } else
            parts.push(t2.call$2(partStart, i));
          partStart = t4.$add(i, 1);
        } else if ($char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        t1.call$1("too few parts");
      atEnd = J.$eq$(partStart, end);
      isLastWildcard = J.$eq$(C.JSArray_methods.get$last(parts), -1);
      if (atEnd && !isLastWildcard)
        t1.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          parts.push(t2.call$2(partStart, end));
        else {
          last = P.Uri__parseIPv4Address(host, partStart, end);
          t2 = J.$shl$n(last[0], 8);
          t3 = last[1];
          if (typeof t3 !== "number")
            return H.iae(t3);
          parts.push((t2 | t3) >>> 0);
          t3 = J.$shl$n(last[2], 8);
          t2 = last[3];
          if (typeof t2 !== "number")
            return H.iae(t2);
          parts.push((t3 | t2) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          t1.call$1("an address with a wildcard must have less than 7 parts");
      } else if (parts.length !== 8)
        t1.call$1("an address without a wildcard must contain exactly 8 parts");
      bytes = new Uint8Array(16);
      for (i = 0, index = 0; i < parts.length; ++i) {
        value = parts[i];
        t1 = J.getInterceptor(value);
        if (t1.$eq(value, -1)) {
          wildCardLength = 9 - parts.length;
          for (j = 0; j < wildCardLength; ++j) {
            if (index < 0 || index >= 16)
              return H.ioore(bytes, index);
            bytes[index] = 0;
            t1 = index + 1;
            if (t1 >= 16)
              return H.ioore(bytes, t1);
            bytes[t1] = 0;
            index += 2;
          }
        } else {
          t2 = t1.$shr(value, 8);
          if (index < 0 || index >= 16)
            return H.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          t1 = t1.$and(value, 255);
          if (t2 >= 16)
            return H.ioore(bytes, t2);
          bytes[t2] = t1;
          index += 2;
        }
      }
      return bytes;
    },
    _createTables: function() {
      var tables, t1, t2, t3, b;
      tables = P.List_List$generate(22, new P._createTables_closure(), true, P.Uint8List);
      t1 = new P._createTables_build(tables);
      t2 = new P._createTables_setChars();
      t3 = new P._createTables_setRange();
      b = t1.call$2(0, 225);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 1);
      t2.call$3(b, ".", 14);
      t2.call$3(b, ":", 34);
      t2.call$3(b, "/", 3);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(14, 225);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 1);
      t2.call$3(b, ".", 15);
      t2.call$3(b, ":", 34);
      t2.call$3(b, "/", 234);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(15, 225);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, ":", 34);
      t2.call$3(b, "/", 9);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(1, 225);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 1);
      t2.call$3(b, ":", 34);
      t2.call$3(b, "/", 10);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(2, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 139);
      t2.call$3(b, "/", 131);
      t2.call$3(b, ".", 146);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(3, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, "/", 68);
      t2.call$3(b, ".", 18);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(4, 229);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, ":", 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, "/", 138);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(5, 229);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, ":", 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "/", 138);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(6, 231);
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "/", 138);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(7, 231);
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "/", 138);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      t2.call$3(t1.call$2(8, 8), "]", 5);
      b = t1.call$2(9, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, ".", 16);
      t2.call$3(b, "/", 234);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(16, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, ".", 17);
      t2.call$3(b, "/", 234);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(17, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, "/", 9);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(10, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, ".", 18);
      t2.call$3(b, "/", 234);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(18, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, ".", 19);
      t2.call$3(b, "/", 234);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(19, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, "/", 234);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(11, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, "/", 10);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(12, 236);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 12);
      t2.call$3(b, "?", 12);
      t2.call$3(b, "#", 205);
      b = t1.call$2(13, 237);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 13);
      t2.call$3(b, "?", 13);
      t3.call$3(t1.call$2(20, 245), "az", 21);
      b = t1.call$2(21, 245);
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan: function(uri, start, end, state, indices) {
      var tables, t1, i, table, $char, transition, t2;
      tables = $.$get$_scannerTables();
      if (typeof end !== "number")
        return H.iae(end);
      t1 = J.getInterceptor$s(uri);
      i = start;
      for (; i < end; ++i) {
        if (state < 0 || state >= tables.length)
          return H.ioore(tables, state);
        table = tables[state];
        $char = t1.codeUnitAt$1(uri, i) ^ 96;
        transition = J.$index$asx(table, $char > 95 ? 31 : $char);
        t2 = J.getInterceptor$n(transition);
        state = t2.$and(transition, 31);
        t2 = t2.$shr(transition, 5);
        if (t2 >= 8)
          return H.ioore(indices, t2);
        indices[t2] = i;
      }
      return state;
    },
    NoSuchMethodError_toString_closure: {
      "^": "Closure:95;_box_0,sb",
      call$2: function(key, value) {
        var t1, t2, t3;
        t1 = this.sb;
        t2 = this._box_0;
        t1._contents += t2.comma;
        t3 = t1._contents += H.S(key.get$__internal$_name());
        t1._contents = t3 + ": ";
        t1._contents += H.S(P.Error_safeToString(value));
        t2.comma = ", ";
      }
    },
    bool: {
      "^": "Object;"
    },
    "+bool": 0,
    Comparable: {
      "^": "Object;$ti"
    },
    DateTime: {
      "^": "Object;_value<,isUtc",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.DateTime))
          return false;
        return this._value === other._value && this.isUtc === other.isUtc;
      },
      compareTo$1: function(_, other) {
        return C.JSNumber_methods.compareTo$1(this._value, other.get$_value());
      },
      get$hashCode: function(_) {
        var t1 = this._value;
        return (t1 ^ C.JSNumber_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
      },
      toString$0: function(_) {
        var t1, y, m, d, h, min, sec, ms;
        t1 = this.isUtc;
        y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
        m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
        d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
        h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
        min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
        sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
        ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
        if (t1)
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
        else
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
      },
      add$1: function(_, duration) {
        return P.DateTime$_withValue(this._value + duration.get$inMilliseconds(), this.isUtc);
      },
      get$millisecondsSinceEpoch: function() {
        return this._value;
      },
      DateTime$_withValue$2$isUtc: function(_value, isUtc) {
        var t1 = Math.abs(this._value);
        if (!(t1 > 864e13)) {
          t1 === 864e13;
          t1 = false;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.ArgumentError$(this.get$millisecondsSinceEpoch()));
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.DateTime];
      },
      static: {
        DateTime$_withValue: function(_value, isUtc) {
          var t1 = new P.DateTime(_value, isUtc);
          t1.DateTime$_withValue$2$isUtc(_value, isUtc);
          return t1;
        },
        DateTime__fourDigits: function(n) {
          var absN, sign;
          absN = Math.abs(n);
          sign = n < 0 ? "-" : "";
          if (absN >= 1000)
            return "" + n;
          if (absN >= 100)
            return sign + "0" + H.S(absN);
          if (absN >= 10)
            return sign + "00" + H.S(absN);
          return sign + "000" + H.S(absN);
        },
        DateTime__threeDigits: function(n) {
          if (n >= 100)
            return "" + n;
          if (n >= 10)
            return "0" + n;
          return "00" + n;
        },
        DateTime__twoDigits: function(n) {
          if (n >= 10)
            return "" + n;
          return "0" + n;
        }
      }
    },
    $double: {
      "^": "num;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+double": 0,
    Duration: {
      "^": "Object;_duration<",
      $add: function(_, other) {
        return new P.Duration(this._duration + other.get$_duration());
      },
      $sub: function(_, other) {
        return new P.Duration(this._duration - other.get$_duration());
      },
      $mul: function(_, factor) {
        return new P.Duration(C.JSNumber_methods.round$0(this._duration * factor));
      },
      $tdiv: function(_, quotient) {
        if (quotient === 0)
          throw H.wrapException(new P.IntegerDivisionByZeroException());
        if (typeof quotient !== "number")
          return H.iae(quotient);
        return new P.Duration(C.JSNumber_methods.$tdiv(this._duration, quotient));
      },
      $lt: function(_, other) {
        return this._duration < other.get$_duration();
      },
      $gt: function(_, other) {
        return this._duration > other.get$_duration();
      },
      $le: function(_, other) {
        return this._duration <= other.get$_duration();
      },
      $ge: function(_, other) {
        return this._duration >= other.get$_duration();
      },
      get$inMilliseconds: function() {
        return C.JSNumber_methods._tdivFast$1(this._duration, 1000);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.Duration))
          return false;
        return this._duration === other._duration;
      },
      get$hashCode: function(_) {
        return this._duration & 0x1FFFFFFF;
      },
      compareTo$1: function(_, other) {
        return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
      },
      toString$0: function(_) {
        var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
        t1 = new P.Duration_toString_twoDigits();
        t2 = this._duration;
        if (t2 < 0)
          return "-" + new P.Duration(-t2).toString$0(0);
        twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 60000000), 60));
        twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 1000000), 60));
        sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
        return H.S(C.JSNumber_methods._tdivFast$1(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
      },
      $negate: function(_) {
        return new P.Duration(-this._duration);
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.Duration];
      },
      static: {
        Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
          return new P.Duration(864e8 * days + 3600000000 * hours + 60000000 * minutes + 1000000 * seconds + 1000 * milliseconds + microseconds);
        }
      }
    },
    Duration_toString_sixDigits: {
      "^": "Closure:76;",
      call$1: function(n) {
        if (n >= 100000)
          return H.S(n);
        if (n >= 10000)
          return "0" + H.S(n);
        if (n >= 1000)
          return "00" + H.S(n);
        if (n >= 100)
          return "000" + H.S(n);
        if (n >= 10)
          return "0000" + H.S(n);
        return "00000" + H.S(n);
      }
    },
    Duration_toString_twoDigits: {
      "^": "Closure:76;",
      call$1: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }
    },
    Error: {
      "^": "Object;",
      get$stackTrace: function() {
        return H.getTraceFromException(this.$thrownJsError);
      }
    },
    NullThrownError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Throw of null.";
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name>,message>",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + H.S(t1);
        prefix = this.get$_errorName() + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + explanation + ": " + H.S(errorValue);
      },
      static: {
        ArgumentError$: function(message) {
          return new P.ArgumentError(false, null, null, message);
        },
        ArgumentError$value: function(value, $name, message) {
          return new P.ArgumentError(true, value, $name, message);
        },
        ArgumentError$notNull: function($name) {
          return new P.ArgumentError(false, null, $name, "Must not be null");
        }
      }
    },
    RangeError: {
      "^": "ArgumentError;start>,end>,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation, t2, t3;
        t1 = this.start;
        if (t1 == null) {
          t1 = this.end;
          explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
        } else {
          t2 = this.end;
          if (t2 == null)
            explanation = ": Not greater than or equal to " + H.S(t1);
          else {
            t3 = J.getInterceptor$n(t2);
            if (t3.$gt(t2, t1))
              explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
            else
              explanation = t3.$lt(t2, t1) ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
          }
        }
        return explanation;
      },
      start$0: function($receiver) {
        return this.start.call$0();
      },
      static: {
        RangeError$: function(message) {
          return new P.RangeError(null, null, false, null, null, message);
        },
        RangeError$value: function(value, $name, message) {
          return new P.RangeError(null, null, true, value, $name, "Value not in range");
        },
        RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
          return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
        },
        RangeError_checkValueInInterval: function(value, minValue, maxValue, $name, message) {
          var t1 = J.getInterceptor$n(value);
          if (t1.$lt(value, minValue) || t1.$gt(value, maxValue))
            throw H.wrapException(P.RangeError$range(value, minValue, maxValue, $name, message));
        },
        RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
          var t1;
          if (typeof start !== "number")
            return H.iae(start);
          if (!(0 > start)) {
            if (typeof $length !== "number")
              return H.iae($length);
            t1 = start > $length;
          } else
            t1 = true;
          if (t1)
            throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
          if (end != null) {
            if (typeof end !== "number")
              return H.iae(end);
            if (!(start > end)) {
              if (typeof $length !== "number")
                return H.iae($length);
              t1 = end > $length;
            } else
              t1 = true;
            if (t1)
              throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
            return end;
          }
          return $length;
        }
      }
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
      get$start: function(_) {
        return 0;
      },
      get$end: function(_) {
        return J.$sub$n(this.length, 1);
      },
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        if (J.$lt$n(this.invalidValue, 0))
          return ": index must not be negative";
        var t1 = this.length;
        if (J.$eq$(t1, 0))
          return ": no indices are valid";
        return ": index should be less than " + H.S(t1);
      },
      start$0: function($receiver) {
        return this.get$start(this).call$0();
      },
      static: {
        IndexError$: function(invalidValue, indexable, $name, message, $length) {
          var t1 = $length != null ? $length : J.get$length$asx(indexable);
          return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
        }
      }
    },
    NoSuchMethodError: {
      "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
      toString$0: function(_) {
        var t1, sb, t2, t3, _i, argument, receiverText, actualParameters;
        t1 = {};
        sb = new P.StringBuffer("");
        t1.comma = "";
        for (t2 = this._core$_arguments, t3 = t2.length, _i = 0; _i < t3; ++_i) {
          argument = t2[_i];
          sb._contents += t1.comma;
          sb._contents += H.S(P.Error_safeToString(argument));
          t1.comma = ", ";
        }
        this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(t1, sb));
        receiverText = P.Error_safeToString(this._core$_receiver);
        actualParameters = sb.toString$0(0);
        return "NoSuchMethodError: method not found: '" + H.S(this._memberName.__internal$_name) + "'\nReceiver: " + H.S(receiverText) + "\nArguments: [" + actualParameters + "]";
      },
      static: {
        NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
          return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
        }
      }
    },
    UnsupportedError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "Unsupported operation: " + this.message;
      }
    },
    UnimplementedError: {
      "^": "Error;message>",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
      }
    },
    StateError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "Bad state: " + this.message;
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      }
    },
    OutOfMemoryError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Out of Memory";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    StackOverflowError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Stack Overflow";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    CyclicInitializationError: {
      "^": "Error;variableName",
      toString$0: function(_) {
        return "Reading static variable '" + this.variableName + "' during its initialization";
      }
    },
    _Exception: {
      "^": "Object;message>",
      toString$0: function(_) {
        var t1 = this.message;
        if (t1 == null)
          return "Exception";
        return "Exception: " + H.S(t1);
      }
    },
    FormatException: {
      "^": "Object;message>,source,offset>",
      toString$0: function(_) {
        var t1, report, offset, source, lineNum, lineStart, lastWasCR, i, $char, lineEnd, t2, end, start, prefix, postfix, slice;
        t1 = this.message;
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
        offset = this.offset;
        source = this.source;
        if (typeof source !== "string")
          return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
        if (offset != null) {
          t1 = J.getInterceptor$n(offset);
          t1 = t1.$lt(offset, 0) || t1.$gt(offset, J.get$length$asx(source));
        } else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          t1 = J.getInterceptor$asx(source);
          if (J.$gt$n(t1.get$length(source), 78))
            source = t1.substring$2(source, 0, 75) + "...";
          return report + "\n" + H.S(source);
        }
        if (typeof offset !== "number")
          return H.iae(offset);
        t1 = J.getInterceptor$asx(source);
        lineNum = 1;
        lineStart = 0;
        lastWasCR = null;
        i = 0;
        for (; i < offset; ++i) {
          $char = t1.codeUnitAt$1(source, i);
          if ($char === 10) {
            if (lineStart !== i || lastWasCR !== true)
              ++lineNum;
            lineStart = i + 1;
            lastWasCR = false;
          } else if ($char === 13) {
            ++lineNum;
            lineStart = i + 1;
            lastWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + H.S(offset - lineStart + 1) + ")\n") : report + (" (at character " + H.S(offset + 1) + ")\n");
        lineEnd = t1.get$length(source);
        i = offset;
        while (true) {
          t2 = t1.get$length(source);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          $char = t1.codeUnitAt$1(source, i);
          if ($char === 10 || $char === 13) {
            lineEnd = i;
            break;
          }
          ++i;
        }
        t2 = J.getInterceptor$n(lineEnd);
        if (J.$gt$n(t2.$sub(lineEnd, lineStart), 78))
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (J.$lt$n(t2.$sub(lineEnd, offset), 75)) {
              start = t2.$sub(lineEnd, 75);
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = t1.substring$2(source, start, end);
        if (typeof start !== "number")
          return H.iae(start);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      }
    },
    IntegerDivisionByZeroException: {
      "^": "Object;",
      toString$0: function(_) {
        return "IntegerDivisionByZeroException";
      }
    },
    Expando: {
      "^": "Object;name>,_jsWeakMapOrKey,$ti",
      toString$0: function(_) {
        return "Expando:" + H.S(this.name);
      },
      $index: function(_, object) {
        var t1, values;
        t1 = this._jsWeakMapOrKey;
        if (typeof t1 !== "string") {
          if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
            H.throwExpression(P.ArgumentError$value(object, "Expandos are not allowed on strings, numbers, booleans or null", null));
          return t1.get(object);
        }
        values = H.Primitives_getProperty(object, "expando$values");
        return values == null ? null : H.Primitives_getProperty(values, t1);
      },
      $indexSet: function(_, object, value) {
        var t1, values;
        t1 = this._jsWeakMapOrKey;
        if (typeof t1 !== "string")
          t1.set(object, value);
        else {
          values = H.Primitives_getProperty(object, "expando$values");
          if (values == null) {
            values = new P.Object();
            H.Primitives_setProperty(object, "expando$values", values);
          }
          H.Primitives_setProperty(values, t1, value);
        }
      }
    },
    Function: {
      "^": "Object;"
    },
    $int: {
      "^": "num;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+int": 0,
    Iterable: {
      "^": "Object;$ti",
      map$1: function(_, f) {
        return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "Iterable", 0), null);
      },
      where$1: ["super$Iterable$where", function(_, test) {
        return new H.WhereIterable(this, test, [H.getRuntimeTypeArgument(this, "Iterable", 0)]);
      }],
      contains$1: function(_, element) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          if (J.$eq$(t1.get$current(), element))
            return true;
        return false;
      },
      forEach$1: function(_, f) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          f.call$1(t1.get$current());
      },
      reduce$1: function(_, combine) {
        var iterator, value;
        iterator = this.get$iterator(this);
        if (!iterator.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        value = iterator.get$current();
        for (; iterator.moveNext$0();)
          value = combine.call$2(value, iterator.get$current());
        return value;
      },
      join$1: function(_, separator) {
        var iterator, t1;
        iterator = this.get$iterator(this);
        if (!iterator.moveNext$0())
          return "";
        if (separator === "") {
          t1 = "";
          do
            t1 += H.S(iterator.get$current());
          while (iterator.moveNext$0());
        } else {
          t1 = H.S(iterator.get$current());
          for (; iterator.moveNext$0();)
            t1 = t1 + separator + H.S(iterator.get$current());
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      any$1: function(_, f) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          if (f.call$1(t1.get$current()) === true)
            return true;
        return false;
      },
      toList$1$growable: function(_, growable) {
        return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "Iterable", 0));
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$length: function(_) {
        var it, count;
        it = this.get$iterator(this);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      get$isEmpty: function(_) {
        return !this.get$iterator(this).moveNext$0();
      },
      get$isNotEmpty: function(_) {
        return !this.get$isEmpty(this);
      },
      skip$1: function(_, count) {
        return H.SkipIterable_SkipIterable(this, count, H.getRuntimeTypeArgument(this, "Iterable", 0));
      },
      get$first: function(_) {
        var it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        return it.get$current();
      },
      get$single: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        result = it.get$current();
        if (it.moveNext$0())
          throw H.wrapException(H.IterableElementError_tooMany());
        return result;
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$notNull("index"));
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = t1.get$current();
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      },
      $asIterable: null
    },
    Iterator: {
      "^": "Object;$ti"
    },
    List: {
      "^": "Object;$ti",
      $asList: null,
      $isIterable: 1,
      $isEfficientLength: 1
    },
    "+List": 0,
    Map: {
      "^": "Object;$ti",
      $asMap: null
    },
    Null: {
      "^": "Object;",
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+num": 0,
    Object: {
      "^": ";",
      $eq: function(_, other) {
        return this === other;
      },
      get$hashCode: function(_) {
        return H.Primitives_objectHashCode(this);
      },
      toString$0: ["super$Object$toString", function(_) {
        return H.Primitives_objectToHumanReadableString(this);
      }],
      noSuchMethod$1: function(_, invocation) {
        throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      },
      get$runtimeType: function(_) {
        return new H.TypeImpl(H.getRuntimeTypeString(this), null);
      },
      toString: function() {
        return this.toString$0(this);
      }
    },
    Match: {
      "^": "Object;"
    },
    RegExp: {
      "^": "Object;"
    },
    StackTrace: {
      "^": "Object;"
    },
    _StringStackTrace: {
      "^": "Object;_stackTrace",
      toString$0: function(_) {
        return this._stackTrace;
      }
    },
    Stopwatch: {
      "^": "Object;_core$_start,_stop",
      start$0: [function(_) {
        var t1, t2;
        t1 = this._core$_start == null;
        if (!t1 && this._stop == null)
          return;
        t2 = $.Primitives_timerTicks;
        if (t1)
          this._core$_start = t2.call$0();
        else {
          this._core$_start = J.$sub$n(t2.call$0(), J.$sub$n(this._stop, this._core$_start));
          this._stop = null;
        }
      }, "call$0", "get$start", 0, 0, 2],
      stop$0: function(_) {
        if (!(this._core$_start != null && this._stop == null))
          return;
        this._stop = $.Primitives_timerTicks.call$0();
      },
      reset$0: function(_) {
        var t1;
        if (this._core$_start == null)
          return;
        t1 = $.Primitives_timerTicks.call$0();
        this._core$_start = t1;
        if (this._stop != null)
          this._stop = t1;
      },
      get$elapsedTicks: function() {
        var t1, t2;
        t1 = this._core$_start;
        if (t1 == null)
          return 0;
        t2 = this._stop;
        return t2 == null ? J.$sub$n($.Primitives_timerTicks.call$0(), this._core$_start) : J.$sub$n(t2, t1);
      },
      get$isRunning: function() {
        return this._core$_start != null && this._stop == null;
      }
    },
    String: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.String];
      }
    },
    "+String": 0,
    Runes: {
      "^": "Iterable;string",
      get$iterator: function(_) {
        return new P.RuneIterator(this.string, 0, 0, null);
      },
      $asIterable: function() {
        return [P.$int];
      }
    },
    RuneIterator: {
      "^": "Object;string,_core$_position,_nextPosition,_currentCodePoint",
      reset$1: function(_, rawIndex) {
        var t1, t2;
        t1 = this.string;
        t2 = t1.length;
        P.RangeError_checkValueInInterval(rawIndex, 0, t2, "rawIndex", null);
        if (rawIndex > 0 && rawIndex < t2 && (C.JSString_methods.codeUnitAt$1(t1, rawIndex - 1) & 64512) === 55296 && (C.JSString_methods.codeUnitAt$1(t1, rawIndex) & 64512) === 56320)
          H.throwExpression(P.ArgumentError$("Index inside surrogate pair: " + rawIndex));
        this._nextPosition = rawIndex;
        this._core$_position = rawIndex;
        this._currentCodePoint = null;
      },
      reset$0: function($receiver) {
        return this.reset$1($receiver, 0);
      },
      get$current: function() {
        return this._currentCodePoint;
      },
      moveNext$0: function() {
        var t1, t2, t3, codeUnit, nextPosition, nextCodeUnit;
        t1 = this._nextPosition;
        this._core$_position = t1;
        t2 = this.string;
        t3 = t2.length;
        if (t1 === t3) {
          this._currentCodePoint = null;
          return false;
        }
        codeUnit = C.JSString_methods.codeUnitAt$1(t2, t1);
        nextPosition = t1 + 1;
        if ((codeUnit & 64512) === 55296 && nextPosition < t3) {
          nextCodeUnit = C.JSString_methods.codeUnitAt$1(t2, nextPosition);
          if ((nextCodeUnit & 64512) === 56320) {
            this._nextPosition = nextPosition + 1;
            this._currentCodePoint = P._combineSurrogatePair(codeUnit, nextCodeUnit);
            return true;
          }
        }
        this._nextPosition = nextPosition;
        this._currentCodePoint = codeUnit;
        return true;
      }
    },
    StringBuffer: {
      "^": "Object;_contents@",
      get$length: function(_) {
        return this._contents.length;
      },
      get$isEmpty: function(_) {
        return this._contents.length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._contents.length !== 0;
      },
      write$1: function(_, obj) {
        this._contents += H.S(obj);
      },
      writeCharCode$1: function(charCode) {
        this._contents += H.Primitives_stringFromCharCode(charCode);
      },
      toString$0: function(_) {
        var t1 = this._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      static: {
        StringBuffer__writeAll: function(string, objects, separator) {
          var iterator = J.get$iterator$ax(objects);
          if (!iterator.moveNext$0())
            return string;
          if (separator.length === 0) {
            do
              string += H.S(iterator.get$current());
            while (iterator.moveNext$0());
          } else {
            string += H.S(iterator.get$current());
            for (; iterator.moveNext$0();)
              string = string + separator + H.S(iterator.get$current());
          }
          return string;
        }
      }
    },
    Symbol0: {
      "^": "Object;"
    },
    Uri__parseIPv4Address_error: {
      "^": "Closure:103;host",
      call$2: function(msg, position) {
        throw H.wrapException(new P.FormatException("Illegal IPv4 address, " + msg, this.host, position));
      }
    },
    Uri_parseIPv6Address_error: {
      "^": "Closure:104;host",
      call$2: function(msg, position) {
        throw H.wrapException(new P.FormatException("Illegal IPv6 address, " + msg, this.host, position));
      },
      call$1: function(msg) {
        return this.call$2(msg, null);
      }
    },
    Uri_parseIPv6Address_parseHex: {
      "^": "Closure:105;host,error",
      call$2: function(start, end) {
        var value, t1;
        if (J.$gt$n(J.$sub$n(end, start), 4))
          this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
        value = H.Primitives_parseInt(J.substring$2$s(this.host, start, end), 16, null);
        t1 = J.getInterceptor$n(value);
        if (t1.$lt(value, 0) || t1.$gt(value, 65535))
          this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
        return value;
      }
    },
    _Uri: {
      "^": "Object;scheme<,_userInfo,_host,_port,_path,_query,_fragment,_pathSegments,_text,_hashCodeCache,_queryParameters,_queryParameterLists",
      get$userInfo: function() {
        return this._userInfo;
      },
      get$host: function(_) {
        var t1 = this._host;
        if (t1 == null)
          return "";
        if (J.getInterceptor$s(t1).startsWith$1(t1, "["))
          return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
        return t1;
      },
      get$port: function(_) {
        var t1 = this._port;
        if (t1 == null)
          return P._Uri__defaultPort(this.scheme);
        return t1;
      },
      get$path: function(_) {
        return this._path;
      },
      get$query: function(_) {
        var t1 = this._query;
        return t1 == null ? "" : t1;
      },
      get$fragment: function() {
        var t1 = this._fragment;
        return t1 == null ? "" : t1;
      },
      get$pathSegments: function() {
        var result, pathToSplit;
        result = this._pathSegments;
        if (result != null)
          return result;
        pathToSplit = this._path;
        if (pathToSplit.length !== 0 && C.JSString_methods.codeUnitAt$1(pathToSplit, 0) === 47)
          pathToSplit = C.JSString_methods.substring$1(pathToSplit, 1);
        result = pathToSplit === "" ? C.List_empty0 : P.List_List$unmodifiable(new H.MappedListIterable(pathToSplit.split("/"), P.core_Uri_decodeComponent$closure(), [null, null]), P.String);
        this._pathSegments = result;
        return result;
      },
      _mergePaths$2: function(base, reference) {
        var backCount, refStart, baseEnd, newEnd, delta, t1;
        for (backCount = 0, refStart = 0; C.JSString_methods.startsWith$2(reference, "../", refStart);) {
          refStart += 3;
          ++backCount;
        }
        baseEnd = C.JSString_methods.lastIndexOf$1(base, "/");
        while (true) {
          if (!(baseEnd > 0 && backCount > 0))
            break;
          newEnd = C.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
          if (newEnd < 0)
            break;
          delta = baseEnd - newEnd;
          t1 = delta !== 2;
          if (!t1 || delta === 3)
            if (C.JSString_methods.codeUnitAt$1(base, newEnd + 1) === 46)
              t1 = !t1 || C.JSString_methods.codeUnitAt$1(base, newEnd + 2) === 46;
            else
              t1 = false;
          else
            t1 = false;
          if (t1)
            break;
          --backCount;
          baseEnd = newEnd;
        }
        return C.JSString_methods.replaceRange$3(base, baseEnd + 1, null, C.JSString_methods.substring$1(reference, refStart - 3 * backCount));
      },
      resolve$1: function(reference) {
        return this.resolveUri$1(P.Uri_parse(reference, 0, null));
      },
      resolveUri$1: function(reference) {
        var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, t1, mergedPath;
        if (reference.get$scheme().length !== 0) {
          targetScheme = reference.get$scheme();
          if (reference.get$hasAuthority()) {
            targetUserInfo = reference.get$userInfo();
            targetHost = reference.get$host(reference);
            targetPort = reference.get$hasPort() ? reference.get$port(reference) : null;
          } else {
            targetUserInfo = "";
            targetHost = null;
            targetPort = null;
          }
          targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
          targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : null;
        } else {
          targetScheme = this.scheme;
          if (reference.get$hasAuthority()) {
            targetUserInfo = reference.get$userInfo();
            targetHost = reference.get$host(reference);
            targetPort = P._Uri__makePort(reference.get$hasPort() ? reference.get$port(reference) : null, targetScheme);
            targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
            targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : null;
          } else {
            targetUserInfo = this._userInfo;
            targetHost = this._host;
            targetPort = this._port;
            if (reference.get$path(reference) === "") {
              targetPath = this._path;
              targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : this._query;
            } else {
              if (reference.get$hasAbsolutePath())
                targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
              else {
                t1 = this._path;
                if (t1.length === 0)
                  if (targetHost == null)
                    targetPath = targetScheme.length === 0 ? reference.get$path(reference) : P._Uri__removeDotSegments(reference.get$path(reference));
                  else
                    targetPath = P._Uri__removeDotSegments("/" + reference.get$path(reference));
                else {
                  mergedPath = this._mergePaths$2(t1, reference.get$path(reference));
                  targetPath = targetScheme.length !== 0 || targetHost != null || C.JSString_methods.startsWith$1(t1, "/") ? P._Uri__removeDotSegments(mergedPath) : P._Uri__normalizeRelativePath(mergedPath);
                }
              }
              targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : null;
            }
          }
        }
        return new P._Uri(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, reference.get$hasFragment() ? reference.get$fragment() : null, null, null, null, null, null);
      },
      get$hasAuthority: function() {
        return this._host != null;
      },
      get$hasPort: function() {
        return this._port != null;
      },
      get$hasQuery: function() {
        return this._query != null;
      },
      get$hasFragment: function() {
        return this._fragment != null;
      },
      get$hasAbsolutePath: function() {
        return C.JSString_methods.startsWith$1(this._path, "/");
      },
      toFilePath$1$windows: function(windows) {
        var t1, pathSegments;
        t1 = this.scheme;
        if (t1 !== "" && t1 !== "file")
          throw H.wrapException(new P.UnsupportedError("Cannot extract a file path from a " + H.S(t1) + " URI"));
        t1 = this._query;
        if ((t1 == null ? "" : t1) !== "")
          throw H.wrapException(new P.UnsupportedError("Cannot extract a file path from a URI with a query component"));
        t1 = this._fragment;
        if ((t1 == null ? "" : t1) !== "")
          throw H.wrapException(new P.UnsupportedError("Cannot extract a file path from a URI with a fragment component"));
        if ((windows == null ? false : windows) === true)
          t1 = P._Uri__toWindowsFilePath(this);
        else {
          if (this._host != null && this.get$host(this) !== "")
            H.throwExpression(new P.UnsupportedError("Cannot extract a non-Windows file path from a file URI with an authority"));
          pathSegments = this.get$pathSegments();
          P._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
          t1 = P.StringBuffer__writeAll(C.JSString_methods.startsWith$1(this._path, "/") ? "/" : "", pathSegments, "/");
          t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
        }
        return t1;
      },
      toFilePath$0: function() {
        return this.toFilePath$1$windows(null);
      },
      get$data: function(_) {
        return this.scheme === "data" ? P.UriData_UriData$fromUri(this) : null;
      },
      toString$0: function(_) {
        var t1 = this._text;
        if (t1 == null) {
          t1 = this._initializeText$0();
          this._text = t1;
        }
        return t1;
      },
      _initializeText$0: function() {
        var t1, t2, t3, t4;
        t1 = this.scheme;
        t2 = t1.length !== 0 ? H.S(t1) + ":" : "";
        t3 = this._host;
        t4 = t3 == null;
        if (!t4 || C.JSString_methods.startsWith$1(this._path, "//") || t1 === "file") {
          t1 = t2 + "//";
          t2 = this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += H.S(t3);
          t2 = this._port;
          if (t2 != null)
            t1 = t1 + ":" + H.S(t2);
        } else
          t1 = t2;
        t1 += this._path;
        t2 = this._query;
        if (t2 != null)
          t1 = t1 + "?" + H.S(t2);
        t2 = this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + H.S(t2);
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      $eq: function(_, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        if (this === other)
          return true;
        t1 = J.getInterceptor(other);
        if (!!t1.$isUri) {
          t2 = this.scheme;
          t3 = other.get$scheme();
          if (t2 == null ? t3 == null : t2 === t3)
            if (this._host != null === other.get$hasAuthority())
              if (this._userInfo === other.get$userInfo()) {
                t2 = this.get$host(this);
                t3 = t1.get$host(other);
                if (t2 == null ? t3 == null : t2 === t3)
                  if (J.$eq$(this.get$port(this), t1.get$port(other)))
                    if (this._path === t1.get$path(other)) {
                      t2 = this._query;
                      t3 = t2 == null;
                      if (!t3 === other.get$hasQuery()) {
                        if (t3)
                          t2 = "";
                        if (t2 === t1.get$query(other)) {
                          t1 = this._fragment;
                          t2 = t1 == null;
                          if (!t2 === other.get$hasFragment()) {
                            if (t2)
                              t1 = "";
                            t1 = t1 === other.get$fragment();
                          } else
                            t1 = false;
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  else
                    t1 = false;
                else
                  t1 = false;
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
          return t1;
        }
        return false;
      },
      get$hashCode: function(_) {
        var t1 = this._hashCodeCache;
        if (t1 == null) {
          t1 = this._text;
          if (t1 == null) {
            t1 = this._initializeText$0();
            this._text = t1;
          }
          t1 = J.get$hashCode$(t1);
          this._hashCodeCache = t1;
        }
        return t1;
      },
      $isUri: 1,
      static: {
        _Uri__Uri$notSimple: function(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme) {
          var t1, userInfoStart, userInfo, host, port, path, query;
          if (scheme == null) {
            t1 = J.getInterceptor$n(schemeEnd);
            if (t1.$gt(schemeEnd, start))
              scheme = P._Uri__makeScheme(uri, start, schemeEnd);
            else {
              if (t1.$eq(schemeEnd, start))
                P._Uri__fail(uri, start, "Invalid empty scheme");
              scheme = "";
            }
          }
          t1 = J.getInterceptor$n(hostStart);
          if (t1.$gt(hostStart, start)) {
            userInfoStart = J.$add$ns(schemeEnd, 3);
            userInfo = J.$lt$n(userInfoStart, hostStart) ? P._Uri__makeUserInfo(uri, userInfoStart, t1.$sub(hostStart, 1)) : "";
            host = P._Uri__makeHost(uri, hostStart, portStart, false);
            t1 = J.getInterceptor$ns(portStart);
            port = J.$lt$n(t1.$add(portStart, 1), pathStart) ? P._Uri__makePort(H.Primitives_parseInt(J.substring$2$s(uri, t1.$add(portStart, 1), pathStart), null, new P.closure3(uri, portStart)), scheme) : null;
          } else {
            userInfo = "";
            host = null;
            port = null;
          }
          path = P._Uri__makePath(uri, pathStart, queryStart, null, scheme, host != null);
          t1 = J.getInterceptor$n(queryStart);
          query = t1.$lt(queryStart, fragmentStart) ? P._Uri__makeQuery(uri, t1.$add(queryStart, 1), fragmentStart, null) : null;
          t1 = J.getInterceptor$n(fragmentStart);
          return new P._Uri(scheme, userInfo, host, port, path, query, t1.$lt(fragmentStart, end) ? P._Uri__makeFragment(uri, t1.$add(fragmentStart, 1), end) : null, null, null, null, null, null);
        },
        _Uri__Uri: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
          var isFile, t1, t2;
          scheme = P._Uri__makeScheme(scheme, 0, scheme == null ? 0 : scheme.length);
          userInfo = P._Uri__makeUserInfo(userInfo, 0, 0);
          host = P._Uri__makeHost(host, 0, host == null ? 0 : host.length, false);
          query = P._Uri__makeQuery(query, 0, 0, queryParameters);
          fragment = P._Uri__makeFragment(fragment, 0, 0);
          port = P._Uri__makePort(port, scheme);
          isFile = scheme === "file";
          if (host == null)
            t1 = userInfo.length !== 0 || port != null || isFile;
          else
            t1 = false;
          if (t1)
            host = "";
          t1 = host == null;
          t2 = path == null ? 0 : path.length;
          path = P._Uri__makePath(path, 0, t2, pathSegments, scheme, !t1);
          return new P._Uri(scheme, userInfo, host, port, scheme.length === 0 && t1 && !C.JSString_methods.startsWith$1(path, "/") ? P._Uri__normalizeRelativePath(path) : P._Uri__removeDotSegments(path), query, fragment, null, null, null, null, null);
        },
        _Uri__defaultPort: function(scheme) {
          if (scheme === "http")
            return 80;
          if (scheme === "https")
            return 443;
          return 0;
        },
        _Uri__fail: function(uri, index, message) {
          throw H.wrapException(new P.FormatException(message, uri, index));
        },
        _Uri__Uri$file: function(path, windows) {
          return (windows == null ? false : windows) === true ? P._Uri__makeWindowsFileUrl(path, false) : P._Uri__makeFileUri(path, false);
        },
        _Uri__checkNonWindowsPathReservedCharacters: function(segments, argumentError) {
          C.JSArray_methods.forEach$1(segments, new P._Uri__checkNonWindowsPathReservedCharacters_closure(false));
        },
        _Uri__checkWindowsPathReservedCharacters: function(segments, argumentError, firstSegment) {
          var t1;
          for (t1 = H.SubListIterable$(segments, firstSegment, null, H.getTypeArgumentByIndex(segments, 0)), t1 = new H.ListIterator(t1, t1.get$length(t1), 0, null, [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
            if (J.contains$1$asx(t1.__internal$_current, P.RegExp_RegExp('["*/:<>?\\\\|]', true, false)) === true)
              if (argumentError)
                throw H.wrapException(P.ArgumentError$("Illegal character in path"));
              else
                throw H.wrapException(new P.UnsupportedError("Illegal character in path"));
        },
        _Uri__checkWindowsDriveLetter: function(charCode, argumentError) {
          var t1;
          if (!(65 <= charCode && charCode <= 90))
            t1 = 97 <= charCode && charCode <= 122;
          else
            t1 = true;
          if (t1)
            return;
          if (argumentError)
            throw H.wrapException(P.ArgumentError$("Illegal drive letter " + P.String_String$fromCharCode(charCode)));
          else
            throw H.wrapException(new P.UnsupportedError("Illegal drive letter " + P.String_String$fromCharCode(charCode)));
        },
        _Uri__makeFileUri: function(path, slashTerminated) {
          var t1, segments;
          t1 = J.getInterceptor$s(path);
          segments = t1.split$1(path, "/");
          if (t1.startsWith$1(path, "/"))
            return P._Uri__Uri(null, null, null, segments, null, null, null, "file", null);
          else
            return P._Uri__Uri(null, null, null, segments, null, null, null, null, null);
        },
        _Uri__makeWindowsFileUrl: function(path, slashTerminated) {
          var t1, pathSegments, pathStart, hostPart;
          t1 = J.getInterceptor$s(path);
          if (t1.startsWith$1(path, "\\\\?\\"))
            if (t1.startsWith$2(path, "UNC\\", 4))
              path = t1.replaceRange$3(path, 0, 7, "\\");
            else {
              path = t1.substring$1(path, 4);
              if (path.length < 3 || C.JSString_methods.codeUnitAt$1(path, 1) !== 58 || C.JSString_methods.codeUnitAt$1(path, 2) !== 92)
                throw H.wrapException(P.ArgumentError$("Windows paths with \\\\?\\ prefix must be absolute"));
            }
          else
            path = t1.replaceAll$2(path, "/", "\\");
          t1 = path.length;
          if (t1 > 1 && C.JSString_methods.codeUnitAt$1(path, 1) === 58) {
            P._Uri__checkWindowsDriveLetter(C.JSString_methods.codeUnitAt$1(path, 0), true);
            if (t1 === 2 || C.JSString_methods.codeUnitAt$1(path, 2) !== 92)
              throw H.wrapException(P.ArgumentError$("Windows paths with drive letter must be absolute"));
            pathSegments = path.split("\\");
            P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 1);
            return P._Uri__Uri(null, null, null, pathSegments, null, null, null, "file", null);
          }
          if (C.JSString_methods.startsWith$1(path, "\\"))
            if (C.JSString_methods.startsWith$2(path, "\\", 1)) {
              pathStart = C.JSString_methods.indexOf$2(path, "\\", 2);
              t1 = pathStart < 0;
              hostPart = t1 ? C.JSString_methods.substring$1(path, 2) : C.JSString_methods.substring$2(path, 2, pathStart);
              pathSegments = (t1 ? "" : C.JSString_methods.substring$1(path, pathStart + 1)).split("\\");
              P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
              return P._Uri__Uri(null, hostPart, null, pathSegments, null, null, null, "file", null);
            } else {
              pathSegments = path.split("\\");
              P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
              return P._Uri__Uri(null, null, null, pathSegments, null, null, null, "file", null);
            }
          else {
            pathSegments = path.split("\\");
            P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
            return P._Uri__Uri(null, null, null, pathSegments, null, null, null, null, null);
          }
        },
        _Uri__makePort: function(port, scheme) {
          if (port != null && J.$eq$(port, P._Uri__defaultPort(scheme)))
            return;
          return port;
        },
        _Uri__makeHost: function(host, start, end, strictIPv6) {
          var t1, t2, t3, i;
          if (host == null)
            return;
          t1 = J.getInterceptor(start);
          if (t1.$eq(start, end))
            return "";
          t2 = J.getInterceptor$s(host);
          if (t2.codeUnitAt$1(host, start) === 91) {
            t3 = J.getInterceptor$n(end);
            if (t2.codeUnitAt$1(host, t3.$sub(end, 1)) !== 93)
              P._Uri__fail(host, start, "Missing end `]` to match `[` in host");
            P.Uri_parseIPv6Address(host, t1.$add(start, 1), t3.$sub(end, 1));
            return t2.substring$2(host, start, end).toLowerCase();
          }
          for (i = start; t1 = J.getInterceptor$n(i), t1.$lt(i, end); i = t1.$add(i, 1))
            if (t2.codeUnitAt$1(host, i) === 58) {
              P.Uri_parseIPv6Address(host, start, end);
              return "[" + H.S(host) + "]";
            }
          return P._Uri__normalizeRegName(host, start, end);
        },
        _Uri__normalizeRegName: function(host, start, end) {
          var t1, index, sectionStart, buffer, isNormalized, t2, $char, replacement, t3, slice, sourceLength, tail;
          for (t1 = J.getInterceptor$s(host), index = start, sectionStart = index, buffer = null, isNormalized = true; t2 = J.getInterceptor$n(index), t2.$lt(index, end);) {
            $char = t1.codeUnitAt$1(host, index);
            if ($char === 37) {
              replacement = P._Uri__normalizeEscape(host, index, true);
              t3 = replacement == null;
              if (t3 && isNormalized) {
                index = t2.$add(index, 3);
                continue;
              }
              if (buffer == null)
                buffer = new P.StringBuffer("");
              slice = t1.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              buffer._contents = buffer._contents + slice;
              if (t3) {
                replacement = t1.substring$2(host, index, t2.$add(index, 3));
                sourceLength = 3;
              } else if (replacement === "%") {
                replacement = "%25";
                sourceLength = 1;
              } else
                sourceLength = 3;
              buffer._contents += replacement;
              index = t2.$add(index, sourceLength);
              sectionStart = index;
              isNormalized = true;
            } else {
              if ($char < 127) {
                t3 = $char >>> 4;
                if (t3 >= 8)
                  return H.ioore(C.List_qNA, t3);
                t3 = (C.List_qNA[t3] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0;
              } else
                t3 = false;
              if (t3) {
                if (isNormalized && 65 <= $char && 90 >= $char) {
                  if (buffer == null)
                    buffer = new P.StringBuffer("");
                  if (J.$lt$n(sectionStart, index)) {
                    t3 = t1.substring$2(host, sectionStart, index);
                    buffer._contents = buffer._contents + t3;
                    sectionStart = index;
                  }
                  isNormalized = false;
                }
                index = t2.$add(index, 1);
              } else {
                if ($char <= 93) {
                  t3 = $char >>> 4;
                  if (t3 >= 8)
                    return H.ioore(C.List_2Vk, t3);
                  t3 = (C.List_2Vk[t3] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0;
                } else
                  t3 = false;
                if (t3)
                  P._Uri__fail(host, index, "Invalid character");
                else {
                  if (($char & 64512) === 55296 && J.$lt$n(t2.$add(index, 1), end)) {
                    tail = t1.codeUnitAt$1(host, t2.$add(index, 1));
                    if ((tail & 64512) === 56320) {
                      $char = (65536 | ($char & 1023) << 10 | tail & 1023) >>> 0;
                      sourceLength = 2;
                    } else
                      sourceLength = 1;
                  } else
                    sourceLength = 1;
                  if (buffer == null)
                    buffer = new P.StringBuffer("");
                  slice = t1.substring$2(host, sectionStart, index);
                  if (!isNormalized)
                    slice = slice.toLowerCase();
                  buffer._contents = buffer._contents + slice;
                  buffer._contents += P._Uri__escapeChar($char);
                  index = t2.$add(index, sourceLength);
                  sectionStart = index;
                }
              }
            }
          }
          if (buffer == null)
            return t1.substring$2(host, start, end);
          if (J.$lt$n(sectionStart, end)) {
            slice = t1.substring$2(host, sectionStart, end);
            buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          }
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        },
        _Uri__makeScheme: function(scheme, start, end) {
          var t1, lowerCase, i, containsUpperCase, codeUnit, t2;
          if (start === end)
            return "";
          t1 = J.getInterceptor$s(scheme);
          lowerCase = t1.codeUnitAt$1(scheme, start) | 32;
          if (!(97 <= lowerCase && lowerCase <= 122))
            P._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
          if (typeof end !== "number")
            return H.iae(end);
          i = start;
          containsUpperCase = false;
          for (; i < end; ++i) {
            codeUnit = t1.codeUnitAt$1(scheme, i);
            if (codeUnit < 128) {
              t2 = codeUnit >>> 4;
              if (t2 >= 8)
                return H.ioore(C.List_JYB, t2);
              t2 = (C.List_JYB[t2] & C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0;
            } else
              t2 = false;
            if (!t2)
              P._Uri__fail(scheme, i, "Illegal scheme character");
            if (65 <= codeUnit && codeUnit <= 90)
              containsUpperCase = true;
          }
          scheme = t1.substring$2(scheme, start, end);
          return P._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
        },
        _Uri__canonicalizeScheme: function(scheme) {
          if (scheme === "http")
            return "http";
          if (scheme === "file")
            return "file";
          if (scheme === "https")
            return "https";
          if (scheme === "package")
            return "package";
          return scheme;
        },
        _Uri__makeUserInfo: function(userInfo, start, end) {
          if (userInfo == null)
            return "";
          return P._Uri__normalize(userInfo, start, end, C.List_gRj);
        },
        _Uri__makePath: function(path, start, end, pathSegments, scheme, hasAuthority) {
          var isFile, ensureLeadingSlash, t1, result;
          isFile = scheme === "file";
          ensureLeadingSlash = isFile || hasAuthority;
          t1 = path == null;
          if (t1 && pathSegments == null)
            return isFile ? "/" : "";
          t1 = !t1;
          if (t1 && pathSegments != null)
            throw H.wrapException(P.ArgumentError$("Both path and pathSegments specified"));
          if (t1)
            result = P._Uri__normalize(path, start, end, C.List_qg4);
          else {
            pathSegments.toString;
            result = new H.MappedListIterable(pathSegments, new P._Uri__makePath_closure(), [null, null]).join$1(0, "/");
          }
          if (result.length === 0) {
            if (isFile)
              return "/";
          } else if (ensureLeadingSlash && !C.JSString_methods.startsWith$1(result, "/"))
            result = "/" + result;
          return P._Uri__normalizePath(result, scheme, hasAuthority);
        },
        _Uri__normalizePath: function(path, scheme, hasAuthority) {
          if (scheme.length === 0 && !hasAuthority && !C.JSString_methods.startsWith$1(path, "/"))
            return P._Uri__normalizeRelativePath(path);
          return P._Uri__removeDotSegments(path);
        },
        _Uri__makeQuery: function(query, start, end, queryParameters) {
          if (query != null)
            return P._Uri__normalize(query, start, end, C.List_CVk);
          return;
        },
        _Uri__makeFragment: function(fragment, start, end) {
          if (fragment == null)
            return;
          return P._Uri__normalize(fragment, start, end, C.List_CVk);
        },
        _Uri__normalizeEscape: function(source, index, lowerCase) {
          var t1, t2, firstDigit, secondDigit, firstDigitValue, secondDigitValue, value, t3;
          t1 = J.getInterceptor$ns(index);
          t2 = J.getInterceptor$asx(source);
          if (J.$ge$n(t1.$add(index, 2), t2.get$length(source)))
            return "%";
          firstDigit = t2.codeUnitAt$1(source, t1.$add(index, 1));
          secondDigit = t2.codeUnitAt$1(source, t1.$add(index, 2));
          firstDigitValue = P._Uri__parseHexDigit(firstDigit);
          secondDigitValue = P._Uri__parseHexDigit(secondDigit);
          if (firstDigitValue < 0 || secondDigitValue < 0)
            return "%";
          value = firstDigitValue * 16 + secondDigitValue;
          if (value < 127) {
            t3 = C.JSInt_methods._shrOtherPositive$1(value, 4);
            if (t3 >= 8)
              return H.ioore(C.List_nxB, t3);
            t3 = (C.List_nxB[t3] & C.JSInt_methods._shlPositive$1(1, value & 15)) !== 0;
          } else
            t3 = false;
          if (t3)
            return H.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
          if (firstDigit >= 97 || secondDigit >= 97)
            return t2.substring$2(source, index, t1.$add(index, 3)).toUpperCase();
          return;
        },
        _Uri__parseHexDigit: function($char) {
          var digit, lowerCase;
          digit = $char ^ 48;
          if (digit <= 9)
            return digit;
          lowerCase = $char | 32;
          if (97 <= lowerCase && lowerCase <= 102)
            return lowerCase - 87;
          return -1;
        },
        _Uri__escapeChar: function($char) {
          var codeUnits, flag, encodedBytes, t1, index, $byte, t2, t3;
          if ($char < 128) {
            codeUnits = new Array(3);
            codeUnits.fixed$length = Array;
            codeUnits[0] = 37;
            codeUnits[1] = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $char >>> 4);
            codeUnits[2] = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $char & 15);
          } else {
            if ($char > 2047)
              if ($char > 65535) {
                flag = 240;
                encodedBytes = 4;
              } else {
                flag = 224;
                encodedBytes = 3;
              }
            else {
              flag = 192;
              encodedBytes = 2;
            }
            t1 = 3 * encodedBytes;
            codeUnits = new Array(t1);
            codeUnits.fixed$length = Array;
            for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
              $byte = C.JSInt_methods._shrReceiverPositive$1($char, 6 * encodedBytes) & 63 | flag;
              if (index >= t1)
                return H.ioore(codeUnits, index);
              codeUnits[index] = 37;
              t2 = index + 1;
              t3 = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte >>> 4);
              if (t2 >= t1)
                return H.ioore(codeUnits, t2);
              codeUnits[t2] = t3;
              t3 = index + 2;
              t2 = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte & 15);
              if (t3 >= t1)
                return H.ioore(codeUnits, t3);
              codeUnits[t3] = t2;
              index += 3;
            }
          }
          return P.String_String$fromCharCodes(codeUnits, 0, null);
        },
        _Uri__normalize: function(component, start, end, charTable) {
          var t1, index, sectionStart, buffer, t2, $char, t3, replacement, sourceLength, tail;
          for (t1 = J.getInterceptor$s(component), index = start, sectionStart = index, buffer = null; t2 = J.getInterceptor$n(index), t2.$lt(index, end);) {
            $char = t1.codeUnitAt$1(component, index);
            if ($char < 127) {
              t3 = $char >>> 4;
              if (t3 >= 8)
                return H.ioore(charTable, t3);
              t3 = (charTable[t3] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0;
            } else
              t3 = false;
            if (t3)
              index = t2.$add(index, 1);
            else {
              if ($char === 37) {
                replacement = P._Uri__normalizeEscape(component, index, false);
                if (replacement == null) {
                  index = t2.$add(index, 3);
                  continue;
                }
                if ("%" === replacement) {
                  replacement = "%25";
                  sourceLength = 1;
                } else
                  sourceLength = 3;
              } else {
                if ($char <= 93) {
                  t3 = $char >>> 4;
                  if (t3 >= 8)
                    return H.ioore(C.List_2Vk, t3);
                  t3 = (C.List_2Vk[t3] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0;
                } else
                  t3 = false;
                if (t3) {
                  P._Uri__fail(component, index, "Invalid character");
                  replacement = null;
                  sourceLength = null;
                } else {
                  if (($char & 64512) === 55296)
                    if (J.$lt$n(t2.$add(index, 1), end)) {
                      tail = t1.codeUnitAt$1(component, t2.$add(index, 1));
                      if ((tail & 64512) === 56320) {
                        $char = (65536 | ($char & 1023) << 10 | tail & 1023) >>> 0;
                        sourceLength = 2;
                      } else
                        sourceLength = 1;
                    } else
                      sourceLength = 1;
                  else
                    sourceLength = 1;
                  replacement = P._Uri__escapeChar($char);
                }
              }
              if (buffer == null)
                buffer = new P.StringBuffer("");
              t3 = t1.substring$2(component, sectionStart, index);
              buffer._contents = buffer._contents + t3;
              buffer._contents += H.S(replacement);
              index = t2.$add(index, sourceLength);
              sectionStart = index;
            }
          }
          if (buffer == null)
            return t1.substring$2(component, start, end);
          if (J.$lt$n(sectionStart, end))
            buffer._contents += t1.substring$2(component, sectionStart, end);
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        },
        _Uri__mayContainDotSegments: function(path) {
          if (C.JSString_methods.startsWith$1(path, "."))
            return true;
          return C.JSString_methods.indexOf$1(path, "/.") !== -1;
        },
        _Uri__removeDotSegments: function(path) {
          var output, t1, t2, appendSlash, _i, segment, t3;
          if (!P._Uri__mayContainDotSegments(path))
            return path;
          output = [];
          for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            segment = t1[_i];
            if (J.$eq$(segment, "..")) {
              t3 = output.length;
              if (t3 !== 0) {
                if (0 >= t3)
                  return H.ioore(output, -1);
                output.pop();
                if (output.length === 0)
                  output.push("");
              }
              appendSlash = true;
            } else if ("." === segment)
              appendSlash = true;
            else {
              output.push(segment);
              appendSlash = false;
            }
          }
          if (appendSlash)
            output.push("");
          return C.JSArray_methods.join$1(output, "/");
        },
        _Uri__normalizeRelativePath: function(path) {
          var output, t1, t2, appendSlash, _i, segment;
          if (!P._Uri__mayContainDotSegments(path))
            return path;
          output = [];
          for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            segment = t1[_i];
            if (".." === segment)
              if (output.length !== 0 && !J.$eq$(C.JSArray_methods.get$last(output), "..")) {
                if (0 >= output.length)
                  return H.ioore(output, -1);
                output.pop();
                appendSlash = true;
              } else {
                output.push("..");
                appendSlash = false;
              }
            else if ("." === segment)
              appendSlash = true;
            else {
              output.push(segment);
              appendSlash = false;
            }
          }
          t1 = output.length;
          if (t1 !== 0)
            if (t1 === 1) {
              if (0 >= t1)
                return H.ioore(output, 0);
              t1 = J.get$isEmpty$asx(output[0]) === true;
            } else
              t1 = false;
          else
            t1 = true;
          if (t1)
            return "./";
          if (appendSlash || J.$eq$(C.JSArray_methods.get$last(output), ".."))
            output.push("");
          return C.JSArray_methods.join$1(output, "/");
        },
        _Uri__toWindowsFilePath: function(uri) {
          var segments, t1, hasDriveLetter, t2, host;
          segments = uri.get$pathSegments();
          t1 = segments.length;
          if (t1 > 0 && J.$eq$(J.get$length$asx(segments[0]), 2) && J.codeUnitAt$1$s(segments[0], 1) === 58) {
            if (0 >= t1)
              return H.ioore(segments, 0);
            P._Uri__checkWindowsDriveLetter(J.codeUnitAt$1$s(segments[0], 0), false);
            P._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
            hasDriveLetter = true;
          } else {
            P._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
            hasDriveLetter = false;
          }
          t2 = uri.get$hasAbsolutePath() && !hasDriveLetter ? "\\" : "";
          if (uri.get$hasAuthority()) {
            host = uri.get$host(uri);
            if (host.length !== 0)
              t2 = t2 + "\\" + H.S(host) + "\\";
          }
          t2 = P.StringBuffer__writeAll(t2, segments, "\\");
          t1 = hasDriveLetter && t1 === 1 ? t2 + "\\" : t2;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        },
        _Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
          var bytes, t1, i, t2, $byte, t3;
          if (encoding === C.Utf8Codec_false && $.$get$_Uri__needsNoEncoding()._nativeRegExp.test(H.checkString(text)))
            return text;
          bytes = encoding.get$encoder().convert$1(text);
          for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
            $byte = bytes[i];
            if ($byte < 128) {
              t3 = $byte >>> 4;
              if (t3 >= 8)
                return H.ioore(canonicalTable, t3);
              t3 = (canonicalTable[t3] & C.JSInt_methods._shlPositive$1(1, $byte & 15)) !== 0;
            } else
              t3 = false;
            if (t3)
              t2 += H.Primitives_stringFromCharCode($byte);
            else
              t2 = spaceToPlus && $byte === 32 ? t2 + "+" : t2 + "%" + "0123456789ABCDEF"[$byte >>> 4 & 15] + "0123456789ABCDEF"[$byte & 15];
          }
          return t2.charCodeAt(0) == 0 ? t2 : t2;
        },
        _Uri__hexCharPairToByte: function(s, pos) {
          var t1, $byte, i, charCode;
          for (t1 = J.getInterceptor$s(s), $byte = 0, i = 0; i < 2; ++i) {
            charCode = t1.codeUnitAt$1(s, pos + i);
            if (48 <= charCode && charCode <= 57)
              $byte = $byte * 16 + charCode - 48;
            else {
              charCode |= 32;
              if (97 <= charCode && charCode <= 102)
                $byte = $byte * 16 + charCode - 87;
              else
                throw H.wrapException(P.ArgumentError$("Invalid URL encoding"));
            }
          }
          return $byte;
        },
        _Uri__uriDecode: function(text, start, end, encoding, plusToSpace) {
          var t1, i, simple, codeUnit, t2, bytes;
          if (typeof end !== "number")
            return H.iae(end);
          t1 = J.getInterceptor$asx(text);
          i = start;
          while (true) {
            if (!(i < end)) {
              simple = true;
              break;
            }
            codeUnit = t1.codeUnitAt$1(text, i);
            if (codeUnit <= 127)
              if (codeUnit !== 37)
                t2 = false;
              else
                t2 = true;
            else
              t2 = true;
            if (t2) {
              simple = false;
              break;
            }
            ++i;
          }
          if (simple) {
            if (C.Utf8Codec_false !== encoding)
              t2 = false;
            else
              t2 = true;
            if (t2)
              return t1.substring$2(text, start, end);
            else
              bytes = new H.CodeUnits(t1.substring$2(text, start, end));
          } else {
            bytes = [];
            for (i = start; i < end; ++i) {
              codeUnit = t1.codeUnitAt$1(text, i);
              if (codeUnit > 127)
                throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI"));
              if (codeUnit === 37) {
                t2 = t1.get$length(text);
                if (typeof t2 !== "number")
                  return H.iae(t2);
                if (i + 3 > t2)
                  throw H.wrapException(P.ArgumentError$("Truncated URI"));
                bytes.push(P._Uri__hexCharPairToByte(text, i + 1));
                i += 2;
              } else
                bytes.push(codeUnit);
            }
          }
          return new P.Utf8Decoder(false).convert$1(bytes);
        }
      }
    },
    closure3: {
      "^": "Closure:0;uri,portStart",
      call$1: function(_) {
        throw H.wrapException(new P.FormatException("Invalid port", this.uri, J.$add$ns(this.portStart, 1)));
      }
    },
    _Uri__checkNonWindowsPathReservedCharacters_closure: {
      "^": "Closure:0;argumentError",
      call$1: function(segment) {
        if (J.contains$1$asx(segment, "/") === true)
          if (this.argumentError)
            throw H.wrapException(P.ArgumentError$("Illegal path character " + H.S(segment)));
          else
            throw H.wrapException(new P.UnsupportedError("Illegal path character " + H.S(segment)));
      }
    },
    _Uri__makePath_closure: {
      "^": "Closure:0;",
      call$1: [function(s) {
        return P._Uri__uriEncode(C.List_qg40, s, C.Utf8Codec_false, false);
      }, null, null, 2, 0, null, 19, "call"]
    },
    UriData: {
      "^": "Object;_text,_separatorIndices,_uriCache",
      get$uri: function() {
        var t1, t2, t3, queryIndex, t4, query, end;
        t1 = this._uriCache;
        if (t1 != null)
          return t1;
        t1 = this._separatorIndices;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t2 = this._text;
        t1 = t1[0] + 1;
        t3 = J.getInterceptor$asx(t2);
        queryIndex = t3.indexOf$2(t2, "?", t1);
        t4 = J.getInterceptor$n(queryIndex);
        if (t4.$ge(queryIndex, 0)) {
          query = t3.substring$1(t2, t4.$add(queryIndex, 1));
          end = queryIndex;
        } else {
          query = null;
          end = null;
        }
        t1 = new P._Uri("data", "", null, null, t3.substring$2(t2, t1, end), query, null, null, null, null, null, null);
        this._uriCache = t1;
        return t1;
      },
      get$parameters: function() {
        var t1, result, t2, i, t3, equals, end;
        t1 = P.String;
        result = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        for (t1 = this._separatorIndices, t2 = this._text, i = 3; i < t1.length; i += 2) {
          t3 = t1[i - 2];
          equals = t1[i - 1];
          end = t1[i];
          result.$indexSet(0, P._Uri__uriDecode(t2, t3 + 1, equals, C.Utf8Codec_false, false), P._Uri__uriDecode(t2, equals + 1, end, C.Utf8Codec_false, false));
        }
        return result;
      },
      toString$0: function(_) {
        var t1, t2;
        t1 = this._separatorIndices;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t2 = this._text;
        return t1[0] === -1 ? "data:" + H.S(t2) : t2;
      },
      static: {
        UriData_UriData$fromUri: function(uri) {
          var t1;
          if (uri.scheme !== "data")
            throw H.wrapException(P.ArgumentError$value(uri, "uri", "Scheme must be 'data'"));
          if (uri._host != null)
            throw H.wrapException(P.ArgumentError$value(uri, "uri", "Data uri must not have authority"));
          if (uri._fragment != null)
            throw H.wrapException(P.ArgumentError$value(uri, "uri", "Data uri must not have a fragment part"));
          if (uri._query == null)
            return P.UriData__parse(uri._path, 0, uri);
          t1 = uri._text;
          if (t1 == null) {
            t1 = uri._initializeText$0();
            uri._text = t1;
          }
          return P.UriData__parse(t1, 5, uri);
        },
        UriData__parse: function(text, start, sourceUri) {
          var indices, t1, i, slashIndex, $char, t2, equalsIndex, lastSeparator;
          indices = [start - 1];
          t1 = J.getInterceptor$asx(text);
          i = start;
          slashIndex = -1;
          $char = null;
          while (true) {
            t2 = t1.get$length(text);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            c$0: {
              $char = t1.codeUnitAt$1(text, i);
              if ($char === 44 || $char === 59)
                break;
              if ($char === 47) {
                if (slashIndex < 0) {
                  slashIndex = i;
                  break c$0;
                }
                throw H.wrapException(new P.FormatException("Invalid MIME type", text, i));
              }
            }
            ++i;
          }
          if (slashIndex < 0 && i > start)
            throw H.wrapException(new P.FormatException("Invalid MIME type", text, i));
          for (; $char !== 44;) {
            indices.push(i);
            ++i;
            equalsIndex = -1;
            while (true) {
              t2 = t1.get$length(text);
              if (typeof t2 !== "number")
                return H.iae(t2);
              if (!(i < t2))
                break;
              $char = t1.codeUnitAt$1(text, i);
              if ($char === 61) {
                if (equalsIndex < 0)
                  equalsIndex = i;
              } else if ($char === 59 || $char === 44)
                break;
              ++i;
            }
            if (equalsIndex >= 0)
              indices.push(equalsIndex);
            else {
              lastSeparator = C.JSArray_methods.get$last(indices);
              if ($char !== 44 || i !== lastSeparator + 7 || !t1.startsWith$2(text, "base64", lastSeparator + 1))
                throw H.wrapException(new P.FormatException("Expecting '='", text, i));
              break;
            }
          }
          indices.push(i);
          return new P.UriData(text, indices, sourceUri);
        }
      }
    },
    _createTables_closure: {
      "^": "Closure:0;",
      call$1: function(_) {
        return new Uint8Array(H._checkLength(96));
      }
    },
    _createTables_build: {
      "^": "Closure:107;tables",
      call$2: function(state, defaultTransition) {
        var t1 = this.tables;
        if (state >= t1.length)
          return H.ioore(t1, state);
        t1 = t1[state];
        J.fillRange$3$ax(t1, 0, 96, defaultTransition);
        return t1;
      }
    },
    _createTables_setChars: {
      "^": "Closure:73;",
      call$3: function(target, chars, transition) {
        var t1, t2, i;
        for (t1 = chars.length, t2 = J.getInterceptor$ax(target), i = 0; i < t1; ++i)
          t2.$indexSet(target, C.JSString_methods.codeUnitAt$1(chars, i) ^ 96, transition);
      }
    },
    _createTables_setRange: {
      "^": "Closure:73;",
      call$3: function(target, range, transition) {
        var i, n, t1;
        for (i = C.JSString_methods.codeUnitAt$1(range, 0), n = C.JSString_methods.codeUnitAt$1(range, 1), t1 = J.getInterceptor$ax(target); i <= n; ++i)
          t1.$indexSet(target, (i ^ 96) >>> 0, transition);
      }
    },
    _SimpleUri: {
      "^": "Object;_uri,_schemeEnd,_hostStart,_portStart,_pathStart,_queryStart,_fragmentStart,_schemeCache,_hashCodeCache",
      get$hasAuthority: function() {
        return J.$gt$n(this._hostStart, 0);
      },
      get$hasPort: function() {
        return J.$gt$n(this._hostStart, 0) && J.$lt$n(J.$add$ns(this._portStart, 1), this._pathStart);
      },
      get$hasQuery: function() {
        return J.$lt$n(this._queryStart, this._fragmentStart);
      },
      get$hasFragment: function() {
        return J.$lt$n(this._fragmentStart, J.get$length$asx(this._uri));
      },
      get$hasAbsolutePath: function() {
        return J.startsWith$2$s(this._uri, "/", this._pathStart);
      },
      get$scheme: function() {
        var t1, t2, t3;
        t1 = this._schemeEnd;
        t2 = J.getInterceptor$n(t1);
        if (t2.$le(t1, 0))
          return "";
        t3 = this._schemeCache;
        if (t3 != null)
          return t3;
        if (t2.$eq(t1, 4) && J.startsWith$1$s(this._uri, "http")) {
          this._schemeCache = "http";
          t1 = "http";
        } else if (t2.$eq(t1, 5) && J.startsWith$1$s(this._uri, "https")) {
          this._schemeCache = "https";
          t1 = "https";
        } else if (t2.$eq(t1, 4) && J.startsWith$1$s(this._uri, "file")) {
          this._schemeCache = "file";
          t1 = "file";
        } else if (t2.$eq(t1, 7) && J.startsWith$1$s(this._uri, "package")) {
          this._schemeCache = "package";
          t1 = "package";
        } else {
          t1 = J.substring$2$s(this._uri, 0, t1);
          this._schemeCache = t1;
        }
        return t1;
      },
      get$userInfo: function() {
        var t1, t2, t3, t4;
        t1 = this._hostStart;
        t2 = this._schemeEnd;
        t3 = J.getInterceptor$ns(t2);
        t4 = J.getInterceptor$n(t1);
        return t4.$gt(t1, t3.$add(t2, 3)) ? J.substring$2$s(this._uri, t3.$add(t2, 3), t4.$sub(t1, 1)) : "";
      },
      get$host: function(_) {
        var t1 = this._hostStart;
        return J.$gt$n(t1, 0) ? J.substring$2$s(this._uri, t1, this._portStart) : "";
      },
      get$port: function(_) {
        var t1, t2;
        if (this.get$hasPort())
          return H.Primitives_parseInt(J.substring$2$s(this._uri, J.$add$ns(this._portStart, 1), this._pathStart), null, null);
        t1 = this._schemeEnd;
        t2 = J.getInterceptor(t1);
        if (t2.$eq(t1, 4) && J.startsWith$1$s(this._uri, "http"))
          return 80;
        if (t2.$eq(t1, 5) && J.startsWith$1$s(this._uri, "https"))
          return 443;
        return 0;
      },
      get$path: function(_) {
        return J.substring$2$s(this._uri, this._pathStart, this._queryStart);
      },
      get$query: function(_) {
        var t1, t2, t3;
        t1 = this._queryStart;
        t2 = this._fragmentStart;
        t3 = J.getInterceptor$n(t1);
        return t3.$lt(t1, t2) ? J.substring$2$s(this._uri, t3.$add(t1, 1), t2) : "";
      },
      get$fragment: function() {
        var t1, t2, t3, t4;
        t1 = this._fragmentStart;
        t2 = this._uri;
        t3 = J.getInterceptor$asx(t2);
        t4 = J.getInterceptor$n(t1);
        return t4.$lt(t1, t3.get$length(t2)) ? t3.substring$1(t2, t4.$add(t1, 1)) : "";
      },
      get$pathSegments: function() {
        var start, end, t1, t2, parts, i, t3;
        start = this._pathStart;
        end = this._queryStart;
        t1 = this._uri;
        t2 = J.getInterceptor$s(t1);
        if (t2.startsWith$2(t1, "/", start))
          start = J.$add$ns(start, 1);
        if (J.$eq$(start, end))
          return C.List_empty0;
        parts = [];
        for (i = start; t3 = J.getInterceptor$n(i), t3.$lt(i, end); i = t3.$add(i, 1))
          if (t2.codeUnitAt$1(t1, i) === 47) {
            parts.push(t2.substring$2(t1, start, i));
            start = t3.$add(i, 1);
          }
        parts.push(t2.substring$2(t1, start, end));
        return P.List_List$unmodifiable(parts, P.String);
      },
      _isPort$1: function(port) {
        var portDigitStart = J.$add$ns(this._portStart, 1);
        return J.$eq$(J.$add$ns(portDigitStart, port.length), this._pathStart) && J.startsWith$2$s(this._uri, port, portDigitStart);
      },
      removeFragment$0: function() {
        var t1, t2, t3;
        t1 = this._fragmentStart;
        t2 = this._uri;
        t3 = J.getInterceptor$asx(t2);
        if (!J.$lt$n(t1, t3.get$length(t2)))
          return this;
        return new P._SimpleUri(t3.substring$2(t2, 0, t1), this._schemeEnd, this._hostStart, this._portStart, this._pathStart, this._queryStart, t1, this._schemeCache, null);
      },
      resolve$1: function(reference) {
        return this.resolveUri$1(P.Uri_parse(reference, 0, null));
      },
      resolveUri$1: function(reference) {
        if (reference instanceof P._SimpleUri)
          return this._simpleMerge$2(this, reference);
        return this._toNonSimple$0().resolveUri$1(reference);
      },
      _simpleMerge$2: function(base, ref) {
        var t1, t2, t3, t4, t5, t6, isSimple, delta, refStart, baseStart, baseEnd, baseUri, baseStart0, backCount, insert;
        t1 = ref._schemeEnd;
        t2 = J.getInterceptor$n(t1);
        if (t2.$gt(t1, 0))
          return ref;
        t3 = ref._hostStart;
        t4 = J.getInterceptor$n(t3);
        if (t4.$gt(t3, 0)) {
          t5 = base._schemeEnd;
          t6 = J.getInterceptor$n(t5);
          if (!t6.$gt(t5, 0))
            return ref;
          if (t6.$eq(t5, 4) && J.startsWith$1$s(base._uri, "file"))
            isSimple = !J.$eq$(ref._pathStart, ref._queryStart);
          else if (t6.$eq(t5, 4) && J.startsWith$1$s(base._uri, "http"))
            isSimple = !ref._isPort$1("80");
          else
            isSimple = !(t6.$eq(t5, 5) && J.startsWith$1$s(base._uri, "https")) || !ref._isPort$1("443");
          if (isSimple) {
            delta = t6.$add(t5, 1);
            return new P._SimpleUri(J.substring$2$s(base._uri, 0, t6.$add(t5, 1)) + J.substring$1$s(ref._uri, t2.$add(t1, 1)), t5, t4.$add(t3, delta), J.$add$ns(ref._portStart, delta), J.$add$ns(ref._pathStart, delta), J.$add$ns(ref._queryStart, delta), J.$add$ns(ref._fragmentStart, delta), base._schemeCache, null);
          } else
            return this._toNonSimple$0().resolveUri$1(ref);
        }
        refStart = ref._pathStart;
        t1 = ref._queryStart;
        if (J.$eq$(refStart, t1)) {
          t2 = ref._fragmentStart;
          t3 = J.getInterceptor$n(t1);
          if (t3.$lt(t1, t2)) {
            t4 = base._queryStart;
            delta = J.$sub$n(t4, t1);
            return new P._SimpleUri(J.substring$2$s(base._uri, 0, t4) + J.substring$1$s(ref._uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t3.$add(t1, delta), J.$add$ns(t2, delta), base._schemeCache, null);
          }
          t1 = ref._uri;
          t3 = J.getInterceptor$asx(t1);
          t4 = J.getInterceptor$n(t2);
          if (t4.$lt(t2, t3.get$length(t1))) {
            t5 = base._fragmentStart;
            delta = J.$sub$n(t5, t2);
            return new P._SimpleUri(J.substring$2$s(base._uri, 0, t5) + t3.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t4.$add(t2, delta), base._schemeCache, null);
          }
          return base.removeFragment$0();
        }
        t2 = ref._uri;
        t3 = J.getInterceptor$s(t2);
        if (t3.startsWith$2(t2, "/", refStart)) {
          t4 = base._pathStart;
          delta = J.$sub$n(t4, refStart);
          return new P._SimpleUri(J.substring$2$s(base._uri, 0, t4) + t3.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, t4, J.$add$ns(t1, delta), J.$add$ns(ref._fragmentStart, delta), base._schemeCache, null);
        }
        baseStart = base._pathStart;
        baseEnd = base._queryStart;
        t4 = J.getInterceptor(baseStart);
        if (t4.$eq(baseStart, baseEnd) && J.$gt$n(base._hostStart, 0)) {
          for (; t3.startsWith$2(t2, "../", refStart);)
            refStart = J.$add$ns(refStart, 3);
          delta = J.$add$ns(t4.$sub(baseStart, refStart), 1);
          return new P._SimpleUri(J.substring$2$s(base._uri, 0, baseStart) + "/" + t3.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, J.$add$ns(t1, delta), J.$add$ns(ref._fragmentStart, delta), base._schemeCache, null);
        }
        baseUri = base._uri;
        for (t4 = J.getInterceptor$s(baseUri), baseStart0 = baseStart; t4.startsWith$2(baseUri, "../", baseStart0);)
          baseStart0 = J.$add$ns(baseStart0, 3);
        backCount = 0;
        while (true) {
          t5 = J.getInterceptor$ns(refStart);
          if (!(J.$le$n(t5.$add(refStart, 3), t1) && t3.startsWith$2(t2, "../", refStart)))
            break;
          refStart = t5.$add(refStart, 3);
          ++backCount;
        }
        for (insert = ""; t6 = J.getInterceptor$n(baseEnd), t6.$gt(baseEnd, baseStart0);) {
          baseEnd = t6.$sub(baseEnd, 1);
          if (t4.codeUnitAt$1(baseUri, baseEnd) === 47) {
            if (backCount === 0) {
              insert = "/";
              break;
            }
            --backCount;
            insert = "/";
          }
        }
        t6 = J.getInterceptor(baseEnd);
        if (t6.$eq(baseEnd, baseStart0) && !J.$gt$n(base._schemeEnd, 0) && !t4.startsWith$2(baseUri, "/", baseStart)) {
          refStart = t5.$sub(refStart, backCount * 3);
          insert = "";
        }
        delta = J.$add$ns(t6.$sub(baseEnd, refStart), insert.length);
        return new P._SimpleUri(t4.substring$2(baseUri, 0, baseEnd) + insert + t3.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, J.$add$ns(t1, delta), J.$add$ns(ref._fragmentStart, delta), base._schemeCache, null);
      },
      toFilePath$1$windows: function(windows) {
        var t1, t2, t3, t4;
        t1 = this._schemeEnd;
        t2 = J.getInterceptor$n(t1);
        if (t2.$ge(t1, 0)) {
          t3 = !(t2.$eq(t1, 4) && J.startsWith$1$s(this._uri, "file"));
          t1 = t3;
        } else
          t1 = false;
        if (t1)
          throw H.wrapException(new P.UnsupportedError("Cannot extract a file path from a " + H.S(this.get$scheme()) + " URI"));
        t1 = this._queryStart;
        t2 = this._uri;
        t3 = J.getInterceptor$asx(t2);
        t4 = J.getInterceptor$n(t1);
        if (t4.$lt(t1, t3.get$length(t2))) {
          if (t4.$lt(t1, this._fragmentStart))
            throw H.wrapException(new P.UnsupportedError("Cannot extract a file path from a URI with a query component"));
          throw H.wrapException(new P.UnsupportedError("Cannot extract a file path from a URI with a fragment component"));
        }
        if ((windows == null ? false : windows) === true)
          t1 = P._Uri__toWindowsFilePath(this);
        else {
          if (J.$lt$n(this._hostStart, this._portStart))
            H.throwExpression(new P.UnsupportedError("Cannot extract a non-Windows file path from a file URI with an authority"));
          t1 = t3.substring$2(t2, this._pathStart, t1);
        }
        return t1;
      },
      toFilePath$0: function() {
        return this.toFilePath$1$windows(null);
      },
      get$data: function(_) {
        return;
      },
      get$hashCode: function(_) {
        var t1 = this._hashCodeCache;
        if (t1 == null) {
          t1 = J.get$hashCode$(this._uri);
          this._hashCodeCache = t1;
        }
        return t1;
      },
      $eq: function(_, other) {
        var t1;
        if (other == null)
          return false;
        if (this === other)
          return true;
        t1 = J.getInterceptor(other);
        if (!!t1.$isUri)
          return J.$eq$(this._uri, t1.toString$0(other));
        return false;
      },
      _toNonSimple$0: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9;
        t1 = this.get$scheme();
        t2 = this.get$userInfo();
        t3 = this._hostStart;
        t4 = J.getInterceptor$n(t3);
        if (t4.$gt(t3, 0))
          t3 = t4.$gt(t3, 0) ? J.substring$2$s(this._uri, t3, this._portStart) : "";
        else
          t3 = null;
        t4 = this.get$hasPort() ? this.get$port(this) : null;
        t5 = this._uri;
        t6 = this._queryStart;
        t7 = J.getInterceptor$s(t5);
        t8 = t7.substring$2(t5, this._pathStart, t6);
        t9 = this._fragmentStart;
        t6 = J.$lt$n(t6, t9) ? this.get$query(this) : null;
        return new P._Uri(t1, t2, t3, t4, t8, t6, J.$lt$n(t9, t7.get$length(t5)) ? this.get$fragment() : null, null, null, null, null, null);
      },
      toString$0: function(_) {
        return this._uri;
      },
      $isUri: 1
    }
  }], ["dart.dom.html", "dart:html",, W, {
    "^": "",
    AnchorElement_AnchorElement: function(href) {
      var t1, e;
      t1 = document;
      e = t1.createElement("a");
      return e;
    },
    CssStyleDeclaration__camelCase: function(hyphenated) {
      return hyphenated.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, C.JS_CONST_s8I);
    },
    Element_Element$html: function(html, treeSanitizer, validator) {
      var t1, fragment;
      t1 = document.body;
      fragment = (t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator);
      fragment.toString;
      t1 = new H.WhereIterable(new W._ChildNodeListLazy(fragment), new W.closure1(), [W.Node]);
      return t1.get$single(t1);
    },
    Element__safeTagName: function(element) {
      var result, t1, t2, exception;
      result = "element tag unavailable";
      try {
        t1 = J.getInterceptor$x(element);
        t2 = t1.get$tagName(element);
        if (typeof t2 === "string")
          result = t1.get$tagName(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return result;
    },
    _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
      return document.createElement(tag);
    },
    HttpRequest_getString: function(url, onProgress, withCredentials) {
      return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
    },
    HttpRequest_request: [function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
      var t1, t2, completer, xhr;
      t1 = W.HttpRequest;
      t2 = new P._Future(0, $.Zone__current, null, [t1]);
      completer = new P._AsyncCompleter(t2, [t1]);
      xhr = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(xhr, method == null ? "GET" : method, url, true);
      t1 = [W.ProgressEvent];
      new W._EventStreamSubscription(0, xhr, "load", W._wrapZone(new W.HttpRequest_request_closure(completer, xhr)), false, t1)._tryResume$0();
      new W._EventStreamSubscription(0, xhr, "error", W._wrapZone(completer.get$completeError()), false, t1)._tryResume$0();
      if (sendData != null)
        xhr.send(sendData);
      else
        xhr.send();
      return t2;
    }, function(url) {
      return W.HttpRequest_request(url, null, null, null, null, null, null, null);
    }, function(url, method, sendData) {
      return W.HttpRequest_request(url, method, null, null, null, null, sendData, null);
    }, "call$8$method$mimeType$onProgress$requestHeaders$responseType$sendData$withCredentials", "call$1", "call$3$method$sendData", "html_HttpRequest_request$closure", 2, 15, 222, 2, 2, 2, 2, 2, 2, 2],
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    _convertNativeToDart_Window: function(win) {
      if (win == null)
        return;
      return W._DOMWindowCrossFrame__createSafe(win);
    },
    _convertNativeToDart_EventTarget: function(e) {
      var $window;
      if (e == null)
        return;
      if ("postMessage" in e) {
        $window = W._DOMWindowCrossFrame__createSafe(e);
        if (!!J.getInterceptor($window).$isEventTarget)
          return $window;
        return;
      } else
        return e;
    },
    _wrapZone: function(callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      if (callback == null)
        return;
      return t1.bindUnaryCallback$2$runGuarded(callback, true);
    },
    HtmlElement: {
      "^": "Element;",
      "%": "HTMLAppletElement|HTMLBRElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLModElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
    },
    AnchorElement: {
      "^": "HtmlElement;target=,type=,hostname=,href%,port=,protocol=,search=",
      toString$0: function(receiver) {
        return String(receiver);
      },
      hash$1: function($receiver, arg0) {
        return $receiver.hash.call$1(arg0);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLAnchorElement"
    },
    Animation: {
      "^": "EventTarget;",
      cancel$0: function(receiver) {
        return receiver.cancel();
      },
      pause$0: function(receiver) {
        return receiver.pause();
      },
      "%": "Animation"
    },
    ApplicationCacheErrorEvent: {
      "^": "Event;message=,url=",
      "%": "ApplicationCacheErrorEvent"
    },
    AreaElement: {
      "^": "HtmlElement;target=,hostname=,href%,port=,protocol=,search=",
      toString$0: function(receiver) {
        return String(receiver);
      },
      hash$1: function($receiver, arg0) {
        return $receiver.hash.call$1(arg0);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLAreaElement"
    },
    AudioTrack: {
      "^": "Interceptor;id=,kind=",
      "%": "AudioTrack"
    },
    AudioTrackList: {
      "^": "EventTarget;length=",
      get$onChange: function(receiver) {
        return new W._EventStream(receiver, "change", false, [W.Event]);
      },
      "%": "AudioTrackList"
    },
    BaseElement: {
      "^": "HtmlElement;href%,target=",
      "%": "HTMLBaseElement"
    },
    BatteryManager: {
      "^": "EventTarget;level=",
      "%": "BatteryManager"
    },
    Blob: {
      "^": "Interceptor;type=",
      close$0: function(receiver) {
        return receiver.close();
      },
      $isBlob: 1,
      "%": ";Blob"
    },
    BluetoothDevice: {
      "^": "Interceptor;name=",
      "%": "BluetoothDevice"
    },
    Body: {
      "^": "Interceptor;",
      json$0: [function(receiver) {
        return receiver.json();
      }, "call$0", "get$json", 0, 0, 5],
      text$0: [function(receiver) {
        return receiver.text();
      }, "call$0", "get$text", 0, 0, 5],
      "%": "Response;Body"
    },
    BodyElement: {
      "^": "HtmlElement;",
      $isBodyElement: 1,
      $isEventTarget: 1,
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLBodyElement"
    },
    ButtonElement: {
      "^": "HtmlElement;disabled},name=,type=,value=",
      "%": "HTMLButtonElement"
    },
    CanvasElement: {
      "^": "HtmlElement;height},width}",
      $isObject: 1,
      "%": "HTMLCanvasElement"
    },
    CanvasRenderingContext2D: {
      "^": "Interceptor;",
      save$0: function(receiver) {
        return receiver.save();
      },
      $isObject: 1,
      "%": "CanvasRenderingContext2D"
    },
    CharacterData: {
      "^": "Node;data=,length=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "CDATASection|Comment|Text;CharacterData"
    },
    Client: {
      "^": "Interceptor;id=,url=",
      "%": "Client|WindowClient"
    },
    CloseEvent: {
      "^": "Event;code=",
      "%": "CloseEvent"
    },
    CompositionEvent: {
      "^": "UIEvent;data=",
      "%": "CompositionEvent"
    },
    CompositorWorker: {
      "^": "EventTarget;",
      terminate$0: function(receiver) {
        return receiver.terminate();
      },
      $isEventTarget: 1,
      $isInterceptor: 1,
      $isObject: 1,
      "%": "CompositorWorker"
    },
    Credential: {
      "^": "Interceptor;id=,name=,type=",
      "%": "Credential|FederatedCredential|PasswordCredential"
    },
    CrossOriginConnectEvent: {
      "^": "Event;client=",
      "%": "CrossOriginConnectEvent"
    },
    Crypto: {
      "^": "Interceptor;subtle=",
      "%": "Crypto"
    },
    CryptoKey: {
      "^": "Interceptor;type=",
      "%": "CryptoKey"
    },
    CssFontFaceRule: {
      "^": "CssRule;style=",
      "%": "CSSFontFaceRule"
    },
    CssImportRule: {
      "^": "CssRule;href=",
      "%": "CSSImportRule"
    },
    CssKeyframeRule: {
      "^": "CssRule;style=",
      "%": "CSSKeyframeRule|MozCSSKeyframeRule|WebKitCSSKeyframeRule"
    },
    CssKeyframesRule: {
      "^": "CssRule;name=",
      "%": "CSSKeyframesRule|MozCSSKeyframesRule|WebKitCSSKeyframesRule"
    },
    CssPageRule: {
      "^": "CssRule;style=",
      "%": "CSSPageRule"
    },
    CssRule: {
      "^": "Interceptor;type=",
      $isObject: 1,
      "%": "CSSCharsetRule|CSSGroupingRule|CSSMediaRule|CSSSupportsRule;CSSRule"
    },
    CssStyleDeclaration: {
      "^": "Interceptor_CssStyleDeclarationBase;length=",
      getPropertyValue$1: function(receiver, propertyName) {
        var propValue = this._getPropertyValueHelper$1(receiver, propertyName);
        return propValue != null ? propValue : "";
      },
      _getPropertyValueHelper$1: function(receiver, propertyName) {
        if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
          return receiver.getPropertyValue(propertyName);
        else
          return receiver.getPropertyValue(P.Device_cssPrefix() + propertyName);
      },
      setProperty$3: function(receiver, propertyName, value, priority) {
        var t1 = this._browserPropertyName$1(receiver, propertyName);
        receiver.setProperty(t1, value, priority);
        return;
      },
      _browserPropertyName$1: function(receiver, propertyName) {
        var t1, $name;
        t1 = $.$get$CssStyleDeclaration__propertyCache();
        $name = t1[propertyName];
        if (typeof $name === "string")
          return $name;
        $name = W.CssStyleDeclaration__camelCase(propertyName) in receiver ? propertyName : P.Device_cssPrefix() + propertyName;
        t1[propertyName] = $name;
        return $name;
      },
      get$content: function(receiver) {
        return receiver.content;
      },
      set$display: function(receiver, value) {
        receiver.display = value;
      },
      set$height: function(receiver, value) {
        receiver.height = value;
      },
      set$marginLeft: function(receiver, value) {
        receiver.marginLeft = value;
      },
      get$outline: function(receiver) {
        return receiver.outline;
      },
      set$position: function(receiver, value) {
        receiver.position = value;
      },
      set$width: function(receiver, value) {
        receiver.width = value;
      },
      "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
    },
    Interceptor_CssStyleDeclarationBase: {
      "^": "Interceptor+CssStyleDeclarationBase;"
    },
    _CssStyleDeclarationSet: {
      "^": "Object_CssStyleDeclarationBase;_elementIterable,_elementCssStyleDeclarationSetIterable",
      getPropertyValue$1: function(_, propertyName) {
        var t1 = this._elementCssStyleDeclarationSetIterable;
        return J.getPropertyValue$1$x(t1.get$first(t1), propertyName);
      },
      setProperty$3: function(_, propertyName, value, priority) {
        this._elementCssStyleDeclarationSetIterable.forEach$1(0, new W._CssStyleDeclarationSet_setProperty_closure(propertyName, value, priority));
      },
      _setAll$2: function(propertyName, value) {
        var t1;
        for (t1 = this._elementIterable, t1 = new H.ListIterator(t1, t1.get$length(t1), 0, null, [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
          t1.__internal$_current.style[propertyName] = value;
      },
      set$display: function(_, value) {
        this._setAll$2("display", value);
      },
      set$height: function(_, value) {
        this._setAll$2("height", value);
      },
      set$marginLeft: function(_, value) {
        this._setAll$2("marginLeft", value);
      },
      set$position: function(_, value) {
        this._setAll$2("position", value);
      },
      set$width: function(_, value) {
        this._setAll$2("width", value);
      },
      _CssStyleDeclarationSet$1: function(_elementIterable) {
        this._elementCssStyleDeclarationSetIterable = new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._CssStyleDeclarationSet_closure(), [null, null]);
      },
      static: {
        _CssStyleDeclarationSet$: function(_elementIterable) {
          var t1 = new W._CssStyleDeclarationSet(_elementIterable, null);
          t1._CssStyleDeclarationSet$1(_elementIterable);
          return t1;
        }
      }
    },
    Object_CssStyleDeclarationBase: {
      "^": "Object+CssStyleDeclarationBase;"
    },
    _CssStyleDeclarationSet_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return J.get$style$x(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    _CssStyleDeclarationSet_setProperty_closure: {
      "^": "Closure:0;propertyName,value,priority",
      call$1: function(e) {
        return J.setProperty$3$x(e, this.propertyName, this.value, this.priority);
      }
    },
    CssStyleDeclarationBase: {
      "^": "Object;",
      set$alignSelf: function(receiver, value) {
        this.setProperty$3(receiver, "align-self", value, "");
      },
      get$content: function(receiver) {
        return this.getPropertyValue$1(receiver, "content");
      },
      set$display: function(receiver, value) {
        this.setProperty$3(receiver, "display", value, "");
      },
      set$height: function(receiver, value) {
        this.setProperty$3(receiver, "height", value, "");
      },
      get$highlight: function(receiver) {
        return this.getPropertyValue$1(receiver, "highlight");
      },
      set$marginLeft: function(receiver, value) {
        this.setProperty$3(receiver, "margin-left", value, "");
      },
      get$outline: function(receiver) {
        return this.getPropertyValue$1(receiver, "outline");
      },
      set$position: function(receiver, value) {
        this.setProperty$3(receiver, "position", value, "");
      },
      set$width: function(receiver, value) {
        this.setProperty$3(receiver, "width", value, "");
      }
    },
    CssStyleRule: {
      "^": "CssRule;style=",
      "%": "CSSStyleRule"
    },
    CssViewportRule: {
      "^": "CssRule;style=",
      "%": "CSSViewportRule"
    },
    CustomEvent: {
      "^": "Event;",
      get$detail: function(receiver) {
        var t1, t2;
        t1 = receiver._dartDetail;
        if (t1 != null)
          return t1;
        t1 = receiver.detail;
        t2 = new P._AcceptStructuredCloneDart2Js([], [], false);
        t2.mustCopy = true;
        return t2.walk$1(t1);
      },
      "%": "CustomEvent"
    },
    DataTransfer: {
      "^": "Interceptor;files=",
      "%": "DataTransfer"
    },
    DataTransferItem: {
      "^": "Interceptor;kind=,type=",
      $isDataTransferItem: 1,
      $isObject: 1,
      "%": "DataTransferItem"
    },
    DataTransferItemList: {
      "^": "Interceptor;length=",
      add$2: function(receiver, data_OR_file, type) {
        return receiver.add(data_OR_file, type);
      },
      add$1: function($receiver, data_OR_file) {
        return $receiver.add(data_OR_file);
      },
      remove$1: function(receiver, index) {
        return receiver.remove(index);
      },
      $index: function(receiver, index) {
        return receiver[index];
      },
      "%": "DataTransferItemList"
    },
    DeviceAcceleration: {
      "^": "Interceptor;x=,y=",
      "%": "DeviceAcceleration"
    },
    DeviceLightEvent: {
      "^": "Event;value=",
      "%": "DeviceLightEvent"
    },
    DirectoryEntry: {
      "^": "Entry;",
      getFile$1: function(receiver, path) {
        return this._getFile$1(receiver, path);
      },
      __getFile$4$errorCallback$options$successCallback: function(receiver, path, errorCallback, options, successCallback) {
        this.__getFile_1$4(receiver, path, P.convertDartToNative_Dictionary(options, null), successCallback, errorCallback);
        return;
      },
      __getFile_1$4: function(receiver, path, options, successCallback, errorCallback) {
        return receiver.getFile(path, options, H.convertDartClosureToJS(successCallback, 1), H.convertDartClosureToJS(errorCallback, 1));
      },
      _getFile$2$options: function(receiver, path, options) {
        var t1, t2, completer;
        t1 = W.Entry;
        t2 = new P._Future(0, $.Zone__current, null, [t1]);
        completer = new P._AsyncCompleter(t2, [t1]);
        this.__getFile$4$errorCallback$options$successCallback(receiver, path, new W.DirectoryEntry__getFile_closure(completer), options, new W.DirectoryEntry__getFile_closure0(completer));
        return t2;
      },
      _getFile$1: function($receiver, path) {
        return this._getFile$2$options($receiver, path, null);
      },
      "%": "DirectoryEntry"
    },
    DirectoryEntry__getFile_closure0: {
      "^": "Closure:0;completer",
      call$1: [function(value) {
        this.completer.complete$1(0, value);
      }, null, null, 2, 0, null, 7, "call"]
    },
    DirectoryEntry__getFile_closure: {
      "^": "Closure:0;completer",
      call$1: [function(error) {
        this.completer.completeError$1(error);
      }, null, null, 2, 0, null, 8, "call"]
    },
    DivElement: {
      "^": "HtmlElement;",
      "%": ";HTMLDivElement"
    },
    Document0: {
      "^": "Node;",
      querySelector$1: function(receiver, selectors) {
        return receiver.querySelector(selectors);
      },
      get$onChange: function(receiver) {
        return new W._EventStream(receiver, "change", false, [W.Event]);
      },
      get$onClick: function(receiver) {
        return new W._EventStream(receiver, "click", false, [W.MouseEvent]);
      },
      get$onDoubleClick: function(receiver) {
        return new W._EventStream(receiver, "dblclick", false, [W.Event]);
      },
      get$onKeyDown: function(receiver) {
        return new W._EventStream(receiver, "keydown", false, [W.KeyboardEvent]);
      },
      get$onMouseDown: function(receiver) {
        return new W._EventStream(receiver, "mousedown", false, [W.MouseEvent]);
      },
      querySelectorAll$1: function(receiver, selectors) {
        return new W._FrozenElementList(receiver.querySelectorAll(selectors), [null]);
      },
      hidden$1: function($receiver, arg0) {
        return $receiver.hidden.call$1(arg0);
      },
      "%": "XMLDocument;Document"
    },
    DocumentFragment: {
      "^": "Node;",
      get$children: function(receiver) {
        if (receiver._docChildren == null)
          receiver._docChildren = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
        return receiver._docChildren;
      },
      querySelectorAll$1: function(receiver, selectors) {
        return new W._FrozenElementList(receiver.querySelectorAll(selectors), [null]);
      },
      set$innerHtml: function(receiver, value) {
        this.setInnerHtml$1(receiver, value);
      },
      setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var t1;
        this._clearChildren$0(receiver);
        t1 = document.body;
        receiver.appendChild((t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator));
      },
      setInnerHtml$1: function($receiver, html) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
      },
      setInnerHtml$2$treeSanitizer: function($receiver, html, treeSanitizer) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
      },
      setInnerHtml$2$validator: function($receiver, html, validator) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, validator);
      },
      querySelector$1: function(receiver, selectors) {
        return receiver.querySelector(selectors);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": ";DocumentFragment"
    },
    DomError: {
      "^": "Interceptor;message=,name=",
      "%": ";DOMError"
    },
    DomException: {
      "^": "Interceptor;message=",
      get$name: function(receiver) {
        var errorName = receiver.name;
        if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
          return "SecurityError";
        if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
          return "SyntaxError";
        return errorName;
      },
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "DOMException"
    },
    DomIterator: {
      "^": "Interceptor;",
      next$1: [function(receiver, value) {
        return receiver.next(value);
      }, function($receiver) {
        return $receiver.next();
      }, "next$0", "call$1", "call$0", "get$next", 0, 2, 127, 2],
      "%": "Iterator"
    },
    DomPoint: {
      "^": "DomPointReadOnly;",
      get$x: function(receiver) {
        return receiver.x;
      },
      get$y: function(receiver) {
        return receiver.y;
      },
      "%": "DOMPoint"
    },
    DomPointReadOnly: {
      "^": "Interceptor;",
      get$x: function(receiver) {
        return receiver.x;
      },
      get$y: function(receiver) {
        return receiver.y;
      },
      "%": ";DOMPointReadOnly"
    },
    DomRectReadOnly: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
      },
      $eq: function(receiver, other) {
        var t1;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        return receiver.left === t1.get$left(other) && receiver.top === t1.get$top(other) && this.get$width(receiver) === t1.get$width(other) && this.get$height(receiver) === t1.get$height(other);
      },
      get$hashCode: function(receiver) {
        var t1, t2, t3, t4;
        t1 = receiver.left;
        t2 = receiver.top;
        t3 = this.get$width(receiver);
        t4 = this.get$height(receiver);
        return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1 & 0x1FFFFFFF), t2 & 0x1FFFFFFF), t3 & 0x1FFFFFFF), t4 & 0x1FFFFFFF));
      },
      get$topLeft: function(receiver) {
        return new P.Point(receiver.left, receiver.top, [null]);
      },
      get$bottom: function(receiver) {
        return receiver.bottom;
      },
      get$height: function(receiver) {
        return receiver.height;
      },
      get$left: function(receiver) {
        return receiver.left;
      },
      get$right: function(receiver) {
        return receiver.right;
      },
      get$top: function(receiver) {
        return receiver.top;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      get$x: function(receiver) {
        return receiver.x;
      },
      get$y: function(receiver) {
        return receiver.y;
      },
      $isRectangle: 1,
      $asRectangle: Isolate.functionThatReturnsNull,
      $isObject: 1,
      "%": ";DOMRectReadOnly"
    },
    DomSettableTokenList: {
      "^": "DomTokenList;value=",
      "%": "DOMSettableTokenList"
    },
    DomStringList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.item(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      "%": "DOMStringList"
    },
    Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [P.String];
      },
      $asIterable: function() {
        return [P.String];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin: {
      "^": "Interceptor_ListMixin+ImmutableListMixin;",
      $asList: function() {
        return [P.String];
      },
      $asIterable: function() {
        return [P.String];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    DomTokenList: {
      "^": "Interceptor;length=",
      add$1: function(receiver, tokens) {
        return receiver.add(tokens);
      },
      contains$1: function(receiver, token) {
        return receiver.contains(token);
      },
      remove$1: function(receiver, tokens) {
        return receiver.remove(tokens);
      },
      toggle$2: function(receiver, token, force) {
        return receiver.toggle(token, force);
      },
      "%": ";DOMTokenList"
    },
    _ChildrenElementList: {
      "^": "ListBase;_html$_element<,_childElements",
      contains$1: function(_, element) {
        return J.contains$1$asx(this._childElements, element);
      },
      get$isEmpty: function(_) {
        return this._html$_element.firstElementChild == null;
      },
      get$length: function(_) {
        return this._childElements.length;
      },
      $index: function(_, index) {
        var t1 = this._childElements;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $indexSet: function(_, index, value) {
        var t1 = this._childElements;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        this._html$_element.replaceChild(value, t1[index]);
      },
      set$length: function(_, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize element lists"));
      },
      add$1: function(_, value) {
        this._html$_element.appendChild(value);
        return value;
      },
      get$iterator: function(_) {
        var t1 = this.toList$0(this);
        return new J.ArrayIterator(t1, t1.length, 0, null, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      addAll$1: function(_, iterable) {
        var t1, t2;
        for (t1 = J.get$iterator$ax(iterable instanceof W._ChildNodeListLazy ? P.List_List$from(iterable, true, null) : iterable), t2 = this._html$_element; t1.moveNext$0();)
          t2.appendChild(t1.get$current());
      },
      sort$1: function(_, compare) {
        throw H.wrapException(new P.UnsupportedError("Cannot sort element lists"));
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      replaceRange$3: function(_, start, end, iterable) {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      fillRange$3: function(_, start, end, fillValue) {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      remove$1: function(_, object) {
        var t1;
        if (!!J.getInterceptor(object).$isElement) {
          t1 = this._html$_element;
          if (object.parentNode === t1) {
            t1.removeChild(object);
            return true;
          }
        }
        return false;
      },
      insert$2: function(_, index, element) {
        var t1, t2, t3;
        t1 = J.getInterceptor$n(index);
        if (t1.$lt(index, 0) || t1.$gt(index, this._childElements.length))
          throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this), null, null));
        t2 = this._childElements;
        t3 = this._html$_element;
        if (t1.$eq(index, t2.length))
          t3.appendChild(element);
        else {
          if (index >>> 0 !== index || index >= t2.length)
            return H.ioore(t2, index);
          t3.insertBefore(element, t2[index]);
        }
      },
      setAll$2: function(_, index, iterable) {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._html$_element);
      },
      removeAt$1: function(_, index) {
        var t1, result;
        t1 = this._childElements;
        if (index >= t1.length)
          return H.ioore(t1, index);
        result = t1[index];
        this._html$_element.removeChild(result);
        return result;
      },
      get$first: function(_) {
        var result = this._html$_element.firstElementChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      $asListBase: function() {
        return [W.Element];
      },
      $asObject_ListMixin: function() {
        return [W.Element];
      },
      $asList: function() {
        return [W.Element];
      },
      $asIterable: function() {
        return [W.Element];
      }
    },
    _FrozenElementList: {
      "^": "ListBase;_nodeList,$ti",
      get$length: function(_) {
        return this._nodeList.length;
      },
      $index: function(_, index) {
        var t1 = this._nodeList;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $indexSet: function(_, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify list"));
      },
      set$length: function(_, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify list"));
      },
      sort$1: function(_, compare) {
        throw H.wrapException(new P.UnsupportedError("Cannot sort list"));
      },
      get$first: function(_) {
        return C.NodeList_methods.get$first(this._nodeList);
      },
      get$classes: function(_) {
        return W._MultiElementCssClassSet__MultiElementCssClassSet(this);
      },
      get$style: function(_) {
        return W._CssStyleDeclarationSet$(this);
      },
      get$marginEdge: function(_) {
        return J.get$marginEdge$x(C.NodeList_methods.get$first(this._nodeList));
      },
      get$onChange: function(_) {
        return new W._ElementListEventStreamImpl(this, false, "change", [W.Event]);
      },
      get$onClick: function(_) {
        return new W._ElementListEventStreamImpl(this, false, "click", [W.MouseEvent]);
      },
      get$onDoubleClick: function(_) {
        return new W._ElementListEventStreamImpl(this, false, "dblclick", [W.Event]);
      },
      get$onKeyDown: function(_) {
        return new W._ElementListEventStreamImpl(this, false, "keydown", [W.KeyboardEvent]);
      },
      get$onMouseDown: function(_) {
        return new W._ElementListEventStreamImpl(this, false, "mousedown", [W.MouseEvent]);
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    Element: {
      "^": "Node;style=,tabIndex},title%,className%,id=,tagName=",
      get$attributes: function(receiver) {
        return new W._ElementAttributeMap(receiver);
      },
      get$children: function(receiver) {
        return new W._ChildrenElementList(receiver, receiver.children);
      },
      querySelectorAll$1: function(receiver, selectors) {
        return new W._FrozenElementList(receiver.querySelectorAll(selectors), [null]);
      },
      get$classes: function(receiver) {
        return new W._ElementCssClassSet(receiver);
      },
      getComputedStyle$1: function(receiver, pseudoElement) {
        return window.getComputedStyle(receiver, "");
      },
      getComputedStyle$0: function($receiver) {
        return this.getComputedStyle$1($receiver, null);
      },
      get$client: function(receiver) {
        return P.Rectangle$(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight, null);
      },
      get$offset: function(receiver) {
        return P.Rectangle$(C.JSNumber_methods.round$0(receiver.offsetLeft), C.JSNumber_methods.round$0(receiver.offsetTop), C.JSNumber_methods.round$0(receiver.offsetWidth), C.JSNumber_methods.round$0(receiver.offsetHeight), null);
      },
      toString$0: function(receiver) {
        return receiver.localName;
      },
      scrollIntoView$1: function(receiver, alignment) {
        var hasScrollIntoViewIfNeeded = !!receiver.scrollIntoViewIfNeeded;
        if (alignment === C.ScrollAlignment_TOP)
          receiver.scrollIntoView(true);
        else if (alignment === C.ScrollAlignment_BOTTOM)
          receiver.scrollIntoView(false);
        else if (hasScrollIntoViewIfNeeded)
          if (alignment === C.ScrollAlignment_CENTER)
            receiver.scrollIntoViewIfNeeded(true);
          else
            receiver.scrollIntoViewIfNeeded();
        else
          receiver.scrollIntoView();
      },
      scrollIntoView$0: function($receiver) {
        return this.scrollIntoView$1($receiver, null);
      },
      get$marginEdge: function(receiver) {
        return new W._MarginCssRect(receiver);
      },
      createFragment$3$treeSanitizer$validator: ["super$Element$createFragment", function(receiver, html, treeSanitizer, validator) {
        var t1, t2, base, contextElement, fragment;
        if (treeSanitizer == null) {
          if (validator == null) {
            t1 = $.Element__defaultValidator;
            if (t1 == null) {
              t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
              t2 = new W.NodeValidatorBuilder(t1);
              t1.push(W._Html5NodeValidator$(null));
              t1.push(W._TemplatingNodeValidator$());
              $.Element__defaultValidator = t2;
              validator = t2;
            } else
              validator = t1;
          }
          t1 = $.Element__defaultSanitizer;
          if (t1 == null) {
            t1 = new W._ValidatingTreeSanitizer(validator);
            $.Element__defaultSanitizer = t1;
            treeSanitizer = t1;
          } else {
            t1.validator = validator;
            treeSanitizer = t1;
          }
        } else if (validator != null)
          throw H.wrapException(P.ArgumentError$("validator can only be passed if treeSanitizer is null"));
        if ($.Element__parseDocument == null) {
          t1 = document;
          t2 = t1.implementation.createHTMLDocument("");
          $.Element__parseDocument = t2;
          $.Element__parseRange = t2.createRange();
          t2 = $.Element__parseDocument;
          t2.toString;
          base = t2.createElement("base");
          J.set$href$x(base, t1.baseURI);
          $.Element__parseDocument.head.appendChild(base);
        }
        t1 = $.Element__parseDocument;
        if (!!this.$isBodyElement)
          contextElement = t1.body;
        else {
          t2 = receiver.tagName;
          t1.toString;
          contextElement = t1.createElement(t2);
          $.Element__parseDocument.body.appendChild(contextElement);
        }
        if ("createContextualFragment" in window.Range.prototype && !C.JSArray_methods.contains$1(C.List_ego, receiver.tagName)) {
          $.Element__parseRange.selectNodeContents(contextElement);
          fragment = $.Element__parseRange.createContextualFragment(html);
        } else {
          contextElement.innerHTML = html;
          fragment = $.Element__parseDocument.createDocumentFragment();
          for (; t1 = contextElement.firstChild, t1 != null;)
            fragment.appendChild(t1);
        }
        t1 = $.Element__parseDocument.body;
        if (contextElement == null ? t1 != null : contextElement !== t1)
          J.remove$0$ax(contextElement);
        treeSanitizer.sanitizeTree$1(fragment);
        document.adoptNode(fragment);
        return fragment;
      }, function($receiver, html, treeSanitizer) {
        return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
      }, "createFragment$2$treeSanitizer", null, null, "get$createFragment", 2, 5, null, 2, 2],
      set$innerHtml: function(receiver, html) {
        this.setInnerHtml$1(receiver, html);
      },
      setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        receiver.textContent = null;
        receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
      },
      setInnerHtml$1: function($receiver, html) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
      },
      setInnerHtml$2$treeSanitizer: function($receiver, html, treeSanitizer) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
      },
      setInnerHtml$2$validator: function($receiver, html, validator) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, validator);
      },
      getAttribute$1: function(receiver, $name) {
        return receiver.getAttribute($name);
      },
      getBoundingClientRect$0: function(receiver) {
        return receiver.getBoundingClientRect();
      },
      setAttribute$2: function(receiver, $name, value) {
        return receiver.setAttribute($name, value);
      },
      querySelector$1: function(receiver, selectors) {
        return receiver.querySelector(selectors);
      },
      get$onChange: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "change", false, [W.Event]);
      },
      get$onClick: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "click", false, [W.MouseEvent]);
      },
      get$onDoubleClick: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "dblclick", false, [W.Event]);
      },
      get$onKeyDown: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "keydown", false, [W.KeyboardEvent]);
      },
      get$onMouseDown: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "mousedown", false, [W.MouseEvent]);
      },
      hidden$1: function($receiver, arg0) {
        return $receiver.hidden.call$1(arg0);
      },
      $isElement: 1,
      $isNode: 1,
      $isObject: 1,
      $isInterceptor: 1,
      $isEventTarget: 1,
      "%": ";Element",
      static: {
        "^": "Element_pauseEvent<"
      }
    },
    closure1: {
      "^": "Closure:0;",
      call$1: function(e) {
        return !!J.getInterceptor(e).$isElement;
      }
    },
    ScrollAlignment: {
      "^": "Object;_html$_value",
      toString$0: function(_) {
        return "ScrollAlignment." + this._html$_value;
      }
    },
    EmbedElement: {
      "^": "HtmlElement;height},name=,type=,width}",
      "%": "HTMLEmbedElement"
    },
    Entry: {
      "^": "Interceptor;name=",
      _getParent$2: function(receiver, successCallback, errorCallback) {
        return receiver.getParent(H.convertDartClosureToJS(successCallback, 1), H.convertDartClosureToJS(errorCallback, 1));
      },
      getParent$0: function(receiver) {
        var t1, t2, completer;
        t1 = W.Entry;
        t2 = new P._Future(0, $.Zone__current, null, [t1]);
        completer = new P._AsyncCompleter(t2, [t1]);
        this._getParent$2(receiver, new W.Entry_getParent_closure(completer), new W.Entry_getParent_closure0(completer));
        return t2;
      },
      _html$_remove$2: function(receiver, successCallback, errorCallback) {
        return receiver.remove(H.convertDartClosureToJS(successCallback, 0), H.convertDartClosureToJS(errorCallback, 1));
      },
      remove$0: function(receiver) {
        var t1, completer;
        t1 = new P._Future(0, $.Zone__current, null, [null]);
        completer = new P._AsyncCompleter(t1, [null]);
        this._html$_remove$2(receiver, new W.Entry_remove_closure(completer), new W.Entry_remove_closure0(completer));
        return t1;
      },
      isDirectory$0: function($receiver) {
        return $receiver.isDirectory.call$0();
      },
      isFile$0: function($receiver) {
        return $receiver.isFile.call$0();
      },
      $isEntry: 1,
      $isObject: 1,
      "%": ";Entry"
    },
    Entry_getParent_closure: {
      "^": "Closure:0;completer",
      call$1: [function(value) {
        this.completer.complete$1(0, value);
      }, null, null, 2, 0, null, 7, "call"]
    },
    Entry_getParent_closure0: {
      "^": "Closure:0;completer",
      call$1: [function(error) {
        this.completer.completeError$1(error);
      }, null, null, 2, 0, null, 8, "call"]
    },
    Entry_remove_closure: {
      "^": "Closure:1;completer",
      call$0: [function() {
        this.completer.complete$0(0);
      }, null, null, 0, 0, null, "call"]
    },
    Entry_remove_closure0: {
      "^": "Closure:0;completer",
      call$1: [function(error) {
        this.completer.completeError$1(error);
      }, null, null, 2, 0, null, 8, "call"]
    },
    ErrorEvent: {
      "^": "Event;error=,message=",
      "%": "ErrorEvent"
    },
    Event: {
      "^": "Interceptor;defaultPrevented=,path=,type=",
      get$target: function(receiver) {
        return W._convertNativeToDart_EventTarget(receiver.target);
      },
      preventDefault$0: function(receiver) {
        return receiver.preventDefault();
      },
      stopImmediatePropagation$0: function(receiver) {
        return receiver.stopImmediatePropagation();
      },
      stopPropagation$0: function(receiver) {
        return receiver.stopPropagation();
      },
      $isEvent: 1,
      $isObject: 1,
      "%": "AnimationEvent|AnimationPlayerEvent|AudioProcessingEvent|AutocompleteErrorEvent|BeforeInstallPromptEvent|BeforeUnloadEvent|ClipboardEvent|DefaultSessionStartEvent|DeviceMotionEvent|DeviceOrientationEvent|FontFaceSetLoadEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|MediaEncryptedEvent|MediaQueryListEvent|MediaStreamEvent|MediaStreamTrackEvent|OfflineAudioCompletionEvent|PageTransitionEvent|PopStateEvent|PromiseRejectionEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RTCPeerConnectionIceEvent|RelatedEvent|SecurityPolicyViolationEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitTransitionEvent;Event|InputEvent"
    },
    EventSource: {
      "^": "EventTarget;url=",
      close$0: function(receiver) {
        return receiver.close();
      },
      "%": "EventSource"
    },
    EventTarget: {
      "^": "Interceptor;",
      addEventListener$3: function(receiver, type, listener, useCapture) {
        if (listener != null)
          this._addEventListener$3(receiver, type, listener, false);
      },
      removeEventListener$3: function(receiver, type, listener, useCapture) {
        if (listener != null)
          this._removeEventListener$3(receiver, type, listener, false);
      },
      _addEventListener$3: function(receiver, type, listener, capture) {
        return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), false);
      },
      _removeEventListener$3: function(receiver, type, listener, capture) {
        return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), false);
      },
      $isEventTarget: 1,
      "%": "ApplicationCache|CrossOriginServiceWorkerClient|DOMApplicationCache|MIDIAccess|MediaSource|OfflineResourceList|Performance|Presentation|RTCDTMFSender|ServicePortCollection|ServiceWorkerContainer|StashedPortCollection|WorkerPerformance;EventTarget;EventTarget_ListMixin|EventTarget_ListMixin_ImmutableListMixin|EventTarget_ListMixin0|EventTarget_ListMixin_ImmutableListMixin0"
    },
    ExtendableEvent: {
      "^": "Event;",
      "%": "FetchEvent|NotificationEvent|PeriodicSyncEvent|ServicePortConnectEvent|SyncEvent;ExtendableEvent"
    },
    FieldSetElement: {
      "^": "HtmlElement;disabled},name=,type=",
      "%": "HTMLFieldSetElement"
    },
    File0: {
      "^": "Blob;name=,relativePath:webkitRelativePath=",
      $isFile0: 1,
      $isObject: 1,
      "%": "File"
    },
    FileEntry: {
      "^": "Entry;",
      _file$2: function(receiver, successCallback, errorCallback) {
        return receiver.file(H.convertDartClosureToJS(successCallback, 1), H.convertDartClosureToJS(errorCallback, 1));
      },
      file$0: [function(receiver) {
        var t1, t2, completer;
        t1 = W.File0;
        t2 = new P._Future(0, $.Zone__current, null, [t1]);
        completer = new P._AsyncCompleter(t2, [t1]);
        this._file$2(receiver, new W.FileEntry_file_closure(completer), new W.FileEntry_file_closure0(completer));
        return t2;
      }, "call$0", "get$file", 0, 0, 149],
      "%": "FileEntry"
    },
    FileEntry_file_closure: {
      "^": "Closure:0;completer",
      call$1: [function(value) {
        this.completer.complete$1(0, value);
      }, null, null, 2, 0, null, 7, "call"]
    },
    FileEntry_file_closure0: {
      "^": "Closure:0;completer",
      call$1: [function(error) {
        this.completer.completeError$1(error);
      }, null, null, 2, 0, null, 8, "call"]
    },
    FileError: {
      "^": "DomError;code=",
      "%": "FileError"
    },
    FileList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin0;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isFileList: 1,
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.File0];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.File0];
      },
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [W.File0];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.File0];
      },
      "%": "FileList"
    },
    Interceptor_ListMixin0: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.File0];
      },
      $asIterable: function() {
        return [W.File0];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin0: {
      "^": "Interceptor_ListMixin0+ImmutableListMixin;",
      $asList: function() {
        return [W.File0];
      },
      $asIterable: function() {
        return [W.File0];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    FileReader: {
      "^": "EventTarget;error=",
      get$result: function(receiver) {
        var res = receiver.result;
        if (!!J.getInterceptor(res).$isByteBuffer)
          return H.NativeUint8List_NativeUint8List$view(res, 0, null);
        return res;
      },
      "%": "FileReader"
    },
    FileStream: {
      "^": "Interceptor;type=",
      "%": "Stream"
    },
    FileSystem: {
      "^": "Interceptor;name=,root=",
      "%": "DOMFileSystem"
    },
    FileWriter: {
      "^": "EventTarget;error=,length=",
      "%": "FileWriter"
    },
    FontFace: {
      "^": "Interceptor;style=",
      $isFontFace: 1,
      $isObject: 1,
      "%": "FontFace"
    },
    FontFaceSet: {
      "^": "EventTarget;",
      add$1: function(receiver, fontFace) {
        return receiver.add(fontFace);
      },
      forEach$2: function(receiver, callback, thisArg) {
        return receiver.forEach(H.convertDartClosureToJS(callback, 3), thisArg);
      },
      forEach$1: function($receiver, callback) {
        callback = H.convertDartClosureToJS(callback, 3);
        return $receiver.forEach(callback);
      },
      "%": "FontFaceSet"
    },
    FormElement: {
      "^": "HtmlElement;length=,name=,target=",
      reset$0: function(receiver) {
        return receiver.reset();
      },
      "%": "HTMLFormElement"
    },
    Gamepad: {
      "^": "Interceptor;id=,index=,timestamp=",
      $isObject: 1,
      "%": "Gamepad"
    },
    GamepadButton: {
      "^": "Interceptor;value=",
      "%": "GamepadButton"
    },
    GeofencingEvent: {
      "^": "Event;id=",
      "%": "GeofencingEvent"
    },
    GeofencingRegion: {
      "^": "Interceptor;id=",
      "%": "CircularGeofencingRegion|GeofencingRegion"
    },
    Geoposition: {
      "^": "Interceptor;timestamp=",
      "%": "Geoposition"
    },
    History: {
      "^": "Interceptor;length=",
      $isObject: 1,
      "%": "History"
    },
    HtmlCollection: {
      "^": "Interceptor_ListMixin_ImmutableListMixin1;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
    },
    Interceptor_ListMixin1: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin1: {
      "^": "Interceptor_ListMixin1+ImmutableListMixin;",
      $asList: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    HtmlDocument: {
      "^": "Document0;",
      get$title: function(receiver) {
        return receiver.title;
      },
      set$title: function(receiver, value) {
        receiver.title = value;
      },
      "%": "HTMLDocument"
    },
    HttpRequest: {
      "^": "HttpRequestEventTarget;responseText=",
      open$5$async$password$user: function(receiver, method, url, async, password, user) {
        return receiver.open(method, url, true, user, password);
      },
      open$3$async: function($receiver, method, url, async) {
        return $receiver.open(method, url, async);
      },
      send$1: function(receiver, body_OR_data) {
        return receiver.send(body_OR_data);
      },
      $isHttpRequest: 1,
      $isObject: 1,
      "%": "XMLHttpRequest"
    },
    HttpRequest_getString_closure: {
      "^": "Closure:153;",
      call$1: [function(xhr) {
        return J.get$responseText$x(xhr);
      }, null, null, 2, 0, null, 93, "call"]
    },
    HttpRequest_request_closure: {
      "^": "Closure:0;completer,xhr",
      call$1: [function(e) {
        var t1, t2, accepted, unknownRedirect, t3;
        t1 = this.xhr;
        t2 = t1.status;
        if (typeof t2 !== "number")
          return t2.$ge();
        accepted = t2 >= 200 && t2 < 300;
        unknownRedirect = t2 > 307 && t2 < 400;
        t2 = accepted || t2 === 0 || t2 === 304 || unknownRedirect;
        t3 = this.completer;
        if (t2)
          t3.complete$1(0, t1);
        else
          t3.completeError$1(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    HttpRequestEventTarget: {
      "^": "EventTarget;",
      "%": "XMLHttpRequestUpload;XMLHttpRequestEventTarget"
    },
    IFrameElement: {
      "^": "HtmlElement;height},name=,width}",
      "%": "HTMLIFrameElement"
    },
    ImageData: {
      "^": "Interceptor;data=",
      $isImageData: 1,
      "%": "ImageData"
    },
    ImageElement: {
      "^": "HtmlElement;height},isMap=,width}",
      complete$1: function($receiver, arg0) {
        return $receiver.complete.call$1(arg0);
      },
      $isObject: 1,
      "%": "HTMLImageElement"
    },
    InputElement: {
      "^": "HtmlElement;checked%,disabled},files=,height},name=,type=,value=,directory:webkitdirectory=,width}",
      accept$1: function($receiver, arg0) {
        return $receiver.accept.call$1(arg0);
      },
      $isElement: 1,
      $isInterceptor: 1,
      $isObject: 1,
      $isEventTarget: 1,
      $isNode: 1,
      "%": "HTMLInputElement"
    },
    KeyboardEvent: {
      "^": "UIEvent;code=,ctrlKey=,key=,location=,metaKey=,shiftKey=",
      get$keyCode: function(receiver) {
        return receiver.keyCode;
      },
      $isKeyboardEvent: 1,
      $isEvent: 1,
      $isObject: 1,
      "%": "KeyboardEvent"
    },
    KeygenElement: {
      "^": "HtmlElement;disabled},name=,type=",
      "%": "HTMLKeygenElement"
    },
    LIElement: {
      "^": "HtmlElement;value=",
      "%": "HTMLLIElement"
    },
    LinkElement: {
      "^": "HtmlElement;disabled},href%,type=",
      "%": "HTMLLinkElement"
    },
    Location0: {
      "^": "Interceptor;href=,port=,search=",
      toString$0: function(receiver) {
        return String(receiver);
      },
      hash$1: function($receiver, arg0) {
        return $receiver.hash.call$1(arg0);
      },
      $isObject: 1,
      "%": "Location"
    },
    MapElement: {
      "^": "HtmlElement;name=",
      "%": "HTMLMapElement"
    },
    MediaController: {
      "^": "EventTarget;",
      pause$0: function(receiver) {
        return receiver.pause();
      },
      "%": "MediaController"
    },
    MediaDeviceInfo: {
      "^": "Interceptor;kind=",
      "%": "MediaDeviceInfo"
    },
    MediaElement: {
      "^": "HtmlElement;error=",
      pause$0: function(receiver) {
        return receiver.pause();
      },
      "%": "HTMLAudioElement;HTMLMediaElement"
    },
    MediaError: {
      "^": "Interceptor;code=",
      "%": "MediaError"
    },
    MediaKeyError: {
      "^": "Interceptor;code=",
      "%": "MediaKeyError"
    },
    MediaKeyEvent: {
      "^": "Event;message=",
      "%": "MediaKeyEvent"
    },
    MediaKeyMessageEvent: {
      "^": "Event;message=",
      "%": "MediaKeyMessageEvent"
    },
    MediaKeySession: {
      "^": "EventTarget;",
      close$0: function(receiver) {
        return receiver.close();
      },
      remove$0: function(receiver) {
        return receiver.remove();
      },
      "%": "MediaKeySession"
    },
    MediaList: {
      "^": "Interceptor;length=",
      "%": "MediaList"
    },
    MediaQueryList: {
      "^": "EventTarget;",
      get$onChange: function(receiver) {
        return new W._EventStream(receiver, "change", false, [W.Event]);
      },
      "%": "MediaQueryList"
    },
    MediaStream: {
      "^": "EventTarget;active=,id=",
      "%": "MediaStream"
    },
    MediaStreamTrack: {
      "^": "EventTarget;id=,kind=",
      "%": "MediaStreamTrack"
    },
    MenuElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLMenuElement"
    },
    MenuItemElement: {
      "^": "HtmlElement;checked%,disabled},type=",
      "%": "HTMLMenuItemElement"
    },
    MessageEvent0: {
      "^": "Event;",
      get$data: function(receiver) {
        var t1, t2;
        t1 = receiver.data;
        t2 = new P._AcceptStructuredCloneDart2Js([], [], false);
        t2.mustCopy = true;
        return t2.walk$1(t1);
      },
      "%": "MessageEvent"
    },
    MessagePort: {
      "^": "EventTarget;",
      close$0: function(receiver) {
        return receiver.close();
      },
      start$0: [function(receiver) {
        return receiver.start();
      }, "call$0", "get$start", 0, 0, 2],
      $isMessagePort: 1,
      $isObject: 1,
      "%": ";MessagePort"
    },
    MetaElement: {
      "^": "HtmlElement;content=,name=",
      "%": "HTMLMetaElement"
    },
    MeterElement: {
      "^": "HtmlElement;value=",
      "%": "HTMLMeterElement"
    },
    MidiConnectionEvent: {
      "^": "Event;port=",
      "%": "MIDIConnectionEvent"
    },
    MidiMessageEvent: {
      "^": "Event;data=",
      "%": "MIDIMessageEvent"
    },
    MidiOutput: {
      "^": "MidiPort;",
      send$2: function(receiver, data, timestamp) {
        return receiver.send(data, timestamp);
      },
      send$1: function($receiver, data) {
        return $receiver.send(data);
      },
      "%": "MIDIOutput"
    },
    MidiPort: {
      "^": "EventTarget;id=,name=,type=,version=",
      close$0: function(receiver) {
        return receiver.close();
      },
      "%": "MIDIInput;MIDIPort"
    },
    MimeType: {
      "^": "Interceptor;type=",
      $isObject: 1,
      "%": "MimeType"
    },
    MimeTypeArray: {
      "^": "Interceptor_ListMixin_ImmutableListMixin2;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.MimeType];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.MimeType];
      },
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [W.MimeType];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.MimeType];
      },
      "%": "MimeTypeArray"
    },
    Interceptor_ListMixin2: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.MimeType];
      },
      $asIterable: function() {
        return [W.MimeType];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin2: {
      "^": "Interceptor_ListMixin2+ImmutableListMixin;",
      $asList: function() {
        return [W.MimeType];
      },
      $asIterable: function() {
        return [W.MimeType];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    MouseEvent: {
      "^": "UIEvent;button=,ctrlKey=,metaKey=,shiftKey=",
      get$client: function(receiver) {
        return new P.Point(receiver.clientX, receiver.clientY, [null]);
      },
      get$offset: function(receiver) {
        var t1, target, point;
        if (!!receiver.offsetX)
          return new P.Point(receiver.offsetX, receiver.offsetY, [null]);
        else {
          t1 = receiver.target;
          if (!J.getInterceptor(W._convertNativeToDart_EventTarget(t1)).$isElement)
            throw H.wrapException(new P.UnsupportedError("offsetX is only supported on elements"));
          target = W._convertNativeToDart_EventTarget(t1);
          t1 = [null];
          point = new P.Point(receiver.clientX, receiver.clientY, t1).$sub(0, J.get$topLeft$x(J.getBoundingClientRect$0$x(target)));
          return new P.Point(J.toInt$0$n(point.x), J.toInt$0$n(point.y), t1);
        }
      },
      $isMouseEvent: 1,
      $isEvent: 1,
      $isObject: 1,
      "%": "DragEvent|MouseEvent|PointerEvent|WheelEvent"
    },
    MutationRecord: {
      "^": "Interceptor;target=,type=",
      "%": "MutationRecord"
    },
    Navigator: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "Navigator"
    },
    NavigatorUserMediaError: {
      "^": "Interceptor;message=,name=",
      "%": "NavigatorUserMediaError"
    },
    NetworkInformation: {
      "^": "EventTarget;type=",
      "%": "NetworkInformation"
    },
    _ChildNodeListLazy: {
      "^": "ListBase;_this",
      get$first: function(_) {
        var result = this._this.firstChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      get$single: function(_) {
        var t1, l;
        t1 = this._this;
        l = t1.childNodes.length;
        if (l === 0)
          throw H.wrapException(new P.StateError("No elements"));
        if (l > 1)
          throw H.wrapException(new P.StateError("More than one element"));
        return t1.firstChild;
      },
      add$1: function(_, value) {
        this._this.appendChild(value);
      },
      addAll$1: function(_, iterable) {
        var t1, t2, len, i;
        t1 = J.getInterceptor(iterable);
        if (!!t1.$is_ChildNodeListLazy) {
          t1 = iterable._this;
          t2 = this._this;
          if (t1 !== t2)
            for (len = t1.childNodes.length, i = 0; i < len; ++i)
              t2.appendChild(t1.firstChild);
          return;
        }
        for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
          t2.appendChild(t1.get$current());
      },
      insert$2: function(_, index, node) {
        var t1, t2;
        t1 = J.getInterceptor$n(index);
        if (t1.$lt(index, 0) || t1.$gt(index, this._this.childNodes.length))
          throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this), null, null));
        t2 = this._this;
        if (t1.$eq(index, t2.childNodes.length))
          t2.appendChild(node);
        else {
          t1 = t2.childNodes;
          if (index >>> 0 !== index || index >= t1.length)
            return H.ioore(t1, index);
          t2.insertBefore(node, t1[index]);
        }
      },
      insertAll$2: function(_, index, iterable) {
        var t1, t2, t3;
        t1 = this._this;
        t2 = t1.childNodes;
        t3 = t2.length;
        if (index === t3)
          this.addAll$1(0, iterable);
        else {
          if (index >= t3)
            return H.ioore(t2, index);
          J.insertAllBefore$2$x(t1, iterable, t2[index]);
        }
      },
      setAll$2: function(_, index, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot setAll on Node list"));
      },
      removeAt$1: function(_, index) {
        var t1, t2, result;
        t1 = this._this;
        t2 = t1.childNodes;
        if (index >= t2.length)
          return H.ioore(t2, index);
        result = t2[index];
        t1.removeChild(result);
        return result;
      },
      remove$1: function(_, object) {
        var t1;
        if (!J.getInterceptor(object).$isNode)
          return false;
        t1 = this._this;
        if (t1 !== object.parentNode)
          return false;
        t1.removeChild(object);
        return true;
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._this);
      },
      $indexSet: function(_, index, value) {
        var t1, t2;
        t1 = this._this;
        t2 = t1.childNodes;
        if (index >>> 0 !== index || index >= t2.length)
          return H.ioore(t2, index);
        t1.replaceChild(value, t2[index]);
      },
      get$iterator: function(_) {
        var t1 = this._this.childNodes;
        return new W.FixedSizeListIterator(t1, t1.length, -1, null, [H.getRuntimeTypeArgument(t1, "ImmutableListMixin", 0)]);
      },
      sort$1: function(_, compare) {
        throw H.wrapException(new P.UnsupportedError("Cannot sort Node list"));
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on Node list"));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      fillRange$3: function(_, start, end, fill) {
        throw H.wrapException(new P.UnsupportedError("Cannot fillRange on Node list"));
      },
      get$length: function(_) {
        return this._this.childNodes.length;
      },
      set$length: function(_, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot set length on immutable List."));
      },
      $index: function(_, index) {
        var t1 = this._this.childNodes;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $asListBase: function() {
        return [W.Node];
      },
      $asObject_ListMixin: function() {
        return [W.Node];
      },
      $asList: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      }
    },
    Node: {
      "^": "EventTarget;parent:parentElement=,parentNode=,previousNode:previousSibling=,text:textContent%",
      get$nodes: function(receiver) {
        return new W._ChildNodeListLazy(receiver);
      },
      remove$0: function(receiver) {
        var t1 = receiver.parentNode;
        if (t1 != null)
          t1.removeChild(receiver);
      },
      replaceWith$1: function(receiver, otherNode) {
        var $parent, exception;
        try {
          $parent = receiver.parentNode;
          J._replaceChild$2$x($parent, otherNode, receiver);
        } catch (exception) {
          H.unwrapException(exception);
        }
        return receiver;
      },
      insertAllBefore$2: function(receiver, newNodes, refChild) {
        var t1, _i;
        for (t1 = newNodes.length, _i = 0; _i < newNodes.length; newNodes.length === t1 || (0, H.throwConcurrentModificationError)(newNodes), ++_i)
          receiver.insertBefore(newNodes[_i], refChild);
      },
      _clearChildren$0: function(receiver) {
        var t1;
        for (; t1 = receiver.firstChild, t1 != null;)
          receiver.removeChild(t1);
      },
      toString$0: function(receiver) {
        var value = receiver.nodeValue;
        return value == null ? this.super$Interceptor$toString(receiver) : value;
      },
      append$1: function(receiver, node) {
        return receiver.appendChild(node);
      },
      contains$1: function(receiver, other) {
        return receiver.contains(other);
      },
      insertBefore$2: function(receiver, node, child) {
        return receiver.insertBefore(node, child);
      },
      _replaceChild$2: function(receiver, node, child) {
        return receiver.replaceChild(node, child);
      },
      $isNode: 1,
      $isObject: 1,
      "%": ";Node"
    },
    NodeIterator: {
      "^": "Interceptor;root=",
      previousNode$0: [function(receiver) {
        return receiver.previousNode();
      }, "call$0", "get$previousNode", 0, 0, 26],
      "%": "NodeIterator"
    },
    NodeList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin3;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      "%": "NodeList|RadioNodeList"
    },
    Interceptor_ListMixin3: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin3: {
      "^": "Interceptor_ListMixin3+ImmutableListMixin;",
      $asList: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Notification0: {
      "^": "EventTarget;data=,title=",
      close$0: function(receiver) {
        return receiver.close();
      },
      get$onClick: function(receiver) {
        return new W._EventStream(receiver, "click", false, [W.Event]);
      },
      "%": "Notification"
    },
    OListElement: {
      "^": "HtmlElement;start=,type=",
      start$0: function($receiver) {
        return $receiver.start.call$0();
      },
      "%": "HTMLOListElement"
    },
    ObjectElement: {
      "^": "HtmlElement;data=,height},name=,type=,width}",
      "%": "HTMLObjectElement"
    },
    OptGroupElement: {
      "^": "HtmlElement;disabled}",
      "%": "HTMLOptGroupElement"
    },
    OptionElement: {
      "^": "HtmlElement;disabled},index=,value=",
      "%": "HTMLOptionElement"
    },
    OutputElement: {
      "^": "HtmlElement;name=,type=,value=",
      "%": "HTMLOutputElement"
    },
    ParamElement: {
      "^": "HtmlElement;name=,value=",
      "%": "HTMLParamElement"
    },
    Path2D: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "Path2D"
    },
    PerformanceEntry: {
      "^": "Interceptor;name=",
      "%": "PerformanceCompositeTiming|PerformanceEntry|PerformanceMark|PerformanceMeasure|PerformanceRenderTiming|PerformanceResourceTiming"
    },
    PerformanceNavigation: {
      "^": "Interceptor;type=",
      "%": "PerformanceNavigation"
    },
    PermissionStatus: {
      "^": "EventTarget;",
      get$onChange: function(receiver) {
        return new W._EventStream(receiver, "change", false, [W.Event]);
      },
      "%": "PermissionStatus"
    },
    Plugin: {
      "^": "Interceptor;length=,name=",
      $isObject: 1,
      "%": "Plugin"
    },
    PluginArray: {
      "^": "Interceptor_ListMixin_ImmutableListMixin4;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Plugin];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Plugin];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Plugin];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Plugin];
      },
      "%": "PluginArray"
    },
    Interceptor_ListMixin4: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.Plugin];
      },
      $asIterable: function() {
        return [W.Plugin];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin4: {
      "^": "Interceptor_ListMixin4+ImmutableListMixin;",
      $asList: function() {
        return [W.Plugin];
      },
      $asIterable: function() {
        return [W.Plugin];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    PluginPlaceholderElement: {
      "^": "DivElement;message=",
      "%": "PluginPlaceholderElement"
    },
    PositionError: {
      "^": "Interceptor;code=,message=",
      "%": "PositionError"
    },
    PresentationAvailability: {
      "^": "EventTarget;value=",
      get$onChange: function(receiver) {
        return new W._EventStream(receiver, "change", false, [W.Event]);
      },
      "%": "PresentationAvailability"
    },
    PresentationSession: {
      "^": "EventTarget;id=",
      close$0: function(receiver) {
        return receiver.close();
      },
      send$1: function(receiver, data_OR_message) {
        return receiver.send(data_OR_message);
      },
      "%": "PresentationSession"
    },
    ProcessingInstruction: {
      "^": "CharacterData;target=",
      "%": "ProcessingInstruction"
    },
    ProgressElement0: {
      "^": "HtmlElement;value=",
      "%": "HTMLProgressElement"
    },
    ProgressEvent: {
      "^": "Event;",
      $isProgressEvent: 1,
      $isEvent: 1,
      $isObject: 1,
      "%": "ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent"
    },
    PushEvent: {
      "^": "ExtendableEvent;data=",
      "%": "PushEvent"
    },
    PushMessageData: {
      "^": "Interceptor;",
      json$0: [function(receiver) {
        return receiver.json();
      }, "call$0", "get$json", 0, 0, 162],
      text$0: [function(receiver) {
        return receiver.text();
      }, "call$0", "get$text", 0, 0, 55],
      "%": "PushMessageData"
    },
    Range0: {
      "^": "Interceptor;",
      getBoundingClientRect$0: function(receiver) {
        return receiver.getBoundingClientRect();
      },
      "%": "Range"
    },
    ReadableByteStream: {
      "^": "Interceptor;",
      cancel$1: function(receiver, reason) {
        return receiver.cancel(reason);
      },
      cancel$0: function($receiver) {
        return $receiver.cancel();
      },
      "%": "ReadableByteStream"
    },
    ReadableByteStreamReader: {
      "^": "Interceptor;",
      cancel$1: function(receiver, reason) {
        return receiver.cancel(reason);
      },
      cancel$0: function($receiver) {
        return $receiver.cancel();
      },
      "%": "ReadableByteStreamReader"
    },
    ReadableStream: {
      "^": "Interceptor;",
      cancel$1: function(receiver, reason) {
        return receiver.cancel(reason);
      },
      cancel$0: function($receiver) {
        return $receiver.cancel();
      },
      "%": "ReadableStream"
    },
    ReadableStreamReader: {
      "^": "Interceptor;",
      cancel$1: function(receiver, reason) {
        return receiver.cancel(reason);
      },
      cancel$0: function($receiver) {
        return $receiver.cancel();
      },
      "%": "ReadableStreamReader"
    },
    RtcDataChannel: {
      "^": "EventTarget;id=",
      close$0: function(receiver) {
        return receiver.close();
      },
      send$1: function(receiver, data) {
        return receiver.send(data);
      },
      "%": "DataChannel|RTCDataChannel"
    },
    RtcPeerConnection: {
      "^": "EventTarget;",
      close$0: function(receiver) {
        return receiver.close();
      },
      "%": "RTCPeerConnection|mozRTCPeerConnection|webkitRTCPeerConnection"
    },
    RtcSessionDescription: {
      "^": "Interceptor;type=",
      "%": "RTCSessionDescription|mozRTCSessionDescription"
    },
    RtcStatsReport: {
      "^": "Interceptor;id=,type=",
      get$timestamp: function(receiver) {
        return P.convertNativeToDart_DateTime(receiver.timestamp);
      },
      $isRtcStatsReport: 1,
      $isObject: 1,
      "%": "RTCStatsReport"
    },
    RtcStatsResponse: {
      "^": "Interceptor;",
      result$0: [function(receiver) {
        return receiver.result();
      }, "call$0", "get$result", 0, 0, 174],
      "%": "RTCStatsResponse"
    },
    ScreenOrientation: {
      "^": "EventTarget;type=",
      get$onChange: function(receiver) {
        return new W._EventStream(receiver, "change", false, [W.Event]);
      },
      "%": "ScreenOrientation"
    },
    ScriptElement0: {
      "^": "HtmlElement;type=",
      "%": "HTMLScriptElement"
    },
    SelectElement: {
      "^": "HtmlElement;disabled},length=,name=,type=,value=",
      $isSelectElement: 1,
      "%": "HTMLSelectElement"
    },
    Selection: {
      "^": "Interceptor;type=",
      "%": "Selection"
    },
    ServicePort: {
      "^": "Interceptor;data=,name=",
      close$0: function(receiver) {
        return receiver.close();
      },
      "%": "ServicePort"
    },
    ServiceWorkerMessageEvent: {
      "^": "Event;",
      get$data: function(receiver) {
        var t1, t2;
        t1 = receiver.data;
        t2 = new P._AcceptStructuredCloneDart2Js([], [], false);
        t2.mustCopy = true;
        return t2.walk$1(t1);
      },
      "%": "ServiceWorkerMessageEvent"
    },
    ServiceWorkerRegistration: {
      "^": "EventTarget;active=",
      "%": "ServiceWorkerRegistration"
    },
    ShadowRoot: {
      "^": "DocumentFragment;innerHtml:innerHTML}",
      "%": "ShadowRoot"
    },
    SharedWorker: {
      "^": "EventTarget;port=",
      $isEventTarget: 1,
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SharedWorker"
    },
    SharedWorkerGlobalScope: {
      "^": "WorkerGlobalScope;name=",
      "%": "SharedWorkerGlobalScope"
    },
    SourceBuffer: {
      "^": "EventTarget;",
      $isObject: 1,
      "%": "SourceBuffer"
    },
    SourceBufferList: {
      "^": "EventTarget_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.SourceBuffer];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SourceBuffer];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.SourceBuffer];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.SourceBuffer];
      },
      "%": "SourceBufferList"
    },
    EventTarget_ListMixin: {
      "^": "EventTarget+ListMixin;",
      $asList: function() {
        return [W.SourceBuffer];
      },
      $asIterable: function() {
        return [W.SourceBuffer];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    EventTarget_ListMixin_ImmutableListMixin: {
      "^": "EventTarget_ListMixin+ImmutableListMixin;",
      $asList: function() {
        return [W.SourceBuffer];
      },
      $asIterable: function() {
        return [W.SourceBuffer];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    SourceElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLSourceElement"
    },
    SourceInfo: {
      "^": "Interceptor;id=,kind=",
      "%": "SourceInfo"
    },
    SpeechGrammar: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "SpeechGrammar"
    },
    SpeechGrammarList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin5;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechGrammar];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechGrammar];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.SpeechGrammar];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.SpeechGrammar];
      },
      "%": "SpeechGrammarList"
    },
    Interceptor_ListMixin5: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.SpeechGrammar];
      },
      $asIterable: function() {
        return [W.SpeechGrammar];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin5: {
      "^": "Interceptor_ListMixin5+ImmutableListMixin;",
      $asList: function() {
        return [W.SpeechGrammar];
      },
      $asIterable: function() {
        return [W.SpeechGrammar];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    SpeechRecognition: {
      "^": "EventTarget;",
      start$0: [function(receiver) {
        return receiver.start();
      }, "call$0", "get$start", 0, 0, 2],
      "%": "SpeechRecognition"
    },
    SpeechRecognitionError: {
      "^": "Event;error=,message=",
      "%": "SpeechRecognitionError"
    },
    SpeechRecognitionEvent: {
      "^": "Event;results=",
      "%": "SpeechRecognitionEvent"
    },
    SpeechRecognitionResult: {
      "^": "Interceptor;length=",
      $isObject: 1,
      "%": "SpeechRecognitionResult"
    },
    SpeechSynthesis: {
      "^": "EventTarget;",
      cancel$0: function(receiver) {
        return receiver.cancel();
      },
      pause$0: function(receiver) {
        return receiver.pause();
      },
      resume$0: function(receiver) {
        return receiver.resume();
      },
      "%": "SpeechSynthesis"
    },
    SpeechSynthesisEvent: {
      "^": "Event;name=",
      "%": "SpeechSynthesisEvent"
    },
    SpeechSynthesisUtterance: {
      "^": "EventTarget;text%",
      "%": "SpeechSynthesisUtterance",
      static: {
        "^": "SpeechSynthesisUtterance_pauseEvent<"
      }
    },
    SpeechSynthesisVoice: {
      "^": "Interceptor;name=",
      "%": "SpeechSynthesisVoice"
    },
    StashedMessagePort: {
      "^": "MessagePort;name=",
      $isStashedMessagePort: 1,
      $isMessagePort: 1,
      $isObject: 1,
      "%": "StashedMessagePort"
    },
    Storage: {
      "^": "Interceptor;",
      addAll$1: function(receiver, other) {
        other.forEach$1(0, new W.Storage_addAll_closure(receiver));
      },
      containsKey$1: function(receiver, key) {
        return receiver.getItem(key) != null;
      },
      $index: function(receiver, key) {
        return receiver.getItem(key);
      },
      $indexSet: function(receiver, key, value) {
        receiver.setItem(key, value);
      },
      remove$1: function(receiver, key) {
        var value = receiver.getItem(key);
        receiver.removeItem(key);
        return value;
      },
      forEach$1: function(receiver, f) {
        var i, key;
        for (i = 0; true; ++i) {
          key = receiver.key(i);
          if (key == null)
            return;
          f.call$2(key, receiver.getItem(key));
        }
      },
      get$keys: function(receiver) {
        var keys = H.setRuntimeTypeInfo([], [P.String]);
        this.forEach$1(receiver, new W.Storage_keys_closure(keys));
        return keys;
      },
      get$values: function(receiver) {
        var values = H.setRuntimeTypeInfo([], [P.String]);
        this.forEach$1(receiver, new W.Storage_values_closure(values));
        return values;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      get$isEmpty: function(receiver) {
        return receiver.key(0) == null;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.key(0) != null;
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, P.String];
      },
      $isObject: 1,
      "%": "Storage"
    },
    Storage_addAll_closure: {
      "^": "Closure:4;$this",
      call$2: function(k, v) {
        this.$this.setItem(k, v);
      }
    },
    Storage_keys_closure: {
      "^": "Closure:4;keys",
      call$2: function(k, v) {
        return this.keys.push(k);
      }
    },
    Storage_values_closure: {
      "^": "Closure:4;values",
      call$2: function(k, v) {
        return this.values.push(v);
      }
    },
    StorageEvent: {
      "^": "Event;key=,url=",
      "%": "StorageEvent"
    },
    StyleElement: {
      "^": "HtmlElement;disabled},type=",
      "%": "HTMLStyleElement"
    },
    StyleMedia: {
      "^": "Interceptor;type=",
      "%": "StyleMedia"
    },
    StyleSheet: {
      "^": "Interceptor;href=,title=,type=",
      $isObject: 1,
      "%": "CSSStyleSheet|StyleSheet"
    },
    TableColElement: {
      "^": "HtmlElement;span=",
      "%": "HTMLTableColElement"
    },
    TableElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var table, fragment;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
        fragment = document.createDocumentFragment();
        fragment.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, J.get$nodes$x(table));
        return fragment;
      },
      "%": "HTMLTableElement"
    },
    TableRowElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var t1, fragment, section, row;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        t1 = document;
        fragment = t1.createDocumentFragment();
        t1 = J.createFragment$3$treeSanitizer$validator$x(t1.createElement("table"), html, treeSanitizer, validator);
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        section = t1.get$single(t1);
        section.toString;
        t1 = new W._ChildNodeListLazy(section);
        row = t1.get$single(t1);
        fragment.toString;
        row.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
        return fragment;
      },
      "%": "HTMLTableRowElement"
    },
    TableSectionElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var t1, fragment, section;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        t1 = document;
        fragment = t1.createDocumentFragment();
        t1 = J.createFragment$3$treeSanitizer$validator$x(t1.createElement("table"), html, treeSanitizer, validator);
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        section = t1.get$single(t1);
        fragment.toString;
        section.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
        return fragment;
      },
      "%": "HTMLTableSectionElement"
    },
    TemplateElement: {
      "^": "HtmlElement;content=",
      setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var fragment;
        receiver.textContent = null;
        fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
        receiver.content.appendChild(fragment);
      },
      setInnerHtml$1: function($receiver, html) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
      },
      setInnerHtml$2$treeSanitizer: function($receiver, html, treeSanitizer) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
      },
      setInnerHtml$2$validator: function($receiver, html, validator) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, validator);
      },
      $isTemplateElement: 1,
      "%": "HTMLTemplateElement"
    },
    TextAreaElement: {
      "^": "HtmlElement;disabled},name=,type=,value=",
      "%": "HTMLTextAreaElement"
    },
    TextEvent: {
      "^": "UIEvent;data=",
      "%": "TextEvent"
    },
    TextTrack: {
      "^": "EventTarget;id=,kind=,regions=",
      $isObject: 1,
      "%": "TextTrack"
    },
    TextTrackCue: {
      "^": "EventTarget;id=",
      $isObject: 1,
      "%": ";TextTrackCue"
    },
    TextTrackCueList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin6;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.TextTrackCue];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.TextTrackCue];
      },
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [W.TextTrackCue];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrackCue];
      },
      "%": "TextTrackCueList"
    },
    Interceptor_ListMixin6: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.TextTrackCue];
      },
      $asIterable: function() {
        return [W.TextTrackCue];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin6: {
      "^": "Interceptor_ListMixin6+ImmutableListMixin;",
      $asList: function() {
        return [W.TextTrackCue];
      },
      $asIterable: function() {
        return [W.TextTrackCue];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    TextTrackList: {
      "^": "EventTarget_ListMixin_ImmutableListMixin0;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      get$onChange: function(receiver) {
        return new W._EventStream(receiver, "change", false, [W.Event]);
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.TextTrack];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.TextTrack];
      },
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [W.TextTrack];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrack];
      },
      "%": "TextTrackList"
    },
    EventTarget_ListMixin0: {
      "^": "EventTarget+ListMixin;",
      $asList: function() {
        return [W.TextTrack];
      },
      $asIterable: function() {
        return [W.TextTrack];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    EventTarget_ListMixin_ImmutableListMixin0: {
      "^": "EventTarget_ListMixin0+ImmutableListMixin;",
      $asList: function() {
        return [W.TextTrack];
      },
      $asIterable: function() {
        return [W.TextTrack];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    TimeRanges: {
      "^": "Interceptor;length=",
      end$1: [function(receiver, index) {
        return receiver.end(index);
      }, "call$1", "get$end", 2, 0, 54, 61],
      start$1: [function(receiver, index) {
        return receiver.start(index);
      }, "call$1", "get$start", 2, 0, 54, 61],
      "%": "TimeRanges"
    },
    Touch: {
      "^": "Interceptor;",
      get$target: function(receiver) {
        return W._convertNativeToDart_EventTarget(receiver.target);
      },
      get$client: function(receiver) {
        return new P.Point(C.JSNumber_methods.round$0(receiver.clientX), C.JSNumber_methods.round$0(receiver.clientY), [null]);
      },
      $isObject: 1,
      "%": "Touch"
    },
    TouchEvent: {
      "^": "UIEvent;ctrlKey=,metaKey=,shiftKey=",
      "%": "TouchEvent"
    },
    TouchList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin7;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Touch];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Touch];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Touch];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Touch];
      },
      "%": "TouchList"
    },
    Interceptor_ListMixin7: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.Touch];
      },
      $asIterable: function() {
        return [W.Touch];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin7: {
      "^": "Interceptor_ListMixin7+ImmutableListMixin;",
      $asList: function() {
        return [W.Touch];
      },
      $asIterable: function() {
        return [W.Touch];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    TrackDefault: {
      "^": "Interceptor;kinds=,type=",
      "%": "TrackDefault"
    },
    TrackDefaultList: {
      "^": "Interceptor;length=",
      "%": "TrackDefaultList"
    },
    TrackElement: {
      "^": "HtmlElement;kind=",
      "%": "HTMLTrackElement"
    },
    TreeWalker: {
      "^": "Interceptor;root=",
      parentNode$0: [function(receiver) {
        return receiver.parentNode();
      }, "call$0", "get$parentNode", 0, 0, 26],
      previousNode$0: [function(receiver) {
        return receiver.previousNode();
      }, "call$0", "get$previousNode", 0, 0, 26],
      "%": "TreeWalker"
    },
    UIEvent: {
      "^": "Event;detail=",
      get$view: function(receiver) {
        return W._convertNativeToDart_Window(receiver.view);
      },
      "%": "FocusEvent|SVGZoomEvent;UIEvent"
    },
    Url: {
      "^": "Interceptor;href=,port=,search=",
      toString$0: function(receiver) {
        return String(receiver);
      },
      hash$1: function($receiver, arg0) {
        return $receiver.hash.call$1(arg0);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "URL"
    },
    VideoElement: {
      "^": "MediaElement;height},width}",
      $isObject: 1,
      "%": "HTMLVideoElement"
    },
    VideoTrack: {
      "^": "Interceptor;id=,kind=",
      "%": "VideoTrack"
    },
    VideoTrackList: {
      "^": "EventTarget;length=",
      get$onChange: function(receiver) {
        return new W._EventStream(receiver, "change", false, [W.Event]);
      },
      "%": "VideoTrackList"
    },
    VttCue: {
      "^": "TextTrackCue;line=,position},text%",
      "%": "VTTCue"
    },
    VttRegion: {
      "^": "Interceptor;height},id=,width}",
      "%": "VTTRegion"
    },
    VttRegionList: {
      "^": "Interceptor;length=",
      "%": "VTTRegionList"
    },
    WebSocket0: {
      "^": "EventTarget;url=",
      close$2: function(receiver, code, reason) {
        return receiver.close(code, reason);
      },
      close$0: function($receiver) {
        return $receiver.close();
      },
      send$1: function(receiver, data) {
        return receiver.send(data);
      },
      "%": "WebSocket"
    },
    Window: {
      "^": "EventTarget;name=",
      get$location: function(receiver) {
        return receiver.location;
      },
      get$parent: function(receiver) {
        return W._convertNativeToDart_Window(receiver.parent);
      },
      close$0: function(receiver) {
        return receiver.close();
      },
      get$onChange: function(receiver) {
        return new W._EventStream(receiver, "change", false, [W.Event]);
      },
      get$onClick: function(receiver) {
        return new W._EventStream(receiver, "click", false, [W.MouseEvent]);
      },
      get$onDoubleClick: function(receiver) {
        return new W._EventStream(receiver, "dblclick", false, [W.Event]);
      },
      get$onKeyDown: function(receiver) {
        return new W._EventStream(receiver, "keydown", false, [W.KeyboardEvent]);
      },
      get$onMouseDown: function(receiver) {
        return new W._EventStream(receiver, "mousedown", false, [W.MouseEvent]);
      },
      $isWindow: 1,
      $isInterceptor: 1,
      $isObject: 1,
      $isEventTarget: 1,
      "%": "DOMWindow|Window"
    },
    Worker: {
      "^": "EventTarget;",
      terminate$0: function(receiver) {
        return receiver.terminate();
      },
      $isEventTarget: 1,
      $isInterceptor: 1,
      $isObject: 1,
      "%": "Worker"
    },
    WorkerGlobalScope: {
      "^": "EventTarget;location=",
      close$0: function(receiver) {
        return receiver.close();
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "CompositorWorkerGlobalScope|DedicatedWorkerGlobalScope|ServiceWorkerGlobalScope;WorkerGlobalScope"
    },
    XsltProcessor: {
      "^": "Interceptor;",
      reset$0: function(receiver) {
        return receiver.reset();
      },
      "%": "XSLTProcessor"
    },
    _Attr: {
      "^": "Node;name=,value=",
      "%": "Attr"
    },
    _ClientRect: {
      "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
      },
      $eq: function(receiver, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = receiver.left;
        t3 = t1.get$left(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.top;
          t3 = t1.get$top(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.width;
            t3 = t1.get$width(other);
            if (t2 == null ? t3 == null : t2 === t3) {
              t2 = receiver.height;
              t1 = t1.get$height(other);
              t1 = t2 == null ? t1 == null : t2 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(receiver) {
        var t1, t2, t3, t4;
        t1 = J.get$hashCode$(receiver.left);
        t2 = J.get$hashCode$(receiver.top);
        t3 = J.get$hashCode$(receiver.width);
        t4 = J.get$hashCode$(receiver.height);
        return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
      },
      get$topLeft: function(receiver) {
        return new P.Point(receiver.left, receiver.top, [null]);
      },
      $isRectangle: 1,
      $asRectangle: Isolate.functionThatReturnsNull,
      $isObject: 1,
      "%": "ClientRect"
    },
    _ClientRectList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin8;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.item(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.Rectangle];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Rectangle];
      },
      "%": "ClientRectList|DOMRectList"
    },
    Interceptor_ListMixin8: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [P.Rectangle];
      },
      $asIterable: function() {
        return [P.Rectangle];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin8: {
      "^": "Interceptor_ListMixin8+ImmutableListMixin;",
      $asList: function() {
        return [P.Rectangle];
      },
      $asIterable: function() {
        return [P.Rectangle];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    _CssRuleList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin9;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.CssRule];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.CssRule];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.CssRule];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.CssRule];
      },
      "%": "CSSRuleList"
    },
    Interceptor_ListMixin9: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.CssRule];
      },
      $asIterable: function() {
        return [W.CssRule];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin9: {
      "^": "Interceptor_ListMixin9+ImmutableListMixin;",
      $asList: function() {
        return [W.CssRule];
      },
      $asIterable: function() {
        return [W.CssRule];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    _DocumentType: {
      "^": "Node;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "DocumentType"
    },
    _DomRect: {
      "^": "DomRectReadOnly;",
      get$height: function(receiver) {
        return receiver.height;
      },
      set$height: function(receiver, value) {
        receiver.height = value;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      set$width: function(receiver, value) {
        receiver.width = value;
      },
      get$x: function(receiver) {
        return receiver.x;
      },
      get$y: function(receiver) {
        return receiver.y;
      },
      "%": "DOMRect"
    },
    _GamepadList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin10;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Gamepad];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Gamepad];
      },
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [W.Gamepad];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Gamepad];
      },
      "%": "GamepadList"
    },
    Interceptor_ListMixin10: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.Gamepad];
      },
      $asIterable: function() {
        return [W.Gamepad];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin10: {
      "^": "Interceptor_ListMixin10+ImmutableListMixin;",
      $asList: function() {
        return [W.Gamepad];
      },
      $asIterable: function() {
        return [W.Gamepad];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    _HTMLFrameSetElement: {
      "^": "HtmlElement;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLFrameSetElement"
    },
    _NamedNodeMap: {
      "^": "Interceptor_ListMixin_ImmutableListMixin11;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      "%": "MozNamedAttrMap|NamedNodeMap"
    },
    Interceptor_ListMixin11: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin11: {
      "^": "Interceptor_ListMixin11+ImmutableListMixin;",
      $asList: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    _Request: {
      "^": "Body;url=",
      "%": "Request"
    },
    _ServiceWorker: {
      "^": "EventTarget;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      $isObject: 1,
      "%": "ServiceWorker"
    },
    _SpeechRecognitionResultList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin12;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.SpeechRecognitionResult];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.SpeechRecognitionResult];
      },
      "%": "SpeechRecognitionResultList"
    },
    Interceptor_ListMixin12: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin12: {
      "^": "Interceptor_ListMixin12+ImmutableListMixin;",
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    _StyleSheetList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin13;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.StyleSheet];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.StyleSheet];
      },
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [W.StyleSheet];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.StyleSheet];
      },
      "%": "StyleSheetList"
    },
    Interceptor_ListMixin13: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [W.StyleSheet];
      },
      $asIterable: function() {
        return [W.StyleSheet];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin13: {
      "^": "Interceptor_ListMixin13+ImmutableListMixin;",
      $asList: function() {
        return [W.StyleSheet];
      },
      $asIterable: function() {
        return [W.StyleSheet];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    _WorkerLocation: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "WorkerLocation"
    },
    _WorkerNavigator: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "WorkerNavigator"
    },
    _AttributeMap: {
      "^": "Object;_html$_element<",
      addAll$1: function(_, other) {
        other.forEach$1(0, new W._AttributeMap_addAll_closure(this));
      },
      forEach$1: function(_, f) {
        var t1, t2, t3, _i, key;
        for (t1 = this.get$keys(this), t2 = t1.length, t3 = this._html$_element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          f.call$2(key, t3.getAttribute(key));
        }
      },
      get$keys: function(_) {
        var attributes, keys, len, i, attr;
        attributes = this._html$_element.attributes;
        keys = H.setRuntimeTypeInfo([], [P.String]);
        for (len = attributes.length, i = 0; i < len; ++i) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          attr = attributes[i];
          if (attr.namespaceURI == null)
            keys.push(J.get$name$x(attr));
        }
        return keys;
      },
      get$values: function(_) {
        var attributes, values, len, i, attr;
        attributes = this._html$_element.attributes;
        values = H.setRuntimeTypeInfo([], [P.String]);
        for (len = attributes.length, i = 0; i < len; ++i) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          attr = attributes[i];
          if (attr.namespaceURI == null)
            values.push(J.get$value$x(attr));
        }
        return values;
      },
      get$isEmpty: function(_) {
        return this.get$keys(this).length === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$keys(this).length !== 0;
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, P.String];
      }
    },
    _AttributeMap_addAll_closure: {
      "^": "Closure:4;$this",
      call$2: function(k, v) {
        this.$this._html$_element.setAttribute(k, v);
      }
    },
    _ElementAttributeMap: {
      "^": "_AttributeMap;_html$_element",
      containsKey$1: function(_, key) {
        return this._html$_element.hasAttribute(key);
      },
      $index: function(_, key) {
        return this._html$_element.getAttribute(key);
      },
      $indexSet: function(_, key, value) {
        this._html$_element.setAttribute(key, value);
      },
      remove$1: function(_, key) {
        var t1, value;
        t1 = this._html$_element;
        value = t1.getAttribute(key);
        t1.removeAttribute(key);
        return value;
      },
      get$length: function(_) {
        return this.get$keys(this).length;
      }
    },
    _MarginCssRect: {
      "^": "CssRect;_html$_element",
      get$height: function(_) {
        return C.JSNumber_methods.round$0(this._html$_element.offsetHeight) + this._addOrSubtractToBoxModel$2($.$get$_HEIGHT(), "margin");
      },
      get$width: function(_) {
        return C.JSNumber_methods.round$0(this._html$_element.offsetWidth) + this._addOrSubtractToBoxModel$2($.$get$_WIDTH(), "margin");
      },
      get$left: function(_) {
        var t1, t2;
        t1 = J.get$left$x(this._html$_element.getBoundingClientRect());
        t2 = this._addOrSubtractToBoxModel$2(["left"], "margin");
        if (typeof t1 !== "number")
          return t1.$sub();
        return t1 - t2;
      },
      get$top: function(_) {
        var t1, t2;
        t1 = J.get$top$x(this._html$_element.getBoundingClientRect());
        t2 = this._addOrSubtractToBoxModel$2(["top"], "margin");
        if (typeof t1 !== "number")
          return t1.$sub();
        return t1 - t2;
      }
    },
    CssRect: {
      "^": "Object;_html$_element<",
      set$height: function(_, newHeight) {
        throw H.wrapException(new P.UnsupportedError("Can only set height for content rect."));
      },
      set$width: function(_, newWidth) {
        throw H.wrapException(new P.UnsupportedError("Can only set width for content rect."));
      },
      _addOrSubtractToBoxModel$2: function(dimensions, augmentingMeasurement) {
        var styles, t1, t2, t3, t4, t5, val, _i, measurement, propValue, t6;
        styles = J.getComputedStyle$0$x(this._html$_element);
        for (t1 = dimensions.length, t2 = augmentingMeasurement === "margin", t3 = !t2, t4 = augmentingMeasurement === "content", t5 = styles && C.CssStyleDeclaration_methods, val = 0, _i = 0; _i < dimensions.length; dimensions.length === t1 || (0, H.throwConcurrentModificationError)(dimensions), ++_i) {
          measurement = dimensions[_i];
          if (t2) {
            propValue = t5._getPropertyValueHelper$1(styles, augmentingMeasurement + "-" + measurement);
            t6 = W.Dimension$css(propValue != null ? propValue : "")._html$_value;
            if (typeof t6 !== "number")
              return H.iae(t6);
            val += t6;
          }
          if (t4) {
            propValue = t5._getPropertyValueHelper$1(styles, "padding-" + measurement);
            t6 = W.Dimension$css(propValue != null ? propValue : "")._html$_value;
            if (typeof t6 !== "number")
              return H.iae(t6);
            val -= t6;
          }
          if (t3) {
            propValue = t5._getPropertyValueHelper$1(styles, "border-" + measurement + "-width");
            t6 = W.Dimension$css(propValue != null ? propValue : "")._html$_value;
            if (typeof t6 !== "number")
              return H.iae(t6);
            val -= t6;
          }
        }
        return val;
      },
      get$right: function(_) {
        var t1, t2, t3;
        t1 = this._html$_element;
        t2 = J.get$left$x(t1.getBoundingClientRect());
        t3 = this._addOrSubtractToBoxModel$2(["left"], "margin");
        if (typeof t2 !== "number")
          return t2.$sub();
        return t2 - t3 + (C.JSNumber_methods.round$0(t1.offsetWidth) + this._addOrSubtractToBoxModel$2($.$get$_WIDTH(), "margin"));
      },
      get$bottom: function(_) {
        var t1, t2, t3;
        t1 = this._html$_element;
        t2 = J.get$top$x(t1.getBoundingClientRect());
        t3 = this._addOrSubtractToBoxModel$2(["top"], "margin");
        if (typeof t2 !== "number")
          return t2.$sub();
        return t2 - t3 + (C.JSNumber_methods.round$0(t1.offsetHeight) + this._addOrSubtractToBoxModel$2($.$get$_HEIGHT(), "margin"));
      },
      toString$0: function(_) {
        var t1, t2, t3, t4;
        t1 = this._html$_element;
        t2 = J.get$left$x(t1.getBoundingClientRect());
        t3 = this._addOrSubtractToBoxModel$2(["left"], "margin");
        if (typeof t2 !== "number")
          return t2.$sub();
        t3 = "Rectangle (" + H.S(t2 - t3) + ", ";
        t2 = J.get$top$x(t1.getBoundingClientRect());
        t4 = this._addOrSubtractToBoxModel$2(["top"], "margin");
        if (typeof t2 !== "number")
          return t2.$sub();
        return t3 + H.S(t2 - t4) + ") " + H.S(C.JSNumber_methods.round$0(t1.offsetWidth) + this._addOrSubtractToBoxModel$2($.$get$_WIDTH(), "margin")) + " x " + H.S(C.JSNumber_methods.round$0(t1.offsetHeight) + this._addOrSubtractToBoxModel$2($.$get$_HEIGHT(), "margin"));
      },
      $eq: function(_, other) {
        var t1, t2, t3, t4;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = this._html$_element;
        t3 = J.get$left$x(t2.getBoundingClientRect());
        t4 = this._addOrSubtractToBoxModel$2(["left"], "margin");
        if (typeof t3 !== "number")
          return t3.$sub();
        if (t3 - t4 === t1.get$left(other)) {
          t3 = J.get$top$x(t2.getBoundingClientRect());
          t4 = this._addOrSubtractToBoxModel$2(["top"], "margin");
          if (typeof t3 !== "number")
            return t3.$sub();
          if (t3 - t4 === t1.get$top(other)) {
            t3 = J.get$left$x(t2.getBoundingClientRect());
            t4 = this._addOrSubtractToBoxModel$2(["left"], "margin");
            if (typeof t3 !== "number")
              return t3.$sub();
            if (t3 - t4 + (C.JSNumber_methods.round$0(t2.offsetWidth) + this._addOrSubtractToBoxModel$2($.$get$_WIDTH(), "margin")) === t1.get$right(other)) {
              t3 = J.get$top$x(t2.getBoundingClientRect());
              t4 = this._addOrSubtractToBoxModel$2(["top"], "margin");
              if (typeof t3 !== "number")
                return t3.$sub();
              t1 = t3 - t4 + (C.JSNumber_methods.round$0(t2.offsetHeight) + this._addOrSubtractToBoxModel$2($.$get$_HEIGHT(), "margin")) === t1.get$bottom(other);
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
        t1 = this._html$_element;
        t2 = J.get$left$x(t1.getBoundingClientRect());
        t3 = this._addOrSubtractToBoxModel$2(["left"], "margin");
        if (typeof t2 !== "number")
          return t2.$sub();
        t4 = J.get$top$x(t1.getBoundingClientRect());
        t5 = this._addOrSubtractToBoxModel$2(["top"], "margin");
        if (typeof t4 !== "number")
          return t4.$sub();
        t6 = J.get$left$x(t1.getBoundingClientRect());
        t7 = this._addOrSubtractToBoxModel$2(["left"], "margin");
        if (typeof t6 !== "number")
          return t6.$sub();
        t8 = C.JSNumber_methods.round$0(t1.offsetWidth);
        t9 = this._addOrSubtractToBoxModel$2($.$get$_WIDTH(), "margin");
        t10 = J.get$top$x(t1.getBoundingClientRect());
        t11 = this._addOrSubtractToBoxModel$2(["top"], "margin");
        if (typeof t10 !== "number")
          return t10.$sub();
        t1 = C.JSNumber_methods.round$0(t1.offsetHeight);
        t12 = this._addOrSubtractToBoxModel$2($.$get$_HEIGHT(), "margin");
        return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t2 - t3 & 0x1FFFFFFF), t4 - t5 & 0x1FFFFFFF), t6 - t7 + (t8 + t9) & 0x1FFFFFFF), t10 - t11 + (t1 + t12) & 0x1FFFFFFF));
      },
      get$topLeft: function(_) {
        var t1, t2, t3, t4;
        t1 = this._html$_element;
        t2 = J.get$left$x(t1.getBoundingClientRect());
        t3 = this._addOrSubtractToBoxModel$2(["left"], "margin");
        if (typeof t2 !== "number")
          return t2.$sub();
        t1 = J.get$top$x(t1.getBoundingClientRect());
        t4 = this._addOrSubtractToBoxModel$2(["top"], "margin");
        if (typeof t1 !== "number")
          return t1.$sub();
        return new P.Point(t2 - t3, t1 - t4, [P.num]);
      },
      $isRectangle: 1,
      $asRectangle: function() {
        return [P.num];
      }
    },
    _MultiElementCssClassSet: {
      "^": "CssClassSetImpl;_elementIterable,_sets",
      readClasses$0: function() {
        var s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        C.JSArray_methods.forEach$1(this._sets, new W._MultiElementCssClassSet_readClasses_closure(s));
        return s;
      },
      writeClasses$1: function(s) {
        var classes, t1;
        classes = s.join$1(0, " ");
        for (t1 = this._elementIterable, t1 = new H.ListIterator(t1, t1.get$length(t1), 0, null, [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
          J.set$className$x(t1.__internal$_current, classes);
      },
      modify$1: function(_, f) {
        C.JSArray_methods.forEach$1(this._sets, new W._MultiElementCssClassSet_modify_closure(f));
      },
      toggle$2: function(_, value, shouldAdd) {
        return C.JSArray_methods.fold$2(this._sets, false, new W._MultiElementCssClassSet_toggle_closure(value, shouldAdd));
      },
      remove$1: function(_, value) {
        return C.JSArray_methods.fold$2(this._sets, false, new W._MultiElementCssClassSet_remove_closure(value));
      },
      static: {
        _MultiElementCssClassSet__MultiElementCssClassSet: function(elements) {
          return new W._MultiElementCssClassSet(elements, new H.MappedListIterable(elements, new W.closure2(), [null, null]).toList$0(0));
        }
      }
    },
    closure2: {
      "^": "Closure:185;",
      call$1: [function(e) {
        return J.get$classes$x(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    _MultiElementCssClassSet_readClasses_closure: {
      "^": "Closure:61;s",
      call$1: function(e) {
        return this.s.addAll$1(0, e.readClasses$0());
      }
    },
    _MultiElementCssClassSet_modify_closure: {
      "^": "Closure:61;f",
      call$1: function(e) {
        return J.modify$1$x(e, this.f);
      }
    },
    _MultiElementCssClassSet_toggle_closure: {
      "^": "Closure:77;value,shouldAdd",
      call$2: function(changed, e) {
        return J.toggle$2$x(e, this.value, this.shouldAdd) === true || changed === true;
      }
    },
    _MultiElementCssClassSet_remove_closure: {
      "^": "Closure:77;value",
      call$2: function(changed, e) {
        return J.remove$1$ax(e, this.value) === true || changed === true;
      }
    },
    _ElementCssClassSet: {
      "^": "CssClassSetImpl;_html$_element<",
      readClasses$0: function() {
        var s, t1, t2, _i, trimmed;
        s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        for (t1 = this._html$_element.className.split(" "), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          trimmed = J.trim$0$s(t1[_i]);
          if (trimmed.length !== 0)
            s.add$1(0, trimmed);
        }
        return s;
      },
      writeClasses$1: function(s) {
        this._html$_element.className = s.join$1(0, " ");
      },
      get$length: function(_) {
        return this._html$_element.classList.length;
      },
      get$isEmpty: function(_) {
        return this._html$_element.classList.length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._html$_element.classList.length !== 0;
      },
      contains$1: function(_, value) {
        return typeof value === "string" && this._html$_element.classList.contains(value);
      },
      add$1: function(_, value) {
        var list, t1;
        list = this._html$_element.classList;
        t1 = list.contains(value);
        list.add(value);
        return !t1;
      },
      remove$1: function(_, value) {
        var list, removed, t1;
        if (typeof value === "string") {
          list = this._html$_element.classList;
          removed = list.contains(value);
          list.remove(value);
          t1 = removed;
        } else
          t1 = false;
        return t1;
      },
      toggle$2: function(_, value, shouldAdd) {
        var t1 = this._html$_element;
        return shouldAdd == null ? t1.classList.toggle(value) : W._ElementCssClassSet__toggleOnOff(t1, value, shouldAdd);
      },
      toggle$1: function($receiver, value) {
        return this.toggle$2($receiver, value, null);
      },
      addAll$1: function(_, iterable) {
        W._ElementCssClassSet__addAll(this._html$_element, iterable);
      },
      static: {
        _ElementCssClassSet__toggleOnOff: function(_element, value, shouldAdd) {
          var list = _element.classList;
          if (shouldAdd) {
            list.add(value);
            return true;
          } else {
            list.remove(value);
            return false;
          }
        },
        _ElementCssClassSet__addAll: function(_element, iterable) {
          var list, t1, _i;
          list = _element.classList;
          for (t1 = iterable.length, _i = 0; _i < iterable.length; iterable.length === t1 || (0, H.throwConcurrentModificationError)(iterable), ++_i)
            list.add(iterable[_i]);
        }
      }
    },
    Dimension: {
      "^": "Object;_html$_value,_unit",
      toString$0: function(_) {
        return H.S(this._html$_value) + H.S(this._unit);
      },
      get$value: function(_) {
        return this._html$_value;
      },
      Dimension$css$1: function(cssValue) {
        var t1, t2, t3;
        if (cssValue === "")
          cssValue = "0px";
        if (C.JSString_methods.endsWith$1(cssValue, "%"))
          this._unit = "%";
        else
          this._unit = C.JSString_methods.substring$1(cssValue, cssValue.length - 2);
        t1 = C.JSString_methods.contains$1(cssValue, ".");
        t2 = cssValue.length;
        t3 = this._unit;
        if (t1)
          this._html$_value = H.Primitives_parseDouble(C.JSString_methods.substring$2(cssValue, 0, t2 - t3.length), null);
        else
          this._html$_value = H.Primitives_parseInt(C.JSString_methods.substring$2(cssValue, 0, t2 - t3.length), null, null);
      },
      static: {
        Dimension$css: function(cssValue) {
          var t1 = new W.Dimension(null, null);
          t1.Dimension$css$1(cssValue);
          return t1;
        }
      }
    },
    _EventStream: {
      "^": "Stream;_html$_target,_eventType,_useCapture,$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1 = new W._EventStreamSubscription(0, this._html$_target, this._eventType, W._wrapZone(onData), false, this.$ti);
        t1._tryResume$0();
        return t1;
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$2$onDone: function(onData, onDone) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
      }
    },
    _ElementEventStreamImpl: {
      "^": "_EventStream;_html$_target,_eventType,_useCapture,$ti"
    },
    _ElementListEventStreamImpl: {
      "^": "Stream;_targetList,_useCapture,_eventType,$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1, t2, t3, pool;
        t1 = H.getTypeArgumentByIndex(this, 0);
        t2 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [[P.Stream, t1], [P.StreamSubscription, t1]]);
        t3 = this.$ti;
        pool = new W._StreamPool(null, t2, t3);
        pool._html$_controller = P.StreamController_StreamController$broadcast(pool.get$close(pool), null, true, t1);
        for (t1 = this._targetList, t1 = new H.ListIterator(t1, t1.get$length(t1), 0, null, [H.getTypeArgumentByIndex(t1, 0)]), t2 = this._eventType; t1.moveNext$0();)
          pool.add$1(0, new W._EventStream(t1.__internal$_current, t2, false, t3));
        t1 = pool._html$_controller;
        t1.toString;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$2$onDone: function(onData, onDone) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
      }
    },
    _EventStreamSubscription: {
      "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_html$_onData,_useCapture,$ti",
      cancel$0: function(_) {
        if (this._html$_target == null)
          return;
        this._unlisten$0();
        this._html$_target = null;
        this._html$_onData = null;
        return;
      },
      pause$1: function(_, resumeSignal) {
        if (this._html$_target == null)
          return;
        ++this._pauseCount;
        this._unlisten$0();
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      get$isPaused: function() {
        return this._pauseCount > 0;
      },
      resume$0: function(_) {
        if (this._html$_target == null || this._pauseCount <= 0)
          return;
        --this._pauseCount;
        this._tryResume$0();
      },
      _tryResume$0: function() {
        var t1 = this._html$_onData;
        if (t1 != null && this._pauseCount <= 0)
          J.addEventListener$3$x(this._html$_target, this._eventType, t1, false);
      },
      _unlisten$0: function() {
        var t1 = this._html$_onData;
        if (t1 != null)
          J.removeEventListener$3$x(this._html$_target, this._eventType, t1, false);
      }
    },
    _StreamPool: {
      "^": "Object;_html$_controller,_html$_subscriptions,$ti",
      add$1: function(_, stream) {
        var t1, t2;
        t1 = this._html$_subscriptions;
        if (t1.containsKey$1(0, stream))
          return;
        t2 = this._html$_controller;
        t1.$indexSet(0, stream, stream.listen$3$onDone$onError(t2.get$add(t2), new W._StreamPool_add_closure(this, stream), t2.get$addError()));
      },
      remove$1: function(_, stream) {
        var subscription = this._html$_subscriptions.remove$1(0, stream);
        if (subscription != null)
          J.cancel$0$x(subscription);
      },
      close$0: [function(_) {
        var t1, t2;
        for (t1 = this._html$_subscriptions, t2 = t1.get$values(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();)
          J.cancel$0$x(t2.get$current());
        t1.clear$0(0);
        this._html$_controller.close$0(0);
      }, "call$0", "get$close", 0, 0, 2]
    },
    _StreamPool_add_closure: {
      "^": "Closure:1;$this,stream",
      call$0: [function() {
        return this.$this.remove$1(0, this.stream);
      }, null, null, 0, 0, null, "call"]
    },
    _Html5NodeValidator: {
      "^": "Object;uriPolicy<",
      allowsElement$1: function(element) {
        return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, W.Element__safeTagName(element));
      },
      allowsAttribute$3: function(element, attributeName, value) {
        var tagName, t1, validator;
        tagName = W.Element__safeTagName(element);
        t1 = $.$get$_Html5NodeValidator__attributeValidators();
        validator = t1.$index(0, H.S(tagName) + "::" + attributeName);
        if (validator == null)
          validator = t1.$index(0, "*::" + attributeName);
        if (validator == null)
          return false;
        return validator.call$4(element, attributeName, value, this);
      },
      _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
        var t1, _i;
        t1 = $.$get$_Html5NodeValidator__attributeValidators();
        if (t1.get$isEmpty(t1)) {
          for (_i = 0; _i < 262; ++_i)
            t1.$indexSet(0, C.List_2Zi[_i], W.html__Html5NodeValidator__standardAttributeValidator$closure());
          for (_i = 0; _i < 12; ++_i)
            t1.$indexSet(0, C.List_yrN[_i], W.html__Html5NodeValidator__uriAttributeValidator$closure());
        }
      },
      $isNodeValidator: 1,
      static: {
        _Html5NodeValidator$: function(uriPolicy) {
          var t1 = new W._Html5NodeValidator(new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), window.location));
          t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
          return t1;
        },
        _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
          return true;
        }, "call$4", "html__Html5NodeValidator__standardAttributeValidator$closure", 8, 0, 70, 20, 57, 7, 58],
        _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
          var t1, t2, t3, t4, t5;
          t1 = context.get$uriPolicy();
          t2 = t1._hiddenAnchor;
          t3 = J.getInterceptor$x(t2);
          t3.set$href(t2, value);
          t4 = t3.get$hostname(t2);
          t1 = t1._loc;
          t5 = t1.hostname;
          if (t4 == null ? t5 == null : t4 === t5) {
            t4 = t3.get$port(t2);
            t5 = t1.port;
            if (t4 == null ? t5 == null : t4 === t5) {
              t4 = t3.get$protocol(t2);
              t1 = t1.protocol;
              t1 = t4 == null ? t1 == null : t4 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
          if (!t1)
            if (t3.get$hostname(t2) === "")
              if (t3.get$port(t2) === "")
                t1 = t3.get$protocol(t2) === ":" || t3.get$protocol(t2) === "";
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = true;
          return t1;
        }, "call$4", "html__Html5NodeValidator__uriAttributeValidator$closure", 8, 0, 70, 20, 57, 7, 58]
      }
    },
    ImmutableListMixin: {
      "^": "Object;$ti",
      get$iterator: function(receiver) {
        return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null, [H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)]);
      },
      add$1: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to immutable List."));
      },
      addAll$1: function(receiver, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to immutable List."));
      },
      sort$1: function(receiver, compare) {
        throw H.wrapException(new P.UnsupportedError("Cannot sort immutable List."));
      },
      insert$2: function(receiver, index, element) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to immutable List."));
      },
      insertAll$2: function(receiver, index, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to immutable List."));
      },
      setAll$2: function(receiver, index, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an immutable List."));
      },
      removeAt$1: function(receiver, pos) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from immutable List."));
      },
      remove$1: function(receiver, object) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from immutable List."));
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on immutable List."));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      replaceRange$3: function(receiver, start, end, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an immutable List."));
      },
      fillRange$3: function(receiver, start, end, fillValue) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an immutable List."));
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    NodeValidatorBuilder: {
      "^": "Object;_validators",
      add$1: function(_, validator) {
        this._validators.push(validator);
      },
      allowsElement$1: function(element) {
        return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
      },
      allowsAttribute$3: function(element, attributeName, value) {
        return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
      },
      $isNodeValidator: 1
    },
    NodeValidatorBuilder_allowsElement_closure: {
      "^": "Closure:0;element",
      call$1: function(v) {
        return v.allowsElement$1(this.element);
      }
    },
    NodeValidatorBuilder_allowsAttribute_closure: {
      "^": "Closure:0;element,attributeName,value",
      call$1: function(v) {
        return v.allowsAttribute$3(this.element, this.attributeName, this.value);
      }
    },
    _SimpleNodeValidator: {
      "^": "Object;uriPolicy<",
      allowsElement$1: function(element) {
        return this.allowedElements.contains$1(0, W.Element__safeTagName(element));
      },
      allowsAttribute$3: ["super$_SimpleNodeValidator$allowsAttribute", function(element, attributeName, value) {
        var tagName, t1;
        tagName = W.Element__safeTagName(element);
        t1 = this.allowedUriAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return this.uriPolicy.allowsUri$1(value);
        else if (t1.contains$1(0, "*::" + attributeName))
          return this.uriPolicy.allowsUri$1(value);
        else {
          t1 = this.allowedAttributes;
          if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
            return true;
          else if (t1.contains$1(0, "*::" + attributeName))
            return true;
          else if (t1.contains$1(0, H.S(tagName) + "::*"))
            return true;
          else if (t1.contains$1(0, "*::*"))
            return true;
        }
        return false;
      }],
      _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
        var legalAttributes, extraUriAttributes, t1;
        this.allowedElements.addAll$1(0, allowedElements);
        legalAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure());
        extraUriAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure0());
        this.allowedAttributes.addAll$1(0, legalAttributes);
        t1 = this.allowedUriAttributes;
        t1.addAll$1(0, C.List_empty);
        t1.addAll$1(0, extraUriAttributes);
      },
      $isNodeValidator: 1
    },
    _SimpleNodeValidator_closure: {
      "^": "Closure:0;",
      call$1: function(x) {
        return !C.JSArray_methods.contains$1(C.List_yrN, x);
      }
    },
    _SimpleNodeValidator_closure0: {
      "^": "Closure:0;",
      call$1: function(x) {
        return C.JSArray_methods.contains$1(C.List_yrN, x);
      }
    },
    _TemplatingNodeValidator: {
      "^": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
      allowsAttribute$3: function(element, attributeName, value) {
        if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
          return true;
        if (attributeName === "template" && value === "")
          return true;
        if (J.get$attributes$x(element)._html$_element.getAttribute("template") === "")
          return this._templateAttrs.contains$1(0, attributeName);
        return false;
      },
      static: {
        _TemplatingNodeValidator$: function() {
          var t1 = P.String;
          t1 = new W._TemplatingNodeValidator(P.LinkedHashSet_LinkedHashSet$from(C.List_wSV, t1), P.LinkedHashSet_LinkedHashSet(null, null, null, t1), P.LinkedHashSet_LinkedHashSet(null, null, null, t1), P.LinkedHashSet_LinkedHashSet(null, null, null, t1), null);
          t1._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure(), [null, null]), ["TEMPLATE"], null);
          return t1;
        }
      }
    },
    _TemplatingNodeValidator_closure: {
      "^": "Closure:0;",
      call$1: [function(attr) {
        return "TEMPLATE::" + H.S(attr);
      }, null, null, 2, 0, null, 102, "call"]
    },
    _SvgNodeValidator: {
      "^": "Object;",
      allowsElement$1: function(element) {
        var t1 = J.getInterceptor(element);
        if (!!t1.$isScriptElement)
          return false;
        t1 = !!t1.$isSvgElement;
        if (t1 && W.Element__safeTagName(element) === "foreignObject")
          return false;
        if (t1)
          return true;
        return false;
      },
      allowsAttribute$3: function(element, attributeName, value) {
        if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
          return false;
        return this.allowsElement$1(element);
      },
      $isNodeValidator: 1
    },
    FixedSizeListIterator: {
      "^": "Object;_array,_html$_length,_position,_current,$ti",
      moveNext$0: function() {
        var nextPosition, t1;
        nextPosition = this._position + 1;
        t1 = this._html$_length;
        if (nextPosition < t1) {
          this._current = J.$index$asx(this._array, nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._current = null;
        this._position = t1;
        return false;
      },
      get$current: function() {
        return this._current;
      }
    },
    _DOMWindowCrossFrame: {
      "^": "Object;_window",
      get$location: function(_) {
        return W._LocationCrossFrame__createSafe(this._window.location);
      },
      get$parent: function(_) {
        return W._DOMWindowCrossFrame__createSafe(this._window.parent);
      },
      close$0: function(_) {
        return this._window.close();
      },
      addEventListener$3: function(_, type, listener, useCapture) {
        return H.throwExpression(new P.UnsupportedError("You can only attach EventListeners to your own window."));
      },
      removeEventListener$3: function(_, type, listener, useCapture) {
        return H.throwExpression(new P.UnsupportedError("You can only attach EventListeners to your own window."));
      },
      $isEventTarget: 1,
      $isInterceptor: 1,
      static: {
        _DOMWindowCrossFrame__createSafe: function(w) {
          if (w === window)
            return w;
          else
            return new W._DOMWindowCrossFrame(w);
        }
      }
    },
    _LocationCrossFrame: {
      "^": "Object;_html$_location",
      static: {
        _LocationCrossFrame__createSafe: function($location) {
          if ($location === window.location)
            return $location;
          else
            return new W._LocationCrossFrame($location);
        }
      }
    },
    NodeValidator: {
      "^": "Object;"
    },
    _SameOriginUriPolicy: {
      "^": "Object;_hiddenAnchor,_loc"
    },
    _ValidatingTreeSanitizer: {
      "^": "Object;validator",
      sanitizeTree$1: function(node) {
        new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$2(node, null);
      },
      _removeNode$2: function(node, $parent) {
        var t1;
        if ($parent == null) {
          t1 = node.parentNode;
          if (t1 != null)
            t1.removeChild(node);
        } else
          $parent.removeChild(node);
      },
      _sanitizeUntrustedElement$2: function(element, $parent) {
        var corrupted, attrs, isAttr, corruptedTest1, elementText, elementTagName, exception, t1;
        corrupted = true;
        attrs = null;
        isAttr = null;
        try {
          attrs = J.get$attributes$x(element);
          isAttr = attrs.get$_html$_element().getAttribute("is");
          corruptedTest1 = function(element) {
            if (!(element.attributes instanceof NamedNodeMap))
              return true;
            var childNodes = element.childNodes;
            if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1])
              return true;
            if (element.children)
              if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList))
                return true;
            var length = 0;
            if (element.children)
              length = element.children.length;
            for (var i = 0; i < length; i++) {
              var child = element.children[i];
              if (child.id == 'attributes' || child.name == 'attributes' || child.id == 'lastChild' || child.name == 'lastChild' || child.id == 'children' || child.name == 'children')
                return true;
            }
            return false;
          }(element);
          corrupted = corruptedTest1 === true ? true : !(element.attributes instanceof NamedNodeMap);
        } catch (exception) {
          H.unwrapException(exception);
        }
        elementText = "element unprintable";
        try {
          elementText = J.toString$0$(element);
        } catch (exception) {
          H.unwrapException(exception);
        }
        try {
          elementTagName = W.Element__safeTagName(element);
          this._sanitizeElement$7(element, $parent, corrupted, elementText, elementTagName, attrs, isAttr);
        } catch (exception) {
          if (H.unwrapException(exception) instanceof P.ArgumentError)
            throw exception;
          else {
            this._removeNode$2(element, $parent);
            window;
            t1 = "Removing corrupted element " + H.S(elementText);
            if (typeof console != "undefined")
              console.warn(t1);
          }
        }
      },
      _sanitizeElement$7: function(element, $parent, corrupted, text, tag, attrs, isAttr) {
        var t1, keys, i, $name, t2;
        if (corrupted) {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing element due to corrupted attributes on <" + text + ">";
          if (typeof console != "undefined")
            console.warn(t1);
          return;
        }
        if (!this.validator.allowsElement$1(element)) {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing disallowed element <" + H.S(tag) + "> from " + J.toString$0$($parent);
          if (typeof console != "undefined")
            console.warn(t1);
          return;
        }
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(element, "is", isAttr)) {
            this._removeNode$2(element, $parent);
            window;
            t1 = "Removing disallowed type extension <" + H.S(tag) + ' is="' + isAttr + '">';
            if (typeof console != "undefined")
              console.warn(t1);
            return;
          }
        t1 = attrs.get$keys(attrs);
        keys = H.setRuntimeTypeInfo(t1.slice(), [H.getTypeArgumentByIndex(t1, 0)]);
        for (i = attrs.get$keys(attrs).length - 1, t1 = attrs._html$_element; i >= 0; --i) {
          if (i >= keys.length)
            return H.ioore(keys, i);
          $name = keys[i];
          if (!this.validator.allowsAttribute$3(element, J.toLowerCase$0$s($name), t1.getAttribute($name))) {
            window;
            t2 = "Removing disallowed attribute <" + H.S(tag) + " " + H.S($name) + '="' + H.S(t1.getAttribute($name)) + '">';
            if (typeof console != "undefined")
              console.warn(t2);
            t1.getAttribute($name);
            t1.removeAttribute($name);
          }
        }
        if (!!J.getInterceptor(element).$isTemplateElement)
          this.sanitizeTree$1(element.content);
      }
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: {
      "^": "Closure:223;$this",
      call$2: function(node, $parent) {
        var child, nextChild, t1, exception, t2, t3;
        t1 = this.$this;
        switch (node.nodeType) {
          case 1:
            t1._sanitizeUntrustedElement$2(node, $parent);
            break;
          case 8:
          case 11:
          case 3:
          case 4:
            break;
          default:
            t1._removeNode$2(node, $parent);
        }
        child = node.lastChild;
        for (t1 = node == null; null != child;) {
          nextChild = null;
          try {
            nextChild = J.get$previousNode$x(child);
          } catch (exception) {
            H.unwrapException(exception);
            t2 = child;
            if (t1) {
              t3 = J.getInterceptor$x(t2);
              if (t3.get$parentNode(t2) != null) {
                t3.get$parentNode(t2);
                t3.get$parentNode(t2).removeChild(t2);
              }
            } else
              node.removeChild(t2);
            child = null;
            nextChild = node.lastChild;
          }
          if (child != null)
            this.call$2(child, node);
          child = nextChild;
        }
      }
    }
  }], ["html_common", "dart:html_common",, P, {
    "^": "",
    convertNativeToDart_Dictionary: function(object) {
      var dict, keys, t1, _i, key;
      if (object == null)
        return;
      dict = P.LinkedHashMap__makeEmpty();
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
        key = keys[_i];
        dict.$indexSet(0, key, object[key]);
      }
      return dict;
    },
    convertDartToNative_Dictionary: function(dict, postCreate) {
      return;
    },
    convertNativeToDart_DateTime: function(date) {
      var millisSinceEpoch, t1;
      millisSinceEpoch = date.getTime();
      t1 = new P.DateTime(millisSinceEpoch, true);
      t1.DateTime$_withValue$2$isUtc(millisSinceEpoch, true);
      return t1;
    },
    convertNativePromiseToDartFuture: function(promise) {
      var t1, completer;
      t1 = new P._Future(0, $.Zone__current, null, [null]);
      completer = new P._AsyncCompleter(t1, [null]);
      promise.then(H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure(completer), 1))["catch"](H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure0(completer), 1));
      return t1;
    },
    Device_isOpera: function() {
      var t1 = $.Device__isOpera;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        $.Device__isOpera = t1;
      }
      return t1;
    },
    Device_isWebKit: function() {
      var t1 = $.Device__isWebKit;
      if (t1 == null) {
        t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
        $.Device__isWebKit = t1;
      }
      return t1;
    },
    Device_cssPrefix: function() {
      var prefix, t1;
      prefix = $.Device__cachedCssPrefix;
      if (prefix != null)
        return prefix;
      t1 = $.Device__isFirefox;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
        $.Device__isFirefox = t1;
      }
      if (t1 === true)
        prefix = "-moz-";
      else {
        t1 = $.Device__isIE;
        if (t1 == null) {
          t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
          $.Device__isIE = t1;
        }
        if (t1 === true)
          prefix = "-ms-";
        else
          prefix = P.Device_isOpera() === true ? "-o-" : "-webkit-";
      }
      $.Device__cachedCssPrefix = prefix;
      return prefix;
    },
    _StructuredClone: {
      "^": "Object;",
      findSlot$1: function(value) {
        var t1, $length, i;
        t1 = this.values;
        $length = t1.length;
        for (i = 0; i < $length; ++i)
          if (t1[i] === value)
            return i;
        t1.push(value);
        this.copies.push(null);
        return $length;
      },
      walk$1: function(e) {
        var t1, t2, slot, t3, t4, copy;
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        t2 = J.getInterceptor(e);
        if (!!t2.$isDateTime)
          return new Date(e._value);
        if (!!t2.$isRegExp)
          throw H.wrapException(new P.UnimplementedError("structured clone of RegExp"));
        if (!!t2.$isFile0)
          return e;
        if (!!t2.$isBlob)
          return e;
        if (!!t2.$isFileList)
          return e;
        if (!!t2.$isImageData)
          return e;
        if (!!t2.$isNativeByteBuffer || !!t2.$isNativeTypedData)
          return e;
        if (!!t2.$isMap) {
          slot = this.findSlot$1(e);
          t3 = this.copies;
          t4 = t3.length;
          if (slot >= t4)
            return H.ioore(t3, slot);
          copy = t3[slot];
          t1.copy = copy;
          if (copy != null)
            return copy;
          copy = {};
          t1.copy = copy;
          if (slot >= t4)
            return H.ioore(t3, slot);
          t3[slot] = copy;
          t2.forEach$1(e, new P._StructuredClone_walk_closure(t1, this));
          return t1.copy;
        }
        if (!!t2.$isList) {
          slot = this.findSlot$1(e);
          t1 = this.copies;
          if (slot >= t1.length)
            return H.ioore(t1, slot);
          copy = t1[slot];
          if (copy != null)
            return copy;
          return this.copyList$2(e, slot);
        }
        throw H.wrapException(new P.UnimplementedError("structured clone of other type"));
      },
      copyList$2: function(e, slot) {
        var t1, $length, copy, t2, i;
        t1 = J.getInterceptor$asx(e);
        $length = t1.get$length(e);
        copy = new Array($length);
        t2 = this.copies;
        if (slot >= t2.length)
          return H.ioore(t2, slot);
        t2[slot] = copy;
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          t2 = this.walk$1(t1.$index(e, i));
          if (i >= copy.length)
            return H.ioore(copy, i);
          copy[i] = t2;
        }
        return copy;
      }
    },
    _StructuredClone_walk_closure: {
      "^": "Closure:4;_box_0,$this",
      call$2: function(key, value) {
        this._box_0.copy[key] = this.$this.walk$1(value);
      }
    },
    _AcceptStructuredClone: {
      "^": "Object;",
      findSlot$1: function(value) {
        var t1, $length, i, t2;
        t1 = this.values;
        $length = t1.length;
        for (i = 0; i < $length; ++i) {
          t2 = t1[i];
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        t1.push(value);
        this.copies.push(null);
        return $length;
      },
      walk$1: function(e) {
        var t1, millisSinceEpoch, proto, slot, t2, t3, copy, $length, i;
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date) {
          millisSinceEpoch = e.getTime();
          t1 = new P.DateTime(millisSinceEpoch, true);
          t1.DateTime$_withValue$2$isUtc(millisSinceEpoch, true);
          return t1;
        }
        if (e instanceof RegExp)
          throw H.wrapException(new P.UnimplementedError("structured clone of RegExp"));
        if (typeof Promise != "undefined" && e instanceof Promise)
          return P.convertNativePromiseToDartFuture(e);
        proto = Object.getPrototypeOf(e);
        if (proto === Object.prototype || proto === null) {
          slot = this.findSlot$1(e);
          t2 = this.copies;
          t3 = t2.length;
          if (slot >= t3)
            return H.ioore(t2, slot);
          copy = t2[slot];
          t1.copy = copy;
          if (copy != null)
            return copy;
          copy = P.LinkedHashMap__makeEmpty();
          t1.copy = copy;
          if (slot >= t3)
            return H.ioore(t2, slot);
          t2[slot] = copy;
          this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(t1, this));
          return t1.copy;
        }
        if (e instanceof Array) {
          slot = this.findSlot$1(e);
          t1 = this.copies;
          if (slot >= t1.length)
            return H.ioore(t1, slot);
          copy = t1[slot];
          if (copy != null)
            return copy;
          t2 = J.getInterceptor$asx(e);
          $length = t2.get$length(e);
          copy = this.mustCopy ? new Array($length) : e;
          if (slot >= t1.length)
            return H.ioore(t1, slot);
          t1[slot] = copy;
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = J.getInterceptor$ax(copy);
          i = 0;
          for (; i < $length; ++i)
            t1.$indexSet(copy, i, this.walk$1(t2.$index(e, i)));
          return copy;
        }
        return e;
      }
    },
    _AcceptStructuredClone_walk_closure: {
      "^": "Closure:4;_box_0,$this",
      call$2: function(key, value) {
        var t1, t2;
        t1 = this._box_0.copy;
        t2 = this.$this.walk$1(value);
        J.$indexSet$ax(t1, key, t2);
        return t2;
      }
    },
    _StructuredCloneDart2Js: {
      "^": "_StructuredClone;values,copies"
    },
    _AcceptStructuredCloneDart2Js: {
      "^": "_AcceptStructuredClone;values,copies,mustCopy",
      forEachJsField$2: function(object, action) {
        var t1, t2, _i, key;
        for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          action.call$2(key, object[key]);
        }
      }
    },
    convertNativePromiseToDartFuture_closure: {
      "^": "Closure:0;completer",
      call$1: [function(result) {
        return this.completer.complete$1(0, result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    convertNativePromiseToDartFuture_closure0: {
      "^": "Closure:0;completer",
      call$1: [function(result) {
        return this.completer.completeError$1(result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    CssClassSetImpl: {
      "^": "Object;",
      _validateToken$1: [function(value) {
        if ($.$get$CssClassSetImpl__validTokenRE()._nativeRegExp.test(H.checkString(value)))
          return value;
        throw H.wrapException(P.ArgumentError$value(value, "value", "Not a valid class token"));
      }, "call$1", "get$_validateToken", 2, 0, 41, 7],
      toString$0: function(_) {
        return this.readClasses$0().join$1(0, " ");
      },
      toggle$2: function(_, value, shouldAdd) {
        var s, result;
        this._validateToken$1(value);
        s = this.readClasses$0();
        if ((shouldAdd == null ? !s.contains$1(0, value) : shouldAdd) === true) {
          s.add$1(0, value);
          result = true;
        } else {
          s.remove$1(0, value);
          result = false;
        }
        this.writeClasses$1(s);
        return result;
      },
      toggle$1: function($receiver, value) {
        return this.toggle$2($receiver, value, null);
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this.readClasses$0();
        t2 = new P._LinkedHashSetIterator(t1, t1._collection$_modifications, null, null, [null]);
        t2._collection$_cell = t1._collection$_first;
        return t2;
      },
      forEach$1: function(_, f) {
        this.readClasses$0().forEach$1(0, f);
      },
      map$1: function(_, f) {
        var t1 = this.readClasses$0();
        return new H.EfficientLengthMappedIterable(t1, f, [H.getTypeArgumentByIndex(t1, 0), null]);
      },
      where$1: function(_, f) {
        var t1 = this.readClasses$0();
        return new H.WhereIterable(t1, f, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$isEmpty: function(_) {
        return this.readClasses$0()._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this.readClasses$0()._collection$_length !== 0;
      },
      get$length: function(_) {
        return this.readClasses$0()._collection$_length;
      },
      reduce$1: function(_, combine) {
        return this.readClasses$0().reduce$1(0, combine);
      },
      contains$1: function(_, value) {
        if (typeof value !== "string")
          return false;
        this._validateToken$1(value);
        return this.readClasses$0().contains$1(0, value);
      },
      lookup$1: function(value) {
        return this.contains$1(0, value) ? value : null;
      },
      add$1: function(_, value) {
        this._validateToken$1(value);
        return this.modify$1(0, new P.CssClassSetImpl_add_closure(value));
      },
      remove$1: function(_, value) {
        var s, result;
        this._validateToken$1(value);
        if (typeof value !== "string")
          return false;
        s = this.readClasses$0();
        result = s.remove$1(0, value);
        this.writeClasses$1(s);
        return result;
      },
      addAll$1: function(_, iterable) {
        this.modify$1(0, new P.CssClassSetImpl_addAll_closure(this, iterable));
      },
      get$first: function(_) {
        var t1 = this.readClasses$0();
        return t1.get$first(t1);
      },
      toList$1$growable: function(_, growable) {
        return this.readClasses$0().toList$1$growable(0, true);
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      skip$1: function(_, n) {
        var t1 = this.readClasses$0();
        return H.SkipIterable_SkipIterable(t1, n, H.getTypeArgumentByIndex(t1, 0));
      },
      elementAt$1: function(_, index) {
        return this.readClasses$0().elementAt$1(0, index);
      },
      modify$1: function(_, f) {
        var s, ret;
        s = this.readClasses$0();
        ret = f.call$1(s);
        this.writeClasses$1(s);
        return ret;
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      $isEfficientLength: 1
    },
    CssClassSetImpl_add_closure: {
      "^": "Closure:0;value",
      call$1: function(s) {
        return s.add$1(0, this.value);
      }
    },
    CssClassSetImpl_addAll_closure: {
      "^": "Closure:0;$this,iterable",
      call$1: function(s) {
        return s.addAll$1(0, new H.MappedListIterable(this.iterable, this.$this.get$_validateToken(), [null, null]));
      }
    },
    FilteredElementList: {
      "^": "ListBase;_node,_childNodes",
      get$_html_common$_iterable: function() {
        var t1, t2;
        t1 = this._childNodes;
        t2 = H.getRuntimeTypeArgument(t1, "ListMixin", 0);
        return new H.MappedIterable(new H.WhereIterable(t1, new P.FilteredElementList__iterable_closure(), [t2]), new P.FilteredElementList__iterable_closure0(), [t2, null]);
      },
      forEach$1: function(_, f) {
        C.JSArray_methods.forEach$1(P.List_List$from(this.get$_html_common$_iterable(), false, W.Element), f);
      },
      $indexSet: function(_, index, value) {
        var t1 = this.get$_html_common$_iterable();
        J.replaceWith$1$x(t1._f.call$1(J.elementAt$1$ax(t1._iterable, index)), value);
      },
      set$length: function(_, newLength) {
        var len, t1;
        len = J.get$length$asx(this.get$_html_common$_iterable()._iterable);
        t1 = J.getInterceptor$n(newLength);
        if (t1.$ge(newLength, len))
          return;
        else if (t1.$lt(newLength, 0))
          throw H.wrapException(P.ArgumentError$("Invalid list length"));
        this.removeRange$2(0, newLength, len);
      },
      add$1: function(_, value) {
        this._childNodes._this.appendChild(value);
      },
      addAll$1: function(_, iterable) {
        var t1, t2;
        for (t1 = J.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0();)
          t2.appendChild(t1.get$current());
      },
      contains$1: function(_, needle) {
        if (!J.getInterceptor(needle).$isElement)
          return false;
        return needle.parentNode === this._node;
      },
      sort$1: function(_, compare) {
        throw H.wrapException(new P.UnsupportedError("Cannot sort filtered list"));
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on filtered list"));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      fillRange$3: function(_, start, end, fillValue) {
        throw H.wrapException(new P.UnsupportedError("Cannot fillRange on filtered list"));
      },
      replaceRange$3: function(_, start, end, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot replaceRange on filtered list"));
      },
      removeRange$2: function(_, start, end) {
        var t1 = this.get$_html_common$_iterable();
        t1 = H.SkipIterable_SkipIterable(t1, start, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        C.JSArray_methods.forEach$1(P.List_List$from(H.TakeIterable_TakeIterable(t1, J.$sub$n(end, start), H.getRuntimeTypeArgument(t1, "Iterable", 0)), true, null), new P.FilteredElementList_removeRange_closure());
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._childNodes._this);
      },
      insert$2: function(_, index, value) {
        var t1, element;
        if (J.$eq$(index, J.get$length$asx(this.get$_html_common$_iterable()._iterable)))
          this._childNodes._this.appendChild(value);
        else {
          t1 = this.get$_html_common$_iterable();
          element = t1._f.call$1(J.elementAt$1$ax(t1._iterable, index));
          J.insertBefore$2$x(J.get$parentNode$x(element), value, element);
        }
      },
      insertAll$2: function(_, index, iterable) {
        var t1, element;
        if (index === J.get$length$asx(this.get$_html_common$_iterable()._iterable))
          this.addAll$1(0, iterable);
        else {
          t1 = this.get$_html_common$_iterable();
          element = t1._f.call$1(J.elementAt$1$ax(t1._iterable, index));
          J.insertAllBefore$2$x(J.get$parentNode$x(element), iterable, element);
        }
      },
      removeAt$1: function(_, index) {
        var t1, result;
        t1 = this.get$_html_common$_iterable();
        result = t1._f.call$1(J.elementAt$1$ax(t1._iterable, index));
        J.remove$0$ax(result);
        return result;
      },
      remove$1: function(_, element) {
        var t1 = J.getInterceptor(element);
        if (!t1.$isElement)
          return false;
        if (this.contains$1(0, element)) {
          t1.remove$0(element);
          return true;
        } else
          return false;
      },
      get$length: function(_) {
        return J.get$length$asx(this.get$_html_common$_iterable()._iterable);
      },
      $index: function(_, index) {
        var t1 = this.get$_html_common$_iterable();
        return t1._f.call$1(J.elementAt$1$ax(t1._iterable, index));
      },
      get$iterator: function(_) {
        var t1 = P.List_List$from(this.get$_html_common$_iterable(), false, W.Element);
        return new J.ArrayIterator(t1, t1.length, 0, null, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      $asListBase: function() {
        return [W.Element];
      },
      $asObject_ListMixin: function() {
        return [W.Element];
      },
      $asList: function() {
        return [W.Element];
      },
      $asIterable: function() {
        return [W.Element];
      }
    },
    FilteredElementList__iterable_closure: {
      "^": "Closure:0;",
      call$1: function(n) {
        return !!J.getInterceptor(n).$isElement;
      }
    },
    FilteredElementList__iterable_closure0: {
      "^": "Closure:0;",
      call$1: [function(n) {
        return H.interceptedTypeCast(n, "$isElement");
      }, null, null, 2, 0, null, 115, "call"]
    },
    FilteredElementList_removeRange_closure: {
      "^": "Closure:0;",
      call$1: function(el) {
        return J.remove$0$ax(el);
      }
    }
  }], ["dart.dom.indexed_db", "dart:indexed_db",, P, {
    "^": "",
    _completeRequest: function(request) {
      var t1, completer, t2;
      t1 = new P._Future(0, $.Zone__current, null, [null]);
      completer = new P._SyncCompleter(t1, [null]);
      request.toString;
      t2 = [W.Event];
      new W._EventStreamSubscription(0, request, "success", W._wrapZone(new P._completeRequest_closure(request, completer)), false, t2)._tryResume$0();
      new W._EventStreamSubscription(0, request, "error", W._wrapZone(completer.get$completeError()), false, t2)._tryResume$0();
      return t1;
    },
    Cursor: {
      "^": "Interceptor;key=",
      next$1: [function(receiver, key) {
        receiver.continue(key);
      }, function($receiver) {
        return this.next$1($receiver, null);
      }, "next$0", "call$1", "call$0", "get$next", 0, 2, 216, 2],
      "%": ";IDBCursor"
    },
    CursorWithValue: {
      "^": "Cursor;",
      get$value: function(receiver) {
        var t1, t2;
        t1 = receiver.value;
        t2 = new P._AcceptStructuredCloneDart2Js([], [], false);
        t2.mustCopy = false;
        return t2.walk$1(t1);
      },
      "%": "IDBCursorWithValue"
    },
    Database: {
      "^": "EventTarget;name=,version=",
      close$0: function(receiver) {
        return receiver.close();
      },
      "%": "IDBDatabase"
    },
    _completeRequest_closure: {
      "^": "Closure:0;request,completer",
      call$1: [function(e) {
        var t1, t2;
        t1 = this.request.result;
        t2 = new P._AcceptStructuredCloneDart2Js([], [], false);
        t2.mustCopy = false;
        this.completer.complete$1(0, t2.walk$1(t1));
      }, null, null, 2, 0, null, 0, "call"]
    },
    Index: {
      "^": "Interceptor;name=",
      $isIndex: 1,
      $isObject: 1,
      "%": "IDBIndex"
    },
    KeyRange: {
      "^": "Interceptor;",
      $isKeyRange: 1,
      "%": "IDBKeyRange"
    },
    ObjectStore: {
      "^": "Interceptor;name=",
      add$2: function(receiver, value, key) {
        var request, e, stacktrace, t1, exception;
        try {
          request = null;
          request = this._indexed_db$_add$1(receiver, value);
          t1 = P._completeRequest(request);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          stacktrace = H.getTraceFromException(exception);
          return P.Future_Future$error(e, stacktrace, null);
        }
      },
      add$1: function($receiver, value) {
        return this.add$2($receiver, value, null);
      },
      _indexed_db$_add$2: function(receiver, value, key) {
        return receiver.add(new P._StructuredCloneDart2Js([], []).walk$1(value));
      },
      _indexed_db$_add$1: function($receiver, value) {
        return this._indexed_db$_add$2($receiver, value, null);
      },
      index$1: [function(receiver, $name) {
        return receiver.index($name);
      }, "call$1", "get$index", 2, 0, 213, 23],
      "%": "IDBObjectStore"
    },
    Request: {
      "^": "EventTarget;error=",
      get$result: function(receiver) {
        var t1, t2;
        t1 = receiver.result;
        t2 = new P._AcceptStructuredCloneDart2Js([], [], false);
        t2.mustCopy = false;
        return t2.walk$1(t1);
      },
      "%": "IDBOpenDBRequest|IDBRequest|IDBVersionChangeRequest"
    },
    Transaction: {
      "^": "EventTarget;error=",
      "%": "IDBTransaction"
    }
  }], ["dart.js", "dart:js",, P, {
    "^": "",
    _callDartFunction: [function(callback, captureThis, $self, $arguments) {
      var arguments0, dartArgs;
      if (captureThis === true) {
        arguments0 = [$self];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      dartArgs = P.List_List$from(J.map$1$ax($arguments, P.js___convertToDart$closure()), true, null);
      return P._convertToJS(H.Primitives_applyFunctionWithPositionalArguments(callback, dartArgs));
    }, null, null, 8, 0, null, 122, 133, 134, 135],
    _defineProperty: function(o, $name, value) {
      var exception;
      try {
        if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name)) {
          Object.defineProperty(o, $name, {value: value});
          return true;
        }
      } catch (exception) {
        H.unwrapException(exception);
      }
      return false;
    },
    _getOwnProperty: function(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return;
    },
    _convertToJS: [function(o) {
      var t1;
      if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
        return o;
      t1 = J.getInterceptor(o);
      if (!!t1.$isJsObject)
        return o._jsObject;
      if (!!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow)
        return o;
      if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.$get$_dartProxyCtor()));
    }, "call$1", "js___convertToJS$closure", 2, 0, 0, 28],
    _getJsProxy: function(o, propertyName, createProxy) {
      var jsProxy = P._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart: [function(o) {
      var t1, ms;
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else {
        if (o instanceof Object) {
          t1 = J.getInterceptor(o);
          t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
        } else
          t1 = false;
        if (t1)
          return o;
        else if (o instanceof Date) {
          ms = o.getTime();
          t1 = new P.DateTime(ms, false);
          t1.DateTime$_withValue$2$isUtc(ms, false);
          return t1;
        } else if (o.constructor === $.$get$_dartProxyCtor())
          return o.o;
        else
          return P._wrapToDart(o);
      }
    }, "call$1", "js___convertToDart$closure", 2, 0, 224, 28],
    _wrapToDart: function(o) {
      if (typeof o == "function")
        return P._getDartProxy(o, $.$get$DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
      if (o instanceof Array)
        return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
      return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
    },
    _getDartProxy: function(o, propertyName, createProxy) {
      var dartProxy = P._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    JsObject: {
      "^": "Object;_jsObject",
      $index: ["super$JsObject$$index", function(_, property) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        return P._convertToDart(this._jsObject[property]);
      }],
      $indexSet: ["super$JsObject$$indexSet", function(_, property, value) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        this._jsObject[property] = P._convertToJS(value);
      }],
      get$hashCode: function(_) {
        return 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof P.JsObject && this._jsObject === other._jsObject;
      },
      toString$0: function(_) {
        var t1, exception;
        try {
          t1 = String(this._jsObject);
          return t1;
        } catch (exception) {
          H.unwrapException(exception);
          return this.super$Object$toString(this);
        }
      },
      callMethod$2: function(method, args) {
        var t1, t2;
        t1 = this._jsObject;
        t2 = args == null ? null : P.List_List$from(J.map$1$ax(args, P.js___convertToJS$closure()), true, null);
        return P._convertToDart(t1[method].apply(t1, t2));
      },
      callMethod$1: function(method) {
        return this.callMethod$2(method, null);
      },
      static: {
        JsObject_JsObject: function($constructor, $arguments) {
          var constr, args, factoryFunction;
          constr = P._convertToJS($constructor);
          if ($arguments instanceof Array)
            switch ($arguments.length) {
              case 0:
                return P._wrapToDart(new constr());
              case 1:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0])));
              case 2:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1])));
              case 3:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1]), P._convertToJS($arguments[2])));
              case 4:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1]), P._convertToJS($arguments[2]), P._convertToJS($arguments[3])));
            }
          args = [null];
          C.JSArray_methods.addAll$1(args, new H.MappedListIterable($arguments, P.js___convertToJS$closure(), [null, null]));
          factoryFunction = constr.bind.apply(constr, args);
          String(factoryFunction);
          return P._wrapToDart(new factoryFunction());
        },
        JsObject_JsObject$fromBrowserObject: function(object) {
          if (typeof object === "number" || typeof object === "string" || typeof object === "boolean" || object == null)
            throw H.wrapException(P.ArgumentError$("object cannot be a num, string, bool, or null"));
          return P._wrapToDart(P._convertToJS(object));
        },
        JsObject_JsObject$jsify: function(object) {
          var t1 = J.getInterceptor(object);
          if (!t1.$isMap && !t1.$isIterable)
            throw H.wrapException(P.ArgumentError$("object must be a Map or Iterable"));
          return P._wrapToDart(P.JsObject__convertDataTree(object));
        },
        JsObject__convertDataTree: function(data) {
          return new P.JsObject__convertDataTree__convert(new P._IdentityHashMap(0, null, null, null, null, [null, null])).call$1(data);
        }
      }
    },
    JsObject__convertDataTree__convert: {
      "^": "Closure:0;_convertedObjects",
      call$1: [function(o) {
        var t1, t2, convertedMap, key, convertedList;
        t1 = this._convertedObjects;
        if (t1.containsKey$1(0, o))
          return t1.$index(0, o);
        t2 = J.getInterceptor(o);
        if (!!t2.$isMap) {
          convertedMap = {};
          t1.$indexSet(0, o, convertedMap);
          for (t1 = J.get$iterator$ax(t2.get$keys(o)); t1.moveNext$0();) {
            key = t1.get$current();
            convertedMap[key] = this.call$1(t2.$index(o, key));
          }
          return convertedMap;
        } else if (!!t2.$isIterable) {
          convertedList = [];
          t1.$indexSet(0, o, convertedList);
          C.JSArray_methods.addAll$1(convertedList, t2.map$1(o, this));
          return convertedList;
        } else
          return P._convertToJS(o);
      }, null, null, 2, 0, null, 28, "call"]
    },
    JsFunction: {
      "^": "JsObject;_jsObject",
      apply$2$thisArg: function(args, thisArg) {
        var t1, t2;
        t1 = P._convertToJS(thisArg);
        t2 = P.List_List$from(new H.MappedListIterable(args, P.js___convertToJS$closure(), [null, null]), true, null);
        return P._convertToDart(this._jsObject.apply(t1, t2));
      },
      apply$1: function(args) {
        return this.apply$2$thisArg(args, null);
      }
    },
    JsArray: {
      "^": "JsObject_ListMixin;_jsObject,$ti",
      _checkIndex$1: function(index) {
        var t1;
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this);
        else
          t1 = false;
        if (t1)
          throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this), null, null));
      },
      $index: function(_, index) {
        var t1;
        if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
          if (typeof index === "number" && Math.floor(index) === index)
            t1 = index < 0 || index >= this.get$length(this);
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
        }
        return this.super$JsObject$$index(0, index);
      },
      $indexSet: function(_, index, value) {
        var t1;
        if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
          if (typeof index === "number" && Math.floor(index) === index)
            t1 = index < 0 || index >= this.get$length(this);
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
        }
        this.super$JsObject$$indexSet(0, index, value);
      },
      get$length: function(_) {
        var len = this._jsObject.length;
        if (typeof len === "number" && len >>> 0 === len)
          return len;
        throw H.wrapException(new P.StateError("Bad JsArray length"));
      },
      set$length: function(_, $length) {
        this.super$JsObject$$indexSet(0, "length", $length);
      },
      add$1: function(_, value) {
        this.callMethod$2("push", [value]);
      },
      addAll$1: function(_, iterable) {
        this.callMethod$2("push", iterable instanceof Array ? iterable : P.List_List$from(iterable, true, null));
      },
      insert$2: function(_, index, element) {
        var t1;
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this) + 1;
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
        this.callMethod$2("splice", [index, 0, element]);
      },
      removeAt$1: function(_, index) {
        this._checkIndex$1(index);
        return J.$index$asx(this.callMethod$2("splice", [index, 1]), 0);
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        var $length, args;
        P.JsArray__checkRange(start, end, this.get$length(this));
        $length = J.$sub$n(end, start);
        if (J.$eq$($length, 0))
          return;
        if (J.$lt$n(skipCount, 0))
          throw H.wrapException(P.ArgumentError$(skipCount));
        args = [start, $length];
        C.JSArray_methods.addAll$1(args, J.skip$1$ax(iterable, skipCount).take$1(0, $length));
        this.callMethod$2("splice", args);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      sort$1: function(_, compare) {
        this.callMethod$2("sort", [compare]);
      },
      static: {
        JsArray__checkRange: function(start, end, $length) {
          var t1 = J.getInterceptor$n(start);
          if (t1.$lt(start, 0) || t1.$gt(start, $length))
            throw H.wrapException(P.RangeError$range(start, 0, $length, null, null));
          t1 = J.getInterceptor$n(end);
          if (t1.$lt(end, start) || t1.$gt(end, $length))
            throw H.wrapException(P.RangeError$range(end, start, $length, null, null));
        }
      }
    },
    JsObject_ListMixin: {
      "^": "JsObject+ListMixin;$ti",
      $asList: null,
      $asIterable: null,
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    _convertToJS_closure: {
      "^": "Closure:0;",
      call$1: function(o) {
        var jsFunction = function(_call, f, captureThis) {
          return function() {
            return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
          };
        }(P._callDartFunction, o, false);
        P._defineProperty(jsFunction, $.$get$DART_CLOSURE_PROPERTY_NAME(), o);
        return jsFunction;
      }
    },
    _convertToJS_closure0: {
      "^": "Closure:0;ctor",
      call$1: function(o) {
        return new this.ctor(o);
      }
    },
    _wrapToDart_closure: {
      "^": "Closure:0;",
      call$1: function(o) {
        return new P.JsFunction(o);
      }
    },
    _wrapToDart_closure0: {
      "^": "Closure:0;",
      call$1: function(o) {
        return new P.JsArray(o, [null]);
      }
    },
    _wrapToDart_closure1: {
      "^": "Closure:0;",
      call$1: function(o) {
        return new P.JsObject(o);
      }
    }
  }], ["dart.math", "dart:math",, P, {
    "^": "",
    _JenkinsSmiHash_combine0: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish0: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    min: function(a, b) {
      if (typeof a !== "number")
        throw H.wrapException(P.ArgumentError$(a));
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && C.JSNumber_methods.get$isNegative(b) || isNaN(b))
          return b;
        return a;
      }
      return a;
    },
    max: function(a, b) {
      var t1;
      if (typeof a !== "number")
        throw H.wrapException(P.ArgumentError$(a));
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if (isNaN(b))
          return b;
        return a;
      }
      if (b === 0)
        t1 = a === 0 ? 1 / a < 0 : a < 0;
      else
        t1 = false;
      if (t1)
        return b;
      return a;
    },
    Random_Random: function(seed) {
      return C.C__JSRandom;
    },
    _JSRandom: {
      "^": "Object;",
      nextInt$1: function(max) {
        if (max <= 0 || max > 4294967296)
          throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
        return Math.random() * max >>> 0;
      }
    },
    Point: {
      "^": "Object;x>,y>,$ti",
      toString$0: function(_) {
        return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (!(other instanceof P.Point))
          return false;
        t1 = this.x;
        t2 = other.x;
        if (t1 == null ? t2 == null : t1 === t2) {
          t1 = this.y;
          t2 = other.y;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2;
        t1 = J.get$hashCode$(this.x);
        t2 = J.get$hashCode$(this.y);
        return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
      },
      $add: function(_, other) {
        var t1, t2, t3, t4;
        t1 = this.x;
        t2 = J.getInterceptor$x(other);
        t3 = t2.get$x(other);
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = this.y;
        t2 = t2.get$y(other);
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return new P.Point(t1 + t3, t4 + t2, this.$ti);
      },
      $sub: function(_, other) {
        var t1, t2, t3, t4;
        t1 = this.x;
        t2 = J.getInterceptor$x(other);
        t3 = t2.get$x(other);
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = this.y;
        t2 = t2.get$y(other);
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return new P.Point(t1 - t3, t4 - t2, this.$ti);
      },
      $mul: function(_, factor) {
        var t1, t2;
        t1 = this.x;
        if (typeof t1 !== "number")
          return t1.$mul();
        t2 = this.y;
        if (typeof t2 !== "number")
          return t2.$mul();
        return new P.Point(t1 * factor, t2 * factor, this.$ti);
      }
    },
    _RectangleBase: {
      "^": "Object;$ti",
      get$right: function(_) {
        var t1, t2;
        t1 = this.left;
        t2 = this.width;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return t1 + t2;
      },
      get$bottom: function(_) {
        var t1, t2;
        t1 = this.top;
        t2 = this.height;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return t1 + t2;
      },
      toString$0: function(_) {
        return "Rectangle (" + H.S(this.left) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
      },
      $eq: function(_, other) {
        var t1, t2, t3, t4;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = this.left;
        t3 = t1.get$left(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t3 = this.top;
          t4 = t1.get$top(other);
          if (t3 == null ? t4 == null : t3 === t4) {
            t4 = this.width;
            if (typeof t2 !== "number")
              return t2.$add();
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (t2 + t4 === t1.get$right(other)) {
              t2 = this.height;
              if (typeof t3 !== "number")
                return t3.$add();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t1 = t3 + t2 === t1.get$bottom(other);
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2, t3, t4, t5, t6;
        t1 = this.left;
        t2 = J.get$hashCode$(t1);
        t3 = this.top;
        t4 = J.get$hashCode$(t3);
        t5 = this.width;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = this.height;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t6 !== "number")
          return H.iae(t6);
        return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t2), t4), t1 + t5 & 0x1FFFFFFF), t3 + t6 & 0x1FFFFFFF));
      },
      get$topLeft: function(_) {
        return new P.Point(this.left, this.top, this.$ti);
      }
    },
    Rectangle: {
      "^": "_RectangleBase;left>,top>,width>,height>,$ti",
      $asRectangle: null,
      static: {
        Rectangle$: function(left, $top, width, height, $T) {
          var t1, t2;
          if (typeof width !== "number")
            return width.$lt();
          if (width < 0)
            t1 = -width * 0;
          else
            t1 = width;
          if (typeof height !== "number")
            return height.$lt();
          if (height < 0)
            t2 = -height * 0;
          else
            t2 = height;
          return new P.Rectangle(left, $top, t1, t2, [$T]);
        }
      }
    }
  }], ["dart.dom.svg", "dart:svg",, P, {
    "^": "",
    AElement: {
      "^": "GraphicsElement;target=,href=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAElement"
    },
    Angle: {
      "^": "Interceptor;value=,valueAsString=",
      "%": "SVGAngle"
    },
    AnimationElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"
    },
    FEBlendElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEBlendElement"
    },
    FEColorMatrixElement: {
      "^": "SvgElement;type=,result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEColorMatrixElement"
    },
    FEComponentTransferElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEComponentTransferElement"
    },
    FECompositeElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFECompositeElement"
    },
    FEConvolveMatrixElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEConvolveMatrixElement"
    },
    FEDiffuseLightingElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEDiffuseLightingElement"
    },
    FEDisplacementMapElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEDisplacementMapElement"
    },
    FEFloodElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEFloodElement"
    },
    FEGaussianBlurElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEGaussianBlurElement"
    },
    FEImageElement: {
      "^": "SvgElement;result=,x=,y=,href=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEImageElement"
    },
    FEMergeElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEMergeElement"
    },
    FEMorphologyElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEMorphologyElement"
    },
    FEOffsetElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEOffsetElement"
    },
    FEPointLightElement: {
      "^": "SvgElement;x=,y=",
      "%": "SVGFEPointLightElement"
    },
    FESpecularLightingElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFESpecularLightingElement"
    },
    FESpotLightElement: {
      "^": "SvgElement;x=,y=",
      "%": "SVGFESpotLightElement"
    },
    FETileElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFETileElement"
    },
    FETurbulenceElement: {
      "^": "SvgElement;type=,result=,x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFETurbulenceElement"
    },
    FilterElement: {
      "^": "SvgElement;x=,y=,href=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFilterElement"
    },
    ForeignObjectElement: {
      "^": "GraphicsElement;x=,y=",
      "%": "SVGForeignObjectElement"
    },
    GeometryElement: {
      "^": "GraphicsElement;",
      "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
    },
    GraphicsElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
    },
    ImageElement0: {
      "^": "GraphicsElement;x=,y=,href=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGImageElement"
    },
    Length: {
      "^": "Interceptor;value=,valueAsString=",
      $isObject: 1,
      "%": "SVGLength"
    },
    LengthList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin14;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      $isList: 1,
      $asList: function() {
        return [P.Length];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Length];
      },
      "%": "SVGLengthList"
    },
    Interceptor_ListMixin14: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [P.Length];
      },
      $asIterable: function() {
        return [P.Length];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin14: {
      "^": "Interceptor_ListMixin14+ImmutableListMixin;",
      $asList: function() {
        return [P.Length];
      },
      $asIterable: function() {
        return [P.Length];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    MarkerElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGMarkerElement"
    },
    MaskElement: {
      "^": "SvgElement;x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGMaskElement"
    },
    Number: {
      "^": "Interceptor;value=",
      $isObject: 1,
      "%": "SVGNumber"
    },
    NumberList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin15;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      $isList: 1,
      $asList: function() {
        return [P.Number];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Number];
      },
      "%": "SVGNumberList"
    },
    Interceptor_ListMixin15: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [P.Number];
      },
      $asIterable: function() {
        return [P.Number];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin15: {
      "^": "Interceptor_ListMixin15+ImmutableListMixin;",
      $asList: function() {
        return [P.Number];
      },
      $asIterable: function() {
        return [P.Number];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    PathSeg: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "SVGPathSegClosePath;SVGPathSeg"
    },
    PathSegArcAbs: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegArcAbs"
    },
    PathSegArcRel: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegArcRel"
    },
    PathSegCurvetoCubicAbs: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegCurvetoCubicAbs"
    },
    PathSegCurvetoCubicRel: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegCurvetoCubicRel"
    },
    PathSegCurvetoCubicSmoothAbs: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegCurvetoCubicSmoothAbs"
    },
    PathSegCurvetoCubicSmoothRel: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegCurvetoCubicSmoothRel"
    },
    PathSegCurvetoQuadraticAbs: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegCurvetoQuadraticAbs"
    },
    PathSegCurvetoQuadraticRel: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegCurvetoQuadraticRel"
    },
    PathSegCurvetoQuadraticSmoothAbs: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegCurvetoQuadraticSmoothAbs"
    },
    PathSegCurvetoQuadraticSmoothRel: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegCurvetoQuadraticSmoothRel"
    },
    PathSegLinetoAbs: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegLinetoAbs"
    },
    PathSegLinetoHorizontalAbs: {
      "^": "PathSeg;x=",
      "%": "SVGPathSegLinetoHorizontalAbs"
    },
    PathSegLinetoHorizontalRel: {
      "^": "PathSeg;x=",
      "%": "SVGPathSegLinetoHorizontalRel"
    },
    PathSegLinetoRel: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegLinetoRel"
    },
    PathSegLinetoVerticalAbs: {
      "^": "PathSeg;y=",
      "%": "SVGPathSegLinetoVerticalAbs"
    },
    PathSegLinetoVerticalRel: {
      "^": "PathSeg;y=",
      "%": "SVGPathSegLinetoVerticalRel"
    },
    PathSegList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin16;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      $isList: 1,
      $asList: function() {
        return [P.PathSeg];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.PathSeg];
      },
      "%": "SVGPathSegList"
    },
    Interceptor_ListMixin16: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [P.PathSeg];
      },
      $asIterable: function() {
        return [P.PathSeg];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin16: {
      "^": "Interceptor_ListMixin16+ImmutableListMixin;",
      $asList: function() {
        return [P.PathSeg];
      },
      $asIterable: function() {
        return [P.PathSeg];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    PathSegMovetoAbs: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegMovetoAbs"
    },
    PathSegMovetoRel: {
      "^": "PathSeg;x=,y=",
      "%": "SVGPathSegMovetoRel"
    },
    PatternElement: {
      "^": "SvgElement;x=,y=,href=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGPatternElement"
    },
    Point1: {
      "^": "Interceptor;x=,y=",
      "%": "SVGPoint"
    },
    PointList: {
      "^": "Interceptor;length=",
      "%": "SVGPointList"
    },
    Rect: {
      "^": "Interceptor;height},width},x=,y=",
      "%": "SVGRect"
    },
    RectElement: {
      "^": "GeometryElement;x=,y=",
      "%": "SVGRectElement"
    },
    ScriptElement: {
      "^": "SvgElement;type=,href=",
      $isScriptElement: 1,
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGScriptElement"
    },
    StringList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin17;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      "%": "SVGStringList"
    },
    Interceptor_ListMixin17: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [P.String];
      },
      $asIterable: function() {
        return [P.String];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin17: {
      "^": "Interceptor_ListMixin17+ImmutableListMixin;",
      $asList: function() {
        return [P.String];
      },
      $asIterable: function() {
        return [P.String];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    StyleElement0: {
      "^": "SvgElement;disabled},type=",
      "%": "SVGStyleElement"
    },
    _AttributeClassSet: {
      "^": "CssClassSetImpl;_svg$_element",
      readClasses$0: function() {
        var classname, s, t1, t2, _i, trimmed;
        classname = this._svg$_element.getAttribute("class");
        s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        if (classname == null)
          return s;
        for (t1 = classname.split(" "), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          trimmed = J.trim$0$s(t1[_i]);
          if (trimmed.length !== 0)
            s.add$1(0, trimmed);
        }
        return s;
      },
      writeClasses$1: function(s) {
        this._svg$_element.setAttribute("class", s.join$1(0, " "));
      }
    },
    SvgElement: {
      "^": "Element;",
      get$classes: function(receiver) {
        return new P._AttributeClassSet(receiver);
      },
      get$children: function(receiver) {
        return new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
      },
      set$innerHtml: function(receiver, value) {
        this.setInnerHtml$1(receiver, value);
      },
      createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
        var t1, html, t2, fragment, svgFragment, root;
        if (treeSanitizer == null) {
          if (validator == null) {
            t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
            validator = new W.NodeValidatorBuilder(t1);
            t1.push(W._Html5NodeValidator$(null));
            t1.push(W._TemplatingNodeValidator$());
            t1.push(new W._SvgNodeValidator());
          }
          treeSanitizer = new W._ValidatingTreeSanitizer(validator);
        }
        html = '<svg version="1.1">' + svg + "</svg>";
        t1 = document;
        t2 = t1.body;
        fragment = (t2 && C.BodyElement_methods).createFragment$2$treeSanitizer(t2, html, treeSanitizer);
        svgFragment = t1.createDocumentFragment();
        fragment.toString;
        t1 = new W._ChildNodeListLazy(fragment);
        root = t1.get$single(t1);
        for (; t1 = root.firstChild, t1 != null;)
          svgFragment.appendChild(t1);
        return svgFragment;
      },
      get$onChange: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "change", false, [W.Event]);
      },
      get$onClick: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "click", false, [W.MouseEvent]);
      },
      get$onDoubleClick: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "dblclick", false, [W.Event]);
      },
      get$onKeyDown: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "keydown", false, [W.KeyboardEvent]);
      },
      get$onMouseDown: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "mousedown", false, [W.MouseEvent]);
      },
      $isSvgElement: 1,
      $isEventTarget: 1,
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGMetadataElement|SVGStopElement|SVGTitleElement;SVGElement",
      static: {
        "^": "SvgElement_pauseEvent<"
      }
    },
    SvgSvgElement: {
      "^": "GraphicsElement;x=,y=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGSVGElement"
    },
    SymbolElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGSymbolElement"
    },
    TextContentElement: {
      "^": "GraphicsElement;",
      "%": ";SVGTextContentElement"
    },
    TextPathElement: {
      "^": "TextContentElement;href=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGTextPathElement"
    },
    TextPositioningElement: {
      "^": "TextContentElement;x=,y=",
      "%": "SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"
    },
    Transform: {
      "^": "Interceptor;type=",
      $isObject: 1,
      "%": "SVGTransform"
    },
    TransformList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin18;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      $isList: 1,
      $asList: function() {
        return [P.Transform];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Transform];
      },
      "%": "SVGTransformList"
    },
    Interceptor_ListMixin18: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [P.Transform];
      },
      $asIterable: function() {
        return [P.Transform];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin18: {
      "^": "Interceptor_ListMixin18+ImmutableListMixin;",
      $asList: function() {
        return [P.Transform];
      },
      $asIterable: function() {
        return [P.Transform];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    UseElement: {
      "^": "GraphicsElement;x=,y=,href=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGUseElement"
    },
    ViewElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGViewElement"
    },
    ViewSpec: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGViewSpec"
    },
    _GradientElement: {
      "^": "SvgElement;href=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"
    },
    _SVGCursorElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGCursorElement"
    },
    _SVGFEDropShadowElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEDropShadowElement"
    },
    _SVGMPathElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGMPathElement"
    }
  }], ["dart.typed_data", "dart:typed_data",, P, {
    "^": "",
    Uint8List: {
      "^": "Object;",
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      $isTypedData: 1,
      $isEfficientLength: 1
    }
  }], ["dart.dom.web_audio", "dart:web_audio",, P, {
    "^": "",
    AudioBuffer: {
      "^": "Interceptor;length=",
      "%": "AudioBuffer"
    },
    AudioBufferSourceNode: {
      "^": "AudioSourceNode;",
      start$3: [function(receiver, when, grainOffset, grainDuration) {
        if (!!receiver.start)
          if (grainDuration != null)
            receiver.start(when, grainOffset, grainDuration);
          else if (grainOffset != null)
            receiver.start(when, grainOffset);
          else
            receiver.start(when);
        else if (grainDuration != null)
          receiver.noteOn(when, grainOffset, grainDuration);
        else if (grainOffset != null)
          receiver.noteOn(when, grainOffset);
        else
          receiver.noteOn(when);
      }, function($receiver, when) {
        return this.start$3($receiver, when, null, null);
      }, "start$1", function($receiver, when, grainOffset) {
        return this.start$3($receiver, when, grainOffset, null);
      }, "start$2", "call$3", "call$1", "call$2", "get$start", 2, 4, 205, 2, 2, 78, 86, 103],
      "%": "AudioBufferSourceNode"
    },
    AudioContext: {
      "^": "EventTarget;",
      close$0: function(receiver) {
        return receiver.close();
      },
      resume$0: function(receiver) {
        return receiver.resume();
      },
      "%": "AudioContext|OfflineAudioContext|webkitAudioContext"
    },
    AudioNode: {
      "^": "EventTarget;",
      "%": "AnalyserNode|AudioChannelMerger|AudioChannelSplitter|AudioDestinationNode|AudioGainNode|AudioPannerNode|ChannelMergerNode|ChannelSplitterNode|ConvolverNode|DelayNode|DynamicsCompressorNode|GainNode|JavaScriptAudioNode|MediaStreamAudioDestinationNode|PannerNode|RealtimeAnalyserNode|ScriptProcessorNode|StereoPannerNode|WaveShaperNode|webkitAudioPannerNode;AudioNode"
    },
    AudioParam: {
      "^": "Interceptor;value=",
      "%": "AudioParam"
    },
    AudioSourceNode: {
      "^": "AudioNode;",
      "%": "MediaElementAudioSourceNode|MediaStreamAudioSourceNode;AudioSourceNode"
    },
    BiquadFilterNode: {
      "^": "AudioNode;type=",
      "%": "BiquadFilterNode"
    },
    OscillatorNode: {
      "^": "AudioSourceNode;type=",
      start$1: [function(receiver, when) {
        return receiver.start(when);
      }, function($receiver) {
        return $receiver.start();
      }, "start$0", "call$1", "call$0", "get$start", 0, 2, 202, 2, 78],
      "%": "Oscillator|OscillatorNode"
    }
  }], ["dart.dom.web_gl", "dart:web_gl",, P, {
    "^": "",
    ActiveInfo: {
      "^": "Interceptor;name=,type=",
      "%": "WebGLActiveInfo"
    },
    RenderingContext: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "WebGLRenderingContext"
    },
    RenderingContext2: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "WebGL2RenderingContext"
    },
    _WebGL2RenderingContextBase: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "WebGL2RenderingContextBase"
    }
  }], ["dart.dom.web_sql", "dart:web_sql",, P, {
    "^": "",
    SqlDatabase: {
      "^": "Interceptor;version=",
      "%": "Database"
    },
    SqlError: {
      "^": "Interceptor;code=,message=",
      "%": "SQLError"
    },
    SqlResultSetRowList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin19;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return P.convertNativeToDart_Dictionary(receiver.item(index));
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.Map];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Map];
      },
      "%": "SQLResultSetRowList"
    },
    Interceptor_ListMixin19: {
      "^": "Interceptor+ListMixin;",
      $asList: function() {
        return [P.Map];
      },
      $asIterable: function() {
        return [P.Map];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    Interceptor_ListMixin_ImmutableListMixin19: {
      "^": "Interceptor_ListMixin19+ImmutableListMixin;",
      $asList: function() {
        return [P.Map];
      },
      $asIterable: function() {
        return [P.Map];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    }
  }], ["atom", "package:atom/atom.dart",, E, {
    "^": "",
    Atom: {
      "^": "ProxyHolder;_commands,_config,_contextMenu,_grammars,_notifications,_packages,_project,_views,_workspace,obj",
      getVersion$0: function() {
        return this.invoke$1("getVersion");
      },
      pickFolder$0: function() {
        var t1 = new P._Future(0, $.Zone__current, null, [null]);
        this.invoke$2("pickFolder", new E.Atom_pickFolder_closure(new P._AsyncCompleter(t1, [null])));
        return t1;
      },
      Atom$0: function() {
        var t1, t2, t3;
        t1 = this.obj;
        t2 = J.getInterceptor$asx(t1);
        t3 = t2.$index(t1, "commands");
        this._commands = new D.CommandRegistry(P.StreamController_StreamController$broadcast(null, null, false, null), t3);
        this._config = new T.Config(t2.$index(t1, "config"));
        this._contextMenu = new D.ContextMenuManager(t2.$index(t1, "contextMenu"));
        this._grammars = new T.GrammarRegistry(T._cvt(t2.$index(t1, "grammars")));
        this._notifications = new D.NotificationManager(t2.$index(t1, "notifications"));
        this._packages = new L.PackageManager(t2.$index(t1, "packages"));
        this._project = new Y.Project(t2.$index(t1, "project"));
        t3 = new Y.ViewRegistry(t2.$index(t1, "views"));
        $.ViewRegistry__instance = t3;
        this._views = t3;
        this._workspace = new Y.Workspace(new B.FutureSerializer([], [], [null]), t2.$index(t1, "workspace"));
      }
    },
    Atom_pickFolder_closure: {
      "^": "Closure:0;completer",
      call$1: [function(result) {
        var t1, t2, t3;
        t1 = J.getInterceptor(result);
        t2 = !!t1.$isList && t1.get$isNotEmpty(result);
        t3 = this.completer;
        if (t2)
          t3.complete$1(0, t1.get$first(result));
        else
          t3.complete$1(0, null);
      }, null, null, 2, 0, null, 3, "call"]
    }
  }], ["atom_utils", "package:atom/atom_utils.dart",, M, {
    "^": "",
    which: function(execName, isBatchScript) {
      var ext, t1;
      if ($.$get$isWindows() === true) {
        ext = isBatchScript ? "bat" : "exe";
        return X.exec("where", [execName + "." + ext], null).then$1(new M.which_closure());
      } else {
        t1 = $._shellWrangler;
        if (t1 == null) {
          t1 = X.ShellWrangler$();
          $._shellWrangler = t1;
        }
        return X.exec("which", [execName], t1._env).then$1(new M.which_closure0());
      }
    },
    TrustedHtmlTreeSanitizer: {
      "^": "Object;",
      sanitizeTree$1: function(node) {
      }
    },
    which_closure: {
      "^": "Closure:3;",
      call$1: [function(result) {
        result = J.trim$0$s(result);
        return C.JSString_methods.contains$1(result, "\n") ? C.JSArray_methods.get$first(result.split("\n")) : result;
      }, null, null, 2, 0, null, 3, "call"]
    },
    which_closure0: {
      "^": "Closure:3;",
      call$1: [function(result) {
        result = J.trim$0$s(result);
        return C.JSString_methods.contains$1(result, "\n") ? C.JSArray_methods.get$first(result.split("\n")) : result;
      }, null, null, 2, 0, null, 3, "call"]
    }
  }], ["", "package:atom/node/command.dart",, D, {
    "^": "",
    _cvt2: function(object) {
      if (object == null)
        return;
      if (object instanceof P.JsObject)
        return object;
      return P.JsObject_JsObject$fromBrowserObject(object);
    },
    CommandRegistry: {
      "^": "ProxyHolder;_dispatchedController,obj",
      add$3: function(_, target, commandName, callback) {
        return new K.JsDisposable(this.invoke$4("add", target, commandName, new D.CommandRegistry_add_closure(this, commandName, callback)));
      }
    },
    CommandRegistry_add_closure: {
      "^": "Closure:0;$this,commandName,callback",
      call$1: [function(e) {
        var t1 = this.$this._dispatchedController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(this.commandName);
        this.callback.call$1(new D.AtomEvent(D._cvt2(e)));
      }, null, null, 2, 0, null, 0, "call"]
    },
    ContextMenuManager: {
      "^": "ProxyHolder;obj",
      add$2: function(_, selector, items) {
        return new K.JsDisposable(this.invoke$2("add", P.LinkedHashMap__makeLiteral([selector, new H.MappedListIterable(items, new D.ContextMenuManager_add_closure(), [null, null]).toList$0(0)])));
      }
    },
    ContextMenuManager_add_closure: {
      "^": "Closure:0;",
      call$1: [function(item) {
        return item.toJs$0();
      }, null, null, 2, 0, null, 45, "call"]
    },
    ContextMenuItem: {
      "^": "Object;",
      toJs$0: function() {
        return K.jsify(P.LinkedHashMap__makeLiteral(["label", this.label, "command", this.command, "shouldDisplay", new D.ContextMenuItem_toJs_closure(this)]));
      }
    },
    ContextMenuItem_toJs_closure: {
      "^": "Closure:0;$this",
      call$1: [function(e) {
        return this.$this.shouldDisplay$1(new D.AtomEvent(D._cvt2(e)));
      }, null, null, 2, 0, null, 0, "call"]
    },
    _SeparatorMenuItem: {
      "^": "ContextMenuItem;label,command",
      shouldDisplay$1: function($event) {
        return true;
      },
      toJs$0: function() {
        return K.jsify(P.LinkedHashMap__makeLiteral(["type", "separator"]));
      }
    },
    AtomEvent: {
      "^": "ProxyHolder;obj",
      get$editor: function() {
        return new Y.TextEditor(Y._cvt1(new Y.TextEditorElement(Y._cvt1(J.$index$asx(this.obj, "currentTarget"))).invoke$1("getModel")));
      },
      get$targetFilePath: function() {
        var target, child, obj, e, st, t1, exception;
        try {
          target = J.$index$asx(this.obj, "target");
          if (!!J.getInterceptor(target).$isElement) {
            if (J.getAttribute$1$x(target, "data-path") != null) {
              t1 = J.getAttribute$1$x(target, "data-path");
              return t1;
            }
            if (J.get$isEmpty$asx(J.get$children$x(target)))
              return;
            child = J.get$first$ax(J.get$children$x(target));
            t1 = J.getAttribute$1$x(child, "data-path");
            return t1;
          } else if (target instanceof P.JsObject) {
            obj = target.callMethod$2("querySelector", ["span"]);
            if (obj == null)
              return;
            obj = P.JsObject_JsObject$fromBrowserObject(obj);
            t1 = obj.callMethod$2("getAttribute", ["data-path"]);
            return t1;
          } else
            return;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          st = H.getTraceFromException(exception);
          $.$get$_logger20().info$3("exception while handling context menu", e, st);
          return;
        }
      },
      preventDefault$0: function(_) {
        return this.invoke$1("preventDefault");
      },
      get$defaultPrevented: function(_) {
        return J.$index$asx(this.obj, "defaultPrevented");
      },
      stopPropagation$0: function(_) {
        return this.invoke$1("stopPropagation");
      },
      stopImmediatePropagation$0: function(_) {
        return this.invoke$1("stopImmediatePropagation");
      }
    }
  }], ["", "package:atom/node/config.dart",, T, {
    "^": "",
    _cvt: function(object) {
      if (object == null)
        return;
      if (object instanceof P.JsObject)
        return object;
      return P.JsObject_JsObject$fromBrowserObject(object);
    },
    Config: {
      "^": "ProxyHolder;obj",
      getValue$2$scope: function(keyPath, scope) {
        return this.invoke$3("get", keyPath, scope != null ? P.LinkedHashMap__makeLiteral(["scope", scope]) : null);
      },
      getValue$1: function(keyPath) {
        return this.getValue$2$scope(keyPath, null);
      },
      observe$3: function(_, keyPath, options, callback) {
        return new K.JsDisposable(this.invoke$4("observe", keyPath, P.LinkedHashMap__makeEmpty(), callback));
      },
      onDidChange$2: [function(keyPath, options) {
        var t1, controller;
        t1 = {};
        t1.disposable = null;
        controller = P.StreamController_StreamController$broadcast(new T.Config_onDidChange_closure(t1), null, false, null);
        t1.disposable = this.observe$3(0, keyPath, options, new T.Config_onDidChange_closure0(controller));
        return new P._BroadcastStream(controller, [H.getTypeArgumentByIndex(controller, 0)]);
      }, function(keyPath) {
        return this.onDidChange$2(keyPath, null);
      }, "onDidChange$1", "call$2", "call$1", "get$onDidChange", 2, 2, 201, 2]
    },
    Config_onDidChange_closure: {
      "^": "Closure:1;_box_0",
      call$0: function() {
        var t1 = this._box_0.disposable;
        if (t1 != null)
          t1.invoke$1("dispose");
      }
    },
    Config_onDidChange_closure0: {
      "^": "Closure:0;controller",
      call$1: [function(e) {
        var t1 = this.controller;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(e);
        return;
      }, null, null, 2, 0, null, 0, "call"]
    },
    Grammar: {
      "^": "ProxyHolder;obj"
    },
    GrammarRegistry: {
      "^": "ProxyHolder;obj"
    },
    ScopeDescriptor: {
      "^": "ProxyHolder;obj"
    }
  }], ["node.fs", "package:atom/node/fs.dart",, F, {
    "^": "",
    _create: function(className, arg1, arg2) {
      return P.JsObject_JsObject(J.$index$asx($.$get$context().callMethod$2("require", ["atom"]), className), [arg1]);
    },
    _cvt0: function(object) {
      if (object == null)
        return;
      return P.JsObject_JsObject$fromBrowserObject(object);
    },
    FS: {
      "^": "ProxyHolder;_os,separator,obj",
      basename$1: function(path) {
        var t1, t2, index;
        t1 = this.separator;
        t2 = J.getInterceptor$s(path);
        if (t2.endsWith$1(path, t1))
          path = t2.substring$2(path, 0, J.$sub$n(t2.get$length(path), 1));
        t2 = J.getInterceptor$asx(path);
        index = t2.lastIndexOf$1(path, t1);
        t1 = J.getInterceptor(index);
        return t1.$eq(index, -1) ? path : t2.substring$1(path, t1.$add(index, 1));
      },
      dirname$1: function(entry) {
        var t1, index;
        t1 = J.getInterceptor(entry);
        if (!!t1.$isEntry0)
          return J.$index$asx(entry.invoke$1("getParent"), "path");
        index = t1.lastIndexOf$1(entry, this.separator);
        return J.$eq$(index, -1) ? null : t1.substring$2(entry, 0, index);
      },
      join$4: function(_, dir, arg1, arg2, arg3) {
        var t1, path;
        t1 = this.separator;
        path = H.S(dir) + t1 + H.S(arg1);
        if (arg2 != null) {
          path = path + t1 + H.S(arg2);
          if (arg3 != null)
            path = path + t1 + arg3;
        }
        return path;
      },
      join$2: function($receiver, dir, arg1) {
        return this.join$4($receiver, dir, arg1, null, null);
      },
      join$3: function($receiver, dir, arg1, arg2) {
        return this.join$4($receiver, dir, arg1, arg2, null);
      },
      relativize$2: function(root, path) {
        var t1 = J.getInterceptor$s(path);
        if (t1.startsWith$1(path, root)) {
          path = t1.substring$1(path, J.get$length$asx(root));
          if (C.JSString_methods.startsWith$1(path, this.separator))
            path = C.JSString_methods.substring$1(path, 1);
        }
        return path;
      },
      resolveTilde$1: function(path) {
        var $home, t1, exception;
        if (path == null)
          return;
        t1 = J.getInterceptor$s(path);
        if (!t1.startsWith$1(path, "~/"))
          return path;
        $home = null;
        try {
          $home = $.$get$fs()._os.callMethod$1("homedir");
        } catch (exception) {
          H.unwrapException(exception);
          return path;
        }
        if (!J.endsWith$1$s($home, "/"))
          $home = J.$add$ns($home, "/");
        return J.$add$ns($home, t1.substring$1(path, 2));
      }
    },
    Stats: {
      "^": "ProxyHolder;obj",
      isFile$0: function(_) {
        return this.invoke$1("isFile");
      },
      isDirectory$0: function(_) {
        return this.invoke$1("isDirectory");
      }
    },
    Directory: {
      "^": "Entry0;obj",
      getFile$1: function(_, filename) {
        return new F.File(F._cvt0(this.invoke$2("getFile", filename)));
      },
      getEntriesSync$0: function() {
        return H.subtypeCast(J.map$1$ax(this.invoke$1("getEntriesSync"), new F.Directory_getEntriesSync_closure()).toList$0(0), "$isList", [F.Entry0], "$asList");
      },
      contains$1: function(_, p) {
        return this.invoke$2("contains", p);
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(J.$index$asx(this.obj, "path"));
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof F.Directory && J.$eq$(J.$index$asx(this.obj, "path"), J.$index$asx(other.obj, "path"));
      }
    },
    Directory_getEntriesSync_closure: {
      "^": "Closure:0;",
      call$1: [function(entry) {
        entry = F._cvt0(entry);
        return entry.callMethod$1("isFile") === true ? new F.File(entry) : new F.Directory(entry);
      }, null, null, 2, 0, null, 46, "call"]
    },
    File: {
      "^": "Entry0;obj",
      readSync$1: function(flushCache) {
        return this.invoke$2("readSync", flushCache);
      },
      readSync$0: function() {
        return this.readSync$1(null);
      },
      writeSync$1: function(text) {
        return this.invoke$2("writeSync", text);
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(J.$index$asx(this.obj, "path"));
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof F.File && J.$eq$(J.$index$asx(this.obj, "path"), J.$index$asx(other.obj, "path"));
      }
    },
    Entry0: {
      "^": "ProxyHolder;",
      get$onDidChange: function() {
        return this.eventStream$1("onDidChange");
      },
      get$path: function(_) {
        return J.$index$asx(this.obj, "path");
      },
      isFile$0: function(_) {
        return this.invoke$1("isFile");
      },
      isDirectory$0: function(_) {
        return this.invoke$1("isDirectory");
      },
      existsSync$0: function() {
        return this.invoke$1("existsSync");
      },
      getBaseName$0: function() {
        return this.invoke$1("getBaseName");
      },
      getPath$0: function() {
        return this.invoke$1("getPath");
      },
      getParent$0: function(_) {
        return new F.Directory(this.invoke$1("getParent"));
      },
      toString$0: function(_) {
        return J.$index$asx(this.obj, "path");
      }
    }
  }], ["node", "package:atom/node/node.dart",, Y, {
    "^": "",
    require: function(input) {
      return $.$get$context().callMethod$2("require", [input]);
    }
  }], ["", "package:atom/node/notification.dart",, D, {
    "^": "",
    promptUser: function($prompt, defaultText, isDart, selectLastWord, selectText) {
      var t1, completer, t2, t3, element, editorElement, editor;
      if (defaultText == null)
        defaultText = "";
      t1 = new P._Future(0, $.Zone__current, null, [null]);
      completer = new P._AsyncCompleter(t1, [null]);
      t2 = [];
      t3 = document;
      element = t3.createElement("div");
      J.setInnerHtml$2$treeSanitizer$x(element, "    <label>" + $prompt + "</label>\n    <atom-text-editor mini>" + H.S(defaultText) + "</atom-text-editor>\n", new M.TrustedHtmlTreeSanitizer());
      editorElement = element.querySelector("atom-text-editor");
      editor = new Y.TextEditor(Y._cvt1(J.$index$asx($.$get$context(), "getTextEditorForElement").apply$1([editorElement])));
      if (selectText)
        editor.invoke$1("selectAll");
      else if (selectLastWord) {
        editor.invoke$1("moveToEndOfLine");
        editor.invoke$1("selectToBeginningOfWord");
      }
      if (isDart) {
        t3 = $.$get$atom()._grammars.invoke$2("grammarForScopeName", "source.dart");
        editor.invoke$2("setGrammar", t3 == null ? null : new T.Grammar(T._cvt(t3)));
      }
      P.Timer_Timer(C.Duration_0, new D.promptUser_closure(editorElement));
      t3 = $.$get$atom();
      t2.push(t3._commands.add$3(0, "atom-workspace", "core:confirm", new D.promptUser_closure0(completer, editor)));
      t2.push(t3._commands.add$3(0, "atom-workspace", "core:cancel", new D.promptUser_closure1(completer)));
      t3 = t3._workspace;
      t1.whenComplete$1(new D.promptUser_closure2(new L.Disposables(true, t2), new Y.Panel(t3.invoke$2("addModalPanel", t3._panelOptions$3(element, true, null)))));
      return t1;
    },
    NotificationManager: {
      "^": "ProxyHolder;obj",
      _options$5$buttons$description$detail$dismissable$icon: function(buttons, description, detail, dismissable, icon) {
        var t1, t2, m;
        t1 = detail == null;
        if (t1)
          if (description == null)
            if (dismissable == null)
              t2 = buttons == null;
            else
              t2 = false;
          else
            t2 = false;
        else
          t2 = false;
        if (t2)
          return;
        m = P.LinkedHashMap__makeEmpty();
        if (!t1)
          m.$indexSet(0, "detail", detail);
        if (description != null)
          m.$indexSet(0, "description", description);
        if (dismissable != null)
          m.$indexSet(0, "dismissable", dismissable);
        if (buttons != null)
          m.$indexSet(0, "buttons", K.jsify(new H.MappedListIterable(buttons, new D.NotificationManager__options_closure(), [null, null]).toList$0(0)));
        return m;
      }
    },
    NotificationManager__options_closure: {
      "^": "Closure:195;",
      call$1: [function(nb) {
        return nb.toProxy$0();
      }, null, null, 2, 0, null, 92, "call"]
    },
    Notification: {
      "^": "ProxyHolder;obj",
      get$view: function(_) {
        return $.$get$atom()._views.invoke$2("getView", this.obj);
      }
    },
    NotificationButton: {
      "^": "Object;text>,onDidClick",
      toProxy$0: function() {
        return K.jsify(P.LinkedHashMap__makeLiteral(["text", this.text, "onDidClick", new D.NotificationButton_toProxy_closure(this)]));
      }
    },
    NotificationButton_toProxy_closure: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        return this.$this.onDidClick.call$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    NotificationHelper: {
      "^": "Object;_view,_classList,_content,_titleElement,_detailContent,_description",
      setRunning$0: function() {
        var e, exception, t1;
        try {
          this._classList.callMethod$2("remove", ["icon-info"]);
          this._classList.callMethod$2("add", ["icon-running"]);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          P.print(e);
        }
      },
      get$title: function(_) {
        return this._titleElement.textContent;
      },
      set$title: function(_, value) {
        this._titleElement.textContent = value;
      },
      appendText$2$stderr: function(_, text, stderr) {
        var t1, elements;
        this._classList.callMethod$2("toggle", ["has-detail", true]);
        t1 = P.LineSplitter_split(text, 0, null);
        elements = P.List_List$from(H.MappedIterable_MappedIterable(t1, new D.NotificationHelper_appendText_closure(stderr), H.getRuntimeTypeArgument(t1, "Iterable", 0), null), true, null);
        J.get$children$x(this._detailContent).addAll$1(0, elements);
        if (elements.length !== 0)
          J.scrollIntoView$1$x(C.JSArray_methods.get$last(elements), C.ScrollAlignment_BOTTOM);
      },
      appendText$1: function($receiver, text) {
        return this.appendText$2$stderr($receiver, text, false);
      },
      showSuccess$0: function() {
        var e, exception, t1;
        try {
          this._classList.callMethod$2("remove", ["info", "icon-info", "icon-running"]);
          this._classList.callMethod$2("add", ["success", "icon-check"]);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          P.print(e);
        }
      },
      showError$0: function() {
        var e, exception, t1;
        try {
          this._classList.callMethod$2("remove", ["info", "icon-info", "icon-running"]);
          this._classList.callMethod$2("add", ["error", "icon-flame"]);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          P.print(e);
        }
      },
      NotificationHelper$1: function(_view) {
        var t1 = this._view;
        this._classList = J.$index$asx(t1, "classList");
        t1 = t1.callMethod$2("querySelector", ["div.content"]);
        this._content = t1;
        this._titleElement = J.querySelector$1$x(t1, "div.message p");
        this._detailContent = J.querySelector$1$x(this._content, "div.detail-content");
        this._description = J.querySelector$1$x(this._content, "div.meta div.description");
      },
      static: {
        NotificationHelper$: function(_view) {
          var t1 = new D.NotificationHelper(_view, null, null, null, null, null);
          t1.NotificationHelper$1(_view);
          return t1;
        }
      }
    },
    NotificationHelper_appendText_closure: {
      "^": "Closure:3;stderr",
      call$1: [function(line) {
        var t1, div;
        t1 = document;
        div = t1.createElement("div");
        div.textContent = J.trimRight$0$s(line);
        t1 = J.getInterceptor$x(div);
        t1.get$classes(div).toggle$2(0, "line", true);
        if (this.stderr)
          t1.get$classes(div).toggle$2(0, "text-error", true);
        return div;
      }, null, null, 2, 0, null, 47, "call"]
    },
    ProcessNotifier: {
      "^": "Object;title>,_notification,_helper",
      watch$1: function(runner) {
        var t1 = runner._stdoutController;
        new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new D.ProcessNotifier_watch_closure(this));
        t1 = runner._stderrController;
        new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new D.ProcessNotifier_watch_closure0(this));
        this._notification.eventStream$1("onDidDismiss").listen$1(new D.ProcessNotifier_watch_closure1(runner));
        return runner._exitCompleter.future.then$1(new D.ProcessNotifier_watch_closure2(this));
      },
      ProcessNotifier$1: function(title) {
        var t1, t2;
        t1 = $.$get$atom();
        t2 = t1._notifications;
        t2 = t2.invoke$3("addInfo", this.title, t2._options$5$buttons$description$detail$dismissable$icon(null, "Running\u2026", "", true, null));
        this._notification = new D.Notification(t2);
        t2 = D.NotificationHelper$(t1._views.invoke$2("getView", t2));
        this._helper = t2;
        J.get$classes$x(t2._detailContent).toggle$1(0, "detail-content-no-wrap");
        this._helper.setRunning$0();
      },
      static: {
        ProcessNotifier$: function(title) {
          var t1 = new D.ProcessNotifier(title, null, null);
          t1.ProcessNotifier$1(title);
          return t1;
        }
      }
    },
    ProcessNotifier_watch_closure: {
      "^": "Closure:0;$this",
      call$1: [function(str) {
        return this.$this._helper.appendText$1(0, str);
      }, null, null, 2, 0, null, 4, "call"]
    },
    ProcessNotifier_watch_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(str) {
        return this.$this._helper.appendText$2$stderr(0, str, true);
      }, null, null, 2, 0, null, 4, "call"]
    },
    ProcessNotifier_watch_closure1: {
      "^": "Closure:0;runner",
      call$1: [function(_) {
        var t1 = this.runner;
        if (t1._exit == null)
          t1.kill$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    ProcessNotifier_watch_closure2: {
      "^": "Closure:19;$this",
      call$1: [function(result) {
        var t1, t2, t3;
        t1 = J.$eq$(result, 0);
        t2 = this.$this;
        t3 = t2._helper;
        if (t1) {
          t3.showSuccess$0();
          t2._helper._description.textContent = "Finished.";
        } else {
          t3.showError$0();
          t1 = t2._helper;
          t2 = "Finished with exit code " + H.S(result) + ".";
          t1._description.textContent = t2;
        }
        return result;
      }, null, null, 2, 0, null, 3, "call"]
    },
    promptUser_closure: {
      "^": "Closure:1;editorElement",
      call$0: function() {
        new Y.TextEditorElement(Y._cvt1(P.JsObject_JsObject$fromBrowserObject($.$get$context().callMethod$2("uncrackDart2js", [this.editorElement])))).invoke$1("focused");
      }
    },
    promptUser_closure0: {
      "^": "Closure:0;completer,editor",
      call$1: function(_) {
        var t1 = this.completer;
        if (t1.future._state === 0)
          t1.complete$1(0, this.editor.invoke$1("getText"));
      }
    },
    promptUser_closure1: {
      "^": "Closure:0;completer",
      call$1: function(_) {
        var t1 = this.completer;
        if (t1.future._state === 0)
          t1.complete$1(0, null);
      }
    },
    promptUser_closure2: {
      "^": "Closure:1;disposables,panel",
      call$0: [function() {
        this.disposables.dispose$0();
        this.panel.invoke$1("destroy");
      }, null, null, 0, 0, null, "call"]
    }
  }], ["", "package:atom/node/package.dart",, L, {
    "^": "",
    registerPackage: function($package) {
      var exports, t1, t2, t3, t4, t5, t6, t7;
      if ($._package != null)
        throw H.wrapException(new P.StateError("can only register one package"));
      $._package = $package;
      exports = J.$index$asx(J.$index$asx($.$get$context(), "module"), "exports");
      t1 = J.getInterceptor$ax(exports);
      t1.$indexSet(exports, "activate", new L.registerPackage_closure());
      t1.$indexSet(exports, "deactivate", new L.registerPackage_closure0());
      $._package.toString;
      t2 = P.LinkedHashMap__makeLiteral(["title", "Dart SDK Location", "description", "The location of the Dart SDK.", "type", "string", "default", "", "order", 1]);
      t3 = P.LinkedHashMap__makeLiteral(["title", "Show outline view", "description", "Show the outline view for Dart files.", "type", "boolean", "default", true, "order", 3]);
      t4 = P.LinkedHashMap__makeLiteral(["title", "Show errors view", "description", "Show the error and warnings view.", "type", "boolean", "default", true, "order", 4]);
      t5 = P.LinkedHashMap__makeLiteral(["title", "Errors view configuration", "description", "Choose which types of items to show in the errors view.", "type", "string", "default", "infos", "enum", ["errors+warnings", "infos", "todos"], "order", 5]);
      t6 = $.$get$isMac();
      t7 = t6 === true ? "command" : "control";
      t1.$indexSet(exports, "config", K.jsify(P.LinkedHashMap__makeLiteral(["sdkLocation", t2, "showOutlineView", t3, "showErrorsView", t4, "configureErrorsView", t5, "jumpToDeclarationKeys", P.LinkedHashMap__makeLiteral(["title", "Jump to declaration modifer key", "description", "The modifer key to use when clicking on a symbol in order to jump to is declaration.", "type", "string", "default", t7, "enum", t6 === true ? ["command", "option"] : ["control", "alt"], "order", 7]), "debuggerCaughtExceptions", P.LinkedHashMap__makeLiteral(["title", "Debugger break on exceptions mode", "description", "Break on all exceptions, uncaught exceptions, or ignore exceptions.", "type", "string", "default", "uncaught", "enum", ["all", "uncaught", "none"], "order", 8]), "sendUsage", P.LinkedHashMap__makeLiteral(["title", "Report usage information to Google Analytics", "description", "Report anonymized usage information to Google Analytics.", "type", "boolean", "default", true, "order", 10]), "logging", P.LinkedHashMap__makeLiteral(["title", "[Diagnostics] Log plugin diagnostics to the DevTools console", "type", "string", "default", "info", "enum", ["error", "warning", "info", "fine", "finer"], "order", 11]), "debugAnalysisServer", P.LinkedHashMap__makeLiteral(["title", "[Diagnostics] Start the analysis server with debug flags", "description", "Start the analysis server with its diagnostics port enabled (at localhost:23072); a restart is required.", "type", "boolean", "default", false, "order", 12]), "formatOnSave", P.LinkedHashMap__makeLiteral(["title", "[Experimental] Format files on save", "description", "Format the current editor on save. Note: this does not work well with Atom's autosave feature.", "type", "boolean", "default", false, "order", 13])])));
      t1.$indexSet(exports, "serialize", $._package.get$serialize());
      $package._registeredMethods.forEach$1(0, new L.registerPackage_closure1(exports));
      $package._registeredMethods = null;
    },
    registerPackage_closure: {
      "^": "Closure:192;",
      call$1: [function(state) {
        var e, st, exception, t1;
        try {
          $._package.activate$1(0, state);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          st = H.getTraceFromException(exception);
          P.print(H.S(e));
          P.print(H.S(st));
        }
      }, function() {
        return this.call$1(null);
      }, "call$0", null, null, null, 0, 2, null, 2, 112, "call"]
    },
    registerPackage_closure0: {
      "^": "Closure:1;",
      call$0: [function() {
        var e, st, t1, exception;
        try {
          t1 = $._package;
          t1.toString;
          $.$get$_logger().info$1("deactivated");
          t1.disposables.dispose$0();
          t1.subscriptions.cancel$0(0);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          st = H.getTraceFromException(exception);
          P.print(H.S(e));
          P.print(H.S(st));
        }
      }, null, null, 0, 0, null, "call"]
    },
    registerPackage_closure1: {
      "^": "Closure:4;exports",
      call$2: function(methodName, f) {
        J.$indexSet$ax(this.exports, methodName, new L.registerPackage__closure(f));
      }
    },
    registerPackage__closure: {
      "^": "Closure:0;f",
      call$1: [function(arg) {
        var result, t1;
        result = this.f.call$1(arg);
        t1 = J.getInterceptor(result);
        if (!!t1.$isDisposable)
          return K.jsify(P.LinkedHashMap__makeLiteral(["dispose", result.get$dispose()]));
        else if (!!t1.$isList || !!t1.$isMap)
          return K.jsify(result);
        else if (!!t1.$isJsObject)
          return result;
        else
          return;
      }, null, null, 2, 0, null, 36, "call"]
    },
    AtomPackage: {
      "^": "Object;id>",
      loadPackageJson$0: function() {
        return W.HttpRequest_getString("atom://" + this.id + "/package.json", null, null).then$1(new L.AtomPackage_loadPackageJson_closure());
      },
      getPackageVersion$0: function() {
        return this.loadPackageJson$0().then$1(new L.AtomPackage_getPackageVersion_closure());
      },
      registerServiceConsumer$2: function(methodName, callback) {
        var t1 = this._registeredMethods;
        if (t1 == null)
          throw H.wrapException(new P.StateError("method must be registered in the package ctor"));
        t1.$indexSet(0, methodName, callback);
        return;
      }
    },
    AtomPackage_loadPackageJson_closure: {
      "^": "Closure:3;",
      call$1: [function(str) {
        return H.subtypeCast(C.JsonCodec_null_null.decode$1(str), "$isMap", [P.String, null], "$asMap");
      }, null, null, 2, 0, null, 4, "call"]
    },
    AtomPackage_getPackageVersion_closure: {
      "^": "Closure:43;",
      call$1: [function(map) {
        return J.$index$asx(map, "version");
      }, null, null, 2, 0, null, 113, "call"]
    },
    PackageManager: {
      "^": "ProxyHolder;obj"
    }
  }], ["node.process", "package:atom/node/process.dart",, X, {
    "^": "",
    exec: function(command, args, env) {
      var t1, t2, t3;
      t1 = $.Zone__current;
      t2 = new P._AsyncStreamController(null, 0, null, null, null, null, null, [null]);
      t3 = new P._AsyncStreamController(null, 0, null, null, null, null, null, [null]);
      return new X.ProcessRunner(command, args, null, env, null, new P._AsyncCompleter(new P._Future(0, t1, null, [null]), [null]), null, t2, t3).execSimple$0().then$1(new X.exec_closure());
    },
    execSync: function(command) {
      var result, error, t1, exception;
      try {
        result = $.$get$context().callMethod$2("require", ["child_process"]).callMethod$2("execSync", [command]);
        if (result == null)
          return;
        result = C.JSString_methods.trim$0(H.S(result));
        t1 = J.get$length$asx(result) === 0 ? null : result;
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        error = t1;
        throw H.wrapException(H.S(error));
      }
    },
    queryEnv: function(variable) {
      var t1, exception;
      try {
        t1 = X.execSync("echo $" + variable);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return;
      }
    },
    Process: {
      "^": "ProxyHolder;obj",
      get$platform: function(_) {
        return J.$index$asx(this.obj, "platform");
      }
    },
    exec_closure: {
      "^": "Closure:27;",
      call$1: [function(result) {
        if (J.$eq$(result.get$exit(), 0))
          return result.get$stdout();
        throw H.wrapException(result.get$exit());
      }, null, null, 2, 0, null, 3, "call"]
    },
    ProcessRunner: {
      "^": "Object;command,args,cwd<,env,_process$_process,_exitCompleter,_exit,_stdoutController,_stderrController",
      get$exit: function() {
        return this._exit;
      },
      execSimple$0: function() {
        var stdout, stderr, t1;
        if (this._process$_process != null)
          throw H.wrapException(new P.StateError("exec can only be called once"));
        stdout = new P.StringBuffer("");
        stderr = new P.StringBuffer("");
        t1 = this._stdoutController;
        new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.ProcessRunner_execSimple_closure(stdout));
        t1 = this._stderrController;
        new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.ProcessRunner_execSimple_closure0(stderr));
        return this.execStreaming$0().then$1(new X.ProcessRunner_execSimple_closure1(stdout, stderr));
      },
      execStreaming$0: function() {
        var e, t1, t2, t3, t4, t5, exception;
        if (this._process$_process != null)
          throw H.wrapException(new P.StateError("exec can only be called once"));
        t1 = $.$get$_logger4();
        t2 = this.command;
        t3 = "exec: " + H.S(t2) + " ";
        t4 = this.args;
        t3 += t4 == null ? "" : (t4 && C.JSArray_methods).join$1(t4, " ");
        t5 = this.cwd;
        t1.fine$1(t3 + (t5 == null ? "" : " (cwd=" + H.S(t5) + ")"));
        try {
          this._process$_process = X.BufferedProcess_create(t2, t4, t5, this.env, new X.ProcessRunner_execStreaming_closure(this), new X.ProcessRunner_execStreaming_closure0(this), new X.ProcessRunner_execStreaming_closure1(this), new X.ProcessRunner_execStreaming_closure2(this));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          return P.Future_Future$error(e, null, null);
        }
        return this._exitCompleter.future;
      },
      kill$0: function() {
        var t1 = this._process$_process;
        if (t1 != null)
          t1.invoke$1("kill");
        P.Future_Future$delayed(P.Duration$(0, 0, 0, 100, 0, 0), new X.ProcessRunner_kill_closure(this), null);
        return this._exitCompleter.future;
      },
      static: {
        ProcessRunner_ProcessRunner$underShell: function(command, args, cwd, env) {
          var t1;
          if ($.$get$isPosix() === true) {
            t1 = $.ProcessRunner__shellWrangler;
            if (t1 == null) {
              t1 = X.ShellWrangler$();
              $.ProcessRunner__shellWrangler = t1;
            }
            if (t1.get$isNecessary())
              return new X.ProcessRunner(command, args, cwd, $.ProcessRunner__shellWrangler._env, null, new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]), null, P.StreamController_StreamController(null, null, null, null, false, null), P.StreamController_StreamController(null, null, null, null, false, null));
          }
          return new X.ProcessRunner(command, args, cwd, env, null, new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]), null, P.StreamController_StreamController(null, null, null, null, false, null), P.StreamController_StreamController(null, null, null, null, false, null));
        }
      }
    },
    ProcessRunner_execSimple_closure: {
      "^": "Closure:0;stdout",
      call$1: [function(str) {
        this.stdout._contents += H.S(str);
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    ProcessRunner_execSimple_closure0: {
      "^": "Closure:0;stderr",
      call$1: [function(str) {
        this.stderr._contents += H.S(str);
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    ProcessRunner_execSimple_closure1: {
      "^": "Closure:0;stdout,stderr",
      call$1: [function(code) {
        var t1, t2;
        t1 = this.stdout._contents;
        t2 = this.stderr._contents;
        return new X.ProcessResult(code, t1.charCodeAt(0) == 0 ? t1 : t1, t2.charCodeAt(0) == 0 ? t2 : t2);
      }, null, null, 2, 0, null, 14, "call"]
    },
    ProcessRunner_execStreaming_closure2: {
      "^": "Closure:0;$this",
      call$1: [function(s) {
        var t1 = this.$this._stdoutController;
        if (t1._state >= 4)
          H.throwExpression(t1._badEventState$0());
        t1._async$_add$1(0, s);
        return;
      }, null, null, 2, 0, null, 19, "call"]
    },
    ProcessRunner_execStreaming_closure1: {
      "^": "Closure:0;$this",
      call$1: [function(s) {
        var t1 = this.$this._stderrController;
        if (t1._state >= 4)
          H.throwExpression(t1._badEventState$0());
        t1._async$_add$1(0, s);
        return;
      }, null, null, 2, 0, null, 19, "call"]
    },
    ProcessRunner_execStreaming_closure: {
      "^": "Closure:0;$this",
      call$1: [function(code) {
        var t1 = this.$this;
        $.$get$_logger4().fine$1("exit code: " + H.S(code) + " (" + H.S(t1.command) + ")");
        t1._exit = code;
        t1 = t1._exitCompleter;
        if (t1.future._state === 0)
          t1.complete$1(0, code);
      }, null, null, 2, 0, null, 14, "call"]
    },
    ProcessRunner_execStreaming_closure0: {
      "^": "Closure:0;$this",
      call$1: function(e) {
        var t1 = this.$this._exitCompleter;
        if (t1.future._state === 0)
          t1.completeError$1(e);
      }
    },
    ProcessRunner_kill_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        var t1 = this.$this._exitCompleter;
        if (t1.future._state === 0)
          t1.complete$1(0, 0);
      }
    },
    ProcessResult: {
      "^": "Object;exit<,stdout<,stderr<",
      toString$0: function(_) {
        return H.S(this.exit);
      }
    },
    ShellWrangler: {
      "^": "Object;_currentShell,_targetShell,_env",
      get$isNecessary: function() {
        var t1, t2;
        t1 = $.$get$isMac();
        t2 = this._currentShell;
        if (t1 === true)
          return t2 === "/bin/sh";
        else {
          t1 = this._targetShell;
          return t2 == null ? t1 != null : t2 !== t1;
        }
      },
      toString$0: function(_) {
        return H.S(this._currentShell) + " " + H.S(this._targetShell) + " " + J.toString$0$(this._env);
      },
      ShellWrangler$0: function() {
        var t1, t2, result, _i, line, t3, index, t4, key, value;
        this._currentShell = X.queryEnv("0");
        this._targetShell = X.queryEnv("SHELL");
        if (this.get$isNecessary()) {
          t1 = J.endsWith$1$s(this._targetShell, "/csh") || J.endsWith$1$s(this._targetShell, "/tcsh");
          t2 = this._targetShell;
          result = t1 ? X.execSync(H.S(t2) + " -c 'printenv'") : X.execSync(H.S(t2) + " -l -c 'printenv'");
          this._env = P.LinkedHashMap__makeEmpty();
          for (t1 = result.split("\n"), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            line = t1[_i];
            t3 = J.getInterceptor$asx(line);
            index = t3.indexOf$1(line, "=");
            t4 = J.getInterceptor(index);
            if (!t4.$eq(index, -1)) {
              key = t3.substring$2(line, 0, index);
              value = t3.substring$1(line, t4.$add(index, 1));
              if (key !== "TERM")
                this._env.$indexSet(0, key, value);
            }
          }
        }
      },
      static: {
        ShellWrangler$: function() {
          var t1 = new X.ShellWrangler(null, null, null);
          t1.ShellWrangler$0();
          return t1;
        }
      }
    },
    BufferedProcess: {
      "^": "ProxyHolder;_stdin,obj",
      write$1: function(_, str) {
        var t1 = this._stdin;
        if (t1 == null) {
          t1 = J.$index$asx(J.$index$asx(this.obj, "process"), "stdin");
          this._stdin = t1;
        }
        return t1.callMethod$2("write", [str, "utf8"]);
      },
      kill$0: function() {
        return this.invoke$1("kill");
      },
      static: {
        BufferedProcess_create: function(command, args, cwd, env, exit, onWillThrowError, stderr, stdout) {
          var options, t1, nodeOptions;
          options = P.LinkedHashMap__makeLiteral(["command", command]);
          if (args != null)
            options.$indexSet(0, "args", args);
          options.$indexSet(0, "stdout", stdout);
          options.$indexSet(0, "stderr", stderr);
          options.$indexSet(0, "exit", exit);
          options.$indexSet(0, "onWillThrowError", new X.BufferedProcess_create_closure(onWillThrowError));
          t1 = cwd == null;
          if (!t1 || env != null) {
            nodeOptions = P.LinkedHashMap__makeEmpty();
            if (!t1)
              nodeOptions.$indexSet(0, "cwd", cwd);
            if (env != null)
              nodeOptions.$indexSet(0, "env", K.jsify(env));
            options.$indexSet(0, "options", nodeOptions);
          }
          return new X.BufferedProcess(null, P.JsObject_JsObject(J.$index$asx($.$get$context().callMethod$2("require", ["atom"]), "BufferedProcess"), [P.JsObject_JsObject$jsify(options)]));
        }
      }
    },
    BufferedProcess_create_closure: {
      "^": "Closure:13;onWillThrowError",
      call$1: [function(e) {
        e.callMethod$1("handle");
        this.onWillThrowError.call$1(J.$index$asx(e, "error"));
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["node.shell", "package:atom/node/shell.dart",, F, {
    "^": "",
    Shell: {
      "^": "ProxyHolder;obj"
    }
  }], ["", "package:atom/node/workspace.dart",, Y, {
    "^": "",
    _create0: function(className, arg1, arg2) {
      if (arg2 != null)
        return P.JsObject_JsObject(J.$index$asx($.$get$context().callMethod$2("require", ["atom"]), className), [arg1, arg2]);
      else
        return P.JsObject_JsObject(J.$index$asx($.$get$context().callMethod$2("require", ["atom"]), className), [arg1]);
    },
    _cvt1: function(object) {
      if (object == null)
        return;
      if (object instanceof P.JsObject)
        return object;
      return P.JsObject_JsObject$fromBrowserObject(object);
    },
    ViewRegistry: {
      "^": "ProxyHolder;obj"
    },
    Workspace: {
      "^": "ProxyHolder;_openSerializer,obj",
      getTextEditors$0: function() {
        return P.List_List$from(J.map$1$ax(this.invoke$1("getTextEditors"), new Y.Workspace_getTextEditors_closure()), true, null);
      },
      getActiveTextEditor$0: function() {
        var result = this.invoke$1("getActiveTextEditor");
        return result == null ? null : new Y.TextEditor(Y._cvt1(result));
      },
      observeTextEditors$1: function(callback) {
        return new K.JsDisposable(this.invoke$2("observeTextEditors", new Y.Workspace_observeTextEditors_closure(callback)));
      },
      observeActivePaneItem$1: function(callback) {
        return new K.JsDisposable(this.invoke$2("observeActivePaneItem", new Y.Workspace_observeActivePaneItem_closure(callback)));
      },
      open$2$options: function(_, url, options) {
        return this._openSerializer.perform$1(new Y.Workspace_open_closure(this, url, options));
      },
      open$1: function($receiver, url) {
        return this.open$2$options($receiver, url, null);
      },
      openPending$2$options: function(url, options) {
        if (options == null)
          options = P.LinkedHashMap__makeLiteral(["pending", true]);
        else
          options.$indexSet(0, "pending", true);
        return this.open$2$options(0, url, options);
      },
      openPending$1: function(url) {
        return this.openPending$2$options(url, null);
      },
      openConfigPage$1$packageID: function(packageID) {
        return this.open$1(0, "atom://config/packages/" + packageID);
      },
      saveAll$0: function() {
        var e, exception, t1;
        try {
          this.invoke$1("saveAll");
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          $.$get$_logger9().info$2("exception calling saveAll", e);
        }
      },
      _panelOptions$3: function(item, visible, priority) {
        var options = P.LinkedHashMap__makeLiteral(["item", item]);
        if (visible != null)
          options.$indexSet(0, "visible", visible);
        return options;
      }
    },
    Workspace_getTextEditors_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return new Y.TextEditor(Y._cvt1(e));
      }, null, null, 2, 0, null, 0, "call"]
    },
    Workspace_observeTextEditors_closure: {
      "^": "Closure:0;callback",
      call$1: [function(ed) {
        return this.callback.call$1(new Y.TextEditor(Y._cvt1(ed)));
      }, null, null, 2, 0, null, 142, "call"]
    },
    Workspace_observeActivePaneItem_closure: {
      "^": "Closure:0;callback",
      call$1: [function(item) {
        return this.callback.call$1(item);
      }, null, null, 2, 0, null, 45, "call"]
    },
    Workspace_open_closure: {
      "^": "Closure:1;$this,url,options",
      call$0: function() {
        var t1 = this.url;
        return K.promiseToFuture(this.$this.invoke$3("open", t1, this.options)).then$1(new Y.Workspace_open__closure(t1));
      }
    },
    Workspace_open__closure: {
      "^": "Closure:0;url",
      call$1: [function(result) {
        var editor;
        if (result == null)
          throw H.wrapException("unable to open " + H.S(this.url));
        editor = new Y.TextEditor(Y._cvt1(result));
        return editor.isValid$0() === true ? editor : null;
      }, null, null, 2, 0, null, 3, "call"]
    },
    Project: {
      "^": "ProxyHolder;obj",
      getDirectories$0: function() {
        return P.List_List$from(J.map$1$ax(this.invoke$1("getDirectories"), new Y.Project_getDirectories_closure()), true, null);
      },
      contains$1: function(_, pathToCheck) {
        return this.invoke$2("contains", pathToCheck);
      }
    },
    Project_getDirectories_closure: {
      "^": "Closure:0;",
      call$1: [function(dir) {
        return new F.Directory(dir);
      }, null, null, 2, 0, null, 21, "call"]
    },
    Panel: {
      "^": "ProxyHolder;obj",
      get$onDidDestroy: function() {
        var t1 = this.eventStream$1("onDidDestroy");
        return new P._MapStream(new Y.Panel_onDidDestroy_closure(), t1, [H.getTypeArgumentByIndex(t1, 0), null]);
      },
      onDidDestroy$1: function(arg0) {
        return this.get$onDidDestroy().call$1(arg0);
      }
    },
    Panel_onDidDestroy_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return new Y.Panel(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    Gutter: {
      "^": "ProxyHolder;obj",
      get$name: function(_) {
        return J.$index$asx(this.obj, "name");
      },
      onDidDestroy$1: [function(callback) {
        return new K.JsDisposable(this.invoke$2("onDidDestroy", callback));
      }, "call$1", "get$onDidDestroy", 2, 0, 182],
      toString$0: function(_) {
        return "[Gutter " + H.S(J.$index$asx(this.obj, "name")) + "]";
      }
    },
    Marker: {
      "^": "ProxyHolder;obj",
      get$onDidChange: function() {
        return this.eventStream$1("onDidChange");
      },
      get$onDidDestroy: function() {
        return this.eventStream$1("onDidDestroy");
      },
      onDidDestroy$1: function(arg0) {
        return this.get$onDidDestroy().call$1(arg0);
      }
    },
    Decoration: {
      "^": "ProxyHolder;obj"
    },
    Point0: {
      "^": "ProxyHolder;obj",
      get$column: function() {
        return J.$index$asx(this.obj, "column");
      },
      $eq: function(_, other) {
        var t1, t2, t3, t4, t5;
        if (other == null)
          return false;
        if (other instanceof Y.Point0) {
          t1 = this.obj;
          t2 = J.getInterceptor$asx(t1);
          t3 = t2.$index(t1, "row");
          t4 = other.obj;
          t5 = J.getInterceptor$asx(t4);
          t1 = J.$eq$(t3, t5.$index(t4, "row")) && J.$eq$(t2.$index(t1, "column"), t5.$index(t4, "column"));
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2, t3;
        t1 = this.obj;
        t2 = J.getInterceptor$asx(t1);
        t3 = J.$shl$n(t2.$index(t1, "row"), 4);
        t1 = t2.$index(t1, "column");
        if (typeof t1 !== "number")
          return H.iae(t1);
        return (t3 ^ t1) >>> 0;
      },
      toString$0: function(_) {
        return this.invoke$1("toString");
      }
    },
    Range: {
      "^": "ProxyHolder;obj",
      isEmpty$0: [function(_) {
        return this.invoke$1("isEmpty");
      }, "call$0", "get$isEmpty", 0, 0, 20],
      isNotEmpty$0: [function(_) {
        return this.invoke$1("isEmpty") !== true;
      }, "call$0", "get$isNotEmpty", 0, 0, 20],
      get$start: function(_) {
        return new Y.Point0(Y._cvt1(J.$index$asx(this.obj, "start")));
      },
      get$end: function(_) {
        return new Y.Point0(Y._cvt1(J.$index$asx(this.obj, "end")));
      },
      $eq: function(_, other) {
        var t1, t2, t3, t4, t5;
        if (other == null)
          return false;
        if (other instanceof Y.Range) {
          t1 = this.obj;
          t2 = J.getInterceptor$asx(t1);
          t3 = Y._cvt1(t2.$index(t1, "start"));
          t4 = other.obj;
          t5 = J.getInterceptor$asx(t4);
          t1 = new Y.Point0(t3).$eq(0, new Y.Point0(Y._cvt1(t5.$index(t4, "start")))) && new Y.Point0(Y._cvt1(t2.$index(t1, "end"))).$eq(0, new Y.Point0(Y._cvt1(t5.$index(t4, "end"))));
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2, t3, t4, t5;
        t1 = this.obj;
        t2 = J.getInterceptor$asx(t1);
        t3 = Y._cvt1(t2.$index(t1, "start"));
        t4 = J.getInterceptor$asx(t3);
        t5 = J.$shl$n(t4.$index(t3, "row"), 4);
        t3 = t4.$index(t3, "column");
        if (typeof t3 !== "number")
          return H.iae(t3);
        t1 = Y._cvt1(t2.$index(t1, "end"));
        t2 = J.getInterceptor$asx(t1);
        t4 = J.$shl$n(t2.$index(t1, "row"), 4);
        t1 = t2.$index(t1, "column");
        if (typeof t1 !== "number")
          return H.iae(t1);
        return (t5 ^ t3 ^ t4 ^ t1) >>> 0;
      },
      toString$0: function(_) {
        return this.invoke$1("toString");
      },
      start$0: function($receiver) {
        return this.get$start(this).call$0();
      }
    },
    TextBuffer: {
      "^": "ProxyHolder;obj",
      getPath$0: function() {
        return this.invoke$1("getPath");
      },
      atomic$1: function(fn) {
        var checkpoint, e, exception, t1;
        checkpoint = this.invoke$1("createCheckpoint");
        try {
          fn.call$0();
          this.invoke$2("groupChangesSinceCheckpoint", checkpoint);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          this.invoke$2("revertToCheckpoint", checkpoint);
          $.$get$_logger9().warning$1("transaction failed: " + H.S(e));
        }
      }
    },
    TextEditorElement: {
      "^": "ProxyHolder;obj"
    },
    TextEditor: {
      "^": "ProxyHolder;obj",
      isValid$0: function() {
        var exception;
        try {
          this.invoke$1("getTitle");
          this.invoke$1("getLongTitle");
          this.invoke$1("getPath");
          return true;
        } catch (exception) {
          H.unwrapException(exception);
          return false;
        }
      },
      getBuffer$0: function() {
        return new Y.TextBuffer(Y._cvt1(this.invoke$1("getBuffer")));
      },
      getPath$0: function() {
        return this.invoke$1("getPath");
      },
      isModified$0: function() {
        return this.invoke$1("isModified");
      },
      isEmpty$0: [function(_) {
        return this.invoke$1("isEmpty");
      }, "call$0", "get$isEmpty", 0, 0, 20],
      isNotEmpty$0: [function(_) {
        return this.invoke$1("isEmpty") !== true;
      }, "call$0", "get$isNotEmpty", 0, 0, 20],
      insertText$2$options: function(text, options) {
        var result, t1;
        result = this.invoke$3("insertText", text, options);
        if (typeof result === "boolean")
          t1 = result;
        else
          t1 = result == null ? null : new Y.Range(Y._cvt1(result));
        return t1;
      },
      insertText$1: function(text) {
        return this.insertText$2$options(text, null);
      },
      getText$0: function() {
        return this.invoke$1("getText");
      },
      getSelectedBufferRange$0: function() {
        var t1 = this.invoke$1("getSelectedBufferRange");
        return t1 == null ? null : new Y.Range(Y._cvt1(t1));
      },
      setSelectedBufferRange$1: function(bufferRange) {
        return this.invoke$2("setSelectedBufferRange", bufferRange);
      },
      setSelectedBufferRanges$1: function(ranges) {
        return this.invoke$2("setSelectedBufferRanges", new H.MappedListIterable(ranges, new Y.TextEditor_setSelectedBufferRanges_closure(), [null, null]).toList$0(0));
      },
      selectRight$1: function(columnCount) {
        return this.invoke$2("selectRight", columnCount);
      },
      markBufferRange$3$persistent$properties: function(range, persistent, properties) {
        properties = P.LinkedHashMap__makeLiteral(["persistent", false]);
        return new Y.Marker(Y._cvt1(this.invoke$3("markBufferRange", range, properties)));
      },
      markBufferRange$2$persistent: function(range, persistent) {
        return this.markBufferRange$3$persistent$properties(range, persistent, null);
      },
      decorateMarker$2: function(marker, decorationParams) {
        return new Y.Decoration(Y._cvt1(this.invoke$3("decorateMarker", marker, decorationParams)));
      },
      undo$0: function() {
        return this.invoke$1("undo");
      },
      atomic$1: function(fn) {
        var checkpoint, e, exception, t1;
        checkpoint = this.invoke$1("createCheckpoint");
        try {
          fn.call$0();
          this.invoke$2("groupChangesSinceCheckpoint", checkpoint);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          this.invoke$2("revertToCheckpoint", checkpoint);
          $.$get$_logger9().warning$1("transaction failed: " + H.S(e));
        }
      },
      save$0: function(_) {
        return this.invoke$1("save");
      },
      scrollToBufferPosition$2$center: function(bufferPosition, center) {
        this.invoke$3("scrollToBufferPosition", bufferPosition, P.LinkedHashMap__makeLiteral(["center", true]));
      },
      get$onDidChange: function() {
        return this.eventStream$1("onDidChange");
      },
      get$onDidChangeTitle: function() {
        return this.eventStream$1("onDidChangeTitle");
      },
      get$onDidDestroy: function() {
        return this.eventStream$1("onDidDestroy");
      },
      get$onDidSave: function() {
        return this.eventStream$1("onDidSave");
      },
      get$onDidChangeCursorPosition: function() {
        var t1 = this.eventStream$1("onDidChangeCursorPosition");
        return new P._MapStream(new Y.TextEditor_onDidChangeCursorPosition_closure(), t1, [H.getTypeArgumentByIndex(t1, 0), null]);
      },
      get$view: function(_) {
        return $.ViewRegistry__instance.invoke$2("getView", this.obj);
      },
      gutterWithName$1: function($name) {
        var result = this.invoke$2("gutterWithName", $name);
        return result == null ? null : new Y.Gutter(Y._cvt1(result));
      },
      get$onDidAddGutter: function() {
        var t1 = this.eventStream$1("onDidAddGutter");
        return new P._MapStream(new Y.TextEditor_onDidAddGutter_closure(), t1, [H.getTypeArgumentByIndex(t1, 0), null]);
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this.obj);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof Y.TextEditor && J.$eq$(this.obj, other.obj);
      },
      toString$0: function(_) {
        return this.invoke$1("getTitle");
      },
      onDidDestroy$1: function(arg0) {
        return this.get$onDidDestroy().call$1(arg0);
      }
    },
    TextEditor_setSelectedBufferRanges_closure: {
      "^": "Closure:167;",
      call$1: [function(r) {
        return r.get$obj();
      }, null, null, 2, 0, null, 42, "call"]
    },
    TextEditor_onDidChangeCursorPosition_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return new Y.Point0(Y._cvt1(J.$index$asx(e, "newBufferPosition")));
      }, null, null, 2, 0, null, 0, "call"]
    },
    TextEditor_onDidAddGutter_closure: {
      "^": "Closure:0;",
      call$1: [function(g) {
        return new Y.Gutter(Y._cvt1(g));
      }, null, null, 2, 0, null, 81, "call"]
    }
  }], ["", "package:atom/src/js.dart",, K, {
    "^": "",
    jsify: function(obj) {
      var t1;
      if (obj == null)
        return;
      t1 = J.getInterceptor(obj);
      if (!!t1.$isJsObject)
        return obj;
      if (!!t1.$isList || !!t1.$isMap)
        return P.JsObject_JsObject$jsify(obj);
      if (!!t1.$isProxyHolder)
        return obj.obj;
      return obj;
    },
    jsObjectToDart: function(obj) {
      var e, st, t1, exception;
      if (obj == null)
        return;
      try {
        t1 = C.JsonCodec_null_null.decode$1($.$get$_browserJson().callMethod$2("stringify", [obj]));
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        st = H.getTraceFromException(exception);
        $.$get$_logger8().severe$3("jsObjectToDart", e, st);
        return;
      }
    },
    promiseToFuture: function(promise) {
      var t1, completer;
      if (promise instanceof P.JsObject)
        promise = new K.Promise(promise, [null]);
      t1 = new P._Future(0, $.Zone__current, null, [null]);
      completer = new P._AsyncCompleter(t1, [null]);
      promise.then$2(new K.promiseToFuture_closure(completer), new K.promiseToFuture_closure0(completer));
      return t1;
    },
    promiseToFuture_closure: {
      "^": "Closure:0;completer",
      call$1: [function(result) {
        this.completer.complete$1(0, result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    promiseToFuture_closure0: {
      "^": "Closure:0;completer",
      call$1: [function(error) {
        this.completer.completeError$1(error);
      }, null, null, 2, 0, null, 8, "call"]
    },
    ProxyHolder: {
      "^": "Object;obj<",
      invoke$4: function(method, arg1, arg2, arg3) {
        var t1;
        if (arg1 != null)
          arg1 = K.jsify(arg1);
        if (arg2 != null)
          arg2 = K.jsify(arg2);
        if (arg3 != null)
          arg3 = K.jsify(arg3);
        if (arg3 != null)
          return this.obj.callMethod$2(method, [arg1, arg2, arg3]);
        else if (arg2 != null)
          return this.obj.callMethod$2(method, [arg1, arg2]);
        else {
          t1 = this.obj;
          if (arg1 != null)
            return t1.callMethod$2(method, [arg1]);
          else
            return t1.callMethod$1(method);
        }
      },
      invoke$1: function(method) {
        return this.invoke$4(method, null, null, null);
      },
      invoke$2: function(method, arg1) {
        return this.invoke$4(method, arg1, null, null);
      },
      invoke$3: function(method, arg1, arg2) {
        return this.invoke$4(method, arg1, arg2, null);
      },
      eventStream$1: function(eventName) {
        var t1, controller, e, st, exception;
        t1 = {};
        t1.disposable = null;
        controller = P.StreamController_StreamController$broadcast(new K.ProxyHolder_eventStream_closure(t1), null, false, null);
        try {
          t1.disposable = new K.JsDisposable(this.invoke$2(eventName, new K.ProxyHolder_eventStream_closure0(controller)));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          st = H.getTraceFromException(exception);
          $.$get$_logger8().warning$3("error listening to " + eventName, e, st);
        }
        t1 = controller;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this.obj);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof K.ProxyHolder && J.$eq$(this.obj, other.obj);
      }
    },
    ProxyHolder_eventStream_closure: {
      "^": "Closure:1;_box_0",
      call$0: function() {
        var t1 = this._box_0.disposable;
        return t1 == null ? t1 : t1.invoke$1("dispose");
      }
    },
    ProxyHolder_eventStream_closure0: {
      "^": "Closure:0;controller",
      call$1: [function(evt) {
        var t1 = this.controller;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(evt);
        return;
      }, null, null, 2, 0, null, 95, "call"]
    },
    JsDisposable: {
      "^": "ProxyHolder;obj",
      dispose$0: [function() {
        return this.invoke$1("dispose");
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    Promise: {
      "^": "ProxyHolder;obj,$ti",
      then$2: function(thenCallback, errorCallback) {
        this.invoke$3("then", thenCallback, errorCallback);
      },
      then$1: function(thenCallback) {
        return this.then$2(thenCallback, null);
      },
      error$1: [function(_, errorCallback) {
        return this.invoke$2("catch", errorCallback);
      }, "call$1", "get$error", 2, 0, 160, 96],
      static: {
        Promise__jsObjectFromFuture: function(future) {
          return P.JsObject_JsObject(J.$index$asx($.$get$context(), "Promise"), [new K.Promise__jsObjectFromFuture_closure(future)]);
        }
      }
    },
    Promise__jsObjectFromFuture_closure: {
      "^": "Closure:4;future",
      call$2: [function(resolve, reject) {
        this.future.then$1(new K.Promise__jsObjectFromFuture__closure(resolve)).catchError$1(new K.Promise__jsObjectFromFuture__closure0(reject));
      }, null, null, 4, 0, null, 97, 98, "call"]
    },
    Promise__jsObjectFromFuture__closure: {
      "^": "Closure:0;resolve",
      call$1: [function(result) {
        this.resolve.apply$1([K.jsify(result)]);
      }, null, null, 2, 0, null, 3, "call"]
    },
    Promise__jsObjectFromFuture__closure0: {
      "^": "Closure:0;reject",
      call$1: [function(e) {
        this.reject.apply$1([e]);
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["", "package:atom/src/utils.dart",, B, {
    "^": "",
    FutureSerializer: {
      "^": "Object;_operations,_completers,$ti",
      perform$1: function(operation) {
        var t1, t2;
        t1 = new P._Future(0, $.Zone__current, null, [null]);
        t2 = this._operations;
        t2.push(operation);
        this._completers.push(new P._AsyncCompleter(t1, [null]));
        if (t2.length === 1)
          this._serviceQueue$0();
        return t1;
      },
      _serviceQueue$0: function() {
        var operation, completer;
        operation = C.JSArray_methods.get$first(this._operations);
        completer = C.JSArray_methods.get$first(this._completers);
        operation.call$0().then$1(new B.FutureSerializer__serviceQueue_closure(completer)).catchError$1(new B.FutureSerializer__serviceQueue_closure0(completer)).whenComplete$1(new B.FutureSerializer__serviceQueue_closure1(this));
      }
    },
    FutureSerializer__serviceQueue_closure: {
      "^": "Closure:0;completer",
      call$1: [function(value) {
        this.completer.complete$1(0, value);
      }, null, null, 2, 0, null, 7, "call"]
    },
    FutureSerializer__serviceQueue_closure0: {
      "^": "Closure:0;completer",
      call$1: [function(e) {
        this.completer.completeError$1(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    FutureSerializer__serviceQueue_closure1: {
      "^": "Closure:1;$this",
      call$0: [function() {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._operations;
        C.JSArray_methods.removeAt$1(t2, 0);
        C.JSArray_methods.removeAt$1(t1._completers, 0);
        if (t2.length !== 0)
          t1._serviceQueue$0();
      }, null, null, 0, 0, null, "call"]
    }
  }], ["atom.dependencies", "package:atom/utils/dependencies.dart",, Q, {
    "^": "",
    deps: function() {
      return Q.Dependencies_instance();
    },
    Dependencies: {
      "^": "Object;_instances",
      get$parent: function(_) {
        return this._calcParent$1($.Zone__current);
      },
      getDependency$1: function(type) {
        var t1, $parent;
        t1 = this._instances;
        if (t1.containsKey$1(0, type))
          return t1.$index(0, type);
        $parent = this._calcParent$1($.Zone__current);
        return $parent != null ? $parent.getDependency$1(type) : null;
      },
      $index: function(_, type) {
        return this.getDependency$1(type);
      },
      $indexSet: function(_, type, instance) {
        this._instances.$indexSet(0, type, instance);
        return;
      },
      _calcParent$1: function(zone) {
        var t1 = $.Dependencies__global;
        if (this === t1)
          return;
        zone.toString;
        return t1;
      },
      static: {
        Dependencies_instance: function() {
          $.Zone__current.toString;
          return $.Dependencies__global;
        }
      }
    }
  }], ["", "package:atom/utils/disposable.dart",, L, {
    "^": "",
    Disposable: {
      "^": "Object;"
    },
    Disposables: {
      "^": "Object;catchExceptions,_disposables",
      add$1: function(_, disposable) {
        return this._disposables.push(disposable);
      },
      addAll$1: function(_, list) {
        return C.JSArray_methods.addAll$1(this._disposables, list);
      },
      remove$1: function(_, disposable) {
        return C.JSArray_methods.remove$1(this._disposables, disposable);
      },
      dispose$0: ["super$Disposables$dispose", function() {
        var disposable, e, st, t1, t2, _i, exception, t3;
        for (t1 = this._disposables, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          disposable = t1[_i];
          try {
            disposable.dispose$0();
          } catch (exception) {
            t3 = H.unwrapException(exception);
            e = t3;
            st = H.getTraceFromException(exception);
            $.$get$_logger0().severe$3("exception during dispose", e, st);
          }
        }
        C.JSArray_methods.set$length(t1, 0);
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    EventListener: {
      "^": "Object;obj<,eventName,_callback",
      dispose$0: [function() {
        var t1 = this._callback;
        if (t1 != null)
          this.obj.callMethod$2("removeEventListener", [this.eventName, t1]);
        this._callback = null;
      }, "call$0", "get$dispose", 0, 0, 2],
      EventListener$3: function(obj, eventName, fn) {
        var t1 = new P.JsFunction(function(_call, f, captureThis) {
          return function() {
            return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
          };
        }(P._callDartFunction, new L.EventListener_closure(fn), true));
        this._callback = t1;
        this.obj.callMethod$2("addEventListener", [this.eventName, t1]);
      },
      $isDisposable: 1,
      static: {
        EventListener$: function(obj, eventName, fn) {
          var t1 = new L.EventListener(obj, eventName, null);
          t1.EventListener$3(obj, eventName, fn);
          return t1;
        }
      }
    },
    EventListener_closure: {
      "^": "Closure:4;fn",
      call$2: [function(_this, e) {
        return this.fn.call$1(P.JsObject_JsObject$fromBrowserObject(e));
      }, null, null, 4, 0, null, 99, 0, "call"]
    },
    StreamSubscriptions: {
      "^": "Object;catchExceptions,_subscriptions",
      add$1: function(_, subscription) {
        return this._subscriptions.push(subscription);
      },
      remove$1: function(_, subscription) {
        return C.JSArray_methods.remove$1(this._subscriptions, subscription);
      },
      cancel$0: function(_) {
        var subscription, e, st, t1, t2, _i, exception, t3;
        for (t1 = this._subscriptions, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          subscription = t1[_i];
          try {
            J.cancel$0$x(subscription);
          } catch (exception) {
            t3 = H.unwrapException(exception);
            e = t3;
            st = H.getTraceFromException(exception);
            $.$get$_logger0().severe$3("exception during subscription cancel", e, st);
          }
        }
        C.JSArray_methods.set$length(t1, 0);
      },
      dispose$0: [function() {
        return this.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    }
  }], ["", "package:atom/utils/string_utils.dart",, M, {
    "^": "",
    commas: function(n) {
      var str, len, pos;
      str = H.S(n);
      len = str.length;
      if (len > 3) {
        pos = len - 3;
        return C.JSString_methods.substring$2(str, 0, pos) + "," + C.JSString_methods.substring$1(str, pos);
      } else
        return str;
    },
    pluralize: function(word, count) {
      if (J.$eq$(count, 1))
        return word;
      if (C.JSString_methods.endsWith$1(word, "s"))
        return word + "es";
      return word + "s";
    },
    simpleDiff: function(a, b) {
      var t1, endA, t2, endB, startA, startB, t3;
      t1 = J.getInterceptor$asx(a);
      if (t1.get$isEmpty(a) === true && J.get$isNotEmpty$asx(b) === true)
        return [new M.Edit(0, 0, b)];
      if (t1.get$isNotEmpty(a) === true && J.get$isEmpty$asx(b) === true)
        return [new M.Edit(0, t1.get$length(a), b)];
      if (t1.$eq(a, b))
        return [new M.Edit(0, 0, "")];
      endA = t1.get$length(a);
      t2 = J.getInterceptor$asx(b);
      endB = t2.get$length(b);
      if (typeof endA !== "number")
        return H.iae(endA);
      startA = 0;
      startB = 0;
      while (true) {
        if (startA < endA) {
          if (typeof endB !== "number")
            return H.iae(endB);
          t3 = startB < endB && J.$eq$(t1.$index(a, startA), t2.$index(b, startB));
        } else
          t3 = false;
        if (!t3)
          break;
        ++startA;
        ++startB;
      }
      while (true) {
        if (endA > startA) {
          t3 = J.getInterceptor$n(endB);
          t3 = t3.$gt(endB, startB) && J.$eq$(t1.$index(a, endA - 1), t2.$index(b, t3.$sub(endB, 1)));
        } else
          t3 = false;
        if (!t3)
          break;
        --endA;
        endB = J.$sub$n(endB, 1);
      }
      return [new M.Edit(startA, endA - startA, t2.substring$2(b, startB, endB))];
    },
    toStartingLowerCase: function(str) {
      var t1;
      if (str == null)
        return;
      t1 = J.getInterceptor$asx(str);
      if (t1.get$isEmpty(str) === true)
        return str;
      return t1.substring$2(str, 0, 1).toLowerCase() + t1.substring$1(str, 1);
    },
    toTitleCase: function(str) {
      var t1;
      if (str == null)
        return;
      t1 = J.getInterceptor$asx(str);
      if (t1.get$isEmpty(str) === true)
        return str;
      return t1.substring$2(str, 0, 1).toUpperCase() + t1.substring$1(str, 1);
    },
    Edit: {
      "^": "Object;offset>,length>,replacement<",
      $eq: function(_, obj) {
        if (obj == null)
          return false;
        if (!(obj instanceof M.Edit))
          return false;
        return this.offset === obj.offset && J.$eq$(this.length, obj.length) && J.$eq$(this.replacement, obj.replacement);
      },
      get$hashCode: function(_) {
        var t1, t2;
        t1 = this.length;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = J.get$hashCode$(this.replacement);
        if (typeof t2 !== "number")
          return H.iae(t2);
        return (this.offset ^ t1 ^ t2) >>> 0;
      },
      toString$0: function(_) {
        return "[Edit " + this.offset + ":" + H.S(this.length) + ":'" + H.S(this.replacement) + "']";
      }
    }
  }], ["atom.analysis_options", "package:atom_dartlang/analysis/analysis_options.dart",, S, {
    "^": "",
    AnalysisOptionsManager: {
      "^": "Object;disposables",
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    }
  }], ["atom.analysis_server_lib", "package:atom_dartlang/analysis/analysis_server_lib.dart",, E, {
    "^": "",
    Server__toEncodable: [function(obj) {
      return !!J.getInterceptor(obj).$isJsonable ? obj.toMap$0() : obj;
    }, "call$1", "analysis_server_lib_Server__toEncodable$closure", 2, 0, 0, 5],
    _stripNullValues: function(m) {
      var copy, t1, key, value;
      copy = P.LinkedHashMap__makeEmpty();
      for (t1 = m.get$keys(m), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        value = m.$index(0, key);
        if (value != null)
          copy.$indexSet(0, key, value);
      }
      return copy;
    },
    Server: {
      "^": "Object;",
      get$server: function() {
        return this._analysis_server_lib$_server;
      },
      get$analysis: function() {
        return this._analysis;
      },
      get$completion: function() {
        return this._completion;
      },
      get$search: function(_) {
        return this._search;
      },
      get$edit: function() {
        return this._edit;
      },
      get$execution: function() {
        return this._execution;
      },
      get$diagnostic: function() {
        return this._diagnostic;
      },
      get$onSend: function() {
        var t1 = this._onSend;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onReceive: function() {
        var t1 = this._onReceive;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      set$willSend: function(fn) {
        this._analysis_server_lib$_willSend = fn;
      },
      dispose$0: function() {
        var t1 = this._streamSub;
        if (t1 != null)
          t1.cancel$0(0);
        this._analysis_server_lib$_completers.clear$0(0);
      },
      _processMessage$1: [function(message) {
        var json, $event, prefix, completer, methodName, e, t1, t2, t3, exception;
        t1 = this._onReceive;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(message);
        if (!J.startsWith$1$s(message, "{")) {
          $.$get$_logger7().warning$1("unknown message: " + H.S(message));
          return;
        }
        try {
          json = C.JsonCodec_null_null.decode$1(message);
          if (J.$index$asx(json, "id") == null) {
            $event = J.$index$asx(json, "event");
            if ($event == null)
              $.$get$_logger7().severe$1("invalid message: " + H.S(message));
            else {
              prefix = J.substring$2$s($event, 0, J.indexOf$1$asx($event, "."));
              t1 = this._domains;
              if (t1.$index(0, prefix) == null)
                $.$get$_logger7().severe$1("no domain for notification: " + H.S(message));
              else {
                t1 = t1.$index(0, prefix);
                t2 = $event;
                t3 = J.$index$asx(json, "params");
                t1 = t1._controllers;
                if (t1.$index(0, t2) != null) {
                  t1 = t1.$index(0, t2);
                  if (!t1.get$_mayAddEvent())
                    H.throwExpression(t1._addEventError$0());
                  t1._sendData$1(t3);
                }
              }
            }
          } else {
            completer = this._analysis_server_lib$_completers.remove$1(0, J.$index$asx(json, "id"));
            methodName = this._methodNames.remove$1(0, J.$index$asx(json, "id"));
            if (completer == null)
              $.$get$_logger7().severe$1("unmatched request response: " + H.S(message));
            else if (J.$index$asx(json, "error") != null)
              completer.completeError$1(E.RequestError_parse(methodName, J.$index$asx(json, "error")));
            else
              J.complete$1$x(completer, J.$index$asx(json, "result"));
          }
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          $.$get$_logger7().severe$1("unable to decode message: " + H.S(message) + ", " + H.S(e));
        }
      }, "call$1", "get$_processMessage", 2, 0, 10, 10],
      _call$2: function(_, method, args) {
        var id, t1, m, message, t2;
        id = "" + ++this._analysis_server_lib$_id;
        t1 = this._analysis_server_lib$_completers;
        t1.$indexSet(0, id, new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]));
        this._methodNames.$indexSet(0, id, method);
        m = P.LinkedHashMap__makeLiteral(["id", id, "method", method]);
        if (args != null)
          m.$indexSet(0, "params", args);
        message = this._jsonEncoder.encode$1(m);
        t2 = this._analysis_server_lib$_willSend;
        if (t2 != null)
          t2.call$1(method);
        t2 = this._onSend;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(message);
        this._writeMessage.call$1(message);
        return t1.$index(0, id).future;
      },
      Server$2: function(inStream, writeMessage) {
        var t1, t2;
        this.dispose$0();
        this._streamSub = inStream.listen$1(this.get$_processMessage());
        this._writeMessage = writeMessage;
        t1 = new E.ServerDomain(this, "server", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t2 = this._domains;
        t2.$indexSet(0, "server", t1);
        this._analysis_server_lib$_server = t1;
        t1 = new E.AnalysisDomain(this, "analysis", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t2.$indexSet(0, "analysis", t1);
        this._analysis = t1;
        t1 = new E.CompletionDomain(this, "completion", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t2.$indexSet(0, "completion", t1);
        this._completion = t1;
        t1 = new E.SearchDomain(this, "search", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t2.$indexSet(0, "search", t1);
        this._search = t1;
        t1 = new E.EditDomain(this, "edit", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t2.$indexSet(0, "edit", t1);
        this._edit = t1;
        t1 = new E.ExecutionDomain(this, "execution", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t2.$indexSet(0, "execution", t1);
        this._execution = t1;
        t1 = new E.DiagnosticDomain(this, "diagnostic", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t2.$indexSet(0, "diagnostic", t1);
        this._diagnostic = t1;
      }
    },
    Domain: {
      "^": "Object;server<,name>",
      _listen$2: function($name, cvt) {
        var t1, t2, t3;
        t1 = this._streams;
        if (t1.$index(0, $name) == null) {
          t2 = this._controllers;
          t2.$indexSet(0, $name, P.StreamController_StreamController$broadcast(null, null, false, null));
          t2 = t2.$index(0, $name);
          t2.toString;
          t3 = H.getTypeArgumentByIndex(t2, 0);
          t1.$indexSet(0, $name, new P._MapStream(cvt, new P._BroadcastStream(t2, [t3]), [t3, null]));
        }
        return t1.$index(0, $name);
      },
      toString$0: function(_) {
        return "Domain " + this.name;
      }
    },
    RefactoringOptions: {
      "^": "Object;",
      $isJsonable: 1
    },
    RequestError: {
      "^": "Object;method,code>,message>,stackTrace<",
      toString$0: function(_) {
        return "[Analyzer RequestError method: " + H.S(this.method) + ", code: " + H.S(this.code) + ", message: " + H.S(this.message) + "]";
      },
      static: {
        RequestError_parse: function(method, m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new E.RequestError(method, t1.$index(m, "code"), t1.$index(m, "message"), t1.$index(m, "stackTrace"));
        }
      }
    },
    ServerDomain: {
      "^": "Domain;server,name,_controllers,_streams",
      getVersion$0: function() {
        return this.server._call$2(0, "server.getVersion", null).then$1(E.analysis_server_lib_VersionResult_parse$closure());
      },
      shutdown$0: function() {
        return this.server._call$2(0, "server.shutdown", null);
      }
    },
    ServerError: {
      "^": "Object;isFatal<,message>,stackTrace<",
      static: {
        ServerError_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new E.ServerError(t1.$index(m, "isFatal"), t1.$index(m, "message"), t1.$index(m, "stackTrace"));
        }, "call$1", "analysis_server_lib_ServerError_parse$closure", 2, 0, 225, 6]
      }
    },
    ServerStatus: {
      "^": "Object;analysis<,pub",
      static: {
        ServerStatus_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new E.ServerStatus(E.AnalysisStatus_parse(t1.$index(m, "analysis")), E.PubStatus_parse(t1.$index(m, "pub")));
        }, "call$1", "analysis_server_lib_ServerStatus_parse$closure", 2, 0, 226, 6]
      }
    },
    VersionResult: {
      "^": "Object;version>",
      static: {
        VersionResult_parse: [function(m) {
          return new E.VersionResult(J.$index$asx(m, "version"));
        }, "call$1", "analysis_server_lib_VersionResult_parse$closure", 2, 0, 227, 6]
      }
    },
    AnalysisDomain: {
      "^": "Domain;server,name,_controllers,_streams",
      get$onOutline: function() {
        return H.subtypeCast(this._listen$2("analysis.outline", E.analysis_server_lib_AnalysisOutline_parse$closure()), "$isStream", [E.AnalysisOutline], "$asStream");
      },
      getHover$2: function(file, offset) {
        return this.server._call$2(0, "analysis.getHover", P.LinkedHashMap__makeLiteral(["file", file, "offset", offset])).then$1(E.analysis_server_lib_HoverResult_parse$closure());
      },
      updateContent$1: function(files) {
        return this.server._call$2(0, "analysis.updateContent", P.LinkedHashMap__makeLiteral(["files", files]));
      }
    },
    AnalysisErrors: {
      "^": "Object;file>,errors<",
      static: {
        AnalysisErrors_parse: [function(m) {
          var t1, t2;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "file");
          return new E.AnalysisErrors(t2, t1.$index(m, "errors") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "errors"), new E.AnalysisErrors_parse_closure()), true, null));
        }, "call$1", "analysis_server_lib_AnalysisErrors_parse$closure", 2, 0, 228, 6]
      }
    },
    AnalysisErrors_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.AnalysisError_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    AnalysisFlushResults: {
      "^": "Object;files>",
      static: {
        AnalysisFlushResults_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new E.AnalysisFlushResults(t1.$index(m, "files") == null ? null : P.List_List$from(t1.$index(m, "files"), true, null));
        }, "call$1", "analysis_server_lib_AnalysisFlushResults_parse$closure", 2, 0, 229, 6]
      }
    },
    AnalysisNavigation: {
      "^": "Object;file>,regions>,targets<,files>",
      static: {
        AnalysisNavigation_parse: [function(m) {
          var t1, t2, t3, t4;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "file");
          t3 = t1.$index(m, "regions") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "regions"), new E.AnalysisNavigation_parse_closure()), true, null);
          t4 = t1.$index(m, "targets") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "targets"), new E.AnalysisNavigation_parse_closure0()), true, null);
          return new E.AnalysisNavigation(t2, t3, t4, t1.$index(m, "files") == null ? null : P.List_List$from(t1.$index(m, "files"), true, null));
        }, "call$1", "analysis_server_lib_AnalysisNavigation_parse$closure", 2, 0, 230, 6]
      }
    },
    AnalysisNavigation_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.NavigationRegion_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    AnalysisNavigation_parse_closure0: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.NavigationTarget_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    AnalysisOutline: {
      "^": "Object;file>,kind>,outline>,libraryName<",
      static: {
        AnalysisOutline_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new E.AnalysisOutline(t1.$index(m, "file"), t1.$index(m, "kind"), E.Outline_parse(t1.$index(m, "outline")), t1.$index(m, "libraryName"));
        }, "call$1", "analysis_server_lib_AnalysisOutline_parse$closure", 2, 0, 231, 6]
      }
    },
    HoverResult: {
      "^": "Object;hovers<",
      static: {
        HoverResult_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new E.HoverResult(t1.$index(m, "hovers") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "hovers"), new E.HoverResult_parse_closure()), true, null));
        }, "call$1", "analysis_server_lib_HoverResult_parse$closure", 2, 0, 232, 6]
      }
    },
    HoverResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.HoverInformation_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    CompletionDomain: {
      "^": "Domain;server,name,_controllers,_streams",
      get$onResults: function() {
        return H.subtypeCast(this._listen$2("completion.results", E.analysis_server_lib_CompletionResults_parse$closure()), "$isStream", [E.CompletionResults], "$asStream");
      },
      getSuggestions$2: function(file, offset) {
        return this.server._call$2(0, "completion.getSuggestions", P.LinkedHashMap__makeLiteral(["file", file, "offset", offset])).then$1(E.analysis_server_lib_SuggestionsResult_parse$closure());
      }
    },
    CompletionResults: {
      "^": "Object;id>,replacementOffset<,replacementLength,results>,isLast<",
      static: {
        CompletionResults_parse: [function(m) {
          var t1, t2, t3, t4, t5;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "id");
          t3 = t1.$index(m, "replacementOffset");
          t4 = t1.$index(m, "replacementLength");
          t5 = t1.$index(m, "results") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "results"), new E.CompletionResults_parse_closure()), true, null);
          return new E.CompletionResults(t2, t3, t4, t5, t1.$index(m, "isLast"));
        }, "call$1", "analysis_server_lib_CompletionResults_parse$closure", 2, 0, 233, 6]
      }
    },
    CompletionResults_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.CompletionSuggestion_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    SuggestionsResult: {
      "^": "Object;id>",
      static: {
        SuggestionsResult_parse: [function(m) {
          return new E.SuggestionsResult(J.$index$asx(m, "id"));
        }, "call$1", "analysis_server_lib_SuggestionsResult_parse$closure", 2, 0, 234, 6]
      }
    },
    SearchDomain: {
      "^": "Domain;server,name,_controllers,_streams",
      get$onResults: function() {
        return H.subtypeCast(this._listen$2("search.results", E.analysis_server_lib_SearchResults_parse$closure()), "$isStream", [E.SearchResults], "$asStream");
      },
      findElementReferences$3: function(file, offset, includePotential) {
        return this.server._call$2(0, "search.findElementReferences", P.LinkedHashMap__makeLiteral(["file", file, "offset", offset, "includePotential", false])).then$1(E.analysis_server_lib_FindElementReferencesResult_parse$closure());
      },
      findTopLevelDeclarations$1: function(pattern) {
        return this.server._call$2(0, "search.findTopLevelDeclarations", P.LinkedHashMap__makeLiteral(["pattern", pattern])).then$1(E.analysis_server_lib_FindTopLevelDeclarationsResult_parse$closure());
      },
      getTypeHierarchy$3$superOnly: function(file, offset, superOnly) {
        var m = P.LinkedHashMap__makeLiteral(["file", file, "offset", offset]);
        return this.server._call$2(0, "search.getTypeHierarchy", m).then$1(E.analysis_server_lib_TypeHierarchyResult_parse$closure());
      },
      getTypeHierarchy$2: function(file, offset) {
        return this.getTypeHierarchy$3$superOnly(file, offset, null);
      }
    },
    SearchResults: {
      "^": "Object;id>,results>,isLast<",
      static: {
        SearchResults_parse: [function(m) {
          var t1, t2, t3;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "id");
          t3 = t1.$index(m, "results") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "results"), new E.SearchResults_parse_closure()), true, null);
          return new E.SearchResults(t2, t3, t1.$index(m, "isLast"));
        }, "call$1", "analysis_server_lib_SearchResults_parse$closure", 2, 0, 235, 6]
      }
    },
    SearchResults_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.SearchResult_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    FindElementReferencesResult: {
      "^": "Object;id>,element<",
      static: {
        FindElementReferencesResult_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new E.FindElementReferencesResult(t1.$index(m, "id"), E.Element_parse(t1.$index(m, "element")));
        }, "call$1", "analysis_server_lib_FindElementReferencesResult_parse$closure", 2, 0, 236, 6]
      }
    },
    FindTopLevelDeclarationsResult: {
      "^": "Object;id>",
      static: {
        FindTopLevelDeclarationsResult_parse: [function(m) {
          return new E.FindTopLevelDeclarationsResult(J.$index$asx(m, "id"));
        }, "call$1", "analysis_server_lib_FindTopLevelDeclarationsResult_parse$closure", 2, 0, 237, 6]
      }
    },
    TypeHierarchyResult: {
      "^": "Object;hierarchyItems<",
      static: {
        TypeHierarchyResult_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new E.TypeHierarchyResult(t1.$index(m, "hierarchyItems") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "hierarchyItems"), new E.TypeHierarchyResult_parse_closure()), true, null));
        }, "call$1", "analysis_server_lib_TypeHierarchyResult_parse$closure", 2, 0, 238, 6]
      }
    },
    TypeHierarchyResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.TypeHierarchyItem_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    EditDomain: {
      "^": "Domain;server,name,_controllers,_streams",
      format$4$lineLength: function(file, selectionOffset, selectionLength, lineLength) {
        var m = P.LinkedHashMap__makeLiteral(["file", file, "selectionOffset", selectionOffset, "selectionLength", selectionLength]);
        if (lineLength != null)
          m.$indexSet(0, "lineLength", lineLength);
        return this.server._call$2(0, "edit.format", m).then$1(E.analysis_server_lib_FormatResult_parse$closure());
      },
      getAssists$3: function(file, offset, $length) {
        return this.server._call$2(0, "edit.getAssists", P.LinkedHashMap__makeLiteral(["file", file, "offset", offset, "length", $length])).then$1(E.analysis_server_lib_AssistsResult_parse$closure());
      },
      getAvailableRefactorings$3: function(file, offset, $length) {
        return this.server._call$2(0, "edit.getAvailableRefactorings", P.LinkedHashMap__makeLiteral(["file", file, "offset", offset, "length", $length])).then$1(E.analysis_server_lib_AvailableRefactoringsResult_parse$closure());
      },
      getFixes$2: function(file, offset) {
        return this.server._call$2(0, "edit.getFixes", P.LinkedHashMap__makeLiteral(["file", file, "offset", offset])).then$1(E.analysis_server_lib_FixesResult_parse$closure());
      },
      getRefactoring$6$options: function(kind, file, offset, $length, validateOnly, options) {
        var m = P.LinkedHashMap__makeLiteral(["kind", kind, "file", file, "offset", offset, "length", $length, "validateOnly", false]);
        if (options != null)
          m.$indexSet(0, "options", options);
        return this.server._call$2(0, "edit.getRefactoring", m).then$1(E.analysis_server_lib_RefactoringResult_parse$closure());
      },
      sortMembers$1: function(file) {
        return this.server._call$2(0, "edit.sortMembers", P.LinkedHashMap__makeLiteral(["file", file])).then$1(E.analysis_server_lib_SortMembersResult_parse$closure());
      },
      organizeDirectives$1: function(file) {
        return this.server._call$2(0, "edit.organizeDirectives", P.LinkedHashMap__makeLiteral(["file", file])).then$1(E.analysis_server_lib_OrganizeDirectivesResult_parse$closure());
      }
    },
    FormatResult: {
      "^": "Object;edits<,selectionOffset<,selectionLength<",
      static: {
        FormatResult_parse: [function(m) {
          var t1, t2;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "edits") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "edits"), new E.FormatResult_parse_closure()), true, null);
          return new E.FormatResult(t2, t1.$index(m, "selectionOffset"), t1.$index(m, "selectionLength"));
        }, "call$1", "analysis_server_lib_FormatResult_parse$closure", 2, 0, 239, 6]
      }
    },
    FormatResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.SourceEdit_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    AssistsResult: {
      "^": "Object;assists<",
      static: {
        AssistsResult_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new E.AssistsResult(t1.$index(m, "assists") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "assists"), new E.AssistsResult_parse_closure()), true, null));
        }, "call$1", "analysis_server_lib_AssistsResult_parse$closure", 2, 0, 240, 6]
      }
    },
    AssistsResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.SourceChange_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    AvailableRefactoringsResult: {
      "^": "Object;kinds>",
      static: {
        AvailableRefactoringsResult_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new E.AvailableRefactoringsResult(t1.$index(m, "kinds") == null ? null : P.List_List$from(t1.$index(m, "kinds"), true, null));
        }, "call$1", "analysis_server_lib_AvailableRefactoringsResult_parse$closure", 2, 0, 241, 6]
      }
    },
    FixesResult: {
      "^": "Object;fixes<",
      static: {
        FixesResult_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new E.FixesResult(t1.$index(m, "fixes") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "fixes"), new E.FixesResult_parse_closure()), true, null));
        }, "call$1", "analysis_server_lib_FixesResult_parse$closure", 2, 0, 242, 6]
      }
    },
    FixesResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.AnalysisErrorFixes_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    RefactoringResult: {
      "^": "Object;initialProblems<,optionsProblems,finalProblems,feedback,change<,potentialEdits",
      static: {
        RefactoringResult_parse: [function(m) {
          var t1, t2, t3, t4, t5, t6;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "initialProblems") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "initialProblems"), new E.RefactoringResult_parse_closure()), true, null);
          t3 = t1.$index(m, "optionsProblems") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "optionsProblems"), new E.RefactoringResult_parse_closure0()), true, null);
          t4 = t1.$index(m, "finalProblems") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "finalProblems"), new E.RefactoringResult_parse_closure1()), true, null);
          t5 = t1.$index(m, "feedback");
          t5 = t5 == null ? null : new E.RefactoringFeedback(t5);
          t6 = E.SourceChange_parse(t1.$index(m, "change"));
          return new E.RefactoringResult(t2, t3, t4, t5, t6, t1.$index(m, "potentialEdits") == null ? null : P.List_List$from(t1.$index(m, "potentialEdits"), true, null));
        }, "call$1", "analysis_server_lib_RefactoringResult_parse$closure", 2, 0, 243, 6]
      }
    },
    RefactoringResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.RefactoringProblem_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    RefactoringResult_parse_closure0: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.RefactoringProblem_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    RefactoringResult_parse_closure1: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.RefactoringProblem_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    SortMembersResult: {
      "^": "Object;edit<",
      static: {
        SortMembersResult_parse: [function(m) {
          return new E.SortMembersResult(E.SourceFileEdit_parse(J.$index$asx(m, "edit")));
        }, "call$1", "analysis_server_lib_SortMembersResult_parse$closure", 2, 0, 244, 6]
      }
    },
    OrganizeDirectivesResult: {
      "^": "Object;edit<",
      static: {
        OrganizeDirectivesResult_parse: [function(m) {
          return new E.OrganizeDirectivesResult(E.SourceFileEdit_parse(J.$index$asx(m, "edit")));
        }, "call$1", "analysis_server_lib_OrganizeDirectivesResult_parse$closure", 2, 0, 245, 6]
      }
    },
    ExecutionDomain: {
      "^": "Domain;server,name,_controllers,_streams",
      createContext$1: function(contextRoot) {
        return this.server._call$2(0, "execution.createContext", P.LinkedHashMap__makeLiteral(["contextRoot", contextRoot])).then$1(E.analysis_server_lib_CreateContextResult_parse$closure());
      },
      mapUri$3$file$uri: function(id, file, uri) {
        var m = P.LinkedHashMap__makeLiteral(["id", id]);
        if (file != null)
          m.$indexSet(0, "file", file);
        if (uri != null)
          m.$indexSet(0, "uri", uri);
        return this.server._call$2(0, "execution.mapUri", m).then$1(E.analysis_server_lib_MapUriResult_parse$closure());
      },
      mapUri$2$file: function(id, file) {
        return this.mapUri$3$file$uri(id, file, null);
      },
      mapUri$2$uri: function(id, uri) {
        return this.mapUri$3$file$uri(id, null, uri);
      }
    },
    CreateContextResult: {
      "^": "Object;id>",
      static: {
        CreateContextResult_parse: [function(m) {
          return new E.CreateContextResult(J.$index$asx(m, "id"));
        }, "call$1", "analysis_server_lib_CreateContextResult_parse$closure", 2, 0, 246, 6]
      }
    },
    MapUriResult: {
      "^": "Object;file>,uri<",
      static: {
        MapUriResult_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new E.MapUriResult(t1.$index(m, "file"), t1.$index(m, "uri"));
        }, "call$1", "analysis_server_lib_MapUriResult_parse$closure", 2, 0, 247, 6]
      }
    },
    DiagnosticDomain: {
      "^": "Domain;server,name,_controllers,_streams"
    },
    DiagnosticsResult: {
      "^": "Object;contexts<",
      static: {
        DiagnosticsResult_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new E.DiagnosticsResult(t1.$index(m, "contexts") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "contexts"), new E.DiagnosticsResult_parse_closure()), true, null));
        }, "call$1", "analysis_server_lib_DiagnosticsResult_parse$closure", 2, 0, 248, 6]
      }
    },
    DiagnosticsResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.ContextData_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    AddContentOverlay: {
      "^": "Object;type>,content>",
      toMap$0: function() {
        return E._stripNullValues(P.LinkedHashMap__makeLiteral(["type", this.type, "content", this.content]));
      },
      $isJsonable: 1
    },
    AnalysisError: {
      "^": "Object;severity<,type>,location>,message>,code>,correction,hasFix<",
      $eq: function(_, o) {
        if (o == null)
          return false;
        return o instanceof E.AnalysisError && J.$eq$(this.severity, o.severity) && J.$eq$(this.type, o.type) && J.$eq$(this.location, o.location) && J.$eq$(this.message, o.message) && J.$eq$(this.code, o.code) && J.$eq$(this.correction, o.correction) && J.$eq$(this.hasFix, o.hasFix);
      },
      get$hashCode: function(_) {
        var t1, t2, t3, t4;
        t1 = J.$xor$n(J.get$hashCode$(this.severity), J.get$hashCode$(this.type));
        t2 = J.get$hashCode$(this.location);
        t3 = J.get$hashCode$(this.message);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = J.get$hashCode$(this.code);
        if (typeof t4 !== "number")
          return H.iae(t4);
        return (t1 ^ t2 ^ t3 ^ t4) >>> 0;
      },
      toString$0: function(_) {
        return "[AnalysisError severity: " + H.S(this.severity) + ", type: " + H.S(this.type) + ", location: " + J.toString$0$(this.location) + ", message: " + H.S(this.message) + ", code: " + H.S(this.code) + "]";
      },
      static: {
        AnalysisError_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new E.AnalysisError(t1.$index(m, "severity"), t1.$index(m, "type"), E.Location_parse(t1.$index(m, "location")), t1.$index(m, "message"), t1.$index(m, "code"), t1.$index(m, "correction"), t1.$index(m, "hasFix"));
        }
      }
    },
    AnalysisErrorFixes: {
      "^": "Object;error>,fixes<",
      static: {
        AnalysisErrorFixes_parse: function(m) {
          var t1, t2;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = E.AnalysisError_parse(t1.$index(m, "error"));
          return new E.AnalysisErrorFixes(t2, t1.$index(m, "fixes") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "fixes"), new E.AnalysisErrorFixes_parse_closure()), true, null));
        }
      }
    },
    AnalysisErrorFixes_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.SourceChange_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    AnalysisOptions: {
      "^": "Object;enableAsync,enableDeferredLoading,enableEnums,enableNullAwareOperators,enableSuperMixins,generateDart2jsHints,generateHints,generateLints",
      toMap$0: function() {
        return E._stripNullValues(P.LinkedHashMap__makeLiteral(["enableAsync", this.enableAsync, "enableDeferredLoading", this.enableDeferredLoading, "enableEnums", this.enableEnums, "enableNullAwareOperators", this.enableNullAwareOperators, "enableSuperMixins", true, "generateDart2jsHints", this.generateDart2jsHints, "generateHints", this.generateHints, "generateLints", this.generateLints]));
      },
      $isJsonable: 1
    },
    AnalysisStatus: {
      "^": "Object;isAnalyzing<,analysisTarget",
      static: {
        AnalysisStatus_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new E.AnalysisStatus(t1.$index(m, "isAnalyzing"), t1.$index(m, "analysisTarget"));
        }
      }
    },
    ChangeContentOverlay: {
      "^": "Object;type>,edits<",
      toMap$0: function() {
        return E._stripNullValues(P.LinkedHashMap__makeLiteral(["type", this.type, "edits", this.edits]));
      },
      $isJsonable: 1
    },
    CompletionSuggestion: {
      "^": "Object;kind>,relevance,completion<,selectionOffset<,selectionLength<,isDeprecated<,isPotential<,docSummary<,docComplete,declaringType<,element<,returnType<,parameterNames<,parameterTypes,requiredParameterCount<,hasNamedParameters,parameterName,parameterType<,importUri<",
      toString$0: function(_) {
        return "[CompletionSuggestion kind: " + H.S(this.kind) + ", relevance: " + H.S(this.relevance) + ", completion: " + H.S(this.completion) + ", selectionOffset: " + H.S(this.selectionOffset) + ", selectionLength: " + H.S(this.selectionLength) + ", isDeprecated: " + H.S(this.isDeprecated) + ", isPotential: " + H.S(this.isPotential) + "]";
      },
      static: {
        CompletionSuggestion_parse: function(m) {
          var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "kind");
          t3 = t1.$index(m, "relevance");
          t4 = t1.$index(m, "completion");
          t5 = t1.$index(m, "selectionOffset");
          t6 = t1.$index(m, "selectionLength");
          t7 = t1.$index(m, "isDeprecated");
          t8 = t1.$index(m, "isPotential");
          t9 = t1.$index(m, "docSummary");
          t10 = t1.$index(m, "docComplete");
          t11 = t1.$index(m, "declaringType");
          t12 = E.Element_parse(t1.$index(m, "element"));
          t13 = t1.$index(m, "returnType");
          t14 = t1.$index(m, "parameterNames") == null ? null : P.List_List$from(t1.$index(m, "parameterNames"), true, null);
          t15 = t1.$index(m, "parameterTypes") == null ? null : P.List_List$from(t1.$index(m, "parameterTypes"), true, null);
          return new E.CompletionSuggestion(t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t1.$index(m, "requiredParameterCount"), t1.$index(m, "hasNamedParameters"), t1.$index(m, "parameterName"), t1.$index(m, "parameterType"), t1.$index(m, "importUri"));
        }
      }
    },
    ContextData: {
      "^": "Object;name>,explicitFileCount<,implicitFileCount<,workItemQueueLength<,cacheEntryExceptions",
      static: {
        ContextData_parse: function(m) {
          var t1, t2, t3, t4, t5;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "name");
          t3 = t1.$index(m, "explicitFileCount");
          t4 = t1.$index(m, "implicitFileCount");
          t5 = t1.$index(m, "workItemQueueLength");
          return new E.ContextData(t2, t3, t4, t5, t1.$index(m, "cacheEntryExceptions") == null ? null : P.List_List$from(t1.$index(m, "cacheEntryExceptions"), true, null));
        }
      }
    },
    Element0: {
      "^": "Object;kind>,name>,flags<,location>,parameters<,returnType<,typeParameters<",
      toString$0: function(_) {
        return "[Element kind: " + H.S(this.kind) + ", name: " + H.S(this.name) + ", flags: " + H.S(this.flags) + "]";
      },
      static: {
        Element_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new E.Element0(t1.$index(m, "kind"), t1.$index(m, "name"), t1.$index(m, "flags"), E.Location_parse(t1.$index(m, "location")), t1.$index(m, "parameters"), t1.$index(m, "returnType"), t1.$index(m, "typeParameters"));
        }
      }
    },
    HoverInformation: {
      "^": "Object;offset>,length>,containingLibraryPath<,containingLibraryName<,containingClassDescription<,dartdoc<,elementDescription<,elementKind<,isDeprecated<,parameter,propagatedType<,staticType<",
      static: {
        HoverInformation_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new E.HoverInformation(t1.$index(m, "offset"), t1.$index(m, "length"), t1.$index(m, "containingLibraryPath"), t1.$index(m, "containingLibraryName"), t1.$index(m, "containingClassDescription"), t1.$index(m, "dartdoc"), t1.$index(m, "elementDescription"), t1.$index(m, "elementKind"), t1.$index(m, "isDeprecated"), t1.$index(m, "parameter"), t1.$index(m, "propagatedType"), t1.$index(m, "staticType"));
        }
      }
    },
    LinkedEditGroup: {
      "^": "Object;positions<,length>,suggestions",
      toString$0: function(_) {
        return "[LinkedEditGroup positions: " + H.S(this.positions) + ", length: " + H.S(this.length) + ", suggestions: " + H.S(this.suggestions) + "]";
      },
      static: {
        LinkedEditGroup_parse: function(m) {
          var t1, t2, t3;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "positions") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "positions"), new E.LinkedEditGroup_parse_closure()), true, null);
          t3 = t1.$index(m, "length");
          return new E.LinkedEditGroup(t2, t3, t1.$index(m, "suggestions") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "suggestions"), new E.LinkedEditGroup_parse_closure0()), true, null));
        }
      }
    },
    LinkedEditGroup_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.Position_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    LinkedEditGroup_parse_closure0: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.LinkedEditSuggestion_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    LinkedEditSuggestion: {
      "^": "Object;value>,kind>",
      static: {
        LinkedEditSuggestion_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new E.LinkedEditSuggestion(t1.$index(m, "value"), t1.$index(m, "kind"));
        }
      }
    },
    Location: {
      "^": "Object;file>,offset>,length>,startLine<,startColumn<",
      $eq: function(_, o) {
        if (o == null)
          return false;
        return o instanceof E.Location && J.$eq$(this.file, o.file) && J.$eq$(this.offset, o.offset) && J.$eq$(this.length, o.length) && J.$eq$(this.startLine, o.startLine) && J.$eq$(this.startColumn, o.startColumn);
      },
      get$hashCode: function(_) {
        var t1, t2, t3, t4;
        t1 = J.$xor$n(J.get$hashCode$(this.file), J.get$hashCode$(this.offset));
        t2 = J.get$hashCode$(this.length);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = J.get$hashCode$(this.startLine);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = J.get$hashCode$(this.startColumn);
        if (typeof t4 !== "number")
          return H.iae(t4);
        return (t1 ^ t2 ^ t3 ^ t4) >>> 0;
      },
      toString$0: function(_) {
        return "[Location file: " + H.S(this.file) + ", offset: " + H.S(this.offset) + ", length: " + H.S(this.length) + ", startLine: " + H.S(this.startLine) + ", startColumn: " + H.S(this.startColumn) + "]";
      },
      static: {
        Location_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new E.Location(t1.$index(m, "file"), t1.$index(m, "offset"), t1.$index(m, "length"), t1.$index(m, "startLine"), t1.$index(m, "startColumn"));
        }
      }
    },
    NavigationRegion: {
      "^": "Object;offset>,length>,targets<",
      toString$0: function(_) {
        return "[NavigationRegion offset: " + H.S(this.offset) + ", length: " + H.S(this.length) + ", targets: " + H.S(this.targets) + "]";
      },
      static: {
        NavigationRegion_parse: function(m) {
          var t1, t2, t3;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "offset");
          t3 = t1.$index(m, "length");
          return new E.NavigationRegion(t2, t3, t1.$index(m, "targets") == null ? null : P.List_List$from(t1.$index(m, "targets"), true, null));
        }
      }
    },
    NavigationTarget: {
      "^": "Object;kind>,fileIndex<,offset>,length>,startLine<,startColumn<",
      toString$0: function(_) {
        return "[NavigationTarget kind: " + H.S(this.kind) + ", fileIndex: " + H.S(this.fileIndex) + ", offset: " + H.S(this.offset) + ", length: " + H.S(this.length) + ", startLine: " + H.S(this.startLine) + ", startColumn: " + H.S(this.startColumn) + "]";
      },
      static: {
        NavigationTarget_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new E.NavigationTarget(t1.$index(m, "kind"), t1.$index(m, "fileIndex"), t1.$index(m, "offset"), t1.$index(m, "length"), t1.$index(m, "startLine"), t1.$index(m, "startColumn"));
        }
      }
    },
    Outline: {
      "^": "Object;element<,offset>,length>,children>",
      static: {
        Outline_parse: function(m) {
          var t1, t2, t3, t4;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = E.Element_parse(t1.$index(m, "element"));
          t3 = t1.$index(m, "offset");
          t4 = t1.$index(m, "length");
          return new E.Outline(t2, t3, t4, t1.$index(m, "children") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "children"), new E.Outline_parse_closure()), true, null));
        }
      }
    },
    Outline_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.Outline_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    Position: {
      "^": "Object;file>,offset>",
      toString$0: function(_) {
        return "[Position file: " + H.S(this.file) + ", offset: " + H.S(this.offset) + "]";
      },
      static: {
        Position_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new E.Position(t1.$index(m, "file"), t1.$index(m, "offset"));
        }
      }
    },
    PubStatus: {
      "^": "Object;isListingPackageDirs",
      toString$0: function(_) {
        return "[PubStatus isListingPackageDirs: " + H.S(this.isListingPackageDirs) + "]";
      },
      static: {
        PubStatus_parse: function(m) {
          if (m == null)
            return;
          return new E.PubStatus(J.$index$asx(m, "isListingPackageDirs"));
        }
      }
    },
    RefactoringProblem: {
      "^": "Object;severity<,message>,location>",
      static: {
        RefactoringProblem_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new E.RefactoringProblem(t1.$index(m, "severity"), t1.$index(m, "message"), E.Location_parse(t1.$index(m, "location")));
        }
      }
    },
    RemoveContentOverlay: {
      "^": "Object;type>",
      toMap$0: function() {
        return E._stripNullValues(P.LinkedHashMap__makeLiteral(["type", this.type]));
      },
      $isJsonable: 1
    },
    SearchResult: {
      "^": "Object;location>,kind>,isPotential<,path>",
      toString$0: function(_) {
        return "[SearchResult location: " + J.toString$0$(this.location) + ", kind: " + H.S(this.kind) + ", isPotential: " + H.S(this.isPotential) + ", path: " + H.S(this.path) + "]";
      },
      static: {
        SearchResult_parse: function(m) {
          var t1, t2, t3, t4;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = E.Location_parse(t1.$index(m, "location"));
          t3 = t1.$index(m, "kind");
          t4 = t1.$index(m, "isPotential");
          return new E.SearchResult(t2, t3, t4, t1.$index(m, "path") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "path"), new E.SearchResult_parse_closure()), true, null));
        }
      }
    },
    SearchResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.Element_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    SourceChange: {
      "^": "Object;message>,edits<,linkedEditGroups<,selection",
      toString$0: function(_) {
        return "[SourceChange message: " + H.S(this.message) + ", edits: " + H.S(this.edits) + ", linkedEditGroups: " + H.S(this.linkedEditGroups) + "]";
      },
      static: {
        SourceChange_parse: function(m) {
          var t1, t2, t3, t4;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "message");
          t3 = t1.$index(m, "edits") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "edits"), new E.SourceChange_parse_closure()), true, null);
          t4 = t1.$index(m, "linkedEditGroups") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "linkedEditGroups"), new E.SourceChange_parse_closure0()), true, null);
          return new E.SourceChange(t2, t3, t4, E.Position_parse(t1.$index(m, "selection")));
        }
      }
    },
    SourceChange_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.SourceFileEdit_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    SourceChange_parse_closure0: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.LinkedEditGroup_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    SourceEdit: {
      "^": "Object;offset>,length>,replacement<,id>",
      toMap$0: function() {
        return E._stripNullValues(P.LinkedHashMap__makeLiteral(["offset", this.offset, "length", this.length, "replacement", this.replacement, "id", this.id]));
      },
      toString$0: function(_) {
        return "[SourceEdit offset: " + H.S(this.offset) + ", length: " + H.S(this.length) + ", replacement: " + H.S(this.replacement) + "]";
      },
      $isJsonable: 1,
      static: {
        SourceEdit_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new E.SourceEdit(t1.$index(m, "offset"), t1.$index(m, "length"), t1.$index(m, "replacement"), t1.$index(m, "id"));
        }
      }
    },
    SourceFileEdit: {
      "^": "Object;file>,fileStamp,edits<",
      toString$0: function(_) {
        return "[SourceFileEdit file: " + H.S(this.file) + ", fileStamp: " + H.S(this.fileStamp) + ", edits: " + H.S(this.edits) + "]";
      },
      static: {
        SourceFileEdit_parse: function(m) {
          var t1, t2, t3;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "file");
          t3 = t1.$index(m, "fileStamp");
          return new E.SourceFileEdit(t2, t3, t1.$index(m, "edits") == null ? null : P.List_List$from(J.map$1$ax(t1.$index(m, "edits"), new E.SourceFileEdit_parse_closure()), true, null));
        }
      }
    },
    SourceFileEdit_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return E.SourceEdit_parse(obj);
      }, null, null, 2, 0, null, 5, "call"]
    },
    TypeHierarchyItem: {
      "^": "Object;classElement<,interfaces<,mixins<,subclasses<,displayName<,memberElement,superclass<",
      static: {
        TypeHierarchyItem_parse: function(m) {
          var t1, t2, t3, t4, t5;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = E.Element_parse(t1.$index(m, "classElement"));
          t3 = t1.$index(m, "interfaces") == null ? null : P.List_List$from(t1.$index(m, "interfaces"), true, null);
          t4 = t1.$index(m, "mixins") == null ? null : P.List_List$from(t1.$index(m, "mixins"), true, null);
          t5 = t1.$index(m, "subclasses") == null ? null : P.List_List$from(t1.$index(m, "subclasses"), true, null);
          return new E.TypeHierarchyItem(t2, t3, t4, t5, t1.$index(m, "displayName"), E.Element_parse(t1.$index(m, "memberElement")), t1.$index(m, "superclass"));
        }
      }
    },
    ExtractLocalVariableRefactoringOptions: {
      "^": "RefactoringOptions;name>,extractAll",
      toMap$0: function() {
        return E._stripNullValues(P.LinkedHashMap__makeLiteral(["name", this.name, "extractAll", false]));
      }
    },
    RenameRefactoringOptions: {
      "^": "RefactoringOptions;newName",
      toMap$0: function() {
        return E._stripNullValues(P.LinkedHashMap__makeLiteral(["newName", this.newName]));
      }
    },
    RefactoringFeedback: {
      "^": "Object;_m",
      $index: function(_, key) {
        return J.$index$asx(this._m, key);
      }
    }
  }], ["atom.buffer_observer", "package:atom_dartlang/analysis/buffer_observer.dart",, K, {
    "^": "",
    _log: function(f) {
      f.catchError$1(new K._log_closure());
    },
    BufferObserverManager: {
      "^": "Object;observers,disposables,overlayManager",
      _newEditor$1: [function(editor) {
        var t1, t2, t3;
        t1 = this.observers;
        t2 = [];
        t3 = new K.BufferUpdater(new L.StreamSubscriptions(true, t2), null, this, editor, true, []);
        t3.path = editor.getPath$0();
        t2.push(J.transform$1$x(editor.get$onDidChange(), new M.Debounce(P.Duration$(0, 0, 0, 10, 0, 0), [null])).listen$1(t3.get$_didChange()));
        t2.push(editor.get$onDidDestroy().listen$1(t3.get$_didDestroy()));
        t2.push(editor.get$onDidChangeTitle().listen$1(t3.get$_onDidChangeTitle()));
        t3.addOverlay$0();
        t1.push(t3);
        t2 = editor.getPath$0();
        if (t2 == null ? false : J.endsWith$1$s(t2, ".dart"))
          t1.push(K.BufferFormatter$(this, editor));
      }, "call$1", "get$_newEditor", 2, 0, 7, 9],
      dispose$0: [function() {
        var t1, t2;
        this.disposables.dispose$0();
        t1 = this.observers;
        t2 = H.setRuntimeTypeInfo(t1.slice(), [H.getTypeArgumentByIndex(t1, 0)]);
        C.JSArray_methods.forEach$1(t2, new K.BufferObserverManager_dispose_closure());
        C.JSArray_methods.set$length(t1, 0);
        Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).set$willSend(null);
        this.overlayManager.sub.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      remove$1: function(_, observer) {
        return C.JSArray_methods.remove$1(this.observers, observer);
      },
      BufferObserverManager$0: function() {
        var t1, t2;
        t1 = this.get$_newEditor();
        C.JSArray_methods.forEach$1(Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).get$dartProjectEditors()._openEditors, t1);
        t2 = Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).get$dartProjectEditors()._editorOpenedController;
        new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(t1);
        P.Timer_Timer(C.Duration_0, new K.BufferObserverManager_closure(this));
      },
      $isDisposable: 1,
      static: {
        BufferObserverManager$: function() {
          var t1 = new K.OverlayManager(P.LinkedHashMap__makeEmpty(), null);
          t1._serverActive$1(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive());
          t1.sub = Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$onActive().listen$1(t1.get$_serverActive());
          Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).set$willSend(t1.get$_buffer_observer$_willSend());
          t1 = new K.BufferObserverManager([], new L.Disposables(true, []), t1);
          t1.BufferObserverManager$0();
          return t1;
        }
      }
    },
    BufferObserverManager_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        var t1 = this.$this;
        t1.disposables._disposables.push($.$get$atom()._workspace.observeTextEditors$1(new K.BufferObserverManager__closure(t1)));
      }
    },
    BufferObserverManager__closure: {
      "^": "Closure:0;$this",
      call$1: function(editor) {
        var path = editor.invoke$1("getPath");
        if (path == null || !J.endsWith$1$s(path, ".analysis_options"))
          return;
        if (J.$eq$($.$get$fs().basename$1(path), ".analysis_options") && Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path) != null)
          this.$this._newEditor$1(editor);
      }
    },
    BufferObserverManager_dispose_closure: {
      "^": "Closure:0;",
      call$1: function(obs) {
        return obs.dispose$0();
      }
    },
    BufferObserver: {
      "^": "Disposables;editor<",
      $isDisposable: 1
    },
    BufferFormatter: {
      "^": "BufferObserver;_buffer_observer$_subs,isFormatting,manager,editor,catchExceptions,_disposables",
      dispose$0: [function() {
        this._buffer_observer$_subs.cancel$0(0);
        C.JSArray_methods.remove$1(this.manager.observers, this);
      }, "call$0", "get$dispose", 0, 0, 2],
      BufferFormatter$2: function(manager, editor) {
        var t1, t2;
        t1 = this.editor;
        t2 = this._buffer_observer$_subs._subscriptions;
        t2.push(t1.get$onDidSave().listen$1(new K.BufferFormatter_closure(this, editor)));
        t2.push(t1.get$onDidDestroy().listen$1(new K.BufferFormatter_closure0(this)));
      },
      static: {
        BufferFormatter$: function(manager, editor) {
          var t1 = new K.BufferFormatter(new L.StreamSubscriptions(true, []), false, manager, editor, true, []);
          t1.BufferFormatter$2(manager, editor);
          return t1;
        }
      }
    },
    BufferFormatter_closure: {
      "^": "Closure:0;$this,editor",
      call$1: [function(_) {
        var t1, t2;
        t1 = this.$this;
        if (t1.isFormatting)
          return;
        if ($.$get$atom()._config.getValue$1("dartlang.formatOnSave") !== true)
          return;
        if (Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(t1.editor.getPath$0()) == null)
          return;
        t1.isFormatting = true;
        t2 = this.editor;
        F.FormattingManager_formatEditor(t2, true).then$1(new K.BufferFormatter__closure(t1, t2));
      }, null, null, 2, 0, null, 1, "call"]
    },
    BufferFormatter__closure: {
      "^": "Closure:0;$this,editor",
      call$1: [function(didFormat) {
        if (didFormat === true)
          J.save$0$x(this.editor);
        P.Timer_Timer(P.Duration$(0, 0, 0, 10, 0, 0), new K.BufferFormatter___closure(this.$this));
      }, null, null, 2, 0, null, 106, "call"]
    },
    BufferFormatter___closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        this.$this.isFormatting = false;
        return false;
      }
    },
    BufferFormatter_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        var t1 = this.$this;
        t1._buffer_observer$_subs.cancel$0(0);
        C.JSArray_methods.remove$1(t1.manager.observers, t1);
      }, null, null, 2, 0, null, 1, "call"]
    },
    BufferUpdater: {
      "^": "BufferObserver;_buffer_observer$_subs,path>,manager,editor,catchExceptions,_disposables",
      _didChange$1: [function(_) {
        return this.changedOverlay$0();
      }, function() {
        return this._didChange$1(null);
      }, "_didChange$0", "call$1", "call$0", "get$_didChange", 0, 2, 14, 2, 1],
      _onDidChangeTitle$1: [function(_) {
        this.removeOverlay$0();
        this.path = this.editor.getPath$0();
        this.addOverlay$0();
      }, function() {
        return this._onDidChangeTitle$1(null);
      }, "_onDidChangeTitle$0", "call$1", "call$0", "get$_onDidChangeTitle", 0, 2, 14, 2, 1],
      _didDestroy$1: [function(_) {
        return this.dispose$0();
      }, function() {
        return this._didDestroy$1(null);
      }, "_didDestroy$0", "call$1", "call$0", "get$_didDestroy", 0, 2, 14, 2, 1],
      addOverlay$0: function() {
        if (Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(this.path) == null)
          return;
        this.manager.overlayManager.addOverlay$2(this.path, this.editor.getText$0());
      },
      changedOverlay$0: function() {
        if (Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(this.path) == null)
          return;
        this.manager.overlayManager.updateOverlay$2(this.path, this.editor.getText$0());
      },
      removeOverlay$0: function() {
        if (Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(this.path) == null)
          return;
        this.manager.overlayManager.removeOverlay$1(this.path);
      },
      dispose$0: [function() {
        this.super$Disposables$dispose();
        this.removeOverlay$0();
        C.JSArray_methods.remove$1(this.manager.observers, this);
        this._buffer_observer$_subs.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2]
    },
    OverlayManager: {
      "^": "Object;overlays,sub",
      addOverlay$2: function(path, data) {
        var t1, overlay;
        t1 = this.overlays;
        overlay = t1.$index(0, path);
        if (overlay == null) {
          overlay = new K.OverlayInfo(path, data, data, 1, null);
          t1.$indexSet(0, path, overlay);
          if (Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive()) {
            $.$get$_logger18().fine$1("addContentOverlay " + H.S(path));
            K._log(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).updateContent$2(path, new E.AddContentOverlay("add", data)));
            overlay.lastSent = overlay.toSend;
            t1 = overlay._buffer_observer$_timer;
            if (!(t1 == null))
              t1.cancel$0(0);
          }
        } else
          ++overlay.count;
      },
      updateOverlay$2: function(path, newData) {
        var overlay, t1;
        overlay = this.overlays.$index(0, path);
        if (overlay == null) {
          this.addOverlay$2(path, newData);
          return;
        }
        if (!J.$eq$(overlay.toSend, newData))
          if (Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive()) {
            overlay.toSend = newData;
            t1 = overlay._buffer_observer$_timer;
            if (!(t1 == null))
              t1.cancel$0(0);
            overlay._buffer_observer$_timer = P.Timer_Timer(P.Duration$(0, 0, 0, 400, 0, 0), overlay.get$_flush());
          }
      },
      removeOverlay$1: function(path) {
        var t1, overlay;
        t1 = this.overlays;
        overlay = t1.$index(0, path);
        if (overlay == null)
          return;
        if (--overlay.count === 0) {
          t1.remove$1(0, path);
          $.$get$_logger18().fine$1("removeContentOverlay " + H.S(path));
          if (Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive()) {
            K._log(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).updateContent$2(path, new E.RemoveContentOverlay("remove")));
            overlay.lastSent = overlay.toSend;
            t1 = overlay._buffer_observer$_timer;
            if (!(t1 == null))
              t1.cancel$0(0);
          }
        }
      },
      _buffer_observer$_willSend$1: [function(methodName) {
        this._flush$0();
      }, "call$1", "get$_buffer_observer$_willSend", 2, 0, 10],
      _flush$0: function() {
        var t1, overlay;
        for (t1 = this.overlays, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          overlay = t1.get$current();
          if (overlay.get$isDirty())
            overlay._flush$0();
        }
      },
      _serverActive$1: [function(active) {
        var t1, toSend;
        if (active !== true)
          return;
        t1 = this.overlays;
        if (t1.get$isNotEmpty(t1)) {
          toSend = P.LinkedHashMap__makeEmpty();
          t1.forEach$1(0, new K.OverlayManager__serverActive_closure(toSend));
          K._log(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server().get$analysis().updateContent$1(toSend));
        }
      }, "call$1", "get$_serverActive", 2, 0, 47, 51],
      dispose$0: [function() {
        Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).set$willSend(null);
        this.sub.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    OverlayManager__serverActive_closure: {
      "^": "Closure:154;toSend",
      call$2: function(key, overlay) {
        this.toSend.$indexSet(0, key, new E.AddContentOverlay("add", overlay.get$toSend()));
        J.reset$0$x(overlay);
      }
    },
    OverlayInfo: {
      "^": "Object;path>,lastSent,toSend<,count,_buffer_observer$_timer",
      get$isDirty: function() {
        return !J.$eq$(this.lastSent, this.toSend);
      },
      _flush$0: [function() {
        var t1, t2, edits, diffs;
        t1 = {};
        if (!Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive())
          return;
        t2 = this._buffer_observer$_timer;
        if (!(t2 == null))
          t2.cancel$0(0);
        this._buffer_observer$_timer = null;
        edits = M.simpleDiff(this.lastSent, this.toSend);
        t1.count = 1;
        diffs = new H.MappedListIterable(edits, new K.OverlayInfo__flush_closure(t1), [null, null]).toList$0(0);
        this.lastSent = this.toSend;
        t1 = this.path;
        $.$get$_logger18().finer$1("changedOverlayContent " + H.S(t1));
        K._log(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).updateContent$2(t1, new E.ChangeContentOverlay("change", diffs)));
      }, "call$0", "get$_flush", 0, 0, 2],
      reset$0: function(_) {
        var t1;
        this.lastSent = this.toSend;
        t1 = this._buffer_observer$_timer;
        if (!(t1 == null))
          t1.cancel$0(0);
      }
    },
    OverlayInfo__flush_closure: {
      "^": "Closure:0;_box_0",
      call$1: [function(e) {
        var t1 = J.getInterceptor$x(e);
        return new E.SourceEdit(t1.get$offset(e), t1.get$length(e), e.get$replacement(), "" + this._box_0.count++);
      }, null, null, 2, 0, null, 0, "call"]
    },
    _log_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return $.$get$_logger18().warning$1("overlay call error; " + H.S(e));
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["", "package:atom_dartlang/analysis/completions.dart",, G, {
    "^": "",
    DartAutocompleteProvider: {
      "^": "AutocompleteProvider;selector,disableForSelector,inclusionPriority,excludeLowerPriority,filterSuggestions",
      getSuggestions$1: function(options) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, editor, offset, path, text, prefix, t1, descriptor, scopes, noCompletions, result, t2, $async$temp1, $async$temp2, $async$temp3, $async$temp4;
        var $async$getSuggestions$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (!Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive()) {
                  $async$returnValue = [];
                  // goto return
                  $async$goto = 1;
                  break;
                }
                editor = options.editor;
                offset = new Y.TextBuffer(Y._cvt1(editor.invoke$1("getBuffer"))).invoke$2("characterIndexForPosition", options.bufferPosition);
                path = editor.invoke$1("getPath");
                text = editor.invoke$1("getText");
                prefix = options.prefix;
                t1 = editor.invoke$2("scopeDescriptorForBufferPosition", options.bufferPosition);
                descriptor = t1 == null ? null : new T.ScopeDescriptor(t1);
                scopes = descriptor == null ? descriptor : P.List_List$from(J.$index$asx(descriptor.obj, "scopes"), true, null);
                if (scopes == null)
                  scopes = H.setRuntimeTypeInfo([], [P.String]);
                if (J.any$1$ax(scopes, new G.DartAutocompleteProvider_getSuggestions_closure())) {
                  $async$returnValue = [];
                  // goto return
                  $async$goto = 1;
                  break;
                }
                noCompletions = P.LinkedHashSet_LinkedHashSet$from(C.List_8Jr, null);
                t1 = J.getInterceptor$n(offset);
                if (t1.$gt(offset, 0))
                  if (noCompletions.contains$1(0, J.$index$asx(text, t1.$sub(offset, 1)))) {
                    $async$returnValue = [];
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                if (J.$eq$(J.get$length$asx(prefix), 1) && noCompletions.contains$1(0, prefix)) {
                  $async$returnValue = [];
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 3;
                return P._asyncHelper(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server().get$completion().getSuggestions$2(path, offset), $async$getSuggestions$1, $async$completer);
              case 3:
                // returning from await.
                result = $async$result;
                t1 = Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server().get$completion().get$onResults();
                t1.toString;
                t2 = [H.getRuntimeTypeArgument(t1, "Stream", 0)];
                t2 = new P._WhereStream(new G.DartAutocompleteProvider_getSuggestions_closure0(), new P._WhereStream(new G.DartAutocompleteProvider_getSuggestions_closure1(result), t1, t2), t2);
                $async$temp1 = $async$self;
                $async$temp2 = text;
                $async$temp3 = offset;
                $async$temp4 = prefix;
                $async$goto = 4;
                return P._asyncHelper(t2.get$first(t2), $async$getSuggestions$1, $async$completer);
              case 4:
                // returning from await.
                $async$returnValue = $async$temp1._handleCompletionResults$4($async$temp2, $async$temp3, $async$temp4, $async$result);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$getSuggestions$1, $async$completer);
      },
      _handleCompletionResults$4: function(fileText, offset, prefix, cr) {
        var replacementOffset, p, replacementPrefix, results, suggestions, t1, _i, s;
        replacementOffset = cr.get$replacementOffset();
        if (J.$lt$n(replacementOffset, offset)) {
          p = J.substring$2$s(fileText, replacementOffset, offset);
          if (p !== prefix) {
            replacementPrefix = p;
            prefix = replacementPrefix;
          } else
            replacementPrefix = null;
        } else
          replacementPrefix = null;
        results = P.List_List$from(J.where$1$ax(J.get$results$x(cr), new G.DartAutocompleteProvider__handleCompletionResults_closure()), true, null);
        suggestions = H.setRuntimeTypeInfo([], [X.Suggestion]);
        for (t1 = results.length, _i = 0; _i < results.length; results.length === t1 || (0, H.throwConcurrentModificationError)(results), ++_i) {
          s = this._makeSuggestion$4(results[_i], prefix, replacementPrefix, replacementOffset);
          suggestions.push(s);
        }
        return suggestions;
      },
      _makeSuggestion$4: function(cs, prefix, replacementPrefix, replacementOffset) {
        var t1, text, snippet, displayText, t2, t3, t4, names, selectionOffset, potential, docs, startIndex, endIndex, iconHTML;
        t1 = {};
        text = cs.get$completion();
        if (cs.get$parameterNames() != null)
          if (cs.get$parameterNames().length === 0) {
            if (!J.$eq$(J.get$kind$x(cs), "IDENTIFIER"))
              text = J.$add$ns(text, "()");
            snippet = null;
            displayText = null;
          } else {
            t1.count = 0;
            t2 = cs.get$parameterNames();
            t3 = cs.get$requiredParameterCount();
            t2.toString;
            t4 = H.getTypeArgumentByIndex(t2, 0);
            if (t3 != null) {
              if (J.$lt$n(t3, 0))
                H.throwExpression(P.RangeError$range(t3, 0, null, "end", null));
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (0 > t3)
                H.throwExpression(P.RangeError$range(0, 0, t3, "start", null));
            }
            names = new H.MappedListIterable(new H.SubListIterable(t2, 0, t3, [t4]), new G.DartAutocompleteProvider__makeSuggestion_closure(t1), [t4, null]).join$1(0, ", ");
            displayText = !J.$eq$(cs.get$requiredParameterCount(), cs.get$parameterNames().length) ? this._describe$2$useDocs(cs, false) : null;
            if (!J.$eq$(J.get$kind$x(cs), "IDENTIFIER")) {
              snippet = H.S(cs.get$completion()) + "(" + names + ")$" + ++t1.count;
              text = null;
            } else
              snippet = null;
          }
        else {
          snippet = null;
          displayText = null;
        }
        selectionOffset = !J.$eq$(cs.get$selectionOffset(), J.get$length$asx(cs.get$completion())) ? J.$add$ns(J.$sub$n(replacementOffset, J.get$length$asx(prefix)), cs.get$selectionOffset()) : null;
        potential = cs.get$isPotential() === true || cs.get$importUri() != null;
        if (cs.get$docSummary() != null && J.contains$1$asx(cs.get$docSummary(), '<i class="material-icons') === true) {
          docs = cs.get$docSummary();
          t1 = J.getInterceptor$asx(docs);
          startIndex = t1.indexOf$1(docs, "<i class=");
          endIndex = t1.indexOf$1(docs, "</i>");
          t2 = J.getInterceptor(endIndex);
          iconHTML = !t2.$eq(endIndex, -1) ? t1.substring$2(docs, startIndex, t2.$add(endIndex, 4)) : null;
        } else
          iconHTML = null;
        t1 = J.getInterceptor$x(cs);
        t2 = C.Map_iewa9.$index(0, t1.get$kind(cs));
        if (t2 == null)
          t2 = C.Map_0rsty.$index(0, J.get$kind$x(cs.get$element()));
        t3 = this._sanitizeReturnType$1(cs);
        t4 = cs.get$element();
        t4 = t4 == null ? t4 : J.get$kind$x(t4);
        t1 = this._rightLabel$1(t4 == null ? t1.get$kind(cs) : t4);
        if (cs.get$isDeprecated() === true)
          t4 = "suggestion-deprecated";
        else
          t4 = potential ? "suggestion-potential" : null;
        return new X.Suggestion(text, snippet, displayText, replacementPrefix, t2, t3, null, t1, null, t4, iconHTML, this._describe$1(cs), null, cs.get$importUri(), selectionOffset, null);
      },
      _sanitizeReturnType$1: function(cs) {
        var t1 = cs.get$element();
        if (J.$eq$(t1 == null ? t1 : J.get$kind$x(t1), "CONSTRUCTOR"))
          return;
        t1 = cs.get$parameterType();
        return t1 == null ? cs.get$returnType() : t1;
      },
      _describe$2$useDocs: function(cs, useDocs) {
        var docs, t1, element, str;
        if (useDocs) {
          if (cs.get$importUri() != null)
            return "Requires '" + H.S(cs.get$importUri()) + "'";
          if (cs.get$docSummary() != null) {
            docs = cs.get$docSummary();
            t1 = J.getInterceptor$s(docs);
            return t1.startsWith$1(docs, "<") ? H.stringReplaceAllUnchecked(t1.replaceAll$2(docs, "&#x2014;", "-"), $.$get$_htmlRegex(), "") : docs;
          }
        }
        element = cs.get$element();
        if ((element == null ? element : element.get$parameters()) != null) {
          t1 = J.getInterceptor$x(element);
          str = H.S(t1.get$name(element)) + H.S(element.get$parameters());
          if (J.$eq$(t1.get$kind(element), "CONSTRUCTOR"))
            str = J.get$isEmpty$asx(t1.get$name(element)) === true ? H.S(cs.get$declaringType()) + str : H.S(cs.get$declaringType()) + "." + str;
          return element.get$returnType() != null ? str + " \u2192 " + H.S(element.get$returnType()) : str;
        }
        return cs.get$completion();
      },
      _describe$1: function(cs) {
        return this._describe$2$useDocs(cs, true);
      },
      _rightLabel$1: function(kind) {
        return $.$get$DartAutocompleteProvider__rightLabelMap().putIfAbsent$2(0, kind, new G.DartAutocompleteProvider__rightLabel_closure(kind));
      }
    },
    DartAutocompleteProvider_getSuggestions_closure: {
      "^": "Closure:0;",
      call$1: function(s) {
        var t1 = J.getInterceptor$s(s);
        return t1.startsWith$1(s, "comment.line") || t1.startsWith$1(s, "comment.block");
      }
    },
    DartAutocompleteProvider_getSuggestions_closure1: {
      "^": "Closure:0;result",
      call$1: function(cr) {
        return J.$eq$(J.get$id$x(cr), J.get$id$x(this.result));
      }
    },
    DartAutocompleteProvider_getSuggestions_closure0: {
      "^": "Closure:0;",
      call$1: function(cr) {
        return cr.get$isLast();
      }
    },
    DartAutocompleteProvider__handleCompletionResults_closure: {
      "^": "Closure:0;",
      call$1: function(result) {
        return !$.$get$DartAutocompleteProvider__elided().contains$1(0, result.get$completion());
      }
    },
    DartAutocompleteProvider__makeSuggestion_closure: {
      "^": "Closure:0;_box_0",
      call$1: [function($name) {
        return "${" + ++this._box_0.count + ":" + H.S($name) + "}";
      }, null, null, 2, 0, null, 23, "call"]
    },
    DartAutocompleteProvider__rightLabel_closure: {
      "^": "Closure:1;kind",
      call$0: function() {
        return H.stringReplaceAllUnchecked(J.toLowerCase$0$s(this.kind), "_", " ");
      }
    }
  }], ["atom.dartdoc", "package:atom_dartlang/analysis/dartdoc.dart",, T, {
    "^": "",
    DartdocHelper: {
      "^": "Object;_dartdoc$_disposables,_control",
      dispose$0: [function() {
        this._dartdoc$_disposables.dispose$0();
        this._hideControl$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _activateEditor$1: [function(editor) {
        this._hideControl$0();
      }, "call$1", "get$_activateEditor", 2, 0, 7, 9],
      _hideControl$0: function() {
        var t1 = this._control;
        if (t1 != null) {
          t1._dartdoc$_sub.cancel$0(0);
          t1._cmdDispose.invoke$1("dispose");
          t1.super$CoreElement$dispose();
        }
        this._control = null;
      },
      _handleDartdoc$1: function($event) {
        var editor, t1, range, offset;
        if (!Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive()) {
          this._hideControl$0();
          $.$get$atom().invoke$1("beep");
          return;
        }
        editor = $event.get$editor();
        t1 = editor.invoke$1("getSelectedBufferRange");
        range = t1 == null ? null : new Y.Range(Y._cvt1(t1));
        offset = new Y.TextBuffer(Y._cvt1(editor.invoke$1("getBuffer"))).invoke$2("characterIndexForPosition", new Y.Point0(Y._cvt1(J.$index$asx(range.obj, "start"))));
        t1 = M.toTitleCase("dartdoc");
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new X.AnalysisRequestJob(new T.DartdocHelper__handleDartdoc_closure(this, true, editor, offset), t1, null));
      },
      _handleHoverResult$3: function(result, editor, explicit) {
        var t1, hover, t2, t3, t4;
        this._hideControl$0();
        if (result.get$hovers().length === 0) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        t1 = result.get$hovers();
        hover = (t1 && C.JSArray_methods).get$first(t1);
        t1 = T.DartdocControl$(editor);
        this._control = t1;
        t2 = T.DartdocHelper__title(hover);
        J.clear$0$ax(J.get$children$x(t1._titleDiv.get$element()));
        J.add$1$ax(t1._titleDiv, K.CoreElement$("div", null, "inline-block text-highlight", t2));
        t2 = this._control;
        t1 = T.DartdocHelper__render(hover);
        t2.toString;
        if (t1.length !== 0)
          J.setInnerHtml$2$validator$x(t2._bodyDiv.get$element(), t1, new S.PermissiveNodeValidator());
        else
          J.add$1$ax(t2._bodyDiv, K.CoreElement$("p", null, "text-subtle", "No documentation."));
        t1 = this._control;
        t2 = hover.get$containingClassDescription();
        t3 = hover.get$elementKind();
        t4 = T.DartdocHelper__getLibraryName(hover);
        J.clear$0$ax(J.get$children$x(t1._footerDiv.get$element()));
        if (t2 != null)
          J.add$1$ax(t1._footerDiv, K.CoreElement$("div", null, "inline-block highlight-success", t2));
        if (t3 != null)
          J.add$1$ax(t1._footerDiv, K.CoreElement$("div", null, "inline-block highlight-success", t3));
        t2 = t1._footerDiv;
        t3 = K.CoreElement$("span", null, null, null);
        J.set$innerHtml$x(t3.element, "&nbsp;");
        J.add$1$ax(t2, t3);
        if (t4 != null)
          J.add$1$ax(t1._footerDiv, K.CoreElement$("div", null, "inline-block highlight-info pull-right", t4));
      },
      DartdocHelper$0: function() {
        this._dartdoc$_disposables._disposables.push($.$get$atom()._commands.add$3(0, "atom-text-editor", "dartlang:show-dartdoc", new T.DartdocHelper_closure(this)));
        var t1 = Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).get$dartProjectEditors()._activeEditorController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(this.get$_activateEditor());
      },
      $isDisposable: 1,
      static: {
        DartdocHelper$: function() {
          var t1 = new T.DartdocHelper(new L.Disposables(true, []), null);
          t1.DartdocHelper$0();
          return t1;
        },
        DartdocHelper__title: function(hover) {
          if (hover.get$elementDescription() != null)
            return hover.get$elementDescription();
          if (hover.get$staticType() != null)
            return hover.get$staticType();
          if (hover.get$propagatedType() != null)
            return hover.get$propagatedType();
          return "Dartdoc";
        },
        DartdocHelper__render: function(hover) {
          var buf, t1;
          buf = new P.StringBuffer("");
          new T.DartdocHelper__render_writeTitle(buf).call$2("propagated type", hover.get$propagatedType());
          if (hover.get$dartdoc() != null) {
            t1 = buf._contents;
            if (t1.length !== 0)
              buf._contents = t1 + "<br>";
            if (J.contains$1$asx(hover.get$dartdoc(), ' class="material-icons') === true)
              buf._contents += "\n" + H.S(hover.get$dartdoc()) + "\n";
            else
              buf._contents += "\n" + B.markdownToHtml(hover.get$dartdoc(), null, null, null, false, null, T.dartdoc_DartdocHelper__resolve$closure()) + "\n";
          }
          t1 = buf._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        },
        DartdocHelper__resolve: [function($name) {
          return new T.Element1("code", [new T.Text($name)], P.LinkedHashMap__makeEmpty(), null);
        }, "call$1", "dartdoc_DartdocHelper__resolve$closure", 2, 0, 249, 23],
        DartdocHelper__getLibraryName: function(hover) {
          var $name, t1, index, t2;
          $name = hover.get$containingLibraryName();
          if ($name != null && J.get$isNotEmpty$asx($name) === true)
            return $name;
          $name = hover.get$containingLibraryPath();
          if ($name == null || J.get$isEmpty$asx($name) === true)
            return;
          t1 = J.getInterceptor$asx($name);
          index = t1.lastIndexOf$1($name, "/");
          t2 = J.getInterceptor(index);
          if (!t2.$eq(index, -1))
            $name = t1.substring$1($name, t2.$add(index, 1));
          t1 = J.getInterceptor$asx($name);
          index = t1.lastIndexOf$1($name, "\\");
          t2 = J.getInterceptor(index);
          return !t2.$eq(index, -1) ? t1.substring$1($name, t2.$add(index, 1)) : $name;
        }
      }
    },
    DartdocHelper_closure: {
      "^": "Closure:0;$this",
      call$1: function($event) {
        this.$this._handleDartdoc$1($event);
      }
    },
    DartdocHelper__handleDartdoc_closure: {
      "^": "Closure:1;$this,explicit,editor,offset",
      call$0: function() {
        var t1 = this.editor;
        return Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).getHover$2(t1.invoke$1("getPath"), this.offset).then$1(new T.DartdocHelper__handleDartdoc__closure(this.$this, this.explicit, t1));
      }
    },
    DartdocHelper__handleDartdoc__closure: {
      "^": "Closure:152;$this,explicit,editor",
      call$1: [function(result) {
        if (result == null)
          return;
        this.$this._handleHoverResult$3(result, this.editor, this.explicit);
      }, null, null, 2, 0, null, 3, "call"]
    },
    DartdocHelper__render_writeTitle: {
      "^": "Closure:139;buf",
      call$2: function(title, desc) {
        if (desc != null && J.get$isNotEmpty$asx(desc) === true)
          this.buf._contents += "<span class='inline-block highlight'>" + title + "</span> " + H.S(desc) + "<br>\n";
      }
    },
    DartdocControl: {
      "^": "CoreElement;_cmdDispose,_dartdoc$_sub,_titleDiv,_bodyDiv,_footerDiv,element",
      dispose$0: function() {
        this._dartdoc$_sub.cancel$0(0);
        this._cmdDispose.invoke$1("dispose");
        this.super$CoreElement$dispose();
      },
      DartdocControl$1: function(editor) {
        var t1 = this.element;
        J.setAttribute$2$x(t1, "id", "dartdoc-tooltip");
        this._cmdDispose = $.$get$atom()._commands.add$3(0, "atom-workspace", "core:cancel", new T.DartdocControl_closure(this));
        this._dartdoc$_sub = editor.eventStream$1("onDidDestroy").listen$1(new T.DartdocControl_closure0(this));
        this._titleDiv = this.add$1(0, K.CoreElement$("div", null, "dartdoc-title", null));
        this._bodyDiv = this.add$1(0, K.CoreElement$("div", null, "dartdoc-body", null));
        this._footerDiv = this.add$1(0, K.CoreElement$("div", null, "dartdoc-footer", null));
        J.append$1$x(J.$index$asx($.ViewRegistry__instance.invoke$2("getView", editor.obj), "parentElement"), t1);
      },
      static: {
        DartdocControl$: function(editor) {
          var t1 = new T.DartdocControl(null, null, null, null, null, W._ElementFactoryProvider_createElement_tag("div", null));
          t1.CoreElement$4$attributes$classes$text("div", null, "dartdoc-tooltip select-list popover-list", null);
          t1.DartdocControl$1(editor);
          return t1;
        }
      }
    },
    DartdocControl_closure: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        var t1 = this.$this;
        t1._dartdoc$_sub.cancel$0(0);
        t1._cmdDispose.invoke$1("dispose");
        t1.super$CoreElement$dispose();
        return;
      }
    },
    DartdocControl_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        var t1 = this.$this;
        t1._dartdoc$_sub.cancel$0(0);
        t1._cmdDispose.invoke$1("dispose");
        t1.super$CoreElement$dispose();
        return;
      }, null, null, 2, 0, null, 1, "call"]
    }
  }], ["atom.declaration_nav", "package:atom_dartlang/analysis/declaration_nav.dart",, D, {
    "^": "",
    NavigationHelper: {
      "^": "Object;_declaration_nav$_commands,_completerHelper,_eventListener",
      _activate$1: [function(editor) {
        this._eventListener.dispose$0();
        if (editor == null)
          return;
        this._eventListener = L.EventListener$(J.get$view$x(editor), "mousedown", new D.NavigationHelper__activate_closure(this, editor));
      }, "call$1", "get$_activate", 2, 0, 7, 9],
      _navigationEvent$1: [function(navInfo) {
        this._completerHelper.handleNavInfo$1(navInfo);
      }, "call$1", "get$_navigationEvent", 2, 0, 132, 52],
      _handleNavigate$1: [function($event) {
        this._handleNavigateEditor$1($event.get$editor());
      }, "call$1", "get$_handleNavigate", 2, 0, 6],
      _handleNavigateEditor$1: function(editor) {
        var path, range, offset;
        if (Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive()) {
          E.trackCommand("jump-to-declaration");
          path = editor.getPath$0();
          range = editor.getSelectedBufferRange$0();
          offset = editor.getBuffer$0().invoke$2("characterIndexForPosition", new Y.Point0(Y._cvt1(J.$index$asx(range.obj, "start"))));
          this._completerHelper.getNavigationInfo$2$timeout(path, $.$get$NavigationHelper__timeout()).then$1(new D.NavigationHelper__handleNavigateEditor_closure(this, editor, offset)).catchError$1(new D.NavigationHelper__handleNavigateEditor_closure0(this));
        } else
          $.$get$atom().invoke$1("beep");
      },
      _processNavInfo$3: function(editor, offset, navInfo) {
        var t1, files, targets, region, t2, target, file, buffer;
        t1 = J.getInterceptor$x(navInfo);
        files = t1.get$files(navInfo);
        targets = navInfo.get$targets();
        for (t1 = J.get$iterator$ax(t1.get$regions(navInfo)); t1.moveNext$0();) {
          region = t1.__interceptors$_current;
          t2 = J.getInterceptor$x(region);
          if (J.$le$n(t2.get$offset(region), offset) && J.$gt$n(J.$add$ns(t2.get$offset(region), t2.get$length(region)), offset)) {
            t1 = region.get$targets();
            t1 = (t1 && C.JSArray_methods).get$first(t1);
            if (t1 >>> 0 !== t1 || t1 >= targets.length)
              return H.ioore(targets, t1);
            target = targets[t1];
            t1 = target.get$fileIndex();
            if (t1 >>> 0 !== t1 || t1 >= files.length)
              return H.ioore(files, t1);
            file = files[t1];
            buffer = editor.getBuffer$0();
            return F.flashSelection(editor, new Y.Range(Y._create0("Range", Y._cvt1(buffer.invoke$2("positionForCharacterIndex", t2.get$offset(region))), Y._cvt1(buffer.invoke$2("positionForCharacterIndex", J.$add$ns(t2.get$offset(region), t2.get$length(region))))))).then$1(new D.NavigationHelper__processNavInfo_closure(target, file));
          }
        }
        return P.Future_Future$error("no element", null, null);
      },
      dispose$0: [function() {
        return this._declaration_nav$_commands.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1,
      static: {
        NavigationHelper__jumpKey: function() {
          var key, t1;
          key = $.$get$atom()._config.getValue$1("dartlang.jumpToDeclarationKeys");
          t1 = J.getInterceptor(key);
          if (t1.$eq(key, "command"))
            return "metaKey";
          if (t1.$eq(key, "control"))
            return "ctrlKey";
          if (t1.$eq(key, "option") || t1.$eq(key, "alt"))
            return "altKey";
          return $.$get$isMac() === true ? "metaKey" : "ctrlKey";
        }
      }
    },
    NavigationHelper__activate_closure: {
      "^": "Closure:13;$this,editor",
      call$1: function(evt) {
        var shouldJump, exception;
        try {
          shouldJump = J.$index$asx(evt, D.NavigationHelper__jumpKey());
          if (shouldJump === true)
            this.$this._handleNavigateEditor$1(this.editor);
        } catch (exception) {
          H.unwrapException(exception);
        }
      }
    },
    NavigationHelper__handleNavigateEditor_closure: {
      "^": "Closure:131;$this,editor,offset",
      call$1: [function(navInfo) {
        if (navInfo != null)
          return this.$this._processNavInfo$3(this.editor, this.offset, navInfo);
        else
          $.$get$atom().invoke$1("beep");
      }, null, null, 2, 0, null, 52, "call"]
    },
    NavigationHelper__handleNavigateEditor_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        return $.$get$atom().invoke$1("beep");
      }, null, null, 2, 0, null, 1, "call"]
    },
    NavigationHelper__processNavInfo_closure: {
      "^": "Closure:0;target,file",
      call$1: [function(_) {
        var t1 = this.target;
        Q.Dependencies_instance().getDependency$1(C.Type_NavigationManager_X8s).jumpToLocation$4(this.file, J.$sub$n(t1.get$startLine(), 1), J.$sub$n(t1.get$startColumn(), 1), J.get$length$asx(t1));
      }, null, null, 2, 0, null, 1, "call"]
    },
    _NavCompleterHelper: {
      "^": "Object;_lastInfos,_declaration_nav$_completers",
      handleNavInfo$1: function(info) {
        var path, t1;
        path = J.get$file$x(info);
        t1 = this._declaration_nav$_completers;
        if (t1.$index(0, path) != null) {
          J.complete$1$x(t1.$index(0, path), info);
          t1.remove$1(0, path);
        }
        t1 = this._lastInfos;
        C.JSArray_methods.checkGrowable$1(t1, "removeWhere");
        C.JSArray_methods._removeWhere$2(t1, new D._NavCompleterHelper_handleNavInfo_closure(path), true);
        C.JSArray_methods.insert$2(this._lastInfos, 0, info);
        t1 = this._lastInfos;
        if (t1.length > 24)
          this._lastInfos = C.JSArray_methods.sublist$2(t1, 0, 24);
      },
      getNavigationInfo$2$timeout: function(path, timeout) {
        var t1, t2, _i, nav;
        for (t1 = this._lastInfos, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          nav = t1[_i];
          if (J.$eq$(J.get$file$x(nav), path)) {
            t1 = new P._Future(0, $.Zone__current, null, [null]);
            t1._asyncComplete$1(nav);
            return t1;
          }
        }
        t1 = this._declaration_nav$_completers;
        if (t1.$index(0, path) == null) {
          t2 = E.AnalysisNavigation;
          t1.$indexSet(0, path, new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [t2]), [t2]));
        }
        if (timeout != null)
          return t1.$index(0, path).future.timeout$2$onTimeout(0, timeout, new D._NavCompleterHelper_getNavigationInfo_closure());
        else
          return t1.$index(0, path).future;
      }
    },
    _NavCompleterHelper_handleNavInfo_closure: {
      "^": "Closure:0;path",
      call$1: function(nav) {
        return J.$eq$(J.get$file$x(nav), this.path);
      }
    },
    _NavCompleterHelper_getNavigationInfo_closure: {
      "^": "Closure:1;",
      call$0: [function() {
        return;
      }, null, null, 0, 0, null, "call"]
    }
  }], ["", "package:atom_dartlang/analysis/find_type.dart",, G, {
    "^": "",
    FindTypeHelper: {
      "^": "Object;disposables,_lastSearchTerm",
      _handleFindType$1: function(editor) {
        D.promptUser("Find type:", this._lastSearchTerm, true, false, true).then$1(new G.FindTypeHelper__handleFindType_closure(this, editor));
      },
      _createInsensitiveRegex$1: function(searchTerm) {
        var t1, i, t2, t3, s;
        t1 = J.getInterceptor$asx(searchTerm);
        i = 0;
        t2 = "";
        while (true) {
          t3 = t1.get$length(searchTerm);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          s = t1.$index(searchTerm, i);
          t3 = J.getInterceptor$s(s);
          t3 = t2 + ("[" + t3.toLowerCase$0(s) + t3.toUpperCase$0(s) + "]");
          ++i;
          t2 = t3;
        }
        return t2.charCodeAt(0) == 0 ? t2 : t2;
      },
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      FindTypeHelper$0: function() {
        this.disposables._disposables.push($.$get$atom()._commands.add$3(0, "atom-text-editor", "dartlang:find-type", new G.FindTypeHelper_closure(this)));
      },
      $isDisposable: 1,
      static: {
        FindTypeHelper$: function() {
          var t1 = new G.FindTypeHelper(new L.Disposables(true, []), null);
          t1.FindTypeHelper$0();
          return t1;
        }
      }
    },
    FindTypeHelper_closure: {
      "^": "Closure:0;$this",
      call$1: function($event) {
        return this.$this._handleFindType$1($event.get$editor());
      }
    },
    FindTypeHelper__handleFindType_closure: {
      "^": "Closure:3;$this,editor",
      call$1: [function(searchTerm) {
        var t1, e, t2, exception, t3;
        t1 = {};
        t1.searchTerm = searchTerm;
        try {
          t2 = new Y.TextEditorElement(Y._cvt1(this.editor.invoke$1("getElement")));
          t2.invoke$1("focused");
        } catch (exception) {
          t2 = H.unwrapException(exception);
          e = t2;
          $.$get$_logger25().info$2("Error focusing editor in _handleFindType", e);
        }
        if (searchTerm == null)
          return;
        searchTerm = J.trim$0$s(searchTerm);
        t1.searchTerm = searchTerm;
        if (C.JSString_methods.get$isEmpty(searchTerm)) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        t2 = this.$this;
        t2._lastSearchTerm = searchTerm;
        t3 = M.toTitleCase("Find type");
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new X.AnalysisRequestJob(new G.FindTypeHelper__handleFindType__closure(t1, t2), t3, null));
      }, null, null, 2, 0, null, 120, "call"]
    },
    FindTypeHelper__handleFindType__closure: {
      "^": "Closure:5;_box_0,$this",
      call$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, term, result, results, t2, exact, $location;
        var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._box_0;
                term = $async$self.$this._createInsensitiveRegex$1(t1.searchTerm);
                $async$goto = 3;
                return P._asyncHelper(J.get$search$x(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server()).findTopLevelDeclarations$1(term), $async$call$0, $async$completer);
              case 3:
                // returning from await.
                result = $async$result;
                if ((result == null ? result : J.get$id$x(result)) == null) {
                  $.$get$atom().invoke$1("beep");
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 4;
                return P._asyncHelper(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).getSearchResults$1(J.get$id$x(result)), $async$call$0, $async$completer);
              case 4:
                // returning from await.
                results = $async$result;
                t2 = J.getInterceptor$asx(results);
                if (t2.get$isEmpty(results) === true) {
                  $.$get$atom().invoke$1("beep");
                  // goto return
                  $async$goto = 1;
                  break;
                }
                exact = t2.where$1(results, new G.FindTypeHelper__handleFindType___closure(t1));
                if (exact.get$length(exact) === 1) {
                  $location = J.get$location$x(exact.get$first(exact));
                  t1 = J.getInterceptor$x($location);
                  Q.Dependencies_instance().getDependency$1(C.Type_NavigationManager_X8s).jumpToLocation$4(t1.get$file($location), J.$sub$n($location.get$startLine(), 1), J.$sub$n($location.get$startColumn(), 1), t1.get$length($location));
                } else
                  V.FindReferencesView_showView(new V.ReferencesSearch("Find Type", t1.searchTerm, results, null), null);
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$0, $async$completer);
      }
    },
    FindTypeHelper__handleFindType___closure: {
      "^": "Closure:126;_box_0",
      call$1: function(result) {
        return J.toLowerCase$0$s(J.get$name$x(J.get$first$ax(J.get$path$x(result)))) === J.toLowerCase$0$s(this._box_0.searchTerm);
      }
    }
  }], ["atom.formatting", "package:atom_dartlang/analysis/formatting.dart",, F, {
    "^": "",
    FormattingManager: {
      "^": "Object;_formatting$_commands",
      dispose$0: [function() {
        return this._formatting$_commands.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      FormattingManager$0: function() {
        var t1, t2;
        t1 = $.$get$atom();
        t2 = this._formatting$_commands._disposables;
        t2.push(t1._commands.add$3(0, ".tree-view", "dartlang:dart-format", new F.FormattingManager_closure()));
        t2.push(t1._commands.add$3(0, "atom-text-editor", "dartlang:dart-format", new F.FormattingManager_closure0()));
      },
      $isDisposable: 1,
      static: {
        FormattingManager$: function() {
          var t1 = new F.FormattingManager(new L.Disposables(true, []));
          t1.FormattingManager$0();
          return t1;
        },
        FormattingManager_formatFile: function(path) {
          var args;
          if (!Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$hasSdk()) {
            $.$get$atom().invoke$1("beep");
            return;
          }
          args = [];
          args.push("-l" + H.S($.$get$atom()._config.getValue$2$scope("editor.preferredLineLength", ["source.dart"])));
          args.push("-w");
          args.push(path);
          Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk().execBinSimple$2("dartfmt", args).then$1(new F.FormattingManager_formatFile_closure());
        },
        FormattingManager_formatEditor: function(editor, quiet) {
          var path, t1, range, buffer, t2, offset, end;
          path = editor.getPath$0();
          if (Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path) == null) {
            $.$get$atom().invoke$1("beep");
            t1 = new P._Future(0, $.Zone__current, null, [null]);
            t1._asyncComplete$1(false);
            return t1;
          }
          if (!Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive()) {
            $.$get$atom().invoke$1("beep");
            t1 = new P._Future(0, $.Zone__current, null, [null]);
            t1._asyncComplete$1(false);
            return t1;
          }
          range = editor.getSelectedBufferRange$0();
          buffer = editor.getBuffer$0();
          t1 = range.obj;
          t2 = J.getInterceptor$asx(t1);
          offset = buffer.invoke$2("characterIndexForPosition", new Y.Point0(Y._cvt1(t2.$index(t1, "start"))));
          end = buffer.invoke$2("characterIndexForPosition", new Y.Point0(Y._cvt1(t2.$index(t1, "end"))));
          return Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).format$4$lineLength(path, offset, J.$sub$n(end, offset), $.$get$atom()._config.getValue$2$scope("editor.preferredLineLength", ["source.dart"])).then$1(new F.FormattingManager_formatEditor_closure(editor, quiet, buffer)).catchError$1(new F.FormattingManager_formatEditor_closure0(quiet));
        }
      }
    },
    FormattingManager_closure: {
      "^": "Closure:0;",
      call$1: function(e) {
        F.FormattingManager_formatFile(e.get$targetFilePath());
      }
    },
    FormattingManager_closure0: {
      "^": "Closure:0;",
      call$1: function(e) {
        F.FormattingManager_formatEditor(e.get$editor(), false);
      }
    },
    FormattingManager_formatFile_closure: {
      "^": "Closure:27;",
      call$1: [function(result) {
        var t1;
        if (J.$eq$(result.get$exit(), 0)) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addSuccess", "Formatting successful.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        } else {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addError", "Error while formatting", t1._options$5$buttons$description$detail$dismissable$icon(null, result.get$stderr(), null, null, null));
        }
      }, null, null, 2, 0, null, 3, "call"]
    },
    FormattingManager_formatEditor_closure: {
      "^": "Closure:118;editor,quiet,buffer",
      call$1: [function(result) {
        var t1, t2;
        if (result.get$edits().length === 0) {
          if (!this.quiet) {
            t1 = $.$get$atom()._notifications;
            t1.invoke$3("addSuccess", "No formatting changes.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          }
          return false;
        } else {
          if (!this.quiet) {
            t1 = $.$get$atom()._notifications;
            t1.invoke$3("addSuccess", "Formatting successful.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          }
          t1 = this.editor;
          F.applyEdits(t1, result.get$edits());
          t2 = this.buffer;
          t1.setSelectedBufferRange$1(new Y.Range(Y._create0("Range", Y._cvt1(t2.invoke$2("positionForCharacterIndex", result.get$selectionOffset())), Y._cvt1(t2.invoke$2("positionForCharacterIndex", J.$add$ns(result.get$selectionOffset(), result.get$selectionLength()))))));
          return true;
        }
      }, null, null, 2, 0, null, 3, "call"]
    },
    FormattingManager_formatEditor_closure0: {
      "^": "Closure:0;quiet",
      call$1: [function(e) {
        var t1;
        if (e instanceof E.RequestError) {
          if (!this.quiet) {
            t1 = $.$get$atom()._notifications;
            t1.invoke$3("addError", "Error while formatting", t1._options$5$buttons$description$detail$dismissable$icon(null, e.message, null, null, null));
          }
        } else {
          $.$get$atom().invoke$1("beep");
          $.$get$_logger19().warning$1("error when formatting: " + H.S(e));
        }
        return false;
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["atom.analysis.organize_file", "package:atom_dartlang/analysis/organize_file.dart",, T, {
    "^": "",
    OrganizeFileManager: {
      "^": "Object;disposables",
      _addEditorCommand$2: function(command, impl) {
        this.disposables._disposables.push($.$get$atom()._commands.add$3(0, "atom-text-editor", command, new T.OrganizeFileManager__addEditorCommand_closure(impl)));
      },
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleSortMembers$1: [function(editor) {
        var path, t1;
        path = editor.invoke$1("getPath");
        t1 = M.toTitleCase("Sort members");
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new X.AnalysisRequestJob(new T.OrganizeFileManager__handleSortMembers_closure(editor, path), t1, null));
      }, "call$1", "get$_handleSortMembers", 2, 0, 7],
      _handleOrganizeDirectives$1: [function(editor) {
        var path, t1;
        path = editor.invoke$1("getPath");
        t1 = M.toTitleCase("Organize directives");
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new X.AnalysisRequestJob(new T.OrganizeFileManager__handleOrganizeDirectives_closure(editor, path), t1, null));
      }, "call$1", "get$_handleOrganizeDirectives", 2, 0, 7],
      $isDisposable: 1
    },
    OrganizeFileManager__addEditorCommand_closure: {
      "^": "Closure:0;impl",
      call$1: function(e) {
        var editor;
        if (!Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive()) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        editor = e.get$editor();
        if (Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(editor.invoke$1("getPath")) == null) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        this.impl.call$1(editor);
      }
    },
    OrganizeFileManager__handleSortMembers_closure: {
      "^": "Closure:1;editor,path",
      call$0: function() {
        return Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server().get$edit().sortMembers$1(this.path).then$1(new T.OrganizeFileManager__handleSortMembers__closure(this.editor));
      }
    },
    OrganizeFileManager__handleSortMembers__closure: {
      "^": "Closure:0;editor",
      call$1: [function(result) {
        var edit, t1;
        edit = result.get$edit();
        if (edit.get$edits().length === 0) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addSuccess", "No changes from sort members.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        } else {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addSuccess", "Sort members successful.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          F.applyEdits(this.editor, edit.get$edits());
        }
      }, null, null, 2, 0, null, 3, "call"]
    },
    OrganizeFileManager__handleOrganizeDirectives_closure: {
      "^": "Closure:1;editor,path",
      call$0: function() {
        return Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server().get$edit().organizeDirectives$1(this.path).then$1(new T.OrganizeFileManager__handleOrganizeDirectives__closure(this.editor)).catchError$1(new T.OrganizeFileManager__handleOrganizeDirectives__closure0());
      }
    },
    OrganizeFileManager__handleOrganizeDirectives__closure: {
      "^": "Closure:0;editor",
      call$1: [function(result) {
        var edit, t1;
        edit = result.get$edit();
        if (edit.get$edits().length === 0) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addSuccess", "No changes from organize directives.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        } else {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addSuccess", "Organize directives successful.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          F.applyEdits(this.editor, edit.get$edits());
        }
      }, null, null, 2, 0, null, 3, "call"]
    },
    OrganizeFileManager__handleOrganizeDirectives__closure0: {
      "^": "Closure:0;",
      call$1: [function(e) {
        var t1;
        if (e instanceof E.RequestError && J.$eq$(e.code, "UNKNOWN_REQUEST")) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "Organize directives is not supported in this version of the analysis server.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        } else {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addError", "Error running organize directives.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, H.S(e), null, null));
        }
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["atom.quick_fixes", "package:atom_dartlang/analysis/quick_fixes.dart",, M, {
    "^": "",
    _applyChange: function(currentEditor, change) {
      var sourceFileEdits = change.get$edits();
      P.Future_forEach(sourceFileEdits, new M._applyChange_closure(sourceFileEdits, change.get$linkedEditGroups())).then$1(new M._applyChange_closure0(change, sourceFileEdits)).catchError$1(new M._applyChange_closure1());
    },
    QuickFixHelper: {
      "^": "Object;disposables",
      displayQuickFixes$1: function(editor) {
        return this._handleQuickFix$2$autoFix(editor, false);
      },
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleQuickFix$2$autoFix: function(editor, autoFix) {
        var path, range, t1, t2, t3, offset, $length;
        path = editor.getPath$0();
        range = editor.getSelectedBufferRange$0();
        t1 = editor.getBuffer$0();
        t2 = range.obj;
        t3 = J.getInterceptor$asx(t2);
        offset = t1.invoke$2("characterIndexForPosition", new Y.Point0(Y._cvt1(t3.$index(t2, "start"))));
        $length = J.$sub$n(editor.getBuffer$0().invoke$2("characterIndexForPosition", new Y.Point0(Y._cvt1(t3.$index(t2, "end")))), offset);
        t2 = M.toTitleCase("quick fix");
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new X.AnalysisRequestJob(new M.QuickFixHelper__handleQuickFix_closure(this, editor, autoFix, path, offset, $length), t2, null));
      },
      _handleQuickFix$1: function(editor) {
        return this._handleQuickFix$2$autoFix(editor, true);
      },
      _handleFixesResult$4$autoFix: function(result, assists, editor, autoFix) {
        var t1, fixes, changes, t2;
        t1 = {};
        fixes = result.get$fixes();
        if (fixes.length === 0 && assists.get$assists().length === 0) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        fixes.toString;
        changes = P.List_List$from(new H.ExpandIterable(fixes, new M.QuickFixHelper__handleFixesResult_closure(), [H.getTypeArgumentByIndex(fixes, 0), null]), true, null);
        t2 = assists.get$assists();
        t2.toString;
        C.JSArray_methods.addAll$1(changes, new H.MappedListIterable(t2, new M.QuickFixHelper__handleFixesResult_closure0(), [null, null]));
        if (autoFix && changes.length === 1 && assists.get$assists().length === 0)
          M._applyChange(editor, C.JSArray_methods.get$first(changes).get$change());
        else {
          t1.i = 0;
          $._override = new X._AutoCompleteOverride(editor, changes, new M.QuickFixHelper__handleFixesResult_closure1(t1), new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]), false, [null]);
          t1 = $.$get$atom();
          t1._commands.invoke$4("dispatch", t1._views.invoke$2("getView", editor), "autocomplete-plus:activate", P.LinkedHashMap__makeLiteral(["activatedManually", false]));
          $._override.completer.future.then$1(new M.QuickFixHelper__handleFixesResult_closure2(editor));
        }
      },
      QuickFixHelper$0: function() {
        this.disposables._disposables.push($.$get$atom()._commands.add$3(0, "atom-text-editor", "dartlang:quick-fix", new M.QuickFixHelper_closure(this)));
      },
      $isDisposable: 1,
      static: {
        QuickFixHelper$: function() {
          var t1 = new M.QuickFixHelper(new L.Disposables(true, []));
          t1.QuickFixHelper$0();
          return t1;
        }
      }
    },
    QuickFixHelper_closure: {
      "^": "Closure:0;$this",
      call$1: function($event) {
        return this.$this._handleQuickFix$1($event.get$editor());
      }
    },
    QuickFixHelper__handleQuickFix_closure: {
      "^": "Closure:5;$this,editor,autoFix,path,offset,length",
      call$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, assistsFuture, $async$temp1, $async$temp2;
        var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.path;
                t2 = $async$self.offset;
                assistsFuture = Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).getAssists$3(t1, t2, $async$self.length);
                $async$temp1 = $async$self.$this;
                $async$goto = 2;
                return P._asyncHelper(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).getFixes$2(t1, t2), $async$call$0, $async$completer);
              case 2:
                // returning from await.
                $async$temp2 = $async$result;
                $async$goto = 3;
                return P._asyncHelper(assistsFuture, $async$call$0, $async$completer);
              case 3:
                // returning from await.
                $async$temp1._handleFixesResult$4$autoFix($async$temp2, $async$result, $async$self.editor, $async$self.autoFix);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$0, $async$completer);
      }
    },
    QuickFixHelper__handleFixesResult_closure: {
      "^": "Closure:0;",
      call$1: function(fix) {
        var t1 = fix.get$fixes();
        t1.toString;
        return new H.MappedListIterable(t1, new M.QuickFixHelper__handleFixesResult__closure(fix), [null, null]);
      }
    },
    QuickFixHelper__handleFixesResult__closure: {
      "^": "Closure:49;fix",
      call$1: [function(change) {
        return new M._Change(change, J.get$error$x(this.fix));
      }, null, null, 2, 0, null, 30, "call"]
    },
    QuickFixHelper__handleFixesResult_closure0: {
      "^": "Closure:49;",
      call$1: [function(change) {
        return new M._Change(change, null);
      }, null, null, 2, 0, null, 30, "call"]
    },
    QuickFixHelper__handleFixesResult_closure1: {
      "^": "Closure:50;_box_0",
      call$1: [function(change) {
        var t1, t2, t3, t4;
        t1 = "fix_" + ++this._box_0.i;
        t2 = J.get$message$x(change.get$change());
        t3 = change.get$isAssist() ? "assist" : "quick-fix";
        t4 = change.get$isAssist() ? null : J.get$message$x(J.get$error$x(change));
        return new X.Suggestion(t1, null, t2, "", change.get$isAssist() ? "attribute" : "function", null, null, t3, null, null, null, t4, null, null, null, null);
      }, null, null, 2, 0, null, 30, "call"]
    },
    QuickFixHelper__handleFixesResult_closure2: {
      "^": "Closure:50;editor",
      call$1: [function(choice) {
        var t1 = this.editor;
        t1.undo$0();
        M._applyChange(t1, choice.get$change());
      }, null, null, 2, 0, null, 141, "call"]
    },
    _Change: {
      "^": "Object;change<,error>",
      get$isAssist: function() {
        return this.error == null;
      },
      toString$0: function(_) {
        var t1, t2;
        t1 = this.error;
        t2 = this.change;
        return t1 == null ? J.get$message$x(t2) : H.S(J.get$message$x(t1)) + ": " + H.S(J.get$message$x(t2));
      }
    },
    _applyChange_closure: {
      "^": "Closure:21;sourceFileEdits,linkedEditGroups",
      call$1: function(edit) {
        return $.$get$atom()._workspace.open$2$options(0, J.get$file$x(edit), P.LinkedHashMap__makeLiteral(["searchAllPanes", true])).then$1(new M._applyChange__closure0(this.sourceFileEdits, this.linkedEditGroups, edit));
      }
    },
    _applyChange__closure0: {
      "^": "Closure:8;sourceFileEdits,linkedEditGroups,edit",
      call$1: [function(editor) {
        var t1, t2, index;
        t1 = this.edit;
        F.applyEdits(editor, t1.get$edits());
        t2 = this.sourceFileEdits;
        index = (t2 && C.JSArray_methods).indexOf$1(t2, t1);
        t1 = J.getInterceptor$n(index);
        if (t1.$ge(index, 0) && t1.$lt(index, this.linkedEditGroups.length)) {
          t1 = this.linkedEditGroups;
          if (index >>> 0 !== index || index >= t1.length)
            return H.ioore(t1, index);
          F.selectEditGroup(editor, t1[index]);
        }
      }, null, null, 2, 0, null, 9, "call"]
    },
    _applyChange_closure0: {
      "^": "Closure:0;change,sourceFileEdits",
      call$1: [function(_) {
        var t1, fileSummary;
        t1 = this.sourceFileEdits;
        t1.toString;
        fileSummary = new H.MappedListIterable(t1, new M._applyChange__closure(), [null, null]).join$1(0, "\n");
        if (t1.length === 1)
          fileSummary = null;
        t1 = $.$get$atom()._notifications;
        t1.invoke$3("addSuccess", "Executed quick fix: " + H.S(M.toStartingLowerCase(J.get$message$x(this.change))), t1._options$5$buttons$description$detail$dismissable$icon(null, null, fileSummary, null, null));
      }, null, null, 2, 0, null, 1, "call"]
    },
    _applyChange__closure: {
      "^": "Closure:0;",
      call$1: [function(edit) {
        return J.get$file$x(edit);
      }, null, null, 2, 0, null, 31, "call"]
    },
    _applyChange_closure1: {
      "^": "Closure:0;",
      call$1: [function(e) {
        var t1 = $.$get$atom()._notifications;
        t1.invoke$3("addError", "Error Performing Rename", t1._options$5$buttons$description$detail$dismissable$icon(null, null, H.S(e), null, null));
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["atom.refactor", "package:atom_dartlang/analysis/refactor.dart",, F, {
    "^": "",
    RefactoringHelper: {
      "^": "Object;_refactor$_commands",
      dispose$0: [function() {
        return this._refactor$_commands.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _addCommand$2: function(id, handler) {
        this._refactor$_commands._disposables.push($.$get$atom()._commands.add$3(0, "atom-text-editor", id, new F.RefactoringHelper__addCommand_closure(handler)));
      },
      _handleExtractLocal$4: [function(path, offset, end, text) {
        this._checkRefactoringAvailable$5("EXTRACT_LOCAL_VARIABLE", path, offset, end, new F.RefactoringHelper__handleExtractLocal_closure(this, path, offset, end));
      }, "call$4", "get$_handleExtractLocal", 8, 0, 29],
      _handleInlineLocal$4: [function(path, offset, end, text) {
        this._performRefactoring$6("INLINE_LOCAL_VARIABLE", null, path, offset, end, "Inlined local variable '" + F.RefactoringHelper__findIdentifier(text, offset) + "'.");
      }, "call$4", "get$_handleInlineLocal", 8, 0, 29],
      _handleRenameRefactor$4: [function(path, offset, end, text) {
        this._checkRefactoringAvailable$5("RENAME", path, offset, end, new F.RefactoringHelper__handleRenameRefactor_closure(this, path, offset, end, F.RefactoringHelper__findIdentifier(text, offset)));
      }, "call$4", "get$_handleRenameRefactor", 8, 0, 29],
      _checkRefactoringAvailable$5: function(refactoringName, path, offset, end, refactor) {
        var t1 = M.toTitleCase(H.stringReplaceAllUnchecked(refactoringName.toLowerCase(), "_", " "));
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new X.AnalysisRequestJob(new F.RefactoringHelper__checkRefactoringAvailable_closure(refactoringName, path, offset, end, refactor), t1, null));
      },
      _performRefactoring$6: function(refactoringName, options, path, offset, end, successMsg) {
        var t1 = M.toTitleCase(H.stringReplaceAllUnchecked(refactoringName.toLowerCase(), "_", " "));
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new X.AnalysisRequestJob(new F.RefactoringHelper__performRefactoring_closure(this, refactoringName, options, path, offset, end, successMsg), t1, null));
      },
      _applyRefactoringResult$4: function(refactoringName, result, successMsg, path) {
        var t1, t2, t3, t4, change, sourceFileEdits, apply, project, fileSummary;
        t1 = {};
        if (result.get$initialProblems().length !== 0) {
          t1 = $.$get$atom();
          t2 = t1._notifications;
          t3 = "Unable to " + H.stringReplaceAllUnchecked(refactoringName.toLowerCase(), "_", " ");
          t4 = result.get$initialProblems();
          t2.invoke$3("addError", t3, t2._options$5$buttons$description$detail$dismissable$icon(null, null, H.S(J.get$message$x((t4 && C.JSArray_methods).get$first(t4))), null, null));
          t1.invoke$1("beep");
          return;
        }
        change = result.get$change();
        if (change == null) {
          t1 = $.$get$atom();
          t2 = t1._notifications;
          t2.invoke$3("addError", "Unable to " + H.stringReplaceAllUnchecked(refactoringName.toLowerCase(), "_", " "), t2._options$5$buttons$description$detail$dismissable$icon(null, null, "No change information returned.", null, null));
          t1.invoke$1("beep");
          return;
        }
        sourceFileEdits = change.get$edits();
        (sourceFileEdits && C.JSArray_methods).forEach$1(sourceFileEdits, new F.RefactoringHelper__applyRefactoringResult_closure());
        C.JSArray_methods.checkGrowable$1(sourceFileEdits, "removeWhere");
        C.JSArray_methods._removeWhere$2(sourceFileEdits, new F.RefactoringHelper__applyRefactoringResult_closure0(), true);
        apply = new F.RefactoringHelper__applyRefactoringResult_closure1(this, successMsg, path, sourceFileEdits);
        if (sourceFileEdits.length === 1) {
          apply.call$0();
          return;
        }
        project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
        t2 = new H.MappedListIterable(sourceFileEdits, new F.RefactoringHelper__applyRefactoringResult_closure2(project, project == null ? "" : J.get$path$x(project)), [null, null]).toList$0(0);
        C.JSArray_methods.sort$0(t2);
        fileSummary = C.JSArray_methods.join$1(t2, "\n");
        t1.notification = null;
        t2 = $.$get$atom()._notifications;
        t1.notification = new D.Notification(t2.invoke$3("addInfo", "Refactor " + sourceFileEdits.length + " files?", t2._options$5$buttons$description$detail$dismissable$icon([new D.NotificationButton("Continue", new F.RefactoringHelper__applyRefactoringResult_closure3(t1, apply)), new D.NotificationButton("Cancel", new F.RefactoringHelper__applyRefactoringResult_closure4(t1))], null, fileSummary, true, null)));
      },
      _applyEdits$2: function(sourceFileEdits, successMsg) {
        return P.Future_forEach(sourceFileEdits, new F.RefactoringHelper__applyEdits_closure()).then$1(new F.RefactoringHelper__applyEdits_closure0(sourceFileEdits, successMsg)).catchError$1(new F.RefactoringHelper__applyEdits_closure1());
      },
      $isDisposable: 1,
      static: {
        RefactoringHelper__findIdentifier: function(text, offset) {
          var t1, t2, t3, t4, c;
          for (t1 = J.getInterceptor$asx(text); t2 = J.getInterceptor$n(offset), t2.$gt(offset, 0);) {
            t3 = $.$get$idRegex();
            t4 = t1.$index(text, t2.$sub(offset, 1));
            t3 = t3._nativeRegExp;
            if (typeof t4 !== "string")
              H.throwExpression(H.argumentErrorValue(t4));
            if (t3.test(t4))
              offset = t2.$sub(offset, 1);
            else
              break;
          }
          for (t2 = ""; t3 = J.getInterceptor$n(offset), t3.$lt(offset, t1.get$length(text));) {
            c = t1.$index(text, offset);
            t4 = $.$get$idRegex()._nativeRegExp;
            if (typeof c !== "string")
              H.throwExpression(H.argumentErrorValue(c));
            if (t4.test(c)) {
              t2 += H.S(c);
              offset = t3.$add(offset, 1);
            } else
              break;
          }
          return t2.charCodeAt(0) == 0 ? t2 : t2;
        }
      }
    },
    RefactoringHelper__addCommand_closure: {
      "^": "Closure:0;handler",
      call$1: function(e) {
        var editor, path, t1, range, buffer, t2;
        editor = e.get$editor();
        path = editor.invoke$1("getPath");
        if (Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path) == null) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        t1 = editor.invoke$1("getSelectedBufferRange");
        range = t1 == null ? null : new Y.Range(Y._cvt1(t1));
        buffer = new Y.TextBuffer(Y._cvt1(editor.invoke$1("getBuffer")));
        t1 = range.obj;
        t2 = J.getInterceptor$asx(t1);
        this.handler.call$4(path, buffer.invoke$2("characterIndexForPosition", new Y.Point0(Y._cvt1(t2.$index(t1, "start")))), buffer.invoke$2("characterIndexForPosition", new Y.Point0(Y._cvt1(t2.$index(t1, "end")))), editor.invoke$1("getText"));
      }
    },
    RefactoringHelper__handleExtractLocal_closure: {
      "^": "Closure:39;$this,path,offset,end",
      call$1: function(result) {
        D.promptUser("Extract local variable - enter the variable name:", "", false, false, true).then$1(new F.RefactoringHelper__handleExtractLocal__closure(this.$this, this.path, this.offset, this.end, "", false));
      }
    },
    RefactoringHelper__handleExtractLocal__closure: {
      "^": "Closure:3;$this,path,offset,end,oldName,extractAll",
      call$1: [function(newName) {
        if (newName == null)
          return;
        newName = J.trim$0$s(newName);
        if (newName === "" || newName === this.oldName)
          return;
        this.$this._performRefactoring$6("EXTRACT_LOCAL_VARIABLE", new E.ExtractLocalVariableRefactoringOptions(newName, this.extractAll), this.path, this.offset, this.end, "Extracted '" + newName + "'.");
      }, null, null, 2, 0, null, 55, "call"]
    },
    RefactoringHelper__handleRenameRefactor_closure: {
      "^": "Closure:39;$this,path,offset,end,oldName",
      call$1: function(result) {
        var t1 = this.oldName;
        D.promptUser("Rename refactor - enter the new name:", t1, false, false, true).then$1(new F.RefactoringHelper__handleRenameRefactor__closure(this.$this, this.path, this.offset, this.end, t1));
      }
    },
    RefactoringHelper__handleRenameRefactor__closure: {
      "^": "Closure:3;$this,path,offset,end,oldName",
      call$1: [function(newName) {
        if (newName == null)
          return;
        newName = J.trim$0$s(newName);
        if (newName === "" || newName === this.oldName)
          return;
        this.$this._performRefactoring$6("RENAME", new E.RenameRefactoringOptions(newName), this.path, this.offset, this.end, "Renamed '" + this.oldName + "' to '" + newName + "'.");
      }, null, null, 2, 0, null, 55, "call"]
    },
    RefactoringHelper__checkRefactoringAvailable_closure: {
      "^": "Closure:1;refactoringName,path,offset,end,refactor",
      call$0: function() {
        var t1 = this.offset;
        return Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).getAvailableRefactorings$3(this.path, t1, J.$sub$n(this.end, t1)).then$1(new F.RefactoringHelper__checkRefactoringAvailable__closure(this.refactoringName, this.refactor));
      }
    },
    RefactoringHelper__checkRefactoringAvailable__closure: {
      "^": "Closure:39;refactoringName,refactor",
      call$1: [function(result) {
        if (result == null) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        if (!J.contains$1$asx(J.get$kinds$x(result), this.refactoringName)) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        this.refactor.call$1(result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    RefactoringHelper__performRefactoring_closure: {
      "^": "Closure:1;$this,refactoringName,options,path,offset,end,successMsg",
      call$0: function() {
        var t1, t2, t3;
        t1 = this.refactoringName;
        t2 = this.path;
        t3 = this.offset;
        return Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).getRefactoring$6$options(t1, t2, t3, J.$sub$n(this.end, t3), false, this.options).then$1(new F.RefactoringHelper__performRefactoring__closure(this.$this, t1, t2, this.successMsg));
      }
    },
    RefactoringHelper__performRefactoring__closure: {
      "^": "Closure:99;$this,refactoringName,path,successMsg",
      call$1: [function(result) {
        if (result == null)
          return;
        this.$this._applyRefactoringResult$4(this.refactoringName, result, this.successMsg, this.path);
      }, null, null, 2, 0, null, 3, "call"]
    },
    RefactoringHelper__applyRefactoringResult_closure: {
      "^": "Closure:21;",
      call$1: function(fileEdit) {
        var t1 = fileEdit.get$edits();
        (t1 && C.JSArray_methods).checkGrowable$1(t1, "removeWhere");
        C.JSArray_methods._removeWhere$2(t1, new F.RefactoringHelper__applyRefactoringResult__closure0(), true);
      }
    },
    RefactoringHelper__applyRefactoringResult__closure0: {
      "^": "Closure:51;",
      call$1: function(edit) {
        return J.get$id$x(edit) != null;
      }
    },
    RefactoringHelper__applyRefactoringResult_closure0: {
      "^": "Closure:21;",
      call$1: function(fileEdit) {
        return fileEdit.get$edits().length === 0;
      }
    },
    RefactoringHelper__applyRefactoringResult_closure1: {
      "^": "Closure:1;$this,successMsg,path,sourceFileEdits",
      call$0: function() {
        this.$this._applyEdits$2(this.sourceFileEdits, this.successMsg).then$1(new F.RefactoringHelper__applyRefactoringResult__closure(this.path));
      }
    },
    RefactoringHelper__applyRefactoringResult__closure: {
      "^": "Closure:0;path",
      call$1: [function(_) {
        $.$get$atom()._workspace.open$1(0, this.path);
      }, null, null, 2, 0, null, 1, "call"]
    },
    RefactoringHelper__applyRefactoringResult_closure2: {
      "^": "Closure:0;project,projectPrefix",
      call$1: [function(edit) {
        var filePath, t1, t2;
        filePath = J.get$file$x(edit);
        t1 = this.projectPrefix;
        t2 = J.getInterceptor$s(filePath);
        if (t2.startsWith$1(filePath, t1))
          return J.$add$ns(J.get$name$x(this.project), t2.substring$1(filePath, J.get$length$asx(t1)));
        else
          return filePath;
      }, null, null, 2, 0, null, 31, "call"]
    },
    RefactoringHelper__applyRefactoringResult_closure3: {
      "^": "Closure:1;_box_0,apply",
      call$0: [function() {
        this._box_0.notification.invoke$1("dismiss");
        this.apply.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    RefactoringHelper__applyRefactoringResult_closure4: {
      "^": "Closure:1;_box_0",
      call$0: [function() {
        return this._box_0.notification.invoke$1("dismiss");
      }, null, null, 0, 0, null, "call"]
    },
    RefactoringHelper__applyEdits_closure: {
      "^": "Closure:21;",
      call$1: function(edit) {
        return $.$get$atom()._workspace.open$2$options(0, J.get$file$x(edit), P.LinkedHashMap__makeLiteral(["searchAllPanes", true])).then$1(new F.RefactoringHelper__applyEdits__closure0(edit));
      }
    },
    RefactoringHelper__applyEdits__closure0: {
      "^": "Closure:8;edit",
      call$1: [function(editor) {
        F.applyEdits(editor, this.edit.get$edits());
      }, null, null, 2, 0, null, 9, "call"]
    },
    RefactoringHelper__applyEdits_closure0: {
      "^": "Closure:0;sourceFileEdits,successMsg",
      call$1: [function(_) {
        var t1, fileSummary;
        t1 = this.sourceFileEdits;
        t1.toString;
        fileSummary = new H.MappedListIterable(t1, new F.RefactoringHelper__applyEdits__closure(), [null, null]).join$1(0, "\n");
        if (t1.length === 1)
          fileSummary = null;
        t1 = $.$get$atom()._notifications;
        t1.invoke$3("addSuccess", this.successMsg, t1._options$5$buttons$description$detail$dismissable$icon(null, null, fileSummary, null, null));
      }, null, null, 2, 0, null, 1, "call"]
    },
    RefactoringHelper__applyEdits__closure: {
      "^": "Closure:0;",
      call$1: [function(edit) {
        return J.get$file$x(edit);
      }, null, null, 2, 0, null, 31, "call"]
    },
    RefactoringHelper__applyEdits_closure1: {
      "^": "Closure:0;",
      call$1: [function(e) {
        var t1 = $.$get$atom()._notifications;
        t1.invoke$3("addError", "Refactoring Error", t1._options$5$buttons$description$detail$dismissable$icon(null, null, H.S(e), null, null));
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["atom.references", "package:atom_dartlang/analysis/references.dart",, V, {
    "^": "",
    FindReferencesHelper: {
      "^": "Object;_command",
      dispose$0: [function() {
        return this._command.invoke$1("dispose");
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleReferences$1: [function($event) {
        return this._handleReferencesEditor$1($event.get$editor());
      }, "call$1", "get$_handleReferences", 2, 0, 6],
      _handleReferencesEditor$1: function(editor) {
        var path, t1, range, offset;
        path = editor.invoke$1("getPath");
        t1 = editor.invoke$1("getSelectedBufferRange");
        range = t1 == null ? null : new Y.Range(Y._cvt1(t1));
        offset = new Y.TextBuffer(Y._cvt1(editor.invoke$1("getBuffer"))).invoke$2("characterIndexForPosition", new Y.Point0(Y._cvt1(J.$index$asx(range.obj, "start"))));
        t1 = M.toTitleCase("find references");
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new X.AnalysisRequestJob(new V.FindReferencesHelper__handleReferencesEditor_closure(path, offset), t1, null));
      },
      $isDisposable: 1
    },
    FindReferencesHelper__handleReferencesEditor_closure: {
      "^": "Closure:1;path,offset",
      call$0: function() {
        var t1, t2;
        t1 = this.path;
        t2 = this.offset;
        return Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).findElementReferences$3(t1, t2, false).then$1(new V.FindReferencesHelper__handleReferencesEditor__closure(t1, t2));
      }
    },
    FindReferencesHelper__handleReferencesEditor__closure: {
      "^": "Closure:97;path,offset",
      call$1: [function(result) {
        var t1, t2;
        if (result == null || J.get$id$x(result) == null) {
          $.$get$atom().invoke$1("beep");
          return;
        } else {
          t1 = result.get$element().get$parameters();
          t2 = H.S(J.get$name$x(result.get$element()));
          V.FindReferencesView_showView(new V.ReferencesSearch("References", t2 + (t1 != null ? "()" : ""), null, Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).getSearchResults$1(J.get$id$x(result))), P.LinkedHashMap__makeLiteral(["path", this.path, "offset", this.offset]));
        }
      }, null, null, 2, 0, null, 3, "call"]
    },
    ReferencesSearch: {
      "^": "Object;searchType,label,results>,resultsFuture"
    },
    FindReferencesView: {
      "^": "View;title*,subtitle<,treeBuilder,disposables,matchParser,root,toolbar,content,tabElement,_closeButton,group",
      get$id: function(_) {
        return "findReferences";
      },
      get$label: function(_) {
        return "References";
      },
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleSearchResults$2$refData: function(search, refData) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, t3, resultsList, results, r, path, node, fileResults;
        var $async$_handleSearchResults$2$refData = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                J.set$text$x($async$self.title, search.searchType);
                t1 = $async$self.subtitle;
                t2 = search.label;
                t3 = "'" + H.S(t2) + "'; searching\u2026";
                J.set$text$x(t1.element, t3);
                J.toggle$2$x(J.get$classes$x($async$self.subtitle.element), "searching", true);
                $async$self.treeBuilder.clear$0(0);
                resultsList = search.results;
                $async$goto = resultsList != null ? 2 : 4;
                break;
              case 2:
                // then
                $async$result = resultsList;
                // goto join
                $async$goto = 3;
                break;
              case 4:
                // else
                $async$goto = 5;
                return P._asyncHelper(search.resultsFuture, $async$_handleSearchResults$2$refData, $async$completer);
              case 5:
                // returning from await.
              case 3:
                // join
                resultsList = $async$result;
                t1 = $async$self.subtitle;
                t3 = J.getInterceptor$asx(resultsList);
                t2 = M.commas(t3.get$length(resultsList)) + " " + M.pluralize("result", t3.get$length(resultsList)) + " for '" + H.S(t2) + "'";
                J.set$text$x(t1.element, t2);
                J.toggle$2$x(J.get$classes$x($async$self.subtitle.element), "searching", false);
                results = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
                for (t1 = t3.get$iterator(resultsList); t1.moveNext$0();) {
                  r = t1.get$current();
                  path = J.get$file$x(J.get$location$x(r));
                  if (results.$index(0, path) == null)
                    results.$indexSet(0, path, []);
                  J.add$1$ax(results.$index(0, path), r);
                }
                for (t1 = results.get$keys(results), t1 = t1.get$iterator(t1), t2 = [null]; t1.moveNext$0();) {
                  path = t1.get$current();
                  node = new T.Node0(path, true, [], t2);
                  fileResults = results.$index(0, path);
                  t3 = J.getInterceptor$ax(fileResults);
                  t3.sort$1(fileResults, new V.FindReferencesView__handleSearchResults_closure());
                  t3.forEach$1(fileResults, new V.FindReferencesView__handleSearchResults_closure0(node));
                  t3 = $async$self.treeBuilder;
                  t3._addNode$2(t3, node);
                }
                t1 = $async$self.matchParser;
                t1.file = null;
                t1.lines = null;
                // implicit return
                return P._asyncHelper(null, 0, $async$completer);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_handleSearchResults$2$refData, $async$completer);
      },
      _references$_render$2: [function(item, intoElement) {
        var items, t1, span, t2, line, t3, t4, t5, match;
        if (typeof item === "string") {
          items = this._renderPath$1(item);
          t1 = document;
          span = t1.createElement("span");
          span.textContent = C.JSArray_methods.join$1(items, " ");
          J.add$1$ax(J.get$children$x(intoElement), span);
        } else {
          t1 = J.getInterceptor$x(intoElement);
          J.add$1$ax(t1.get$classes(intoElement), "search-result");
          if (item.get$isPotential() === true)
            J.add$1$ax(t1.get$classes(intoElement), "potential-match");
          t2 = J.getInterceptor$x(item);
          line = t2.get$location(item).get$startLine();
          t3 = t1.get$children(intoElement);
          t4 = document;
          t5 = t4.createElement("span");
          t5.textContent = M.commas(line) + ": ";
          J.get$classes$x(t5).add$1(0, "result-line");
          J.add$1$ax(t3, t5);
          match = this.matchParser.parseMatch$1(t2.get$location(item));
          if (match != null) {
            t2 = t1.get$children(intoElement);
            t3 = t4.createElement("span");
            t3.textContent = match[0];
            J.get$classes$x(t3).add$1(0, "text-subtle");
            J.add$1$ax(t2, t3);
            t3 = t1.get$children(intoElement);
            t2 = t4.createElement("span");
            t2.textContent = match[1];
            J.add$1$ax(t3, t2);
            t1 = t1.get$children(intoElement);
            t2 = t4.createElement("span");
            t2.textContent = match[2];
            J.get$classes$x(t2).add$1(0, "text-subtle");
            J.add$1$ax(t1, t2);
          }
        }
      }, "call$2", "get$_references$_render", 4, 0, 93],
      _references$_jumpTo$1: [function(node) {
        var t1, t2, l;
        t1 = J.getInterceptor$x(node);
        if (t1.get$data(node) instanceof E.SearchResult) {
          t2 = this.treeBuilder;
          t2.toString;
          t2.selectNodes$1(node == null ? [] : [node]);
          l = H.interceptedTypeCast(t1.get$data(node), "$isSearchResult").location;
          Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).jumpToLocation$4(l.file, J.$sub$n(l.startLine, 1), J.$sub$n(l.startColumn, 1), l.length);
        }
      }, "call$1", "get$_references$_jumpTo", 2, 0, 22, 22],
      _doubleClick$1: [function(node) {
        var t1, t2, path;
        t1 = J.getInterceptor$x(node);
        t2 = t1.get$data(node);
        if (typeof t2 === "string") {
          path = t1.get$data(node);
          $.$get$atom()._workspace.openPending$2$options(path, P.LinkedHashMap__makeLiteral(["searchAllPanes", true]));
        }
      }, "call$1", "get$_doubleClick", 2, 0, 22, 22],
      _renderPath$1: function(originalPath) {
        var relPath, base, t1, index, t2, path, sdk, prefix;
        relPath = P.List_List$from($.$get$atom()._project.invoke$2("relativizePath", originalPath), true, null);
        if (0 >= relPath.length)
          return H.ioore(relPath, 0);
        base = relPath[0];
        if (base != null) {
          t1 = J.getInterceptor$asx(base);
          index = t1.lastIndexOf$1(base, $.$get$fs().separator);
          t2 = J.getInterceptor(index);
          if (!t2.$eq(index, -1))
            base = t1.substring$1(base, t2.$add(index, 1));
          if (1 >= relPath.length)
            return H.ioore(relPath, 1);
          return [base, relPath[1]];
        }
        t1 = $.$get$FindReferencesView__cachePrefix();
        if (C.JSString_methods.contains$1(originalPath, t1)) {
          path = C.JSString_methods.substring$1(originalPath, C.JSString_methods.indexOf$1(originalPath, t1) + t1.length);
          t1 = $.$get$FindReferencesView__pubPrefix();
          return ["Package", C.JSString_methods.startsWith$1(path, t1) ? C.JSString_methods.substring$1(path, t1.length) : path];
        }
        sdk = Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk();
        if (sdk != null) {
          prefix = sdk.get$path(sdk);
          if (C.JSString_methods.startsWith$1(originalPath, prefix)) {
            path = C.JSString_methods.substring$1(originalPath, J.get$length$asx(prefix));
            t1 = $.$get$FindReferencesView__libPrefix();
            return ["SDK", C.JSString_methods.startsWith$1(path, t1) ? C.JSString_methods.substring$1(path, t1.length) : path];
          }
        }
        return [originalPath];
      },
      static: {
        FindReferencesView_showView: function(search, refData) {
          var view, t1, t2, t3, t4, t5;
          view = Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).getViewById$1("findReferences");
          if (view != null) {
            view._handleSearchResults$2$refData(search, refData);
            J.activate$1$x(Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8), view);
          } else {
            t1 = [];
            t2 = K.CoreElement$("div", null, "tab-content", null);
            t3 = K.CoreElement$("div", null, null, null);
            t4 = K.CoreElement$("div", null, null, null);
            view = new V.FindReferencesView(null, null, null, new L.Disposables(true, t1), new V._MatchParser(null, null), t2, t3, t4, null, null, null);
            view.View$0();
            t3 = t4.element;
            t2 = J.getInterceptor$x(t3);
            J.toggle$2$x(t2.get$classes(t3), "find-references", null);
            J.toggle$2$x(t2.get$classes(t3), "tab-scrollable-container", null);
            t3 = K.CoreElement$("div", null, "view-header view-header-static", null);
            t2 = K.CoreElement$("div", null, "view-title", null);
            view.title = t2;
            t5 = K.CoreElement$("div", null, "view-subtitle", null);
            view.subtitle = t5;
            t3.add$1(0, [t2, t5]);
            t5 = new T.ListTreeBuilder(P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), view.get$_references$_render(), true, [], [], P.LinkedHashMap__makeEmpty(), "tree-selected", W._ElementFactoryProvider_createElement_tag("div", null));
            t5.CoreElement$4$attributes$classes$text("div", null, "list-tree has-collapsable-children", null);
            view.treeBuilder = t5;
            t4.add$1(0, [t3, t5]);
            J.toggle$2$x(J.get$classes$x(view.treeBuilder.element), "tab-scrollable", null);
            t5 = view.treeBuilder._clickController;
            new P._BroadcastStream(t5, [H.getTypeArgumentByIndex(t5, 0)]).listen$1(view.get$_references$_jumpTo());
            t5 = view.treeBuilder._doubleClickController;
            new P._BroadcastStream(t5, [H.getTypeArgumentByIndex(t5, 0)]).listen$1(view.get$_doubleClick());
            t5 = new T.DoubleCancelCommand(view.get$handleClose(), null, null);
            t5._views$_command = $.$get$atom()._commands.add$3(0, "atom-workspace", "core:cancel", t5.get$_handleCancel());
            t1.push(t5);
            view._handleSearchResults$2$refData(search, refData);
            Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).addView$2("right", view);
          }
        }
      }
    },
    FindReferencesView__handleSearchResults_closure: {
      "^": "Closure:89;",
      call$2: [function(a, b) {
        return J.$sub$n(J.get$offset$x(J.get$location$x(a)), J.get$offset$x(J.get$location$x(b)));
      }, null, null, 4, 0, null, 155, 157, "call"]
    },
    FindReferencesView__handleSearchResults_closure0: {
      "^": "Closure:0;node",
      call$1: [function(r) {
        return this.node.children.push(new T.Node0(r, false, [], [null]));
      }, null, null, 2, 0, null, 42, "call"]
    },
    _MatchParser: {
      "^": "Object;file>,lines<",
      parseMatch$1: function(l) {
        var line, col, start, max, extract, end, llen, rlen, t1, t2, t3, exception;
        t1 = J.getInterceptor$x(l);
        if (!J.$eq$(this.file, t1.get$file(l))) {
          this.file = null;
          this.lines = null;
          this._parse$1(t1.get$file(l));
        }
        if (this.lines == null || J.$le$n(l.get$startLine(), 0) || J.$ge$n(l.get$startLine(), this.lines.length))
          return;
        t2 = this.lines;
        t3 = J.$sub$n(l.get$startLine(), 1);
        if (t3 >>> 0 !== t3 || t3 >= t2.length)
          return H.ioore(t2, t3);
        line = t2[t3];
        try {
          col = J.$sub$n(l.get$startColumn(), 1);
          col = P.min(col, J.get$length$asx(line));
          start = J.substring$2$s(line, 0, col);
          max = P.min(t1.get$length(l), J.$sub$n(J.get$length$asx(line), col));
          extract = J.substring$2$s(line, col, J.$add$ns(col, max));
          end = "";
          if (J.$lt$n(max, J.get$length$asx(line)))
            end = J.substring$1$s(line, J.$add$ns(col, max));
          start = J.trimLeft$0$s(start);
          end = J.trimRight$0$s(end);
          llen = 20;
          rlen = 30;
          if (J.$gt$n(J.get$length$asx(start), llen))
            start = "\u2026" + J.substring$1$s(start, J.$sub$n(J.get$length$asx(start), llen) + 2);
          if (J.$gt$n(J.get$length$asx(end), rlen))
            end = J.substring$2$s(end, 0, J.$sub$n(rlen, 2)) + "\u2026";
          t1 = start;
          t2 = end;
          return [t1, extract, t2];
        } catch (exception) {
          H.unwrapException(exception);
          if (J.$gt$n(J.get$length$asx(line), 60))
            line = J.substring$2$s(line, 0, 60);
          return [line, "", ""];
        }
      },
      reset$0: function(_) {
        this.file = null;
        this.lines = null;
      },
      _parse$1: function(path) {
        var contents, t1, t2, _i, editor, exception;
        this.file = path;
        for (t1 = $.$get$atom()._workspace.getTextEditors$0(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          editor = t1[_i];
          if (J.$eq$(editor.getPath$0(), path)) {
            this.lines = J.split$1$s(editor.getText$0(), "\n");
            return;
          }
        }
        try {
          contents = new F.File(F._create("File", path, null)).invoke$2("readSync", null);
          this.lines = contents == null ? [] : J.split$1$s(contents, "\n");
        } catch (exception) {
          H.unwrapException(exception);
          this.lines = [];
        }
      }
    }
  }], ["atom.type_hierarchy", "package:atom_dartlang/analysis/type_hierarchy.dart",, E, {
    "^": "",
    TypeHierarchyHelper: {
      "^": "Object;_type_hierarchy$_command",
      dispose$0: [function() {
        return this._type_hierarchy$_command.invoke$1("dispose");
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleHierarchy$1: [function($event) {
        return this._handleHierarchyEditor$1($event.get$editor());
      }, "call$1", "get$_handleHierarchy", 2, 0, 6],
      _handleHierarchyEditor$1: function(editor) {
        var path, t1, range, offset;
        path = editor.invoke$1("getPath");
        t1 = editor.invoke$1("getSelectedBufferRange");
        range = t1 == null ? null : new Y.Range(Y._cvt1(t1));
        offset = new Y.TextBuffer(Y._cvt1(editor.invoke$1("getBuffer"))).invoke$2("characterIndexForPosition", new Y.Point0(Y._cvt1(J.$index$asx(range.obj, "start"))));
        t1 = M.toTitleCase("type hierarchy");
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new X.AnalysisRequestJob(new E.TypeHierarchyHelper__handleHierarchyEditor_closure(path, offset), t1, null));
      },
      $isDisposable: 1
    },
    TypeHierarchyHelper__handleHierarchyEditor_closure: {
      "^": "Closure:1;path,offset",
      call$0: function() {
        return Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).getTypeHierarchy$2(this.path, this.offset).then$1(new E.TypeHierarchyHelper__handleHierarchyEditor__closure());
      }
    },
    TypeHierarchyHelper__handleHierarchyEditor__closure: {
      "^": "Closure:0;",
      call$1: [function(result) {
        var view, t1, t2, t3, t4, t5;
        if (result == null)
          return;
        if (result.get$hierarchyItems() == null) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        view = Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).getViewById$1("typeHierarchy");
        if (view != null) {
          view._buildHierarchy$1(result);
          J.activate$1$x(Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8), view);
        } else {
          t1 = [];
          t2 = K.CoreElement$("div", null, "tab-content", null);
          t3 = K.CoreElement$("div", null, null, null);
          t4 = K.CoreElement$("div", null, null, null);
          view = new E.TypeHierarchyView(null, null, null, new L.Disposables(true, t1), null, t2, t3, t4, null, null, null);
          view.View$0();
          t3 = t4.element;
          t2 = J.getInterceptor$x(t3);
          J.toggle$2$x(t2.get$classes(t3), "type-hierarchy", null);
          J.toggle$2$x(t2.get$classes(t3), "tab-scrollable-container", null);
          t3 = K.CoreElement$("div", null, "view-header view-header-static", null);
          t2 = K.CoreElement$("div", null, "view-title", null);
          view.title = t2;
          t5 = K.CoreElement$("div", null, "view-subtitle", null);
          view.subtitle = t5;
          t3.add$1(0, [t2, t5]);
          t5 = new T.ListTreeBuilder(P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), view.get$_render(), true, [], [], P.LinkedHashMap__makeEmpty(), "tree-selected", W._ElementFactoryProvider_createElement_tag("div", null));
          t5.CoreElement$4$attributes$classes$text("div", null, "list-tree has-collapsable-children", null);
          view.treeBuilder = t5;
          t4.add$1(0, [t3, t5]);
          J.toggle$2$x(J.get$classes$x(view.treeBuilder.element), "tab-scrollable", null);
          t5 = view.treeBuilder._clickController;
          new P._BroadcastStream(t5, [H.getTypeArgumentByIndex(t5, 0)]).listen$1(view.get$_jumpTo());
          t5 = new T.DoubleCancelCommand(view.get$handleClose(), null, null);
          t5._views$_command = $.$get$atom()._commands.add$3(0, "atom-workspace", "core:cancel", t5.get$_handleCancel());
          t1.push(t5);
          view._buildHierarchy$1(result);
          Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).addView$2("right", view);
        }
      }, null, null, 2, 0, null, 3, "call"]
    },
    TypeHierarchyView: {
      "^": "View;title*,subtitle<,treeBuilder,disposables,_type_hierarchy$_items,root,toolbar,content,tabElement,_closeButton,group",
      get$id: function(_) {
        return "typeHierarchy";
      },
      get$label: function(_) {
        return "Type Hierarchy";
      },
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _buildHierarchy$1: function(result) {
        var items, item, t1, t2, t3, node, $name, ref, node0, superItem, superNode, count;
        this.treeBuilder.clear$0(0);
        items = result.get$hierarchyItems();
        this._type_hierarchy$_items = items;
        item = (items && C.JSArray_methods).get$first(items);
        t1 = item.get$subclasses() != null && J.$gt$n(J.get$length$asx(item.get$subclasses()), 0);
        t2 = [];
        t3 = [null];
        node = new T.Node0(item, t1, t2, t3);
        $name = item.get$displayName() != null ? item.get$displayName() : item.get$classElement().name;
        J.set$text$x(this.title, "Type Hierarchy");
        if (t1)
          for (t1 = J.get$iterator$ax(this._sort$2(items, item.get$subclasses())); t1.moveNext$0();) {
            ref = t1.get$current();
            if (ref >>> 0 !== ref || ref >= items.length)
              return H.ioore(items, ref);
            t2.push(this._createChild$2(items, items[ref]));
          }
        for (node0 = node; item.get$superclass() != null; node0 = superNode, item = superItem) {
          t1 = item.get$superclass();
          if (t1 >>> 0 !== t1 || t1 >= items.length)
            return H.ioore(items, t1);
          superItem = items[t1];
          if (superItem.get$superclass() == null && J.get$isNotEmpty$asx(item.get$interfaces())) {
            t1 = J.get$first$ax(item.get$interfaces());
            if (t1 >>> 0 !== t1 || t1 >= items.length)
              return H.ioore(items, t1);
            superItem = items[t1];
          }
          t1 = [];
          superNode = new T.Node0(superItem, true, t1, t3);
          t1.push(node0);
        }
        count = node0.get$decendentCount();
        t1 = this.subtitle;
        t2 = H.S(count) + " " + M.pluralize("item", count) + " for '" + H.S($name) + "'";
        J.set$text$x(t1.element, t2);
        t2 = this.treeBuilder;
        t2._addNode$2(t2, node0);
        t2 = this.treeBuilder;
        t2.selectNodes$1([node]);
      },
      _createChild$2: function(items, item) {
        var t1, t2, t3, ref;
        t1 = item.get$subclasses() != null && J.$gt$n(J.get$length$asx(item.get$subclasses()), 0);
        t2 = [];
        if (t1)
          for (t3 = J.get$iterator$ax(this._sort$2(items, item.get$subclasses())); t3.moveNext$0();) {
            ref = t3.get$current();
            if (ref >>> 0 !== ref || ref >= items.length)
              return H.ioore(items, ref);
            if (!J.$eq$(items[ref], item)) {
              if (ref >= items.length)
                return H.ioore(items, ref);
              t2.push(this._createChild$2(items, items[ref]));
            }
          }
        return new T.Node0(item, t1, t2, [null]);
      },
      _sort$2: function(items, subclasses) {
        J.sort$1$ax(subclasses, new E.TypeHierarchyView__sort_closure(items));
        return subclasses;
      },
      _jumpTo$1: [function(node) {
        var $location = H.interceptedTypeCast(J.get$data$x(node), "$isTypeHierarchyItem").classElement.location;
        if ($location != null)
          Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).jumpToLocation$4($location.file, J.$sub$n($location.startLine, 1), J.$sub$n($location.startColumn, 1), $location.length);
        else
          $.$get$atom().invoke$1("beep");
      }, "call$1", "get$_jumpTo", 2, 0, 22, 22],
      _render$2: [function(item, intoElement) {
        var t1, t2, t3, span, t4;
        t1 = J.$and$n(item.get$classElement().flags, 1);
        t2 = J.$and$n(item.get$classElement().flags, 32);
        t3 = document;
        span = t3.createElement("span");
        span.textContent = item.get$displayName() != null ? item.get$displayName() : item.get$classElement().name;
        if (t1 !== 0)
          J.get$classes$x(span).add$1(0, "hierarchy-abstract");
        if (t2 !== 0)
          J.get$classes$x(span).add$1(0, "hierarchy-deprecated");
        t1 = J.getInterceptor$x(intoElement);
        J.add$1$ax(t1.get$children(intoElement), span);
        if (item.get$mixins().length !== 0 || J.get$isNotEmpty$asx(item.get$interfaces())) {
          t2 = J.get$isNotEmpty$asx(item.get$interfaces()) ? " " + J.map$1$ax(item.get$interfaces(), new E.TypeHierarchyView__render_closure(this)).join$1(0, ", ") : "";
          if (item.get$mixins().length !== 0) {
            t2 = (t2.length !== 0 ? t2 + ", " : t2) + "with ";
            t4 = item.get$mixins();
            t4.toString;
            t4 = t2 + new H.MappedListIterable(t4, new E.TypeHierarchyView__render_closure0(this), [null, null]).join$1(0, ", ");
            t2 = t4;
          }
          span = t3.createElement("span");
          span.textContent = t2.charCodeAt(0) == 0 ? t2 : t2;
          J.get$classes$x(span).add$1(0, "hierarchy-muted");
          J.add$1$ax(t1.get$children(intoElement), span);
        }
      }, "call$2", "get$_render", 4, 0, 82]
    },
    TypeHierarchyView__sort_closure: {
      "^": "Closure:83;items",
      call$2: [function(aIndex, bIndex) {
        var t1, t2, a, b, aName;
        t1 = this.items;
        t2 = t1.length;
        if (aIndex >>> 0 !== aIndex || aIndex >= t2)
          return H.ioore(t1, aIndex);
        a = t1[aIndex];
        if (bIndex >>> 0 !== bIndex || bIndex >= t2)
          return H.ioore(t1, bIndex);
        b = t1[bIndex];
        aName = a.get$displayName() != null ? a.get$displayName() : a.get$classElement().name;
        return J.compareTo$1$ns(aName, b.get$displayName() != null ? b.get$displayName() : b.get$classElement().name);
      }, null, null, 4, 0, null, 161, 162, "call"]
    },
    TypeHierarchyView__render_closure: {
      "^": "Closure:0;$this",
      call$1: [function(i) {
        var t1 = this.$this._type_hierarchy$_items;
        if (i >>> 0 !== i || i >= t1.length)
          return H.ioore(t1, i);
        return t1[i].get$classElement().name;
      }, null, null, 2, 0, null, 44, "call"]
    },
    TypeHierarchyView__render_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(i) {
        var t1 = this.$this._type_hierarchy$_items;
        if (i >>> 0 !== i || i >= t1.length)
          return H.ioore(t1, i);
        return t1[i].get$classElement().name;
      }, null, null, 2, 0, null, 44, "call"]
    }
  }], ["atom.analysis_server", "package:atom_dartlang/analysis_server.dart",, X, {
    "^": "",
    AnalysisServer: {
      "^": "Object;subs,disposables,_serverActiveController,_serverBusyController,_onSendController,_onReceiveController,_onNavigatonController,_onOutlineController,_server<,_job,_willSend,knownRoots",
      get$onActive: function() {
        var t1 = this._serverActiveController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onBusy: function() {
        var t1 = this._serverBusyController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onSend: function() {
        var t1 = this._onSendController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onReceive: function() {
        var t1 = this._onReceiveController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onNavigaton: function() {
        var t1 = this._onNavigatonController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onOutline: function() {
        var t1 = this._onOutlineController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onAnalysisErrors: function() {
        return H.subtypeCast(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$_server()._analysis._listen$2("analysis.errors", E.analysis_server_lib_AnalysisErrors_parse$closure()), "$isStream", [E.AnalysisErrors], "$asStream");
      },
      get$onAnalysisFlushResults: function() {
        return H.subtypeCast(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$_server()._analysis._listen$2("analysis.flushResults", E.analysis_server_lib_AnalysisFlushResults_parse$closure()), "$isStream", [E.AnalysisFlushResults], "$asStream");
      },
      get$server: function() {
        return this._server;
      },
      set$willSend: function(fn) {
        var t1;
        this._willSend = fn;
        t1 = this._server;
        if (t1 != null)
          t1._analysis_server_lib$_willSend = fn;
      },
      _setup$0: [function() {
        var t1, trim;
        t1 = this.subs._subscriptions;
        t1.push(Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).get$onProjectsChanged().listen$1(this.get$_reconcileRoots()));
        t1.push(Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$onSdkChange().listen$1(this.get$_handleSdkChange()));
        t1 = Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).get$dartProjectEditors()._activeEditorController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(this.get$_focusedEditorChanged());
        t1 = this.knownRoots;
        C.JSArray_methods.set$length(t1, 0);
        C.JSArray_methods.addAll$1(t1, Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).get$projects());
        this._checkTrigger$0();
        trim = new X.AnalysisServer__setup_closure();
        t1 = this._onSendController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__setup_closure0(trim));
        t1 = this._onReceiveController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__setup_closure1(trim));
      }, "call$0", "get$_setup", 0, 0, 2],
      get$isActive: function() {
        var t1 = this._server;
        return t1 != null && t1.process != null;
      },
      get$isBusy: function() {
        var t1 = this._server;
        return t1 != null && t1.analyzing === true;
      },
      updateRoots$0: function() {
        var t1, roots, pkgRoots, _i, root, t2, t3, pkgRoot, m;
        t1 = this._server;
        if (t1 != null && t1.process != null) {
          roots = P.List_List$from(new H.MappedListIterable(this.knownRoots, new X.AnalysisServer_updateRoots_closure(), [null, null]), true, null);
          t1 = P.String;
          pkgRoots = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
          for (t1 = roots.length, _i = 0; _i < roots.length; roots.length === t1 || (0, H.throwConcurrentModificationError)(roots), ++_i) {
            root = roots[_i];
            t2 = $.$get$dartino();
            t2.toString;
            t3 = $.$get$fs();
            if (t3.invoke$2("existsSync", t3.join$2(0, root, "dartino.yaml")) === true) {
              pkgRoot = t2.sdkFor$2$quiet(root, true);
              pkgRoot = pkgRoot == null ? pkgRoot : pkgRoot.packageRoot$1(root);
              if (pkgRoot != null)
                pkgRoots.$indexSet(0, root, pkgRoot);
            }
          }
          $.$get$_logger5().fine$1("setAnalysisRoots(" + H.S(roots) + ", packageRoots: " + pkgRoots.toString$0(0) + ")");
          t1 = this._server._analysis;
          t1.toString;
          m = P.LinkedHashMap__makeLiteral(["included", roots, "excluded", []]);
          m.$indexSet(0, "packageRoots", pkgRoots);
          t1.server._call$2(0, "analysis.setAnalysisRoots", m);
        }
      },
      dispose$0: [function() {
        $.$get$_logger5().fine$1("dispose()");
        this._checkTrigger$1$dispose(true);
        this.subs.cancel$0(0);
        this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _reconcileRoots$1: [function(currentProjects) {
        var t1, oldSet, currentSet, addedProjects, removedProjects;
        t1 = this.knownRoots;
        oldSet = P.LinkedHashSet_LinkedHashSet$from(t1, null);
        currentSet = P.LinkedHashSet_LinkedHashSet$from(currentProjects, null);
        addedProjects = currentSet.difference$1(oldSet);
        removedProjects = oldSet.difference$1(currentSet);
        C.JSArray_methods.set$length(t1, 0);
        C.JSArray_methods.addAll$1(t1, currentProjects);
        if (removedProjects._collection$_length !== 0) {
          $.$get$_logger5().fine$1("removed: " + P.IterableBase_iterableToFullString(removedProjects, "{", "}"));
          removedProjects.forEach$1(0, new X.AnalysisServer__reconcileRoots_closure());
        }
        if (addedProjects._collection$_length !== 0)
          $.$get$_logger5().fine$1("added: " + P.IterableBase_iterableToFullString(addedProjects, "{", "}"));
        if (removedProjects._collection$_length !== 0 || addedProjects._collection$_length !== 0)
          this.updateRoots$0();
        this._checkTrigger$0();
      }, "call$1", "get$_reconcileRoots", 2, 0, 84, 169],
      _handleSdkChange$1: [function(newSdk) {
        this._checkTrigger$0();
      }, "call$1", "get$_handleSdkChange", 2, 0, 85, 82],
      _focusedEditorChanged$1: [function(editor) {
        var t1, path, t2;
        t1 = this._server;
        if (!(t1 != null && t1.process != null) || editor == null)
          return;
        path = editor.getPath$0();
        if (path != null) {
          t1 = this._server._analysis;
          t2 = P.LinkedHashMap__makeLiteral(["NAVIGATION", [path], "OUTLINE", [path]]);
          t1.toString;
          t2 = P.LinkedHashMap__makeLiteral(["subscriptions", t2]);
          t1.server._call$2(0, "analysis.setSubscriptions", t2);
          t2 = this._server._analysis;
          t2.toString;
          t1 = P.LinkedHashMap__makeLiteral(["files", [path]]);
          t2.server._call$2(0, "analysis.setPriorityFiles", t1).catchError$1(new X.AnalysisServer__focusedEditorChanged_closure(this, path));
        }
      }, "call$1", "get$_focusedEditorChanged", 2, 0, 7, 9],
      start$0: [function(_) {
        var t1, server;
        if (!Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$hasSdk())
          return;
        t1 = this._server;
        if (t1 == null) {
          server = X._AnalysisServerWrapper_create(Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk());
          this._server = server;
          this._initNewServer$1(server);
        } else if (t1.process == null) {
          t1.restart$1(Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk());
          this._initExistingServer$1(this._server);
        }
      }, "call$0", "get$start", 0, 0, 2],
      reanalyzeSources$0: function() {
        var t1, m;
        t1 = this._server;
        if (t1 != null && t1.process != null) {
          t1 = t1._analysis;
          t1.toString;
          m = P.LinkedHashMap__makeEmpty();
          t1.server._call$2(0, "analysis.reanalyze", m);
        }
      },
      _searchResultsStream$1: function(id) {
        var t1, controller;
        t1 = {};
        t1.sub = null;
        controller = P.StreamController_StreamController(new X.AnalysisServer__searchResultsStream_closure(t1), null, null, null, false, null);
        t1.sub = H.subtypeCast(this._server._search._listen$2("search.results", E.analysis_server_lib_SearchResults_parse$closure()), "$isStream", [E.SearchResults], "$asStream")._createSubscription$4(new X.AnalysisServer__searchResultsStream_closure0(t1, id, controller), null, null, false);
        return new P._ControllerStream(controller, [H.getTypeArgumentByIndex(controller, 0)]);
      },
      getSearchResults$1: function(searchId) {
        return this._searchResultsStream$1(searchId).toList$0(0);
      },
      format$4$lineLength: function(path, selectionOffset, selectionLength, lineLength) {
        return this._server._edit.format$4$lineLength(path, selectionOffset, selectionLength, lineLength);
      },
      getAvailableRefactorings$3: function(path, offset, $length) {
        return this._server._edit.getAvailableRefactorings$3(path, offset, $length);
      },
      getRefactoring$6$options: function(kind, path, offset, $length, validateOnly, options) {
        return this._server._edit.getRefactoring$6$options(kind, path, offset, $length, false, options);
      },
      getFixes$2: function(path, offset) {
        return this._server._edit.getFixes$2(path, offset);
      },
      getAssists$3: function(path, offset, $length) {
        return this._server._edit.getAssists$3(path, offset, $length);
      },
      getHover$2: function(file, offset) {
        return this._server._analysis.getHover$2(file, offset);
      },
      findElementReferences$3: function(path, offset, includePotential) {
        return this._server._search.findElementReferences$3(path, offset, false);
      },
      getTypeHierarchy$2: function(path, offset) {
        return this._server._search.getTypeHierarchy$2(path, offset);
      },
      updateContent$2: function(path, contentOverlay) {
        var t1, t2;
        t1 = this._server._analysis;
        t2 = P.LinkedHashMap__makeLiteral([path, contentOverlay]);
        t1.toString;
        t2 = P.LinkedHashMap__makeLiteral(["files", t2]);
        return t1.server._call$2(0, "analysis.updateContent", t2);
      },
      shutdown$0: function() {
        var t1 = this._server;
        if (t1 != null)
          t1.kill$0();
      },
      _checkTrigger$1$dispose: function(dispose) {
        var shouldBeRunning, t1, server;
        shouldBeRunning = this.knownRoots.length !== 0 && Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$hasSdk();
        if (!dispose)
          t1 = !shouldBeRunning && this._server != null;
        else
          t1 = true;
        if (t1) {
          t1 = this._server;
          if (t1 != null)
            t1.kill$0();
        } else if (shouldBeRunning) {
          t1 = this._server;
          if (t1 == null) {
            server = X._AnalysisServerWrapper_create(Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk());
            this._server = server;
            this._initNewServer$1(server);
          } else if (t1.process == null) {
            t1.restart$1(Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk());
            this._initExistingServer$1(this._server);
          }
        }
      },
      _checkTrigger$0: function() {
        return this._checkTrigger$1$dispose(false);
      },
      _initNewServer$1: function(server) {
        var t1 = server._analyzingController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__initNewServer_closure(this));
        t1 = server._disposedController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__initNewServer_closure0(this, server));
        t1 = server._onSend;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__initNewServer_closure1(this));
        t1 = server._onReceive;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__initNewServer_closure2(this));
        H.subtypeCast(server._analysis._listen$2("analysis.navigation", E.analysis_server_lib_AnalysisNavigation_parse$closure()), "$isStream", [E.AnalysisNavigation], "$asStream")._createSubscription$4(new X.AnalysisServer__initNewServer_closure3(this), null, null, false);
        H.subtypeCast(server._analysis._listen$2("analysis.outline", E.analysis_server_lib_AnalysisOutline_parse$closure()), "$isStream", [E.AnalysisOutline], "$asStream")._createSubscription$4(new X.AnalysisServer__initNewServer_closure4(this), null, null, false);
        t1 = this._serverBusyController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__initNewServer_closure5(this));
        this._initExistingServer$1(server);
      },
      _initExistingServer$1: function(server) {
        var t1;
        server._analysis_server_lib$_willSend = this._willSend;
        t1 = this._serverActiveController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(true);
        this.updateRoots$0();
        this._focusedEditorChanged$1(Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).get$dartProjectEditors()._activeEditor);
      },
      AnalysisServer$0: function(_box_0) {
        var t1;
        P.Timer_Timer(C.Duration_0, this.get$_setup());
        _box_0.firstNotification = true;
        t1 = this._serverActiveController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer_closure(_box_0));
      },
      $isDisposable: 1,
      static: {
        AnalysisServer$: function() {
          var t1 = new X.AnalysisServer(new L.StreamSubscriptions(true, []), new L.Disposables(true, []), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), null, null, null, []);
          t1.AnalysisServer$0({});
          return t1;
        }
      }
    },
    AnalysisServer_closure: {
      "^": "Closure:0;_box_0",
      call$1: [function(value) {
        var t1 = this._box_0;
        if (t1.firstNotification) {
          t1.firstNotification = false;
          return;
        }
        if (value === true) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addInfo", "Dart analysis server starting up.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        } else if (Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).get$projects().length === 0) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addInfo", "Dart analysis server shutting down (no Dart projects open).", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        } else {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addInfo", "Dart analysis server shutting down.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        }
      }, null, null, 2, 0, null, 7, "call"]
    },
    AnalysisServer__setup_closure: {
      "^": "Closure:3;",
      call$1: function(str) {
        var t1 = J.getInterceptor$asx(str);
        return J.$gt$n(t1.get$length(str), 260) ? t1.substring$2(str, 0, 260) + "\u2026" : str;
      }
    },
    AnalysisServer__setup_closure0: {
      "^": "Closure:3;trim",
      call$1: [function(message) {
        var t1 = $.$get$_logger5();
        if (t1.isLoggable$1(C.Level_FINER_400))
          t1.finer$1("--> " + H.S(this.trim.call$1(message)));
      }, null, null, 2, 0, null, 10, "call"]
    },
    AnalysisServer__setup_closure1: {
      "^": "Closure:3;trim",
      call$1: [function(message) {
        var t1, t2;
        t1 = J.getInterceptor$s(message);
        if (t1.startsWith$1(message, "Observatory listening")) {
          message = t1.trim$0(message);
          t1 = $.$get$atom();
          if (J.$eq$(t1._config.getValue$2$scope("dartlang.debugAnalysisServer", null), true))
            message += "\nAnalysis server diagnostics on http://localhost:23072";
          t1 = t1._notifications;
          t1.invoke$3("addInfo", "Analysis server", t1._options$5$buttons$description$detail$dismissable$icon(null, null, message, true, null));
        }
        t1 = J.getInterceptor$s(message);
        if (t1.startsWith$1(message, "Observatory no longer listening")) {
          t2 = $.$get$atom()._notifications;
          t2.invoke$3("addInfo", "Analysis server", t2._options$5$buttons$description$detail$dismissable$icon(null, null, t1.trim$0(message), true, null));
        }
        t1 = $.$get$_logger5();
        if (t1.isLoggable$1(C.Level_FINER_400))
          t1.finer$1("<-- " + H.S(this.trim.call$1(message)));
      }, null, null, 2, 0, null, 10, "call"]
    },
    AnalysisServer_updateRoots_closure: {
      "^": "Closure:0;",
      call$1: [function(dir) {
        return J.get$path$x(dir);
      }, null, null, 2, 0, null, 21, "call"]
    },
    AnalysisServer__reconcileRoots_closure: {
      "^": "Closure:0;",
      call$1: function(project) {
        return Q.Dependencies_instance().getDependency$1(C.Type_ErrorRepository_jfx).clearForDirectory$1(J.get$directory$x(project));
      }
    },
    AnalysisServer__focusedEditorChanged_closure: {
      "^": "Closure:0;$this,path",
      call$1: [function(e) {
        var t1;
        if (e instanceof E.RequestError && J.$eq$(e.code, "UNANALYZED_PRIORITY_FILES")) {
          t1 = this.$this._onOutlineController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(new E.AnalysisOutline(this.path, null, null, null));
        } else
          $.$get$_logger5().warning$2("Error from setPriorityFiles()", e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    AnalysisServer__searchResultsStream_closure: {
      "^": "Closure:1;_box_0",
      call$0: [function() {
        return this._box_0.sub.cancel$0(0);
      }, null, null, 0, 0, null, "call"]
    },
    AnalysisServer__searchResultsStream_closure0: {
      "^": "Closure:86;_box_0,id,controller",
      call$1: [function(result) {
        var t1, t2, t3, r, t4;
        t1 = J.getInterceptor$x(result);
        if (J.$eq$(this.id, t1.get$id(result)) && (this.controller._state & 4) === 0) {
          for (t1 = J.get$iterator$ax(t1.get$results(result)), t2 = this.controller, t3 = [H.getTypeArgumentByIndex(t2, 0)]; t1.moveNext$0();) {
            r = t1.get$current();
            if (t2._state >= 4)
              H.throwExpression(t2._badEventState$0());
            t4 = t2._state;
            if ((t4 & 1) !== 0)
              t2._sendData$1(r);
            else if ((t4 & 3) === 0)
              t2._ensurePendingEvents$0().add$1(0, new P._DelayedData(r, null, t3));
          }
          if (result.get$isLast() === true) {
            this._box_0.sub.cancel$0(0);
            t2.close$0(0);
          }
        }
      }, null, null, 2, 0, null, 3, "call"]
    },
    AnalysisServer__initNewServer_closure: {
      "^": "Closure:0;$this",
      call$1: [function(value) {
        var t1 = this.$this._serverBusyController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(value);
        return;
      }, null, null, 2, 0, null, 7, "call"]
    },
    AnalysisServer__initNewServer_closure0: {
      "^": "Closure:0;$this,server",
      call$1: [function(exitCode) {
        var t1, t2;
        t1 = this.$this;
        if (t1._server === this.server) {
          t2 = t1._serverActiveController;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(false);
          t1 = t1._serverBusyController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(false);
          Q.Dependencies_instance().getDependency$1(C.Type_ErrorRepository_jfx).clearAll$0();
        }
        return;
      }, null, null, 2, 0, null, 33, "call"]
    },
    AnalysisServer__initNewServer_closure1: {
      "^": "Closure:0;$this",
      call$1: [function(message) {
        var t1 = this.$this._onSendController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(message);
        return;
      }, null, null, 2, 0, null, 10, "call"]
    },
    AnalysisServer__initNewServer_closure2: {
      "^": "Closure:0;$this",
      call$1: [function(message) {
        var t1 = this.$this._onReceiveController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(message);
        return;
      }, null, null, 2, 0, null, 10, "call"]
    },
    AnalysisServer__initNewServer_closure3: {
      "^": "Closure:0;$this",
      call$1: [function(e) {
        var t1 = this.$this._onNavigatonController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(e);
        return;
      }, null, null, 2, 0, null, 0, "call"]
    },
    AnalysisServer__initNewServer_closure4: {
      "^": "Closure:0;$this",
      call$1: [function(e) {
        var t1 = this.$this._onOutlineController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(e);
        return;
      }, null, null, 2, 0, null, 0, "call"]
    },
    AnalysisServer__initNewServer_closure5: {
      "^": "Closure:0;$this",
      call$1: [function(busy) {
        var t1, t2;
        t1 = busy === true;
        if (!t1 && this.$this._job != null) {
          t1 = this.$this;
          t2 = t1._job.completer;
          if (t2.future._state === 0)
            t2.complete$0(0);
          t1._job = null;
        } else if (t1 && this.$this._job == null) {
          t1 = X._AnalyzingJob$();
          t1.start$0(0);
          this.$this._job = t1;
        }
      }, null, null, 2, 0, null, 84, "call"]
    },
    _AnalyzingJob: {
      "^": "Job;completer,_infoAction,name,_schedulingRule",
      get$quiet: function() {
        return true;
      },
      get$infoAction: function() {
        return this._infoAction;
      },
      run$0: [function() {
        return this.completer.future;
      }, "call$0", "get$run", 0, 0, 5],
      start$0: [function(_) {
        P.Timer_Timer(C.Duration_400000, new X._AnalyzingJob_start_closure(this));
      }, "call$0", "get$start", 0, 0, 2],
      _AnalyzingJob$0: function() {
        this._infoAction = new X._AnalyzingJob_closure();
      },
      static: {
        _AnalyzingJob$: function() {
          var t1 = new X._AnalyzingJob(new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]), null, "Analyzing source", null);
          t1._AnalyzingJob$0();
          return t1;
        }
      }
    },
    _AnalyzingJob_closure: {
      "^": "Closure:1;",
      call$0: function() {
        Q.Dependencies_instance().getDependency$1(C.Type_StatusViewManager_tnX).showSection$1("analysis-server");
      }
    },
    _AnalyzingJob_start_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        var t1 = this.$this;
        if (t1.completer.future._state === 0)
          Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(t1);
      }
    },
    _AnalysisServerWrapper: {
      "^": "Server;process,_processCompleter,analyzing,_analyzingController,_disposedController,_streamSub,_writeMessage,_analysis_server_lib$_id,_analysis_server_lib$_completers,_methodNames,_jsonEncoder,_domains,_onSend,_onReceive,_analysis_server_lib$_willSend,_analysis_server_lib$_server,_analysis,_completion,_search,_edit,_execution,_diagnostic",
      setup$0: function() {
        var t1, t2;
        t1 = this._analysis_server_lib$_server;
        t1.toString;
        t2 = P.LinkedHashMap__makeLiteral(["subscriptions", ["STATUS"]]);
        t1.server._call$2(0, "server.setSubscriptions", t2);
        t2 = this._analysis;
        t2.toString;
        t1 = P.LinkedHashMap__makeLiteral(["options", new E.AnalysisOptions(null, null, null, null, true, null, null, null)]);
        t2.server._call$2(0, "analysis.updateOptions", t1);
        this._analysis_server_lib$_server.server._call$2(0, "server.getVersion", null).then$1(E.analysis_server_lib_VersionResult_parse$closure()).then$1(new X._AnalysisServerWrapper_setup_closure());
        H.subtypeCast(this._analysis_server_lib$_server._listen$2("server.status", E.analysis_server_lib_ServerStatus_parse$closure()), "$isStream", [E.ServerStatus], "$asStream")._createSubscription$4(new X._AnalysisServerWrapper_setup_closure0(this), null, null, false);
        H.subtypeCast(this._analysis_server_lib$_server._listen$2("server.error", E.analysis_server_lib_ServerError_parse$closure()), "$isStream", [E.ServerError], "$asStream")._createSubscription$4(new X._AnalysisServerWrapper_setup_closure1(this), null, null, false);
      },
      _reportError$1: function(error) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, sdkVersion, pluginVersion, t1, t2, text, filePath;
        var $async$_reportError$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncHelper(Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk().getVersion$0(), $async$_reportError$1, $async$completer);
              case 2:
                // returning from await.
                sdkVersion = $async$result;
                $async$goto = 3;
                return P._asyncHelper($._package.getPackageVersion$0(), $async$_reportError$1, $async$completer);
              case 3:
                // returning from await.
                pluginVersion = $async$result;
                t1 = "Please report the following to https://github.com/dart-lang/sdk/issues/new:\n\nException from analysis server (running from Atom)\n\n### what happened\n\n<please describe what you were doing when this exception occurred>\n\n### version information\n\n- Dart SDK " + H.S(sdkVersion) + "\n- Atom ";
                t2 = $.$get$atom();
                t1 = t1 + H.S(t2.invoke$1("getVersion")) + "\n- dartlang " + H.S(pluginVersion) + "\n\n### the exception\n\n" + H.S(J.get$message$x(error)) + " ";
                text = t1 + (error.get$isFatal() === true ? " (fatal)" : "") + "\n\n```\n" + H.S(error.get$stackTrace()) + "\n```\n";
                t1 = $.$get$fs();
                filePath = t1.join$2(0, t1._os.callMethod$1("tmpdir"), "bug.md");
                t1.invoke$3("writeFileSync", filePath, text);
                t2._workspace.openPending$1(filePath);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_reportError$1, $async$completer);
      },
      get$isRunning: function() {
        return this.process != null;
      },
      restart$1: function(sdk) {
        var startServer, t1;
        startServer = new X._AnalysisServerWrapper_restart_closure(this, sdk);
        t1 = this.process;
        if (t1 != null)
          t1.kill$0().then$1(new X._AnalysisServerWrapper_restart_closure0(startServer));
        else
          startServer.call$0();
      },
      kill$0: function() {
        var t1, exception;
        t1 = $.$get$_logger5();
        t1.fine$1("server forcibly terminated");
        if (this.process != null) {
          try {
            this._analysis_server_lib$_server.server._call$2(0, "server.shutdown", null).catchError$1(new X._AnalysisServerWrapper_kill_closure());
          } catch (exception) {
            H.unwrapException(exception);
          }
          this.process.kill$0();
          this.process = null;
          try {
            this.dispose$0();
          } catch (exception) {
            H.unwrapException(exception);
          }
          t1 = this._processCompleter;
          if (t1.future._state === 0)
            t1.complete$1(0, 0);
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(0);
          return t1;
        } else {
          t1.info$1("kill signal sent to dead analysis server");
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(1);
          return t1;
        }
      },
      _AnalysisServerWrapper$4: function(process, _processCompleter, inStream, writeMessage) {
        this._processCompleter.future.then$1(new X._AnalysisServerWrapper_closure(this));
      },
      process$0: function() {
        return this.process.call$0();
      },
      static: {
        _AnalysisServerWrapper_create: function(sdk) {
          var controller, process, wrapper;
          controller = P.StreamController_StreamController(null, null, null, null, false, null);
          process = X._AnalysisServerWrapper__createProcess(sdk);
          wrapper = X._AnalysisServerWrapper$(process, X._AnalysisServerWrapper__startProcess(process, controller), new P._ControllerStream(controller, [H.getTypeArgumentByIndex(controller, 0)]), X._AnalysisServerWrapper__messageWriter(process));
          wrapper.setup$0();
          return wrapper;
        },
        _AnalysisServerWrapper$: function(process, _processCompleter, inStream, writeMessage) {
          var t1 = new X._AnalysisServerWrapper(process, _processCompleter, false, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), null, null, 0, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), new P.JsonCodec(null, E.analysis_server_lib_Server__toEncodable$closure()), P.LinkedHashMap__makeEmpty(), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), null, null, null, null, null, null, null, null);
          t1.Server$2(inStream, writeMessage);
          t1._AnalysisServerWrapper$4(process, _processCompleter, inStream, writeMessage);
          return t1;
        },
        _AnalysisServerWrapper__createProcess: function(sdk) {
          var $arguments, t1, path, serverPath, t2, options;
          $arguments = H.setRuntimeTypeInfo([], [P.String]);
          t1 = $.$get$atom();
          if (J.$eq$(t1._config.getValue$2$scope("dartlang.analysisServerUseChecked", null), true))
            $arguments.push("--checked");
          if (J.$eq$(t1._config.getValue$2$scope("dartlang.debugAnalysisServer", null), true))
            $arguments.push("--enable-vm-service=0");
          path = sdk.getSnapshotPath$1("analysis_server.dart.snapshot");
          serverPath = t1._config.getValue$1("dartlang.analysisServerPath");
          if (typeof serverPath === "string") {
            t2 = t1._notifications;
            t2.invoke$3("addSuccess", "Running analysis server from source", t2._options$5$buttons$description$detail$dismissable$icon(null, null, serverPath, null, null));
            path = serverPath;
          } else if (serverPath != null) {
            t2 = t1._notifications;
            t2.invoke$3("addError", "dartlang.analysisServerPath is defined but not a String", t2._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          }
          $arguments.push(path);
          $arguments.push("--sdk=" + H.S(sdk.get$path(sdk)));
          if (J.$eq$(t1._config.getValue$2$scope("dartlang.debugAnalysisServer", null), true)) {
            $arguments.push("--port=23072");
            $.$get$_logger5().info$1("analysis server diagnostics available at http://localhost:23072.");
          }
          $arguments.push("--client-id=atom-dartlang");
          $arguments.push("--client-version=" + H.S($.pluginVersion));
          if (t1._config.getValue$1("dartlang.analysisServerOptions") != null) {
            options = t1._config.getValue$1("dartlang.analysisServerOptions");
            if (!!J.getInterceptor(options).$isList)
              C.JSArray_methods.addAll$1($arguments, P.List_List$from(options, true, null));
            else if (typeof options === "string")
              C.JSArray_methods.addAll$1($arguments, options.split("\n"));
          }
          return new X.ProcessRunner(J.$index$asx(sdk.get$dartVm().obj, "path"), $arguments, null, null, null, new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]), null, P.StreamController_StreamController(null, null, null, null, false, null), P.StreamController_StreamController(null, null, null, null, false, null));
        },
        _AnalysisServerWrapper__startProcess: function(process, sc) {
          var completer, t1;
          completer = new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]);
          t1 = process._stderrController;
          new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X._AnalysisServerWrapper__startProcess_closure());
          t1 = process._stdoutController;
          new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X._AnalysisServerWrapper__startProcess_closure0(sc));
          process.execStreaming$0().then$1(new X._AnalysisServerWrapper__startProcess_closure1(completer));
          return completer;
        },
        _AnalysisServerWrapper__messageWriter: function(process) {
          return new X._AnalysisServerWrapper__messageWriter_closure(process);
        }
      }
    },
    _AnalysisServerWrapper_closure: {
      "^": "Closure:0;$this",
      call$1: [function(result) {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._disposedController;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(result);
        t1.process = null;
      }, null, null, 2, 0, null, 3, "call"]
    },
    _AnalysisServerWrapper_setup_closure: {
      "^": "Closure:0;",
      call$1: [function(v) {
        return $.$get$_logger5().info$1("version " + H.S(J.get$version$x(v)));
      }, null, null, 2, 0, null, 18, "call"]
    },
    _AnalysisServerWrapper_setup_closure0: {
      "^": "Closure:87;$this",
      call$1: [function($status) {
        var t1, t2;
        if ($status.get$analysis() != null) {
          t1 = this.$this;
          t2 = $status.get$analysis().get$isAnalyzing();
          t1.analyzing = t2;
          t1 = t1._analyzingController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(t2);
        }
      }, null, null, 2, 0, null, 34, "call"]
    },
    _AnalysisServerWrapper_setup_closure1: {
      "^": "Closure:88;$this",
      call$1: [function(error) {
        var st, t1, buttons, t2;
        st = error.get$stackTrace() == null ? null : new P._StringStackTrace(error.get$stackTrace());
        t1 = J.getInterceptor$x(error);
        $.$get$_logger5().info$3(t1.get$message(error), null, st);
        buttons = [new D.NotificationButton("Report Error", new X._AnalysisServerWrapper_setup__closure(this.$this, error))];
        if (error.get$isFatal() === true) {
          t2 = $.$get$atom()._notifications;
          t2.invoke$3("addError", "Error from the analysis server: " + H.S(t1.get$message(error)), t2._options$5$buttons$description$detail$dismissable$icon(buttons, null, error.get$stackTrace(), true, null));
        } else {
          t2 = $.$get$atom()._notifications;
          t2.invoke$3("addWarning", "Error from the analysis server: " + H.S(t1.get$message(error)), t2._options$5$buttons$description$detail$dismissable$icon(buttons, null, error.get$stackTrace(), true, null));
        }
      }, null, null, 2, 0, null, 8, "call"]
    },
    _AnalysisServerWrapper_setup__closure: {
      "^": "Closure:1;$this,error",
      call$0: [function() {
        return this.$this._reportError$1(this.error);
      }, null, null, 0, 0, null, "call"]
    },
    _AnalysisServerWrapper_restart_closure: {
      "^": "Closure:1;$this,sdk",
      call$0: function() {
        var controller, t1, t2;
        controller = P.StreamController_StreamController(null, null, null, null, false, null);
        t1 = this.$this;
        t2 = X._AnalysisServerWrapper__createProcess(this.sdk);
        t1.process = t2;
        t2 = X._AnalysisServerWrapper__startProcess(t2, controller);
        t1._processCompleter = t2;
        t2.future.then$1(new X._AnalysisServerWrapper_restart__closure(t1));
        t2 = X._AnalysisServerWrapper__messageWriter(t1.process);
        t1.dispose$0();
        t1._streamSub = new P._ControllerStream(controller, [H.getTypeArgumentByIndex(controller, 0)]).listen$1(t1.get$_processMessage());
        t1._writeMessage = t2;
        t1.setup$0();
      }
    },
    _AnalysisServerWrapper_restart__closure: {
      "^": "Closure:0;$this",
      call$1: [function(result) {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._disposedController;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(result);
        t1.process = null;
      }, null, null, 2, 0, null, 3, "call"]
    },
    _AnalysisServerWrapper_restart_closure0: {
      "^": "Closure:0;startServer",
      call$1: [function(_) {
        return this.startServer.call$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    _AnalysisServerWrapper_kill_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return;
      }, null, null, 2, 0, null, 0, "call"]
    },
    _AnalysisServerWrapper__startProcess_closure: {
      "^": "Closure:3;",
      call$1: [function(str) {
        return $.$get$_logger5().severe$1(J.trim$0$s(str));
      }, null, null, 2, 0, null, 4, "call"]
    },
    _AnalysisServerWrapper__startProcess_closure0: {
      "^": "Closure:3;sc",
      call$1: [function(str) {
        var lines, t1, t2, t3, _i, t4, t5;
        lines = J.trim$0$s(str).split("\n");
        for (t1 = lines.length, t2 = this.sc, t3 = [H.getTypeArgumentByIndex(t2, 0)], _i = 0; _i < lines.length; lines.length === t1 || (0, H.throwConcurrentModificationError)(lines), ++_i) {
          t4 = J.trim$0$s(lines[_i]);
          if (t2._state >= 4)
            H.throwExpression(t2._badEventState$0());
          t5 = t2._state;
          if ((t5 & 1) !== 0)
            t2._sendData$1(t4);
          else if ((t5 & 3) === 0)
            t2._ensurePendingEvents$0().add$1(0, new P._DelayedData(t4, null, t3));
        }
      }, null, null, 2, 0, null, 4, "call"]
    },
    _AnalysisServerWrapper__startProcess_closure1: {
      "^": "Closure:19;completer",
      call$1: [function(exitCode) {
        var t1;
        $.$get$_logger5().fine$1("exited with code " + H.S(exitCode));
        t1 = this.completer;
        if (t1.future._state === 0)
          t1.complete$1(0, exitCode);
      }, null, null, 2, 0, null, 33, "call"]
    },
    _AnalysisServerWrapper__messageWriter_closure: {
      "^": "Closure:3;process",
      call$1: function(message) {
        var t1, t2;
        t1 = this.process;
        if (t1 != null) {
          t2 = message + "\n";
          t1._process$_process.write$1(0, t2);
        }
      }
    },
    AnalysisRequestJob: {
      "^": "Job;_fn,name,_schedulingRule",
      get$quiet: function() {
        return true;
      },
      run$0: [function() {
        if (!Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive()) {
          $.$get$atom().invoke$1("beep");
          var t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
        return this._fn.call$0().catchError$1(new X.AnalysisRequestJob_run_closure(this));
      }, "call$0", "get$run", 0, 0, 5]
    },
    AnalysisRequestJob_run_closure: {
      "^": "Closure:0;$this",
      call$1: [function(e) {
        var t1, t2;
        if (!Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive())
          return;
        if (e instanceof E.RequestError) {
          t1 = $.$get$atom()._notifications;
          t2 = this.$this.name;
          t1.invoke$3("addError", H.S(t2) + " error", t1._options$5$buttons$description$detail$dismissable$icon(null, null, H.S(e.message) + " (" + H.S(e.code) + ")", null, null));
          t1 = e.stackTrace;
          if (t1 == null)
            $.$get$_logger5().warning$2(H.S(t2) + " error", e);
          else
            $.$get$_logger5().warning$3(H.S(t2) + " error", e, new P._StringStackTrace(t1));
          return;
        } else
          throw H.wrapException(e);
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["atom.autocomplete", "package:atom_dartlang/atom_autocomplete.dart",, X, {
    "^": "",
    AutocompleteProvider: {
      "^": "Object;",
      dispose$0: [function() {
      }, "call$0", "get$dispose", 0, 0, 2],
      toProxy$0: function() {
        var map = P.LinkedHashMap__makeLiteral(["selector", this.selector, "getSuggestions", this.get$_getSuggestions(), "onDidInsertSuggestion", this.get$_onDidInsertSuggestion(), "dispose", this.get$dispose()]);
        map.$indexSet(0, "inclusionPriority", this.inclusionPriority);
        map.$indexSet(0, "excludeLowerPriority", true);
        map.$indexSet(0, "filterSuggestions", true);
        return K.jsify(map);
      },
      _getSuggestions$1: [function(options) {
        var opts, t1, t2, f, override, timer;
        opts = new X.AutocompleteOptions(null, null, null);
        t1 = J.getInterceptor$asx(options);
        t2 = new Y.TextEditor(Y._cvt1(t1.$index(options, "editor")));
        opts.editor = t2;
        opts.bufferPosition = new Y.Point0(Y._cvt1(t1.$index(options, "bufferPosition")));
        opts.prefix = t1.$index(options, "prefix");
        t1 = $._override;
        if (t1 != null)
          if (t1.hasShown)
            $._override = null;
          else if (!J.$eq$(t1.editor, t2)) {
            $.$get$_logger34().info$1("completions override editor != current editor");
            $._override = null;
          }
        t1 = new X.AutocompleteProvider__getSuggestions_suggestionToProxy();
        t2 = $._override;
        if (t2 != null) {
          t2.hasShown = true;
          t1 = new H.MappedListIterable(t2.renderSuggestions$0(), t1, [null, null]).toList$0(0);
          f = new P._Future(0, $.Zone__current, null, [null]);
          f._asyncComplete$1(t1);
        } else if (C.JSArray_methods.any$1($.$get$_overrides(), new X.AutocompleteProvider__getSuggestions_closure(opts))) {
          override = C.JSArray_methods.firstWhere$1($.$get$_overrides(), new X.AutocompleteProvider__getSuggestions_closure0(opts));
          timer = new P.Stopwatch(null, null);
          H.Primitives_initTicker();
          $.Stopwatch__frequency = $.Primitives_timerFrequency;
          timer.start$0(0);
          f = override.autoCompleter$1(opts).then$1(new X.AutocompleteProvider__getSuggestions_closure1(t1, timer));
        } else {
          timer = new P.Stopwatch(null, null);
          H.Primitives_initTicker();
          $.Stopwatch__frequency = $.Primitives_timerFrequency;
          timer.start$0(0);
          f = this.getSuggestions$1(opts).then$1(new X.AutocompleteProvider__getSuggestions_closure2(t1, timer)).catchError$1(new X.AutocompleteProvider__getSuggestions_closure3());
        }
        return K.Promise__jsObjectFromFuture(f);
      }, "call$1", "get$_getSuggestions", 2, 0, 81, 43],
      _onDidInsertSuggestion$1: [function(options) {
        var t1, t2, t3, index, selectionOffset;
        t1 = $._override;
        t2 = t1 != null && t1.hasShown;
        t3 = J.getInterceptor$asx(options);
        if (t2) {
          t2 = K.jsObjectToDart(t3.$index(options, "suggestion"));
          t1.toString;
          index = J.$index$asx(t2, "itemIndex");
          t2 = t1.completer;
          if (index == null)
            t1 = null;
          else {
            t1 = t1.items;
            if (index >>> 0 !== index || index >= t1.length)
              return H.ioore(t1, index);
            t1 = t1[index];
          }
          t2.complete$1(0, t1);
          $._override = null;
        } else {
          t1 = new Y.TextEditor(Y._cvt1(t3.$index(options, "editor")));
          Y._cvt1(t3.$index(options, "triggerPosition"));
          selectionOffset = J.$index$asx(K.jsObjectToDart(t3.$index(options, "suggestion")), "selectionOffset");
          if (selectionOffset != null)
            t1.invoke$2("setCursorBufferPosition", new Y.Point0(Y._cvt1(new Y.TextBuffer(Y._cvt1(t1.invoke$1("getBuffer"))).invoke$2("positionForCharacterIndex", selectionOffset))));
        }
      }, "call$1", "get$_onDidInsertSuggestion", 2, 0, 15, 43],
      $isDisposable: 1
    },
    AutocompleteProvider__getSuggestions_suggestionToProxy: {
      "^": "Closure:91;",
      call$1: [function(s) {
        return s._toProxy$0();
      }, null, null, 2, 0, null, 19, "call"]
    },
    AutocompleteProvider__getSuggestions_closure: {
      "^": "Closure:0;opts",
      call$1: function(override) {
        return J.$eq$(override.get$editor(), this.opts.editor);
      }
    },
    AutocompleteProvider__getSuggestions_closure0: {
      "^": "Closure:0;opts",
      call$1: function(override) {
        return J.$eq$(override.get$editor(), this.opts.editor);
      }
    },
    AutocompleteProvider__getSuggestions_closure1: {
      "^": "Closure:80;suggestionToProxy,timer",
      call$1: function(suggestions) {
        $.$get$_logger34().finer$1("override completion in " + H.S(J.$tdiv$n(J.$mul$ns(this.timer.get$elapsedTicks(), 1000), $.Stopwatch__frequency)) + "ms, " + H.S(suggestions.get$length(suggestions)) + " results");
        return suggestions.map$1(0, this.suggestionToProxy).toList$0(0);
      }
    },
    AutocompleteProvider__getSuggestions_closure2: {
      "^": "Closure:80;suggestionToProxy,timer",
      call$1: [function(suggestions) {
        var t1 = J.getInterceptor$asx(suggestions);
        $.$get$_logger34().finer$1("code completion in " + H.S(J.$tdiv$n(J.$mul$ns(this.timer.get$elapsedTicks(), 1000), $.Stopwatch__frequency)) + "ms, " + H.S(t1.get$length(suggestions)) + " results");
        return t1.map$1(suggestions, this.suggestionToProxy).toList$0(0);
      }, null, null, 2, 0, null, 87, "call"]
    },
    AutocompleteProvider__getSuggestions_closure3: {
      "^": "Closure:0;",
      call$1: [function(error) {
        $.$get$_logger34().warning$1("Error retrieving code completions: " + H.S(error));
        return H.setRuntimeTypeInfo([], [X.Suggestion]);
      }, null, null, 2, 0, null, 8, "call"]
    },
    AutocompleteOptions: {
      "^": "Object;editor<,bufferPosition,prefix<",
      toString$0: function(_) {
        return "[" + H.S(this.bufferPosition) + ", " + H.S(this.prefix) + "]";
      }
    },
    Suggestion: {
      "^": "Object;text*,snippet,displayText,replacementPrefix,type>,leftLabel,leftLabelHTML,rightLabel,rightLabelHTML,className>,iconHTML,description,descriptionMoreURL,requiredImport,selectionOffset<,itemIndex?",
      _toProxy$0: function() {
        var m, t1;
        m = P.LinkedHashMap__makeEmpty();
        t1 = this.text;
        if (t1 != null)
          m.$indexSet(0, "text", t1);
        t1 = this.snippet;
        if (t1 != null)
          m.$indexSet(0, "snippet", t1);
        t1 = this.displayText;
        if (t1 != null)
          m.$indexSet(0, "displayText", t1);
        t1 = this.replacementPrefix;
        if (t1 != null)
          m.$indexSet(0, "replacementPrefix", t1);
        t1 = this.type;
        if (t1 != null)
          m.$indexSet(0, "type", t1);
        t1 = this.leftLabel;
        if (t1 != null)
          m.$indexSet(0, "leftLabel", t1);
        t1 = this.rightLabel;
        if (t1 != null)
          m.$indexSet(0, "rightLabel", t1);
        t1 = this.className;
        if (t1 != null)
          m.$indexSet(0, "className", t1);
        t1 = this.iconHTML;
        if (t1 != null)
          m.$indexSet(0, "iconHTML", t1);
        t1 = this.description;
        if (t1 != null)
          m.$indexSet(0, "description", t1);
        t1 = this.requiredImport;
        if (t1 != null)
          m.$indexSet(0, "requiredImport", t1);
        t1 = this.selectionOffset;
        if (t1 != null)
          m.$indexSet(0, "selectionOffset", t1);
        t1 = this.itemIndex;
        if (t1 != null)
          m.$indexSet(0, "itemIndex", t1);
        return K.jsify(m);
      }
    },
    _AutoCompleteOverride: {
      "^": "Object;editor<,items,renderer,completer,hasShown,$ti",
      renderSuggestions$0: function() {
        var result, t1, t2, i, suggestion;
        result = [];
        for (t1 = this.items, t2 = this.renderer, i = 0; i < t1.length; ++i) {
          suggestion = t2.call$1(t1[i]);
          suggestion.set$itemIndex(i);
          result.push(suggestion);
        }
        return result;
      },
      get$future: function() {
        return this.completer.future;
      }
    }
  }], ["atom.linter", "package:atom_dartlang/atom_linter.dart",, E, {
    "^": "",
    LinterProvider: {
      "^": "Object;",
      get$key: function(_) {
        return this._key;
      },
      toProxy$0: function() {
        return K.jsify(P.LinkedHashMap__makeLiteral(["grammarScopes", this.grammarScopes, "scope", this.scope, "lintOnFly", false, "lint", this.get$_lint()]));
      },
      _lint$1: [function(jsEditor) {
        return K.jsify([]);
      }, "call$1", "get$_lint", 2, 0, 81, 88]
    },
    LinterConsumer: {
      "^": "Object;"
    },
    LinterService: {
      "^": "ProxyHolder;obj",
      setMessages$2: function(provider, messages) {
        this.invoke$3("setMessages", provider._key, new H.MappedListIterable(messages, new E.LinterService_setMessages_closure(), [null, null]).toList$0(0));
      }
    },
    LinterService_setMessages_closure: {
      "^": "Closure:0;",
      call$1: [function(m) {
        return m.toMap$0();
      }, null, null, 2, 0, null, 6, "call"]
    },
    LintMessage: {
      "^": "Object;type>,text>,html,filePath,range",
      toMap$0: function() {
        var m, t1, t2;
        m = P.LinkedHashMap__makeEmpty();
        t1 = this.type;
        if (t1 != null)
          m.$indexSet(0, "type", t1);
        t1 = this.text;
        if (t1 != null)
          m.$indexSet(0, "text", t1);
        t1 = this.filePath;
        if (t1 != null)
          m.$indexSet(0, "filePath", t1);
        t1 = this.range;
        t2 = t1.start;
        t1 = t1.end;
        m.$indexSet(0, "range", [[t2.row, t2.column], [t1.row, t1.column]]);
        return m;
      }
    },
    Rn: {
      "^": "Object;start>,end>",
      start$0: function($receiver) {
        return this.start.call$0();
      }
    },
    Pt: {
      "^": "Object;row,column<"
    }
  }], ["atom.atom_package_deps", "package:atom_dartlang/atom_package_deps.dart",, F, {
    "^": "",
    install: function() {
      return $._package.loadPackageJson$0().then$1(new F.install_closure());
    },
    install_closure: {
      "^": "Closure:43;",
      call$1: [function(info) {
        var installedPackages, requiredPackages, toInstall, t1;
        installedPackages = P.List_List$from($.$get$atom()._packages.invoke$1("getAvailablePackageNames"), true, null);
        requiredPackages = P.List_List$from(J.$index$asx(info, "required-packages"), true, null);
        if (requiredPackages.length === 0)
          return;
        toInstall = P.LinkedHashSet_LinkedHashSet$from(requiredPackages, null);
        toInstall.removeAll$1(installedPackages);
        if (toInstall._collection$_length === 0)
          return;
        $.$get$_logger17().info$1("installing " + P.IterableBase_iterableToFullString(toInstall, "{", "}"));
        t1 = toInstall.toList$0(0);
        return Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new F._InstallJob(t1, false, 0, "Installing Packages", null));
      }, null, null, 2, 0, null, 89, "call"]
    },
    _InstallJob: {
      "^": "Job;packages,quitRequested,errorCount,name,_schedulingRule",
      get$quiet: function() {
        return true;
      },
      run$0: [function() {
        var t1, t2, t3, helper;
        t1 = this.packages;
        C.JSArray_methods.sort$0(t1);
        t2 = $.$get$atom();
        t3 = t2._notifications;
        t3 = t3.invoke$3("addInfo", this.name, t3._options$5$buttons$description$detail$dismissable$icon(null, "Installing\u2026", "", true, null));
        helper = D.NotificationHelper$(t2._views.invoke$2("getView", t3));
        J.get$classes$x(helper._detailContent).toggle$1(0, "detail-content-no-wrap");
        helper.setRunning$0();
        helper.appendText$1(0, "Installing packages " + C.JSArray_methods.join$1(t1, ", ") + ".");
        new D.Notification(t3).eventStream$1("onDidDismiss").listen$1(new F._InstallJob_run_closure(this));
        return P.Future_forEach(t1, new F._InstallJob_run_closure0(this, helper)).whenComplete$1(new F._InstallJob_run_closure1(this, helper));
      }, "call$0", "get$run", 0, 0, 5],
      _install$2: function(helper, $name) {
        return new X.ProcessRunner($.$get$atom()._packages.invoke$1("getApmPath"), ["--no-color", "install", $name], null, null, null, new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]), null, P.StreamController_StreamController(null, null, null, null, false, null), P.StreamController_StreamController(null, null, null, null, false, null)).execSimple$0().then$1(new F._InstallJob__install_closure(this, helper, $name));
      }
    },
    _InstallJob_run_closure: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        this.$this.quitRequested = true;
        return true;
      }, null, null, 2, 0, null, 1, "call"]
    },
    _InstallJob_run_closure0: {
      "^": "Closure:3;$this,helper",
      call$1: function($name) {
        return this.$this._install$2(this.helper, $name);
      }
    },
    _InstallJob_run_closure1: {
      "^": "Closure:1;$this,helper",
      call$0: [function() {
        var t1 = this.helper;
        if (this.$this.errorCount === 0) {
          t1.showSuccess$0();
          t1._description.textContent = "Finished.";
        } else {
          t1.showError$0();
          t1._description.textContent = "Errors installing packages.";
        }
      }, null, null, 0, 0, null, "call"]
    },
    _InstallJob__install_closure: {
      "^": "Closure:27;$this,helper,name",
      call$1: [function(result) {
        result.get$stdout();
        if (result.get$stdout().length !== 0)
          this.helper.appendText$1(0, C.JSString_methods.trim$0(result.get$stdout()));
        result.get$stderr();
        if (result.get$stderr().length !== 0)
          this.helper.appendText$2$stderr(0, C.JSString_methods.trim$0(result.get$stderr()), true);
        if (!J.$eq$(result.get$exit(), 0))
          ++this.$this.errorCount;
        else
          K.promiseToFuture($.$get$atom()._packages.invoke$2("activatePackage", this.name));
      }, null, null, 2, 0, null, 3, "call"]
    }
  }], ["atom.statusbar", "package:atom_dartlang/atom_statusbar.dart",, T, {
    "^": "",
    StatusBar: {
      "^": "ProxyHolder;obj",
      addLeftTile$2$item$priority: function(item, priority) {
        var m = P.LinkedHashMap__makeLiteral(["item", item]);
        m.$indexSet(0, "priority", priority);
        return new T.Tile(this.invoke$2("addLeftTile", m));
      }
    },
    Tile: {
      "^": "ProxyHolder;obj"
    }
  }], ["atom.atom_utils", "package:atom_dartlang/atom_utils.dart",, S, {
    "^": "",
    getSystemDescription: function(sdkPath) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, atomVer, os, pluginVer, sdkVer, description;
      var $async$getSystemDescription = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              atomVer = $.$get$atom().invoke$1("getVersion");
              os = $.$get$isMac() === true ? "macos" : J.$index$asx($.$get$process().obj, "platform");
              $async$goto = 3;
              return P._asyncHelper($._package.getPackageVersion$0(), $async$getSystemDescription, $async$completer);
            case 3:
              // returning from await.
              pluginVer = $async$result;
              $async$goto = Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$hasSdk() ? 4 : 6;
              break;
            case 4:
              // then
              $async$goto = 7;
              return P._asyncHelper(Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk().getVersion$0(), $async$getSystemDescription, $async$completer);
            case 7:
              // returning from await.
              // goto join
              $async$goto = 5;
              break;
            case 6:
              // else
              $async$result = null;
            case 5:
              // join
              sdkVer = $async$result;
              description = "\n\nAtom " + H.S(atomVer) + ", dartlang " + H.S(pluginVer);
              if (sdkVer != null)
                description += ", SDK " + H.S(sdkVer);
              description += " running on " + H.S(os) + ".";
              $async$returnValue = description;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$getSystemDescription, $async$completer);
    },
    PermissiveNodeValidator: {
      "^": "Object;",
      allowsElement$1: function(element) {
        return true;
      },
      allowsAttribute$3: function(element, attributeName, value) {
        return true;
      },
      $isNodeValidator: 1
    }
  }], ["", "package:atom_dartlang/dartino/dartino.dart",, A, {
    "^": "",
    _checkDirectory: [function(dir) {
      var t1, t2, t3, t4, settings, pkgsFile;
      t1 = J.getInterceptor$x(dir);
      $.$get$_logger3().fine$1("Checking directory " + H.S(t1.get$path(dir)));
      t2 = $.$get$dartino();
      t3 = t1.get$path(dir);
      t2.toString;
      t4 = $.$get$fs();
      if (t4.invoke$2("existsSync", t4.join$2(0, t3, "dartino.yaml")) === true)
        return;
      if (!$.$get$_checkedDirectories().add$1(0, dir))
        return;
      settings = new E.DartinoProjectSettings(dir, null);
      if (settings.$index(0, "checkDartinoProject") === "false")
        return;
      pkgsFile = new F.File(F._create("File", t4.join$2(0, t1.get$path(dir), ".packages"), null));
      if (pkgsFile.invoke$1("existsSync") === true) {
        if (L.containsDartinoReferences(pkgsFile.invoke$2("readSync", null), t2.get$sdkPath()))
          A._promptCreateDartinoYaml(dir, settings);
        return;
      }
      if (L.ProjectManager_isDartProject(t1.getParent$0(dir)))
        return;
      if (A._hasDartFile(dir, 2))
        A._promptCreateDartinoYaml(dir, settings);
    }, "call$1", "dartino___checkDirectory$closure", 2, 0, 250, 21],
    _hasDartFile: function(dir, depth) {
      var t1, t2, t3, t4, _i, entry, t5;
      for (t1 = dir.getEntriesSync$0(), t2 = t1.length, t3 = depth > 1, t4 = depth - 1, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        entry = t1[_i];
        t5 = J.getInterceptor$x(entry);
        if (t5.isDirectory$0(entry) === true) {
          if (t3 && !J.startsWith$1$s(entry.getPath$0(), "."))
            if (A._hasDartFile(dir, t4))
              return true;
        } else if (t5.isFile$0(entry) === true)
          if (J.endsWith$1$s(entry.getPath$0(), ".dart"))
            return true;
      }
      return false;
    },
    _promptCreateDartinoYaml: function(dir, settings) {
      var t1, t2;
      t1 = {};
      t1.info = null;
      t2 = $.$get$atom()._notifications;
      t1.info = new D.Notification(t2.invoke$3("addWarning", "Is this a Dartino project?", t2._options$5$buttons$description$detail$dismissable$icon([new D.NotificationButton("Yes", new A._promptCreateDartinoYaml_closure(t1, dir)), new D.NotificationButton("No", new A._promptCreateDartinoYaml_closure0(t1, settings))], null, 'This appears to be a Dartino project,\nbut does not contain a "dartino.yaml" file.\n \n' + H.S(J.get$path$x(dir)) + '\n \nCreate a "dartino.yaml" file?\n', true, null)));
    },
    _Dartino: {
      "^": "Object;disposables,enabled",
      get$devicePath: function() {
        var path = $.$get$atom()._config.getValue$1("dartino.devicePath");
        return typeof path === "string" ? C.JSString_methods.trim$0(path) : "";
      },
      get$sdkPath: function() {
        var path = $.$get$atom()._config.getValue$1("dartino.sdkPath");
        return typeof path === "string" ? C.JSString_methods.trim$0(path) : "";
      },
      dispose$0: [function() {
        this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      sdkFor$2$quiet: function(projDir, quiet) {
        var path, t1, sdk;
        path = this.get$sdkPath();
        if (path.length === 0) {
          if (!quiet)
            this.promptSetSdk$1("No SDK specified");
          return;
        }
        t1 = $.$get$fs();
        sdk = new A.DartinoSdk(t1.resolveTilde$1(path));
        sdk = t1.invoke$2("existsSync", sdk.resolvePath$1("bin/dartino")) === true ? sdk : null;
        if (sdk == null) {
          if (!quiet)
            this.promptSetSdk$1("Invalid SDK path specified");
          return;
        }
        return sdk;
      },
      sdkFor$1: function(projDir) {
        return this.sdkFor$2$quiet(projDir, false);
      },
      createNewProject$1: [function(_) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, sdk, projectName, t1, projectPath, t2, editor, view;
        var $async$createNewProject$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                sdk = $async$self.sdkFor$1(null);
                if (sdk == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                projectName = D.Haikunator_haikunate("_", "0123456789", false, 4);
                t1 = $.$get$fs();
                $async$goto = 3;
                return P._asyncHelper(D.promptUser("Enter the path to the project to create:", t1.join$3(0, t1._os.callMethod$1("homedir"), "dartino-projects", projectName), false, true, false), $async$createNewProject$1, $async$completer);
              case 3:
                // returning from await.
                projectPath = $async$result;
                if (projectPath == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 6;
                return P._asyncHelper(new A.DartinoCmd(sdk, ["create", "project", projectPath, "for", "stm32f746g-discovery"], true, "Creating " + H.S(t1.basename$1(projectPath)), null).start$0(0), $async$createNewProject$1, $async$completer);
              case 6:
                // returning from await.
                $async$goto = $async$result === true ? 4 : 5;
                break;
              case 4:
                // then
                t2 = $.$get$atom();
                t2._project.invoke$2("addPath", projectPath);
                $async$goto = 7;
                return P._asyncHelper(t2._workspace.open$1(0, t1.join$2(0, projectPath, "main.dart")), $async$createNewProject$1, $async$completer);
              case 7:
                // returning from await.
                editor = $async$result;
                view = t2._views.invoke$2("getView", editor);
                t2._commands.invoke$4("dispatch", view, "tree-view:reveal-active-file", null);
              case 5:
                // join
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$createNewProject$1, $async$completer);
      }, function() {
        return this.createNewProject$1(null);
      }, "createNewProject$0", "call$1", "call$0", "get$createNewProject", 0, 2, 79, 2],
      openSamples$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, samplesRoot, t1;
        var $async$openSamples$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                samplesRoot = $async$self.sdkFor$1(null);
                samplesRoot = samplesRoot == null ? samplesRoot : samplesRoot.resolvePath$1("samples");
                t1 = $.$get$atom();
                if (C.JSArray_methods.contains$1(P.List_List$from(t1._project.invoke$1("getPaths"), true, null), samplesRoot)) {
                  t1 = t1._notifications;
                  t1.invoke$3("addInfo", "The samples are already open", t1._options$5$buttons$description$detail$dismissable$icon(null, null, samplesRoot, null, null));
                } else
                  t1._project.invoke$2("addPath", samplesRoot);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$openSamples$1, $async$completer);
      }, "call$1", "get$openSamples", 2, 0, 94],
      enable$1: [function(_, _0) {
        var t1, t2;
        t1 = $.$get$atom();
        if (!C.JSArray_methods.contains$1(P.List_List$from(t1._packages.invoke$1("getAvailablePackageNames"), true, null), "dartino"))
          return;
        this.enabled = true;
        $.$get$_logger3().info$1("Dartino features enabled");
        V.SdkManager_minVersion(T.Version_Version$parse("1.16.0"));
        t2 = this.disposables._disposables;
        t2.push(t1._commands.add$3(0, "atom-workspace", "dartino:create-new-project", this.get$createNewProject()));
        t2.push(t1._commands.add$3(0, "atom-workspace", "dartino:open-samples", this.get$openSamples()));
        t2.push(t1._commands.add$3(0, "atom-workspace", "dartino:install-sdk", this.get$promptInstallSdk()));
        t2.push(t1._commands.add$3(0, "atom-workspace", "dartino:sdk-docs", this.get$showSdkDocs()));
        t2.push(t1._commands.add$3(0, "atom-workspace", "dartino:validate-sdk", this.get$validateSdk()));
        Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).get$onNonProject().listen$1(A.dartino___checkDirectory$closure());
        Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).get$onProjectAdd().listen$1(new A._Dartino_enable_closure());
        Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).registerLaunchType$1(new Q.DartinoLaunchType(null, "dartino"));
        P.Future_Future$delayed(P.Duration$(0, 0, 0, 0, 0, 3), new A._Dartino_enable_closure0(this), null);
      }, function($receiver) {
        return this.enable$1($receiver, null);
      }, "enable$0", "call$1", "call$0", "get$enable", 0, 2, 30, 2],
      openSettings$1: [function(_) {
        $.$get$atom()._workspace.openConfigPage$1$packageID("dartino");
      }, function() {
        return this.openSettings$1(null);
      }, "openSettings$0", "call$1", "call$0", "get$openSettings", 0, 2, 14, 2, 1],
      promptSetSdk$2$detail: function(message, detail) {
        var t1 = $.$get$atom()._notifications;
        t1.invoke$3("addError", message, t1._options$5$buttons$description$detail$dismissable$icon([new D.NotificationButton("Install", this.get$promptInstallSdk()), new D.NotificationButton("Open settings", this.get$openSettings())], null, "Click install to install a new SDK or open the settings\nto specify the path to an already existing installation.", null, null));
      },
      promptSetSdk$1: function(message) {
        return this.promptSetSdk$2$detail(message, null);
      },
      promptInstallSdk$1: [function(_) {
        A.DartinoSdk_promptInstall(null);
      }, function() {
        return this.promptInstallSdk$1(null);
      }, "promptInstallSdk$0", "call$1", "call$0", "get$promptInstallSdk", 0, 2, 30, 2, 1],
      showSdkDocs$1: [function(_) {
        var t1, uri, t2;
        t1 = this.sdkFor$1(null);
        if (!(t1 == null)) {
          uri = P._Uri__Uri$file($.$get$fs().join$3(0, t1.sdkRoot, "docs", "index.html"), null);
          t1 = $.$get$shell();
          t2 = uri._text;
          if (t2 == null) {
            t2 = uri._initializeText$0();
            uri._text = t2;
          }
          t1.invoke$2("openExternal", t2);
        }
      }, "call$1", "get$showSdkDocs", 2, 0, 6],
      validateSdk$1: [function(_) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, sdk, version, t1;
        var $async$validateSdk$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = $async$self.get$sdkPath().length !== 0 ? 2 : 3;
                break;
              case 2:
                // then
                sdk = $async$self.sdkFor$1(null);
                $async$goto = sdk != null && true ? 4 : 5;
                break;
              case 4:
                // then
                if (Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$noSdkPathConfigured())
                  Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).setSdkPath$1($.$get$fs().join$3(0, sdk.sdkRoot, "internal", "dart-sdk"));
                else
                  Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).updateRoots$0();
                $async$goto = 6;
                return P._asyncHelper(sdk.get$version(sdk), $async$validateSdk$1, $async$completer);
              case 6:
                // returning from await.
                version = $async$result;
                if (version == null)
                  version = "";
                t1 = $.$get$atom()._notifications;
                t1.invoke$3("addSuccess", "Found Dartino SDK " + H.S(version), t1._options$5$buttons$description$detail$dismissable$icon(null, null, $async$self.get$sdkPath(), null, null));
                sdk.promptOptIntoAnalytics$0();
              case 5:
                // join
              case 3:
                // join
                // implicit return
                return P._asyncHelper(null, 0, $async$completer);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$validateSdk$1, $async$completer);
      }, function() {
        return this.validateSdk$1(null);
      }, "validateSdk$0", "call$1", "call$0", "get$validateSdk", 0, 2, 96, 2],
      $isDisposable: 1
    },
    _Dartino_enable_closure: {
      "^": "Closure:78;",
      call$1: [function(project) {
        return A._checkDirectory(J.get$directory$x(project));
      }, null, null, 2, 0, null, 24, "call"]
    },
    _Dartino_enable_closure0: {
      "^": "Closure:1;$this",
      call$0: function() {
        var t1 = this.$this.sdkFor$2$quiet(null, true);
        if (!(t1 == null))
          t1.promptOptIntoAnalytics$0();
      }
    },
    _promptCreateDartinoYaml_closure: {
      "^": "Closure:1;_box_0,dir",
      call$0: [function() {
        var e, s, exception, t1;
        this._box_0.info.invoke$1("dismiss");
        try {
          $.$get$dartino().toString;
          J.getFile$1$x(this.dir, "dartino.yaml").writeSync$1("# This is an empty configuration file. Currently this is only used as a\n# placeholder to enable the Dartino Atom package.");
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addError", 'Failed to create new "dartino.yaml" file', t1._options$5$buttons$description$detail$dismissable$icon(null, null, H.S(J.get$path$x(this.dir)) + "\n" + H.S(e) + "\n" + H.S(s), true, null));
        }
      }, null, null, 0, 0, null, "call"]
    },
    _promptCreateDartinoYaml_closure0: {
      "^": "Closure:1;_box_0,settings",
      call$0: [function() {
        this._box_0.info.invoke$1("dismiss");
        this.settings.$indexSet(0, "checkDartinoProject", "false");
      }, null, null, 0, 0, null, "call"]
    }
  }], ["", "package:atom_dartlang/dartino/dartino_project_settings.dart",, E, {
    "^": "",
    DartinoProjectSettings: {
      "^": "Object;projectDirectory,_settings",
      $index: function(_, key) {
        var parsed, t1, exception, value;
        t1 = this._settings;
        if (t1 == null)
          try {
            parsed = J.get$value$x(B.loadYamlDocument(new F.File(F._create("File", $.$get$fs().join$4(0, J.get$path$x(this.projectDirectory), ".atom", "dartino", "settings.yaml"), null)).invoke$2("readSync", true), null).contents);
            t1 = !!J.getInterceptor(parsed).$isMap ? parsed : P.LinkedHashMap__makeEmpty();
            this._settings = t1;
          } catch (exception) {
            H.unwrapException(exception);
            t1 = P.LinkedHashMap__makeEmpty();
            this._settings = t1;
          }
        value = J.$index$asx(t1, key);
        return typeof value === "string" ? value : null;
      },
      $indexSet: function(_, key, value) {
        var t1, buf, t2, _i;
        t1 = this.$index(0, key);
        if (t1 == null ? value == null : t1 === value)
          return;
        t1 = this._settings;
        if (value != null)
          J.$indexSet$ax(t1, key, value);
        else
          J.remove$1$ax(t1, key);
        buf = new P.StringBuffer("");
        buf._contents = "# Dartino settings\n";
        for (t1 = J.toList$0$ax(J.get$keys$x(this._settings)), C.JSArray_methods.sort$0(t1), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          buf._contents += H.S(key) + ": " + H.S(J.$index$asx(this._settings, key)) + "\n";
        }
        K.promiseToFuture(new F.File(F._create("File", $.$get$fs().join$4(0, J.get$path$x(this.projectDirectory), ".atom", "dartino", "settings.yaml"), null)).invoke$1("create")).then$1(new E.DartinoProjectSettings_operator$indexSet_closure(this, buf));
      }
    },
    DartinoProjectSettings_operator$indexSet_closure: {
      "^": "Closure:0;$this,buf",
      call$1: [function(_) {
        var t1, t2;
        t1 = F._create("File", $.$get$fs().join$4(0, J.get$path$x(this.$this.projectDirectory), ".atom", "dartino", "settings.yaml"), null);
        t2 = this.buf._contents;
        new F.File(t1).invoke$2("writeSync", t2.charCodeAt(0) == 0 ? t2 : t2);
      }, null, null, 2, 0, null, 1, "call"]
    }
  }], ["", "package:atom_dartlang/dartino/dartino_util.dart",, L, {
    "^": "",
    containsDartinoReferences: function($content, sdkPath) {
      var t1, t2, path, _i;
      if ($content == null || false)
        return false;
      t1 = J.getInterceptor$asx($content);
      if (t1.get$isEmpty($content) === true || sdkPath.length === 0)
        return false;
      t2 = P._Uri__Uri$file(sdkPath, null);
      path = t2._text;
      if (path == null) {
        path = t2._initializeText$0();
        t2._text = path;
      }
      if (!J.startsWith$1$s(path, "file://"))
        return false;
      for (t1 = t1.split$1($content, "\n"), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        if (J.contains$1$asx(t1[_i], path) === true)
          return true;
      return false;
    }
  }], ["", "package:atom_dartlang/dartino/device/dartuino_board.dart",, R, {
    "^": "",
    DartuinoBoard: {
      "^": "Device0;ttyPath",
      launchDartino$2: function(sdk, launch) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, t1;
        var $async$launchDartino$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $.$get$atom()._notifications;
                t1.invoke$3("addError", "Dartino not yet supported on this board", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
                $async$returnValue = false;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$launchDartino$2, $async$completer);
      },
      static: {
        DartuinoBoard_forLaunch: function(sdk, launch) {
          var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, stdout, t1, ttyPath, t2, line;
          var $async$DartuinoBoard_forLaunch = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  $async$goto = $.$get$isMac() === true || $.$get$isLinux() === true ? 3 : 4;
                  break;
                case 3:
                  // then
                  $async$goto = 5;
                  return P._asyncHelper(X.exec("ls", ["-1", "/dev"], null), $async$DartuinoBoard_forLaunch, $async$completer);
                case 5:
                  // returning from await.
                  stdout = $async$result;
                  if (stdout == null) {
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  for (t1 = new P._SyncStarIterator(P.LineSplitter_split(stdout, 0, null)._outerHelper(), null, null, null), ttyPath = null; t1.moveNext$0();) {
                    t2 = t1._nestedIterator;
                    line = t2 == null ? t1._async$_current : t2.get$current();
                    t2 = J.getInterceptor$s(line);
                    if (t2.startsWith$1(line, "tty.usb") || t2.startsWith$1(line, "ttyUSB"))
                      ttyPath = "/dev/" + H.S(line);
                  }
                  if (ttyPath != null) {
                    $async$returnValue = new R.DartuinoBoard(ttyPath);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                case 4:
                  // join
                  // goto return
                  $async$goto = 1;
                  break;
                case 1:
                  // return
                  return P._asyncHelper($async$returnValue, 0, $async$completer);
                case 2:
                  // rethrow
                  return P._asyncHelper($async$currentError, 1, $async$completer);
              }
          });
          return P._asyncHelper(null, $async$DartuinoBoard_forLaunch, $async$completer);
        }
      }
    }
  }], ["", "package:atom_dartlang/dartino/device/device.dart",, Z, {
    "^": "",
    Device_forLaunch: function(sdk, launch) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, t1, device, t2, t3;
      var $async$Device_forLaunch = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$dartino();
              if (t1.get$devicePath() === "local") {
                $async$returnValue = F.LocalDevice_forLaunch(sdk, launch);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return P._asyncHelper(X.Stm32f_forLaunch(sdk, launch), $async$Device_forLaunch, $async$completer);
            case 3:
              // returning from await.
              device = $async$result;
              $async$goto = device == null ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return P._asyncHelper(R.DartuinoBoard_forLaunch(sdk, launch), $async$Device_forLaunch, $async$completer);
            case 6:
              // returning from await.
              device = $async$result;
            case 5:
              // join
              if (device == null)
                if (t1.get$devicePath().length === 0) {
                  t2 = $.$get$atom()._notifications;
                  t2.invoke$3("addError", "No connected devices found.", t2._options$5$buttons$description$detail$dismissable$icon([new D.NotificationButton("Open settings", t1.get$openSettings())], null, "Please connect the device and try again.\n \nIf the device is already connected, please set the device\npath in Settings > Packages > dartino > Device Path,\nand/or disconnect and reconnect the device.", null, null));
                } else {
                  t2 = $.$get$atom()._notifications;
                  t3 = "Could not find specified device:\n" + t1.get$devicePath() + "\n \nPlease connect the device and try again\nor change/remove the device path in\nSettings > Packages > dartino > Device Path";
                  t2.invoke$3("addError", "Device not found", t2._options$5$buttons$description$detail$dismissable$icon([new D.NotificationButton("Open settings", t1.get$openSettings())], null, t3, null, null));
                }
              $async$returnValue = device;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$Device_forLaunch, $async$completer);
    },
    Device0: {
      "^": "Object;"
    }
  }], ["", "package:atom_dartlang/dartino/device/local_device.dart",, F, {
    "^": "",
    LocalDevice: {
      "^": "Device0;",
      launchDartino$2: function(sdk, launch) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, t1;
        var $async$launchDartino$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncHelper(launch.debug$2(sdk, null), $async$launchDartino$2, $async$completer);
              case 3:
                // returning from await.
                if ($async$result !== true) {
                  t1 = $.$get$atom()._notifications;
                  t1.invoke$3("addError", "Failed to start debug session", t1._options$5$buttons$description$detail$dismissable$icon(null, null, "Failed to start debug session on local machine.\n" + H.S(launch.launchConfiguration.get$primaryResource()) + "\nSee console for more.", null, null));
                  $async$returnValue = false;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$returnValue = true;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$launchDartino$2, $async$completer);
      },
      static: {
        LocalDevice_forLaunch: function(sdk, launch) {
          var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError;
          var $async$LocalDevice_forLaunch = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  $async$returnValue = new F.LocalDevice();
                  // goto return
                  $async$goto = 1;
                  break;
                case 1:
                  // return
                  return P._asyncHelper($async$returnValue, 0, $async$completer);
                case 2:
                  // rethrow
                  return P._asyncHelper($async$currentError, 1, $async$completer);
              }
          });
          return P._asyncHelper(null, $async$LocalDevice_forLaunch, $async$completer);
        }
      }
    }
  }], ["", "package:atom_dartlang/dartino/device/stm32f.dart",, X, {
    "^": "",
    Stm32f: {
      "^": "Device0;ttyPath,mediaPath",
      launchDartino$2: function(sdk, launch) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, debug, args, t2, $async$temp1;
        var $async$launchDartino$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if ($.$get$isWindows() === true) {
                  t1 = $.$get$atom()._notifications;
                  t1.invoke$3("addError", "Platform not supported", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
                  $async$returnValue = false;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = launch.launchConfiguration;
                debug = t1.get$typeArgs().$index(0, "debug");
                if (typeof debug !== "boolean")
                  debug = false;
                args = ["flash", t1.get$primaryResource()];
                t2 = debug === true;
                if (t2)
                  C.JSArray_methods.insert$2(args, 1, "--debugging-mode");
                $async$temp1 = J;
                $async$goto = 3;
                return P._asyncHelper(launch.run$4$args$isLast$message(sdk.resolvePath$1("bin/dartino"), args, !t2, "Compile and deploy to connected device ..."), $async$launchDartino$2, $async$completer);
              case 3:
                // returning from await.
                if (!$async$temp1.$eq$($async$result, 0)) {
                  t2 = $.$get$atom()._notifications;
                  t2.invoke$3("addError", "Failed to deploy application", t2._options$5$buttons$description$detail$dismissable$icon(null, null, "Failed to deploy to device.\n" + H.S(t1.get$primaryResource()) + "\nSee console for more.", null, null));
                  launch.launchTerminated$2$quiet(1, true);
                  $async$returnValue = false;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$temp1 = t2;
                if ($async$temp1) {
                  // goto then
                  $async$goto = 4;
                  break;
                } else
                  $async$result = $async$temp1;
                // goto join
                $async$goto = 5;
                break;
              case 4:
                // then
                $async$goto = 6;
                return P._asyncHelper(launch.debug$2(sdk, $async$self.ttyPath), $async$launchDartino$2, $async$completer);
              case 6:
                // returning from await.
                $async$result = $async$result !== true;
              case 5:
                // join
                if ($async$result) {
                  t2 = $.$get$atom()._notifications;
                  t2.invoke$3("addError", "Failed to start debug session", t2._options$5$buttons$description$detail$dismissable$icon(null, null, "Failed to start debug session on device.\n" + H.S(t1.get$primaryResource()) + "\nSee console for more.", null, null));
                  $async$returnValue = false;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$returnValue = true;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$launchDartino$2, $async$completer);
      },
      static: {
        Stm32f_forLaunch: function(sdk, launch) {
          var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, stdout, ttyPath, t1, t2, line, mediaPath, _i, mediaName, t3;
          var $async$Stm32f_forLaunch = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  $async$goto = $.$get$isMac() === true || $.$get$isLinux() === true ? 3 : 5;
                  break;
                case 3:
                  // then
                  $async$goto = 6;
                  return P._asyncHelper(X.exec("ls", ["-1", "/dev"], null), $async$Stm32f_forLaunch, $async$completer);
                case 6:
                  // returning from await.
                  stdout = $async$result;
                  if (stdout == null) {
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t1 = new P._SyncStarIterator(P.LineSplitter_split(stdout, 0, null)._outerHelper(), null, null, null);
                  while (true) {
                    if (!t1.moveNext$0()) {
                      ttyPath = null;
                      break;
                    }
                    t2 = t1._nestedIterator;
                    line = t2 == null ? t1._async$_current : t2.get$current();
                    t2 = J.getInterceptor$s(line);
                    if (t2.startsWith$1(line, "tty.usb") || t2.startsWith$1(line, "ttyACM")) {
                      ttyPath = "/dev/" + H.S(line);
                      break;
                    }
                  }
                  // goto join
                  $async$goto = 4;
                  break;
                case 5:
                  // else
                  ttyPath = null;
                case 4:
                  // join
                  t1 = H.setRuntimeTypeInfo(["DIS_F746NG", "NODE_F411RE"], [P.String]), mediaPath = null, _i = 0;
                case 7:
                  // for condition
                  if (!(_i < 2)) {
                    // goto after for
                    $async$goto = 9;
                    break;
                  }
                  mediaName = t1[_i];
                  if ($.$get$isMac() === true)
                    mediaPath = "/Volumes/" + mediaName;
                  $async$goto = $.$get$isLinux() === true ? 10 : 11;
                  break;
                case 10:
                  // then
                  $async$goto = 12;
                  return P._asyncHelper(X.exec("df", null, null), $async$Stm32f_forLaunch, $async$completer);
                case 12:
                  // returning from await.
                  stdout = $async$result;
                  if (stdout == null) {
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  for (t2 = new P._SyncStarIterator(P.LineSplitter_split(stdout, 0, null)._outerHelper(), null, null, null); t2.moveNext$0();) {
                    t3 = t2._nestedIterator;
                    line = t3 == null ? t2._async$_current : t3.get$current();
                    t3 = J.getInterceptor$s(line);
                    if (t3.endsWith$1(line, "/" + mediaName)) {
                      mediaPath = t3.substring$1(line, J.$add$ns(t3.lastIndexOf$1(line, " /"), 1));
                      break;
                    }
                  }
                case 11:
                  // join
                  if (mediaPath == null) {
                    t2 = $.$get$fs();
                    t2 = t2.invoke$2("existsSync", H.S(mediaPath) + "/MBED.HTM") !== true || t2.invoke$2("existsSync", H.S(mediaPath) + "/mbed.htm") !== true;
                  } else
                    t2 = true;
                  if (t2) {
                    $async$returnValue = new X.Stm32f(ttyPath, mediaPath);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                case 8:
                  // for update
                  ++_i;
                  // goto for condition
                  $async$goto = 7;
                  break;
                case 9:
                  // after for
                  // goto return
                  $async$goto = 1;
                  break;
                case 1:
                  // return
                  return P._asyncHelper($async$returnValue, 0, $async$completer);
                case 2:
                  // rethrow
                  return P._asyncHelper($async$currentError, 1, $async$completer);
              }
          });
          return P._asyncHelper(null, $async$Stm32f_forLaunch, $async$completer);
        }
      }
    }
  }], ["", "package:atom_dartlang/dartino/launch_dartino.dart",, Q, {
    "^": "",
    DartinoLaunchType: {
      "^": "LaunchType;_lastLaunch,type",
      canLaunch$2: function(path, data) {
        var project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
        if (project == null || project.isDartinoProject$0() !== true)
          return false;
        return data.get$hasMain();
      },
      performLaunch$2: function(manager, configuration) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, path, project, sdk, t1, t2, t3, t4;
        var $async$performLaunch$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                path = configuration.get$primaryResource();
                project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
                if (project == null || project.isDartinoProject$0() !== true)
                  throw H.wrapException("File not in a Dartino project.");
                sdk = $.$get$dartino().sdkFor$1(J.get$directory$x(project));
                if (sdk == null)
                  throw H.wrapException("No SDK found for " + H.S(project));
                $async$goto = 3;
                return P._asyncHelper($async$self._killLastLaunch$0(), $async$performLaunch$2, $async$completer);
              case 3:
                // returning from await.
                t1 = configuration.get$shortResourceName();
                t2 = $.Launch__id + 1;
                $.Launch__id = t2;
                t3 = [null];
                t4 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t3);
                t4._utils$_value = null;
                t3 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t3);
                t3._utils$_value = null;
                t3 = new Q.DartinoLaunch(null, null, $async$self, configuration, t1, null, null, manager, t2, null, null, t4, t3, P.StreamController_StreamController$broadcast(null, null, false, null), null, null);
                $async$self._lastLaunch = t3;
                manager.addLaunch$1(t3);
                sdk.launch$1($async$self._lastLaunch);
                $async$returnValue = $async$self._lastLaunch;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$performLaunch$2, $async$completer);
      },
      getDefaultConfigText$0: function() {
        return "";
      },
      _killLastLaunch$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1;
        var $async$_killLastLaunch$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._lastLaunch;
                $async$goto = t1 != null ? 2 : 3;
                break;
              case 2:
                // then
                $async$goto = 4;
                return P._asyncHelper(t1.kill$0(), $async$_killLastLaunch$0, $async$completer);
              case 4:
                // returning from await.
                $async$self._lastLaunch = null;
              case 3:
                // join
                // implicit return
                return P._asyncHelper(null, 0, $async$completer);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_killLastLaunch$0, $async$completer);
      }
    },
    DartinoLaunch: {
      "^": "Launch;runner,sdk<,launchType,launchConfiguration,name,title,targetName,manager,id,killHandler,cwd,exitCode,servicePort,_stdio,_debugConnection,_pathResolver",
      canKill$0: function() {
        return true;
      },
      kill$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1;
        var $async$kill$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.sdk;
                $async$goto = t1 != null ? 2 : 3;
                break;
              case 2:
                // then
                $async$goto = 4;
                return P._asyncHelper(t1.execBin$2("dartino", ["quit"])._exitCompleter.future, $async$kill$0, $async$completer);
              case 4:
                // returning from await.
                $async$self.sdk = null;
              case 3:
                // join
                t1 = $async$self.runner;
                $async$goto = t1 != null ? 5 : 6;
                break;
              case 5:
                // then
                $async$goto = 7;
                return P._asyncHelper(t1.kill$0(), $async$kill$0, $async$completer);
              case 7:
                // returning from await.
                $async$self.runner = null;
              case 6:
                // join
                // implicit return
                return P._asyncHelper(null, 0, $async$completer);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$kill$0, $async$completer);
      },
      run$7$args$cwd$isLast$message$onStdout$subtle: function(command, args, cwd, isLast, message, onStdout, subtle) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, result, e, s, t1, t2, t3, exception, $async$exception;
        var $async$run$7$args$cwd$isLast$message$onStdout$subtle = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (message != null) {
                  t1 = message + "\n";
                  t2 = $async$self._stdio;
                  if (!t2.get$_mayAddEvent())
                    H.throwExpression(t2._addEventError$0());
                  t2._sendData$1(new X.TextFragment(t1, false, false, false));
                }
                if (cwd != null) {
                  t1 = "$ cd " + H.S(cwd) + "\n";
                  t2 = $async$self._stdio;
                  if (!t2.get$_mayAddEvent())
                    H.throwExpression(t2._addEventError$0());
                  t2._sendData$1(new X.TextFragment(t1, false, false, true));
                }
                t1 = "$ " + H.S(command) + " " + (args && C.JSArray_methods).join$1(args, " ") + "\n";
                t2 = $async$self._stdio;
                if (!t2.get$_mayAddEvent())
                  H.throwExpression(t2._addEventError$0());
                t2._sendData$1(new X.TextFragment(t1, false, false, true));
                t1 = $.Zone__current;
                t3 = P.StreamController_StreamController(null, null, null, null, false, null);
                $async$self.runner = new X.ProcessRunner(command, args, cwd, null, null, new P._AsyncCompleter(new P._Future(0, t1, null, [null]), [null]), null, t3, P.StreamController_StreamController(null, null, null, null, false, null));
                t1 = onStdout == null ? new Q.DartinoLaunch_run_closure($async$self, false) : onStdout;
                new P._ControllerStream(t3, [H.getTypeArgumentByIndex(t3, 0)]).listen$1(t1);
                t1 = $async$self.runner._stderrController;
                new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new Q.DartinoLaunch_run_closure0($async$self));
                result = null;
                $async$handler = 4;
                t1 = $.$get$_logger28();
                t1.fine$1("launch: " + H.S(command) + " " + H.S(args));
                $async$goto = 7;
                return P._asyncHelper($async$self.runner.execStreaming$0(), $async$run$7$args$cwd$isLast$message$onStdout$subtle, $async$completer);
              case 7:
                // returning from await.
                result = $async$result;
                t1.fine$1("external process exited: " + H.S(result));
                $async$handler = 2;
                // goto after finally
                $async$goto = 6;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception = $async$currentError;
                t1 = H.unwrapException($async$exception);
                e = t1;
                s = H.getTraceFromException($async$exception);
                $.$get$_logger28().info$3("external process exception", e, s);
                result = 183;
                // goto after finally
                $async$goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 6:
                // after finally
                $async$self.runner = null;
                if (!J.$eq$(result, 0)) {
                  t1 = "Process terminated with exitCode: " + H.S(result) + "\n";
                  if (!t2.get$_mayAddEvent())
                    H.throwExpression(t2._addEventError$0());
                  t2._sendData$1(new X.TextFragment(t1, true, false, false));
                }
                if (!J.$eq$(result, 0) || isLast)
                  $async$self.launchTerminated$2$quiet(result, true);
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$run$7$args$cwd$isLast$message$onStdout$subtle, $async$completer);
      },
      run$4$args$isLast$message: function(command, args, isLast, message) {
        return this.run$7$args$cwd$isLast$message$onStdout$subtle(command, args, null, isLast, message, null, false);
      },
      run$6$args$cwd$isLast$message$onStdout: function(command, args, cwd, isLast, message, onStdout) {
        return this.run$7$args$cwd$isLast$message$onStdout$subtle(command, args, cwd, isLast, message, onStdout, false);
      },
      run$1: function(command) {
        return this.run$7$args$cwd$isLast$message$onStdout$subtle(command, null, null, true, null, null, false);
      },
      debug$2: [function(sdk, ttyPath) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, command, t1, args, t2, t3, t4, observatoryPort;
        var $async$debug$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                command = sdk.resolvePath$1("bin/dartino");
                t1 = $async$self.launchConfiguration;
                args = ["debug", "serve", t1.get$primaryResource()];
                if (ttyPath != null)
                  C.JSArray_methods.addAll$1(args, ["on", "tty", ttyPath]);
                t2 = $async$self._stdio;
                if (!t2.get$_mayAddEvent())
                  H.throwExpression(t2._addEventError$0());
                t2._sendData$1(new X.TextFragment("Starting debug session...\n", false, false, false));
                t3 = "$ " + H.S(command) + " " + C.JSArray_methods.join$1(args, " ") + "\n";
                if (!t2.get$_mayAddEvent())
                  H.throwExpression(t2._addEventError$0());
                t2._sendData$1(new X.TextFragment(t3, false, false, true));
                t1 = t1.get$projectPath();
                t3 = $.Zone__current;
                t4 = P.StreamController_StreamController(null, null, null, null, false, null);
                $async$self.runner = new X.ProcessRunner(command, args, t1, null, null, new P._AsyncCompleter(new P._Future(0, t3, null, [null]), [null]), null, t4, P.StreamController_StreamController(null, null, null, null, false, null));
                t3 = P.$int;
                t1 = new P._Future(0, $.Zone__current, null, [t3]);
                new P._ControllerStream(t4, [H.getTypeArgumentByIndex(t4, 0)]).listen$1(new Q.DartinoLaunch_debug_closure($async$self, new P._AsyncCompleter(t1, [t3])));
                t3 = $async$self.runner._stderrController;
                new P._ControllerStream(t3, [H.getTypeArgumentByIndex(t3, 0)]).listen$1(new Q.DartinoLaunch_debug_closure0($async$self));
                $async$self.runner.execStreaming$0().then$1(new Q.DartinoLaunch_debug_closure1($async$self));
                $async$self.sdk = sdk;
                $async$goto = 3;
                return P._asyncHelper(t1, $async$debug$2, $async$completer);
              case 3:
                // returning from await.
                observatoryPort = $async$result;
                if (observatoryPort == null) {
                  if (!t2.get$_mayAddEvent())
                    H.throwExpression(t2._addEventError$0());
                  t2._sendData$1(new X.TextFragment("Failed to determine observatory port\n", true, false, false));
                  $async$self.launchTerminated$2$quiet(1, true);
                  $async$returnValue = false;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if (!t2.get$_mayAddEvent())
                  H.throwExpression(t2._addEventError$0());
                t2._sendData$1(new X.TextFragment("Connecting observatory to application on device...\n", false, false, false));
                $async$goto = 4;
                return P._asyncHelper(D.ObservatoryDebugger_connect($async$self, "localhost", observatoryPort, false, null).then$1(new Q.DartinoLaunch_debug_closure2($async$self, observatoryPort)).catchError$1(new Q.DartinoLaunch_debug_closure3($async$self, observatoryPort)), $async$debug$2, $async$completer);
              case 4:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$debug$2, $async$completer);
      }, function(sdk) {
        return this.debug$2(sdk, null);
      }, "debug$1", "call$2", "call$1", "get$debug", 2, 2, 98, 2],
      $isDisposable: 1
    },
    DartinoLaunch_run_closure: {
      "^": "Closure:0;$this,subtle",
      call$1: [function(str) {
        var t1 = this.$this._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, false, this.subtle, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    DartinoLaunch_run_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(str) {
        var t1, t2;
        t1 = "\n" + H.S(str) + "\n";
        t2 = this.$this._stdio;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(new X.TextFragment(t1, true, false, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    DartinoLaunch_debug_closure: {
      "^": "Closure:0;$this,portCompleter",
      call$1: [function(str) {
        var t1, t2, exception;
        t1 = this.$this._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, false, true, false));
        t2 = J.getInterceptor$s(str);
        if (t2.startsWith$1(str, "localhost:"))
          try {
            this.portCompleter.complete$1(0, H.Primitives_parseInt(C.JSString_methods.trim$0(t2.substring$1(str, 10)), null, null));
          } catch (exception) {
            H.unwrapException(exception);
            t2 = 'Failed to parse observatory port from "' + H.S(str) + '"\n';
            if (!t1.get$_mayAddEvent())
              H.throwExpression(t1._addEventError$0());
            t1._sendData$1(new X.TextFragment(t2, true, false, false));
            this.portCompleter.complete$1(0, null);
          }
      }, null, null, 2, 0, null, 4, "call"]
    },
    DartinoLaunch_debug_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(str) {
        var t1, t2;
        t1 = "\n" + H.S(str) + "\n";
        t2 = this.$this._stdio;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(new X.TextFragment(t1, true, false, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    DartinoLaunch_debug_closure1: {
      "^": "Closure:19;$this",
      call$1: [function(exitCode) {
        var t1, t2, t3;
        t1 = this.$this;
        t2 = "debug session exit code is " + H.S(exitCode) + "\n";
        t3 = t1._stdio;
        if (!t3.get$_mayAddEvent())
          H.throwExpression(t3._addEventError$0());
        t3._sendData$1(new X.TextFragment(t2, false, false, true));
        t1.launchTerminated$2$quiet(exitCode, true);
      }, null, null, 2, 0, null, 33, "call"]
    },
    DartinoLaunch_debug_closure2: {
      "^": "Closure:31;$this,observatoryPort",
      call$1: [function($debugger) {
        this.$this.servicePort.set$value(0, this.observatoryPort);
        return true;
      }, null, null, 2, 0, null, 91, "call"]
    },
    DartinoLaunch_debug_closure3: {
      "^": "Closure:4;$this,observatoryPort",
      call$2: [function(e, s) {
        var t1, t2, t3;
        t1 = this.$this;
        t2 = "Failed to connect to observatory on port " + H.S(this.observatoryPort) + "\n" + H.S(e) + "\n" + H.S(s) + "\n";
        t3 = t1._stdio;
        if (!t3.get$_mayAddEvent())
          H.throwExpression(t3._addEventError$0());
        t3._sendData$1(new X.TextFragment(t2, true, false, false));
        t1.launchTerminated$2$quiet(1, true);
        return false;
      }, null, null, 4, 0, null, 0, 19, "call"]
    }
  }], ["", "package:atom_dartlang/dartino/sdk/dartino_sdk.dart",, A, {
    "^": "",
    _downloadSdkZip: function() {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, zipName, t1, dirPath, dir, url, t2, t3, result, sdkPath;
      var $async$_downloadSdkZip = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              zipName = $.$get$isMac() === true ? "dartino-sdk-macos-x64-release.zip" : null;
              if ($.$get$isLinux() === true)
                zipName = "dartino-sdk-linux-x64-release.zip";
              t1 = $.$get$fs();
              dirPath = t1.join$2(0, t1._os.callMethod$1("tmpdir"), "dartino-download");
              dir = new F.Directory(F._create("Directory", dirPath, null));
              $async$goto = dir.invoke$1("existsSync") !== true ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return P._asyncHelper(K.promiseToFuture(dir.invoke$2("create", null)), $async$_downloadSdkZip, $async$completer);
            case 5:
              // returning from await.
            case 4:
              // join
              $async$goto = new F.File(F._create("File", t1.join$2(0, dirPath, zipName), null)).invoke$1("existsSync") !== true ? 6 : 7;
              break;
            case 6:
              // then
              url = "http://gsdview.appspot.com/dartino-archive/channels/dev/release/latest/sdk/" + H.S(zipName);
              t2 = $.$get$atom();
              t3 = t2._notifications;
              t3 = t3.invoke$3("addInfo", "Downloading " + H.S(zipName), t3._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
              $async$goto = 8;
              return P._asyncHelper(new X.ProcessRunner("curl", ["-s", "-L", "-O", url], dirPath, null, null, new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]), null, P.StreamController_StreamController(null, null, null, null, false, null), P.StreamController_StreamController(null, null, null, null, false, null)).execSimple$0(), $async$_downloadSdkZip, $async$completer);
            case 8:
              // returning from await.
              result = $async$result;
              new D.Notification(t3).invoke$1("dismiss");
              if (!J.$eq$(result.get$exit(), 0)) {
                t1 = t2._notifications;
                t1.invoke$3("addError", "Failed to download " + H.S(zipName), t1._options$5$buttons$description$detail$dismissable$icon(null, null, "exitCode: " + H.S(result.get$exit()) + "\n" + result.get$stderr() + "\n" + result.get$stdout(), null, null));
                // goto return
                $async$goto = 1;
                break;
              }
            case 7:
              // join
              sdkPath = t1.join$2(0, dirPath, "dartino-sdk");
              $async$goto = new F.Directory(F._create("Directory", sdkPath, null)).invoke$1("existsSync") !== true ? 9 : 10;
              break;
            case 9:
              // then
              $async$goto = 11;
              return P._asyncHelper(new X.ProcessRunner("unzip", ["-q", zipName], dirPath, null, null, new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]), null, P.StreamController_StreamController(null, null, null, null, false, null), P.StreamController_StreamController(null, null, null, null, false, null)).execSimple$0(), $async$_downloadSdkZip, $async$completer);
            case 11:
              // returning from await.
              result = $async$result;
              if (!J.$eq$(result.get$exit(), 0)) {
                t1 = $.$get$atom()._notifications;
                t1.invoke$3("addError", "Failed to unzip " + H.S(zipName), t1._options$5$buttons$description$detail$dismissable$icon(null, null, "exitCode: " + H.S(result.get$exit()) + "\n" + result.get$stderr() + "\n" + result.get$stdout(), null, null));
                // goto return
                $async$goto = 1;
                break;
              }
            case 10:
              // join
              $async$returnValue = sdkPath;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$_downloadSdkZip, $async$completer);
    },
    _installAdditionalTools: function(sdk, launch) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, path, t1, t2, helper, exitCode;
      var $async$_installAdditionalTools = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              path = sdk.resolvePath$1("tools/gcc-arm-embedded/bin/arm-none-eabi-gcc");
              if (path != null && $.$get$fs().invoke$2("existsSync", path) === true) {
                $async$returnValue = true;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $.$get$atom();
              t2 = t1._notifications;
              t2 = t2.invoke$3("addInfo", "Downloading Tools...", t2._options$5$buttons$description$detail$dismissable$icon(null, null, "See console for more detail...", true, null));
              helper = D.NotificationHelper$(t1._views.invoke$2("getView", t2));
              helper.setRunning$0();
              t2 = sdk.sdkRoot;
              $async$goto = 3;
              return P._asyncHelper(launch.run$6$args$cwd$isLast$message$onStdout(sdk.resolvePath$1("bin/dartino"), ["x-download-tools"], t2, false, "Downloading additional tools into " + H.S(t2) + " ...", new A._installAdditionalTools_closure(launch)), $async$_installAdditionalTools, $async$completer);
            case 3:
              // returning from await.
              exitCode = $async$result;
              if (!J.$eq$(exitCode, 0)) {
                helper.showError$0();
                helper.appendText$1(0, "\nexitCode : " + H.S(exitCode));
                $async$returnValue = false;
                // goto return
                $async$goto = 1;
                break;
              }
              helper.showSuccess$0();
              helper.appendText$1(0, "\nDownload complete");
              t1 = launch._stdio;
              if (!t1.get$_mayAddEvent())
                H.throwExpression(t1._addEventError$0());
              t1._sendData$1(new X.TextFragment("Download complete\n", false, false, false));
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$_installAdditionalTools, $async$completer);
    },
    _validateLocalSettingsFile: function(sdk, launch) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], path, file, $content, json, pkgsUri, pkgsPath, e, s, t1, t2, exception, $async$exception;
      var $async$_validateLocalSettingsFile = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              t1 = $.$get$fs();
              path = t1.join$2(0, t1._os.callMethod$1("homedir"), "local.dartino-settings");
              if (t1.invoke$2("existsSync", path) !== true) {
                // goto return
                $async$goto = 1;
                break;
              }
              file = new F.File(F._create("File", path, null));
              $async$goto = 7;
              return P._asyncHelper(H.subtypeCast(K.promiseToFuture(file.invoke$2("read", null)), "$isFuture", [P.String], "$asFuture"), $async$_validateLocalSettingsFile, $async$completer);
            case 7:
              // returning from await.
              $content = $async$result;
              json = C.JsonCodec_null_null.decode$1($content);
              pkgsUri = J.$index$asx(json, "packages");
              if (pkgsUri == null || !J.startsWith$1$s(pkgsUri, "file://")) {
                // goto return
                $async$goto = 1;
                break;
              }
              pkgsPath = J.substring$1$s(pkgsUri, 7);
              if (t1.invoke$2("existsSync", pkgsPath) !== true) {
                t1 = "WARNING: the dartino settings file: " + H.S(path) + "\nreferences non-existing packages files: " + H.S(pkgsPath) + "\nEither fix the path in the file or delete the file to have it recreated\n";
                t2 = launch._stdio;
                if (!t2.get$_mayAddEvent())
                  H.throwExpression(t2._addEventError$0());
                t2._sendData$1(new X.TextFragment(t1, true, false, false));
                // goto return
                $async$goto = 1;
                break;
              }
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = H.unwrapException($async$exception);
              e = t1;
              s = H.getTraceFromException($async$exception);
              N.Logger_Logger("DartinoSdk").info$3("validate local settings exception", e, s);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$_validateLocalSettingsFile, $async$completer);
    },
    DartinoSdk: {
      "^": "Sdk0;sdkRoot",
      get$name: function(_) {
        return "Dartino SDK";
      },
      get$version: function(_) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, t1, exception, $async$exception;
        var $async$get$version = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$handler = 4;
                $async$goto = 7;
                return P._asyncHelper(X.exec($async$self.resolvePath$1("bin/dartino"), ["--version"], null), $async$get$version, $async$completer);
              case 7:
                // returning from await.
                t1 = $async$result;
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
                $async$handler = 2;
                // goto after finally
                $async$goto = 6;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception = $async$currentError;
                H.unwrapException($async$exception);
                // goto return
                $async$goto = 1;
                break;
                // goto after finally
                $async$goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 6:
                // after finally
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$get$version, $async$completer);
      },
      launch$1: [function(launch) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, device;
        var $async$launch$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncHelper(A._installAdditionalTools($async$self, launch), $async$launch$1, $async$completer);
              case 3:
                // returning from await.
                if ($async$result !== true) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                A._validateLocalSettingsFile($async$self, launch);
                $async$goto = 4;
                return P._asyncHelper(Z.Device_forLaunch($async$self, launch), $async$launch$1, $async$completer);
              case 4:
                // returning from await.
                device = $async$result;
                if (device == null) {
                  launch.launchTerminated$2$quiet(-1, true);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                device.launchDartino$2($async$self, launch);
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$launch$1, $async$completer);
      }, "call$1", "get$launch", 2, 0, 100],
      packageRoot$1: function(projDir) {
        var t1, localSpecFile;
        if (projDir == null)
          return;
        t1 = $.$get$fs();
        localSpecFile = t1.join$2(0, projDir, ".packages");
        if (t1.invoke$2("existsSync", localSpecFile) === true)
          return localSpecFile;
        return this.resolvePath$1("internal/dartino-sdk.packages");
      },
      promptOptIntoAnalytics$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, result, t2, t3;
        var $async$promptOptIntoAnalytics$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                if ($._promptOptIntoAnalyticsStarted) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 3;
                return P._asyncHelper($async$self.execBin$3$startProcess("dartino", ["x-should-prompt-analytics"], false).execSimple$0(), $async$promptOptIntoAnalytics$0, $async$completer);
              case 3:
                // returning from await.
                result = $async$result;
                if (J.$eq$(result.get$exit(), 0)) {
                  t2 = result.get$stdout();
                  t2 = C.JSString_methods.trim$0(t2) !== "true";
                } else
                  t2 = true;
                if (t2) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $._promptOptIntoAnalyticsStarted = true;
                t1.notification = null;
                t2 = new A.DartinoSdk_promptOptIntoAnalytics_recordChoice(t1, $async$self);
                t3 = $.$get$atom()._notifications;
                t1.notification = new D.Notification(t3.invoke$3("addInfo", "Welcome to Dartino! We collect anonymous usage statistics and crash reports in order to improve the tool (see http://goo.gl/27JjhU for details).\n \nWould you like to opt-in to help us improve Dartino?", t3._options$5$buttons$description$detail$dismissable$icon([new D.NotificationButton("Yes", new A.DartinoSdk_promptOptIntoAnalytics_optIn(t2)), new D.NotificationButton("No", new A.DartinoSdk_promptOptIntoAnalytics_optOut(t2))], null, null, true, null)));
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$promptOptIntoAnalytics$0, $async$completer);
      },
      static: {
        DartinoSdk_promptInstall: function(_) {
          var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, t1, download, path, tmpSdkDir, result;
          var $async$DartinoSdk_promptInstall = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  if ($.$get$isWindows() === true) {
                    t1 = $.$get$atom()._notifications;
                    t1.invoke$3("addError", "Windows not supported yet", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  download = A._downloadSdkZip();
                  $async$goto = 3;
                  return P._asyncHelper(E.Sdk_promptInstallPath("Dartino SDK", "dartino-sdk"), $async$DartinoSdk_promptInstall, $async$completer);
                case 3:
                  // returning from await.
                  path = $async$result;
                  $async$goto = 4;
                  return P._asyncHelper(download, $async$DartinoSdk_promptInstall, $async$completer);
                case 4:
                  // returning from await.
                  tmpSdkDir = $async$result;
                  if (tmpSdkDir == null) {
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  $async$goto = path != null ? 5 : 6;
                  break;
                case 5:
                  // then
                  $async$goto = 7;
                  return P._asyncHelper(new X.ProcessRunner("mv", [tmpSdkDir, path], null, null, null, new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]), null, P.StreamController_StreamController(null, null, null, null, false, null), P.StreamController_StreamController(null, null, null, null, false, null)).execSimple$0(), $async$DartinoSdk_promptInstall, $async$completer);
                case 7:
                  // returning from await.
                  result = $async$result;
                  if (!J.$eq$(result.get$exit(), 0)) {
                    t1 = $.$get$atom()._notifications;
                    t1.invoke$3("addError", "Failed to install Dartino SDK", t1._options$5$buttons$description$detail$dismissable$icon(null, null, "exitCode: " + H.S(result.get$exit()) + "\n" + result.get$stderr() + "\n" + result.get$stdout(), null, null));
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t1 = $.$get$atom();
                  t1._config.invoke$3("set", "dartino.dartinoPath", path);
                  t1 = t1._notifications;
                  t1.invoke$3("addSuccess", "Dartino SDK installed", t1._options$5$buttons$description$detail$dismissable$icon(null, null, path, null, null));
                case 6:
                  // join
                  new X.ProcessRunner("rm", ["-r", $.$get$fs().dirname$1(tmpSdkDir)], null, null, null, new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]), null, P.StreamController_StreamController(null, null, null, null, false, null), P.StreamController_StreamController(null, null, null, null, false, null)).execSimple$0();
                case 1:
                  // return
                  return P._asyncHelper($async$returnValue, 0, $async$completer);
                case 2:
                  // rethrow
                  return P._asyncHelper($async$currentError, 1, $async$completer);
              }
          });
          return P._asyncHelper(null, $async$DartinoSdk_promptInstall, $async$completer);
        }
      }
    },
    DartinoSdk_promptOptIntoAnalytics_recordChoice: {
      "^": "Closure:10;_box_0,$this",
      call$1: function(verb) {
        this.$this.execBin$2("dartino", [verb, "analytics"]);
        this._box_0.notification.invoke$1("dismiss");
      }
    },
    DartinoSdk_promptOptIntoAnalytics_optIn: {
      "^": "Closure:2;recordChoice",
      call$0: [function() {
        return this.recordChoice.call$1("enable");
      }, null, null, 0, 0, null, "call"]
    },
    DartinoSdk_promptOptIntoAnalytics_optOut: {
      "^": "Closure:2;recordChoice",
      call$0: [function() {
        return this.recordChoice.call$1("disable");
      }, null, null, 0, 0, null, "call"]
    },
    _installAdditionalTools_closure: {
      "^": "Closure:0;launch",
      call$1: [function(str) {
        var t1;
        str = J.replaceAll$2$s(str, "Download", "\nDownload");
        t1 = this.launch._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, false, true, false));
      }, null, null, 2, 0, null, 4, "call"]
    },
    DartinoCmd: {
      "^": "Job;sdk<,cmd,quiet<,name,_schedulingRule",
      start$0: [function(_) {
        return Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(this).then$1(new A.DartinoCmd_start_closure());
      }, "call$0", "get$start", 0, 0, 101],
      run$0: [function() {
        return D.ProcessNotifier$(this.name).watch$1(this.sdk.execBin$2("dartino", this.cmd));
      }, "call$0", "get$run", 0, 0, 5]
    },
    DartinoCmd_start_closure: {
      "^": "Closure:75;",
      call$1: [function($status) {
        return $status.get$isOk() && J.$eq$(J.get$result$x($status), 0);
      }, null, null, 2, 0, null, 34, "call"]
    }
  }], ["", "package:atom_dartlang/dartino/sdk/sdk.dart",, E, {
    "^": "",
    Sdk_promptInstallPath: function(sdkName, relPosixPath) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, t1, relPath, path;
      var $async$Sdk_promptInstallPath = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$fs();
              relPath = H.stringReplaceAllUnchecked(relPosixPath, "/", t1.separator);
              $async$goto = 3;
              return P._asyncHelper(D.promptUser("Enter " + sdkName + " installation path", t1.join$2(0, t1._os.callMethod$1("homedir"), relPath), false, true, false), $async$Sdk_promptInstallPath, $async$completer);
            case 3:
              // returning from await.
              path = $async$result;
              if (path == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              path = J.trim$0$s(path);
              if (path.length === 0) {
                // goto return
                $async$goto = 1;
                break;
              }
              if (t1.invoke$2("existsSync", path) === true) {
                t1 = $.$get$atom()._notifications;
                t1.invoke$3("addError", "Invalid installation location", t1._options$5$buttons$description$detail$dismissable$icon(null, null, "The installation directory already exists.\n" + path, null, null));
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = path;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$Sdk_promptInstallPath, $async$completer);
    },
    Sdk0: {
      "^": "Object;",
      get$version: function(_) {
        return;
      },
      get$dartSdkPath: function() {
        return $.$get$fs().join$3(0, this.sdkRoot, "internal", "dart-sdk");
      },
      execBin$4$cwd$startProcess: function(binName, args, cwd, startProcess) {
        var osBinName, runner;
        if (cwd instanceof F.Directory)
          cwd = J.$index$asx(cwd.obj, "path");
        osBinName = $.$get$isWindows() === true ? binName + ".bat" : binName;
        runner = X.ProcessRunner_ProcessRunner$underShell($.$get$fs().join$3(0, this.sdkRoot, "bin", osBinName), args, cwd, null);
        if (startProcess)
          runner.execStreaming$0();
        return runner;
      },
      execBin$3$startProcess: function(binName, args, startProcess) {
        return this.execBin$4$cwd$startProcess(binName, args, null, startProcess);
      },
      execBin$2: function(binName, args) {
        return this.execBin$4$cwd$startProcess(binName, args, null, true);
      },
      execBin$3$cwd: function(binName, args, cwd) {
        return this.execBin$4$cwd$startProcess(binName, args, cwd, true);
      },
      resolvePath$1: function(relativePosixPath) {
        var t1, t2;
        t1 = this.sdkRoot;
        if (t1 == null || J.trim$0$s(t1).length === 0)
          return;
        t2 = $.$get$fs();
        return t2.join$2(0, t1, H.stringReplaceAllUnchecked(relativePosixPath, "/", t2.separator));
      }
    }
  }], ["atom.breakpoints", "package:atom_dartlang/debug/breakpoints.dart",, A, {
    "^": "",
    ExceptionBreakType: {
      "^": "Object;index>",
      toString$0: function(_) {
        return C.Map_sgJaw.$index(0, this.index);
      }
    },
    BreakpointManager: {
      "^": "Object;disposables,subs,_breakpoints,_editorBreakpoints,_addController,_changeController,_removeController,_exceptionController,_gutterTracker",
      addBreakpoint$1: function(breakpoint) {
        var t1, t2, t3, _i, editor;
        this._breakpoints.push(breakpoint);
        t1 = this._addController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(breakpoint);
        $.Zone__current.toString;
        t1 = $.Dependencies__global.getDependency$1(C.Type_EditorManager_25m).get$dartEditors()._openEditors;
        t2 = t1.length;
        t3 = breakpoint.path;
        _i = 0;
        for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          editor = t1[_i];
          if (J.$eq$(editor.getPath$0(), t3))
            this._createEditorBreakpoint$2(editor, breakpoint);
        }
      },
      get$breakpoints: function() {
        return P.List_List$from(this._breakpoints, true, null);
      },
      getBreakpontsFor$1: function(path) {
        var t1 = this._breakpoints;
        return new H.WhereIterable(t1, new A.BreakpointManager_getBreakpontsFor_closure(path), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      removeBreakpoint$1: function(breakpoint) {
        var t1, t2, t3, _i, editorBreakpoint;
        C.JSArray_methods.remove$1(this._breakpoints, breakpoint);
        t1 = this._removeController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(breakpoint);
        t1 = this._editorBreakpoints;
        t2 = H.setRuntimeTypeInfo(t1.slice(), [H.getTypeArgumentByIndex(t1, 0)]);
        t3 = t2.length;
        _i = 0;
        for (; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          editorBreakpoint = t2[_i];
          if (J.$eq$(editorBreakpoint.get$bp(), breakpoint)) {
            $.$get$_logger31().finer$1("removing editor breakpoint: " + H.S(editorBreakpoint.get$bp()));
            C.JSArray_methods.remove$1(t1, editorBreakpoint);
            editorBreakpoint.dispose$0();
          }
        }
      },
      get$onAdd: function() {
        var t1 = this._addController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onChange: function(_) {
        var t1 = this._changeController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onRemove: function() {
        var t1 = this._removeController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$breakOnExceptionType: function() {
        var val, t1;
        val = $.$get$atom()._config.getValue$1("dartlang.debuggerCaughtExceptions");
        t1 = J.getInterceptor(val);
        if (t1.$eq(val, "all"))
          return C.ExceptionBreakType_0;
        else if (t1.$eq(val, "none"))
          return C.ExceptionBreakType_2;
        return C.ExceptionBreakType_1;
      },
      set$breakOnExceptionType: function(val) {
        if (val === C.ExceptionBreakType_0)
          $.$get$atom()._config.invoke$3("set", "dartlang.debuggerCaughtExceptions", "all");
        else if (val === C.ExceptionBreakType_2)
          $.$get$atom()._config.invoke$3("set", "dartlang.debuggerCaughtExceptions", "none");
        else
          $.$get$atom()._config.invoke$3("set", "dartlang.debuggerCaughtExceptions", "uncaught");
      },
      get$onBreakOnExceptionTypeChanged: function() {
        var t1 = this._exceptionController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      _processEditor$1: [function(editor) {
        this.getBreakpontsFor$1(editor.getPath$0()).forEach$1(0, new A.BreakpointManager__processEditor_closure(this, editor));
      }, "call$1", "get$_processEditor", 2, 0, 7, 9],
      _updateGutterTracker$1: [function(editor) {
        var t1 = this._gutterTracker;
        if (!(t1 == null))
          t1.dispose$0();
        this._gutterTracker = null;
        if (editor != null)
          this._gutterTracker = A._GutterTracker$(this, editor);
      }, "call$1", "get$_updateGutterTracker", 2, 0, 7, 9],
      _createEditorBreakpoint$2: function(editor, bp) {
        $.$get$_logger31().finer$1("creating editor breakpoint: " + H.S(bp));
        this._editorBreakpoints.push(A._EditorBreakpoint$(this, editor, bp, editor.markBufferRange$2$persistent(B.debuggerCoordsToEditorRange(J.get$line$x(bp), bp.get$column()), false)));
      },
      _toggleBreakpoint$0: function() {
        var t1, editor, path, bp, other;
        t1 = $.$get$atom();
        editor = t1._workspace.getActiveTextEditor$0();
        if (editor == null) {
          t1.invoke$1("beep");
          return;
        }
        path = editor.invoke$1("getPath");
        if (!(path == null ? false : J.endsWith$1$s(path, ".dart"))) {
          t1 = t1._notifications;
          t1.invoke$3("addWarning", "Breakpoints only supported for Dart files.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          return;
        }
        bp = new A.AtomBreakpoint(path, null, null);
        bp._breakpoints$_line = J.$add$ns(J.$index$asx(Y._cvt1(editor.invoke$1("getCursorBufferPosition")), "row"), 1);
        bp._breakpoints$_column = null;
        other = this._findSimilar$1(bp);
        if (other != null)
          this.removeBreakpoint$1(other);
        else
          this.addBreakpoint$1(bp);
      },
      _toggleLineNumberBreakpoint$2: function(editor, lineNumber) {
        var path, t1, bp, other;
        path = editor.getPath$0();
        if (!(path == null ? false : J.endsWith$1$s(path, ".dart"))) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "Breakpoints only supported for Dart files.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          return;
        }
        bp = new A.AtomBreakpoint(path, null, null);
        bp._breakpoints$_line = J.$add$ns(lineNumber, 1);
        bp._breakpoints$_column = null;
        other = this._findSimilar$1(bp);
        if (other != null)
          this.removeBreakpoint$1(other);
        else
          this.addBreakpoint$1(bp);
      },
      _findSimilar$1: function(other) {
        return C.JSArray_methods.firstWhere$2$orElse(this._breakpoints, new A.BreakpointManager__findSimilar_closure(other), new A.BreakpointManager__findSimilar_closure0());
      },
      initFromStored$1: function(storedData) {
        var t1, json, t2, t3, t4;
        t1 = J.getInterceptor(storedData);
        if (!!t1.$isList) {
          for (t1 = t1.get$iterator(storedData); t1.moveNext$0();) {
            json = t1.get$current();
            t2 = J.getInterceptor$asx(json);
            t3 = t2.$index(json, "path");
            t4 = t2.$index(json, "line");
            t2 = t2.$index(json, "column");
            if ($.$get$fs().invoke$2("existsSync", t3) === true)
              this.addBreakpoint$1(new A.AtomBreakpoint(t3, t4, t2));
          }
          $.$get$_logger31().fine$1("restored " + this._breakpoints.length + " breakpoints");
        }
      },
      toStorable$0: function() {
        return new H.MappedListIterable(this._breakpoints, new A.BreakpointManager_toStorable_closure(), [null, null]).toList$0(0);
      },
      dispose$0: [function() {
        this.disposables.dispose$0();
        this.subs.cancel$0(0);
        var t1 = this._gutterTracker;
        if (!(t1 == null))
          t1.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      BreakpointManager$0: function() {
        var t1, t2, t3;
        t1 = $.$get$atom();
        this.disposables._disposables.push(t1._commands.add$3(0, "atom-workspace", "dartlang:debug-toggle-breakpoint", new A.BreakpointManager_closure(this)));
        this.subs._subscriptions.push(t1._config.onDidChange$1("dartlang.debuggerCaughtExceptions").listen$1(new A.BreakpointManager_closure0(this)));
        t2 = this.get$_processEditor();
        C.JSArray_methods.forEach$1(Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).get$dartEditors()._openEditors, t2);
        t3 = Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).get$dartEditors()._editorOpenedController;
        new P._BroadcastStream(t3, [H.getTypeArgumentByIndex(t3, 0)]).listen$1(t2);
        this._updateGutterTracker$1(t1._workspace.getActiveTextEditor$0());
        t1 = Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).get$dartEditors()._activeEditorController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(this.get$_updateGutterTracker());
        $.$get$state().registerStorable$2("breakpoints", this);
      },
      $isDisposable: 1,
      static: {
        BreakpointManager$: function() {
          var t1 = new A.BreakpointManager(new L.Disposables(true, []), new L.StreamSubscriptions(true, []), [], [], P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), null);
          t1.BreakpointManager$0();
          return t1;
        }
      }
    },
    BreakpointManager_closure: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        this.$this._toggleBreakpoint$0();
      }
    },
    BreakpointManager_closure0: {
      "^": "Closure:3;$this",
      call$1: [function(val) {
        var t1, t2;
        t1 = J.getInterceptor(val);
        if (t1.$eq(val, "all")) {
          t1 = this.$this._exceptionController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(C.ExceptionBreakType_0);
        } else {
          t2 = this.$this._exceptionController;
          if (t1.$eq(val, "none")) {
            if (!t2.get$_mayAddEvent())
              H.throwExpression(t2._addEventError$0());
            t2._sendData$1(C.ExceptionBreakType_2);
          } else {
            if (!t2.get$_mayAddEvent())
              H.throwExpression(t2._addEventError$0());
            t2._sendData$1(C.ExceptionBreakType_1);
          }
        }
      }, null, null, 2, 0, null, 15, "call"]
    },
    BreakpointManager_getBreakpontsFor_closure: {
      "^": "Closure:0;path",
      call$1: function(bp) {
        return J.$eq$(J.get$path$x(bp), this.path);
      }
    },
    BreakpointManager__processEditor_closure: {
      "^": "Closure:11;$this,editor",
      call$1: function(bp) {
        this.$this._createEditorBreakpoint$2(this.editor, bp);
      }
    },
    BreakpointManager__findSimilar_closure: {
      "^": "Closure:11;other",
      call$1: function(bp) {
        var t1, t2;
        t1 = this.other;
        t2 = J.getInterceptor$x(bp);
        return J.$eq$(t1.path, t2.get$path(bp)) && J.$eq$(t1._breakpoints$_line, t2.get$line(bp));
      }
    },
    BreakpointManager__findSimilar_closure0: {
      "^": "Closure:1;",
      call$0: function() {
        return;
      }
    },
    BreakpointManager_toStorable_closure: {
      "^": "Closure:11;",
      call$1: [function(bp) {
        return bp.toJsonable$0();
      }, null, null, 2, 0, null, 25, "call"]
    },
    AtomBreakpoint: {
      "^": "Object;path>,_breakpoints$_line,_breakpoints$_column",
      get$line: function(_) {
        return this._breakpoints$_line;
      },
      get$column: function() {
        return this._breakpoints$_column;
      },
      get$id: function(_) {
        var t1 = this.path;
        return this._breakpoints$_column == null ? "[" + H.S(t1) + ":" + H.S(this._breakpoints$_line) + "]" : "[" + H.S(t1) + ":" + H.S(this._breakpoints$_line) + ":" + H.S(this._breakpoints$_column) + "]";
      },
      fileExists$0: function() {
        return $.$get$fs().invoke$2("existsSync", this.path);
      },
      updateLocation$1: function(lineCol) {
        this._breakpoints$_line = lineCol.line;
        this._breakpoints$_column = lineCol.column;
      },
      get$hashCode: function(_) {
        return C.JSString_methods.get$hashCode(this.get$id(this));
      },
      $eq: function(_, other) {
        var t1;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        return !!t1.$isAtomBreakpoint && this.get$id(this) === t1.get$id(other);
      },
      toJsonable$0: function() {
        var t1, t2, t3;
        t1 = this._breakpoints$_column;
        t2 = this.path;
        t3 = this._breakpoints$_line;
        if (t1 == null)
          return P.LinkedHashMap__makeLiteral(["path", t2, "line", t3]);
        else
          return P.LinkedHashMap__makeLiteral(["path", t2, "line", t3, "column", t1]);
      },
      toString$0: function(_) {
        return this.get$id(this);
      },
      compareTo$1: function(_, other) {
        var val, col_a, col_b;
        if (!(other instanceof A.AtomBreakpoint))
          return -1;
        val = J.compareTo$1$ns(this.path, other.path);
        if (!J.$eq$(val, 0))
          return val;
        val = J.$sub$n(this._breakpoints$_line, other._breakpoints$_line);
        if (!J.$eq$(val, 0))
          return val;
        col_a = this._breakpoints$_column;
        if (col_a == null)
          col_a = -1;
        col_b = other._breakpoints$_column;
        return J.$sub$n(col_a, col_b == null ? -1 : col_b);
      },
      $isComparable: 1,
      $asComparable: Isolate.functionThatReturnsNull
    },
    _GutterTracker: {
      "^": "Object;breakpointManager,editor<,_breakpoints$_sub,_gutterDisposable,_gutterClickListener",
      _initLineNumberGutter$1: function(gutter) {
        if (gutter == null || this._gutterDisposable != null)
          return;
        this._gutterClickListener = J.get$onClick$x($.$get$atom()._views.invoke$2("getView", gutter)).listen$1(new A._GutterTracker__initLineNumberGutter_closure(this));
        this._gutterDisposable = gutter.onDidDestroy$1(new A._GutterTracker__initLineNumberGutter_closure0(this));
      },
      dispose$0: [function() {
        this._breakpoints$_sub.cancel$0(0);
        var t1 = this._gutterClickListener;
        if (!(t1 == null))
          t1.cancel$0(0);
        t1 = this._gutterDisposable;
        if (!(t1 == null))
          t1.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _GutterTracker$2: function(breakpointManager, editor) {
        var t1 = this.editor;
        this._initLineNumberGutter$1(t1.gutterWithName$1("line-number"));
        this._breakpoints$_sub = t1.get$onDidAddGutter()._createSubscription$4(new A._GutterTracker_closure(this), null, null, false);
      },
      $isDisposable: 1,
      static: {
        _GutterTracker$: function(breakpointManager, editor) {
          var t1 = new A._GutterTracker(breakpointManager, editor, null, null, null);
          t1._GutterTracker$2(breakpointManager, editor);
          return t1;
        }
      }
    },
    _GutterTracker_closure: {
      "^": "Closure:156;$this",
      call$1: [function(gutter) {
        if (J.$eq$(J.get$name$x(gutter), "line-number"))
          this.$this._initLineNumberGutter$1(gutter);
      }, null, null, 2, 0, null, 94, "call"]
    },
    _GutterTracker__initLineNumberGutter_closure: {
      "^": "Closure:12;$this",
      call$1: [function(e) {
        var t1, bufferRow;
        t1 = J.getInterceptor$x(e);
        bufferRow = J.get$attributes$x(t1.get$target(e)).$index(0, "data-buffer-row");
        if (bufferRow != null) {
          t1.preventDefault$0(e);
          t1.stopPropagation$0(e);
          t1.stopImmediatePropagation$0(e);
          t1 = this.$this;
          t1.breakpointManager._toggleLineNumberBreakpoint$2(t1.editor, H.Primitives_parseInt(bufferRow, null, null));
        }
      }, null, null, 2, 0, null, 0, "call"]
    },
    _GutterTracker__initLineNumberGutter_closure0: {
      "^": "Closure:1;$this",
      call$0: [function() {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._gutterClickListener;
        if (!(t2 == null))
          t2.cancel$0(0);
        t1._gutterDisposable = null;
      }, null, null, 0, 0, null, "call"]
    },
    _EditorBreakpoint: {
      "^": "Object;manager,editor<,bp<,marker,_range,subs",
      dispose$0: [function() {
        this.subs.cancel$0(0);
        this.marker.invoke$1("destroy");
      }, "call$0", "get$dispose", 0, 0, 2],
      _EditorBreakpoint$4: function(manager, editor, bp, marker) {
        var t1, t2;
        t1 = this.marker;
        t2 = t1.invoke$1("getBufferRange");
        this._range = t2 == null ? null : new Y.Range(Y._cvt1(t2));
        this.editor.decorateMarker$2(t1, P.LinkedHashMap__makeLiteral(["type", "line-number", "class", "debugger-breakpoint"]));
        this.subs._subscriptions.push(t1.eventStream$1("onDidChange").listen$1(new A._EditorBreakpoint_closure(this)));
      },
      $isDisposable: 1,
      static: {
        _EditorBreakpoint$: function(manager, editor, bp, marker) {
          var t1 = new A._EditorBreakpoint(manager, editor, bp, marker, null, new L.StreamSubscriptions(true, []));
          t1._EditorBreakpoint$4(manager, editor, bp, marker);
          return t1;
        }
      }
    },
    _EditorBreakpoint_closure: {
      "^": "Closure:0;$this",
      call$1: [function(e) {
        var t1, t2, newRange, t3, t4;
        t1 = this.$this;
        t2 = t1.marker;
        if (t2.invoke$1("isValid") !== true)
          t1.manager.removeBreakpoint$1(t1.bp);
        else {
          t2 = t2.invoke$1("getBufferRange");
          newRange = t2 == null ? null : new Y.Range(Y._cvt1(t2));
          if (!J.$eq$(t1._range, newRange)) {
            t1._range = newRange;
            t2 = t1.bp;
            t3 = Y._cvt1(J.$index$asx(newRange.obj, "start"));
            t4 = J.getInterceptor$asx(t3);
            t2.updateLocation$1(new B.LineColumn(J.$add$ns(t4.$index(t3, "row"), 1), J.$add$ns(t4.$index(t3, "column"), 1)));
            t1 = t1.manager._changeController;
            if (!t1.get$_mayAddEvent())
              H.throwExpression(t1._addEventError$0());
            t1._sendData$1(t2);
          }
        }
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["atom.debugger", "package:atom_dartlang/debug/debugger.dart",, Z, {
    "^": "",
    _displayError: [function(error) {
      var t1 = $.$get$atom()._notifications;
      t1.invoke$3("addError", H.S(error), t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
    }, "call$1", "debugger___displayError$closure", 2, 0, 15, 8],
    _fileUriToPath: function(uriStr) {
      var uri, prefix, t1, exception, _i;
      try {
        uri = P.Uri_parse(uriStr, 0, null);
        t1 = uri.toFilePath$1$windows($.$get$isWindows());
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        for (t1 = J.getInterceptor$s(uriStr), _i = 0; _i < 2; ++_i) {
          prefix = C.List_4QF[_i];
          if (t1.startsWith$1(uriStr, prefix)) {
            t1 = $.$get$isWindows() === true ? t1.substring$1(uriStr, J.get$length$asx(prefix)) : t1.substring$1(uriStr, J.$sub$n(J.get$length$asx(prefix), 1));
            return t1;
          }
        }
        return t1.substring$1(uriStr, 5);
      }
    },
    DebugManager: {
      "^": "Object;disposables,connections,_debugger$_addedController,_debugger$_removedController",
      addConnection$1: function(connection) {
        var t1;
        this.connections.push(connection);
        t1 = this._debugger$_addedController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(connection);
      },
      removeConnection$1: function(connection) {
        var t1;
        C.JSArray_methods.remove$1(this.connections, connection);
        t1 = this._debugger$_removedController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(connection);
      },
      _handleDebugRun$0: [function() {
        var t1, connection, editor;
        t1 = this.connections;
        connection = t1.length === 0 ? null : C.JSArray_methods.get$first(t1);
        if (connection != null)
          connection.resume$0(0).catchError$1(Z.debugger___displayError$closure());
        else {
          t1 = $.$get$atom();
          editor = t1._workspace.getActiveTextEditor$0();
          if (editor != null)
            t1._commands.invoke$4("dispatch", t1._views.invoke$2("getView", editor), "dartlang:run-application", null);
        }
      }, "call$0", "get$_handleDebugRun", 0, 0, 2],
      dispose$0: [function() {
        this.disposables.dispose$0();
        var t1 = this.connections;
        t1 = H.setRuntimeTypeInfo(t1.slice(), [H.getTypeArgumentByIndex(t1, 0)]);
        C.JSArray_methods.forEach$1(t1, new Z.DebugManager_dispose_closure());
      }, "call$0", "get$dispose", 0, 0, 2],
      DebugManager$0: function() {
        var t1, add;
        t1 = this._debugger$_addedController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new Z.DebugManager_closure());
        add = new Z.DebugManager_closure0(this);
        add.call$2("debug-run", this.get$_handleDebugRun());
        add.call$2("debug-terminate", new Z.DebugManager_closure1(this));
        add.call$2("debug-stepin", new Z.DebugManager_closure2(this));
        add.call$2("debug-step", new Z.DebugManager_closure3(this));
        add.call$2("debug-stepout", new Z.DebugManager_closure4(this));
      },
      $isDisposable: 1,
      static: {
        DebugManager$: function() {
          var t1 = new Z.DebugManager(new L.Disposables(true, []), [], P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null));
          t1.DebugManager$0();
          return t1;
        }
      }
    },
    DebugManager_closure: {
      "^": "Closure:31;",
      call$1: [function(connection) {
        G.DebuggerView_showViewForConnection(connection);
      }, null, null, 2, 0, null, 59, "call"]
    },
    DebugManager_closure0: {
      "^": "Closure:74;$this",
      call$2: function(cmd, closure) {
        this.$this.disposables._disposables.push($.$get$atom()._commands.add$3(0, "atom-workspace", "dartlang:" + cmd, new Z.DebugManager__closure(closure)));
      }
    },
    DebugManager__closure: {
      "^": "Closure:0;closure",
      call$1: function(_) {
        this.closure.call$0();
      }
    },
    DebugManager_closure1: {
      "^": "Closure:1;$this",
      call$0: [function() {
        var t1 = this.$this.connections;
        t1 = t1.length === 0 ? null : C.JSArray_methods.get$first(t1);
        return t1 == null ? t1 : t1.terminate$0(0);
      }, null, null, 0, 0, null, "call"]
    },
    DebugManager_closure2: {
      "^": "Closure:1;$this",
      call$0: [function() {
        var t1 = this.$this.connections;
        t1 = t1.length === 0 ? null : C.JSArray_methods.get$first(t1);
        if (!(t1 == null)) {
          t1 = t1.isolates._selection;
          t1 = t1 == null ? t1 : t1.stepIn$0();
        }
        return t1;
      }, null, null, 0, 0, null, "call"]
    },
    DebugManager_closure3: {
      "^": "Closure:1;$this",
      call$0: [function() {
        var t1 = this.$this.connections;
        t1 = t1.length === 0 ? null : C.JSArray_methods.get$first(t1);
        if (!(t1 == null)) {
          t1 = t1.isolates._selection;
          t1 = t1 == null ? t1 : t1.stepOver$0();
        }
        return t1;
      }, null, null, 0, 0, null, "call"]
    },
    DebugManager_closure4: {
      "^": "Closure:1;$this",
      call$0: [function() {
        var t1 = this.$this.connections;
        t1 = t1.length === 0 ? null : C.JSArray_methods.get$first(t1);
        if (!(t1 == null)) {
          t1 = t1.isolates._selection;
          t1 = t1 == null ? t1 : t1.stepOut$0();
        }
        return t1;
      }, null, null, 0, 0, null, "call"]
    },
    DebugManager_dispose_closure: {
      "^": "Closure:0;",
      call$1: function(c) {
        return c.dispose$0();
      }
    },
    UriTranslator: {
      "^": "Object;",
      targetToClient$1: function(str) {
        return str;
      },
      clientToTarget$1: function(str) {
        return str;
      }
    },
    UriResolver: {
      "^": "Object;root>,selfRefName,_translator,_selfRefPrefix,_uriToPath,_pathToUri,_debugger$_completer,_contextId",
      resolveUriToPath$1: function(uri) {
        return this._resolveUriToPath$1(uri).then$1(new Z.UriResolver_resolveUriToPath_closure(uri));
      },
      _resolveUriToPath$1: function(uri) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, contextId, path, $async$temp1;
        var $async$_resolveUriToPath$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                uri = $async$self._translator.targetToClient$1(uri);
                if (J.startsWith$1$s(uri, "file:")) {
                  $async$returnValue = Z._fileUriToPath(uri);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = $async$self._uriToPath;
                if (t1.containsKey$1(0, uri)) {
                  $async$returnValue = t1.$index(0, uri);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 3;
                return P._asyncHelper($async$self._debugger$_completer.future, $async$_resolveUriToPath$1, $async$completer);
              case 3:
                // returning from await.
                contextId = $async$result;
                $async$temp1 = J;
                $async$goto = 4;
                return P._asyncHelper(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server().get$execution().mapUri$2$uri(contextId, uri), $async$_resolveUriToPath$1, $async$completer);
              case 4:
                // returning from await.
                path = $async$temp1.get$file$x($async$result);
                t1.$indexSet(0, uri, path);
                $async$returnValue = path;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_resolveUriToPath$1, $async$completer);
      },
      resolvePathToUris$1: function(path) {
        return this._resolvePathToUris$1(path).then$1(new Z.UriResolver_resolvePathToUris_closure(path));
      },
      _resolvePathToUris$1: function(path) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, contextId, result, uris, t2, filePath, i;
        var $async$_resolvePathToUris$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = $async$self._pathToUri;
                  if (t1.containsKey$1(0, path)) {
                    $async$returnValue = t1.$index(0, path);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  $async$goto = 3;
                  return P._asyncHelper($async$self._debugger$_completer.future, $async$_resolvePathToUris$1, $async$completer);
                case 3:
                  // returning from await.
                  contextId = $async$result;
                  $async$goto = 4;
                  return P._asyncHelper(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server().get$execution().mapUri$2$file(contextId, path), $async$_resolvePathToUris$1, $async$completer);
                case 4:
                  // returning from await.
                  result = $async$result;
                  if (result.get$uri() == null) {
                    $async$returnValue = [];
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  uris = [result.get$uri()];
                  if ($async$self._selfRefPrefix != null && J.startsWith$1$s(result.get$uri(), $async$self._selfRefPrefix)) {
                    t2 = P._Uri__Uri$file($async$self.root, $.$get$isWindows());
                    filePath = t2._text;
                    if (filePath == null) {
                      filePath = t2._initializeText$0();
                      t2._text = filePath;
                    }
                    t2 = "/lib/" + J.substring$1$s(result.get$uri(), $async$self._selfRefPrefix.length);
                    if (filePath == null) {
                      $async$returnValue = filePath.$add();
                      // goto return
                      $async$goto = 1;
                      break;
                    }
                    C.JSArray_methods.insert$2(uris, 0, filePath + t2);
                  }
                  for (i = 0; i < uris.length; ++i) {
                    t2 = $async$self._translator.clientToTarget$1(uris[i]);
                    if (i >= uris.length) {
                      $async$returnValue = H.ioore(uris, i);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    uris[i] = t2;
                  }
                  t1.$indexSet(0, path, uris);
                  $async$returnValue = uris;
                  // goto return
                  $async$goto = 1;
                  break;
                case 1:
                  // return
                  return P._asyncHelper($async$returnValue, 0, $async$completer);
                case 2:
                  // rethrow
                  return P._asyncHelper($async$currentError, 1, $async$completer);
              }
        });
        return P._asyncHelper(null, $async$_resolvePathToUris$1, $async$completer);
      },
      dispose$0: [function() {
        var t1, t2;
        if (Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive()) {
          t1 = Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server().get$execution();
          t2 = this._contextId;
          t1.toString;
          t2 = P.LinkedHashMap__makeLiteral(["id", t2]);
          t1.server._call$2(0, "execution.deleteContext", t2).catchError$1(new Z.UriResolver_dispose_closure());
        }
      }, "call$0", "get$dispose", 0, 0, 2],
      toString$0: function(_) {
        return "[UriResolver for " + H.S(this.root) + "]";
      },
      UriResolver$3$selfRefName$translator: function(root, selfRefName, translator) {
        var t1;
        this._translator = translator == null ? new Z.UriTranslator() : translator;
        t1 = this.selfRefName;
        if (t1 != null)
          this._selfRefPrefix = "package:" + H.S(t1) + "/";
        if (Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive())
          Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server().get$execution().createContext$1(this.root).then$1(new Z.UriResolver_closure(this)).catchError$1(new Z.UriResolver_closure0(this));
        else
          this._debugger$_completer.completeError$1("analysis server not available");
      },
      $isDisposable: 1,
      static: {
        UriResolver$: function(root, selfRefName, translator) {
          var t1 = P.String;
          t1 = new Z.UriResolver(root, selfRefName, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [t1]), [t1]), null);
          t1.UriResolver$3$selfRefName$translator(root, selfRefName, translator);
          return t1;
        }
      }
    },
    UriResolver_closure: {
      "^": "Closure:0;$this",
      call$1: [function(result) {
        var t1, t2;
        t1 = this.$this;
        t2 = J.get$id$x(result);
        t1._contextId = t2;
        t1._debugger$_completer.complete$1(0, t2);
      }, null, null, 2, 0, null, 3, "call"]
    },
    UriResolver_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(e) {
        this.$this._debugger$_completer.completeError$1(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    UriResolver_resolveUriToPath_closure: {
      "^": "Closure:3;uri",
      call$1: [function(result) {
        $.$get$_logger11().finer$1("resolve " + H.S(this.uri) + " <== " + H.S(result));
        return result;
      }, null, null, 2, 0, null, 3, "call"]
    },
    UriResolver_resolvePathToUris_closure: {
      "^": "Closure:33;path",
      call$1: [function(results) {
        $.$get$_logger11().finer$1("resolve " + H.S(this.path) + " ==> " + H.S(results));
        return results;
      }, null, null, 2, 0, null, 60, "call"]
    },
    UriResolver_dispose_closure: {
      "^": "Closure:0;",
      call$1: [function(_) {
        return;
      }, null, null, 2, 0, null, 1, "call"]
    }
  }], ["atom.debugger_ui", "package:atom_dartlang/debug/debugger_ui.dart",, G, {
    "^": "",
    DebuggerView: {
      "^": "View;connection,focusManager,subs,_execMarker,flowControlSection,detailSection,primaryTabGroup,secondaryTabGroup,disposables,root,toolbar,content,tabElement,_closeButton,group",
      _createConfigMenu$0: function() {
        var t1, button, menu, t2, t3, t4, checkbox, t5;
        t1 = {};
        button = M.MIconButton$("icon-gear");
        J.set$position$x(J.get$style$x(button.element), "relative");
        t1.checkElement = null;
        menu = K.CoreElement$("div", null, "tooltip bottom dart-inline-dialog", null);
        t2 = K.CoreElement$("div", null, "tooltip-arrow", null);
        t3 = K.CoreElement$("div", null, "tooltip-inner", null);
        t4 = K.CoreElement$("label", null, null, null);
        checkbox = K.CoreElement$("input", null, null, null);
        t5 = checkbox.element;
        J.setAttribute$2$x(t5, "type", "checkbox");
        checkbox.click$1(0, new G.DebuggerView__createConfigMenu__toggleExceptions(t1));
        t4.add$1(0, [checkbox, K.CoreElement$("span", null, null, "Break on caught exceptions")]);
        t3.add$1(0, [t4]);
        menu.add$1(0, [t2, t3]);
        J.get$onClick$x(menu.element).listen$1(new G.DebuggerView__createConfigMenu_closure());
        menu.attribute$2("hidden", true);
        t1.checkElement = t5;
        J.set$checked$x(t5, Q.Dependencies_instance().getDependency$1(C.Type_BreakpointManager_erm).get$breakOnExceptionType() !== C.ExceptionBreakType_2);
        this.subs._subscriptions.push(Q.Dependencies_instance().getDependency$1(C.Type_BreakpointManager_erm).get$onBreakOnExceptionTypeChanged().listen$1(new G.DebuggerView__createConfigMenu_closure0(t1)));
        button.add$1(0, menu);
        button.click$1(0, new G.DebuggerView__createConfigMenu_closure1(menu));
        this.toolbar.add$1(0, button);
      },
      _createSecondarySection$1: function(section) {
        var resizer, t1;
        resizer = T.ViewResizer$createHorizontal(false);
        t1 = M.MTabGroup$();
        t1.flex$0(0);
        this.secondaryTabGroup = t1;
        section.add$1(0, [resizer, t1]);
        t1 = $.$get$state();
        resizer.set$_targetSize(J.$index$asx(t1._pluginState, "debuggerSplitter") == null ? 144 : J.$index$asx(t1._pluginState, "debuggerSplitter"));
        t1 = resizer._views$_controller;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new G.DebuggerView__createSecondarySection_closure());
        this.secondaryTabGroup.tabs.add$1(0, G.BreakpointsTab$());
        t1 = this.disposables._disposables;
        C.JSArray_methods.addAll$1(t1, this.primaryTabGroup.tabs._items);
        C.JSArray_methods.addAll$1(t1, this.secondaryTabGroup.tabs._items);
      },
      _handleIsolateAdded$1: [function(isolate) {
        var t1 = this.focusManager;
        if (t1._isolate == null) {
          t1._isolate = isolate;
          t1._notifyIsolateListeners$0();
        }
      }, "call$1", "get$_handleIsolateAdded", 2, 0, 9, 13],
      _handleIsolatePaused$1: [function(isolate) {
        var t1 = this.focusManager;
        t1._isolate = isolate;
        t1._notifyIsolateListeners$0();
      }, "call$1", "get$_handleIsolatePaused", 2, 0, 9, 13],
      _handleIsolateResumed$1: [function(isolate) {
        var t1 = this.focusManager;
        if (J.$eq$(t1._isolate, isolate))
          t1._notifyIsolateListeners$0();
      }, "call$1", "get$_handleIsolateResumed", 2, 0, 9, 13],
      _handleIsolateTerminated$1: [function(isolate) {
        var t1 = this.focusManager;
        if (J.$eq$(t1._isolate, isolate)) {
          t1._isolate = C.JSArray_methods.firstWhere$2$orElse(J.get$items$x(this.connection.get$isolates()), new G.DebuggerView__handleIsolateTerminated_closure(isolate), new G.DebuggerView__handleIsolateTerminated_closure0());
          t1._notifyIsolateListeners$0();
        }
      }, "call$1", "get$_handleIsolateTerminated", 2, 0, 9, 13],
      get$label: function(_) {
        return "Debug " + H.S(J.get$name$x(this.connection.get$launch()));
      },
      get$id: function(_) {
        return "debug." + H.S(J.get$hashCode$(this.connection));
      },
      dispose$0: [function() {
        this.subs.cancel$0(0);
        this.flowControlSection.subs.cancel$0(0);
        this.disposables.dispose$0();
        this._removeExecutionMarker$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _debugger_ui$_jumpToLocation$2$addExecMarker: function($location, addExecMarker) {
        var t1, t2;
        t1 = J.getInterceptor$x($location);
        if ($.$get$fs().invoke$2("existsSync", t1.get$path($location)) !== true) {
          t2 = $.$get$atom()._notifications;
          t2.invoke$3("addWarning", "Cannot find file '" + H.S(t1.get$path($location)) + "'.", t2._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          return;
        }
        if ($location.get$resolved() !== true) {
          $.$get$_logger30().fine$1("DebuggerView._jumpToLocation - location is not resolved (" + H.S($location) + ").");
          return;
        }
        if (t1.get$line($location) == null || $location.get$column() == null) {
          Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).jumpToLocation$1(t1.get$path($location));
          return;
        }
        Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).jumpToLocation$3(t1.get$path($location), J.$sub$n(t1.get$line($location), 1), J.$sub$n($location.get$column(), 1)).then$1(new G.DebuggerView__jumpToLocation_closure(this, $location, addExecMarker));
      },
      _debugger_ui$_jumpToLocation$1: function($location) {
        return this._debugger_ui$_jumpToLocation$2$addExecMarker($location, false);
      },
      _removeExecutionMarker$0: function() {
        var t1 = this._execMarker;
        if (t1 != null) {
          t1.invoke$1("destroy");
          this._execMarker = null;
        }
      },
      DebuggerView$1: function(connection) {
        var t1, t2, t3, t4, titleSection, flutterElement, flowControlElement, primarySection, detailsElement, secondarySection, t5, t6, title, titleText, t7, t8;
        t1 = this.connection;
        if (t1.get$isAlive())
          t1.get$onTerminated().then$1(new G.DebuggerView_closure(this));
        J.toggle$2$x(J.get$classes$x(this.root.element), "debugger", null);
        t2 = this.content;
        t3 = t2.element;
        t4 = J.getInterceptor$x(t3);
        J.toggle$2$x(t4.get$classes(t3), "tab-non-scrollable", null);
        t4.setAttribute$2(t3, "layout", "");
        t4.setAttribute$2(t3, "vertical", "");
        titleSection = K.CoreElement$("div", null, "debugger-section view-header", null);
        flutterElement = K.CoreElement$("div", null, "debugger-section", null);
        flutterElement.attribute$2("hidden", true);
        flowControlElement = K.CoreElement$("div", null, "debugger-section", null);
        primarySection = K.CoreElement$("div", null, "debugger-section resizable", null);
        t3 = primarySection.element;
        t4 = J.getInterceptor$x(t3);
        t4.setAttribute$2(t3, "layout", "");
        t4.setAttribute$2(t3, "vertical", "");
        primarySection.flex$0(0);
        detailsElement = K.CoreElement$("div", null, "debugger-section", null);
        secondarySection = K.CoreElement$("div", null, "debugger-section resizable debugger-section-last", null);
        t5 = secondarySection.element;
        t6 = J.getInterceptor$x(t5);
        t6.setAttribute$2(t5, "layout", "");
        t6.setAttribute$2(t5, "vertical", "");
        t2.add$1(0, [titleSection, flutterElement, flowControlElement, primarySection, detailsElement, secondarySection]);
        this._createConfigMenu$0();
        title = K.CoreElement$("div", null, "view-title", null);
        titleSection.add$1(0, [title]);
        titleText = t1.get$launch().get$targetName();
        t2 = title.element;
        t5 = J.getInterceptor$x(t2);
        t5.set$text(t2, "Debugging " + H.S(titleText == null ? J.get$name$x(t1.get$launch()) : titleText));
        t5.set$title(t2, t5.get$text(t2));
        N.FlutterSection$(t1, flutterElement);
        this.flowControlSection = G.FlowControlSection$(this, t1, flowControlElement);
        t4.setAttribute$2(t3, "layout", "");
        t4.setAttribute$2(t3, "vertical", "");
        t3 = M.MTabGroup$();
        t3.flex$0(0);
        this.primaryTabGroup = t3;
        primarySection.add$1(0, [t3]);
        t3 = this.primaryTabGroup.tabs;
        t4 = [null];
        t2 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t4);
        t2._utils$_value = true;
        t5 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t4);
        t5._utils$_value = true;
        t6 = K.CoreElement$("div", null, "material-tab", null);
        t7 = K.CoreElement$("div", null, null, null);
        t5 = new G.ExecutionTab(this, t1, new L.StreamSubscriptions(true, []), null, null, null, "execution", "Execution", t6, t7, t2, t5);
        t5.MTab$2("execution", "Execution");
        t2 = t7.element;
        t6 = J.getInterceptor$x(t2);
        t6.setAttribute$2(t2, "layout", "");
        t6.setAttribute$2(t2, "vertical", "");
        t7.flex$0(0);
        t2 = M.MList$(t5.get$_renderFrame(), null, null, null);
        J.toggle$2$x(J.get$classes$x(t2.element), "debugger-frame-area", null);
        t5.list = t2;
        t6 = t5.get$_renderVariable();
        t8 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t4);
        t8._utils$_value = null;
        t8 = new M.MTree(new G._LocalTreeModel(), t6, null, null, t8, null, P.LinkedHashMap__makeEmpty(), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), W._ElementFactoryProvider_createElement_tag("div", null), [null]);
        t8.CoreElement$4$attributes$classes$text("div", null, "material-list", null);
        t8.MList$3$filter$sort(t6, null, null, null);
        t8.flex$0(0);
        t5.locals = t8;
        t7.add$1(0, [t2, t8]);
        t8 = t5.list.selectedItem._utils$_controller;
        t2 = t5.get$_selectFrame();
        new P._BroadcastStream(t8, [H.getTypeArgumentByIndex(t8, 0)]).listen$1(t2);
        t8 = t5.list._material$_doubleClick;
        new P._BroadcastStream(t8, [H.getTypeArgumentByIndex(t8, 0)]).listen$1(t2);
        t2 = t5.locals.selectedItem._utils$_controller;
        new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(t5.get$_showObjectDetails());
        t2 = t5.get$_updateFrames();
        t8 = this.focusManager;
        t2.call$1(t8._isolate);
        t7 = t8._listeners;
        t7.push(t2);
        t3.add$1(0, t5);
        t5 = this.primaryTabGroup.tabs;
        t3 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t4);
        t3._utils$_value = true;
        t4 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t4);
        t4._utils$_value = true;
        t2 = K.CoreElement$("div", null, "material-tab", null);
        t6 = K.CoreElement$("div", null, null, null);
        t4 = new G.LibrariesTab(this, t1, null, "libraries", "Libraries", t2, t6, t3, t4);
        t4.MTab$2("libraries", "Libraries");
        t3 = t6.element;
        t2 = J.getInterceptor$x(t3);
        t2.setAttribute$2(t3, "layout", "");
        t2.setAttribute$2(t3, "vertical", "");
        t6.flex$0(0);
        t3 = M.MList$(t4.get$_debugger_ui$_render(), t4.get$_debugger_ui$_filter(), t4.get$_debugger_ui$_sort(), null);
        t3.flex$0(0);
        t4.list = t3;
        t6.add$1(0, [t3]);
        t3 = t4.get$_updateLibraries();
        t3.call$1(t8._isolate);
        t7.push(t3);
        t5.add$1(0, t4);
        this.primaryTabGroup.tabs.add$1(0, G.IsolatesTab$(this, t1));
        t4 = new G.DetailSection(detailsElement, null);
        t5 = K.CoreElement$("div", null, "debugger-object-details", null);
        t4._detailsElement = t5;
        detailsElement.add$1(0, [t5]);
        detailsElement.attribute$2("hidden", true);
        this.detailSection = t4;
        this._createSecondarySection$1(secondarySection);
        t4 = this.subs._subscriptions;
        t4.push(t1.get$isolates().get$onAdded().listen$1(this.get$_handleIsolateAdded()));
        t4.push(t1.get$onPaused().listen$1(this.get$_handleIsolatePaused()));
        t4.push(t1.get$onResumed().listen$1(this.get$_handleIsolateResumed()));
        t4.push(t1.get$isolates().get$onRemoved().listen$1(this.get$_handleIsolateTerminated()));
      },
      static: {
        DebuggerView_showViewForConnection: function(connection) {
          var id, view;
          id = "debug." + H.S(J.get$hashCode$(connection));
          if (Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).hasViewId$1(id)) {
            view = Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).getGroup$1("right").getViewById$1(id);
            Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).activateView$1(id);
            return view;
          } else {
            view = G.DebuggerView$(connection);
            Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).addView$2("right", view);
            return view;
          }
        },
        DebuggerView$: function(connection) {
          var t1 = new G.DebuggerView(connection, new G.FocusManager(null, []), new L.StreamSubscriptions(true, []), null, null, null, null, null, new L.Disposables(true, []), K.CoreElement$("div", null, "tab-content", null), K.CoreElement$("div", null, null, null), K.CoreElement$("div", null, null, null), null, null, null);
          t1.View$0();
          t1.DebuggerView$1(connection);
          return t1;
        }
      }
    },
    DebuggerView_closure: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        var t1, t2;
        t1 = this.$this;
        t1._removeExecutionMarker$0();
        t2 = t1.group;
        t2.views.remove$1(0, t1);
        t1.dispose$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    DebuggerView__createConfigMenu__toggleExceptions: {
      "^": "Closure:2;_box_0",
      call$0: function() {
        var t1 = Q.Dependencies_instance().getDependency$1(C.Type_BreakpointManager_erm);
        t1.set$breakOnExceptionType(J.get$checked$x(this._box_0.checkElement) === true ? C.ExceptionBreakType_0 : C.ExceptionBreakType_1);
      }
    },
    DebuggerView__createConfigMenu_closure: {
      "^": "Closure:12;",
      call$1: [function(e) {
        var t1 = J.getInterceptor$x(e);
        t1.preventDefault$0(e);
        t1.stopPropagation$0(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    DebuggerView__createConfigMenu_closure0: {
      "^": "Closure:109;_box_0",
      call$1: [function(val) {
        J.set$checked$x(this._box_0.checkElement, Q.Dependencies_instance().getDependency$1(C.Type_BreakpointManager_erm).get$breakOnExceptionType() === C.ExceptionBreakType_0);
      }, null, null, 2, 0, null, 15, "call"]
    },
    DebuggerView__createConfigMenu_closure1: {
      "^": "Closure:1;menu",
      call$0: function() {
        return this.menu.attribute$2("hidden", null);
      }
    },
    DebuggerView__createSecondarySection_closure: {
      "^": "Closure:0;",
      call$1: [function(pos) {
        $.$get$state().$indexSet(0, "debuggerSplitter", pos);
        return pos;
      }, null, null, 2, 0, null, 26, "call"]
    },
    DebuggerView__handleIsolateTerminated_closure: {
      "^": "Closure:110;isolate",
      call$1: function(i) {
        return !J.$eq$(i, this.isolate);
      }
    },
    DebuggerView__handleIsolateTerminated_closure0: {
      "^": "Closure:1;",
      call$0: function() {
        return;
      }
    },
    DebuggerView__jumpToLocation_closure: {
      "^": "Closure:8;$this,location,addExecMarker",
      call$1: [function(editor) {
        var t1, t2, t3, t4;
        t1 = this.location;
        t2 = J.getInterceptor$x(t1);
        editor.scrollToBufferPosition$2$center(new Y.Point0(Y._create0("Point", J.$sub$n(t2.get$line(t1), 1), J.$sub$n(t1.get$column(), 1))), true);
        if (this.addExecMarker) {
          t3 = this.$this;
          t4 = t3._execMarker;
          if (!(t4 == null))
            t4.invoke$1("destroy");
          t1 = editor.markBufferRange$2$persistent(B.debuggerCoordsToEditorRange(t2.get$line(t1), t1.get$column()), false);
          t3._execMarker = t1;
          editor.decorateMarker$2(t1, P.LinkedHashMap__makeLiteral(["type", "line", "class", "debugger-executionpoint-line"]));
          editor.decorateMarker$2(t3._execMarker, P.LinkedHashMap__makeLiteral(["type", "line-number", "class", "debugger-executionpoint-linenumber"]));
          editor.decorateMarker$2(t3._execMarker, P.LinkedHashMap__makeLiteral(["type", "highlight", "class", "debugger-executionpoint-highlight"]));
        }
      }, null, null, 2, 0, null, 9, "call"]
    },
    FlowControlSection: {
      "^": "Object;view>,connection,subs,resume,stepIn,stepOver,stepOut,reload,stop,isolateName,isolateState",
      _handleIsolateChange$1: [function(isolate) {
        var t1, t2, suspended, t3;
        t1 = this.reload;
        t2 = this.connection;
        t1.attribute$2("disabled", !(t2.get$isAlive() && isolate != null));
        this.stop.attribute$2("disabled", !t2.get$isAlive());
        if (isolate == null) {
          this.stepIn.attribute$2("disabled", true);
          this.stepOut.attribute$2("disabled", true);
          this.stepOver.attribute$2("disabled", true);
          J.set$text$x(this.isolateName.element, "no isolate selected");
          this.view._removeExecutionMarker$0();
          return;
        }
        suspended = isolate.get$suspended();
        t1 = !suspended;
        J.toggle$2$x(J.get$classes$x(this.resume.element), "icon-playback-pause", t1);
        J.toggle$2$x(J.get$classes$x(this.resume.element), "icon-playback-play", suspended);
        t2 = this.resume;
        t3 = suspended ? "Resume" : "Pause";
        J.set$title$x(t2.element, t3);
        this.stepIn.attribute$2("disabled", t1);
        this.stepOut.attribute$2("disabled", t1);
        this.stepOver.attribute$2("disabled", t1);
        t1 = suspended && isolate.get$hasFrames();
        t2 = this.view;
        if (t1) {
          if (t2.primaryTabGroup.hasTabId$1("execution"))
            t2.primaryTabGroup.activateTabId$1("execution");
          if (t2.secondaryTabGroup.hasTabId$1("execution"))
            t2.secondaryTabGroup.activateTabId$1("execution");
          J.get$location$x(J.get$first$ax(isolate.get$frames())).resolve$0().then$1(new G.FlowControlSection__handleIsolateChange_closure(this));
        } else
          t2._removeExecutionMarker$0();
        t1 = this.isolateName;
        if (suspended) {
          t2 = "Isolate " + H.S(isolate.get$displayName());
          J.set$text$x(t1.element, t2);
          t2 = this.isolateState;
          t1 = isolate.get$hasFrames() ? "" : "paused (no frames)";
          J.set$text$x(t2.element, t1);
        } else {
          t2 = "Isolate " + H.S(isolate.get$displayName());
          J.set$text$x(t1.element, t2);
          J.set$text$x(this.isolateState.element, "running");
        }
      }, "call$1", "get$_handleIsolateChange", 2, 0, 9, 13],
      _pauseResume$0: [function() {
        var isolate, t1;
        isolate = this.view.focusManager._isolate;
        if (isolate != null) {
          t1 = J.getInterceptor$x(isolate);
          return isolate.get$suspended() ? t1.resume$0(isolate) : t1.pause$0(isolate);
        }
      }, "call$0", "get$_pauseResume", 0, 0, 1],
      _stepIn$0: [function() {
        var t1 = this.view.focusManager._isolate;
        return t1 == null ? t1 : t1.stepIn$0();
      }, "call$0", "get$_stepIn", 0, 0, 1],
      _stepOut$0: [function() {
        var t1 = this.view.focusManager._isolate;
        return t1 == null ? t1 : t1.stepOut$0();
      }, "call$0", "get$_stepOut", 0, 0, 1],
      _autoStepOver$0: [function() {
        var t1 = this.view.focusManager._isolate;
        return t1 == null ? t1 : t1.autoStepOver$0();
      }, "call$0", "get$_autoStepOver", 0, 0, 1],
      _restart$1$fullRestart: [function(fullRestart) {
        $.$get$atom()._workspace.saveAll$0();
        this.connection.get$launch().restart$1$fullRestart(fullRestart).catchError$1(new G.FlowControlSection__restart_closure());
      }, function() {
        return this._restart$1$fullRestart(false);
      }, "_restart$0", "call$1$fullRestart", "call$0", "get$_restart", 0, 3, 111, 62],
      _terminate$0: [function() {
        return J.terminate$0$x(this.connection);
      }, "call$0", "get$_terminate", 0, 0, 1],
      dispose$0: [function() {
        return this.subs.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      FlowControlSection$3: function(view, connection, element) {
        var t1, executionControlToolbar, t2, t3, t4, t5, t6;
        t1 = K.CoreElement$("button", null, "btn icon-playback-play", null);
        t1.click$1(0, this.get$_pauseResume());
        J.set$title$x(t1.element, "Resume");
        this.resume = t1;
        t1 = K.CoreElement$("button", null, "btn icon-jump-down", null);
        t1.click$1(0, this.get$_stepIn());
        J.set$title$x(t1.element, "Step in");
        this.stepIn = t1;
        t1 = K.CoreElement$("button", null, "btn icon-jump-right", null);
        t1.click$1(0, this.get$_autoStepOver());
        J.set$title$x(t1.element, "Step over");
        this.stepOver = t1;
        t1 = K.CoreElement$("button", null, "btn icon-jump-up", null);
        t1.click$1(0, this.get$_stepOut());
        J.set$title$x(t1.element, "Step out");
        this.stepOut = t1;
        t1 = K.CoreElement$("button", null, "btn icon-sync", null);
        t1.click$2(0, this.get$_restart(), new G.FlowControlSection_closure(this));
        J.set$title$x(t1.element, "Reload (Shift-click: full reload)");
        this.reload = t1;
        t1 = K.CoreElement$("button", null, "btn icon-primitive-square", null);
        t1.click$1(0, this.get$_terminate());
        J.set$title$x(t1.element, "Stop");
        this.stop = t1;
        executionControlToolbar = K.CoreElement$("div", null, "debugger-execution-toolbar", null);
        t1 = this.resume;
        t2 = K.CoreElement$("div", null, null, null);
        J.set$width$x(J.get$style$x(t2.element), "1em");
        t3 = this.stepIn;
        t4 = this.stepOver;
        t5 = this.stepOut;
        t6 = K.CoreElement$("div", null, null, null);
        t6.flex$0(0);
        executionControlToolbar.add$1(0, [t1, t2, t3, t4, t5, t6]);
        if (this.connection.get$launch().get$supportsRestart() === true)
          executionControlToolbar.add$1(0, this.reload);
        executionControlToolbar.add$1(0, this.stop);
        t1 = K.CoreElement$("div", null, null, null);
        t2 = K.CoreElement$("span", null, null, "no isolate selected");
        this.isolateName = t2;
        t3 = K.CoreElement$("span", null, "debugger-secondary-info font-style-italic", null);
        this.isolateState = t3;
        element.add$1(0, [t1.add$1(0, [t2, t3]), executionControlToolbar]);
        t3 = this.get$_handleIsolateChange();
        t2 = this.view.focusManager;
        t3.call$1(t2._isolate);
        t2._listeners.push(t3);
      },
      resume$0: function($receiver) {
        return this.resume.call$0();
      },
      stepIn$0: function() {
        return this.stepIn.call$0();
      },
      stepOver$0: function() {
        return this.stepOver.call$0();
      },
      stepOut$0: function() {
        return this.stepOut.call$0();
      },
      $isDisposable: 1,
      static: {
        FlowControlSection$: function(view, connection, element) {
          var t1 = new G.FlowControlSection(view, connection, new L.StreamSubscriptions(true, []), null, null, null, null, null, null, null, null);
          t1.FlowControlSection$3(view, connection, element);
          return t1;
        }
      }
    },
    FlowControlSection_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        return this.$this._restart$1$fullRestart(true);
      }
    },
    FlowControlSection__handleIsolateChange_closure: {
      "^": "Closure:34;$this",
      call$1: [function($location) {
        var t1 = this.$this.view;
        t1._removeExecutionMarker$0();
        if ($location.get$resolved() === true)
          t1._debugger_ui$_jumpToLocation$2$addExecMarker($location, true);
      }, null, null, 2, 0, null, 63, "call"]
    },
    FlowControlSection__restart_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        var t1 = $.$get$atom()._notifications;
        t1.invoke$3("addWarning", J.toString$0$(e), t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
      }, null, null, 2, 0, null, 0, "call"]
    },
    ExecutionTab: {
      "^": "MTab;view>,connection,subs,list,locals<,_framesClearTimer,id,name,_tabElement,content,enabled,active",
      _updateFrames$1: [function(isolate) {
        var t1, t2;
        t1 = {};
        t2 = this._framesClearTimer;
        if (!(t2 == null))
          t2.cancel$0(0);
        t1.frames = isolate == null ? isolate : isolate.get$frames();
        this._framesClearTimer = P.Timer_Timer(C.Duration_100000, new G.ExecutionTab__updateFrames_closure(t1, this));
      }, "call$1", "get$_updateFrames", 2, 0, 9, 13],
      _renderFrame$2: [function(frame, element) {
        var style, t1, locationText, t2, t3, t4, t5;
        style = frame.get$isSystem() ? "icon icon-git-commit" : "icon icon-three-bars";
        t1 = J.getInterceptor$x(frame);
        locationText = B.getDisplayUri(t1.get$location(frame).get$displayPath());
        t2 = K.CoreElement$("span", null, style, null);
        t3 = K.CoreElement$("span", null, null, null);
        t4 = t3.element;
        t5 = J.getInterceptor$x(t4);
        t5.setAttribute$2(t4, "layout", "");
        t5.setAttribute$2(t4, "horizontal", "");
        t1 = K.CoreElement$("span", null, "overflow-hidden-ellipsis", t1.get$title(frame));
        t4 = K.CoreElement$("span", null, "debugger-secondary-info right-aligned overflow-hidden-ellipsis", locationText);
        t4.flex$0(0);
        t3.add$1(0, [t1, t4]);
        t3.flex$0(0);
        J.add$1$ax(element, [t2, t3]);
        element.layoutHorizontal$0();
      }, "call$2", "get$_renderFrame", 4, 0, 113],
      _selectFrame$1: [function(frame) {
        var vars, t1;
        if (frame == null) {
          this.locals.update$1(0, []);
          return;
        }
        J.get$location$x(frame).resolve$0().then$1(new G.ExecutionTab__selectFrame_closure(this));
        vars = frame.get$locals();
        t1 = this.locals;
        t1.update$1(0, vars == null ? [] : vars);
        if (frame.get$isExceptionFrame() && J.get$isNotEmpty$asx(vars))
          this.locals.selectItem$1(J.get$first$ax(vars));
      }, "call$1", "get$_selectFrame", 2, 0, 114, 64],
      _renderVariable$2: [function(local, element) {
        var t1, value, t2, str;
        t1 = J.getInterceptor$x(local);
        value = t1.get$value(local);
        t2 = J.getInterceptor$ax(element);
        t2.add$1(element, K.CoreElement$("span", null, null, t1.get$name(local)));
        if (value == null)
          t2.add$1(element, K.CoreElement$("span", null, "debugger-secondary-info overflow-hidden-ellipsis right-aligned", ""));
        else if (value.get$isString()) {
          str = J.get$valueAsString$x(value);
          t2.add$1(element, K.CoreElement$("span", null, "debugger-secondary-info overflow-hidden-ellipsis right-aligned", value.get$valueIsTruncated() === true ? '"' + H.S(str) + "\u2026" : '"' + H.S(str) + '"'));
        } else if (value.get$isList())
          t2.add$1(element, K.CoreElement$("span", null, "debugger-secondary-info overflow-hidden-ellipsis right-aligned", "[ " + H.S(value.get$itemsLength()) + " ]"));
        else {
          t1 = J.getInterceptor$x(value);
          if (t1.get$isMap(value) === true)
            t2.add$1(element, K.CoreElement$("span", null, "debugger-secondary-info overflow-hidden-ellipsis right-aligned", "{ " + H.S(value.get$itemsLength()) + " }"));
          else if (value.get$itemsLength() != null)
            t2.add$1(element, K.CoreElement$("span", null, "debugger-secondary-info overflow-hidden-ellipsis right-aligned", H.S(t1.get$className(value)) + " [ " + H.S(value.get$itemsLength()) + " ]"));
          else if (value.get$isPlainInstance())
            t2.add$1(element, K.CoreElement$("i", null, "debugger-secondary-info overflow-hidden-ellipsis right-aligned", t1.get$className(value)));
          else
            t2.add$1(element, K.CoreElement$("span", null, "debugger-secondary-info overflow-hidden-ellipsis right-aligned", t1.get$valueAsString(value)));
        }
        element.layoutHorizontal$0();
      }, "call$2", "get$_renderVariable", 4, 0, 115],
      _showObjectDetails$1: [function(variable) {
        this.view.detailSection.showDetails$1(variable);
      }, "call$1", "get$_showObjectDetails", 2, 0, 116, 101],
      dispose$0: [function() {
        return this.subs.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2]
    },
    ExecutionTab__updateFrames_closure: {
      "^": "Closure:1;_box_0,$this",
      call$0: function() {
        var t1, t2, $frames, t3;
        t1 = this._box_0;
        t2 = t1.frames;
        if (t2 == null) {
          $frames = [];
          t1.frames = $frames;
          t2 = $frames;
        }
        t3 = this.$this;
        t3.list.update$1(0, t2);
        if (J.get$isNotEmpty$asx(t1.frames))
          t3.list.selectItem$1(J.get$first$ax(t1.frames));
      }
    },
    ExecutionTab__selectFrame_closure: {
      "^": "Closure:34;$this",
      call$1: [function($location) {
        if ($location.get$resolved() === true)
          this.$this.view._debugger_ui$_jumpToLocation$1($location);
      }, null, null, 2, 0, null, 63, "call"]
    },
    _LocalTreeModel: {
      "^": "TreeModel;",
      canHaveChildren$1: [function(variable) {
        return J.get$value$x(variable).get$isPrimitive() !== true;
      }, "call$1", "get$canHaveChildren", 2, 0, 117],
      $asTreeModel: function() {
        return [Z.DebugVariable];
      }
    },
    DetailSection: {
      "^": "Object;sectionElement,_detailsElement",
      showDetails$1: function(variable) {
        if (variable != null)
          J.get$value$x(variable).invokeToString$0().then$1(new G.DetailSection_showDetails_closure(this, variable)).catchError$1(new G.DetailSection_showDetails_closure0(this)).whenComplete$1(new G.DetailSection_showDetails_closure1(this));
        else
          this.sectionElement.attribute$2("hidden", true);
      }
    },
    DetailSection_showDetails_closure: {
      "^": "Closure:69;$this,variable",
      call$1: [function(result) {
        var str, t1;
        str = J.get$valueAsString$x(result);
        if (result.get$valueIsTruncated() === true)
          str = J.$add$ns(str, "\u2026");
        t1 = this.$this;
        J.clear$0$ax(J.get$children$x(t1._detailsElement.element));
        t1._detailsElement.add$1(0, [K.CoreElement$("i", null, null, J.get$className$x(J.get$value$x(this.variable))), K.CoreElement$("span", null, null, ": "), K.CoreElement$("span", null, "text-subtle", str)]);
        J.toggle$2$x(J.get$classes$x(t1._detailsElement.element), "text-error", false);
      }, null, null, 2, 0, null, 3, "call"]
    },
    DetailSection_showDetails_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(e) {
        var t1 = this.$this;
        J.set$text$x(t1._detailsElement.element, H.S(e));
        J.toggle$2$x(J.get$classes$x(t1._detailsElement.element), "text-error", true);
      }, null, null, 2, 0, null, 0, "call"]
    },
    DetailSection_showDetails_closure1: {
      "^": "Closure:1;$this",
      call$0: [function() {
        this.$this.sectionElement.attribute$2("hidden", false);
      }, null, null, 0, 0, null, "call"]
    },
    LibrariesTab: {
      "^": "MTab;view>,connection,list,id,name,_tabElement,content,enabled,active",
      _updateLibraries$1: [function(isolate) {
        var libraries, t1;
        if (isolate instanceof D.ObservatoryIsolate) {
          libraries = isolate.get$libraries();
          t1 = this.list;
          t1.update$1(0, libraries);
        } else
          this.list.update$1(0, []);
      }, "call$1", "get$_updateLibraries", 2, 0, 9, 13],
      _debugger_ui$_render$2: [function(lib, element) {
        var t1, t2;
        t1 = K.CoreElement$("span", null, "icon icon-repo", lib.get$displayUri());
        t2 = K.CoreElement$("span", null, "debugger-secondary-info overflow-hidden-ellipsis", J.get$name$x(lib));
        t2.flex$0(0);
        J.add$1$ax(element, [t1, t2]);
        element.layoutHorizontal$0();
      }, "call$2", "get$_debugger_ui$_render", 4, 0, 119],
      _debugger_ui$_sort$2: [function(a, b) {
        return J.compareTo$1$ns(a, b);
      }, "call$2", "get$_debugger_ui$_sort", 4, 0, 120],
      _debugger_ui$_filter$1: [function(lib) {
        return lib.get$$private();
      }, "call$1", "get$_debugger_ui$_filter", 2, 0, 121],
      dispose$0: [function() {
      }, "call$0", "get$dispose", 0, 0, 2]
    },
    IsolatesTab: {
      "^": "MTab;view>,connection,list,subs,id,name,_tabElement,content,enabled,active",
      _debugger_ui$_render$2: [function(isolate, element) {
        J.add$1$ax(element, [K.CoreElement$("span", null, "icon icon-versions", isolate.get$displayName()), K.CoreElement$("span", null, "debugger-secondary-info overflow-hidden-ellipsis", J.get$detail$x(isolate))]);
      }, "call$2", "get$_debugger_ui$_render", 4, 0, 122],
      _handleSelectIsolate$1: [function(isolate) {
        var t1 = this.view.focusManager;
        t1._isolate = isolate;
        t1._notifyIsolateListeners$0();
      }, "call$1", "get$_handleSelectIsolate", 2, 0, 9, 13],
      dispose$0: [function() {
        return this.subs.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      IsolatesTab$2: function(view, connection) {
        var t1, t2, t3;
        t1 = this.content;
        t2 = t1.element;
        t3 = J.getInterceptor$x(t2);
        t3.setAttribute$2(t2, "layout", "");
        t3.setAttribute$2(t2, "vertical", "");
        t1.flex$0(0);
        t2 = M.MList$(this.get$_debugger_ui$_render(), null, null, null);
        t2.flex$0(0);
        this.list = t2;
        t1.add$1(0, [t2]);
        t2 = this.list._material$_doubleClick;
        new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(this.get$_handleSelectIsolate());
        this.subs._subscriptions.push(this.connection.get$isolates().observeMutation$1(new G.IsolatesTab_closure(this)));
      },
      static: {
        IsolatesTab$: function(view, connection) {
          var t1, t2;
          t1 = [null];
          t2 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t1);
          t2._utils$_value = true;
          t1 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t1);
          t1._utils$_value = true;
          t1 = new G.IsolatesTab(view, connection, null, new L.StreamSubscriptions(true, []), "isolates", "Isolates", K.CoreElement$("div", null, "material-tab", null), K.CoreElement$("div", null, null, null), t2, t1);
          t1.MTab$2("isolates", "Isolates");
          t1.IsolatesTab$2(view, connection);
          return t1;
        }
      }
    },
    IsolatesTab_closure: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        var t1 = this.$this;
        t1.list.update$1(0, J.get$items$x(t1.connection.get$isolates()));
        return;
      }, null, null, 2, 0, null, 1, "call"]
    },
    BreakpointsTab: {
      "^": "MTab;titlebar,list,subs,id,name,_tabElement,content,enabled,active",
      _debugger_ui$_update$1: [function(_, _0) {
        var bps, t1, t2;
        bps = P.List_List$from(Q.Dependencies_instance().getDependency$1(C.Type_BreakpointManager_erm).get$breakpoints(), true, null);
        C.JSArray_methods.sort$0(bps);
        t1 = bps.length;
        t2 = this.titlebar;
        if (t1 === 0)
          J.set$title$x(t2, "No breakpoints");
        else
          J.set$title$x(t2, "" + t1 + " " + M.pluralize("breakpoint", bps.length));
        this.list.update$1(0, bps);
      }, function($receiver) {
        return this._debugger_ui$_update$1($receiver, null);
      }, "_debugger_ui$_update$0", "call$1", "call$0", "get$_debugger_ui$_update", 0, 2, 123, 2, 1],
      _debugger_ui$_render$2: [function(bp, element) {
        var t1, pathText, rel, t2, t3, t4, lineText;
        t1 = J.getInterceptor$x(bp);
        pathText = t1.get$path(bp);
        rel = P.List_List$from($.$get$atom()._project.invoke$2("relativizePath", t1.get$path(bp)), true, null);
        t2 = rel.length;
        if (0 >= t2)
          return H.ioore(rel, 0);
        t3 = rel[0];
        if (t3 != null) {
          t4 = $.$get$fs();
          if (0 >= t2)
            return H.ioore(rel, 0);
          t3 = J.$add$ns(t4.basename$1(t3), " ");
          if (1 >= rel.length)
            return H.ioore(rel, 1);
          pathText = J.$add$ns(t3, rel[1]);
        }
        lineText = "line " + H.S(t1.get$line(bp));
        if (bp.get$column() != null)
          lineText += ":" + H.S(bp.get$column());
        t2 = K.CoreElement$("span", null, "icon-primitive-dot debugger-breakpoint-icon", null);
        t3 = K.CoreElement$("div", null, "overflow-hidden-ellipsis", null);
        t3.flex$0(0);
        t4 = K.CoreElement$("span", null, "debugger-breakpoint-path", pathText);
        J.set$title$x(t4.element, t1.get$path(bp));
        t3.add$1(0, [t4, K.CoreElement$("span", null, "debugger-secondary-info", lineText)]);
        t4 = M.MIconButton$("icon-dash");
        t4.click$1(0, new G.BreakpointsTab__render_closure(bp));
        J.set$title$x(t4.element, "Delete breakpoint");
        J.add$1$ax(element, [t2, t3, t4]);
        element.layoutHorizontal$0();
      }, "call$2", "get$_debugger_ui$_render", 4, 0, 124],
      dispose$0: [function() {
        return this.subs.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      BreakpointsTab$0: function() {
        var t1, t2, t3, t4;
        t1 = this.content;
        t2 = t1.element;
        t3 = J.getInterceptor$x(t2);
        t3.setAttribute$2(t2, "layout", "");
        t3.setAttribute$2(t2, "vertical", "");
        t1.flex$0(0);
        t2 = W._ElementFactoryProvider_createElement_tag("div", null);
        t3 = new G._TabTitlebar(null, null, t2);
        t3.CoreElement$4$attributes$classes$text("div", null, "debug-tab-container", null);
        t4 = J.getInterceptor$x(t2);
        t4.setAttribute$2(t2, "layout", "");
        t4.setAttribute$2(t2, "horizontal", "");
        t2 = K.CoreElement$("div", null, "debug-tab-title", null);
        t2.flex$0(0);
        t3.titleElement = t2;
        t4 = K.CoreElement$("div", null, "debug-tab-toolbar", null);
        t3.toolbar = t4;
        t3.add$1(0, [t2, t4]);
        this.titlebar = t1.add$1(0, t3);
        t3 = M.MList$(this.get$_debugger_ui$_render(), null, null, null);
        t3.flex$0(0);
        this.list = t3;
        t1.add$1(0, [t3]);
        t3 = this.list._material$_doubleClick;
        new P._BroadcastStream(t3, [H.getTypeArgumentByIndex(t3, 0)]).listen$1(new G.BreakpointsTab_closure(this));
        this._debugger_ui$_update$0(0);
        t3 = this.get$_debugger_ui$_update(this);
        t1 = this.subs._subscriptions;
        t1.push(Q.Dependencies_instance().getDependency$1(C.Type_BreakpointManager_erm).get$onAdd().listen$1(t3));
        t1.push(Q.Dependencies_instance().getDependency$1(C.Type_BreakpointManager_erm).get$onRemove().listen$1(t3));
      },
      static: {
        BreakpointsTab$: function() {
          var t1, t2;
          t1 = [null];
          t2 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t1);
          t2._utils$_value = true;
          t1 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t1);
          t1._utils$_value = true;
          t1 = new G.BreakpointsTab(null, null, new L.StreamSubscriptions(true, []), "breakpoints", "Breakpoints", K.CoreElement$("div", null, "material-tab", null), K.CoreElement$("div", null, null, null), t2, t1);
          t1.MTab$2("breakpoints", "Breakpoints");
          t1.BreakpointsTab$0();
          return t1;
        }
      }
    },
    BreakpointsTab_closure: {
      "^": "Closure:11;$this",
      call$1: [function(bp) {
        var col, t1;
        col = bp.get$column() == null ? null : J.$sub$n(bp.get$column(), 1);
        t1 = J.getInterceptor$x(bp);
        Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).jumpToLocation$3(t1.get$path(bp), J.$sub$n(t1.get$line(bp), 1), col);
      }, null, null, 2, 0, null, 25, "call"]
    },
    BreakpointsTab__render_closure: {
      "^": "Closure:1;bp",
      call$0: function() {
        Q.Dependencies_instance().getDependency$1(C.Type_BreakpointManager_erm).removeBreakpoint$1(this.bp);
      }
    },
    FocusManager: {
      "^": "Object;_isolate,_listeners",
      get$isolate: function() {
        return this._isolate;
      },
      _notifyIsolateListeners$0: function() {
        var t1, t2, _i;
        for (t1 = this._listeners, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].call$1(this._isolate);
      }
    },
    _TabTitlebar: {
      "^": "CoreElement;titleElement,toolbar,element",
      set$title: function(_, value) {
        J.set$text$x(this.titleElement.element, value);
      }
    }
  }], ["", "package:atom_dartlang/debug/model.dart",, Z, {
    "^": "",
    DebugConnection: {
      "^": "Object;launch<,isolates<"
    },
    DebugIsolate: {
      "^": "Object;",
      get$displayName: function() {
        return J.get$name$x(this.isolateRef);
      },
      get$hasFrames: function() {
        var t1 = this.frames;
        return t1 != null && t1.length !== 0;
      }
    },
    DebugFrame: {
      "^": "Object;",
      toString$0: function(_) {
        return D.printFunctionNameRecursive(this.frame.get$$function(), false);
      }
    },
    DebugVariable: {
      "^": "Object;",
      toString$0: function(_) {
        return this.get$name(this);
      }
    },
    DebugValue: {
      "^": "Object;",
      toString$0: function(_) {
        return this.get$valueAsString(this);
      }
    },
    DebugLocation: {
      "^": "Object;resolved<",
      toString$0: function(_) {
        var t1, t2;
        t1 = H.S(this._observatory_debugger$_path) + " ";
        t2 = this._pos;
        t1 = t1 + H.S(t2 == null ? t2 : J.$index$asx(t2.obj, "row")) + ":";
        t2 = this._pos;
        return t1 + H.S(t2 == null ? t2 : J.$index$asx(t2.obj, "column"));
      }
    }
  }], ["atom.observatory_debugger", "package:atom_dartlang/debug/observatory_debugger.dart",, D, {
    "^": "",
    ObservatoryDebugger_connect: function(launch, host, port, pipeStdio, uriTranslator) {
      var url, ws, t1, t2, t3, t4, connectedCompleter, finishedCompleter;
      url = "ws://" + host + ":" + H.S(port) + "/ws";
      ws = new F.WebSocket(null);
      ws._ws = $.$get$WebSocket__WebSocket().apply$1([url]);
      t1 = $.Zone__current;
      t2 = [null];
      t3 = new P._Future(0, t1, null, t2);
      t4 = [null];
      connectedCompleter = new P._AsyncCompleter(t3, t4);
      finishedCompleter = new P._AsyncCompleter(new P._Future(0, t1, null, t2), t4);
      ws.get$onOpen(ws).listen$1(new D.ObservatoryDebugger_connect_closure(launch, uriTranslator, pipeStdio, url, ws, connectedCompleter, finishedCompleter));
      ws.get$onError(ws).listen$1(new D.ObservatoryDebugger_connect_closure0(port, connectedCompleter));
      ws.get$onClose(ws).listen$1(new D.ObservatoryDebugger_connect_closure1(finishedCompleter));
      return t3;
    },
    printFunctionName: function(ref, terse) {
      return C.JSString_methods.replaceAll$2(H.S(J.get$name$x(ref)) + "()", "<anonymous closure>", "<anon>");
    },
    printFunctionNameRecursive: function(ref, terse) {
      var t1, $name;
      t1 = J.getInterceptor$x(ref);
      $name = J.replaceAll$2$s(terse ? t1.get$name(ref) : H.S(t1.get$name(ref)) + "()", "<anonymous closure>", "<anon>");
      if (ref.get$owner() instanceof S.ClassRef)
        return H.S(J.get$name$x(ref.get$owner())) + "." + $name;
      else if (ref.get$owner() instanceof S.FuncRef)
        return D.printFunctionNameRecursive(ref.get$owner(), true) + "." + $name;
      else
        return $name;
    },
    _refToString: function(value) {
      var t1;
      if (value instanceof S.InstanceRef)
        if (J.$eq$(value.kind, "String"))
          return "'" + H.S(value.valueAsString) + "'";
        else {
          t1 = value.valueAsString;
          if (t1 != null)
            return t1;
          else
            return "[" + H.S(J.get$name$x(value.classRef)) + " " + H.S(value.id) + "]";
        }
      else
        return H.S(value);
    },
    _calcPos: function(script, tokenPos) {
      var t1, row, t2, line, index, t3;
      for (t1 = J.get$iterator$ax(script.tokenPosTable); t1.moveNext$0();) {
        row = t1.get$current();
        t2 = J.getInterceptor$asx(row);
        line = t2.$index(row, 0);
        index = 1;
        while (true) {
          t3 = J.$sub$n(t2.get$length(row), 1);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(index < t3))
            break;
          if (J.$eq$(t2.$index(row, index), tokenPos))
            return new Y.Point0(Y._create0("Point", line, t2.$index(row, index + 1)));
          index += 2;
        }
      }
      return;
    },
    _instanceToString: function(instance) {
      var t1 = J.getInterceptor(instance);
      if (!!t1.$isInstanceRef || !!t1.$isInstance)
        if (J.$eq$(t1.get$kind(instance), "String"))
          return '"' + H.S(t1.get$valueAsString(instance)) + '"';
        else if (t1.get$valueAsString(instance) != null)
          return t1.get$valueAsString(instance);
        else
          return "[" + H.S(J.get$name$x(instance.get$classRef())) + "]";
      else if (!!t1.$isSentinel)
        return instance.valueAsString;
      else
        return "";
    },
    ObservatoryDebugger_connect_closure: {
      "^": "Closure:0;launch,uriTranslator,pipeStdio,url,ws,connectedCompleter,finishedCompleter",
      call$1: [function(_) {
        var t1, t2, t3, service, connection;
        t1 = $.$get$_logger10();
        t1.info$1("Connected to observatory on " + this.url + ".");
        t2 = this.ws;
        t3 = t2.get$onMessage(t2);
        service = new S.VmService(null, null, 0, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), null, P.StreamController_StreamController$broadcast(null, null, true, null), P.StreamController_StreamController$broadcast(null, null, true, null), P.LinkedHashMap__makeEmpty(), null);
        service._vm_service_lib$_streamSub = new P._MapStream(new D.ObservatoryDebugger_connect__closure(), t3, [H.getTypeArgumentByIndex(t3, 0), null])._createSubscription$4(service.get$_vm_service_lib$_processMessage(), null, null, false);
        service._vm_service_lib$_writeMessage = new D.ObservatoryDebugger_connect__closure0(t2);
        service._vm_service_lib$_log = new D.ObservatoryLog(t1);
        service._disposeHandler = null;
        t1 = this.launch;
        connection = D.ObservatoryConnection$(t1, service, this.finishedCompleter, this.pipeStdio, this.uriTranslator, t2);
        t1._debugConnection = connection;
        Q.Dependencies_instance().getDependency$1(C.Type_DebugManager_QDz).addConnection$1(connection);
        this.connectedCompleter.complete$1(0, connection);
      }, null, null, 2, 0, null, 1, "call"]
    },
    ObservatoryDebugger_connect__closure: {
      "^": "Closure:125;",
      call$1: [function(e) {
        return H.stringTypeCast(J.get$data$x(e));
      }, null, null, 2, 0, null, 0, "call"]
    },
    ObservatoryDebugger_connect__closure0: {
      "^": "Closure:3;ws",
      call$1: function(message) {
        this.ws._ws.callMethod$2("send", [message]);
        return;
      }
    },
    ObservatoryDebugger_connect_closure0: {
      "^": "Closure:0;port,connectedCompleter",
      call$1: [function(e) {
        var t1;
        $.$get$_logger10().fine$2("Unable to connect to observatory, port " + H.S(this.port), e);
        t1 = this.connectedCompleter;
        if (t1.future._state === 0)
          t1.completeError$1(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    ObservatoryDebugger_connect_closure1: {
      "^": "Closure:0;finishedCompleter",
      call$1: [function(_) {
        return this.finishedCompleter.complete$0(0);
      }, null, null, 2, 0, null, 1, "call"]
    },
    ObservatoryConnection: {
      "^": "DebugConnection;service,completer,pipeStdio,ws,_isolateMap,_isolatePaused,_isolateResumed,_isolateCreatedController,sourceCache,subs,uriResolver,stdoutSupported,stderrSupported,_nextIsolateId,flutterExtension<,launch,metadata,isolates",
      get$isAlive: function() {
        return this.completer.future._state === 0;
      },
      get$onPaused: function() {
        var t1 = this._isolatePaused;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onResumed: function() {
        var t1 = this._isolateResumed;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      resume$0: function(_) {
        var t1 = this.isolates._selection;
        if (t1 != null)
          return J.resume$0$x(t1);
        t1 = new P._Future(0, $.Zone__current, null, [null]);
        t1._asyncComplete$1(null);
        return t1;
      },
      stepIn$0: function() {
        var t1 = this.isolates._selection;
        return t1 == null ? t1 : t1.stepIn$0();
      },
      stepOver$0: function() {
        var t1 = this.isolates._selection;
        return t1 == null ? t1 : t1.stepOver$0();
      },
      stepOut$0: function() {
        var t1 = this.isolates._selection;
        return t1 == null ? t1 : t1.stepOut$0();
      },
      autoStepOver$0: function() {
        var t1 = this.isolates._selection;
        return t1 == null ? t1 : t1.autoStepOver$0();
      },
      terminate$0: function(_) {
        var exception;
        try {
          this.ws._ws.callMethod$1("close");
        } catch (exception) {
          H.unwrapException(exception);
        }
        return this.launch.kill$0();
      },
      get$onTerminated: function() {
        return this.completer.future;
      },
      _observatory_debugger$_init$0: function() {
        var trim, t1, t2;
        trim = new D.ObservatoryConnection__init_closure();
        t1 = this.service;
        t2 = t1._vm_service_lib$_onSend;
        new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(new D.ObservatoryConnection__init_closure0(trim));
        t2 = t1._vm_service_lib$_onReceive;
        new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(new D.ObservatoryConnection__init_closure1(trim));
        t2 = t1._getEventController$1("_Logging");
        new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(new D.ObservatoryConnection__init_closure2(this));
        t1._vm_service_lib$_call$2(0, "streamListen", P.LinkedHashMap__makeLiteral(["streamId", "_Logging"]));
        t1._vm_service_lib$_call$1(0, "getVersion").then$1(new D.ObservatoryConnection__init_closure3());
        t2 = t1._getEventController$1("Isolate");
        new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(this.get$_handleIsolateEvent());
        t1._vm_service_lib$_call$2(0, "streamListen", P.LinkedHashMap__makeLiteral(["streamId", "Isolate"]));
        t2 = t1._getEventController$1("Debug");
        new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(this.get$_handleDebugEvent());
        t1._vm_service_lib$_call$2(0, "streamListen", P.LinkedHashMap__makeLiteral(["streamId", "Debug"]));
        if (this.pipeStdio) {
          t2 = t1._getEventController$1("Stdout");
          new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(new D.ObservatoryConnection__init_closure4(this));
          t1._vm_service_lib$_call$2(0, "streamListen", P.LinkedHashMap__makeLiteral(["streamId", "Stdout"])).catchError$1(new D.ObservatoryConnection__init_closure5(this));
          t2 = t1._getEventController$1("Stderr");
          new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(new D.ObservatoryConnection__init_closure6(this));
          t1._vm_service_lib$_call$2(0, "streamListen", P.LinkedHashMap__makeLiteral(["streamId", "Stderr"])).catchError$1(new D.ObservatoryConnection__init_closure7(this));
        }
        t2 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), [null]);
        t2._utils$_value = false;
        t2 = new Z.FlutterExt(new D._ObservatoryServiceWrapper(this), t2, null, P.LinkedHashSet_LinkedHashSet(null, null, null, null), P.LinkedHashMap__makeEmpty());
        t2._flutter_ext$_init$0();
        this.flutterExtension = t2;
        t1._vm_service_lib$_call$1(0, "getVM").then$1(new D.ObservatoryConnection__init_closure8(this));
      },
      _installBreakpoints$1: function(isolate) {
        var _bps, addBreakpoint, t1;
        _bps = P.LinkedHashMap__makeEmpty();
        addBreakpoint = new D.ObservatoryConnection__installBreakpoints_closure(_bps);
        t1 = this.subs._subscriptions;
        t1.push(Q.Dependencies_instance().getDependency$1(C.Type_BreakpointManager_erm).get$onAdd().listen$1(new D.ObservatoryConnection__installBreakpoints_closure0(this, isolate, addBreakpoint)));
        t1.push(Q.Dependencies_instance().getDependency$1(C.Type_BreakpointManager_erm).get$onRemove().listen$1(new D.ObservatoryConnection__installBreakpoints_closure1(this, isolate, _bps)));
        return P.Future_forEach(Q.Dependencies_instance().getDependency$1(C.Type_BreakpointManager_erm).get$breakpoints(), new D.ObservatoryConnection__installBreakpoints_closure2(this, isolate, addBreakpoint)).then$1(new D.ObservatoryConnection__installBreakpoints_closure3(this, isolate));
      },
      _handleIsolateEvent$1: [function($event) {
        var ref, isolate;
        ref = $event.get$isolate();
        switch (J.get$kind$x($event)) {
          case "IsolateStart":
            this._registerNewIsolate$1(ref);
            break;
          case "IsolateRunnable":
            this._installBreakpoints$1(ref).then$1(new D.ObservatoryConnection__handleIsolateEvent_closure(this, ref));
            break;
          case "IsolateUpdate":
            this._updateIsolateMetadata$1(ref);
            break;
          case "IsolateExit":
            isolate = this._isolateMap.remove$1(0, J.get$id$x(ref));
            if (isolate != null)
              this.isolates.remove$1(0, isolate);
            break;
        }
      }, "call$1", "get$_handleIsolateEvent", 2, 0, 68, 12],
      _handleDebugEvent$1: [function($event) {
        var kind, ref, isolate, t1, inspectee, t2;
        kind = J.get$kind$x($event);
        ref = $event.get$isolate();
        switch (kind) {
          case "PauseStart":
            this._registerNewIsolate$1(ref).then$1(new D.ObservatoryConnection__handleDebugEvent_closure());
            break;
          case "PauseExit":
          case "PauseBreakpoint":
          case "PauseInterrupted":
          case "PauseException":
            isolate = this._isolateMap.$index(0, J.get$id$x(ref));
            if ($event.get$exception() != null)
              this._printExceptionToConsole$2(isolate, $event.get$exception());
            isolate._populateFrames$1$exception($event.get$exception()).then$1(new D.ObservatoryConnection__handleDebugEvent_closure0($event, isolate));
            break;
          case "Resume":
            t1 = this._isolateMap.$index(0, J.get$id$x(ref));
            if (!(t1 == null))
              t1._suspend$2$pausedAtAsyncSuspension(false, false);
            break;
          case "Inspect":
            inspectee = $event.get$inspectee();
            t1 = J.getInterceptor$x(inspectee);
            t2 = this.launch;
            if (t1.get$valueAsString(inspectee) != null) {
              t1 = H.S(t1.get$valueAsString(inspectee)) + "\n";
              t2 = t2._stdio;
              if (!t2.get$_mayAddEvent())
                H.throwExpression(t2._addEventError$0());
              t2._sendData$1(new X.TextFragment(t1, false, false, false));
            } else {
              t1 = H.S(inspectee) + "\n";
              t2 = t2._stdio;
              if (!t2.get$_mayAddEvent())
                H.throwExpression(t2._addEventError$0());
              t2._sendData$1(new X.TextFragment(t1, false, false, false));
            }
            break;
        }
      }, "call$1", "get$_handleDebugEvent", 2, 0, 68, 12],
      _registerNewIsolate$1: function(ref) {
        var t1, t2, t3, isolate;
        t1 = this._isolateMap;
        t2 = J.getInterceptor$x(ref);
        if (t1.containsKey$1(0, t2.get$id(ref))) {
          t1 = t1.$index(0, t2.get$id(ref));
          t2 = new P._Future(0, $.Zone__current, null, [null]);
          t2._asyncComplete$1(t1);
          return t2;
        }
        t3 = this.service;
        isolate = new D.ObservatoryIsolate(this, t3, ref, new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]), null, null, false, false, false, false, null, null);
        isolate.scriptManager = new D.ScriptManager(t3, isolate, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        isolate._detail = "#" + this._nextIsolateId++;
        t1.$indexSet(0, t2.get$id(ref), isolate);
        this.isolates.add$1(0, isolate);
        return isolate._updateIsolateInfo$0().then$1(new D.ObservatoryConnection__registerNewIsolate_closure(this, ref, isolate)).then$1(new D.ObservatoryConnection__registerNewIsolate_closure0(this, isolate));
      },
      _registerNewIsolates$1: function(refs) {
        var futures, t1;
        futures = [];
        for (t1 = J.get$iterator$ax(refs); t1.moveNext$0();)
          futures.push(this._registerNewIsolate$1(t1.get$current()));
        return P.Future_wait(futures, null, false);
      },
      _updateIsolateMetadata$1: function(ref) {
        var isolate = this._isolateMap.$index(0, J.get$id$x(ref));
        if (isolate == null)
          return this._registerNewIsolate$1(ref);
        else
          return isolate._updateIsolateInfo$0();
      },
      _getExceptionPauseMode$0: function() {
        var val = Q.Dependencies_instance().getDependency$1(C.Type_BreakpointManager_erm).get$breakOnExceptionType();
        if (val === C.ExceptionBreakType_0)
          return "All";
        if (val === C.ExceptionBreakType_2)
          return "None";
        return "Unhandled";
      },
      _printExceptionToConsole$2: function(isolate, exception) {
        var t1, t2;
        t1 = J.getInterceptor$x(exception);
        if (J.$eq$(t1.get$kind(exception), "String") || t1.get$valueAsString(exception) != null) {
          t1 = "exception: " + H.S(J.$eq$(t1.get$kind(exception), "String") ? "'" + H.S(t1.get$valueAsString(exception)) + "'" : t1.get$valueAsString(exception)) + "\n";
          t2 = this.launch._stdio;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(new X.TextFragment(t1, true, false, false));
        } else {
          t1 = "exception (" + H.S(J.get$name$x(exception.get$classRef())) + "): ";
          t2 = this.launch._stdio;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(new X.TextFragment(t1, true, false, false));
          new D.ObservatoryInstanceRefValue(isolate, exception).invokeToString$0().then$1(new D.ObservatoryConnection__printExceptionToConsole_closure(this)).catchError$1(new D.ObservatoryConnection__printExceptionToConsole_closure0(this));
        }
      },
      dispose$0: function() {
        this.subs.cancel$0(0);
        if (this.completer.future._state === 0)
          this.terminate$0(0);
        this.uriResolver.dispose$0();
      },
      ObservatoryConnection$6$pipeStdio$uriTranslator$ws: function(launch, service, completer, pipeStdio, uriTranslator, ws) {
        var t1, root;
        t1 = launch.launchConfiguration;
        root = t1.get$primaryResource();
        launch.toString;
        if (Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(t1.get$primaryResource()) != null)
          root = J.get$path$x(Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(t1.get$primaryResource()));
        t1 = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(t1.get$primaryResource());
        this.uriResolver = Z.UriResolver$(root, t1 == null ? t1 : t1.getSelfRefName$0(), uriTranslator);
        this._observatory_debugger$_init$0();
        this.completer.future.whenComplete$1(new D.ObservatoryConnection_closure(this));
      },
      static: {
        ObservatoryConnection$: function(launch, service, completer, pipeStdio, uriTranslator, ws) {
          var t1, t2, t3, t4, t5, t6, t7;
          t1 = P.LinkedHashMap__makeEmpty();
          t2 = P.StreamController_StreamController$broadcast(null, null, false, null);
          t3 = P.StreamController_StreamController$broadcast(null, null, false, null);
          t4 = P.StreamController_StreamController$broadcast(null, null, false, null);
          t5 = P.LinkedHashMap__makeEmpty();
          t6 = $.$get$fs();
          t6 = t6.join$2(0, t6._os.callMethod$1("tmpdir"), "vm_cache");
          t7 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), [null]);
          t7._utils$_value = null;
          t7 = new D.ObservatoryConnection(service, completer, pipeStdio, ws, t1, t2, t3, t4, new D._VmSourceCache(t6, t5), new L.StreamSubscriptions(true, []), null, true, true, 1, null, launch, t7, new G.SelectionGroup(null, [], P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), [null]));
          t7.ObservatoryConnection$6$pipeStdio$uriTranslator$ws(launch, service, completer, pipeStdio, uriTranslator, ws);
          return t7;
        }
      }
    },
    ObservatoryConnection_closure: {
      "^": "Closure:1;$this",
      call$0: [function() {
        return this.$this.dispose$0();
      }, null, null, 0, 0, null, "call"]
    },
    ObservatoryConnection__init_closure: {
      "^": "Closure:3;",
      call$1: function(str) {
        var t1 = J.getInterceptor$asx(str);
        return J.$gt$n(t1.get$length(str), 1000) ? t1.substring$2(str, 0, 1000) + "\u2026" : str;
      }
    },
    ObservatoryConnection__init_closure0: {
      "^": "Closure:0;trim",
      call$1: [function(str) {
        if ($.$get$_logger10().isLoggable$1(C.Level_FINER_400))
          $.$get$_logger10().fine$1("==> " + H.S(this.trim.call$1(str)));
      }, null, null, 2, 0, null, 4, "call"]
    },
    ObservatoryConnection__init_closure1: {
      "^": "Closure:0;trim",
      call$1: [function(str) {
        if ($.$get$_logger10().isLoggable$1(C.Level_FINER_400))
          $.$get$_logger10().fine$1("<== " + H.S(this.trim.call$1(str)));
      }, null, null, 2, 0, null, 4, "call"]
    },
    ObservatoryConnection__init_closure2: {
      "^": "Closure:23;$this",
      call$1: [function(e) {
        var json, t1, t2, loggerName, message, $name;
        json = J.$index$asx(J.get$json$x(e), "logRecord");
        t1 = J.getInterceptor$asx(json);
        t2 = P.LinkedHashMap_LinkedHashMap$from(t1.$index(json, "loggerName"), null, null);
        loggerName = S.InstanceRef$_fromJson(t2);
        t1 = P.LinkedHashMap_LinkedHashMap$from(t1.$index(json, "message"), null, null);
        message = S.InstanceRef$_fromJson(t1);
        $name = loggerName.valueAsString;
        t1 = $name == null || J.get$isEmpty$asx($name) === true;
        t2 = this.$this.launch;
        if (t1) {
          t1 = H.S(message.valueAsString) + "\n";
          t2 = t2._stdio;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(new X.TextFragment(t1, false, false, true));
        } else {
          t1 = "[" + H.S($name) + "] " + H.S(message.valueAsString) + "\n";
          t2 = t2._stdio;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(new X.TextFragment(t1, false, false, true));
        }
      }, null, null, 2, 0, null, 0, "call"]
    },
    ObservatoryConnection__init_closure3: {
      "^": "Closure:128;",
      call$1: [function(ver) {
        $.$get$_logger10().fine$1("Observatory version " + H.S(ver.get$major()) + "." + H.S(ver.get$minor()) + ".");
      }, null, null, 2, 0, null, 65, "call"]
    },
    ObservatoryConnection__init_closure4: {
      "^": "Closure:23;$this",
      call$1: [function(e) {
        var t1, t2;
        t1 = e.get$bytes();
        t1 = P.String_String$fromCharCodes(C.Base64Codec_Base64Encoder_false.get$decoder().convert$1(t1), 0, null);
        t2 = this.$this.launch._stdio;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(new X.TextFragment(t1, false, false, false));
      }, null, null, 2, 0, null, 0, "call"]
    },
    ObservatoryConnection__init_closure5: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        this.$this.stdoutSupported = false;
        return false;
      }, null, null, 2, 0, null, 1, "call"]
    },
    ObservatoryConnection__init_closure6: {
      "^": "Closure:23;$this",
      call$1: [function(e) {
        var t1, t2;
        t1 = e.get$bytes();
        t1 = P.String_String$fromCharCodes(C.Base64Codec_Base64Encoder_false.get$decoder().convert$1(t1), 0, null);
        t2 = this.$this.launch._stdio;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(new X.TextFragment(t1, true, false, false));
      }, null, null, 2, 0, null, 0, "call"]
    },
    ObservatoryConnection__init_closure7: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        this.$this.stderrSupported = false;
        return false;
      }, null, null, 2, 0, null, 1, "call"]
    },
    ObservatoryConnection__init_closure8: {
      "^": "Closure:129;$this",
      call$1: [function(vm) {
        var dart, t1, t2;
        dart = J.get$version$x(vm);
        t1 = J.getInterceptor$asx(dart);
        if (t1.contains$1(dart, " ") === true)
          dart = t1.substring$2(dart, 0, t1.indexOf$1(dart, " "));
        t1 = this.$this;
        t2 = t1.metadata;
        t2.set$value(0, H.S(vm.get$targetCPU()) + " \u2022 " + H.S(vm.get$hostCPU()) + " \u2022 Dart " + H.S(dart));
        $.$get$_logger10().info$1("Connected to " + H.S(t2._utils$_value));
        return t1._registerNewIsolates$1(vm.get$isolates());
      }, null, null, 2, 0, null, 104, "call"]
    },
    ObservatoryConnection__installBreakpoints_closure: {
      "^": "Closure:130;_bps",
      call$2: function(atomBreakpoint, vmBreakpoint) {
        var t1 = this._bps;
        if (!t1.containsKey$1(0, atomBreakpoint))
          t1.$indexSet(0, atomBreakpoint, H.setRuntimeTypeInfo([], [S.Breakpoint]));
        t1.$index(0, atomBreakpoint).push(vmBreakpoint);
      }
    },
    ObservatoryConnection__installBreakpoints_closure0: {
      "^": "Closure:11;$this,isolate,addBreakpoint",
      call$1: [function(bp) {
        var t1 = this.$this;
        t1.uriResolver.resolvePathToUris$1(J.get$path$x(bp)).then$1(new D.ObservatoryConnection__installBreakpoints__closure1(t1, this.isolate, this.addBreakpoint, bp)).catchError$1(new D.ObservatoryConnection__installBreakpoints__closure2(bp));
      }, null, null, 2, 0, null, 25, "call"]
    },
    ObservatoryConnection__installBreakpoints__closure1: {
      "^": "Closure:33;$this,isolate,addBreakpoint,bp",
      call$1: [function(uris) {
        return P.Future_forEach(uris, new D.ObservatoryConnection__installBreakpoints___closure0(this.$this, this.isolate, this.addBreakpoint, this.bp));
      }, null, null, 2, 0, null, 66, "call"]
    },
    ObservatoryConnection__installBreakpoints___closure0: {
      "^": "Closure:3;$this,isolate,addBreakpoint,bp",
      call$1: function(uri) {
        var t1 = this.bp;
        return this.$this.service.addBreakpointWithScriptUri$4$column(J.get$id$x(this.isolate), uri, J.get$line$x(t1), t1.get$column()).then$1(new D.ObservatoryConnection__installBreakpoints____closure1(this.addBreakpoint, t1)).catchError$1(new D.ObservatoryConnection__installBreakpoints____closure2());
      }
    },
    ObservatoryConnection__installBreakpoints____closure1: {
      "^": "Closure:67;addBreakpoint,bp",
      call$1: [function(vmBreakpoint) {
        this.addBreakpoint.call$2(this.bp, vmBreakpoint);
      }, null, null, 2, 0, null, 67, "call"]
    },
    ObservatoryConnection__installBreakpoints____closure2: {
      "^": "Closure:0;",
      call$1: [function(e) {
      }, null, null, 2, 0, null, 0, "call"]
    },
    ObservatoryConnection__installBreakpoints__closure2: {
      "^": "Closure:0;bp",
      call$1: [function(e) {
        $.$get$_logger10().info$2("error resolving uri: " + H.S(J.get$path$x(this.bp)), H.S(e));
      }, null, null, 2, 0, null, 0, "call"]
    },
    ObservatoryConnection__installBreakpoints_closure1: {
      "^": "Closure:11;$this,isolate,_bps",
      call$1: [function(bp) {
        var breakpoints, t1, t2, t3, t4, _i, vmBreakpoint;
        breakpoints = this._bps.$index(0, bp);
        if (breakpoints != null)
          for (t1 = breakpoints.length, t2 = this.$this.service, t3 = this.isolate, t4 = J.getInterceptor$x(t3), _i = 0; _i < breakpoints.length; breakpoints.length === t1 || (0, H.throwConcurrentModificationError)(breakpoints), ++_i) {
            vmBreakpoint = breakpoints[_i];
            t2._vm_service_lib$_call$2(0, "removeBreakpoint", P.LinkedHashMap__makeLiteral(["isolateId", t4.get$id(t3), "breakpointId", J.get$id$x(vmBreakpoint)])).catchError$1(new D.ObservatoryConnection__installBreakpoints__closure0());
          }
      }, null, null, 2, 0, null, 25, "call"]
    },
    ObservatoryConnection__installBreakpoints__closure0: {
      "^": "Closure:0;",
      call$1: [function(e) {
        $.$get$_logger10().info$2("error removing breakpoint", e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    ObservatoryConnection__installBreakpoints_closure2: {
      "^": "Closure:11;$this,isolate,addBreakpoint",
      call$1: function(bp) {
        var t1;
        if (bp.fileExists$0() !== true)
          return;
        t1 = this.$this;
        return t1.uriResolver.resolvePathToUris$1(J.get$path$x(bp)).then$1(new D.ObservatoryConnection__installBreakpoints__closure(t1, this.isolate, this.addBreakpoint, bp));
      }
    },
    ObservatoryConnection__installBreakpoints__closure: {
      "^": "Closure:33;$this,isolate,addBreakpoint,bp",
      call$1: [function(uris) {
        return P.Future_forEach(uris, new D.ObservatoryConnection__installBreakpoints___closure(this.$this, this.isolate, this.addBreakpoint, this.bp));
      }, null, null, 2, 0, null, 66, "call"]
    },
    ObservatoryConnection__installBreakpoints___closure: {
      "^": "Closure:3;$this,isolate,addBreakpoint,bp",
      call$1: function(uri) {
        var t1 = this.bp;
        return this.$this.service.addBreakpointWithScriptUri$4$column(J.get$id$x(this.isolate), uri, J.get$line$x(t1), t1.get$column()).then$1(new D.ObservatoryConnection__installBreakpoints____closure(this.addBreakpoint, t1)).catchError$1(new D.ObservatoryConnection__installBreakpoints____closure0());
      }
    },
    ObservatoryConnection__installBreakpoints____closure: {
      "^": "Closure:67;addBreakpoint,bp",
      call$1: [function(vmBreakpoint) {
        this.addBreakpoint.call$2(this.bp, vmBreakpoint);
      }, null, null, 2, 0, null, 67, "call"]
    },
    ObservatoryConnection__installBreakpoints____closure0: {
      "^": "Closure:0;",
      call$1: [function(e) {
      }, null, null, 2, 0, null, 0, "call"]
    },
    ObservatoryConnection__installBreakpoints_closure3: {
      "^": "Closure:0;$this,isolate",
      call$1: [function(_) {
        var t1 = this.$this;
        return t1.service._vm_service_lib$_call$2(0, "setExceptionPauseMode", P.LinkedHashMap__makeLiteral(["isolateId", J.get$id$x(this.isolate), "mode", t1._getExceptionPauseMode$0()]));
      }, null, null, 2, 0, null, 1, "call"]
    },
    ObservatoryConnection__handleIsolateEvent_closure: {
      "^": "Closure:0;$this,ref",
      call$1: [function(_) {
        this.$this._updateIsolateMetadata$1(this.ref).then$1(new D.ObservatoryConnection__handleIsolateEvent__closure());
      }, null, null, 2, 0, null, 1, "call"]
    },
    ObservatoryConnection__handleIsolateEvent__closure: {
      "^": "Closure:65;",
      call$1: [function(obsIsolate) {
        obsIsolate.get$isolate().set$runnable(true);
        if (obsIsolate.get$_wasPauseAtStart())
          obsIsolate.get$_isolateInitializedCompleter().future.then$1(new D.ObservatoryConnection__handleIsolateEvent___closure(obsIsolate));
      }, null, null, 2, 0, null, 49, "call"]
    },
    ObservatoryConnection__handleIsolateEvent___closure: {
      "^": "Closure:0;obsIsolate",
      call$1: [function(_) {
        this.obsIsolate._performInitialResume$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    ObservatoryConnection__handleDebugEvent_closure: {
      "^": "Closure:65;",
      call$1: [function(obsIsolate) {
        obsIsolate.set$_wasPauseAtStart(true);
        obsIsolate.get$_isolateInitializedCompleter().future.then$1(new D.ObservatoryConnection__handleDebugEvent__closure(obsIsolate));
      }, null, null, 2, 0, null, 49, "call"]
    },
    ObservatoryConnection__handleDebugEvent__closure: {
      "^": "Closure:0;obsIsolate",
      call$1: [function(_) {
        this.obsIsolate._performInitialResume$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    ObservatoryConnection__handleDebugEvent_closure0: {
      "^": "Closure:0;event,isolate",
      call$1: [function(_) {
        var t1, asyncSuspension;
        t1 = this.event;
        asyncSuspension = t1.get$atAsyncSuspension() == null ? false : t1.get$atAsyncSuspension();
        this.isolate._suspend$2$pausedAtAsyncSuspension(true, asyncSuspension);
      }, null, null, 2, 0, null, 1, "call"]
    },
    ObservatoryConnection__registerNewIsolate_closure: {
      "^": "Closure:133;$this,ref,isolate",
      call$1: [function(_) {
        if (this.isolate.get$_runnable())
          return this.$this._installBreakpoints$1(this.ref);
      }, function() {
        return this.call$1(null);
      }, "call$0", null, null, null, 0, 2, null, 2, 1, "call"]
    },
    ObservatoryConnection__registerNewIsolate_closure0: {
      "^": "Closure:0;$this,isolate",
      call$1: [function(_) {
        var t1, t2;
        t1 = this.isolate;
        t1._isolateInitializedCompleter.complete$0(0);
        t2 = J.get$pauseEvent$x(t1.isolate);
        if (J.$eq$(t2 == null ? t2 : J.get$kind$x(t2), "PauseStart"))
          t1._performInitialResume$0();
        t2 = this.$this._isolateCreatedController;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(t1);
        return t1;
      }, null, null, 2, 0, null, 1, "call"]
    },
    ObservatoryConnection__printExceptionToConsole_closure: {
      "^": "Closure:69;$this",
      call$1: [function(result) {
        var str, t1, t2;
        str = J.get$valueAsString$x(result);
        t1 = '"' + J.trimRight$0$s(result.get$valueIsTruncated() === true ? J.$add$ns(str, "\u2026") : str) + '"\n';
        t2 = this.$this.launch._stdio;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(new X.TextFragment(t1, true, false, false));
      }, null, null, 2, 0, null, 3, "call"]
    },
    ObservatoryConnection__printExceptionToConsole_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(e) {
        var t1;
        $.$get$_logger10().info$1("Error invoking toString on exception: " + H.S(e));
        t1 = this.$this.launch._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment("\n", true, false, false));
      }, null, null, 2, 0, null, 0, "call"]
    },
    ObservatoryLog: {
      "^": "Log;logger",
      warning$1: function(message) {
        return this.logger.warning$1(message);
      },
      severe$1: function(message) {
        return this.logger.severe$1(message);
      }
    },
    ObservatoryIsolate: {
      "^": "DebugIsolate;connection,service,isolateRef,_isolateInitializedCompleter<,isolate<,scriptManager,suspended<,suspendedAtAsyncSuspension,_didInitialResume,_wasPauseAtStart@,_detail,frames<",
      get$name: function(_) {
        return J.get$name$x(this.isolateRef);
      },
      get$displayName: function() {
        var t1, t2;
        t1 = this.isolateRef;
        t2 = J.getInterceptor$x(t1);
        return J.contains$1$asx(t2.get$name(t1), "$") === true ? J.replaceAll$2$s(t2.get$name(t1), "$", ":") + "()" : t2.get$name(t1);
      },
      get$detail: function(_) {
        return this._detail;
      },
      get$id: function(_) {
        return J.get$id$x(this.isolateRef);
      },
      get$libraries: function() {
        var t1 = this.isolate;
        if (t1 == null)
          return [];
        if (t1.get$libraries() == null)
          return [];
        return J.map$1$ax(this.isolate.get$libraries(), new D.ObservatoryIsolate_libraries_closure()).toList$0(0);
      },
      get$_runnable: function() {
        return this.isolate.get$runnable() == null || J.$eq$(this.isolate.get$runnable(), true);
      },
      _suspend$2$pausedAtAsyncSuspension: function(paused, pausedAtAsyncSuspension) {
        var t1, t2;
        if (!paused) {
          this.frames = null;
          this.suspendedAtAsyncSuspension = false;
        }
        this.suspended = paused;
        this.suspendedAtAsyncSuspension = pausedAtAsyncSuspension;
        t1 = this.connection;
        if (paused) {
          t2 = t1._isolatePaused;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(this);
        } else {
          t2 = t1._isolateResumed;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(this);
        }
        if (this.suspended)
          t1.isolates.setSelection$1(this);
      },
      pause$0: function(_) {
        return this.service._vm_service_lib$_call$2(0, "pause", P.LinkedHashMap__makeLiteral(["isolateId", J.get$id$x(this.isolateRef)]));
      },
      resume$0: function(_) {
        return this.service.resume$1(0, J.get$id$x(this.isolateRef));
      },
      stepIn$0: function() {
        return this.service.resume$2$step(0, J.get$id$x(this.isolateRef), "Into");
      },
      stepOver$0: function() {
        return this.service.resume$2$step(0, J.get$id$x(this.isolateRef), "Over");
      },
      stepOut$0: function() {
        return this.service.resume$2$step(0, J.get$id$x(this.isolateRef), "Out");
      },
      autoStepOver$0: function() {
        var t1, t2;
        t1 = this.service;
        t2 = this.isolateRef;
        return this.suspendedAtAsyncSuspension === true ? t1.resume$2$step(0, J.get$id$x(t2), "OverAsyncSuspension") : t1.resume$2$step(0, J.get$id$x(t2), "Over");
      },
      _updateIsolateInfo$0: function() {
        return this.service._vm_service_lib$_call$2(0, "getIsolate", P.LinkedHashMap__makeLiteral(["isolateId", J.get$id$x(this.isolateRef)])).then$1(new D.ObservatoryIsolate__updateIsolateInfo_closure(this));
      },
      _populateFrames$1$exception: function(exception) {
        var t1 = {};
        t1.exception = exception;
        return this.service._vm_service_lib$_call$2(0, "getStack", P.LinkedHashMap__makeLiteral(["isolateId", J.get$id$x(this.isolateRef)])).then$1(new D.ObservatoryIsolate__populateFrames_closure(t1, this));
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(J.get$id$x(this.isolateRef));
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof D.ObservatoryIsolate))
          return false;
        return J.$eq$(J.get$id$x(this.isolateRef), J.get$id$x(other.isolateRef));
      },
      toString$0: function(_) {
        return "Isolate " + H.S(J.get$name$x(this.isolateRef));
      },
      _performInitialResume$0: function() {
        if (this._didInitialResume)
          return;
        if (this.isolate != null && this.get$_runnable()) {
          this._didInitialResume = true;
          this.service.resume$1(0, J.get$id$x(this.isolateRef));
        }
      }
    },
    ObservatoryIsolate_libraries_closure: {
      "^": "Closure:0;",
      call$1: [function(libraryRef) {
        return new D.ObservatoryLibrary(libraryRef, null);
      }, null, null, 2, 0, null, 108, "call"]
    },
    ObservatoryIsolate__updateIsolateInfo_closure: {
      "^": "Closure:134;$this",
      call$1: [function(isolate) {
        var t1 = this.$this;
        t1.isolate = isolate;
        return t1;
      }, null, null, 2, 0, null, 13, "call"]
    },
    ObservatoryIsolate__populateFrames_closure: {
      "^": "Closure:135;_box_0,$this",
      call$1: [function(stack) {
        var scriptRefs, t1;
        scriptRefs = [];
        t1 = this.$this;
        t1.frames = J.map$1$ax(stack.get$frames(), new D.ObservatoryIsolate__populateFrames__closure(this._box_0, t1, scriptRefs)).toList$0(0);
        return t1.scriptManager.loadAllScripts$1(scriptRefs);
      }, null, null, 2, 0, null, 109, "call"]
    },
    ObservatoryIsolate__populateFrames__closure: {
      "^": "Closure:136;_box_0,$this,scriptRefs",
      call$1: [function(frame) {
        var t1, t2, obsFrame, t3, t4, exceptionVariable;
        this.scriptRefs.push(J.get$location$x(frame).get$script());
        t1 = this.$this;
        t2 = this._box_0;
        obsFrame = new D.ObservatoryFrame(t1, frame, t2.exception != null, null, null);
        t3 = P.List_List$from(J.map$1$ax(frame.get$vars(), new D.ObservatoryIsolate__populateFrames___closure(t1)), true, null);
        obsFrame.locals = t3;
        t4 = t2.exception;
        if (t4 != null) {
          exceptionVariable = new S.BoundVariable(null, null, null, null, null);
          exceptionVariable.name = "exception";
          exceptionVariable.value = t4;
          C.JSArray_methods.insert$2(t3, 0, new D.ObservatoryVariable(exceptionVariable, D.ObservatoryVariable__createValue(t1, exceptionVariable)));
          t2.exception = null;
        }
        return obsFrame;
      }, null, null, 2, 0, null, 64, "call"]
    },
    ObservatoryIsolate__populateFrames___closure: {
      "^": "Closure:137;$this",
      call$1: [function(v) {
        return new D.ObservatoryVariable(v, D.ObservatoryVariable__createValue(this.$this, v));
      }, null, null, 2, 0, null, 18, "call"]
    },
    ObservatoryFrame: {
      "^": "DebugFrame;isolate<,frame,isExceptionFrame<,locals<,_location",
      get$title: function(_) {
        return D.printFunctionNameRecursive(this.frame.get$$function(), false);
      },
      get$isSystem: function() {
        var t1 = this.get$location(this);
        return J.startsWith$1$s(t1.location.get$script().get$uri(), "dart:") || t1._unableToResolve;
      },
      get$location: function(_) {
        var t1 = this._location;
        if (t1 == null) {
          t1 = new D.ObservatoryLocation(this.isolate, J.get$location$x(this.frame), null, false, null, null, false);
          this._location = t1;
        }
        return t1;
      },
      eval$1: function(expression) {
        var t1 = this.isolate;
        return t1.service._vm_service_lib$_call$2(0, "evaluateInFrame", P.LinkedHashMap__makeLiteral(["isolateId", J.get$id$x(t1.isolateRef), "frameIndex", J.get$index$x(this.frame), "expression", expression])).then$1(new D.ObservatoryFrame_eval_closure());
      }
    },
    ObservatoryFrame_eval_closure: {
      "^": "Closure:0;",
      call$1: [function(result) {
        if (result instanceof S.ErrorRef)
          throw H.wrapException(result.message);
        else
          return D._refToString(result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    ObservatoryVariable: {
      "^": "DebugVariable;_variable,value>",
      get$name: function(_) {
        return J.get$name$x(this._variable);
      },
      toString$0: function(_) {
        return "ObservatoryVariable " + H.S(J.get$name$x(this._variable));
      },
      static: {
        ObservatoryVariable__createValue: function(isolate, variable) {
          var t1 = J.getInterceptor$x(variable);
          if (t1.get$value(variable) instanceof S.InstanceRef)
            return new D.ObservatoryInstanceRefValue(isolate, t1.get$value(variable));
          else if (t1.get$value(variable) instanceof S.Sentinel)
            return new D.SentinelDebugValue(t1.get$value(variable));
          else
            return;
        }
      }
    },
    ObservatoryFieldVariable: {
      "^": "DebugVariable;_field,value>",
      get$name: function(_) {
        return J.get$name$x(this._field.get$decl());
      },
      static: {
        ObservatoryFieldVariable__createValue: function(isolate, field) {
          var t1 = J.getInterceptor$x(field);
          if (t1.get$value(field) instanceof S.InstanceRef)
            return new D.ObservatoryInstanceRefValue(isolate, t1.get$value(field));
          else if (t1.get$value(field) instanceof S.Sentinel)
            return new D.SentinelDebugValue(t1.get$value(field));
          else
            return;
        }
      }
    },
    ObservatoryMapVariable: {
      "^": "DebugVariable;isolate<,association,_observatory_debugger$_value",
      get$name: function(_) {
        return H.S(D._instanceToString(J.get$key$x(this.association))) + ":";
      },
      get$value: function(_) {
        return this._observatory_debugger$_value;
      }
    },
    ObservatoryArrayVariable: {
      "^": "DebugVariable;isolate<,index>,_observatory_debugger$_value",
      get$name: function(_) {
        return "[" + this.index + "]";
      },
      get$value: function(_) {
        return this._observatory_debugger$_value;
      }
    },
    ObservatoryCustomVariable: {
      "^": "DebugVariable;name>,value>"
    },
    ObservatoryObjRefVariable: {
      "^": "DebugVariable;isolate<,name>,_observatory_debugger$_value",
      get$value: function(_) {
        return this._observatory_debugger$_value;
      },
      ObservatoryObjRefVariable$3: function(isolate, $name, ref) {
        var t1 = J.getInterceptor(ref);
        if (!!t1.$isSentinel)
          this._observatory_debugger$_value = new D.SentinelDebugValue(ref);
        else if (!!t1.$isObjRef)
          this._observatory_debugger$_value = new D.ObservatoryObjRefValue(this.isolate, ref);
        else
          $.$get$_logger10().severe$1("Invalid ObservatoryObjRefVariable ref: " + H.S(ref));
      },
      static: {
        ObservatoryObjRefVariable$: function(isolate, $name, ref) {
          var t1 = new D.ObservatoryObjRefVariable(isolate, $name, null);
          t1.ObservatoryObjRefVariable$3(isolate, $name, ref);
          return t1;
        }
      }
    },
    ObservatoryInstanceRefValue: {
      "^": "DebugValue;isolate<,value>",
      get$className: function(_) {
        return J.get$name$x(this.value.get$classRef());
      },
      get$isPrimitive: function() {
        var kind, t1;
        kind = J.get$kind$x(this.value);
        t1 = J.getInterceptor(kind);
        return t1.$eq(kind, "Null") || t1.$eq(kind, "Bool") || t1.$eq(kind, "Double") || t1.$eq(kind, "Int") || t1.$eq(kind, "String");
      },
      get$isString: function() {
        return J.$eq$(J.get$kind$x(this.value), "String");
      },
      get$isPlainInstance: function() {
        return J.$eq$(J.get$kind$x(this.value), "PlainInstance");
      },
      get$isList: function() {
        return J.$eq$(J.get$kind$x(this.value), "List");
      },
      get$isMap: function(_) {
        return J.$eq$(J.get$kind$x(this.value), "Map");
      },
      get$valueIsTruncated: function() {
        var t1 = this.value;
        return t1.get$valueAsStringIsTruncated() == null ? false : t1.get$valueAsStringIsTruncated();
      },
      get$itemsLength: function() {
        return J.get$length$asx(this.value);
      },
      getChildren$0: function() {
        var t1 = this.isolate;
        return t1.service.getObject$2(0, J.get$id$x(t1.isolateRef), J.get$id$x(this.value)).then$1(new D.ObservatoryInstanceRefValue_getChildren_closure(this));
      },
      invokeToString$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, t3, t4, result, t5;
        var $async$invokeToString$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.isolate;
                t2 = t1.service;
                t3 = t1.isolateRef;
                t4 = J.getInterceptor$x(t3);
                $async$goto = 3;
                return P._asyncHelper(t2._vm_service_lib$_call$2(0, "evaluate", P.LinkedHashMap__makeLiteral(["isolateId", t4.get$id(t3), "targetId", J.get$id$x($async$self.value), "expression", "toString()"])), $async$invokeToString$0, $async$completer);
              case 3:
                // returning from await.
                result = $async$result;
                t5 = J.getInterceptor(result);
                if (!!t5.$isSentinel) {
                  $async$returnValue = new D.SentinelDebugValue(result);
                  // goto return
                  $async$goto = 1;
                  break;
                } else if (!!t5.$isInstanceRef)
                  if (J.$eq$(result.kind, "String") && J.$eq$(result.valueAsStringIsTruncated, true)) {
                    $async$returnValue = t2.getObject$2(0, t4.get$id(t3), result.id).then$1(new D.ObservatoryInstanceRefValue_invokeToString_closure($async$self));
                    // goto return
                    $async$goto = 1;
                    break;
                  } else {
                    $async$returnValue = new D.ObservatoryInstanceRefValue(t1, result);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                else if (!!t5.$isErrorRef)
                  throw H.wrapException(result.message);
                else
                  throw H.wrapException("unexpected result type: " + H.S(result));
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$invokeToString$0, $async$completer);
      },
      get$valueAsString: function(_) {
        var t1, t2;
        t1 = this.value;
        t2 = J.getInterceptor$x(t1);
        if (t2.get$valueAsString(t1) != null)
          return t2.get$valueAsString(t1);
        if (J.$eq$(t2.get$kind(t1), "Closure"))
          return "() =>";
        return;
      },
      toString$0: function(_) {
        return "ObservatoryValue " + H.S(J.get$name$x(this.value.get$classRef()));
      }
    },
    ObservatoryInstanceRefValue_getChildren_closure: {
      "^": "Closure:0;$this",
      call$1: [function(ret) {
        var results, elements, t1, t2, i, t3, t4, t5, $function;
        if (ret instanceof S.Instance)
          if (J.$eq$(ret.kind, "Map"))
            return J.map$1$ax(ret.associations, new D.ObservatoryInstanceRefValue_getChildren__closure(this.$this)).toList$0(0);
          else if (J.$eq$(ret.kind, "List")) {
            results = [];
            elements = ret.elements;
            t1 = J.getInterceptor$asx(elements);
            t2 = this.$this.isolate;
            i = 0;
            while (true) {
              t3 = t1.get$length(elements);
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (!(i < t3))
                break;
              t3 = t1.$index(elements, i);
              t4 = new D.ObservatoryArrayVariable(t2, i, null);
              t5 = J.getInterceptor(t3);
              if (!!t5.$isInstanceRef)
                t4._observatory_debugger$_value = new D.ObservatoryInstanceRefValue(t2, t3);
              else if (!!t5.$isSentinel)
                t4._observatory_debugger$_value = new D.SentinelDebugValue(t3);
              results.push(t4);
              ++i;
            }
            return results;
          } else if (J.$eq$(ret.kind, "PlainInstance"))
            return J.map$1$ax(ret.fields, new D.ObservatoryInstanceRefValue_getChildren__closure0(this.$this)).toList$0(0);
          else {
            t1 = this.$this;
            if (J.$eq$(ret.kind, "Closure")) {
              results = [];
              $function = ret.closureFunction;
              results.push(new D.ObservatoryCustomVariable("name", new D.SimpleDebugValue(D.printFunctionName($function, false))));
              results.push(D.ObservatoryObjRefVariable$(t1.isolate, "owner", $function.get$owner()));
              return results;
            } else {
              $.$get$_logger10().info$1("unhandled debugger type: " + H.S(ret.kind));
              return J.map$1$ax(ret.fields, new D.ObservatoryInstanceRefValue_getChildren__closure1(t1)).toList$0(0);
            }
          }
        else
          return [];
      }, null, null, 2, 0, null, 110, "call"]
    },
    ObservatoryInstanceRefValue_getChildren__closure: {
      "^": "Closure:138;$this",
      call$1: [function(association) {
        var t1, t2;
        t1 = this.$this.isolate;
        t2 = new D.ObservatoryMapVariable(t1, association, null);
        t2._observatory_debugger$_value = new D.ObservatoryInstanceRefValue(t1, J.get$value$x(association));
        return t2;
      }, null, null, 2, 0, null, 111, "call"]
    },
    ObservatoryInstanceRefValue_getChildren__closure0: {
      "^": "Closure:64;$this",
      call$1: [function(field) {
        return new D.ObservatoryFieldVariable(field, D.ObservatoryFieldVariable__createValue(this.$this.isolate, field));
      }, null, null, 2, 0, null, 80, "call"]
    },
    ObservatoryInstanceRefValue_getChildren__closure1: {
      "^": "Closure:64;$this",
      call$1: [function(field) {
        return new D.ObservatoryFieldVariable(field, D.ObservatoryFieldVariable__createValue(this.$this.isolate, field));
      }, null, null, 2, 0, null, 80, "call"]
    },
    ObservatoryInstanceRefValue_invokeToString_closure: {
      "^": "Closure:0;$this",
      call$1: [function(result) {
        var t1, ref;
        t1 = J.getInterceptor(result);
        if (!!t1.$isSentinel)
          return new D.SentinelDebugValue(result);
        else if (!!t1.$isInstanceRef)
          return new D.ObservatoryInstanceRefValue(this.$this.isolate, result);
        else if (!!t1.$isInstance) {
          ref = new S.InstanceRef(null, null, null, null, null, null, null, null, null, null, null, null);
          ref.type = result.type;
          ref.id = result.id;
          ref.kind = result.kind;
          ref.classRef = result.classRef;
          ref.valueAsString = result.valueAsString;
          ref.valueAsStringIsTruncated = result.valueAsStringIsTruncated;
          ref.length = result.length;
          ref.name = result.name;
          ref.typeClass = result.typeClass;
          ref.parameterizedClass = result.parameterizedClass;
          return new D.ObservatoryInstanceRefValue(this.$this.isolate, ref);
        } else if (!!t1.$isErrorRef)
          return P.Future_Future$error(result.message, null, null);
        else
          return P.Future_Future$error("unexpected result type: " + H.S(result), null, null);
      }, null, null, 2, 0, null, 3, "call"]
    },
    ObservatoryObjRefValue: {
      "^": "DebugValue;isolate<,ref",
      get$className: function(_) {
        return new H.TypeImpl(H.getRuntimeTypeString(this.ref), null).toString$0(0);
      },
      get$isPrimitive: function() {
        if (!!this.ref.$isFuncRef)
          return false;
        return true;
      },
      get$isString: function() {
        return false;
      },
      get$isPlainInstance: function() {
        return false;
      },
      get$isList: function() {
        return false;
      },
      get$isMap: function(_) {
        return false;
      },
      get$valueIsTruncated: function() {
        return false;
      },
      get$itemsLength: function() {
        return;
      },
      getChildren$0: function() {
        var t1, results, t2;
        t1 = this.ref;
        if (!!t1.$isFuncRef) {
          results = [];
          results.push(new D.ObservatoryCustomVariable("name", new D.SimpleDebugValue(D.printFunctionName(t1, false))));
          results.push(D.ObservatoryObjRefVariable$(this.isolate, "owner", t1.get$owner()));
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(results);
          return t1;
        } else {
          t2 = [null];
          if (!!t1.$isLibraryRef) {
            results = [];
            results.push(new D.ObservatoryCustomVariable("name", new D.SimpleDebugValue(t1.get$name(t1))));
            results.push(new D.ObservatoryCustomVariable("uri", new D.SimpleDebugValue(t1.get$uri())));
            t1 = new P._Future(0, $.Zone__current, null, t2);
            t1._asyncComplete$1(results);
            return t1;
          } else {
            t1 = new P._Future(0, $.Zone__current, null, t2);
            t1._asyncComplete$1([]);
            return t1;
          }
        }
      },
      invokeToString$0: function() {
        var t1, t2;
        t1 = this.get$valueAsString(this);
        t2 = new P._Future(0, $.Zone__current, null, [null]);
        t2._asyncComplete$1(new D.SimpleDebugValue(t1));
        return t2;
      },
      get$valueAsString: function(_) {
        var t1 = this.ref;
        if (!!t1.$isFuncRef)
          return D.printFunctionName(t1, false);
        if (!!t1.$isLibraryRef)
          return "Library " + H.S(B.getDisplayUri(H.interceptedTypeCast(t1, "$isLibraryRef").uri));
        return H.S(new H.TypeImpl(H.getRuntimeTypeString(t1), null).toString$0(0)) + " " + H.S(t1.id);
      }
    },
    SimpleDebugValue: {
      "^": "DebugValue;value>",
      get$className: function(_) {
        return J.get$runtimeType$(this.value).toString$0(0);
      },
      get$valueAsString: function(_) {
        var t1 = this.value;
        return typeof t1 === "string" ? t1 : H.S(t1);
      },
      get$isPrimitive: function() {
        return true;
      },
      get$isString: function() {
        return false;
      },
      get$isPlainInstance: function() {
        return false;
      },
      get$isList: function() {
        return false;
      },
      get$isMap: function(_) {
        return false;
      },
      get$valueIsTruncated: function() {
        return false;
      },
      get$itemsLength: function() {
        return;
      },
      getChildren$0: function() {
        var t1 = new P._Future(0, $.Zone__current, null, [null]);
        t1._asyncComplete$1([]);
        return t1;
      },
      invokeToString$0: function() {
        var t1 = new P._Future(0, $.Zone__current, null, [null]);
        t1._asyncComplete$1(this);
        return t1;
      }
    },
    SentinelDebugValue: {
      "^": "DebugValue;sentenial",
      get$className: function(_) {
        return;
      },
      get$isPrimitive: function() {
        return true;
      },
      get$isString: function() {
        return false;
      },
      get$isPlainInstance: function() {
        return false;
      },
      get$isList: function() {
        return false;
      },
      get$isMap: function(_) {
        return false;
      },
      get$valueIsTruncated: function() {
        return false;
      },
      get$itemsLength: function() {
        return;
      },
      getChildren$0: function() {
        var t1 = new P._Future(0, $.Zone__current, null, [null]);
        t1._asyncComplete$1([]);
        return t1;
      },
      invokeToString$0: function() {
        var t1, t2;
        t1 = J.get$valueAsString$x(this.sentenial);
        t2 = new P._Future(0, $.Zone__current, null, [null]);
        t2._asyncComplete$1(new D.SimpleDebugValue(t1));
        return t2;
      },
      get$valueAsString: function(_) {
        return J.get$valueAsString$x(this.sentenial);
      }
    },
    ObservatoryLocation: {
      "^": "DebugLocation;isolate<,location>,_observatory_debugger$_completer,_unableToResolve,_observatory_debugger$_path,_pos,resolved",
      get$path: function(_) {
        return this._observatory_debugger$_path;
      },
      get$line: function(_) {
        var t1 = this._pos;
        return t1 == null ? t1 : J.$index$asx(t1.obj, "row");
      },
      get$column: function() {
        var t1 = this._pos;
        return t1 == null ? t1 : J.$index$asx(t1.obj, "column");
      },
      get$displayPath: function() {
        return this.location.get$script().get$uri();
      },
      get$isSystem: function() {
        return J.startsWith$1$s(this.location.get$script().get$uri(), "dart:") || this._unableToResolve;
      },
      resolve$0: function() {
        if (this._observatory_debugger$_completer == null) {
          var t1 = Z.DebugLocation;
          this._observatory_debugger$_completer = new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [t1]), [t1]);
          this._resolve$0().then$1(new D.ObservatoryLocation_resolve_closure(this)).catchError$1(new D.ObservatoryLocation_resolve_closure0(this)).whenComplete$1(new D.ObservatoryLocation_resolve_closure1(this));
        }
        return this._observatory_debugger$_completer.future;
      },
      _resolve$0: function() {
        var t1, t2, t3, t4, script;
        t1 = this.isolate;
        t2 = t1.scriptManager;
        t3 = this.location;
        t4 = t3.get$script();
        script = t2._scripts.$index(0, J.get$id$x(t4));
        this._pos = D._calcPos(script, t3.get$tokenPos());
        t3 = script.uri;
        this._observatory_debugger$_path = t3;
        return t1.connection.uriResolver.resolveUriToPath$1(t3).then$1(new D.ObservatoryLocation__resolve_closure(this));
      },
      _checkCreateSystemScript$0: function() {
        var t1, t2, t3, t4, script, t5, safeNames, t6, t7, filePath;
        t1 = $.$get$fs();
        if (t1.invoke$2("existsSync", this._observatory_debugger$_path) === true)
          return;
        this._unableToResolve = true;
        t2 = this.isolate;
        t3 = t2.scriptManager;
        t4 = this.location.get$script();
        script = t3._scripts.$index(0, J.get$id$x(t4));
        t2 = t2.connection.sourceCache;
        t4 = this._observatory_debugger$_path;
        t3 = script.source;
        t5 = t2._pathMappings;
        if (!t5.containsKey$1(0, t4)) {
          safeNames = D._VmSourceCache__createSafePathNames(t4);
          t6 = safeNames.length;
          t2 = t2.cacheDir;
          if (t6 === 2) {
            if (0 >= t6)
              return H.ioore(safeNames, 0);
            t7 = safeNames[0];
            if (1 >= t6)
              return H.ioore(safeNames, 1);
            filePath = t1.join$3(0, t2, t7, safeNames[1]);
          } else {
            if (0 >= t6)
              return H.ioore(safeNames, 0);
            filePath = t1.join$2(0, t2, safeNames[0]);
          }
          new F.File(F._create("File", filePath, null)).invoke$2("writeSync", t3);
          t5.$indexSet(0, t4, filePath);
        }
        this._observatory_debugger$_path = t5.$index(0, t4);
      }
    },
    ObservatoryLocation_resolve_closure: {
      "^": "Closure:34;$this",
      call$1: [function(val) {
        this.$this._observatory_debugger$_completer.complete$1(0, val);
      }, null, null, 2, 0, null, 15, "call"]
    },
    ObservatoryLocation_resolve_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(e) {
        var t1 = this.$this;
        t1._observatory_debugger$_completer.complete$1(0, t1);
      }, null, null, 2, 0, null, 0, "call"]
    },
    ObservatoryLocation_resolve_closure1: {
      "^": "Closure:1;$this",
      call$0: [function() {
        var t1 = this.$this;
        t1.resolved = true;
        t1._checkCreateSystemScript$0();
      }, null, null, 0, 0, null, "call"]
    },
    ObservatoryLocation__resolve_closure: {
      "^": "Closure:3;$this",
      call$1: [function(path) {
        var t1 = this.$this;
        t1._observatory_debugger$_path = path;
        return t1;
      }, null, null, 2, 0, null, 69, "call"]
    },
    ObservatoryLibrary: {
      "^": "Object;_ref,_displayUri",
      get$name: function(_) {
        return J.get$name$x(this._ref);
      },
      get$uri: function() {
        return this._ref.get$uri();
      },
      get$displayUri: function() {
        var t1 = this._displayUri;
        if (t1 == null) {
          t1 = B.getDisplayUri(this._ref.get$uri());
          this._displayUri = t1;
        }
        return t1;
      },
      get$$private: function() {
        return J.startsWith$1$s(this._ref.get$uri(), "dart:_");
      },
      get$_observatory_debugger$_kind: function() {
        var t1 = this._ref;
        if (J.startsWith$1$s(t1.get$uri(), "dart:"))
          return 2;
        if (J.startsWith$1$s(t1.get$uri(), "package:") || J.startsWith$1$s(t1.get$uri(), "package/"))
          return 1;
        return 0;
      },
      compareTo$1: function(_, other) {
        var val = this.get$_observatory_debugger$_kind() - other.get$_observatory_debugger$_kind();
        if (val !== 0)
          return val;
        return J.compareTo$1$ns(this.get$displayUri(), other.get$displayUri());
      },
      $isComparable: 1,
      $asComparable: function() {
        return [D.ObservatoryLibrary];
      }
    },
    ScriptManager: {
      "^": "Object;service,isolate<,_scripts,_scriptCompleters",
      resolveScript$1: function(scriptRef) {
        var t1, t2, refId, completer;
        t1 = this._scripts;
        t2 = J.getInterceptor$x(scriptRef);
        if (t1.containsKey$1(0, t2.get$id(scriptRef))) {
          t1 = t1.$index(0, t2.get$id(scriptRef));
          t2 = new P._Future(0, $.Zone__current, null, [null]);
          t2._asyncComplete$1(t1);
          return t2;
        }
        refId = t2.get$id(scriptRef);
        t1 = this._scriptCompleters;
        if (t1.$index(0, refId) != null)
          return t1.$index(0, refId).future;
        t2 = new P._Future(0, $.Zone__current, null, [null]);
        completer = new P._AsyncCompleter(t2, [null]);
        t1.$indexSet(0, refId, completer);
        this.service.getObject$2(0, J.get$id$x(this.isolate.isolateRef), refId).then$1(new D.ScriptManager_resolveScript_closure(this, refId, completer)).catchError$1(new D.ScriptManager_resolveScript_closure0(completer)).whenComplete$1(new D.ScriptManager_resolveScript_closure1(this, refId));
        return t2;
      },
      loadAllScripts$1: function(refs) {
        var futures, t1, t2, _i, ref;
        futures = [];
        for (t1 = refs.length, t2 = this._scripts, _i = 0; _i < refs.length; refs.length === t1 || (0, H.throwConcurrentModificationError)(refs), ++_i) {
          ref = refs[_i];
          if (!t2.containsKey$1(0, J.get$id$x(ref)))
            futures.push(this.resolveScript$1(ref));
        }
        return P.Future_wait(futures, null, false);
      }
    },
    ScriptManager_resolveScript_closure: {
      "^": "Closure:0;$this,refId,completer",
      call$1: [function(result) {
        var t1 = this.completer;
        if (result instanceof S.Script) {
          this.$this._scripts.$indexSet(0, this.refId, result);
          t1.complete$1(0, result);
        } else
          t1.completeError$1(result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    ScriptManager_resolveScript_closure0: {
      "^": "Closure:0;completer",
      call$1: [function(e) {
        this.completer.completeError$1(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    ScriptManager_resolveScript_closure1: {
      "^": "Closure:1;$this,refId",
      call$0: [function() {
        this.$this._scriptCompleters.remove$1(0, this.refId);
      }, null, null, 0, 0, null, "call"]
    },
    _ObservatoryServiceWrapper: {
      "^": "Object;connection"
    },
    _VmSourceCache: {
      "^": "Object;cacheDir,_pathMappings",
      static: {
        _VmSourceCache__createSafePathNames: function(path) {
          var uri, temp, t1, t2, t3, exception, l;
          t1 = J.getInterceptor$asx(path);
          if (J.$gt$n(t1.indexOf$1(path, ":"), 1))
            try {
              uri = P.Uri_parse(path, 0, null);
              temp = J.get$path$x(uri);
              if (J.contains$1$asx(temp, "/")) {
                t2 = $.$get$fs();
                t3 = t2.dirname$1(temp);
                t2 = t2.basename$1(temp);
                return [t3, t2];
              } else {
                t2 = J.contains$1$asx(temp, ".") ? [temp] : [J.$add$ns(temp, ".dart")];
                return t2;
              }
            } catch (exception) {
              H.unwrapException(exception);
            }
          if (!J.$eq$(t1.indexOf$1(path, "\\"), -1)) {
            l = t1.split$1(path, "\\");
            t1 = l.length;
            if (t1 === 1)
              return l;
            else {
              t2 = t1 - 2;
              if (t2 < 0)
                return H.ioore(l, t2);
              t2 = l[t2];
              t3 = t1 - 1;
              if (t3 < 0)
                return H.ioore(l, t3);
              return [t2, l[t3]];
            }
          }
          l = t1.split$1(path, "/");
          t1 = l.length;
          if (t1 === 1)
            return l;
          else {
            t2 = t1 - 2;
            if (t2 < 0)
              return H.ioore(l, t2);
            t2 = l[t2];
            t3 = t1 - 1;
            if (t3 < 0)
              return H.ioore(l, t3);
            return [t2, l[t3]];
          }
        }
      }
    }
  }], ["", "package:atom_dartlang/debug/utils.dart",, B, {
    "^": "",
    debuggerCoordsToEditorRange: function(line, column) {
      var l, c;
      l = J.$sub$n(line, 1);
      c = column == null ? 0 : J.$sub$n(column, 1);
      return new Y.Range(Y._create0("Range", Y._create0("Point", l, c), Y._create0("Point", l, J.$add$ns(c, 1))));
    },
    getDisplayUri: function(uri) {
      var t1, path;
      if (uri == null)
        return;
      t1 = J.getInterceptor$s(uri);
      if (t1.startsWith$1(uri, "file:")) {
        path = P.Uri_parse(uri, 0, null).toFilePath$0();
        t1 = P.List_List$from($.$get$atom()._project.invoke$2("relativizePath", path), true, null);
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        return t1[1];
      } else if ($.$get$fs().invoke$2("existsSync", uri) === true) {
        t1 = P.List_List$from($.$get$atom()._project.invoke$2("relativizePath", uri), true, null);
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        return t1[1];
      } else if (t1.startsWith$1(uri, "packages/"))
        return "package:" + t1.substring$1(uri, 9);
      return uri;
    },
    LineColumn: {
      "^": "Object;line>,column<"
    }
  }], ["", "package:atom_dartlang/debug/websocket.dart",, F, {
    "^": "",
    WebSocket: {
      "^": "Object;_ws",
      get$onOpen: function(_) {
        var controller = P.StreamController_StreamController$broadcast(null, null, false, null);
        this._ws.callMethod$2("on", ["open", new F.WebSocket_onOpen_closure(controller)]);
        return new P._BroadcastStream(controller, [H.getTypeArgumentByIndex(controller, 0)]);
      },
      get$onMessage: function(_) {
        var controller = P.StreamController_StreamController$broadcast(null, null, false, F.MessageEvent);
        this._ws.callMethod$2("on", ["message", new F.WebSocket_onMessage_closure(controller)]);
        return new P._BroadcastStream(controller, [H.getTypeArgumentByIndex(controller, 0)]);
      },
      get$onError: function(_) {
        var controller = P.StreamController_StreamController$broadcast(null, null, false, null);
        this._ws.callMethod$2("on", ["error", new F.WebSocket_onError_closure(controller)]);
        return new P._BroadcastStream(controller, [H.getTypeArgumentByIndex(controller, 0)]);
      },
      get$onClose: function(_) {
        var controller = P.StreamController_StreamController$broadcast(null, null, false, null);
        this._ws.callMethod$2("on", ["close", new F.WebSocket_onClose_closure(controller)]);
        return new P._BroadcastStream(controller, [H.getTypeArgumentByIndex(controller, 0)]);
      },
      send$1: function(_, data) {
        this._ws.callMethod$2("send", [data]);
      },
      close$0: function(_) {
        this._ws.callMethod$1("close");
      }
    },
    WebSocket_onOpen_closure: {
      "^": "Closure:1;controller",
      call$0: [function() {
        var t1 = this.controller;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(null);
        return;
      }, null, null, 0, 0, null, "call"]
    },
    WebSocket_onMessage_closure: {
      "^": "Closure:4;controller",
      call$2: [function(data, flags) {
        var t1 = this.controller;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new F.MessageEvent(data, flags));
      }, null, null, 4, 0, null, 11, 144, "call"]
    },
    WebSocket_onError_closure: {
      "^": "Closure:0;controller",
      call$1: [function($event) {
        var t1 = this.controller;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1($event);
        return;
      }, null, null, 2, 0, null, 12, "call"]
    },
    WebSocket_onClose_closure: {
      "^": "Closure:4;controller",
      call$2: [function(code, message) {
        var t1 = this.controller;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(code);
        return;
      }, null, null, 4, 0, null, 14, 10, "call"]
    },
    MessageEvent: {
      "^": "Object;data>,flags<"
    }
  }], ["atom.editors", "package:atom_dartlang/editors.dart",, F, {
    "^": "",
    flashSelection: function(editor, range) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, original, t1;
      var $async$flashSelection = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              original = editor.getSelectedBufferRange$0();
              editor.setSelectedBufferRange$1(range);
              t1 = $.$get$_flashDuration();
              $async$goto = 3;
              return P._asyncHelper(P.Future_Future$delayed(t1, null, null), $async$flashSelection, $async$completer);
            case 3:
              // returning from await.
              editor.setSelectedBufferRange$1(original);
              $async$returnValue = P.Future_Future$delayed(t1, null, null);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$flashSelection, $async$completer);
    },
    applyEdits: function(editor, edits) {
      var buffer;
      F._sortEdits(edits);
      buffer = editor.getBuffer$0();
      buffer.atomic$1(new F.applyEdits_closure(edits, buffer));
    },
    selectEditGroup: function(editor, group) {
      var buffer, t1;
      buffer = editor.getBuffer$0();
      t1 = group.get$positions();
      t1.toString;
      editor.setSelectedBufferRanges$1(P.List_List$from(new H.MappedListIterable(t1, new F.selectEditGroup_closure(group, buffer), [null, null]), true, null));
    },
    _sortEdits: function(edits) {
      (edits && C.JSArray_methods).sort$1(edits, new F._sortEdits_closure());
    },
    applyEdits_closure: {
      "^": "Closure:1;edits,buffer",
      call$0: function() {
        var t1 = this.edits;
        (t1 && C.JSArray_methods).forEach$1(t1, new F.applyEdits__closure(this.buffer));
      }
    },
    applyEdits__closure: {
      "^": "Closure:51;buffer",
      call$1: function(edit) {
        var t1, t2;
        t1 = this.buffer;
        t2 = J.getInterceptor$x(edit);
        t2 = t1.invoke$3("setTextInRange", new Y.Range(Y._create0("Range", Y._cvt1(t1.invoke$2("positionForCharacterIndex", t2.get$offset(edit))), Y._cvt1(t1.invoke$2("positionForCharacterIndex", J.$add$ns(t2.get$offset(edit), t2.get$length(edit)))))), edit.get$replacement());
        if (!(t2 == null))
          Y._cvt1(t2);
      }
    },
    selectEditGroup_closure: {
      "^": "Closure:140;group,buffer",
      call$1: [function(position) {
        var t1, t2;
        t1 = this.buffer;
        t2 = J.getInterceptor$x(position);
        return new Y.Range(Y._create0("Range", Y._cvt1(t1.invoke$2("positionForCharacterIndex", t2.get$offset(position))), Y._cvt1(t1.invoke$2("positionForCharacterIndex", J.$add$ns(t2.get$offset(position), J.get$length$asx(this.group))))));
      }, null, null, 2, 0, null, 37, "call"]
    },
    _sortEdits_closure: {
      "^": "Closure:141;",
      call$2: function(a, b) {
        return J.$sub$n(J.get$offset$x(b), J.get$offset$x(a));
      }
    },
    EditorManager: {
      "^": "Object;dartEditors<,dartProjectEditors<",
      jumpToLocation$4: function(path, line, column, $length) {
        var options, t1, ed;
        options = P.LinkedHashMap__makeLiteral(["searchAllPanes", true]);
        if (line != null)
          options.$indexSet(0, "initialLine", line);
        if (column != null)
          options.$indexSet(0, "initialColumn", column);
        t1 = $.$get$atom();
        ed = t1._workspace.getActiveTextEditor$0();
        if (ed != null && J.$eq$(ed.invoke$1("getPath"), path))
          options.$indexSet(0, "searchAllPanes", false);
        return t1._workspace.openPending$2$options(path, options).then$1(new F.EditorManager_jumpToLocation_closure($length));
      },
      jumpToLocation$1: function(path) {
        return this.jumpToLocation$4(path, null, null, null);
      },
      jumpToLocation$3: function(path, line, column) {
        return this.jumpToLocation$4(path, line, column, null);
      },
      dispose$0: [function() {
        this.dartEditors.dispose$0();
        this.dartProjectEditors.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    EditorManager_jumpToLocation_closure: {
      "^": "Closure:8;length",
      call$1: [function(editor) {
        var t1 = this.length;
        if (t1 != null)
          editor.selectRight$1(t1);
        return editor;
      }, null, null, 2, 0, null, 9, "call"]
    },
    Editors: {
      "^": "Object;_matches,_editors$_editorObserve,_itemObserve,_editors$_subs,_editorOpenedController,_activeEditorController,_editorClosedController,_activeEditor,_openEditors",
      dispose$0: [function() {
        this._editors$_editorObserve.invoke$1("dispose");
        this._itemObserve.invoke$1("dispose");
        this._editors$_subs.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      _observeTextEditors$1: [function(editor) {
        var t1, t2, sub;
        t1 = {};
        if (this._matches.call$1(editor) === true) {
          this._openEditors.push(editor);
          t2 = this._editorOpenedController;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(editor);
          t1.sub = null;
          sub = editor.eventStream$1("onDidDestroy").listen$1(new F.Editors__observeTextEditors_closure(t1, this, editor));
          t1.sub = sub;
          this._editors$_subs._subscriptions.push(sub);
        }
      }, "call$1", "get$_observeTextEditors", 2, 0, 7],
      _observeActivePaneItem$1: [function(_) {
        var editor, t1;
        editor = $.$get$atom()._workspace.getActiveTextEditor$0();
        if (this._matches.call$1(editor) !== true)
          editor = null;
        this._activeEditor = editor;
        t1 = this._activeEditorController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(editor);
      }, function() {
        return this._observeActivePaneItem$1(null);
      }, "_observeActivePaneItem$0", "call$1", "call$0", "get$_observeActivePaneItem", 0, 2, 14, 2],
      Editors$_allDartEditors$0: function() {
        this._matches = F.editors_Editors__isDartTypeEditor$closure();
        var t1 = $.$get$atom();
        this._editors$_editorObserve = t1._workspace.observeTextEditors$1(this.get$_observeTextEditors());
        this._itemObserve = t1._workspace.observeActivePaneItem$1(this.get$_observeActivePaneItem());
      },
      $isDisposable: 1,
      static: {
        Editors__isDartTypeEditor: [function(editor) {
          var t1;
          if (editor == null)
            return false;
          t1 = editor.invoke$1("getPath");
          return t1 == null ? false : J.endsWith$1$s(t1, ".dart");
        }, "call$1", "editors_Editors__isDartTypeEditor$closure", 2, 0, 251],
        Editors$_allDartEditors: function() {
          var t1 = new F.Editors(null, null, null, new L.StreamSubscriptions(true, []), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), null, []);
          t1.Editors$_allDartEditors$0();
          return t1;
        }
      }
    },
    Editors__observeTextEditors_closure: {
      "^": "Closure:0;_box_0,$this,editor",
      call$1: [function(_) {
        var t1, t2;
        t1 = this.$this;
        C.JSArray_methods.remove$1(t1._editors$_subs._subscriptions, this._box_0.sub);
        t2 = this.editor;
        C.JSArray_methods.remove$1(t1._openEditors, t2);
        t1 = t1._editorClosedController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(t2);
      }, null, null, 2, 0, null, 1, "call"]
    }
  }], ["atom.elements", "package:atom_dartlang/elements.dart",, K, {
    "^": "",
    CoreElement: {
      "^": "Object;element<",
      get$id: function(_) {
        return J.get$attributes$x(this.element).$index(0, "id");
      },
      attribute$2: [function($name, value) {
        var t1;
        if (value == null)
          value = J.get$attributes$x(this.element).containsKey$1(0, $name) !== true;
        t1 = this.element;
        if (value === true)
          J.setAttribute$2$x(t1, $name, "");
        else
          J.get$attributes$x(t1).remove$1(0, $name);
      }, function($name) {
        return this.attribute$2($name, null);
      }, "attribute$1", "call$2", "call$1", "get$attribute", 2, 2, 142, 2],
      get$attributes: function(_) {
        return J.get$attributes$x(this.element);
      },
      setAttribute$2: function(_, $name, value) {
        return J.setAttribute$2$x(this.element, $name, value);
      },
      clazz$1: function(_class) {
        if (C.JSString_methods.contains$1(_class, " "))
          throw H.wrapException(P.ArgumentError$("spaces not allowed in class names"));
        J.add$1$ax(J.get$classes$x(this.element), _class);
      },
      toggleClass$2: function($name, value) {
        J.toggle$2$x(J.get$classes$x(this.element), $name, value);
      },
      toggleClass$1: function($name) {
        return this.toggleClass$2($name, null);
      },
      get$text: function(_) {
        return J.get$text$x(this.element);
      },
      set$text: function(_, value) {
        J.set$text$x(this.element, value);
      },
      add$1: function(_, child) {
        var t1 = J.getInterceptor(child);
        if (!!t1.$isList)
          return t1.map$1(child, new K.CoreElement_add_closure(this)).toList$0(0);
        else if (!!t1.$isCoreElement)
          J.add$1$ax(J.get$children$x(this.element), child.element);
        else if (!!t1.$isElement)
          J.add$1$ax(J.get$children$x(this.element), child);
        else
          throw H.wrapException(P.ArgumentError$("argument type not supported"));
        return child;
      },
      hidden$1: function(_, value) {
        return this.attribute$2("hidden", value);
      },
      set$disabled: function(_, value) {
        return this.attribute$2("disabled", value);
      },
      layoutHorizontal$0: function() {
        var t1, t2;
        t1 = this.element;
        t2 = J.getInterceptor$x(t1);
        t2.setAttribute$2(t1, "layout", "");
        t2.setAttribute$2(t1, "horizontal", "");
      },
      flex$1: function(_, flexAmount) {
        this.attribute$2("flex", true);
      },
      flex$0: function($receiver) {
        return this.flex$1($receiver, null);
      },
      set$tooltip: function(value) {
        J.set$title$x(this.element, value);
      },
      set$display: function(_, value) {
        J.set$display$x(J.get$style$x(this.element), value);
      },
      get$onClick: function(_) {
        var t1 = J.get$onClick$x(this.element);
        return new P._WhereStream(new K.CoreElement_onClick_closure(this), t1, [H.getRuntimeTypeArgument(t1, "Stream", 0)]);
      },
      click$2: function(_, handle, shiftHandle) {
        return this.get$onClick(this)._createSubscription$4(new K.CoreElement_click_closure(handle, shiftHandle), null, null, false);
      },
      click$1: function($receiver, handle) {
        return this.click$2($receiver, handle, null);
      },
      dblclick$1: function(handle) {
        return J.get$onDoubleClick$x(this.element).listen$1(new K.CoreElement_dblclick_closure(handle));
      },
      scrollIntoView$1$bottom: function(_, bottom) {
        J.scrollIntoView$0$x(this.element);
      },
      scrollIntoView$0: function($receiver) {
        return this.scrollIntoView$1$bottom($receiver, false);
      },
      setInnerHtml$1: function(_, str) {
        J.setInnerHtml$2$treeSanitizer$x(this.element, str, new M.TrustedHtmlTreeSanitizer());
      },
      _handleCopyKeyPress$1: [function($event) {
        var t1, t2;
        t1 = J.getInterceptor$x($event);
        if (t1.get$keyCode($event) !== 67)
          return;
        t2 = $.$get$isMac();
        if (!(t2 === true && t1.get$metaKey($event) === true))
          t2 = t2 !== true && t1.get$ctrlKey($event) === true;
        else
          t2 = true;
        if (t2) {
          t1.preventDefault$0($event);
          document.execCommand("copy", false, null);
        }
      }, "call$1", "get$_handleCopyKeyPress", 2, 0, 143, 12],
      dispose$0: ["super$CoreElement$dispose", function() {
        var t1, t2, exception;
        t1 = this.element;
        t2 = J.getInterceptor$x(t1);
        if (t2.get$parent(t1) == null)
          return;
        if (J.contains$1$asx(J.get$children$x(t2.get$parent(t1)), t1))
          try {
            J.remove$1$ax(J.get$children$x(t2.get$parent(t1)), t1);
          } catch (exception) {
            H.unwrapException(exception);
          }
      }],
      toString$0: function(_) {
        return J.toString$0$(this.element);
      },
      CoreElement$4$attributes$classes$text: function(tag, attributes, classes, text) {
        if (text != null)
          J.set$text$x(this.element, text);
        if (classes != null)
          J.addAll$1$ax(J.get$classes$x(this.element), classes.split(" "));
        if (attributes != null)
          C.JSArray_methods.forEach$1(attributes.split(" "), this.get$attribute());
      },
      static: {
        CoreElement$: function(tag, attributes, classes, text) {
          var t1 = new K.CoreElement(W._ElementFactoryProvider_createElement_tag(tag, null));
          t1.CoreElement$4$attributes$classes$text(tag, attributes, classes, text);
          return t1;
        }
      }
    },
    CoreElement_add_closure: {
      "^": "Closure:0;$this",
      call$1: [function(c) {
        return this.$this.add$1(0, c);
      }, null, null, 2, 0, null, 38, "call"]
    },
    CoreElement_onClick_closure: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        return J.get$attributes$x(this.$this.element).containsKey$1(0, "disabled") !== true;
      }
    },
    CoreElement_click_closure: {
      "^": "Closure:12;handle,shiftHandle",
      call$1: [function(e) {
        var t1, t2;
        t1 = J.getInterceptor$x(e);
        t1.stopImmediatePropagation$0(e);
        t2 = this.shiftHandle;
        if (t2 != null && t1.get$shiftKey(e) === true)
          t2.call$0();
        else
          this.handle.call$0();
      }, null, null, 2, 0, null, 0, "call"]
    },
    CoreElement_dblclick_closure: {
      "^": "Closure:0;handle",
      call$1: [function(e) {
        J.stopImmediatePropagation$0$x(e);
        this.handle.call$0();
      }, null, null, 2, 0, null, 0, "call"]
    },
    ProgressElement: {
      "^": "CoreElement;_progress,element"
    },
    CloseButton: {
      "^": "CoreElement;element"
    },
    TitledModelDialog: {
      "^": "Object;_elements$_panel,_cancelCommand,title*,content>",
      dispose$0: [function() {
        this._elements$_panel.invoke$1("destroy");
        this._cancelCommand.invoke$1("dispose");
      }, "call$0", "get$dispose", 0, 0, 2],
      TitledModelDialog$2$classes: function(inTitle, classes) {
        var root, t1, t2, t3, closeButton;
        root = K.CoreElement$("div", null, classes, null);
        t1 = K.CoreElement$("div", null, "modal-header", null);
        t2 = t1.element;
        t3 = J.getInterceptor$x(t2);
        t3.setAttribute$2(t2, "layout", "");
        t3.setAttribute$2(t2, "horizontal", "");
        t2 = K.CoreElement$("div", null, "text-highlight", inTitle);
        t2.flex$0(0);
        this.title = t2;
        closeButton = new K.CloseButton(W._ElementFactoryProvider_createElement_tag("div", null));
        closeButton.CoreElement$4$attributes$classes$text("div", null, "close-button", null);
        t1.add$1(0, [t2, closeButton]);
        t2 = K.CoreElement$("div", null, null, null);
        this.content = t2;
        root.add$1(0, [t1, t2]);
        closeButton.get$onClick(closeButton)._createSubscription$4(new K.TitledModelDialog_closure(this), null, null, false);
        t2 = $.$get$atom();
        t1 = t2._workspace;
        this._elements$_panel = new Y.Panel(t1.invoke$2("addModalPanel", t1._panelOptions$3(root.element, null, null)));
        this._cancelCommand = t2._commands.add$3(0, "atom-workspace", "core:cancel", new K.TitledModelDialog_closure0(this));
      },
      $isDisposable: 1,
      static: {
        TitledModelDialog$: function(inTitle, classes) {
          var t1 = new K.TitledModelDialog(null, null, null, null);
          t1.TitledModelDialog$2$classes(inTitle, classes);
          return t1;
        }
      }
    },
    TitledModelDialog_closure: {
      "^": "Closure:0;$this",
      call$1: [function(e) {
        this.$this._elements$_panel.invoke$1("hide");
        J.preventDefault$0$x(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    TitledModelDialog_closure0: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        return this.$this._elements$_panel.invoke$1("hide");
      }
    },
    Strobe: {
      "^": "CoreElement;_timer,element",
      strobe$0: function() {
        if (this._timer != null)
          return;
        J.toggle$2$x(J.get$classes$x(this.element), "strobe-flash", true);
        P.Timer_Timer($.$get$Strobe__halfDuration(), new K.Strobe_strobe_closure(this));
        this._timer = P.Timer_Timer($.$get$Strobe__fullDuration(), new K.Strobe_strobe_closure0(this));
      }
    },
    Strobe_strobe_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        J.toggle$2$x(J.get$classes$x(this.$this.element), "strobe-flash", false);
        return;
      }
    },
    Strobe_strobe_closure0: {
      "^": "Closure:1;$this",
      call$0: function() {
        this.$this._timer = null;
        return;
      }
    }
  }], ["atom.error_repository", "package:atom_dartlang/error_repository.dart",, E, {
    "^": "",
    ErrorRepository: {
      "^": "Object;knownErrors<,subs,_error_repository$_changeController,_errorStream,_flushStream",
      get$onChange: function(_) {
        var t1 = this._error_repository$_changeController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      initStreams$2: function(errorStream, flushStream) {
        var t1;
        this._errorStream = errorStream;
        this._flushStream = flushStream;
        t1 = this.subs;
        t1.cancel$0(0);
        t1 = t1._subscriptions;
        t1.push(this._errorStream.listen$1(this.get$_handleAddErrors()));
        t1.push(this._flushStream.listen$1(this.get$_handleFlushErrors()));
      },
      clearAll$0: function() {
        this.knownErrors.clear$0(0);
        var t1 = this._error_repository$_changeController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(null);
      },
      clearForDirectory$1: function(dir) {
        var t1, paths, t2, t3, _i, path;
        t1 = this.knownErrors;
        paths = t1.get$keys(t1).toList$0(0);
        for (t2 = paths.length, t3 = J.getInterceptor$asx(dir), _i = 0; _i < paths.length; paths.length === t2 || (0, H.throwConcurrentModificationError)(paths), ++_i) {
          path = paths[_i];
          if (t3.contains$1(dir, path) === true)
            t1.remove$1(0, path);
        }
      },
      dispose$0: [function() {
        return this.subs.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleAddErrors$1: [function(analysisErrors) {
        var path, t1, oldErrors, newErrors;
        path = J.get$file$x(analysisErrors);
        if (new F.File(F._create("File", path, null)).invoke$1("existsSync") === true && new F.Stats($.$get$fs().invoke$2("statSync", path)).invoke$1("isFile") === true) {
          t1 = this.knownErrors;
          oldErrors = t1.$index(0, path);
          newErrors = analysisErrors.get$errors();
          if (oldErrors == null)
            oldErrors = C.List_empty;
          if (newErrors == null)
            newErrors = C.List_empty;
          t1.$indexSet(0, path, analysisErrors.get$errors());
          if (!G.listIdentical(oldErrors, newErrors)) {
            t1 = this._error_repository$_changeController;
            if (!t1.get$_mayAddEvent())
              H.throwExpression(t1._addEventError$0());
            t1._sendData$1(null);
          }
        } else
          $.$get$_logger23().info$1("received an error event for a non-existent file: " + H.S(path));
      }, "call$1", "get$_handleAddErrors", 2, 0, 144, 117],
      _handleFlushErrors$1: [function(analysisFlushResults) {
        var t1 = this.knownErrors;
        J.forEach$1$ax(J.get$files$x(analysisFlushResults), t1.get$remove(t1));
        t1 = this._error_repository$_changeController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(null);
      }, "call$1", "get$_handleFlushErrors", 2, 0, 145, 118],
      $isDisposable: 1
    }
  }], ["", "package:atom_dartlang/flutter/flutter.dart",, V, {
    "^": "",
    Flutter: {
      "^": "Object;",
      enable$1: [function(_, _0) {
        if (!C.JSArray_methods.contains$1(P.List_List$from($.$get$atom()._packages.invoke$1("getAvailablePackageNames"), true, null), "flutter"))
          return;
        $.$get$_logger22().info$1("Flutter features enabled");
      }, function($receiver) {
        return this.enable$1($receiver, null);
      }, "enable$0", "call$1", "call$0", "get$enable", 0, 2, 30, 2]
    }
  }], ["", "package:atom_dartlang/flutter/flutter_connect.dart",, K, {
    "^": "",
    FlutterConnectManager: {
      "^": "Object;_flutter_connect$_disposables,connectDialog",
      dispose$0: [function() {
        return this._flutter_connect$_disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    ConnectDialog: {
      "^": "Object;dialog,_listGroup,itemCount",
      show$0: function(_) {
        var daemon, flutterDeviceManager, t1, deviceId;
        J.clear$0$ax(J.get$children$x(this._listGroup.element));
        this.dialog._elements$_panel.invoke$1("show");
        daemon = Q.Dependencies_instance().getDependency$1(C.Type_FlutterDaemonManager_8Wd).get$daemon();
        flutterDeviceManager = Q.Dependencies_instance().getDependency$1(C.Type_FlutterDeviceManager_zjY);
        if (flutterDeviceManager.get$currentSelectedDevice() == null) {
          this.dialog._elements$_panel.invoke$1("hide");
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addInfo", "No Flutter devices found.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          return;
        }
        deviceId = J.get$id$x(flutterDeviceManager.get$currentSelectedDevice());
        t1 = M.toTitleCase("Discovering Flutter Apps");
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new T.DaemonRequestJob(new K.ConnectDialog_show_closure(this, daemon, deviceId), t1, null));
      },
      _handleAppClick$1: function(app) {
        var t1, t2, t3, project, launchType, configs, mainPath;
        this.dialog._elements$_panel.invoke$1("hide");
        t1 = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ);
        t2 = $.$get$atom();
        t3 = t2._workspace.getActiveTextEditor$0();
        project = t1.getProjectFor$1(t3 == null ? t3 : t3.invoke$1("getPath"));
        if (project == null) {
          t1 = t2._notifications;
          t1.invoke$3("addWarning", "No active project.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          return;
        }
        launchType = Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).getLaunchType$1("flutter");
        configs = Q.Dependencies_instance().getDependency$1(C.Type_LaunchConfigurationManager_6Be).getConfigsForProject$1(J.get$path$x(project));
        if (configs.length !== 0)
          launchType.connectToApp$3(project, C.JSArray_methods.get$first(configs), app.get$observatoryPort());
        else {
          t1 = $.$get$fs();
          t3 = J.getInterceptor$x(project);
          mainPath = t1.join$2(0, t3.get$path(project), "lib/main.dart");
          if (t1.invoke$2("existsSync", mainPath) === true) {
            t1 = t1.invoke$3("readFileSync", mainPath, P.LinkedHashMap__makeLiteral(["encoding", "utf8"]));
            if (launchType.canLaunch$2(t3.get$path(project), new X.LaunchData(t1, null)) === true)
              launchType.connectToApp$3(project, Q.Dependencies_instance().getDependency$1(C.Type_LaunchConfigurationManager_6Be).createNewConfig$4(t3.get$path(project), J.get$type$x(launchType), "lib/main.dart", launchType.getDefaultConfigText$0()), app.get$observatoryPort());
            else {
              t1 = t2._notifications;
              t1.invoke$3("addWarning", "The current project is not a runnable Flutter project.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
            }
          } else {
            t1 = t2._notifications;
            t1.invoke$3("addWarning", "The current project is not a runnable Flutter project.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          }
        }
      },
      _updateApps$1: [function(apps) {
        var t1, t2, app, item, t3, t4, t5;
        for (t1 = J.getInterceptor$ax(apps), t2 = t1.get$iterator(apps); t2.moveNext$0();) {
          app = t2.get$current();
          item = K.CoreElement$("li", null, "item-container select-item", null);
          t3 = item.element;
          t4 = J.getInterceptor$x(t3);
          t4.setAttribute$2(t3, "layout", "");
          t4.setAttribute$2(t3, "horizontal", "");
          t3 = K.CoreElement$("div", null, null, null);
          if (C.JSString_methods.contains$1("inline-block", " "))
            H.throwExpression(P.ArgumentError$("spaces not allowed in class names"));
          t4 = t3.element;
          t5 = J.getInterceptor$x(t4);
          J.add$1$ax(t5.get$classes(t4), "inline-block");
          t3.flex$0(0);
          t5.set$text(t4, J.get$id$x(app));
          t3.click$1(0, new K.ConnectDialog__updateApps_closure(this, app));
          item.add$1(0, [t3]);
          this._listGroup.add$1(0, item);
        }
        t2 = t1.get$isEmpty(apps);
        t3 = this.itemCount.element;
        if (t2 === true)
          J.set$text$x(t3, "No apps detected.");
        else
          J.set$text$x(t3, H.S(t1.get$length(apps)) + " " + M.pluralize("app", t1.get$length(apps)) + " detected.");
      }, "call$1", "get$_updateApps", 2, 0, 146, 119],
      dispose$0: [function() {
        var t1 = this.dialog;
        t1._elements$_panel.invoke$1("destroy");
        t1._cancelCommand.invoke$1("dispose");
        return;
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    ConnectDialog_show_closure: {
      "^": "Closure:1;$this,daemon,deviceId",
      call$0: function() {
        var t1 = this.$this;
        J.set$text$x(t1.itemCount.element, "Looking for apps\u2026");
        return this.daemon.get$app().discover$1(this.deviceId).then$1(t1.get$_updateApps()).catchError$1(new K.ConnectDialog_show__closure(t1));
      }
    },
    ConnectDialog_show__closure: {
      "^": "Closure:0;$this",
      call$1: [function(e) {
        J.set$text$x(this.$this.itemCount.element, "No apps detected.");
        throw H.wrapException(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    ConnectDialog__updateApps_closure: {
      "^": "Closure:1;$this,app",
      call$0: function() {
        return this.$this._handleAppClick$1(this.app);
      }
    }
  }], ["", "package:atom_dartlang/flutter/flutter_daemon.dart",, T, {
    "^": "",
    _stripNullValues0: function(m) {
      var copy, t1, key, value;
      copy = P.LinkedHashMap__makeEmpty();
      for (t1 = m.get$keys(m), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        value = m.$index(0, key);
        if (value != null)
          copy.$indexSet(0, key, value);
      }
      return copy;
    },
    FlutterDaemonManager: {
      "^": "Object;_daemon,_flutter_daemon$_disposables,_sub,_daemonController,_deviceAddedController,_deviceChangedController,_deviceRemovedController",
      get$daemon: function() {
        return this._daemon;
      },
      get$onDaemonAvailable: function() {
        var t1 = this._daemonController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onDeviceAdded: function() {
        var t1 = this._deviceAddedController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onDeviceChanged: function() {
        var t1 = this._deviceChangedController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onDeviceRemoved: function() {
        var t1 = this._deviceRemovedController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      getDevices$0: function() {
        var t1 = this._daemon;
        if (t1 == null) {
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1([]);
        } else
          t1 = t1._device.getDevices$0();
        return t1;
      },
      _initFromSdk$2$quiet: [function(sdk, quiet) {
        if (sdk == null)
          this._killFlutterDaemon$1$quiet(quiet);
        else if (this._daemon == null)
          this._startFlutterDaemon$1$quiet(quiet);
      }, function(sdk) {
        return this._initFromSdk$2$quiet(sdk, false);
      }, "_initFromSdk$1", "call$2$quiet", "call$1", "get$_initFromSdk", 2, 3, 147, 62, 70, 121],
      _killFlutterDaemon$1$quiet: function(quiet) {
        var t1;
        if (this._daemon == null)
          return;
        if (quiet !== true) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addInfo", "Flutter Daemon shutting down.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        }
        $.$get$_logger15().info$1("Stopping Flutter daemon server");
        this._daemon.dispose$0();
        this._daemon = null;
        t1 = this._daemonController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(null);
      },
      _killFlutterDaemon$0: function() {
        return this._killFlutterDaemon$1$quiet(false);
      },
      _startFlutterDaemon$1$quiet: function(quiet) {
        var t1, process, t2, t3, t4, t5;
        if (Q.Dependencies_instance().getDependency$1(C.Type_FlutterSdkManager_Ag3).get$sdk() == null || this._daemon != null)
          return;
        if (quiet !== true) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addSuccess", "Flutter Daemon starting up.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        }
        $.$get$_logger15().info$1("Starting Flutter daemon server");
        process = Q.Dependencies_instance().getDependency$1(C.Type_FlutterSdkManager_Ag3).get$sdk().get$flutterTool().runRaw$2$startProcess(["daemon"], true);
        t1 = process._stdoutController;
        t1 = C.C_LineSplitter.bind$1(new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]));
        t2 = H.getRuntimeTypeArgument(t1, "Stream", 0);
        process._exitCompleter.future.then$1(new T.FlutterDaemonManager__startFlutterDaemon_closure(this));
        t3 = P.LinkedHashMap__makeEmpty();
        t4 = P.LinkedHashMap__makeEmpty();
        t5 = P.LinkedHashMap__makeEmpty();
        t4 = new T.FlutterDaemon(new T._ProcessDisposable(process), null, null, 0, t3, t4, new P.JsonCodec(null, T.flutter_daemon_FlutterDaemon__toEncodable$closure()), t5, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), null, null, null, null);
        t4._flutter_daemon$_streamSub = new P._MapStream(new T.FlutterDaemonManager__startFlutterDaemon_closure0(), new P._WhereStream(new T.FlutterDaemonManager__startFlutterDaemon_closure1(), t1, [t2]), [t2, null])._createSubscription$4(t4.get$_flutter_daemon$_processMessage(), null, null, false);
        t4._flutter_daemon$_writeMessage = new T.FlutterDaemonManager__startFlutterDaemon_closure2(process);
        t2 = new T.DaemonDomain(t4, "daemon", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t5.$indexSet(0, "daemon", t2);
        t4._daemon = t2;
        t2 = new T.AppDomain(t4, "app", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t5.$indexSet(0, "app", t2);
        t4._app = t2;
        t2 = new T.DeviceDomain(t4, "device", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t5.$indexSet(0, "device", t2);
        t4._device = t2;
        this._daemon = t4;
        t4._daemon._flutter_daemon$_listen$2("daemon.logMessage", T.flutter_daemon_LogMessage_parse$closure())._createSubscription$4(new T.FlutterDaemonManager__startFlutterDaemon_closure3(), null, null, false);
        this._daemon._device._flutter_daemon$_listen$2("device.added", T.flutter_daemon_Device_parse$closure())._createSubscription$4(new T.FlutterDaemonManager__startFlutterDaemon_closure4(this), null, null, false);
        this._daemon._device._flutter_daemon$_listen$2("device.changed", T.flutter_daemon_Device_parse$closure())._createSubscription$4(new T.FlutterDaemonManager__startFlutterDaemon_closure5(this), null, null, false);
        this._daemon._device._flutter_daemon$_listen$2("device.removed", T.flutter_daemon_Device_parse$closure())._createSubscription$4(new T.FlutterDaemonManager__startFlutterDaemon_closure6(this), null, null, false);
        this._daemon._device.server._flutter_daemon$_call$2(0, "device.enable", null);
        t4 = this._daemon._flutter_daemon$_onSend;
        new P._BroadcastStream(t4, [H.getTypeArgumentByIndex(t4, 0)]).listen$1(new T.FlutterDaemonManager__startFlutterDaemon_closure7());
        t4 = this._daemon._flutter_daemon$_onReceive;
        new P._BroadcastStream(t4, [H.getTypeArgumentByIndex(t4, 0)]).listen$1(new T.FlutterDaemonManager__startFlutterDaemon_closure8());
        t4 = this._daemonController;
        t2 = this._daemon;
        if (!t4.get$_mayAddEvent())
          H.throwExpression(t4._addEventError$0());
        t4._sendData$1(t2);
      },
      _startFlutterDaemon$0: function() {
        return this._startFlutterDaemon$1$quiet(false);
      },
      dispose$0: [function() {
        this._flutter_daemon$_disposables.dispose$0();
        var t1 = this._daemon;
        if (!(t1 == null))
          t1.dispose$0();
        t1 = this._sub;
        if (!(t1 == null))
          t1.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      FlutterDaemonManager$0: function() {
        this._initFromSdk$2$quiet(Q.Dependencies_instance().getDependency$1(C.Type_FlutterSdkManager_Ag3).get$sdk(), true);
        this._sub = Q.Dependencies_instance().getDependency$1(C.Type_FlutterSdkManager_Ag3).get$onSdkChange().listen$1(this.get$_initFromSdk());
        this._flutter_daemon$_disposables._disposables.push($.$get$atom()._commands.add$3(0, "atom-workspace", "flutter:restart-daemon", new T.FlutterDaemonManager_closure(this)));
      },
      $isDisposable: 1,
      static: {
        FlutterDaemonManager$: function() {
          var t1 = new T.FlutterDaemonManager(null, new L.Disposables(true, []), null, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null));
          t1.FlutterDaemonManager$0();
          return t1;
        }
      }
    },
    FlutterDaemonManager_closure: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        var t1 = this.$this;
        if (!Q.Dependencies_instance().getDependency$1(C.Type_FlutterSdkManager_Ag3).get$hasSdk()) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "No Flutter SDK configured.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        } else {
          t1._killFlutterDaemon$0();
          t1._startFlutterDaemon$0();
        }
      }
    },
    FlutterDaemonManager__startFlutterDaemon_closure2: {
      "^": "Closure:3;process",
      call$1: function(str) {
        var t1 = "[" + str + "]\n";
        this.process._process$_process.write$1(0, t1);
      }
    },
    FlutterDaemonManager__startFlutterDaemon_closure1: {
      "^": "Closure:3;",
      call$1: function(str) {
        var t1 = J.getInterceptor$s(str);
        return t1.startsWith$1(str, "[") && t1.endsWith$1(str, "]");
      }
    },
    FlutterDaemonManager__startFlutterDaemon_closure0: {
      "^": "Closure:3;",
      call$1: [function(str) {
        var t1 = J.getInterceptor$asx(str);
        return t1.substring$2(str, 1, J.$sub$n(t1.get$length(str), 1));
      }, null, null, 2, 0, null, 4, "call"]
    },
    FlutterDaemonManager__startFlutterDaemon_closure: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._daemon;
        if (!(t2 == null))
          t2.dispose$0();
        t1._daemon = null;
        t1 = t1._daemonController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(null);
      }, null, null, 2, 0, null, 1, "call"]
    },
    FlutterDaemonManager__startFlutterDaemon_closure3: {
      "^": "Closure:148;",
      call$1: [function(message) {
        var t1 = J.getInterceptor$x(message);
        switch (t1.get$level(message)) {
          case "error":
            if (message.get$stackTrace() != null)
              $.$get$_logger15().severe$3(t1.get$message(message), null, new P._StringStackTrace(message.get$stackTrace()));
            else
              $.$get$_logger15().severe$1(t1.get$message(message));
            break;
          case "status":
            $.$get$_logger15().info$1(t1.get$message(message));
            break;
          default:
            $.$get$_logger15().finer$1(t1.get$message(message));
            break;
        }
      }, null, null, 2, 0, null, 10, "call"]
    },
    FlutterDaemonManager__startFlutterDaemon_closure4: {
      "^": "Closure:24;$this",
      call$1: [function(device) {
        var t1 = this.$this._deviceAddedController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(device);
      }, null, null, 2, 0, null, 17, "call"]
    },
    FlutterDaemonManager__startFlutterDaemon_closure5: {
      "^": "Closure:24;$this",
      call$1: [function(device) {
        var t1 = this.$this._deviceChangedController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(device);
      }, null, null, 2, 0, null, 17, "call"]
    },
    FlutterDaemonManager__startFlutterDaemon_closure6: {
      "^": "Closure:24;$this",
      call$1: [function(device) {
        var t1 = this.$this._deviceRemovedController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(device);
      }, null, null, 2, 0, null, 17, "call"]
    },
    FlutterDaemonManager__startFlutterDaemon_closure7: {
      "^": "Closure:3;",
      call$1: [function(message) {
        if ($.$get$_logger15().isLoggable$1(C.Level_FINER_400))
          $.$get$_logger15().fine$1("--> " + H.S(message));
      }, null, null, 2, 0, null, 10, "call"]
    },
    FlutterDaemonManager__startFlutterDaemon_closure8: {
      "^": "Closure:3;",
      call$1: [function(message) {
        if ($.$get$_logger15().isLoggable$1(C.Level_FINER_400))
          $.$get$_logger15().fine$1("<-- " + H.S(message));
      }, null, null, 2, 0, null, 10, "call"]
    },
    _ProcessDisposable: {
      "^": "Object;process",
      dispose$0: [function() {
        var t1 = this.process;
        if (t1._exit == null)
          t1.kill$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      process$0: function() {
        return this.process.call$0();
      },
      $isDisposable: 1
    },
    FlutterDaemon: {
      "^": "Object;otherDisposeable,_flutter_daemon$_streamSub,_flutter_daemon$_writeMessage,_flutter_daemon$_id,_flutter_daemon$_completers,_flutter_daemon$_methodNames,_flutter_daemon$_jsonEncoder,_flutter_daemon$_domains,_flutter_daemon$_onSend,_flutter_daemon$_onReceive,_flutter_daemon$_willSend,_daemon,_app,_device",
      get$daemon: function() {
        return this._daemon;
      },
      get$app: function() {
        return this._app;
      },
      get$device: function() {
        return this._device;
      },
      get$onSend: function() {
        var t1 = this._flutter_daemon$_onSend;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onReceive: function() {
        var t1 = this._flutter_daemon$_onReceive;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      set$willSend: function(fn) {
        this._flutter_daemon$_willSend = fn;
      },
      dispose$0: function() {
        var t1 = this._flutter_daemon$_streamSub;
        if (t1 != null)
          t1.cancel$0(0);
        this._flutter_daemon$_completers.clear$0(0);
        t1 = this.otherDisposeable.process;
        if (t1._exit == null)
          t1.kill$0();
      },
      _flutter_daemon$_processMessage$1: [function(message) {
        var json, $event, prefix, completer, methodName, e, t1, t2, t3, exception;
        try {
          t1 = this._flutter_daemon$_onReceive;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(message);
          json = C.JsonCodec_null_null.decode$1(message);
          if (J.$index$asx(json, "id") == null) {
            $event = J.$index$asx(json, "event");
            if ($event == null)
              $.$get$_logger15().severe$1("invalid message: " + H.S(message));
            else {
              prefix = J.substring$2$s($event, 0, J.indexOf$1$asx($event, "."));
              t1 = this._flutter_daemon$_domains;
              if (t1.$index(0, prefix) == null)
                $.$get$_logger15().severe$1("no domain for notification: " + H.S(message));
              else {
                t1 = t1.$index(0, prefix);
                t2 = $event;
                t3 = J.$index$asx(json, "params");
                t1 = t1._flutter_daemon$_controllers;
                if (t1.$index(0, t2) != null) {
                  t1 = t1.$index(0, t2);
                  if (!t1.get$_mayAddEvent())
                    H.throwExpression(t1._addEventError$0());
                  t1._sendData$1(t3);
                }
              }
            }
          } else {
            completer = this._flutter_daemon$_completers.remove$1(0, J.$index$asx(json, "id"));
            methodName = this._flutter_daemon$_methodNames.remove$1(0, J.$index$asx(json, "id"));
            if (completer == null)
              $.$get$_logger15().severe$1("unmatched request response: " + H.S(message));
            else if (J.$index$asx(json, "error") != null)
              completer.completeError$1(new T.RequestError0(methodName, J.$index$asx(json, "error")));
            else
              J.complete$1$x(completer, J.$index$asx(json, "result"));
          }
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          $.$get$_logger15().severe$1("unable to decode message: " + H.S(message) + ", " + H.S(e));
        }
      }, "call$1", "get$_flutter_daemon$_processMessage", 2, 0, 10, 10],
      _flutter_daemon$_call$2: function(_, method, args) {
        var id, t1, m, message, t2;
        id = "" + ++this._flutter_daemon$_id;
        t1 = this._flutter_daemon$_completers;
        t1.$indexSet(0, id, new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]));
        this._flutter_daemon$_methodNames.$indexSet(0, id, method);
        m = P.LinkedHashMap__makeLiteral(["id", id, "method", method]);
        if (args != null)
          m.$indexSet(0, "params", args);
        message = this._flutter_daemon$_jsonEncoder.encode$1(m);
        t2 = this._flutter_daemon$_willSend;
        if (t2 != null)
          t2.call$1(method);
        t2 = this._flutter_daemon$_onSend;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(message);
        this._flutter_daemon$_writeMessage.call$1(message);
        return t1.$index(0, id).future;
      },
      static: {
        FlutterDaemon__toEncodable: [function(obj) {
          return obj;
        }, "call$1", "flutter_daemon_FlutterDaemon__toEncodable$closure", 2, 0, 0, 5]
      }
    },
    Domain0: {
      "^": "Object;server<,name>",
      _flutter_daemon$_listen$2: function($name, cvt) {
        var t1, t2, t3;
        t1 = this._flutter_daemon$_streams;
        if (t1.$index(0, $name) == null) {
          t2 = this._flutter_daemon$_controllers;
          t2.$indexSet(0, $name, P.StreamController_StreamController$broadcast(null, null, false, null));
          t2 = t2.$index(0, $name);
          t2.toString;
          t3 = H.getTypeArgumentByIndex(t2, 0);
          t1.$indexSet(0, $name, new P._MapStream(cvt, new P._BroadcastStream(t2, [t3]), [t3, null]));
        }
        return t1.$index(0, $name);
      },
      toString$0: function(_) {
        return "Domain " + this.name;
      }
    },
    RequestError0: {
      "^": "Object;methodName<,error>",
      toString$0: function(_) {
        return H.S(this.error);
      }
    },
    DaemonDomain: {
      "^": "Domain0;server,name,_flutter_daemon$_controllers,_flutter_daemon$_streams",
      version$0: [function(_) {
        return H.subtypeCast(this.server._flutter_daemon$_call$2(0, "daemon.version", null), "$isFuture", [P.String], "$asFuture");
      }, "call$0", "get$version", 0, 0, 150],
      shutdown$0: function() {
        return this.server._flutter_daemon$_call$2(0, "daemon.shutdown", null);
      }
    },
    DiscoveredApp: {
      "^": "Object;id>,observatoryPort<"
    },
    AppDomain: {
      "^": "Domain0;server,name,_flutter_daemon$_controllers,_flutter_daemon$_streams",
      start$7$enableHotReload$mode$route$startPaused$target: [function(_, deviceId, projectDirectory, enableHotReload, mode, route, startPaused, target) {
        return this.server._flutter_daemon$_call$2(0, "app.start", T._stripNullValues0(P.LinkedHashMap__makeLiteral(["deviceId", deviceId, "projectDirectory", projectDirectory, "startPaused", startPaused, "route", route, "mode", mode, "target", target, "hot", enableHotReload]))).then$1(new T.AppDomain_start_closure());
      }, function($receiver, deviceId, projectDirectory) {
        return this.start$7$enableHotReload$mode$route$startPaused$target($receiver, deviceId, projectDirectory, true, null, null, null, null);
      }, "start$2", "call$7$enableHotReload$mode$route$startPaused$target", "call$2", "get$start", 4, 11, 151, 2, 2, 2, 2, 123, 124, 125, 126, 127, 171, 129, 130],
      restart$2$fullRestart: function(appId, fullRestart) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, result, t1;
        var $async$restart$2$fullRestart = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncHelper($async$self.server._flutter_daemon$_call$2(0, "app.restart", T._stripNullValues0(P.LinkedHashMap__makeLiteral(["appId", appId, "fullRestart", fullRestart]))), $async$restart$2$fullRestart, $async$completer);
              case 3:
                // returning from await.
                result = $async$result;
                t1 = J.getInterceptor(result);
                if (!!t1.$isMap) {
                  $async$returnValue = new T.OperationResult(result);
                  // goto return
                  $async$goto = 1;
                  break;
                } else {
                  if (t1.$eq(result, true))
                    t1 = $.$get$OperationResult_ok();
                  else
                    t1 = new T.OperationResult(P.LinkedHashMap__makeLiteral(["code", 1, "message", fullRestart ? "restart failed" : "reload failed"]));
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                }
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$restart$2$fullRestart, $async$completer);
      },
      discover$1: function(deviceId) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, $async$temp1, $async$temp2;
        var $async$discover$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = J;
                $async$temp2 = H;
                $async$goto = 3;
                return P._asyncHelper($async$self.server._flutter_daemon$_call$2(0, "app.discover", T._stripNullValues0(P.LinkedHashMap__makeLiteral(["deviceId", deviceId]))), $async$discover$1, $async$completer);
              case 3:
                // returning from await.
                $async$returnValue = $async$temp1.map$1$ax($async$temp2.subtypeCast($async$result, "$isList", [[P.Map, P.String,,]], "$asList"), new T.AppDomain_discover_closure());
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$discover$1, $async$completer);
      }
    },
    AppDomain_start_closure: {
      "^": "Closure:0;",
      call$1: [function(result) {
        return new T.AppStartedResult(result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    AppDomain_discover_closure: {
      "^": "Closure:63;",
      call$1: [function(app) {
        var t1 = J.getInterceptor$asx(app);
        return new T.DiscoveredApp(t1.$index(app, "id"), t1.$index(app, "observatoryDevicePort"));
      }, null, null, 2, 0, null, 131, "call"]
    },
    DaemonApp: {
      "^": "Object;daemon<,appId<,supportsRestart<,_flutter_daemon$_subs,_stoppedCompleter,_debugPortCompleter,_logController,_progressController",
      restart$1$fullRestart: function(fullRestart) {
        return this.daemon.restart$2$fullRestart(this.appId, fullRestart);
      },
      restart$0: function() {
        return this.restart$1$fullRestart(false);
      },
      stop$0: function(_) {
        return H.subtypeCast(this.daemon.server._flutter_daemon$_call$2(0, "app.stop", P.LinkedHashMap__makeLiteral(["appId", this.appId])), "$isFuture", [P.bool], "$asFuture").timeout$2$onTimeout(0, P.Duration$(0, 0, 0, 0, 0, 2), new T.DaemonApp_stop_closure(this));
      },
      _dispose$0: function() {
        this._flutter_daemon$_subs.cancel$0(0);
        var t1 = this._logController;
        if ((t1._state & 4) === 0)
          t1.close$0(0);
        t1 = this._progressController;
        if ((t1._state & 4) === 0)
          t1.close$0(0);
        t1 = this._stoppedCompleter;
        if (t1.future._state === 0)
          t1.complete$0(0);
      },
      DaemonApp$3$supportsRestart: function(daemon, appId, supportsRestart) {
        var t1, t2, t3;
        t1 = this.daemon;
        t2 = t1._flutter_daemon$_listen$2("app.debugPort", T.flutter_daemon_DebugPortAppEvent_parse$closure());
        t2.toString;
        t3 = this._flutter_daemon$_subs._subscriptions;
        t3.push(new P._WhereStream(new T.DaemonApp_closure(this), t2, [H.getRuntimeTypeArgument(t2, "Stream", 0)])._createSubscription$4(new T.DaemonApp_closure0(this), null, null, false));
        t2 = t1._flutter_daemon$_listen$2("app.log", T.flutter_daemon_LogAppEvent_parse$closure());
        t2.toString;
        t3.push(new P._WhereStream(new T.DaemonApp_closure1(this), t2, [H.getRuntimeTypeArgument(t2, "Stream", 0)])._createSubscription$4(new T.DaemonApp_closure2(this), null, null, false));
        t2 = t1._flutter_daemon$_listen$2("app.progress", T.flutter_daemon_ProgressAppEvent_parse$closure());
        t2.toString;
        t3.push(new P._WhereStream(new T.DaemonApp_closure3(this), t2, [H.getRuntimeTypeArgument(t2, "Stream", 0)])._createSubscription$4(new T.DaemonApp_closure4(this), null, null, false));
        t1 = t1._flutter_daemon$_listen$2("app.stop", T.flutter_daemon_StopAppEvent_parse$closure());
        t1.toString;
        t3.push(new P._WhereStream(new T.DaemonApp_closure5(this), t1, [H.getRuntimeTypeArgument(t1, "Stream", 0)])._createSubscription$4(new T.DaemonApp_closure6(this), null, null, false));
      },
      static: {
        DaemonApp$: function(daemon, appId, supportsRestart) {
          var t1, t2;
          t1 = $.Zone__current;
          t2 = T.DebugPortAppEvent;
          t2 = new T.DaemonApp(daemon, appId, supportsRestart, new L.StreamSubscriptions(true, []), new P._AsyncCompleter(new P._Future(0, t1, null, [null]), [null]), new P._AsyncCompleter(new P._Future(0, t1, null, [t2]), [t2]), P.StreamController_StreamController$broadcast(null, null, false, T.LogAppEvent), P.StreamController_StreamController$broadcast(null, null, false, T.ProgressAppEvent));
          t2.DaemonApp$3$supportsRestart(daemon, appId, supportsRestart);
          return t2;
        }
      }
    },
    DaemonApp_closure: {
      "^": "Closure:25;$this",
      call$1: function($event) {
        return J.$eq$($event.get$appId(), this.$this.appId);
      }
    },
    DaemonApp_closure0: {
      "^": "Closure:62;$this",
      call$1: [function($event) {
        var t1 = this.$this._debugPortCompleter;
        if (t1.future._state === 0)
          t1.complete$1(0, $event);
      }, null, null, 2, 0, null, 12, "call"]
    },
    DaemonApp_closure1: {
      "^": "Closure:25;$this",
      call$1: function($event) {
        return J.$eq$($event.get$appId(), this.$this.appId);
      }
    },
    DaemonApp_closure2: {
      "^": "Closure:59;$this",
      call$1: [function($event) {
        var t1 = this.$this._logController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1($event);
      }, null, null, 2, 0, null, 12, "call"]
    },
    DaemonApp_closure3: {
      "^": "Closure:25;$this",
      call$1: function($event) {
        return J.$eq$($event.get$appId(), this.$this.appId);
      }
    },
    DaemonApp_closure4: {
      "^": "Closure:40;$this",
      call$1: [function($event) {
        var t1 = this.$this._progressController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1($event);
      }, null, null, 2, 0, null, 12, "call"]
    },
    DaemonApp_closure5: {
      "^": "Closure:25;$this",
      call$1: function($event) {
        return J.$eq$($event.get$appId(), this.$this.appId);
      }
    },
    DaemonApp_closure6: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        this.$this._dispose$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    DaemonApp_stop_closure: {
      "^": "Closure:1;$this",
      call$0: [function() {
        this.$this._dispose$0();
        return true;
      }, null, null, 0, 0, null, "call"]
    },
    AppStartedResult: {
      "^": "Object;data>",
      get$appId: function() {
        return J.$index$asx(this.data, "appId");
      },
      get$supportsRestart: function() {
        return J.$index$asx(this.data, "supportsRestart");
      }
    },
    AppEvent: {
      "^": "Object;data>",
      get$appId: function() {
        return J.$index$asx(this.data, "appId");
      }
    },
    DebugPortAppEvent: {
      "^": "AppEvent;data",
      get$port: function(_) {
        return J.$index$asx(this.data, "port");
      },
      toString$0: function(_) {
        var t1, t2;
        t1 = this.data;
        t2 = J.getInterceptor$asx(t1);
        return "[DebugPortAppEvent: " + H.S(t2.$index(t1, "port")) + ", " + H.S(t2.$index(t1, "baseUri")) + "]";
      },
      static: {
        DebugPortAppEvent_parse: [function(data) {
          return new T.DebugPortAppEvent(data);
        }, "call$1", "flutter_daemon_DebugPortAppEvent_parse$closure", 2, 0, 252, 11]
      }
    },
    LogAppEvent: {
      "^": "AppEvent;data",
      get$log: function() {
        return J.$index$asx(this.data, "log");
      },
      get$hasStackTrace: function() {
        return J.containsKey$1$x(this.data, "stackTrace");
      },
      get$stackTrace: function() {
        return J.$index$asx(this.data, "stackTrace");
      },
      get$isError: function() {
        var t1 = J.$index$asx(this.data, "error");
        return t1 == null ? false : t1;
      },
      static: {
        LogAppEvent_parse: [function(data) {
          return new T.LogAppEvent(data);
        }, "call$1", "flutter_daemon_LogAppEvent_parse$closure", 2, 0, 253, 11]
      }
    },
    ProgressAppEvent: {
      "^": "AppEvent;data",
      get$message: function(_) {
        return J.$index$asx(this.data, "message");
      },
      get$isFinished: function() {
        var t1 = J.$index$asx(this.data, "finished");
        return t1 == null ? false : t1;
      },
      static: {
        ProgressAppEvent_parse: [function(data) {
          return new T.ProgressAppEvent(data);
        }, "call$1", "flutter_daemon_ProgressAppEvent_parse$closure", 2, 0, 254, 11]
      }
    },
    StopAppEvent: {
      "^": "AppEvent;data",
      get$error: function(_) {
        return J.$index$asx(this.data, "error");
      },
      static: {
        StopAppEvent_parse: [function(data) {
          return new T.StopAppEvent(data);
        }, "call$1", "flutter_daemon_StopAppEvent_parse$closure", 2, 0, 255, 11]
      }
    },
    DeviceDomain: {
      "^": "Domain0;server,name,_flutter_daemon$_controllers,_flutter_daemon$_streams",
      get$onDeviceAdded: function() {
        return this._flutter_daemon$_listen$2("device.added", T.flutter_daemon_Device_parse$closure());
      },
      get$onDeviceRemoved: function() {
        return this._flutter_daemon$_listen$2("device.removed", T.flutter_daemon_Device_parse$closure());
      },
      get$onDeviceChanged: function() {
        return this._flutter_daemon$_listen$2("device.changed", T.flutter_daemon_Device_parse$closure());
      },
      getDevices$0: function() {
        return this.server._flutter_daemon$_call$2(0, "device.getDevices", null).then$1(new T.DeviceDomain_getDevices_closure());
      },
      forward$3: function(_, deviceId, devicePort, hostPort) {
        return this.server._flutter_daemon$_call$2(0, "device.forward", T._stripNullValues0(P.LinkedHashMap__makeLiteral(["deviceId", deviceId, "devicePort", devicePort, "hostPort", hostPort]))).then$1(new T.DeviceDomain_forward_closure());
      },
      forward$2: function($receiver, deviceId, devicePort) {
        return this.forward$3($receiver, deviceId, devicePort, null);
      }
    },
    DeviceDomain_getDevices_closure: {
      "^": "Closure:157;",
      call$1: [function(result) {
        return J.map$1$ax(result, T.flutter_daemon_Device_parse$closure()).toList$0(0);
      }, null, null, 2, 0, null, 3, "call"]
    },
    DeviceDomain_forward_closure: {
      "^": "Closure:63;",
      call$1: [function(result) {
        return J.$index$asx(result, "hostPort");
      }, null, null, 2, 0, null, 3, "call"]
    },
    Device: {
      "^": "Object;id>,name>,platform,available",
      getLabel$0: function() {
        var t1 = this.name;
        if (t1 != null)
          return t1;
        t1 = this.platform;
        return H.S(J.$eq$(t1, "android") ? "Android" : t1) + " " + H.S(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof T.Device && J.$eq$(this.id, other.id);
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      toString$0: function(_) {
        return "[" + H.S(this.id) + ", " + H.S(this.name) + ", " + H.S(this.platform) + "]";
      },
      static: {
        Device_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new T.Device(t1.$index(m, "id"), t1.$index(m, "name"), t1.$index(m, "platform"), t1.$index(m, "available"));
        }, "call$1", "flutter_daemon_Device_parse$closure", 2, 0, 256, 6]
      }
    },
    LogMessage: {
      "^": "Object;level>,message>,stackTrace<",
      toString$0: function(_) {
        return "[" + H.S(this.level) + "] " + H.S(this.message);
      },
      static: {
        LogMessage_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new T.LogMessage(t1.$index(m, "level"), t1.$index(m, "message"), t1.$index(m, "stackTrace"));
        }, "call$1", "flutter_daemon_LogMessage_parse$closure", 2, 0, 257, 6]
      }
    },
    DaemonRequestJob: {
      "^": "Job;_flutter_daemon$_fn,name,_schedulingRule",
      get$quiet: function() {
        return true;
      },
      run$0: [function() {
        return this._flutter_daemon$_fn.call$0().catchError$1(new T.DaemonRequestJob_run_closure(this));
      }, "call$0", "get$run", 0, 0, 5]
    },
    DaemonRequestJob_run_closure: {
      "^": "Closure:0;$this",
      call$1: [function(e) {
        var t1, t2, t3, t4;
        if (e instanceof T.RequestError0) {
          t1 = $.$get$_logger15();
          t2 = this.$this.name;
          t3 = H.S(t2) + " " + H.S(e.methodName) + " ";
          t4 = e.error;
          t1.warning$2(t3 + H.S(t4), e);
          t3 = $.$get$atom()._notifications;
          t3.invoke$3("addError", H.S(t2) + " error", t3._options$5$buttons$description$detail$dismissable$icon(null, null, H.S(t4), null, null));
          return;
        } else
          throw H.wrapException(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    OperationResult: {
      "^": "Object;m",
      get$code: function(_) {
        return J.$index$asx(this.m, "code");
      },
      get$message: function(_) {
        return J.$index$asx(this.m, "message");
      },
      get$isOk: function() {
        var t1, t2;
        t1 = this.m;
        t2 = J.getInterceptor$asx(t1);
        return J.$eq$(t2.$index(t1, "code"), 0) || t2.$index(t1, "code") == null;
      },
      get$isError: function() {
        var t1, t2;
        t1 = this.m;
        t2 = J.getInterceptor$asx(t1);
        return !(J.$eq$(t2.$index(t1, "code"), 0) || t2.$index(t1, "code") == null);
      }
    }
  }], ["", "package:atom_dartlang/flutter/flutter_devices.dart",, R, {
    "^": "",
    FlutterDeviceManager: {
      "^": "Object;subs,_selectedController,_devicesController,_modeController,_selectedDevice,_devices,_runMode",
      get$runMode: function() {
        return this._runMode;
      },
      set$runMode: function(mode) {
        var t1;
        this._runMode = mode;
        t1 = this._modeController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(mode);
      },
      _updateForDaemon$1: [function(daemon) {
        var t1, t2;
        if (daemon == null) {
          t1 = this._devices;
          t1.clear$0(0);
          t2 = this._devicesController;
          t1 = t1.toList$0(0);
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(t1);
          this._validateSelection$0();
        } else {
          Q.Dependencies_instance().getDependency$1(C.Type_FlutterDaemonManager_8Wd).getDevices$0().then$1(new R.FlutterDeviceManager__updateForDaemon_closure(this));
          t1 = this.subs._subscriptions;
          t1.push(Q.Dependencies_instance().getDependency$1(C.Type_FlutterDaemonManager_8Wd).get$onDeviceAdded().listen$1(this.get$_handleDeviceAdd()));
          t1.push(Q.Dependencies_instance().getDependency$1(C.Type_FlutterDaemonManager_8Wd).get$onDeviceChanged().listen$1(this.get$_handleDeviceChanged()));
          t1.push(Q.Dependencies_instance().getDependency$1(C.Type_FlutterDaemonManager_8Wd).get$onDeviceRemoved().listen$1(this.get$_handleDeviceRemoved()));
        }
      }, "call$1", "get$_updateForDaemon", 2, 0, 158, 132],
      get$onSelectedChanged: function() {
        var t1 = this._selectedController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onDevicesChanged: function() {
        var t1 = this._devicesController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$currentSelectedDevice: function() {
        return this._selectedDevice;
      },
      get$devices: function() {
        return this._devices.toList$0(0);
      },
      setSelectedDeviceIndex$1: function(index) {
        var t1, t2;
        if (typeof index !== "number")
          return index.$ge();
        if (index >= 0 && index < this._devices._collection$_length) {
          t1 = this._devices.toList$0(0);
          if (index < 0 || index >= t1.length)
            return H.ioore(t1, index);
          t1 = t1[index];
          this._selectedDevice = t1;
          t2 = this._selectedController;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(t1);
        }
      },
      dispose$0: [function() {
        this.subs.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleDeviceAdd$1: [function(device) {
        var t1, t2;
        t1 = $.$get$atom()._notifications;
        t1.invoke$3("addSuccess", "Found " + H.S(device.getLabel$0()) + ".", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        t1 = this._devices;
        t1.add$1(0, device);
        t2 = this._devicesController;
        t1 = t1.toList$0(0);
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(t1);
        this._validateSelection$0();
      }, "call$1", "get$_handleDeviceAdd", 2, 0, 35, 17],
      _handleDeviceChanged$1: [function(device) {
        this._devices.add$1(0, device);
        if (J.$eq$(this._selectedDevice, device))
          this._selectedDevice = device;
        this._validateSelection$0();
      }, "call$1", "get$_handleDeviceChanged", 2, 0, 35, 17],
      _handleDeviceRemoved$1: [function(device) {
        var t1, t2;
        t1 = $.$get$atom()._notifications;
        t1.invoke$3("addInfo", H.S(device.getLabel$0()) + " removed.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        t1 = this._devices;
        t1.remove$1(0, device);
        t2 = this._devicesController;
        t1 = t1.toList$0(0);
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(t1);
        this._validateSelection$0();
      }, "call$1", "get$_handleDeviceRemoved", 2, 0, 35, 17],
      _validateSelection$0: function() {
        var selected, t1;
        selected = this._selectedDevice;
        t1 = this._devices;
        if (t1._collection$_length === 0)
          selected = null;
        if (!t1.contains$1(0, selected))
          selected = null;
        if (selected == null && t1._collection$_length !== 0)
          selected = t1.get$first(t1);
        if (!J.$eq$(selected, this._selectedDevice)) {
          this._selectedDevice = selected;
          t1 = this._selectedController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(selected);
        }
      },
      $isDisposable: 1
    },
    FlutterDeviceManager__updateForDaemon_closure: {
      "^": "Closure:57;$this",
      call$1: [function(result) {
        var t1, t2, t3;
        t1 = this.$this;
        t2 = t1._devices;
        t2.clear$0(0);
        t2.addAll$1(0, result);
        t3 = t1._devicesController;
        t2 = t2.toList$0(0);
        if (!t3.get$_mayAddEvent())
          H.throwExpression(t3._addEventError$0());
        t3._sendData$1(t2);
        t1._validateSelection$0();
      }, null, null, 2, 0, null, 3, "call"]
    },
    BuildMode: {
      "^": "Object;name>,supportsDebugging,startPaused",
      toString$0: function(_) {
        return this.name;
      }
    }
  }], ["", "package:atom_dartlang/flutter/flutter_ext.dart",, Z, {
    "^": "",
    FlutterExt: {
      "^": "Object;serviceWrapper,enabled,isolateId,services,_reapply",
      debugPaint$1: function(enabled) {
        var t1 = this._reapply;
        if (enabled)
          t1.$indexSet(0, "ext.flutter.debugPaint", new Z.FlutterExt_debugPaint_closure(this));
        else
          t1.remove$1(0, "ext.flutter.debugPaint");
        t1 = this.isolateId;
        return this.serviceWrapper.connection.service.callServiceExtension$3$args$isolateId("ext.flutter.debugPaint", P.LinkedHashMap__makeLiteral(["enabled", enabled]), t1);
      },
      repaintRainbow$1: function(enabled) {
        var t1 = this._reapply;
        if (enabled)
          t1.$indexSet(0, "ext.flutter.repaintRainbow", new Z.FlutterExt_repaintRainbow_closure(this));
        else
          t1.remove$1(0, "ext.flutter.repaintRainbow");
        t1 = this.isolateId;
        return this.serviceWrapper.connection.service.callServiceExtension$3$args$isolateId("ext.flutter.repaintRainbow", P.LinkedHashMap__makeLiteral(["enabled", enabled]), t1);
      },
      timeDilation$1: function(dilation) {
        var t1 = this._reapply;
        if (dilation === 1)
          t1.remove$1(0, "ext.flutter.timeDilation");
        else
          t1.$indexSet(0, "ext.flutter.timeDilation", new Z.FlutterExt_timeDilation_closure(this, dilation));
        t1 = this.isolateId;
        return this.serviceWrapper.connection.service.callServiceExtension$3$args$isolateId("ext.flutter.timeDilation", P.LinkedHashMap__makeLiteral(["timeDilation", dilation]), t1);
      },
      performanceOverlay$1: function(enabled) {
        var t1 = this._reapply;
        if (enabled)
          t1.$indexSet(0, "ext.flutter.showPerformanceOverlay", new Z.FlutterExt_performanceOverlay_closure(this));
        else
          t1.remove$1(0, "ext.flutter.showPerformanceOverlay");
        t1 = this.isolateId;
        return this.serviceWrapper.connection.service.callServiceExtension$3$args$isolateId("ext.flutter.showPerformanceOverlay", P.LinkedHashMap__makeLiteral(["enabled", enabled]), t1);
      },
      _flutter_ext$_init$0: function() {
        var t1, t2, t3;
        t1 = this.serviceWrapper.connection;
        t2 = this.get$_checkIsolate();
        C.JSArray_methods.forEach$1(P.List_List$from(t1.isolates._items, true, null), t2);
        t3 = t1._isolateCreatedController;
        new P._BroadcastStream(t3, [H.getTypeArgumentByIndex(t3, 0)]).listen$1(t2);
        t1 = t1.service._getEventController$1("Isolate");
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new Z.FlutterExt__init_closure(this));
      },
      _checkIsolate$1: [function(isolate) {
        if (isolate.get$isolate().get$extensionRPCs() == null)
          return;
        J.forEach$1$ax(isolate.get$isolate().get$extensionRPCs(), new Z.FlutterExt__checkIsolate_closure(this, isolate));
      }, "call$1", "get$_checkIsolate", 2, 0, 161, 13],
      _registerExtension$2: function(isolateId, extension) {
        var t1 = this.enabled;
        if (t1._utils$_value !== true)
          t1.set$value(0, true);
        this.isolateId = isolateId;
        $.$get$_logger13().finer$1("Found " + H.S(extension) + ".");
        t1 = this.services;
        if (t1.contains$1(0, extension)) {
          t1 = this._reapply;
          if (t1.containsKey$1(0, extension))
            t1.$index(0, extension).call$0();
        } else
          t1.add$1(0, extension);
      }
    },
    FlutterExt_debugPaint_closure: {
      "^": "Closure:1;$this",
      call$0: [function() {
        return this.$this.debugPaint$1(true);
      }, null, null, 0, 0, null, "call"]
    },
    FlutterExt_repaintRainbow_closure: {
      "^": "Closure:1;$this",
      call$0: [function() {
        return this.$this.repaintRainbow$1(true);
      }, null, null, 0, 0, null, "call"]
    },
    FlutterExt_timeDilation_closure: {
      "^": "Closure:1;$this,dilation",
      call$0: [function() {
        return this.$this.timeDilation$1(this.dilation);
      }, null, null, 0, 0, null, "call"]
    },
    FlutterExt_performanceOverlay_closure: {
      "^": "Closure:1;$this",
      call$0: [function() {
        return this.$this.performanceOverlay$1(true);
      }, null, null, 0, 0, null, "call"]
    },
    FlutterExt__init_closure: {
      "^": "Closure:23;$this",
      call$1: [function($event) {
        if (J.$eq$(J.get$kind$x($event), "ServiceExtensionAdded"))
          if (J.startsWith$1$s($event.get$extensionRPC(), "ext.flutter."))
            this.$this._registerExtension$2(J.get$id$x($event.get$isolate()), $event.get$extensionRPC());
      }, null, null, 2, 0, null, 12, "call"]
    },
    FlutterExt__checkIsolate_closure: {
      "^": "Closure:3;$this,isolate",
      call$1: function(ext) {
        if (J.startsWith$1$s(ext, "ext.flutter."))
          this.$this._registerExtension$2(J.get$id$x(this.isolate), ext);
      }
    }
  }], ["", "package:atom_dartlang/flutter/flutter_launch.dart",, O, {
    "^": "",
    FlutterLaunchType: {
      "^": "LaunchType;_lastFlutterLaunch,type",
      get$supportsChecked: function() {
        return false;
      },
      get$supportsDebugArg: function() {
        return false;
      },
      canLaunch$2: function(path, data) {
        var project, t1, t2;
        project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
        if (project == null)
          return false;
        if (!$.$get$_flutterSdk1().get$hasSdk())
          return false;
        if (data.get$hasMain() === true && project.isFlutterProject$0()) {
          t1 = data.fileContents;
          if (t1 != null) {
            t2 = J.getInterceptor$asx(t1);
            return t2.contains$1(t1, '"package:flutter/') === true || t2.contains$1(t1, "'package:flutter/") === true;
          }
        }
        return false;
      },
      performLaunch$2: function(manager, configuration) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, path, project, t1, t2, newLaunch, t3, t4, t5;
        var $async$performLaunch$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                path = configuration.get$primaryResource();
                project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
                if (project == null)
                  throw H.wrapException("File not in a Dart project.");
                if (!$.$get$_flutterSdk1().get$hasSdk()) {
                  $.$get$_flutterSdk1().showInstallationInfo$0();
                  throw H.wrapException("Unable to launch application; no Flutter SDK found.");
                }
                if (Q.Dependencies_instance().getDependency$1(C.Type_FlutterDaemonManager_8Wd).get$daemon() == null) {
                  $async$returnValue = H.throwExpression("Unable to launch application; the Flutter daemon is not running. Make sure a Flutter SDK is configured in the settings for the 'flutter' plugin and / or try re-starting Atom.");
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = $async$self._lastFlutterLaunch;
                $async$goto = t1 != null ? 3 : 4;
                break;
              case 3:
                // then
                $async$goto = J.$eq$(t1.launchConfiguration, configuration) ? 5 : 6;
                break;
              case 5:
                // then
                t1 = $async$self._lastFlutterLaunch;
                if (t1.exitCode._utils$_value == null) {
                  t2 = t1.app;
                  t2 = t2 != null && t2.supportsRestart === true;
                } else
                  t2 = false;
                $async$goto = t2 ? 7 : 8;
                break;
              case 7:
                // then
                $async$goto = 9;
                return P._asyncHelper(t1.restart$0(), $async$performLaunch$2, $async$completer);
              case 9:
                // returning from await.
                $async$returnValue = $async$self._lastFlutterLaunch;
                // goto return
                $async$goto = 1;
                break;
              case 8:
                // join
              case 6:
                // join
                $async$goto = 10;
                return P._asyncHelper($async$self._killLaunch$1($async$self._lastFlutterLaunch), $async$performLaunch$2, $async$completer);
              case 10:
                // returning from await.
              case 4:
                // join
                newLaunch = new O._RunLaunchInstance(Q.Dependencies_instance().getDependency$1(C.Type_FlutterDaemonManager_8Wd).get$daemon(), null, null, null, null, project, null, null, null, null);
                newLaunch._flutter_launch$_device = Q.Dependencies_instance().getDependency$1(C.Type_FlutterDeviceManager_zjY).get$currentSelectedDevice();
                newLaunch._mode = Q.Dependencies_instance().getDependency$1(C.Type_FlutterDeviceManager_zjY).get$runMode();
                t1 = configuration.get$typeArgs().$index(0, "route");
                newLaunch._route = t1;
                if (t1 != null && J.get$isEmpty$asx(t1) === true)
                  newLaunch._route = null;
                t1 = J.getInterceptor$x(project);
                newLaunch._flutter_launch$_target = $.$get$fs().relativize$2(t1.get$path(project), configuration.get$primaryResource());
                t2 = Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK);
                t3 = configuration.get$shortResourceName();
                t1 = t1.get$path(project);
                t4 = "flutter run " + H.S(newLaunch._flutter_launch$_target) + " (" + newLaunch._mode.name + ")";
                t5 = newLaunch._flutter_launch$_device;
                t5 = t5 == null ? t5 : J.get$name$x(t5);
                t4 = O._FlutterLaunch$(t2, $async$self, configuration, t3, project, t1, newLaunch.get$_kill(), t5, t4);
                newLaunch._launch = t4;
                $async$self._lastFlutterLaunch = t4;
                $async$returnValue = newLaunch.launch$0();
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$performLaunch$2, $async$completer);
      },
      connectToApp$4$pipeStdio: function(project, configuration, observatoryPort, pipeStdio) {
        if (!$.$get$_flutterSdk1().get$hasSdk()) {
          $.$get$_flutterSdk1().showInstallationInfo$0();
          return;
        }
        this._killLaunch$1(this._lastFlutterLaunch).then$1(new O.FlutterLaunchType_connectToApp_closure(this, project, configuration, observatoryPort, true));
      },
      connectToApp$3: function(project, configuration, observatoryPort) {
        return this.connectToApp$4$pipeStdio(project, configuration, observatoryPort, true);
      },
      getDefaultConfigText$0: function() {
        return "# The starting route for the app.\nroute:\n# Additional args for the flutter run command.\nargs:\n";
      },
      _killLaunch$1: function(launch) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError;
        var $async$_killLaunch$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (launch == null || launch.exitCode._utils$_value != null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 3;
                return P._asyncHelper(launch.kill$0(), $async$_killLaunch$1, $async$completer);
              case 3:
                // returning from await.
                $async$goto = 4;
                return P._asyncHelper(P.Future_Future$delayed(P.Duration$(0, 0, 0, 500, 0, 0), null, null), $async$_killLaunch$1, $async$completer);
              case 4:
                // returning from await.
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_killLaunch$1, $async$completer);
      }
    },
    FlutterLaunchType_connectToApp_closure: {
      "^": "Closure:0;$this,project,configuration,observatoryPort,pipeStdio",
      call$1: [function(_) {
        var t1, t2, t3, t4, newLaunch, description, t5, t6, t7;
        t1 = this.project;
        t2 = this.configuration;
        t3 = this.$this;
        t4 = this.observatoryPort;
        newLaunch = new O._ConnectLaunchInstance(t4, this.pipeStdio, t1, null, null, null, null);
        newLaunch._flutter_launch$_device = Q.Dependencies_instance().getDependency$1(C.Type_FlutterDeviceManager_zjY).get$currentSelectedDevice();
        description = "Flutter connect to port " + H.S(t4);
        t4 = Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK);
        t5 = t2.get$shortResourceName();
        t6 = J.get$path$x(t1);
        t7 = newLaunch._flutter_launch$_device;
        t7 = t7 == null ? t7 : J.get$name$x(t7);
        newLaunch._launch = O._FlutterLaunch$(t4, t3, t2, t5, t1, t6, newLaunch.get$_kill(), t7, description);
        Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).addLaunch$1(newLaunch._launch);
        t3._lastFlutterLaunch = newLaunch._launch;
        newLaunch.launch$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    _LaunchInstance0: {
      "^": "Object;",
      _connectToDebugger$0: function() {
        var t1 = this._launch;
        t1.toString;
        t1 = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(t1.launchConfiguration.get$primaryResource());
        t1 = t1 == null ? t1 : J.get$path$x(t1);
        D.ObservatoryDebugger_connect(this._launch, "localhost", this._observatoryPort, this.get$pipeStdio(), new O.FlutterUriTranslator(t1)).then$1(new O._LaunchInstance__connectToDebugger_closure(this)).catchError$1(new O._LaunchInstance__connectToDebugger_closure0(this));
      }
    },
    _LaunchInstance__connectToDebugger_closure: {
      "^": "Closure:31;$this",
      call$1: [function(connection) {
        var t1 = this.$this;
        t1.debugConnection = connection;
        t1._launch.servicePort.set$value(0, t1._observatoryPort);
      }, null, null, 2, 0, null, 59, "call"]
    },
    _LaunchInstance__connectToDebugger_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(e) {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._launch;
        t1 = "Unable to connect to the Observatory at port " + H.S(t1._observatoryPort) + ".\n";
        t2 = t2._stdio;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(new X.TextFragment(t1, true, false, false));
      }, null, null, 2, 0, null, 0, "call"]
    },
    _RunLaunchInstance: {
      "^": "_LaunchInstance0;daemon<,_mode,_route,_flutter_launch$_target,_flutter_launch$_app,project,_launch,_observatoryPort,_flutter_launch$_device,debugConnection",
      get$pipeStdio: function() {
        return false;
      },
      launch$0: [function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, enableHotReload, t1, t2, t3, t4, t5;
        var $async$launch$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                enableHotReload = $.$get$atom()._config.getValue$1("flutter.enableHotReload");
                t1 = $async$self.daemon.get$app();
                t2 = $async$self._flutter_launch$_device;
                t2 = t2 == null ? t2 : J.get$id$x(t2);
                t3 = J.get$path$x($async$self.project);
                t4 = $async$self._mode;
                t5 = $async$self._flutter_launch$_target;
                $async$returnValue = t1.start$7$enableHotReload$mode$route$startPaused$target(0, t2, t3, enableHotReload, t4.name, $async$self._route, t4.startPaused, t5).then$1(new O._RunLaunchInstance_launch_closure($async$self)).catchError$1(new O._RunLaunchInstance_launch_closure0());
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$launch$0, $async$completer);
      }, "call$0", "get$launch", 0, 0, 36],
      _kill$0: [function() {
        var t1 = this._flutter_launch$_app;
        if (t1 == null) {
          this._launch.launchTerminated$1(0);
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
          return t1;
        } else
          return t1.stop$0(0).whenComplete$1(new O._RunLaunchInstance__kill_closure(this)).catchError$1(new O._RunLaunchInstance__kill_closure0());
      }, "call$0", "get$_kill", 0, 0, 5]
    },
    _RunLaunchInstance_launch_closure: {
      "^": "Closure:163;$this",
      call$1: [function(result) {
        var t1, t2, t3, t4, t5;
        t1 = {};
        t2 = this.$this;
        t3 = t2.daemon.get$app();
        t4 = result.get$appId();
        t5 = result.get$supportsRestart();
        t3.toString;
        t5 = T.DaemonApp$(t3, t4, t5);
        t2._flutter_launch$_app = t5;
        t2._launch.app = t5;
        Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).addLaunch$1(t2._launch);
        t1.job = null;
        t2._flutter_launch$_app._debugPortCompleter.future.then$1(new O._RunLaunchInstance_launch__closure(t2));
        t5 = t2._flutter_launch$_app._logController;
        new P._BroadcastStream(t5, [H.getTypeArgumentByIndex(t5, 0)]).listen$1(new O._RunLaunchInstance_launch__closure0(t2));
        t5 = t2._flutter_launch$_app._progressController;
        new P._BroadcastStream(t5, [H.getTypeArgumentByIndex(t5, 0)]).listen$1(new O._RunLaunchInstance_launch__closure1(t1));
        t2._flutter_launch$_app._stoppedCompleter.future.then$1(new O._RunLaunchInstance_launch__closure2(t1, t2));
        return t2._launch;
      }, null, null, 2, 0, null, 3, "call"]
    },
    _RunLaunchInstance_launch__closure: {
      "^": "Closure:62;$this",
      call$1: [function($event) {
        var t1 = this.$this;
        t1._observatoryPort = J.get$port$x($event);
        t1._connectToDebugger$0();
      }, null, null, 2, 0, null, 12, "call"]
    },
    _RunLaunchInstance_launch__closure0: {
      "^": "Closure:59;$this",
      call$1: [function(log) {
        var t1, t2, t3, t4;
        t1 = this.$this;
        t2 = t1._launch;
        t3 = H.S(log.get$log()) + "\n";
        t4 = log.get$isError();
        t2 = t2._stdio;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(new X.TextFragment(t3, t4, false, false));
        if (log.get$hasStackTrace() === true) {
          t1 = t1._launch;
          t2 = H.S(log.get$stackTrace()) + "\n";
          t1 = t1._stdio;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(new X.TextFragment(t2, true, false, false));
        }
      }, null, null, 2, 0, null, 40, "call"]
    },
    _RunLaunchInstance_launch__closure1: {
      "^": "Closure:40;_box_0",
      call$1: [function(log) {
        var t1, t2, t3, t4, job;
        if (log.get$isFinished() !== true) {
          t1 = this._box_0;
          t2 = t1.job;
          if (!(t2 == null))
            t2.dispose$0();
          t2 = J.get$message$x(log);
          t3 = $.Zone__current;
          t4 = J.getInterceptor$s(t2);
          if (t4.endsWith$1(t2, "..."))
            t2 = t4.substring$2(t2, 0, J.$sub$n(t4.get$length(t2), 3));
          job = new O._LogStatusJob(new P._AsyncCompleter(new P._Future(0, t3, null, [null]), [null]), t2, null);
          t1.job = job;
          Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(job);
        } else {
          t1 = this._box_0.job;
          if (!(t1 == null))
            t1.dispose$0();
        }
      }, null, null, 2, 0, null, 40, "call"]
    },
    _RunLaunchInstance_launch__closure2: {
      "^": "Closure:0;_box_0,$this",
      call$1: [function(_) {
        var t1 = this._box_0.job;
        if (!(t1 == null))
          t1.dispose$0();
        this.$this._launch.launchTerminated$1(0);
      }, null, null, 2, 0, null, 1, "call"]
    },
    _RunLaunchInstance_launch_closure0: {
      "^": "Closure:0;",
      call$1: [function(e) {
        if (e instanceof T.RequestError0 && J.$eq$(e.error, "deviceId is required"))
          throw H.wrapException(new T.RequestError0(e.get$methodName(), "No target device available."));
        else
          throw H.wrapException(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    _RunLaunchInstance__kill_closure: {
      "^": "Closure:1;$this",
      call$0: [function() {
        this.$this._flutter_launch$_app = null;
      }, null, null, 0, 0, null, "call"]
    },
    _RunLaunchInstance__kill_closure0: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return;
      }, null, null, 2, 0, null, 0, "call"]
    },
    _LogStatusJob: {
      "^": "Job;completer,name,_schedulingRule",
      get$quiet: function() {
        return true;
      },
      run$0: [function() {
        return this.completer.future;
      }, "call$0", "get$run", 0, 0, 5],
      dispose$0: [function() {
        var t1 = this.completer;
        if (t1.future._state === 0)
          t1.complete$0(0);
      }, "call$0", "get$dispose", 0, 0, 2]
    },
    _ConnectLaunchInstance: {
      "^": "_LaunchInstance0;_observatoryDevicePort,pipeStdio<,project,_launch,_observatoryPort,_flutter_launch$_device,debugConnection",
      launch$0: [function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, $async$temp1;
        var $async$launch$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = $async$self;
                $async$goto = 3;
                return P._asyncHelper(Q.Dependencies_instance().getDependency$1(C.Type_FlutterDaemonManager_8Wd).get$daemon().get$device().forward$2(0, J.get$id$x($async$self._flutter_launch$_device), $async$self._observatoryDevicePort), $async$launch$0, $async$completer);
              case 3:
                // returning from await.
                $async$temp1._observatoryPort = $async$result;
                $async$self._connectToDebugger$0();
                $async$returnValue = $async$self._launch;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$launch$0, $async$completer);
      }, "call$0", "get$launch", 0, 0, 36],
      _kill$0: [function() {
        var t1, t2, t3;
        t1 = Q.Dependencies_instance().getDependency$1(C.Type_FlutterDaemonManager_8Wd).get$daemon().get$device();
        t2 = J.get$id$x(this._flutter_launch$_device);
        t3 = this._observatoryPort;
        t1.toString;
        t3 = T._stripNullValues0(P.LinkedHashMap__makeLiteral(["deviceId", t2, "devicePort", this._observatoryDevicePort, "hostPort", t3]));
        t1.server._flutter_daemon$_call$2(0, "device.unforward", t3);
        this._launch.launchTerminated$1(0);
        t3 = new P._Future(0, $.Zone__current, null, [null]);
        t3._asyncComplete$1(null);
        return t3;
      }, "call$0", "get$_kill", 0, 0, 5]
    },
    _FlutterLaunch: {
      "^": "Launch;resolver,app,launchType,launchConfiguration,name,title,targetName,manager,id,killHandler,cwd,exitCode,servicePort,_stdio,_debugConnection,_pathResolver",
      get$locationLabel: function() {
        return Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(this.launchConfiguration.get$primaryResource()).get$workspaceRelativeName();
      },
      get$supportsRestart: function() {
        var t1 = this.app;
        return t1 != null && t1.supportsRestart === true;
      },
      restart$1$fullRestart: function(fullRestart) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1;
        var $async$restart$1$fullRestart = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (fullRestart) {
                  t1 = $.$get$atom()._notifications;
                  t1.invoke$3("addInfo", "Performing full restart\u2026", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
                }
                t1 = $async$self.app;
                $async$returnValue = t1.daemon.restart$2$fullRestart(t1.appId, fullRestart).then$1(new O._FlutterLaunch_restart_closure());
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$restart$1$fullRestart, $async$completer);
      },
      restart$0: function() {
        return this.restart$1$fullRestart(false);
      },
      _FlutterLaunch$9$cwd$killHandler$targetName$title: function(manager, launchType, launchConfiguration, $name, project, cwd, killHandler, targetName, title) {
        var t1;
        this.resolver = X.CachingServerResolver$(J.get$path$x(project), Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC));
        t1 = this.exitCode._utils$_controller;
        t1 = new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
        t1.get$first(t1).then$1(new O._FlutterLaunch_closure(this));
      },
      static: {
        _FlutterLaunch$: function(manager, launchType, launchConfiguration, $name, project, cwd, killHandler, targetName, title) {
          var t1, t2, t3;
          t1 = $.Launch__id + 1;
          $.Launch__id = t1;
          t2 = [null];
          t3 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t2);
          t3._utils$_value = null;
          t2 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t2);
          t2._utils$_value = null;
          t2 = new O._FlutterLaunch(null, null, launchType, launchConfiguration, $name, title, targetName, manager, t1, killHandler, cwd, t3, t2, P.StreamController_StreamController$broadcast(null, null, false, null), null, null);
          if (cwd != null)
            t2._pathResolver = new X._PathResolver(cwd);
          t2._FlutterLaunch$9$cwd$killHandler$targetName$title(manager, launchType, launchConfiguration, $name, project, cwd, killHandler, targetName, title);
          return t2;
        }
      }
    },
    _FlutterLaunch_closure: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        var t1 = this.$this.resolver;
        t1._pathResolver == null;
        t1 = t1._serverResolver;
        if (!(t1 == null))
          t1.dispose$0();
        return;
      }, null, null, 2, 0, null, 1, "call"]
    },
    _FlutterLaunch_restart_closure: {
      "^": "Closure:164;",
      call$1: [function(result) {
        var t1;
        if (result.get$isError() === true) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "Error restarting application", t1._options$5$buttons$description$detail$dismissable$icon(null, J.get$message$x(result), null, null, null));
        }
      }, null, null, 2, 0, null, 3, "call"]
    },
    FlutterUriTranslator: {
      "^": "Object;root>",
      targetToClient$1: function(str) {
        var result = this._targetToClient$1(str);
        $.$get$_logger12().finer$1("targetToClient " + H.S(str) + " ==> " + H.S(result));
        return result;
      },
      _targetToClient$1: function(str) {
        var t1, t2;
        if ($.$get$fs().invoke$2("existsSync", str) === true) {
          t1 = P._Uri__Uri$file(str, null);
          t2 = t1._text;
          if (t2 == null) {
            t2 = t1._initializeText$0();
            t1._text = t2;
            t1 = t2;
          } else
            t1 = t2;
          return t1;
        } else
          return str;
      },
      clientToTarget$1: function(str) {
        var result = this._clientToTarget$1(str);
        $.$get$_logger12().finer$1("clientToTarget " + H.S(str) + " ==> " + H.S(result));
        return result;
      },
      _clientToTarget$1: function(str) {
        if (J.startsWith$1$s(str, "file:"))
          return P.Uri_parse(str, 0, null).toFilePath$0();
        else
          return str;
      }
    }
  }], ["", "package:atom_dartlang/flutter/flutter_sdk.dart",, Y, {
    "^": "",
    _discoverSdk: function() {
      if ($.$get$isMac() === true)
        return M.which("flutter", false).then$1(new Y._discoverSdk_closure()).catchError$1(new Y._discoverSdk_closure0());
      else if ($.$get$isWindows() === true)
        return M.which("flutter", true).then$1(new Y._discoverSdk_closure1()).catchError$1(new Y._discoverSdk_closure2());
      else
        return M.which("flutter", false).then$1(new Y._discoverSdk_closure3()).catchError$1(new Y._discoverSdk_closure4());
    },
    _resolveSdkFromFlutterPath: function(path) {
      if (path == null)
        return;
      if ($.$get$isWindows() === true) {
        if (J.contains$1$asx(path, "Pub\\Cache") === true)
          return;
      } else if (J.contains$1$asx(path, "/.pub-cache/") === true)
        return;
      return J.$index$asx(new F.Directory(new F.File(F._create("File", J.trim$0$s(path), null)).invoke$1("getParent")).invoke$1("getParent"), "path");
    },
    FlutterSdkManager: {
      "^": "Object;_flutter_sdk$_controller,_prefSub,_flutter_sdk$_disposables,_sdk",
      tryToAutoConfigure$1$complainOnFailure: function(complainOnFailure) {
        return Y._discoverSdk().then$1(new Y.FlutterSdkManager_tryToAutoConfigure_closure(complainOnFailure));
      },
      get$hasSdk: function() {
        return this._sdk != null;
      },
      get$sdk: function() {
        return this._sdk;
      },
      get$onSdkChange: function() {
        var t1 = this._flutter_sdk$_controller;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      _setSdk$2$verbose: function(sdk, verbose) {
        var t1, t2, path, dartSdkPath;
        t1 = $.$get$fs();
        t2 = $.$get$isWindows() === true ? "flutter.bat" : "flutter";
        t2 = new F.File(F._create("File", t1.join$3(0, sdk.path, "bin", t2), null)).invoke$1("existsSync") !== true;
        t1 = t2;
        if (t1) {
          path = sdk.path;
          if (verbose)
            if (path == null || J.get$isEmpty$asx(path) === true) {
              t1 = $.$get$atom()._notifications;
              t1.invoke$3("addWarning", "No Flutter SDK configured.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
            } else {
              t1 = $.$get$atom()._notifications;
              t1.invoke$3("addWarning", "Unable to locate Flutter SDK.", t1._options$5$buttons$description$detail$dismissable$icon(null, "No SDK at " + H.S(path) + ".", null, null, null));
            }
          sdk = null;
        }
        t1 = this._sdk;
        if (sdk == null ? t1 == null : sdk === t1)
          return;
        this._sdk = sdk;
        if (sdk != null) {
          t1 = $.$get$_logger24();
          t2 = sdk.path;
          t1.info$1("Using Flutter SDK at " + H.S(t2) + ".");
          if (verbose) {
            t1 = $.$get$atom()._notifications;
            t1.invoke$3("addSuccess", "Flutter SDK found at " + H.S(t2) + ".", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          }
          if (Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$noSdkPathConfigured()) {
            dartSdkPath = sdk.get$dartSdkPath();
            if (dartSdkPath != null)
              Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).setSdkPath$1(dartSdkPath);
          }
        }
        t1 = this._flutter_sdk$_controller;
        t2 = this._sdk;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(t2);
      },
      _setSdk$1: function(sdk) {
        return this._setSdk$2$verbose(sdk, false);
      },
      dispose$0: [function() {
        var t1 = this._prefSub;
        if (t1 != null)
          t1.cancel$0(0);
        this._flutter_sdk$_disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      showInstallationInfo$1$justVersion: function(justVersion) {
        var t1, t2, description, t3, job;
        t1 = {};
        t2 = this._sdk;
        description = t2 == null ? "No Flutter SDK configured." : "Using Flutter SDK at " + H.S(t2.path) + ".";
        t1.notification = null;
        t2 = $.$get$atom()._notifications;
        t1.notification = new D.Notification(t2.invoke$3("addSuccess", "Flutter SDK info", t2._options$5$buttons$description$detail$dismissable$icon([new D.NotificationButton("Auto-locate SDK", new Y.FlutterSdkManager_showInstallationInfo_closure(t1, this)), new D.NotificationButton("Plugin Settings\u2026", new Y.FlutterSdkManager_showInstallationInfo_closure0(t1))], null, description, true, null)));
        t1 = this._sdk;
        if (t1 != null) {
          t1.toString;
          t2 = $.$get$fs();
          t3 = t1.path;
          t2.join$3(0, t3, "bin", $.$get$isWindows() === true ? "flutter.bat" : "flutter");
          t2 = ["--version"];
          job = new Y._FlutterToolJob(t1, null, null, null, "Flutter " + H.S(C.JSArray_methods.get$first(t2)), null);
          job._args = t2;
          Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(job);
        }
      },
      showInstallationInfo$0: function() {
        return this.showInstallationInfo$1$justVersion(false);
      },
      FlutterSdkManager$0: function() {
        var t1, currentPath, t2;
        t1 = $.$get$atom();
        currentPath = t1._config.getValue$1("flutter.flutterRoot");
        if (currentPath == null || J.get$isEmpty$asx(currentPath) === true) {
          if (C.JSArray_methods.contains$1(P.List_List$from(t1._packages.invoke$1("getAvailablePackageNames"), true, null), "flutter"))
            this.tryToAutoConfigure$1$complainOnFailure(false);
        } else {
          t2 = $.$get$fs();
          t2 = new F.File(F._create("File", t2.join$3(0, currentPath, "bin", $.$get$isWindows() === true ? "flutter.bat" : "flutter"), null)).invoke$1("existsSync") === true;
          if (t2)
            this._setSdk$1(new Y.FlutterSdk(currentPath));
        }
        t2 = t1._config.onDidChange$1("flutter.flutterRoot");
        this._prefSub = new M.Debounce(P.Duration$(0, 0, 0, 0, 0, 1), [null]).bind$1(t2).listen$1(new Y.FlutterSdkManager_closure(this));
        if (C.JSArray_methods.contains$1(P.List_List$from(t1._packages.invoke$1("getAvailablePackageNames"), true, null), "flutter")) {
          t2 = this._flutter_sdk$_disposables._disposables;
          t2.push(t1._commands.add$3(0, "atom-workspace", "flutter:auto-locate-flutter-sdk", new Y.FlutterSdkManager_closure0(this)));
          t2.push(t1._commands.add$3(0, "atom-workspace", "flutter:show-flutter-sdk-info", new Y.FlutterSdkManager_closure1(this)));
          t2.push(t1._commands.add$3(0, "atom-workspace", "flutter:version", new Y.FlutterSdkManager_closure2(this)));
        }
      },
      $isDisposable: 1,
      static: {
        FlutterSdkManager$: function() {
          var t1 = new Y.FlutterSdkManager(P.StreamController_StreamController$broadcast(null, null, true, null), null, new L.Disposables(true, []), null);
          t1.FlutterSdkManager$0();
          return t1;
        }
      }
    },
    FlutterSdkManager_closure: {
      "^": "Closure:0;$this",
      call$1: [function(value) {
        this.$this._setSdk$2$verbose(new Y.FlutterSdk(value), true);
        return;
      }, null, null, 2, 0, null, 7, "call"]
    },
    FlutterSdkManager_closure0: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new Y.SdkLocationJob0(this.$this, "Auto locate SDK", null));
      }
    },
    FlutterSdkManager_closure1: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        this.$this.showInstallationInfo$0();
      }
    },
    FlutterSdkManager_closure2: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        var t1, t2, t3, job;
        t1 = this.$this._sdk;
        if (t1 != null) {
          t1.toString;
          t2 = $.$get$fs();
          t3 = t1.path;
          t2.join$3(0, t3, "bin", $.$get$isWindows() === true ? "flutter.bat" : "flutter");
          t2 = ["--version"];
          job = new Y._FlutterToolJob(t1, null, null, null, "Flutter " + H.S(C.JSArray_methods.get$first(t2)), null);
          job._args = t2;
          Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(job);
        } else {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addSuccess", "Flutter SDK info", t1._options$5$buttons$description$detail$dismissable$icon(null, null, "No Flutter SDK configured.", true, null));
        }
      }
    },
    FlutterSdkManager_tryToAutoConfigure_closure: {
      "^": "Closure:3;complainOnFailure",
      call$1: [function(sdkPath) {
        var t1;
        if (sdkPath != null) {
          $.$get$atom()._config.invoke$3("set", "flutter.flutterRoot", sdkPath);
          return true;
        } else {
          if (this.complainOnFailure) {
            t1 = $.$get$atom()._notifications;
            t1.invoke$3("addWarning", "Unable to auto-locate a Flutter SDK.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          }
          return false;
        }
      }, null, null, 2, 0, null, 41, "call"]
    },
    FlutterSdkManager_showInstallationInfo_closure: {
      "^": "Closure:1;_box_0,$this",
      call$0: [function() {
        this._box_0.notification.invoke$1("dismiss");
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new Y.SdkLocationJob0(this.$this, "Auto locate SDK", null));
      }, null, null, 0, 0, null, "call"]
    },
    FlutterSdkManager_showInstallationInfo_closure0: {
      "^": "Closure:1;_box_0",
      call$0: [function() {
        this._box_0.notification.invoke$1("dismiss");
        $.$get$atom()._workspace.openConfigPage$1$packageID("dartlang");
      }, null, null, 0, 0, null, "call"]
    },
    _discoverSdk_closure: {
      "^": "Closure:0;",
      call$1: [function(result) {
        return Y._resolveSdkFromFlutterPath(result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    _discoverSdk_closure0: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return;
      }, null, null, 2, 0, null, 0, "call"]
    },
    _discoverSdk_closure1: {
      "^": "Closure:0;",
      call$1: [function(result) {
        return Y._resolveSdkFromFlutterPath(result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    _discoverSdk_closure2: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return;
      }, null, null, 2, 0, null, 0, "call"]
    },
    _discoverSdk_closure3: {
      "^": "Closure:3;",
      call$1: [function(result) {
        return Y._resolveSdkFromFlutterPath(result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    _discoverSdk_closure4: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return;
      }, null, null, 2, 0, null, 0, "call"]
    },
    FlutterSdk: {
      "^": "Object;path>",
      get$flutterToolPath: function() {
        var t1, t2;
        t1 = $.$get$fs();
        t2 = $.$get$isWindows() === true ? "flutter.bat" : "flutter";
        return t1.join$3(0, this.path, "bin", t2);
      },
      get$flutterTool: function() {
        var t1, t2;
        t1 = $.$get$fs();
        t2 = $.$get$isWindows() === true ? "flutter.bat" : "flutter";
        return new Y.FlutterTool(this, t1.join$3(0, this.path, "bin", t2));
      },
      get$dartSdkPath: function() {
        var p = $.$get$fs().join$4(0, this.path, "bin", "cache", "dart-sdk");
        if (new F.Directory(F._create("Directory", p, null)).invoke$1("existsSync") === true)
          return p;
        return;
      },
      toString$0: function(_) {
        return "flutter sdk at " + H.S(this.path);
      }
    },
    FlutterTool: {
      "^": "Object;sdk<,toolPath",
      runRaw$3$cwd$startProcess: function(args, cwd, startProcess) {
        var runner = X.ProcessRunner_ProcessRunner$underShell(this.toolPath, args, cwd, null);
        if (startProcess)
          runner.execStreaming$0();
        return runner;
      },
      runRaw$2$startProcess: function(args, startProcess) {
        return this.runRaw$3$cwd$startProcess(args, null, startProcess);
      }
    },
    _FlutterToolJob: {
      "^": "Job;sdk<,cwd<,_args,title>,name,_schedulingRule",
      get$schedulingRule: function() {
        return this.cwd;
      },
      get$quiet: function() {
        return true;
      },
      run$0: [function() {
        var notifier, t1, t2, runner;
        notifier = D.ProcessNotifier$(this.name);
        t1 = $.$get$fs();
        t2 = $.$get$isWindows() === true ? "flutter.bat" : "flutter";
        runner = X.ProcessRunner_ProcessRunner$underShell(t1.join$3(0, this.sdk.path, "bin", t2), this._args, this.cwd, null);
        runner.execStreaming$0();
        return notifier.watch$1(runner);
      }, "call$0", "get$run", 0, 0, 5]
    },
    SdkLocationJob0: {
      "^": "Job;sdkManager,name,_schedulingRule",
      run$0: [function() {
        this.sdkManager.tryToAutoConfigure$1$complainOnFailure(true);
        return P.Future_Future$delayed(P.Duration$(0, 0, 0, 500, 0, 0), null, null);
      }, "call$0", "get$run", 0, 0, 5]
    }
  }], ["", "package:atom_dartlang/flutter/flutter_tools.dart",, D, {
    "^": "",
    FlutterToolsManager: {
      "^": "Object;disposables,connectManager",
      _screenshot$1: [function(_) {
        var t1, t2, t3, project, device, flutter, job;
        t1 = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ);
        t2 = $.$get$atom();
        t3 = t2._workspace.getActiveTextEditor$0();
        project = t1.getProjectFor$1(t3 == null ? t3 : t3.invoke$1("getPath"));
        if (project == null) {
          t1 = t2._notifications;
          t1.invoke$3("addWarning", "No active project.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          return;
        }
        device = Q.Dependencies_instance().getDependency$1(C.Type_FlutterDeviceManager_zjY).get$currentSelectedDevice();
        flutter = $.$get$_flutterSdk0().get$sdk().get$flutterTool();
        t1 = device == null ? ["screenshot"] : ["screenshot", "-d", J.get$id$x(device)];
        job = new Y._FlutterToolJob(flutter.sdk, J.get$path$x(J.get$directory$x(project)), null, null, "Flutter " + H.S(C.JSArray_methods.get$first(t1)), null);
        job._args = t1;
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(job);
      }, "call$1", "get$_screenshot", 2, 0, 6],
      _createProject$1: [function(_) {
        var t1, projectName, t2, t3, projectPath, flutter;
        t1 = {};
        if (!$.$get$_flutterSdk0().get$hasSdk()) {
          $.$get$_flutterSdk0().showInstallationInfo$0();
          return;
        }
        projectName = D.Haikunator_haikunate("_", "0123456789", false, 4);
        t2 = $.$get$fs();
        t3 = $.$get$_flutterSdk0().get$sdk();
        projectPath = t2.join$2(0, t2.dirname$1(t3.get$path(t3)), projectName);
        t1._response = null;
        flutter = $.$get$_flutterSdk0().get$sdk().get$flutterTool();
        D.promptUser("Enter the path to the project to create:", projectPath, false, true, false).then$1(new D.FlutterToolsManager__createProject_closure(t1, flutter)).then$1(new D.FlutterToolsManager__createProject_closure0(t1));
      }, "call$1", "get$_createProject", 2, 0, 6],
      _upgrade$1: [function(_) {
        var t1, editor, project, job;
        if (!$.$get$_flutterSdk0().get$hasSdk()) {
          $.$get$_flutterSdk0().showInstallationInfo$0();
          return;
        }
        t1 = $.$get$atom();
        editor = t1._workspace.getActiveTextEditor$0();
        if (editor == null) {
          t1 = t1._notifications;
          t1.invoke$3("addWarning", "No active editor.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          return;
        }
        project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(editor.invoke$1("getPath"));
        if (project == null) {
          t1 = t1._notifications;
          t1.invoke$3("addWarning", "The current project is not a Dart project.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          return;
        }
        t1._workspace.saveAll$0();
        t1 = ["upgrade"];
        job = new Y._FlutterToolJob($.$get$_flutterSdk0().get$sdk().get$flutterTool().sdk, J.get$path$x(J.get$directory$x(project)), null, null, "Flutter " + H.S(C.JSArray_methods.get$first(t1)), null);
        job._args = t1;
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(job);
      }, "call$1", "get$_upgrade", 2, 0, 6],
      _doctor$1: [function(_) {
        var flutter, t1, t2, job;
        if (!$.$get$_flutterSdk0().get$hasSdk()) {
          $.$get$_flutterSdk0().showInstallationInfo$0();
          return;
        }
        flutter = $.$get$_flutterSdk0().get$sdk().get$flutterTool();
        t1 = ["doctor"];
        t2 = $.$get$_flutterSdk0().get$sdk();
        job = new Y._FlutterToolJob(flutter.sdk, t2.get$path(t2), null, null, "Flutter " + H.S(C.JSArray_methods.get$first(t1)), null);
        job._args = t1;
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(job);
      }, "call$1", "get$_doctor", 2, 0, 6],
      _connect$1: [function(_, _0) {
        var t1, t2, t3, t4, t5;
        if (!$.$get$_flutterSdk0().get$hasSdk()) {
          $.$get$_flutterSdk0().showInstallationInfo$0();
          return;
        }
        t1 = this.connectManager;
        if (t1.connectDialog == null) {
          t2 = new K.ConnectDialog(null, null, null);
          t3 = K.TitledModelDialog$("Connect Debugger to Remote Flutter App:", "list-dialog");
          t2.dialog = t3;
          t3 = t3.content;
          t4 = K.CoreElement$("div", null, "select-list", null);
          t5 = K.CoreElement$("ol", null, "list-group", null);
          t2._listGroup = t5;
          t4.add$1(0, [t5]);
          t5 = K.CoreElement$("div", null, null, "Looking for apps\u2026");
          t2.itemCount = t5;
          t3.add$1(0, [t4, t5]);
          t1.connectDialog = t2;
          t1._flutter_connect$_disposables._disposables.push(t2);
        }
        t1.connectDialog.show$0(0);
      }, "call$1", "get$_connect", 2, 0, 6],
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    FlutterToolsManager__createProject_closure: {
      "^": "Closure:3;_box_0,flutter",
      call$1: [function(response) {
        var t1, job;
        this._box_0._response = response;
        if (response != null) {
          t1 = ["create", response];
          job = new Y._FlutterToolJob(this.flutter.sdk, null, null, null, "Flutter " + H.S(C.JSArray_methods.get$first(t1)), null);
          job._args = t1;
          return Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(job);
        }
      }, null, null, 2, 0, null, 27, "call"]
    },
    FlutterToolsManager__createProject_closure0: {
      "^": "Closure:0;_box_0",
      call$1: [function(_) {
        var t1, t2, t3, path;
        t1 = this._box_0;
        t2 = t1._response;
        if (t2 != null) {
          t3 = $.$get$atom();
          t3._project.invoke$2("addPath", t2);
          path = $.$get$fs().join$3(0, t1._response, "lib", "main.dart");
          t3._workspace.open$1(0, path).then$1(new D.FlutterToolsManager__createProject__closure());
        }
      }, null, null, 2, 0, null, 1, "call"]
    },
    FlutterToolsManager__createProject__closure: {
      "^": "Closure:8;",
      call$1: [function(editor) {
        var t1 = $.$get$atom();
        t1._commands.invoke$4("dispatch", t1._views.invoke$2("getView", editor), "tree-view:reveal-active-file", null);
      }, null, null, 2, 0, null, 9, "call"]
    }
  }], ["", "package:atom_dartlang/flutter/flutter_ui.dart",, N, {
    "^": "",
    FlutterSection: {
      "^": "Object;connection,infoElement,isDebugDrawing,isRepaintRainbow,isSlowAnimations,isPerformanceOverlay",
      get$flutterExtension: function() {
        return H.interceptedTypeCast(this.connection, "$isObservatoryConnection").flutterExtension;
      },
      _toggleDrawing$0: [function() {
        var t1 = !this.isDebugDrawing;
        this.isDebugDrawing = t1;
        H.interceptedTypeCast(this.connection, "$isObservatoryConnection").flutterExtension.debugPaint$1(t1);
      }, "call$0", "get$_toggleDrawing", 0, 0, 2],
      _toggleRepaintRainbow$0: [function() {
        var t1 = !this.isRepaintRainbow;
        this.isRepaintRainbow = t1;
        H.interceptedTypeCast(this.connection, "$isObservatoryConnection").flutterExtension.repaintRainbow$1(t1);
      }, "call$0", "get$_toggleRepaintRainbow", 0, 0, 2],
      _toggleSlowAnimations$0: [function() {
        var t1, t2;
        t1 = !this.isSlowAnimations;
        this.isSlowAnimations = t1;
        t2 = H.interceptedTypeCast(this.connection, "$isObservatoryConnection").flutterExtension;
        t2.timeDilation$1(t1 ? 5 : 1);
      }, "call$0", "get$_toggleSlowAnimations", 0, 0, 2],
      _togglePerformanceOverlay$0: [function() {
        var t1 = !this.isPerformanceOverlay;
        this.isPerformanceOverlay = t1;
        H.interceptedTypeCast(this.connection, "$isObservatoryConnection").flutterExtension.performanceOverlay$1(t1);
      }, "call$0", "get$_togglePerformanceOverlay", 0, 0, 2],
      FlutterSection$2: function(connection, element) {
        var t1, t2, t3, t4, t5, t6, t7, t8;
        t1 = K.CoreElement$("div", null, null, null);
        t2 = K.CoreElement$("span", null, "overflow-hidden-ellipsis", "Flutter");
        t3 = K.CoreElement$("span", null, "debugger-secondary-info", null);
        this.infoElement = t3;
        t3 = t1.add$1(0, [t2, t3]);
        t2 = K.CoreElement$("table", null, null, null);
        t1 = K.CoreElement$("tr", null, null, null);
        t4 = K.CoreElement$("td", null, null, null);
        t5 = K.CoreElement$("label", null, null, null);
        t6 = K.CoreElement$("input", null, null, null);
        J.setAttribute$2$x(t6.element, "type", "checkbox");
        t6.click$1(0, this.get$_toggleDrawing());
        t5.add$1(0, [t6, K.CoreElement$("span", null, "text-subtle", "Debug drawing")]);
        t4.add$1(0, [t5]);
        t5 = K.CoreElement$("td", null, null, null);
        t6 = K.CoreElement$("label", null, null, null);
        t7 = K.CoreElement$("input", null, null, null);
        J.setAttribute$2$x(t7.element, "type", "checkbox");
        t7.click$1(0, this.get$_toggleRepaintRainbow());
        t6.add$1(0, [t7, K.CoreElement$("span", null, "text-subtle", "Repaint rainbow")]);
        t5.add$1(0, [t6]);
        t1.add$1(0, [t4, t5]);
        t5 = K.CoreElement$("tr", null, null, null);
        t4 = K.CoreElement$("td", null, null, null);
        t6 = K.CoreElement$("label", null, null, null);
        t7 = K.CoreElement$("input", null, null, null);
        J.setAttribute$2$x(t7.element, "type", "checkbox");
        t7.click$1(0, this.get$_togglePerformanceOverlay());
        t6.add$1(0, [t7, K.CoreElement$("span", null, "text-subtle", "Performance overlay")]);
        t4.add$1(0, [t6]);
        t6 = K.CoreElement$("td", null, null, null);
        t7 = K.CoreElement$("label", null, null, null);
        t8 = K.CoreElement$("input", null, null, null);
        J.setAttribute$2$x(t8.element, "type", "checkbox");
        t8.click$1(0, this.get$_toggleSlowAnimations());
        t7.add$1(0, [t8, K.CoreElement$("span", null, "text-subtle", "Slow animations")]);
        t6.add$1(0, [t7]);
        t5.add$1(0, [t4, t6]);
        t2.add$1(0, [t1, t5]);
        element.add$1(0, [t3, t2]);
        element.attribute$2("hidden", true);
        t1 = this.connection;
        if (t1 instanceof D.ObservatoryConnection) {
          t1 = t1.get$flutterExtension().enabled;
          t2 = new N.FlutterSection_closure(element);
          t2.call$1(t1._utils$_value);
          t1 = t1._utils$_controller;
          new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(t2);
        }
      },
      static: {
        FlutterSection$: function(connection, element) {
          var t1 = new N.FlutterSection(connection, null, false, false, false, false);
          t1.FlutterSection$2(connection, element);
          return t1;
        }
      }
    },
    FlutterSection_closure: {
      "^": "Closure:0;element",
      call$1: [function(value) {
        if (value === true)
          this.element.attribute$2("hidden", false);
      }, null, null, 2, 0, null, 7, "call"]
    }
  }], ["", "package:atom_dartlang/flutter/mojo_launch.dart",, T, {
    "^": "",
    MojoLaunchType: {
      "^": "LaunchType;_mojo_launch$_lastLaunch,type",
      canLaunch$2: function(path, data) {
        return false;
      },
      getDefaultConfigText$0: function() {
        return "checked: true\n# args:\n#  - --mojo-path=path/to/mojo";
      },
      performLaunch$2: function(manager, configuration) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, path, project, t1, flutterArgs, t2, route, t3, relPath, t4, t5, t6, t7, t8, t9;
        var $async$performLaunch$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                path = configuration.get$primaryResource();
                project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
                if (project == null)
                  throw H.wrapException("File not in a Dart project.");
                if (!$.$get$_flutterSdk2().get$hasSdk()) {
                  $.$get$_flutterSdk2().showInstallationInfo$0();
                  throw H.wrapException("Unable to launch " + H.S(configuration.get$shortResourceName()) + "; no Flutter SDK found.");
                }
                $async$goto = 3;
                return P._asyncHelper($async$self._mojo_launch$_killLastLaunch$0(), $async$performLaunch$2, $async$completer);
              case 3:
                // returning from await.
                t1 = new T._LaunchInstance(project, null, null, null, null);
                flutterArgs = configuration.get$argsAsList();
                t2 = ["run_mojo"];
                t1._mojo_launch$_args = t2;
                route = configuration.get$typeArgs().$index(0, "route");
                if (typeof route === "string" && route.length !== 0) {
                  t2.push("--route");
                  t2.push(route);
                }
                t3 = Q.Dependencies_instance().getDependency$1(C.Type_FlutterDeviceManager_zjY).get$currentSelectedDevice();
                t1._mojo_launch$_device = t3;
                if (t3 != null) {
                  t2.push("--device-id");
                  t2.push(J.get$id$x(t3));
                }
                t3 = J.getInterceptor$x(project);
                relPath = $.$get$fs().relativize$2(t3.get$path(project), configuration.get$primaryResource());
                if (!J.$eq$(relPath, "lib/main.dart")) {
                  t2.push("-t");
                  t2.push(relPath);
                }
                C.JSArray_methods.addAll$1(t2, flutterArgs);
                t2 = Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK);
                t4 = configuration.get$shortResourceName();
                t3 = t3.get$path(project);
                t5 = t1._mojo_launch$_args;
                t5 = "flutter " + (t5 && C.JSArray_methods).join$1(t5, " ");
                t6 = t1._mojo_launch$_device;
                t6 = t6 == null ? t6 : J.get$name$x(t6);
                t7 = $.Launch__id + 1;
                $.Launch__id = t7;
                t8 = [null];
                t9 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t8);
                t9._utils$_value = null;
                t8 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t8);
                t8._utils$_value = null;
                t8 = new X.Launch($async$self, configuration, t4, t5, t6, t2, t7, t1.get$_mojo_launch$_kill(), t3, t9, t8, P.StreamController_StreamController$broadcast(null, null, false, null), null, null);
                if (t3 != null)
                  t8._pathResolver = new X._PathResolver(t3);
                t1._mojo_launch$_launch = t8;
                Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).addLaunch$1(t1._mojo_launch$_launch);
                $async$self._mojo_launch$_lastLaunch = t1;
                $async$returnValue = t1.launch$0();
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$performLaunch$2, $async$completer);
      },
      _mojo_launch$_killLastLaunch$0: function() {
        var t1, launch;
        t1 = this._mojo_launch$_lastLaunch;
        if (t1 == null) {
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
        launch = t1._mojo_launch$_launch;
        if (launch.exitCode._utils$_value != null) {
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
        } else
          t1 = launch.kill$0();
        return t1;
      }
    },
    _LaunchInstance: {
      "^": "Object;project,_mojo_launch$_launch,_runner,_mojo_launch$_args,_mojo_launch$_device",
      launch$0: [function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1;
        var $async$launch$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $.$get$_flutterSdk2().get$sdk().get$flutterTool().runRaw$3$cwd$startProcess($async$self._mojo_launch$_args, J.get$path$x($async$self.project), false);
                $async$self._runner = t1;
                t1.execStreaming$0();
                t1 = $async$self._runner._stdoutController;
                new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new T._LaunchInstance_launch_closure($async$self));
                t1 = $async$self._runner._stderrController;
                new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new T._LaunchInstance_launch_closure0($async$self));
                $async$self._runner._exitCompleter.future.then$1(new T._LaunchInstance_launch_closure1($async$self));
                $async$returnValue = $async$self._mojo_launch$_launch;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$launch$0, $async$completer);
      }, "call$0", "get$launch", 0, 0, 36],
      _mojo_launch$_kill$0: [function() {
        if (this._runner == null) {
          this._mojo_launch$_launch.launchTerminated$1(1);
          var t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
          return t1;
        } else
          return P.Future_Future$delayed(P.Duration$(0, 0, 0, 250, 0, 0), new T._LaunchInstance__kill_closure(this), null);
      }, "call$0", "get$_mojo_launch$_kill", 0, 0, 5]
    },
    _LaunchInstance_launch_closure: {
      "^": "Closure:3;$this",
      call$1: [function(str) {
        var t1 = this.$this._mojo_launch$_launch._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, false, false, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    _LaunchInstance_launch_closure0: {
      "^": "Closure:3;$this",
      call$1: [function(str) {
        var t1 = this.$this._mojo_launch$_launch._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, true, false, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    _LaunchInstance_launch_closure1: {
      "^": "Closure:0;$this",
      call$1: [function(code) {
        return this.$this._mojo_launch$_launch.launchTerminated$1(code);
      }, null, null, 2, 0, null, 14, "call"]
    },
    _LaunchInstance__kill_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._runner;
        if (!(t2 == null))
          t2.kill$0();
        t1._runner = null;
      }
    }
  }], ["", "package:atom_dartlang/impl/changelog.dart",, G, {
    "^": "",
    _checkChangelog: [function(currentVersion) {
      var t1, lastVersion;
      t1 = $.$get$atom();
      lastVersion = t1._config.getValue$1("_dartlang._version");
      if (!J.$eq$(lastVersion, currentVersion)) {
        $.$get$_logger33().info$1("upgraded from " + H.S(lastVersion) + " to " + H.S(currentVersion));
        t1._config.invoke$3("set", "_dartlang._version", currentVersion);
        if (lastVersion != null) {
          t1 = t1._notifications;
          t1.invoke$3("addSuccess", "Upgraded to dartlang plugin version " + H.S(currentVersion) + ".", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        }
      } else
        $.$get$_logger33().info$1("dartlang version " + H.S(currentVersion));
    }, "call$1", "changelog___checkChangelog$closure", 2, 0, 10, 136],
    ChangelogManager: {
      "^": "Object;disposables,_changeLogFile",
      _handleReleaseNotes$0: function() {
        var t1, f;
        t1 = this._changeLogFile;
        if (t1 != null) {
          f = new P._Future(0, $.Zone__current, null, [null]);
          f._asyncComplete$1(t1);
        } else
          f = W.HttpRequest_getString("atom://dartlang/CHANGELOG.md", null, null).then$1(new G.ChangelogManager__handleReleaseNotes_closure(this));
        f.then$1(new G.ChangelogManager__handleReleaseNotes_closure0());
      },
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      ChangelogManager$0: function() {
        var t1, t2;
        t1 = $.$get$atom();
        t2 = this.disposables._disposables;
        t2.push(t1._commands.add$3(0, "atom-workspace", "dartlang:release-notes", new G.ChangelogManager_closure(this)));
        t2.push(t1._commands.add$3(0, "atom-workspace", "dartlang:getting-started", new G.ChangelogManager_closure0(this)));
      },
      $isDisposable: 1,
      static: {
        ChangelogManager$: function() {
          var t1 = new G.ChangelogManager(new L.Disposables(true, []), null);
          t1.ChangelogManager$0();
          return t1;
        }
      }
    },
    ChangelogManager_closure: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        this.$this._handleReleaseNotes$0();
      }
    },
    ChangelogManager_closure0: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        $.$get$shell().invoke$2("openExternal", "https://dart-atom.github.io/dartlang/");
      }
    },
    ChangelogManager__handleReleaseNotes_closure: {
      "^": "Closure:0;$this",
      call$1: [function(contents) {
        var t1, t2;
        t1 = this.$this;
        t2 = new F.File(F._cvt0(new F.Directory(F._create("Directory", $.$get$fs()._os.callMethod$1("tmpdir"), null)).invoke$2("getFile", "CHANGELOG.md")));
        t1._changeLogFile = t2;
        t2.invoke$2("writeSync", contents);
        return t1._changeLogFile;
      }, null, null, 2, 0, null, 137, "call"]
    },
    ChangelogManager__handleReleaseNotes_closure0: {
      "^": "Closure:165;",
      call$1: [function(file) {
        $.$get$atom()._workspace.open$2$options(0, J.get$path$x(file), P.LinkedHashMap__makeLiteral(["split", "right"]));
      }, null, null, 2, 0, null, 138, "call"]
    }
  }], ["atom.debounce", "package:atom_dartlang/impl/debounce.dart",, M, {
    "^": "",
    Debounce: {
      "^": "Object;duration,$ti",
      bind$1: function(stream) {
        var t1, controller;
        t1 = {};
        controller = P.StreamController_StreamController(null, null, null, null, false, null);
        t1.timer = null;
        t1.sub = null;
        t1.sub = stream.listen$2$onDone(new M.Debounce_bind_closure(t1, this, controller), new M.Debounce_bind_closure0(t1));
        return new P._ControllerStream(controller, [H.getTypeArgumentByIndex(controller, 0)]);
      }
    },
    Debounce_bind_closure: {
      "^": "Closure;_box_0,$this,controller",
      call$1: [function(data) {
        var t1, t2;
        t1 = this._box_0;
        t2 = t1.timer;
        if (!(t2 == null))
          t2.cancel$0(0);
        t1.timer = P.Timer_Timer(this.$this.duration, new M.Debounce_bind__closure(this.controller, data));
      }, null, null, 2, 0, null, 11, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Debounce");
      }
    },
    Debounce_bind__closure: {
      "^": "Closure:1;controller,data",
      call$0: function() {
        var t1 = this.controller;
        if (t1._state >= 4)
          H.throwExpression(t1._badEventState$0());
        t1._async$_add$1(0, this.data);
        return;
      }
    },
    Debounce_bind_closure0: {
      "^": "Closure:1;_box_0",
      call$0: [function() {
        return this._box_0.sub.cancel$0(0);
      }, null, null, 0, 0, null, "call"]
    }
  }], ["atom.editing", "package:atom_dartlang/impl/editing.dart",, B, {
    "^": "",
    handleEnterKey: [function($event) {
      var view, editor, selection, row, col, handled, e, t1, exception;
      try {
        view = new Y.TextEditorElement(Y._cvt1(J.$index$asx($event.obj, "currentTarget")));
        editor = new Y.TextEditor(Y._cvt1(view.invoke$1("getModel")));
        t1 = editor.invoke$1("getSelectedBufferRange");
        selection = t1 == null ? null : new Y.Range(Y._cvt1(t1));
        if (selection.invoke$1("isEmpty") !== true)
          $event.invoke$1("abortKeyBinding");
        else {
          row = J.$index$asx(Y._cvt1(J.$index$asx(selection.get$obj(), "start")), "row");
          if (!J.$eq$(editor.invoke$2("isBufferRowCommented", row), true))
            $event.invoke$1("abortKeyBinding");
          else {
            col = J.$index$asx(Y._cvt1(J.$index$asx(selection.get$obj(), "start")), "column");
            handled = B._handleEnterKey(editor, row, col);
            if (handled !== true)
              $event.invoke$1("abortKeyBinding");
          }
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        $event.invoke$1("abortKeyBinding");
        $.$get$_logger21().severe$2("exception during enter key handling", e);
      }
    }, "call$1", "editing__handleEnterKey$closure", 2, 0, 6],
    _handleEnterKey: function(editor, row, col) {
      var t1, line, t2, trimmedText, atEol, t3, leading, inComment, t4, previousLine, nextLine, prefLineLength, wrapAtCol;
      t1 = {};
      t1.col = col;
      col = J.$sub$n(col, 1);
      t1.col = col;
      line = editor.invoke$2("lineTextForBufferRow", row);
      t2 = J.getInterceptor$s(line);
      trimmedText = t2.trimLeft$0(line);
      atEol = J.$eq$(J.$add$ns(col, 1), t2.get$length(line));
      t1.leading = " ";
      if (C.JSString_methods.startsWith$1(trimmedText, "///")) {
        t3 = trimmedText.length;
        leading = C.JSString_methods.substring$2(trimmedText, 3, t3 - C.JSString_methods.trimLeft$0(C.JSString_methods.substring$1(trimmedText, 3)).length);
        t1.leading = leading;
        inComment = J.$le$n(J.$add$ns(J.$sub$n(t2.get$length(line), t3), 2), col);
        t3 = leading;
      } else if (C.JSString_methods.startsWith$1(trimmedText, "//")) {
        inComment = J.$le$n(J.$add$ns(J.$sub$n(t2.get$length(line), trimmedText.length), 1), col);
        t3 = " ";
      } else if (C.JSString_methods.startsWith$1(trimmedText, "*")) {
        t3 = trimmedText.length;
        leading = C.JSString_methods.substring$2(trimmedText, 1, t3 - C.JSString_methods.trimLeft$0(C.JSString_methods.substring$1(trimmedText, 1)).length);
        t1.leading = leading;
        inComment = J.$le$n(J.$add$ns(J.$sub$n(t2.get$length(line), t3), 0), col);
        t3 = leading;
      } else {
        inComment = C.JSString_methods.startsWith$1(trimmedText, "/*") && J.$le$n(J.$add$ns(J.$sub$n(t2.get$length(line), trimmedText.length), 1), col);
        t3 = " ";
      }
      if (!inComment)
        return false;
      if (t3.length === 0)
        t1.leading = " ";
      t3 = J.getInterceptor$n(row);
      t4 = editor.invoke$2("lineTextForBufferRow", t3.$sub(row, 1));
      previousLine = t4 == null ? t4 : J.trimLeft$0$s(t4);
      if (previousLine == null)
        previousLine = "";
      t4 = editor.invoke$2("lineTextForBufferRow", t3.$add(row, 1));
      nextLine = t4 == null ? t4 : J.trimLeft$0$s(t4);
      if (nextLine == null)
        nextLine = "";
      if (C.JSString_methods.startsWith$1(trimmedText, "///")) {
        if (trimmedText === "/// /" && atEol)
          editor.atomic$1(new B._handleEnterKey_closure(editor));
        else
          editor.atomic$1(new B._handleEnterKey_closure0(t1, editor));
        return true;
      }
      if (C.JSString_methods.startsWith$1(trimmedText, "//")) {
        if (!atEol) {
          editor.atomic$1(new B._handleEnterKey_closure1(editor));
          return true;
        } else {
          prefLineLength = $.$get$atom()._config.getValue$2$scope("editor.preferredLineLength", editor.invoke$1("getRootScopeDescriptor"));
          if (J.$ge$n(col, prefLineLength)) {
            wrapAtCol = C.JSString_methods.lastIndexOf$1(t2.substring$2(line, 0, J.$add$ns(prefLineLength, 1)), " ");
            t1.wrapAtCol = wrapAtCol;
            t3 = J.$add$ns(J.$sub$n(t2.get$length(line), trimmedText.length), 3);
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (wrapAtCol < t3)
              t1.wrapAtCol = t2.indexOf$2(line, " ", prefLineLength);
            editor.atomic$1(new B._handleEnterKey_closure2(t1, editor));
            return true;
          }
        }
        return false;
      }
      if (C.JSString_methods.startsWith$1(trimmedText, "/*")) {
        if (J.startsWith$1$s(nextLine, "*"))
          editor.atomic$1(new B._handleEnterKey_closure3(editor));
        else
          editor.atomic$1(new B._handleEnterKey_closure4(t1, editor));
        return true;
      }
      if (C.JSString_methods.endsWith$1(trimmedText, "*/") && atEol) {
        editor.atomic$1(new B._handleEnterKey_closure5(editor, line, trimmedText));
        return true;
      }
      if (C.JSString_methods.startsWith$1(trimmedText, "*"))
        if (t3.$gt(row, 0)) {
          t2 = J.getInterceptor$s(previousLine);
          if (t2.startsWith$1(previousLine, "/*") || t2.startsWith$1(previousLine, "*")) {
            editor.atomic$1(new B._handleEnterKey_closure6(t1, editor));
            return true;
          }
        }
      return false;
    },
    _handleEnterKey_closure: {
      "^": "Closure:1;editor",
      call$0: function() {
        var t1 = this.editor;
        t1.invoke$1("backspace");
        t1.invoke$1("backspace");
        t1.invoke$1("backspace");
        t1.invoke$1("backspace");
        t1.invoke$1("backspace");
      }
    },
    _handleEnterKey_closure0: {
      "^": "Closure:1;_box_0,editor",
      call$0: function() {
        var t1 = this.editor;
        t1.invoke$1("insertNewline");
        t1.insertText$1("///" + this._box_0.leading);
      }
    },
    _handleEnterKey_closure1: {
      "^": "Closure:1;editor",
      call$0: function() {
        var t1 = this.editor;
        t1.invoke$1("insertNewline");
        t1.insertText$1("// ");
      }
    },
    _handleEnterKey_closure2: {
      "^": "Closure:1;_box_0,editor",
      call$0: function() {
        var t1 = this._box_0;
        if (J.$ge$n(t1.wrapAtCol, 0))
          this.editor.invoke$2("moveLeft", J.$sub$n(t1.col, t1.wrapAtCol));
        t1 = this.editor;
        t1.invoke$1("insertNewline");
        t1.insertText$1("// ");
        t1.invoke$1("moveToEndOfLine");
      }
    },
    _handleEnterKey_closure3: {
      "^": "Closure:1;editor",
      call$0: function() {
        var t1 = this.editor;
        t1.invoke$1("insertNewline");
        t1.insertText$1(" * ");
      }
    },
    _handleEnterKey_closure4: {
      "^": "Closure:1;_box_0,editor",
      call$0: function() {
        var t1 = this.editor;
        t1.invoke$1("insertNewline");
        t1.insertText$1(" *" + this._box_0.leading);
        t1.invoke$1("insertNewline");
        t1.insertText$1("*/");
        t1.invoke$2("moveUp", 1);
      }
    },
    _handleEnterKey_closure5: {
      "^": "Closure:1;editor,line,trimmedText",
      call$0: function() {
        var t1 = this.editor;
        t1.invoke$1("insertNewline");
        if (!J.$eq$(this.line, this.trimmedText))
          t1.invoke$1("backspace");
      }
    },
    _handleEnterKey_closure6: {
      "^": "Closure:1;_box_0,editor",
      call$0: function() {
        var t1 = this.editor;
        t1.invoke$1("insertNewline");
        t1.insertText$1("*" + this._box_0.leading);
      }
    }
  }], ["atom.errors", "package:atom_dartlang/impl/errors.dart",, G, {
    "^": "",
    ErrorsController: {
      "^": "Object;disposables,_errors$_sub,view>,statusElement,_focusedDir,_cachedErrors,enabled",
      dispose$0: [function() {
        this._errors$_sub.cancel$0(0);
        this.disposables.dispose$0();
        var t1 = this.statusElement.statusTile;
        if (t1 != null)
          t1.invoke$1("destroy");
        this.view.toString;
      }, "call$0", "get$dispose", 0, 0, 2],
      toggleView$0: [function() {
        this.view.toString;
        if (Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).hasViewId$1("errors") && Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).isActiveId$1("errors"))
          this.view.showView$1(false);
        else {
          this.view.toString;
          if (Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).hasViewId$1("errors")) {
            var t1 = Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8);
            this.view.toString;
            t1.activateView$1("errors");
          } else
            this.view.showView$1(true);
        }
      }, "call$0", "get$toggleView", 0, 0, 2],
      _togglePrefs$1: [function(value) {
        var t1;
        this.enabled = value;
        this.view.toString;
        if (Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).hasViewId$1("errors") && this.enabled !== true)
          this.view.showView$1(false);
        this.view.toString;
        if (!Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).hasViewId$1("errors") && this.enabled === true)
          this.view.showView$1(true);
        t1 = this.statusElement;
        if (t1._errors$_showing === true && this.enabled !== true) {
          J.set$display$x(J.get$style$x(t1._errors$_element.element), "none");
          t1._errors$_showing = false;
        }
        t1 = this.statusElement;
        if (t1._errors$_showing !== true && this.enabled === true) {
          J.set$display$x(J.get$style$x(t1._errors$_element.element), "inline-block");
          t1._errors$_showing = true;
        }
        t1 = $.$get$atom();
        t1._config.invoke$3("set", "linter.showErrorPanel", this.enabled !== true);
        t1._config.invoke$3("set", "linter.displayLinterInfo", this.enabled !== true);
      }, "call$1", "get$_togglePrefs", 2, 0, 47, 7],
      _focusChanged$1: [function(_) {
        var t1, editor, path, newFocus;
        t1 = $.$get$atom();
        editor = t1._workspace.getActiveTextEditor$0();
        if (editor == null)
          return;
        path = editor.invoke$1("getPath");
        if (path == null)
          return;
        t1 = P.List_List$from(t1._project.invoke$2("relativizePath", path), true, null);
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        newFocus = t1[0];
        if (!J.$eq$(newFocus, this._focusedDir)) {
          this._focusedDir = newFocus;
          this._errors$_handleErrorsChanged$1(this._cachedErrors);
        }
      }, "call$1", "get$_focusChanged", 2, 0, 15],
      _errors$_handleErrorsChanged$1: [function(errors) {
        var filteredErrors, t1, shortName;
        this._cachedErrors = errors;
        filteredErrors = this._focusedDir != null ? J.where$1$ax(errors, new G.ErrorsController__handleErrorsChanged_closure(this)).toList$0(0) : errors;
        t1 = this._focusedDir;
        shortName = t1 == null ? null : $.$get$fs().basename$1(t1);
        this.statusElement._errors$_handleErrorsChanged$1(filteredErrors);
        this.view._errors$_handleErrorsChanged$2$focus(filteredErrors, shortName);
      }, "call$1", "get$_errors$_handleErrorsChanged", 2, 0, 166, 71],
      ErrorsController$0: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
        t1 = $.$get$atom();
        t2 = this.disposables._disposables;
        t2.push(t1._commands.add$3(0, "atom-workspace", "dartlang:toggle-errors-view", new G.ErrorsController_closure(this)));
        t3 = t1._config.getValue$1("dartlang.showErrorsView");
        this.enabled = t3;
        t4 = K.CoreElement$("div", null, "tab-content", null);
        t5 = K.CoreElement$("div", null, null, null);
        t6 = K.CoreElement$("div", null, null, null);
        t7 = new G.ErrorsView(null, null, null, t4, t5, t6, null, null, null);
        t7.View$0();
        t8 = t4.element;
        t9 = J.getInterceptor$x(t8);
        J.toggle$2$x(t9.get$classes(t8), "errors-view", true);
        J.toggle$2$x(t9.get$classes(t8), "dartlang", true);
        t10 = K.CoreElement$("div", null, "errors-count", null);
        t7.countElement = t10;
        t11 = K.CoreElement$("div", null, "badge focus-title", null);
        t7.focusElement = t11;
        t5.add$1(0, [t10, t11]);
        t6 = t6.element;
        t11 = J.getInterceptor$x(t6);
        J.toggle$2$x(t11.get$classes(t6), "tab-scrollable", null);
        t11.set$tabIndex(t6, 1);
        t5 = $.$get$state();
        if (J.$index$asx(t5._pluginState, "errorViewShowing") == null)
          t5.$indexSet(0, "errorViewShowing", t3);
        t7.showView$1(!J.$eq$(J.$index$asx(t5._pluginState, "errorViewShowing"), false));
        t9.get$onKeyDown(t8).listen$1(t4.get$_handleCopyKeyPress());
        this.view = t7;
        this.statusElement = new G.ErrorsStatusElement(this, this.enabled, null, null, null);
        t3 = $.$get$_processedErrorsController();
        t3.toString;
        new P._BroadcastStream(t3, [H.getTypeArgumentByIndex(t3, 0)]).listen$1(this.get$_errors$_handleErrorsChanged());
        this._errors$_handleErrorsChanged$1([]);
        t2.push(t1._workspace.observeActivePaneItem$1(this.get$_focusChanged()));
        this._errors$_sub = t1._config.onDidChange$1("dartlang.showErrorsView").listen$1(this.get$_togglePrefs());
        if (!J.$eq$(t1._config.getValue$1("_dartlang._errorsInitialized"), true)) {
          t1._config.invoke$3("set", "_dartlang._errorsInitialized", true);
          this._togglePrefs$1(true);
        }
      },
      $isDisposable: 1,
      static: {
        ErrorsController$: function() {
          var t1 = new G.ErrorsController(new L.Disposables(true, []), null, null, null, null, [], false);
          t1.ErrorsController$0();
          return t1;
        }
      }
    },
    ErrorsController_closure: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        return this.$this.toggleView$0();
      }
    },
    ErrorsController__handleErrorsChanged_closure: {
      "^": "Closure:56;$this",
      call$1: function(e) {
        return J.startsWith$1$s(J.get$file$x(J.get$location$x(e)), this.$this._focusedDir);
      }
    },
    ErrorsView: {
      "^": "View;target>,countElement,focusElement,root,toolbar,content,tabElement,_closeButton,group",
      get$id: function(_) {
        return "errors";
      },
      get$label: function(_) {
        return "Errors";
      },
      showView$1: function(show) {
        if (Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).hasViewId$1("errors") === show)
          return;
        $.$get$state().$indexSet(0, "errorViewShowing", show);
        if (show)
          Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).addView$2("bottom", this);
        else
          Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).removeViewId$1("errors");
      },
      dispose$0: [function() {
      }, "call$0", "get$dispose", 0, 0, 2],
      _errors$_handleErrorsChanged$2$focus: function(errors, $focus) {
        var t1, t2, t3, t4, len, errorCount, warningCount, infoCount, i, error;
        t1 = this.content;
        t2 = t1.element;
        t3 = J.getInterceptor$x(t2);
        J.clear$0$ax(t3.get$children(t2));
        t4 = J.getInterceptor$asx(errors);
        if (t4.get$isEmpty(errors) === true) {
          t2 = K.CoreElement$("div", null, "errors-item", null);
          t2.add$1(0, K.CoreElement$("span", null, "text-muted", "No issues."));
          t1.add$1(0, t2);
        } else
          J.addAll$1$ax(t3.get$children(t2), t4.map$1(errors, this.get$_cvtError()));
        t1 = this.focusElement;
        if ($focus != null) {
          J.set$text$x(t1.element, $focus);
          J.set$display$x(J.get$style$x(this.focusElement.element), "inline-block");
        } else
          J.set$display$x(J.get$style$x(t1.element), "none");
        len = t4.get$length(errors);
        if (typeof len !== "number")
          return H.iae(len);
        errorCount = 0;
        warningCount = 0;
        infoCount = 0;
        i = 0;
        for (; i < len; ++i) {
          error = t4.$index(errors, i);
          if (J.$eq$(error.get$severity(), "ERROR"))
            ++errorCount;
          else if (J.$eq$(error.get$severity(), "WARNING"))
            ++warningCount;
          else
            ++infoCount;
        }
        J.clear$0$ax(J.get$children$x(this.countElement.element));
        if (errorCount > 0) {
          t1 = this.countElement;
          t2 = K.CoreElement$("span", null, "badge badge-error", null);
          J.set$text$x(t2.element, "" + errorCount + " " + M.pluralize("error", errorCount));
          t1.add$1(0, t2);
        }
        if (warningCount > 0) {
          t1 = this.countElement;
          t2 = K.CoreElement$("span", null, "badge badge-warning", null);
          J.set$text$x(t2.element, "" + warningCount + " " + M.pluralize("warning", warningCount));
          t1.add$1(0, t2);
        }
        if (infoCount > 0) {
          t1 = this.countElement;
          t2 = K.CoreElement$("span", null, "badge badge-info", null);
          J.set$text$x(t2.element, "" + infoCount + " " + M.pluralize("info", infoCount));
          t1.add$1(0, t2);
        }
      },
      _cvtError$1: [function(error) {
        var type, t1, t2, $location, item, badge, message, ahref;
        if (J.$eq$(error.get$severity(), "ERROR"))
          type = " badge-error";
        else
          type = J.$eq$(error.get$severity(), "WARNING") ? " badge-warning" : " badge-info";
        t1 = J.getInterceptor$x(error);
        t2 = P.List_List$from($.$get$atom()._project.invoke$2("relativizePath", J.get$file$x(t1.get$location(error))), true, null);
        if (1 >= t2.length)
          return H.ioore(t2, 1);
        $location = H.S(t2[1]) + ", line " + H.S(t1.get$location(error).get$startLine());
        item = K.CoreElement$("div", null, "errors-item", null);
        t2 = J.toLowerCase$0$s(error.get$severity());
        badge = K.CoreElement$("span", null, "badge badge-flexible" + type + " error-type", t2);
        item.add$1(0, [badge]);
        if (error.get$hasFix() != null && error.get$hasFix() === true)
          J.click$1$x(item.add$1(0, K.CoreElement$("div", null, "icon-tools quick-fix", null)), new G.ErrorsView__cvtError_closure(this, error));
        message = K.CoreElement$("span", null, null, t1.get$message(error));
        ahref = K.CoreElement$("a", null, "text-muted", $location);
        item.add$1(0, [message, ahref]);
        badge.click$1(0, new G.ErrorsView__cvtError_closure0(this, error));
        message.click$1(0, new G.ErrorsView__cvtError_closure1(this, error));
        ahref.click$1(0, new G.ErrorsView__cvtError_closure2(this, error));
        return item.element;
      }, "call$1", "get$_cvtError", 2, 0, 168, 8],
      _errors$_jumpTo$1: function($location) {
        var options, t1, ed;
        options = P.LinkedHashMap__makeLiteral(["initialLine", $location.get$startLine(), "initialColumn", $location.get$startColumn(), "searchAllPanes", true]);
        t1 = $.$get$atom();
        ed = t1._workspace.getActiveTextEditor$0();
        if (ed != null && J.$eq$(ed.invoke$1("getPath"), J.get$file$x($location)))
          options.$indexSet(0, "searchAllPanes", false);
        return t1._workspace.openPending$2$options(J.get$file$x($location), options).then$1(new G.ErrorsView__jumpTo_closure($location));
      }
    },
    ErrorsView__cvtError_closure: {
      "^": "Closure:1;$this,error",
      call$0: function() {
        this.$this._errors$_jumpTo$1(J.get$location$x(this.error)).then$1(new G.ErrorsView__cvtError__closure());
      }
    },
    ErrorsView__cvtError__closure: {
      "^": "Closure:8;",
      call$1: [function(editor) {
        var t1, t2;
        Q.Dependencies_instance().getDependency$1(C.Type_QuickFixHelper_idk).displayQuickFixes$1(editor);
        t1 = $.$get$state();
        if (!J.$eq$(J.$index$asx(t1._pluginState, "_quickFixBindings"), true)) {
          t2 = $.$get$atom()._notifications;
          t2.invoke$3("addInfo", "Show quick fixes using `ctrl-1` or `alt-enter`.", t2._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          t1.$indexSet(0, "_quickFixBindings", true);
        }
      }, null, null, 2, 0, null, 9, "call"]
    },
    ErrorsView__cvtError_closure0: {
      "^": "Closure:1;$this,error",
      call$0: function() {
        return this.$this._errors$_jumpTo$1(J.get$location$x(this.error));
      }
    },
    ErrorsView__cvtError_closure1: {
      "^": "Closure:1;$this,error",
      call$0: function() {
        return this.$this._errors$_jumpTo$1(J.get$location$x(this.error));
      }
    },
    ErrorsView__cvtError_closure2: {
      "^": "Closure:1;$this,error",
      call$0: function() {
        return this.$this._errors$_jumpTo$1(J.get$location$x(this.error));
      }
    },
    ErrorsView__jumpTo_closure: {
      "^": "Closure:8;location",
      call$1: [function(editor) {
        var buffer, t1, t2;
        buffer = editor.getBuffer$0();
        t1 = this.location;
        t2 = J.getInterceptor$x(t1);
        editor.setSelectedBufferRange$1(new Y.Range(Y._create0("Range", Y._cvt1(buffer.invoke$2("positionForCharacterIndex", t2.get$offset(t1))), Y._cvt1(buffer.invoke$2("positionForCharacterIndex", J.$add$ns(t2.get$offset(t1), t2.get$length(t1)))))));
        return editor;
      }, null, null, 2, 0, null, 9, "call"]
    },
    ErrorsStatusElement: {
      "^": "Object;parent>,_errors$_showing,statusTile,_errors$_element,_errors$_badgeSpan",
      dispose$0: [function() {
        var t1 = this.statusTile;
        if (t1 != null)
          t1.invoke$1("destroy");
      }, "call$0", "get$dispose", 0, 0, 2],
      _errors$_handleErrorsChanged$1: function(errors) {
        var t1, len, errorCount, warningCount, infoCount, i, error, hasIssues, t2, t3, total;
        if (this._errors$_element == null)
          return;
        t1 = J.getInterceptor$asx(errors);
        len = t1.get$length(errors);
        if (typeof len !== "number")
          return H.iae(len);
        errorCount = 0;
        warningCount = 0;
        infoCount = 0;
        i = 0;
        for (; i < len; ++i) {
          error = t1.$index(errors, i);
          if (J.$eq$(error.get$severity(), "ERROR"))
            ++errorCount;
          if (J.$eq$(error.get$severity(), "WARNING"))
            ++warningCount;
          if (J.$eq$(error.get$severity(), "INFO"))
            ++infoCount;
        }
        t1 = errorCount === 0;
        hasIssues = !t1 || warningCount !== 0;
        t2 = this._errors$_badgeSpan;
        if (hasIssues) {
          t3 = errorCount > 0;
          J.toggle$2$x(J.get$classes$x(t2.element), "badge-error", t3);
          J.toggle$2$x(J.get$classes$x(this._errors$_badgeSpan.element), "badge-warning", t1);
          J.toggle$2$x(J.get$classes$x(this._errors$_badgeSpan.element), "subtle", false);
          if (t3 && warningCount > 0) {
            total = errorCount + warningCount;
            t1 = this._errors$_badgeSpan;
            t2 = "" + total + " " + M.pluralize("issue", total);
            J.set$text$x(t1.element, t2);
          } else {
            t1 = this._errors$_badgeSpan;
            if (t3) {
              t2 = "" + errorCount + " " + M.pluralize("error", errorCount);
              J.set$text$x(t1.element, t2);
            } else {
              t2 = "" + warningCount + " " + M.pluralize("warning", warningCount);
              J.set$text$x(t1.element, t2);
            }
          }
        } else {
          t1 = infoCount === 0 ? "no errors" : "" + infoCount + " " + M.pluralize("item", infoCount);
          J.set$text$x(t2.element, t1);
          J.toggle$2$x(J.get$classes$x(this._errors$_badgeSpan.element), "badge-error", false);
          J.toggle$2$x(J.get$classes$x(this._errors$_badgeSpan.element), "badge-warning", false);
          J.toggle$2$x(J.get$classes$x(this._errors$_badgeSpan.element), "subtle", true);
        }
      },
      $isDisposable: 1
    }
  }], ["", "package:atom_dartlang/impl/navigation.dart",, O, {
    "^": "",
    NavigationManager: {
      "^": "Object;_navigation$_commands,_navController,_navigation$_history,_future",
      jumpToLocation$4: function(path, line, column, $length) {
        this._pushCurrentLocation$0();
        return Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).jumpToLocation$4(path, line, column, $length);
      },
      jumpToLocation$1: function(path) {
        return this.jumpToLocation$4(path, null, null, null);
      },
      jumpToLocation$3: function(path, line, column) {
        return this.jumpToLocation$4(path, line, column, null);
      },
      _handleNavigateReturn$1: [function(_) {
        var t1, t2, pos;
        E.trackCommand("return-from-declaration");
        t1 = this._navigation$_history;
        t2 = t1.length;
        if (t2 === 0) {
          $.$get$atom().invoke$1("beep");
          $.$get$_logger16().info$1("No navigation positions on the stack.");
        } else {
          if (0 >= t2)
            return H.ioore(t1, -1);
          pos = t1.pop();
          Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).jumpToLocation$4(pos.path, pos.line, pos.column, pos.length);
        }
      }, "call$1", "get$_handleNavigateReturn", 2, 0, 6],
      _pushCurrentLocation$0: function() {
        var editor, t1, range, t2, $length;
        editor = $.$get$atom()._workspace.getActiveTextEditor$0();
        if (editor != null) {
          t1 = editor.invoke$1("getSelectedBufferRange");
          range = t1 == null ? null : new Y.Range(Y._cvt1(t1));
          if (range == null)
            return;
          if (range.invoke$1("isSingleLine") === true) {
            t1 = range.obj;
            t2 = J.getInterceptor$asx(t1);
            $length = J.$sub$n(J.$index$asx(Y._cvt1(t2.$index(t1, "end")), "column"), J.$index$asx(Y._cvt1(t2.$index(t1, "start")), "column"));
          } else
            $length = null;
          if (J.$eq$($length, 0))
            $length = null;
          t1 = Y._cvt1(J.$index$asx(range.obj, "start"));
          t2 = J.getInterceptor$asx(t1);
          this._navigation$_history.push(new O.NavigationPosition(editor.invoke$1("getPath"), t2.$index(t1, "row"), t2.$index(t1, "column"), $length));
        }
      },
      dispose$0: [function() {
        return this._navigation$_commands.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    NavigationPosition: {
      "^": "Object;path>,line>,column<,length>",
      toString$0: function(_) {
        return "[" + H.S(this.path) + " " + H.S(this.line) + ":" + H.S(this.column) + "]";
      }
    }
  }], ["atom.outline", "package:atom_dartlang/impl/outline.dart",, A, {
    "^": "",
    OutlineController: {
      "^": "Object;disposables,showView,views",
      dispose$0: [function() {
        var t1, t2, _i;
        this.disposables.dispose$0();
        t1 = this.views;
        t1 = H.setRuntimeTypeInfo(t1.slice(), [H.getTypeArgumentByIndex(t1, 0)]);
        t2 = t1.length;
        _i = 0;
        for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleEditor$1: [function(editor) {
        var path = editor.invoke$1("getPath");
        if (!(path == null ? false : J.endsWith$1$s(path, ".dart")))
          return;
        this.views.push(A.OutlineView$(this, editor));
      }, "call$1", "get$_handleEditor", 2, 0, 7],
      _outline$_close$0: [function() {
        return $.$get$atom()._config.invoke$3("set", "dartlang.showOutlineView", this.showView !== true);
      }, "call$0", "get$_outline$_close", 0, 0, 2],
      _getLastOutlineData$1: function(path) {
        var t1, t2, t3, _i, view;
        for (t1 = this.views, t2 = t1.length, t3 = J.getInterceptor(path), _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          view = t1[_i];
          if (t3.$eq(path, view.get$path(view)) && view.lastOutline != null)
            return view.lastOutline;
        }
        return;
      },
      OutlineController$0: function() {
        var t1, t2;
        t1 = $.$get$atom();
        t2 = this.disposables._disposables;
        t2.push(t1._config.observe$3(0, "dartlang.showOutlineView", null, new A.OutlineController_closure(this)));
        t2.push(t1._commands.add$3(0, "atom-workspace", "dartlang:toggle-outline-view", new A.OutlineController_closure0(this)));
        P.Timer_Timer(C.Duration_0, new A.OutlineController_closure1(this));
      },
      $isDisposable: 1,
      static: {
        OutlineController$: function() {
          var t1 = new A.OutlineController(new L.Disposables(true, []), true, []);
          t1.OutlineController$0();
          return t1;
        }
      }
    },
    OutlineController_closure: {
      "^": "Closure:0;$this",
      call$1: [function(val) {
        var t1, t2, t3, _i;
        t1 = this.$this;
        t1.showView = val;
        for (t2 = t1.views, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
          t2[_i]._update$1(0, t1.showView);
      }, null, null, 2, 0, null, 15, "call"]
    },
    OutlineController_closure0: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        $.$get$atom()._config.invoke$3("set", "dartlang.showOutlineView", this.$this.showView !== true);
      }
    },
    OutlineController_closure1: {
      "^": "Closure:1;$this",
      call$0: function() {
        var t1 = this.$this;
        t1.disposables._disposables.push($.$get$atom()._workspace.observeTextEditors$1(t1.get$_handleEditor()));
      }
    },
    OutlineView: {
      "^": "Object;controller,editor<,root>,content>,fileType,title*,treeBuilder,errorArea,errorsList,lastOutline,subs,_topLevel",
      get$path: function(_) {
        return this.editor.invoke$1("getPath");
      },
      _outline$_install$0: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, resizer;
        if (this.root == null)
          return;
        if (this.content != null)
          return;
        t1 = K.CoreElement$("div", null, "outline-view source", null);
        t2 = K.CoreElement$("div", null, "title-container", null);
        t3 = K.CoreElement$("div", null, "title-text", null);
        t4 = K.CoreElement$("span", null, "keyword", null);
        this.fileType = t4;
        t5 = K.CoreElement$("span", null, null, null);
        this.title = t5;
        t3.add$1(0, [t4, t5]);
        t5 = K.CoreElement$("div", null, "close-button", null);
        t4 = this.controller;
        t5.click$1(0, t4.get$_outline$_close());
        t2.add$1(0, [t3, t5]);
        t5 = P.StreamController_StreamController$broadcast(null, null, false, null);
        t3 = P.StreamController_StreamController$broadcast(null, null, false, null);
        t6 = P.LinkedHashMap__makeEmpty();
        t7 = W._ElementFactoryProvider_createElement_tag("div", null);
        t6 = new T.ListTreeBuilder(t5, t3, this.get$_outline$_render(), false, [], [], t6, "tree-selected", t7);
        t6.CoreElement$4$attributes$classes$text("div", null, "list-tree has-collapsable-children", null);
        t3 = J.getInterceptor$x(t7);
        J.toggle$2$x(t3.get$classes(t7), "outline-tree", null);
        J.toggle$2$x(t3.get$classes(t7), "selection", null);
        this.treeBuilder = t6;
        t7 = K.CoreElement$("div", null, "outline-errors", null);
        t7.attribute$2("hidden", true);
        t3 = this.editor;
        t5 = new A._ErrorsList(this, t3.invoke$1("getPath"), W._ElementFactoryProvider_createElement_tag("div", null));
        t5.CoreElement$4$attributes$classes$text("div", null, "errors-list", null);
        this.errorsList = t5;
        t7.add$1(0, [t5]);
        this.errorArea = t7;
        t5 = P.StreamController_StreamController$broadcast(null, null, false, null);
        t8 = W._ElementFactoryProvider_createElement_tag("div", null);
        resizer = new T.ViewResizer(t5, new P.Point(0, 0, [null]), null, null, t8);
        resizer.CoreElement$4$attributes$classes$text("div", null, null, null);
        J.get$attributes$x(t8).remove$1(0, "horizontal");
        resizer.attribute$1("vertical");
        resizer._init$0();
        t1.add$1(0, [t2, t6, t7, resizer]);
        this.content = t1;
        t1 = this.treeBuilder._clickController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(this.get$_outline$_jumpTo());
        this.treeBuilder._selectionClass = "region";
        this._outline$_setupResizer$1(resizer);
        J.append$1$x(this.root, this.content.element);
        t1 = this.lastOutline;
        if (t1 != null)
          this._handleOutline$1(t1);
        else
          this._handleOutline$1(t4._getLastOutlineData$1(t3.invoke$1("getPath")));
        this._handleErrorsChanged$0();
      },
      _outline$_setupResizer$1: function(resizer) {
        var t1, t2;
        t1 = {};
        t2 = $.$get$state();
        if (J.$index$asx(t2._pluginState, "_outlineResize") != null)
          resizer.set$_targetSize(J.$index$asx(t2._pluginState, "_outlineResize"));
        t1._amChanging = false;
        this.subs._subscriptions.push(t2.onValueChanged$1("_outlineResize").listen$1(new A.OutlineView__setupResizer_closure(t1, resizer)));
        t2 = resizer._views$_controller;
        new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(new A.OutlineView__setupResizer_closure0(t1, "_outlineResize"));
      },
      _uninstall$0: function() {
        if (this.content != null && this.root != null) {
          J.remove$1$ax(J.get$children$x(this.root), this.content.element);
          this.content = null;
        }
      },
      dispose$0: [function() {
        this._uninstall$0();
        this.subs.cancel$0(0);
        C.JSArray_methods.remove$1(this.controller.views, this);
      }, "call$0", "get$dispose", 0, 0, 2],
      _update$1: function(_, showView) {
        var t1;
        if (this.content != null !== showView) {
          t1 = showView === true;
          if (t1)
            this._outline$_install$0();
          if (!t1)
            this._uninstall$0();
        }
      },
      _handleOutline$1: [function(data) {
        var t1, t2, nodes, _i, node, t3;
        if (data == null || !J.$eq$(J.get$file$x(data), this.editor.invoke$1("getPath")))
          return;
        this.lastOutline = data;
        if (this.treeBuilder == null)
          return;
        if (data.get$libraryName() == null) {
          J.set$text$x(this.fileType.element, "");
          J.set$text$x(this.title, $.$get$fs().basename$1(this.editor.invoke$1("getPath")));
        } else {
          t1 = J.$eq$(J.get$kind$x(data), "PART");
          t2 = this.fileType;
          if (t1) {
            J.set$text$x(t2.element, "part of ");
            J.set$text$x(this.title, data.get$libraryName());
          } else {
            J.set$text$x(t2.element, "library ");
            J.set$text$x(this.title, data.get$libraryName());
          }
        }
        this.treeBuilder.clear$0(0);
        t1 = this._topLevel;
        C.JSArray_methods.set$length(t1, 0);
        t2 = J.getInterceptor$x(data);
        if (t2.get$outline(data) == null)
          this.treeBuilder.add$1(0, K.CoreElement$("div", null, "comment", "outline not available"));
        else {
          nodes = J.get$children$x(t2.get$outline(data));
          if (nodes == null)
            nodes = H.setRuntimeTypeInfo([], [E.Outline]);
          for (t2 = nodes.length, _i = 0; _i < nodes.length; nodes.length === t2 || (0, H.throwConcurrentModificationError)(nodes), ++_i) {
            node = nodes[_i];
            t1.push(node);
            t3 = this.treeBuilder;
            t3._addNode$2(t3, this._toNode$1(node));
          }
        }
        this._cursorChanged$1(new Y.Point0(Y._cvt1(this.editor.invoke$1("getCursorBufferPosition"))));
      }, "call$1", "get$_handleOutline", 2, 0, 169, 11],
      _handleErrorsChanged$1: [function(errors) {
        if (this.errorsList == null)
          return;
        if (errors == null)
          errors = H.interceptedTypeCast(Q.Dependencies_instance().getDependency$1(C.Type_DartLinterConsumer_B8J), "$isDartLinterConsumer")._oldIssues;
        this.errorsList.updateWith$1(errors);
        this.errorArea.attribute$2("hidden", !J.get$isNotEmpty$asx(J.get$children$x(this.errorsList.element)));
      }, function() {
        return this._handleErrorsChanged$1(null);
      }, "_handleErrorsChanged$0", "call$1", "call$0", "get$_handleErrorsChanged", 0, 2, 170, 2, 71],
      _cursorChanged$1: [function(pos) {
        var offset, selected, t1, t2, _i, sel, e;
        if (pos == null || this.treeBuilder == null)
          return;
        offset = new Y.TextBuffer(Y._cvt1(this.editor.invoke$1("getBuffer"))).invoke$2("characterIndexForPosition", pos);
        selected = [];
        for (t1 = this.treeBuilder.nodes, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          this._collectSelected$3(t1[_i], offset, selected);
        t1 = this.treeBuilder;
        t1.selectNodes$1(selected.length === 0 ? selected : [C.JSArray_methods.get$last(selected)]);
        t1 = this.treeBuilder;
        t2 = t1._selectedNodes;
        if (t2.length !== 0) {
          sel = C.JSArray_methods.get$last(t2);
          e = t1._nodeToElementMap.$index(0, sel);
          if (e != null)
            J.scrollIntoView$0$x(e);
        }
      }, "call$1", "get$_cursorChanged", 2, 0, 171, 26],
      _collectSelected$3: function(node, offset, selected) {
        var t1, o, t2, t3;
        t1 = J.getInterceptor$x(node);
        o = t1.get$data(node);
        t2 = J.getInterceptor$x(o);
        t3 = J.getInterceptor$n(offset);
        if (t3.$ge(offset, t2.get$offset(o)) && t3.$lt(offset, J.$add$ns(t2.get$offset(o), t2.get$length(o)))) {
          selected.push(node);
          if (t1.get$children(node) != null)
            for (t1 = J.get$iterator$ax(t1.get$children(node)); t1.moveNext$0();)
              this._collectSelected$3(t1.get$current(), offset, selected);
        }
      },
      _toNode$1: function(outline) {
        var t1, t2, t3;
        t1 = J.getInterceptor$x(outline);
        t2 = t1.get$children(outline);
        t3 = [];
        if (t1.get$children(outline) != null) {
          if (J.$eq$(J.get$kind$x(outline.get$element()), "ENUM"))
            J.clear$0$ax(t1.get$children(outline));
          for (t1 = J.get$iterator$ax(t1.get$children(outline)); t1.moveNext$0();)
            t3.push(this._toNode$1(t1.get$current()));
        }
        return new T.Node0(outline, t2 != null, t3, [null]);
      },
      _outline$_render$2: [function(item, intoElement) {
        var e, isStatic, t1, t2, t3, span, $name, type, index;
        e = item.get$element();
        isStatic = J.$and$n(e.get$flags(), 8) !== 0 && !C.JSArray_methods.contains$1(this._topLevel, item) && true;
        t1 = J.getInterceptor$x(e);
        if (J.$eq$(t1.get$kind(e), "CLASS")) {
          t2 = J.get$children$x(intoElement);
          t3 = document;
          t3 = t3.createElement("span");
          J.get$classes$x(t3).add$1(0, "keyword");
          t3.textContent = "class ";
          J.add$1$ax(t2, t3);
        } else if (J.$eq$(t1.get$kind(e), "ENUM")) {
          t2 = J.get$children$x(intoElement);
          t3 = document;
          t3 = t3.createElement("span");
          J.get$classes$x(t3).add$1(0, "keyword");
          t3.textContent = "enum ";
          J.add$1$ax(t2, t3);
        } else if (J.$eq$(t1.get$kind(e), "FUNCTION_TYPE_ALIAS")) {
          t2 = J.get$children$x(intoElement);
          t3 = document;
          t3 = t3.createElement("span");
          J.get$classes$x(t3).add$1(0, "keyword");
          t3.textContent = "typedef ";
          J.add$1$ax(t2, t3);
        }
        if (J.$eq$(t1.get$kind(e), "GETTER")) {
          t2 = J.get$children$x(intoElement);
          t3 = document;
          t3 = t3.createElement("span");
          J.get$classes$x(t3).add$1(0, "comment");
          t3.textContent = "get ";
          J.add$1$ax(t2, t3);
        } else if (J.$eq$(t1.get$kind(e), "SETTER")) {
          t2 = J.get$children$x(intoElement);
          t3 = document;
          t3 = t3.createElement("span");
          J.get$classes$x(t3).add$1(0, "comment");
          t3.textContent = "set ";
          J.add$1$ax(t2, t3);
        }
        span = W.AnchorElement_AnchorElement(null);
        if (J.$and$n(e.get$flags(), 32) !== 0)
          J.get$classes$x(span).add$1(0, "outline-deprecated");
        if (isStatic)
          J.get$classes$x(span).add$1(0, "outline-static");
        t2 = J.getInterceptor$x(intoElement);
        J.add$1$ax(t2.get$children(intoElement), span);
        $name = t1.get$name(e);
        if (J.$eq$(t1.get$kind(e), "CLASS"))
          J.get$classes$x(span).addAll$1(0, ["support", "class"]);
        if (J.$eq$(t1.get$kind(e), "CONSTRUCTOR"))
          J.get$classes$x(span).addAll$1(0, ["support", "class"]);
        if (J.$eq$(t1.get$kind(e), "FUNCTION") || J.$eq$(t1.get$kind(e), "METHOD") || J.$eq$(t1.get$kind(e), "GETTER") || J.$eq$(t1.get$kind(e), "SETTER"))
          J.get$classes$x(span).addAll$1(0, ["entity", "name", "function"]);
        if (e.get$parameters() != null && !J.$eq$(t1.get$kind(e), "GETTER"))
          $name = J.$add$ns($name, J.$gt$n(J.get$length$asx(e.get$parameters()), 2) ? "(\u2026)" : "()");
        span.textContent = $name;
        if (e.get$typeParameters() != null) {
          t1 = t2.get$children(intoElement);
          t3 = document;
          t3 = t3.createElement("span");
          J.get$classes$x(t3).add$1(0, "comment");
          t3.textContent = e.get$typeParameters();
          J.add$1$ax(t1, t3);
        }
        if (e.get$returnType() != null && J.get$isNotEmpty$asx(e.get$returnType()) === true) {
          type = e.get$returnType();
          t1 = J.getInterceptor$asx(type);
          index = t1.indexOf$1(type, "<");
          if (!J.$eq$(index, -1))
            type = t1.substring$2(type, 0, index) + "<\u2026>";
          t1 = t2.get$children(intoElement);
          t2 = document;
          t2 = t2.createElement("span");
          J.get$classes$x(t2).add$1(0, "comment");
          t2.textContent = " \u2192 " + H.S(type);
          J.add$1$ax(t1, t2);
        }
      }, "call$2", "get$_outline$_render", 4, 0, 172],
      _outline$_jumpTo$1: [function(node) {
        return this._jumpToLocation$1(J.get$location$x(J.get$data$x(node).get$element()));
      }, "call$1", "get$_outline$_jumpTo", 2, 0, 22, 22],
      _jumpToLocation$1: function($location) {
        this.editor.invoke$2("setSelectedBufferRange", new Y.Range(Y._create0("Range", Y._create0("Point", J.$sub$n($location.get$startLine(), 1), J.$sub$n($location.get$startColumn(), 1)), Y._create0("Point", J.$sub$n($location.get$startLine(), 1), J.$add$ns(J.$sub$n($location.get$startColumn(), 1), J.get$length$asx($location))))));
      },
      OutlineView$2: function(controller, editor) {
        var t1, t2, t3, ver, index, v;
        t1 = this.editor;
        t2 = this.subs._subscriptions;
        t2.push(t1.eventStream$1("onDidDestroy").listen$1(new A.OutlineView_closure(this)));
        t2.push(t1.get$onDidChangeCursorPosition()._createSubscription$4(this.get$_cursorChanged(), null, null, false));
        t2.push(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$onOutline().listen$1(this.get$_handleOutline()));
        t3 = $.$get$_processedErrorsController();
        t3.toString;
        t2.push(new P._BroadcastStream(t3, [H.getTypeArgumentByIndex(t3, 0)]).listen$1(this.get$_handleErrorsChanged()));
        t2 = $._atomUsesShadowDOM;
        if (t2 == null) {
          ver = $.$get$atom().invoke$1("getVersion");
          t2 = J.getInterceptor$asx(ver);
          index = t2.indexOf$1(ver, "-");
          v = T.Version_Version$parse(!J.$eq$(index, -1) ? t2.substring$2(ver, 0, index) : ver);
          t2 = J.$lt$n(v.compareTo$1(0, T.Version$_(1, 13, 0, null, null, "1.13.0")), 0);
          $._atomUsesShadowDOM = t2;
        }
        if (t2 === true) {
          t1 = J.$index$asx($.ViewRegistry__instance.invoke$2("getView", t1.obj), "shadowRoot");
          this.root = t1;
          if (t1 == null)
            $.$get$_logger26().warning$1("The editor's shadow root is null");
        }
        if (this.controller.showView === true)
          this._outline$_install$0();
      },
      $isDisposable: 1,
      static: {
        OutlineView$: function(controller, editor) {
          var t1 = new A.OutlineView(controller, editor, null, null, null, null, null, null, null, null, new L.StreamSubscriptions(true, []), []);
          t1.OutlineView$2(controller, editor);
          return t1;
        }
      }
    },
    OutlineView_closure: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        var t1 = this.$this;
        t1._uninstall$0();
        t1.subs.cancel$0(0);
        C.JSArray_methods.remove$1(t1.controller.views, t1);
        return;
      }, null, null, 2, 0, null, 1, "call"]
    },
    OutlineView__setupResizer_closure: {
      "^": "Closure:0;_box_0,resizer",
      call$1: [function(val) {
        if (!this._box_0._amChanging)
          this.resizer.set$_targetSize(val);
      }, null, null, 2, 0, null, 15, "call"]
    },
    OutlineView__setupResizer_closure0: {
      "^": "Closure:0;_box_0,prefName",
      call$1: [function(pos) {
        var t1 = this._box_0;
        t1._amChanging = true;
        $.$get$state().$indexSet(0, this.prefName, pos);
        t1._amChanging = false;
      }, null, null, 2, 0, null, 26, "call"]
    },
    _ErrorsList: {
      "^": "CoreElement;view>,path>,element",
      updateWith$1: function(errors) {
        var t1, t2, t3, error, t4, t5, t6;
        J.clear$0$ax(J.get$children$x(this.element));
        for (t1 = J.get$iterator$ax(errors), t2 = this.path, t3 = J.getInterceptor(t2); t1.moveNext$0();) {
          error = t1.get$current();
          t4 = J.getInterceptor$x(error);
          if (!t3.$eq(t2, J.get$file$x(t4.get$location(error))))
            continue;
          t5 = K.CoreElement$("div", null, "outline-error-item", null);
          t6 = J.toLowerCase$0$s(error.get$severity());
          t5.add$1(0, [K.CoreElement$("span", null, "item-" + J.toLowerCase$0$s(error.get$severity()), t6), K.CoreElement$("span", null, "comment", " " + H.S(t4.get$message(error)))]);
          t5.click$1(0, new A._ErrorsList_updateWith_closure(this, error));
          this.add$1(0, t5);
        }
      }
    },
    _ErrorsList_updateWith_closure: {
      "^": "Closure:1;$this,error",
      call$0: function() {
        return this.$this.view._jumpToLocation$1(J.get$location$x(this.error));
      }
    }
  }], ["atom.pub", "package:atom_dartlang/impl/pub.dart",, R, {
    "^": "",
    _locatePubspecDir: function(path) {
      var project;
      if (path == null)
        return;
      if (J.endsWith$1$s(path, "pubspec.yaml"))
        return $.$get$fs().dirname$1(path);
      if (new F.File(F._create("File", $.$get$fs().join$2(0, path, "pubspec.yaml"), null)).invoke$1("existsSync") === true)
        return path;
      project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
      return project == null ? null : J.get$path$x(project);
    },
    PubManager: {
      "^": "Object;disposables",
      _addSdkCmd$3: function(target, command, callback) {
        this.disposables._disposables.push($.$get$atom()._commands.add$3(0, target, command, new R.PubManager__addSdkCmd_closure(callback)));
      },
      _handleRun$2$editor$path: function(editor, path) {
        var t1, dir;
        t1 = editor == null;
        if (!t1)
          path = editor.invoke$1("getPath");
        if (t1 && path == null) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "This command requires an open file editor.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          return;
        }
        if (path == null) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        dir = R._locatePubspecDir(path);
        if (dir == null) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "No pubspec.yaml file found for '" + H.S(path) + "'.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          return;
        }
        D.promptUser("pub run - pub application to run:", J.$index$asx($.$get$state()._pluginState, "lastRunText"), false, false, true).then$1(new R.PubManager__handleRun_closure(dir));
      },
      _handleRun$1$path: function(path) {
        return this._handleRun$2$editor$path(null, path);
      },
      _handleRun$1$editor: function(editor) {
        return this._handleRun$2$editor$path(editor, null);
      },
      _handleGlobalRun$2$editor$path: function(editor, path) {
        var dir;
        if (editor != null)
          path = editor.invoke$1("getPath");
        dir = path == null ? null : R._locatePubspecDir(path);
        D.promptUser("pub global run - pub application to run:", J.$index$asx($.$get$state()._pluginState, "lastGlobalRunText"), false, false, true).then$1(new R.PubManager__handleGlobalRun_closure(dir));
      },
      _handleGlobalRun$1$path: function(path) {
        return this._handleGlobalRun$2$editor$path(null, path);
      },
      _handleGlobalRun$1$editor: function(editor) {
        return this._handleGlobalRun$2$editor$path(editor, null);
      },
      _handleGlobalActivate$0: function() {
        D.promptUser("pub global activate: pub package to activate.", null, false, false, false).then$1(new R.PubManager__handleGlobalActivate_closure());
      },
      _pub$_handleProjectAdded$1: [function(project) {
        return this._validatePubspecCurrent$1(project);
      }, "call$1", "get$_pub$_handleProjectAdded", 2, 0, 37, 24],
      _validatePubspecCurrent$1: function(project) {
        var t1, pubspecYamlFile, pubspecLockFile, dotPackagesFile;
        t1 = J.getInterceptor$x(project);
        pubspecYamlFile = J.getFile$1$x(t1.get$directory(project), "pubspec.yaml");
        pubspecLockFile = J.getFile$1$x(t1.get$directory(project), "pubspec.lock");
        dotPackagesFile = J.getFile$1$x(t1.get$directory(project), ".packages");
        if (pubspecYamlFile.existsSync$0() !== true)
          return;
        if (dotPackagesFile.existsSync$0() === true) {
          t1 = $.$get$fs();
          if (J.$gt$n(J.compareTo$1$ns(J.$index$asx(t1.invoke$2("statSync", pubspecYamlFile.get$path(pubspecYamlFile)), "mtime"), J.$index$asx(t1.invoke$2("statSync", dotPackagesFile.get$path(dotPackagesFile)), "mtime")), 0))
            this._showRunPubDialog$1(project);
        } else if (pubspecLockFile.existsSync$0() === true) {
          t1 = $.$get$fs();
          if (J.$gt$n(J.compareTo$1$ns(J.$index$asx(t1.invoke$2("statSync", pubspecYamlFile.get$path(pubspecYamlFile)), "mtime"), J.$index$asx(t1.invoke$2("statSync", pubspecLockFile.get$path(pubspecLockFile)), "mtime")), 0))
            this._showRunPubDialog$1(project);
        } else
          this._showRunPubDialog$2$neverRun(project, true);
      },
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _showRunPubDialog$2$neverRun: function(project, neverRun) {
        var t1, title, t2;
        t1 = {};
        title = "Pub has never been run for project `" + H.S(project.get$workspaceRelativeName()) + "`. Run 'pub get'?";
        if (!neverRun)
          title = "The pubspec.yaml file for project `" + H.S(project.get$workspaceRelativeName()) + "` has been modified since pub was last run. Run 'pub get'?";
        t1._notification = null;
        t2 = $.$get$atom()._notifications;
        t1._notification = new D.Notification(t2.invoke$3("addInfo", title, t2._options$5$buttons$description$detail$dismissable$icon([new D.NotificationButton("Run pub get\u2026", new R.PubManager__showRunPubDialog_closure(t1, project))], null, null, true, null)));
      },
      _showRunPubDialog$1: function(project) {
        return this._showRunPubDialog$2$neverRun(project, false);
      },
      PubManager$0: function() {
        this._addSdkCmd$3("atom-text-editor", "dartlang:pub-get", new R.PubManager_closure());
        this._addSdkCmd$3("atom-text-editor", "dartlang:pub-upgrade", new R.PubManager_closure0());
        this._addSdkCmd$3("atom-text-editor", "dartlang:pub-run", new R.PubManager_closure1(this));
        this._addSdkCmd$3("atom-text-editor", "dartlang:pub-global-run", new R.PubManager_closure2(this));
        this._addSdkCmd$3("atom-workspace", "dartlang:pub-global-activate", new R.PubManager_closure3(this));
        this._addSdkCmd$3(".tree-view", "dartlang:pub-get", new R.PubManager_closure4());
        this._addSdkCmd$3(".tree-view", "dartlang:pub-upgrade", new R.PubManager_closure5());
        this._addSdkCmd$3(".tree-view", "dartlang:pub-run", new R.PubManager_closure6(this));
        this._addSdkCmd$3(".tree-view", "dartlang:pub-global-run", new R.PubManager_closure7(this));
        var t1 = this.get$_pub$_handleProjectAdded();
        C.JSArray_methods.forEach$1(Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).get$projects(), t1);
        Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).get$onProjectAdd().listen$1(t1);
      },
      $isDisposable: 1,
      static: {
        PubManager$: function() {
          var t1 = new R.PubManager(new L.Disposables(true, []));
          t1.PubManager$0();
          return t1;
        }
      }
    },
    PubManager_closure: {
      "^": "Closure:0;",
      call$1: function($event) {
        var t1, t2;
        $.$get$atom()._workspace.saveAll$0();
        t1 = $.$get$fs().dirname$1($event.get$editor().invoke$1("getPath"));
        t2 = new R.PubJob(t1, "get", null, "Pub get", null);
        t2._pubspecDir = R._locatePubspecDir(t1);
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(t2);
      }
    },
    PubManager_closure0: {
      "^": "Closure:0;",
      call$1: function($event) {
        var t1, t2;
        $.$get$atom()._workspace.saveAll$0();
        t1 = $.$get$fs().dirname$1($event.get$editor().invoke$1("getPath"));
        t2 = new R.PubJob(t1, "upgrade", null, "Pub upgrade", null);
        t2._pubspecDir = R._locatePubspecDir(t1);
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(t2);
      }
    },
    PubManager_closure1: {
      "^": "Closure:0;$this",
      call$1: function($event) {
        this.$this._handleRun$1$editor($.$get$atom()._workspace.getActiveTextEditor$0());
      }
    },
    PubManager_closure2: {
      "^": "Closure:0;$this",
      call$1: function($event) {
        this.$this._handleGlobalRun$1$editor($.$get$atom()._workspace.getActiveTextEditor$0());
      }
    },
    PubManager_closure3: {
      "^": "Closure:0;$this",
      call$1: function($event) {
        this.$this._handleGlobalActivate$0();
      }
    },
    PubManager_closure4: {
      "^": "Closure:16;",
      call$1: function($event) {
        var t1, t2;
        $.$get$atom()._workspace.saveAll$0();
        t1 = $event.get$targetFilePath();
        t2 = new R.PubJob(t1, "get", null, "Pub get", null);
        t2._pubspecDir = R._locatePubspecDir(t1);
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(t2);
      }
    },
    PubManager_closure5: {
      "^": "Closure:16;",
      call$1: function($event) {
        var t1, t2;
        $.$get$atom()._workspace.saveAll$0();
        t1 = $event.get$targetFilePath();
        t2 = new R.PubJob(t1, "upgrade", null, "Pub upgrade", null);
        t2._pubspecDir = R._locatePubspecDir(t1);
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(t2);
      }
    },
    PubManager_closure6: {
      "^": "Closure:16;$this",
      call$1: function($event) {
        this.$this._handleRun$1$path($event.get$targetFilePath());
      }
    },
    PubManager_closure7: {
      "^": "Closure:16;$this",
      call$1: function($event) {
        this.$this._handleGlobalRun$1$path($event.get$targetFilePath());
      }
    },
    PubManager__addSdkCmd_closure: {
      "^": "Closure:0;callback",
      call$1: function($event) {
        if (!Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$hasSdk())
          Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).showNoSdkMessage$0();
        else
          this.callback.call$1($event);
      }
    },
    PubManager__handleRun_closure: {
      "^": "Closure:3;dir",
      call$1: [function(response) {
        var t1;
        if (response == null)
          return;
        response = J.trim$0$s(response);
        $.$get$state().$indexSet(0, "lastRunText", response);
        t1 = R.PubRunJob$local(this.dir, response.split(" "), null);
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(t1);
      }, null, null, 2, 0, null, 27, "call"]
    },
    PubManager__handleGlobalRun_closure: {
      "^": "Closure:3;dir",
      call$1: [function(response) {
        var args, t1, t2;
        if (response == null)
          return;
        response = J.trim$0$s(response);
        $.$get$state().$indexSet(0, "lastGlobalRunText", response);
        args = response.split(" ");
        t1 = this.dir;
        t2 = new R.PubRunJob(t1, null, args, true, null, "Pub global run '" + H.S(C.JSArray_methods.get$first(args)) + "'", null);
        t2._pubspecDir = R._locatePubspecDir(t1);
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(t2);
      }, null, null, 2, 0, null, 27, "call"]
    },
    PubManager__handleGlobalActivate_closure: {
      "^": "Closure:3;",
      call$1: [function(response) {
        var t1;
        if (response == null)
          return;
        response = J.trim$0$s(response);
        t1 = "Pub global activate '" + response + "'";
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new R.PubGlobalActivate(response, false, t1, null));
      }, null, null, 2, 0, null, 27, "call"]
    },
    PubManager__showRunPubDialog_closure: {
      "^": "Closure:1;_box_0,project",
      call$0: [function() {
        var t1, t2;
        this._box_0._notification.invoke$1("dismiss");
        t1 = J.get$path$x(this.project);
        t2 = new R.PubJob(t1, "get", null, "Pub get", null);
        t2._pubspecDir = R._locatePubspecDir(t1);
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(t2);
      }, null, null, 0, 0, null, "call"]
    },
    PubJob: {
      "^": "Job;path>,pubCommand,_pubspecDir,name,_schedulingRule",
      get$quiet: function() {
        return true;
      },
      get$schedulingRule: function() {
        return this._pubspecDir;
      },
      run$0: [function() {
        if (!Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$hasSdk()) {
          Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).showNoSdkMessage$0();
          var t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
        return D.ProcessNotifier$(this.name).watch$1(Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk().execBin$3$cwd("pub", [this.pubCommand], this._pubspecDir));
      }, "call$0", "get$run", 0, 0, 5]
    },
    PubRunJob: {
      "^": "Job;path>,title>,args,isGlobal,_pubspecDir,name,_schedulingRule",
      get$quiet: function() {
        return true;
      },
      get$schedulingRule: function() {
        return this._pubspecDir;
      },
      run$0: [function() {
        var t1, l;
        if (!Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$hasSdk()) {
          Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).showNoSdkMessage$0();
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
        l = this.isGlobal ? ["global", "run"] : ["run"];
        C.JSArray_methods.addAll$1(l, this.args);
        t1 = this.title;
        return D.ProcessNotifier$(t1 == null ? this.name : t1).watch$1(Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk().execBin$3$cwd("pub", l, this._pubspecDir));
      }, "call$0", "get$run", 0, 0, 5],
      PubRunJob$local$3$title: function(path, args, title) {
        this._pubspecDir = R._locatePubspecDir(this.path);
      },
      static: {
        PubRunJob$local: function(path, args, title) {
          var t1 = new R.PubRunJob(path, title, args, false, null, "Pub run '" + H.S(C.JSArray_methods.get$first(args)) + "'", null);
          t1.PubRunJob$local$3$title(path, args, title);
          return t1;
        }
      }
    },
    PubGlobalActivate: {
      "^": "Job;packageName,runQuiet,name,_schedulingRule",
      get$quiet: function() {
        return false;
      },
      run$0: [function() {
        var t1, runner;
        if (!Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$hasSdk()) {
          Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).showNoSdkMessage$0();
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
        runner = Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk().execBin$2("pub", ["global", "activate", this.packageName]);
        return D.ProcessNotifier$(this.name).watch$1(runner);
      }, "call$0", "get$run", 0, 0, 5]
    },
    PubContextCommand: {
      "^": "ContextMenuItem;onlyPubspec,label,command",
      shouldDisplay$1: function($event) {
        var filePath, project;
        filePath = $event.get$targetFilePath();
        if (filePath == null)
          return false;
        project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(filePath);
        if (project == null)
          return;
        if (this.onlyPubspec)
          return new F.File(F._create("File", $.$get$fs().join$2(0, J.get$path$x(project), "pubspec.yaml"), null)).invoke$1("existsSync");
        else
          return true;
      }
    }
  }], ["atom.rebuild", "package:atom_dartlang/impl/rebuild.dart",, Z, {
    "^": "",
    _projectsToBuild: function() {
      var t1, t2;
      t1 = [P.String];
      t2 = H.subtypeCast($.$get$atom()._config.getValue$1("dartlang.buildAtomPlugins"), "$isList", t1, "$asList");
      return t2 == null ? H.setRuntimeTypeInfo([], t1) : t2;
    },
    RebuildManager: {
      "^": "Object;disposables",
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      RebuildManager$0: function() {
        this.disposables._disposables.push($.$get$atom()._commands.add$3(0, "atom-workspace", "dartlang:rebuild-restart-dev", new Z.RebuildManager_closure()));
      },
      $isDisposable: 1,
      static: {
        RebuildManager$: function() {
          var t1 = new Z.RebuildManager(new L.Disposables(true, []));
          t1.RebuildManager$0();
          return t1;
        }
      }
    },
    RebuildManager_closure: {
      "^": "Closure:0;",
      call$1: function(_) {
        if (J.get$isNotEmpty$asx(Z._projectsToBuild()))
          Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new Z.RebuildJob("Rebuilding Atom plugins", C.Type_RebuildJob_uti));
      }
    },
    RebuildJob: {
      "^": "Job;name,_schedulingRule",
      run$0: [function() {
        if (!Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$hasSdk()) {
          Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).showNoSdkMessage$0();
          var t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
        C.JSArray_methods.forEach$1($.$get$atom()._workspace.getTextEditors$0(), new Z.RebuildJob_run_closure());
        return P.Future_wait(J.map$1$ax(Z._projectsToBuild(), new Z.RebuildJob_run_closure0(this)), null, false).then$1(new Z.RebuildJob_run_closure1()).then$1(new Z.RebuildJob_run_closure2());
      }, "call$0", "get$run", 0, 0, 5],
      _runBuild$1: function(projName) {
        var t1, proj;
        t1 = $.$get$atom();
        proj = C.JSArray_methods.firstWhere$2$orElse(t1._project.getDirectories$0(), new Z.RebuildJob__runBuild_closure(projName), new Z.RebuildJob__runBuild_closure0());
        if (proj == null) {
          t1 = t1._notifications;
          t1.invoke$3("addWarning", "Unable to find project '" + H.S(projName) + "'.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(false);
          return t1;
        }
        t1 = R.PubRunJob$local(proj.getPath$0(), ["grinder", "build"], projName);
        return Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(t1).then$1(new Z.RebuildJob__runBuild_closure1());
      }
    },
    RebuildJob_run_closure: {
      "^": "Closure:0;",
      call$1: function(editor) {
        if (editor.isModified$0() === true)
          J.save$0$x(editor);
      }
    },
    RebuildJob_run_closure0: {
      "^": "Closure:3;$this",
      call$1: [function($name) {
        return this.$this._runBuild$1($name);
      }, null, null, 2, 0, null, 23, "call"]
    },
    RebuildJob_run_closure1: {
      "^": "Closure:175;",
      call$1: [function(results) {
        return J.reduce$1$ax(results, new Z.RebuildJob_run__closure0());
      }, null, null, 2, 0, null, 60, "call"]
    },
    RebuildJob_run__closure0: {
      "^": "Closure:176;",
      call$2: function(value, success) {
        return value === true && success === true;
      }
    },
    RebuildJob_run_closure2: {
      "^": "Closure:18;",
      call$1: [function(success) {
        if (success === true)
          P.Future_Future$delayed(P.Duration$(0, 0, 0, 0, 0, 2), null, null).then$1(new Z.RebuildJob_run__closure());
      }, null, null, 2, 0, null, 140, "call"]
    },
    RebuildJob_run__closure: {
      "^": "Closure:0;",
      call$1: [function(_) {
        return $.$get$atom().invoke$1("reload");
      }, null, null, 2, 0, null, 1, "call"]
    },
    RebuildJob__runBuild_closure: {
      "^": "Closure:0;projName",
      call$1: function(d) {
        return J.endsWith$1$s(d.getBaseName$0(), this.projName);
      }
    },
    RebuildJob__runBuild_closure0: {
      "^": "Closure:1;",
      call$0: function() {
        return;
      }
    },
    RebuildJob__runBuild_closure1: {
      "^": "Closure:75;",
      call$1: [function($status) {
        return $status.get$isOk() && J.$eq$(J.get$result$x($status), 0);
      }, null, null, 2, 0, null, 34, "call"]
    }
  }], ["", "package:atom_dartlang/impl/status.dart",, E, {
    "^": "",
    _getPlatformVersions: function() {
      return $._package.getPackageVersion$0().then$1(new E._getPlatformVersions_closure());
    },
    StatusViewManager: {
      "^": "Object;disposables",
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      showSection$1: function(sectionName) {
        if (!Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).hasViewId$1("dartlang"))
          this.toggleView$0();
        Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).getViewById$1("dartlang").showSection$1(sectionName);
      },
      toggleView$0: function() {
        if (Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).hasViewId$1("dartlang"))
          if (Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).isActiveId$1("dartlang")) {
            Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).removeViewId$1("dartlang");
            $.$get$state().$indexSet(0, "statusOpen", false);
          } else
            Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).activateView$1("dartlang");
        else
          Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).addView$2("right", E.StatusView$());
      },
      StatusViewManager$0: function() {
        var t1, t2;
        t1 = $.$get$atom();
        t2 = this.disposables._disposables;
        t2.push(t1._commands.add$3(0, "atom-workspace", "dartlang:show-plugin-status", new E.StatusViewManager_closure(this)));
        t2.push(t1._commands.add$3(0, "atom-workspace", "dartlang:analysis-server-status", new E.StatusViewManager_closure0(this)));
        t2.push(t1._commands.add$3(0, "atom-workspace", "dartlang:show-sdk-info", new E.StatusViewManager_closure1(this)));
        if (J.$eq$(J.$index$asx($.$get$state()._pluginState, "statusOpen"), true))
          this.toggleView$0();
      },
      $isDisposable: 1,
      static: {
        StatusViewManager$: function() {
          var t1 = new E.StatusViewManager(new L.Disposables(true, []));
          t1.StatusViewManager$0();
          return t1;
        }
      }
    },
    StatusViewManager_closure: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        this.$this.toggleView$0();
      }
    },
    StatusViewManager_closure0: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        this.$this.showSection$1("analysis-server");
      }
    },
    StatusViewManager_closure1: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        this.$this.showSection$1("dart-sdk");
      }
    },
    StatusView: {
      "^": "View;subs,_sections,_diagnosticTimer,root,toolbar,content,tabElement,_closeButton,group",
      _registerSection$2: function(sectionId, element) {
        var t1, link;
        for (t1 = J.querySelectorAll$1$x(element.get$element(), "a"), t1 = new H.ListIterator(t1, t1.get$length(t1), 0, null, [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
          link = t1.__internal$_current;
          J.get$onClick$x(link).listen$1(new E.StatusView__registerSection_closure(link));
        }
        this._sections.$indexSet(0, sectionId, element);
        return element;
      },
      _createPluginSection$1: function(container) {
        var section, header, t1, t2, buttons;
        section = container.add$1(0, K.CoreElement$("div", null, "view-section", null));
        header = E.StatusHeader$(section);
        J.set$text$x(header.title, "dartlang plugin");
        $._package.getPackageVersion$0().then$1(new E.StatusView__createPluginSection_closure(header));
        t1 = header.toolbar;
        t2 = M.MIconButton$("icon-tools");
        t2.click$1(0, new E.StatusView__createPluginSection_closure0());
        t1.add$1(0, t2).set$tooltip("Settings");
        t2 = J.getInterceptor$ax(section);
        J.setInnerHtml$1$x(t2.add$1(section, K.CoreElement$("div", null, null, null)), 'For help using this plugin, please see our <a href="https://dart-atom.github.io/dartlang/">getting started</a> guide.');
        buttons = t2.add$1(section, K.CoreElement$("div", null, "view-section-buttons", null));
        t2 = K.CoreElement$("button", null, "btn", "Check for Updates");
        t2.click$1(0, new E.StatusView__createPluginSection_closure1());
        t1 = J.getInterceptor$ax(buttons);
        t1.add$1(buttons, t2);
        t2 = K.CoreElement$("button", null, "btn", "Report Issue\u2026");
        t2.click$1(0, new E.StatusView__createPluginSection_closure2());
        t1.add$1(buttons, t2);
        return section;
      },
      _createDartSdkSection$1: function(container) {
        var t1, section, header, pathElement, t2, update, buttons;
        t1 = {};
        section = container.add$1(0, K.CoreElement$("div", null, "view-section", null));
        header = E.StatusHeader$(section);
        J.set$text$x(header.title, "Dart SDK");
        t1.pathElement = null;
        pathElement = K.CoreElement$("div", null, "overflow-hidden-ellipsis bottom-margin", null);
        J.set$alignSelf$x(J.get$style$x(pathElement.element), "flex-end");
        t1.pathElement = pathElement;
        t2 = J.getInterceptor$ax(section);
        t2.add$1(section, [pathElement]);
        J.setInnerHtml$1$x(t2.add$1(section, K.CoreElement$("div", null, null, null)), 'Visit <a href="https://www.dartlang.org/downloads/">dartlang.org</a> for information on installing a Dart SDK for your platform.');
        update = new E.StatusView__createDartSdkSection_closure(t1, header);
        update.call$1(Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk());
        this.subs._subscriptions.push(Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$onSdkChange().listen$1(update));
        buttons = t2.add$1(section, K.CoreElement$("div", null, "view-section-buttons", null));
        t2 = K.CoreElement$("button", null, "btn", "Browse\u2026");
        t2.click$1(0, this.get$_handleSdkBrowse());
        t1 = J.getInterceptor$ax(buttons);
        t1.add$1(buttons, t2);
        t2 = K.CoreElement$("button", null, "btn", "Auto-locate");
        t2.click$1(0, new E.StatusView__createDartSdkSection_closure0());
        t1.add$1(buttons, t2);
        return section;
      },
      _createAnalysisServerSection$1: function(container) {
        var t1, section, header, t2, strobeIncoming, t3, strobeOutgoing, update, t4, $status, buttons, start, reanalyze, $stop;
        t1 = {};
        section = container.add$1(0, K.CoreElement$("div", null, "view-section", null));
        header = E.StatusHeader$(section);
        t1.start = null;
        t1.reanalyze = null;
        t1.stop = null;
        t1.status = null;
        t1.version = null;
        J.set$text$x(header.title, "Analysis server");
        t2 = W._ElementFactoryProvider_createElement_tag("span", null);
        strobeIncoming = new K.Strobe(null, t2);
        strobeIncoming.CoreElement$4$attributes$classes$text("span", null, "icon-triangle-left", " ");
        t3 = J.getInterceptor$x(t2);
        J.toggle$2$x(t3.get$classes(t2), "strobe", null);
        J.set$marginLeft$x(t3.get$style(t2), "0.3em");
        t2 = W._ElementFactoryProvider_createElement_tag("span", null);
        strobeOutgoing = new K.Strobe(null, t2);
        strobeOutgoing.CoreElement$4$attributes$classes$text("span", null, "icon-triangle-right", " ");
        J.toggle$2$x(J.get$classes$x(t2), "strobe", null);
        header.toolbar.add$1(0, strobeIncoming);
        header.toolbar.add$1(0, strobeOutgoing);
        update = new E.StatusView__createAnalysisServerSection_closure(t1, header);
        t2 = this.subs._subscriptions;
        t2.push(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$onReceive().listen$1(new E.StatusView__createAnalysisServerSection_closure0(strobeIncoming)));
        t2.push(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$onSend().listen$1(new E.StatusView__createAnalysisServerSection_closure1(strobeOutgoing)));
        t3 = K.CoreElement$("div", null, null, null);
        t4 = K.CoreElement$("span", null, "diagnostics-title", "status:");
        $status = K.CoreElement$("span", null, "diagnostics-data", null);
        t1.status = $status;
        t3.add$1(0, [t4, $status]);
        t4 = J.getInterceptor$ax(section);
        t4.add$1(section, t3);
        this._createDiagnostics$1(t4.add$1(section, K.CoreElement$("div", null, "bottom-margin", null)));
        buttons = t4.add$1(section, K.CoreElement$("div", null, "view-section-buttons", null));
        start = K.CoreElement$("button", null, "btn", "Start");
        start.click$1(0, this.get$_handleServerStart());
        t1.start = start;
        reanalyze = K.CoreElement$("button", null, "btn", "Reanalyze");
        reanalyze.click$1(0, this.get$_handleReanalyze());
        t1.reanalyze = reanalyze;
        $stop = K.CoreElement$("button", null, "btn", "Shutdown");
        $stop.click$1(0, this.get$_handleServerStop());
        t1.stop = $stop;
        J.add$1$ax(buttons, [start, reanalyze, $stop]);
        update.call$0();
        t2.push(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$onBusy().listen$1(update));
        t2.push(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$onActive().listen$1(new E.StatusView__createAnalysisServerSection_closure2(t1, update)));
        return section;
      },
      _createDiagnostics$1: function(diagnostics) {
        var t1, handleActive, t2, t3, contextCount, t4, fileCount, t5, taskQueueCount;
        t1 = {};
        t1.contextCount = null;
        t1.fileCount = null;
        t1.taskQueueCount = null;
        handleActive = new E.StatusView__createDiagnostics_closure(this, new E.StatusView__createDiagnostics_closure0(t1));
        this.subs._subscriptions.push(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$onActive().listen$1(handleActive));
        t2 = K.CoreElement$("div", null, null, null);
        t3 = K.CoreElement$("span", null, "diagnostics-title", "contexts:");
        contextCount = K.CoreElement$("span", null, "diagnostics-data", null);
        t1.contextCount = contextCount;
        t2.add$1(0, [t3, contextCount]);
        t3 = K.CoreElement$("div", null, null, null);
        t4 = K.CoreElement$("span", null, "diagnostics-title", "analyzed files:");
        fileCount = K.CoreElement$("span", null, "diagnostics-data", null);
        t1.fileCount = fileCount;
        t3.add$1(0, [t4, fileCount]);
        t4 = K.CoreElement$("div", null, null, null);
        t5 = K.CoreElement$("span", null, "diagnostics-title", "task queue:");
        taskQueueCount = K.CoreElement$("span", null, "diagnostics-data", null);
        t1.taskQueueCount = taskQueueCount;
        t4.add$1(0, [t5, taskQueueCount]);
        J.add$1$ax(diagnostics, [t2, t3, t4]);
        handleActive.call$1(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive());
      },
      _createAnalyticsSection$1: function(container) {
        var section, t1, analyticsCheck, t2, t3, t4;
        section = container.add$1(0, K.CoreElement$("div", null, "view-section", null));
        J.set$text$x(E.StatusHeader$(section).title, "Google Analytics");
        t1 = J.getInterceptor$ax(section);
        J.setInnerHtml$1$x(t1.add$1(section, K.CoreElement$("div", null, "bottom-margin", null)), 'The Dart plugin anonymously reports feature usage statistics and basic crash reports to improve the tool over time. See our privacy <a href="http://www.google.com/intl/en/policies/privacy/">policy</a>.');
        analyticsCheck = K.CoreElement$("input", null, null, null);
        t2 = analyticsCheck.element;
        t3 = J.getInterceptor$x(t2);
        t3.get$attributes(t2).$indexSet(0, "type", "checkbox");
        t4 = K.CoreElement$("label", null, null, null);
        t4.add$1(0, [analyticsCheck, K.CoreElement$("span", null, null, " Enable analytics")]);
        t1.add$1(section, [t4]);
        t4 = $.$get$atom();
        t3.set$checked(t2, J.$eq$(t4._config.getValue$2$scope("dartlang.sendUsage", null), true));
        t3.get$onChange(t2).listen$1(new E.StatusView__createAnalyticsSection_closure("dartlang.sendUsage", t2));
        this.subs._subscriptions.push(t4._config.onDidChange$1("dartlang.sendUsage").listen$1(new E.StatusView__createAnalyticsSection_closure0("dartlang.sendUsage", t2)));
        return section;
      },
      get$label: function(_) {
        return "Plugin status";
      },
      get$id: function(_) {
        return "dartlang";
      },
      showSection$1: function(sectionName) {
        var element, e, t1;
        element = this._sections.$index(0, sectionName);
        if (element != null) {
          e = element.get$element();
          t1 = J.getInterceptor$x(e);
          t1.scrollIntoView$0(e);
          J.add$1$ax(t1.get$classes(e), "status-emphasis");
          P.Timer_Timer(P.Duration$(0, 0, 0, 400, 0, 0), new E.StatusView_showSection_closure(e));
        }
      },
      handleClose$0: [function() {
        this.super$View$handleClose();
        $.$get$state().$indexSet(0, "statusOpen", false);
      }, "call$0", "get$handleClose", 0, 0, 2],
      dispose$0: [function() {
        var t1 = this._diagnosticTimer;
        if (!(t1 == null))
          t1.cancel$0(0);
        this.subs.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleSdkBrowse$0: [function() {
        $.$get$atom().pickFolder$0().then$1(new E.StatusView__handleSdkBrowse_closure());
      }, "call$0", "get$_handleSdkBrowse", 0, 0, 2],
      _handleServerStart$0: [function() {
        E.trackCommand("dartlang:analysis-server-start");
        J.start$0$x(Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC));
      }, "call$0", "get$_handleServerStart", 0, 0, 2],
      _handleReanalyze$0: [function() {
        E.trackCommand("dartlang:reanalyze-sources");
        Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).reanalyzeSources$0();
      }, "call$0", "get$_handleReanalyze", 0, 0, 2],
      _handleServerStop$0: [function() {
        E.trackCommand("dartlang:analysis-server-stop");
        Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).shutdown$0();
      }, "call$0", "get$_handleServerStop", 0, 0, 2],
      StatusView$0: function(_box_0) {
        var t1, t2, t3, subtitle, container;
        _box_0.subtitle = null;
        t1 = this.content;
        t2 = t1.element;
        t3 = J.getInterceptor$x(t2);
        J.toggle$2$x(t3.get$classes(t2), "tab-scrollable-container", null);
        J.toggle$2$x(t3.get$classes(t2), "plugin-status", null);
        t2 = K.CoreElement$("div", null, "view-header view-header-static", null);
        t3 = K.CoreElement$("div", null, "view-title", "Dart plugin status");
        subtitle = K.CoreElement$("div", null, "view-subtitle", null);
        _box_0.subtitle = subtitle;
        t2.add$1(0, [t3, subtitle]);
        container = K.CoreElement$("div", null, "tab-scrollable", null);
        t1.add$1(0, [t2, container]);
        E._getPlatformVersions().then$1(new E.StatusView_closure(_box_0));
        this._registerSection$2("plugin", this._createPluginSection$1(container));
        this._registerSection$2("dart-sdk", this._createDartSdkSection$1(container));
        this._registerSection$2("analysis-server", this._createAnalysisServerSection$1(container));
        this._registerSection$2("analytics", this._createAnalyticsSection$1(container)).toggleClass$1("view-section-last");
        $.$get$state().$indexSet(0, "statusOpen", true);
      },
      static: {
        StatusView$: function() {
          var t1 = new E.StatusView(new L.StreamSubscriptions(true, []), P.LinkedHashMap__makeEmpty(), null, K.CoreElement$("div", null, "tab-content", null), K.CoreElement$("div", null, null, null), K.CoreElement$("div", null, null, null), null, null, null);
          t1.View$0();
          t1.StatusView$0({});
          return t1;
        }
      }
    },
    StatusView_closure: {
      "^": "Closure:0;_box_0",
      call$1: [function(str) {
        J.set$text$x(this._box_0.subtitle.element, str);
      }, null, null, 2, 0, null, 4, "call"]
    },
    StatusView__registerSection_closure: {
      "^": "Closure:0;aRef",
      call$1: [function(_) {
        return $.$get$shell().invoke$2("openExternal", J.get$href$x(this.aRef));
      }, null, null, 2, 0, null, 1, "call"]
    },
    StatusView__createPluginSection_closure: {
      "^": "Closure:0;header",
      call$1: [function(str) {
        J.set$text$x(this.header.subtitle.element, str);
      }, null, null, 2, 0, null, 4, "call"]
    },
    StatusView__createPluginSection_closure0: {
      "^": "Closure:1;",
      call$0: function() {
        $.$get$atom()._workspace.openConfigPage$1$packageID("dartlang");
      }
    },
    StatusView__createPluginSection_closure1: {
      "^": "Closure:1;",
      call$0: function() {
        $.$get$atom()._workspace.open$1(0, "atom://config/updates");
      }
    },
    StatusView__createPluginSection_closure2: {
      "^": "Closure:1;",
      call$0: function() {
        S.getSystemDescription(false).then$1(new E.StatusView__createPluginSection__closure());
      }
    },
    StatusView__createPluginSection__closure: {
      "^": "Closure:3;",
      call$1: [function(description) {
        $.$get$shell().invoke$2("openExternal", "https://github.com/dart-atom/dartlang/issues/new?body=" + H.S(P._Uri__uriEncode(C.List_KIf, description, C.Utf8Codec_false, false)));
      }, null, null, 2, 0, null, 72, "call"]
    },
    StatusView__createDartSdkSection_closure: {
      "^": "Closure:177;_box_0,header",
      call$1: [function(sdk) {
        var t1, t2, t3, t4;
        t1 = this.header;
        t2 = this._box_0;
        if (sdk == null) {
          J.set$text$x(t1.subtitle.element, "no SDK configured");
          J.set$text$x(t2.pathElement.element, "");
          J.set$title$x(t2.pathElement.element, "");
        } else {
          sdk.getVersion$0().then$1(new E.StatusView__createDartSdkSection__closure(t1));
          t1 = t2.pathElement;
          t3 = J.getInterceptor$x(sdk);
          t4 = t3.get$path(sdk);
          J.set$text$x(t1.element, t4);
          t2 = t2.pathElement;
          t3 = t3.get$path(sdk);
          J.set$title$x(t2.element, t3);
        }
      }, null, null, 2, 0, null, 70, "call"]
    },
    StatusView__createDartSdkSection__closure: {
      "^": "Closure:0;header",
      call$1: [function(ver) {
        J.set$text$x(this.header.subtitle.element, ver);
      }, null, null, 2, 0, null, 65, "call"]
    },
    StatusView__createDartSdkSection_closure0: {
      "^": "Closure:1;",
      call$0: function() {
        var t1 = Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH);
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new V.SdkLocationJob(t1, "Auto locate SDK", null));
      }
    },
    StatusView__createAnalysisServerSection_closure: {
      "^": "Closure:178;_box_0,header",
      call$1: [function(_) {
        var t1, t2, t3, f;
        t1 = this._box_0;
        t1.start.attribute$2("disabled", Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive());
        t1.reanalyze.attribute$2("disabled", !Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive());
        t1.stop.attribute$2("disabled", !Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive());
        if (!Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive()) {
          J.set$text$x(this.header.subtitle.element, "");
          J.set$text$x(t1.status.element, "not active");
        } else {
          t2 = t1.status;
          t3 = Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isBusy() ? "analyzing\u2026" : "idle";
          J.set$text$x(t2.element, t3);
          t2 = t1.version;
          if (t2 != null) {
            f = new P._Future(0, $.Zone__current, null, [null]);
            f._asyncComplete$1(t2);
          } else
            f = Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server().get$server().getVersion$0().then$1(new E.StatusView__createAnalysisServerSection__closure());
          f.then$1(new E.StatusView__createAnalysisServerSection__closure0(t1, this.header));
        }
      }, function() {
        return this.call$1(null);
      }, "call$0", null, null, null, 0, 2, null, 2, 1, "call"]
    },
    StatusView__createAnalysisServerSection__closure: {
      "^": "Closure:0;",
      call$1: [function(v) {
        return J.get$version$x(v);
      }, null, null, 2, 0, null, 18, "call"]
    },
    StatusView__createAnalysisServerSection__closure0: {
      "^": "Closure:0;_box_0,header",
      call$1: [function(v) {
        this._box_0.version = v;
        J.set$text$x(this.header.subtitle.element, v);
      }, null, null, 2, 0, null, 18, "call"]
    },
    StatusView__createAnalysisServerSection_closure0: {
      "^": "Closure:3;strobeIncoming",
      call$1: [function(str) {
        if (J.contains$1$asx(str, '"result":{"contexts":') === true)
          return;
        this.strobeIncoming.strobe$0();
      }, null, null, 2, 0, null, 4, "call"]
    },
    StatusView__createAnalysisServerSection_closure1: {
      "^": "Closure:3;strobeOutgoing",
      call$1: [function(str) {
        if (J.contains$1$asx(str, '"diagnostic.getDiagnostics"') === true)
          return;
        this.strobeOutgoing.strobe$0();
      }, null, null, 2, 0, null, 4, "call"]
    },
    StatusView__createAnalysisServerSection_closure2: {
      "^": "Closure:0;_box_0,update",
      call$1: [function(_) {
        this._box_0.version = null;
        this.update.call$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    StatusView__createDiagnostics_closure0: {
      "^": "Closure:179;_box_0",
      call$1: function(result) {
        var t1, t2, t3, count, t4, queue;
        t1 = this._box_0;
        t2 = t1.contextCount;
        if (result == null) {
          J.set$text$x(t2.element, "\u2014");
          J.set$text$x(t1.fileCount.element, "\u2014");
          J.set$text$x(t1.taskQueueCount.element, "\u2014");
        } else {
          t3 = M.commas(result.get$contexts().length);
          J.set$text$x(t2.element, t3);
          t3 = result.get$contexts();
          t3.toString;
          t2 = [null, null];
          count = new H.MappedListIterable(t3, new E.StatusView__createDiagnostics__closure0(), t2).fold$2(0, 0, new E.StatusView__createDiagnostics__closure1());
          t3 = t1.fileCount;
          t4 = M.commas(count);
          J.set$text$x(t3.element, t4);
          t4 = result.get$contexts();
          t4.toString;
          queue = new H.MappedListIterable(t4, new E.StatusView__createDiagnostics__closure2(), t2).fold$2(0, 0, new E.StatusView__createDiagnostics__closure3());
          t1 = t1.taskQueueCount;
          t2 = M.commas(queue);
          J.set$text$x(t1.element, t2);
        }
      }
    },
    StatusView__createDiagnostics__closure0: {
      "^": "Closure:0;",
      call$1: [function(c) {
        return J.$add$ns(c.get$explicitFileCount(), c.get$implicitFileCount());
      }, null, null, 2, 0, null, 38, "call"]
    },
    StatusView__createDiagnostics__closure1: {
      "^": "Closure:4;",
      call$2: function(a, b) {
        return J.$add$ns(a, b);
      }
    },
    StatusView__createDiagnostics__closure2: {
      "^": "Closure:180;",
      call$1: [function(c) {
        return c.get$workItemQueueLength();
      }, null, null, 2, 0, null, 38, "call"]
    },
    StatusView__createDiagnostics__closure3: {
      "^": "Closure:4;",
      call$2: function(a, b) {
        return J.$add$ns(a, b);
      }
    },
    StatusView__createDiagnostics_closure: {
      "^": "Closure:18;$this,updateUI",
      call$1: [function(active) {
        var t1, t2;
        if (active === true) {
          t1 = this.$this;
          t1._diagnosticTimer = P.Timer_Timer$periodic(P.Duration$(0, 0, 0, 0, 0, 1), new E.StatusView__createDiagnostics__closure(t1, this.updateUI));
        } else {
          t1 = this.$this;
          t2 = t1._diagnosticTimer;
          if (!(t2 == null))
            t2.cancel$0(0);
          t1._diagnosticTimer = null;
          this.updateUI.call$1(null);
        }
      }, null, null, 2, 0, null, 51, "call"]
    },
    StatusView__createDiagnostics__closure: {
      "^": "Closure:0;$this,updateUI",
      call$1: function(_) {
        var t1 = this.updateUI;
        Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server().get$diagnostic().server._call$2(0, "diagnostic.getDiagnostics", null).then$1(E.analysis_server_lib_DiagnosticsResult_parse$closure()).then$1(new E.StatusView__createDiagnostics___closure(t1)).catchError$1(new E.StatusView__createDiagnostics___closure0(this.$this, t1));
      }
    },
    StatusView__createDiagnostics___closure: {
      "^": "Closure:0;updateUI",
      call$1: [function(result) {
        this.updateUI.call$1(result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    StatusView__createDiagnostics___closure0: {
      "^": "Closure:4;$this,updateUI",
      call$2: [function(e, st) {
        var t1, t2;
        $.$get$_logger6().info$2("error from diagnostic.getDiagnostics()", e);
        t1 = this.$this;
        t2 = t1._diagnosticTimer;
        if (!(t2 == null))
          t2.cancel$0(0);
        t1._diagnosticTimer = null;
        this.updateUI.call$1(null);
      }, null, null, 4, 0, null, 0, 73, "call"]
    },
    StatusView__createAnalyticsSection_closure: {
      "^": "Closure:0;_key,check",
      call$1: [function(_) {
        $.$get$atom()._config.invoke$3("set", this._key, J.get$checked$x(this.check));
      }, null, null, 2, 0, null, 1, "call"]
    },
    StatusView__createAnalyticsSection_closure0: {
      "^": "Closure:0;_key,check",
      call$1: [function(_) {
        J.set$checked$x(this.check, J.$eq$($.$get$atom()._config.getValue$2$scope(this._key, null), true));
      }, null, null, 2, 0, null, 1, "call"]
    },
    StatusView_showSection_closure: {
      "^": "Closure:1;e",
      call$0: function() {
        J.remove$1$ax(J.get$classes$x(this.e), "status-emphasis");
      }
    },
    StatusView__handleSdkBrowse_closure: {
      "^": "Closure:0;",
      call$1: [function(path) {
        if (typeof path === "string")
          $.$get$atom()._config.invoke$3("set", "dartlang.sdkLocation", path);
      }, null, null, 2, 0, null, 69, "call"]
    },
    StatusHeader: {
      "^": "Object;title*,subtitle<,toolbar",
      StatusHeader$1: function(section) {
        var t1, t2, t3, t4;
        t1 = K.CoreElement$("div", null, "status-header", null);
        t2 = K.CoreElement$("span", null, "view-title", null);
        this.title = t2;
        t3 = K.CoreElement$("span", null, "view-subtitle", null);
        t3.flex$0(0);
        this.subtitle = t3;
        t4 = K.CoreElement$("span", null, "view-subtitle", null);
        this.toolbar = t4;
        t1.add$1(0, [t2, t3, t4]);
        J.add$1$ax(section, [t1]);
      },
      static: {
        StatusHeader$: function(section) {
          var t1 = new E.StatusHeader(null, null, null);
          t1.StatusHeader$1(section);
          return t1;
        }
      }
    },
    _getPlatformVersions_closure: {
      "^": "Closure:0;",
      call$1: [function(pluginVer) {
        return "Atom " + H.S($.$get$atom().invoke$1("getVersion")) + ", dartlang " + H.S(pluginVer);
      }, null, null, 2, 0, null, 143, "call"]
    }
  }], ["atom.status", "package:atom_dartlang/impl/status_display.dart",, E, {
    "^": "",
    StatusDisplay: {
      "^": "Object;_status_display$_disposables,_status_display$_subscription,dialog,_statusbarTile,_showTimer,_hideTimer",
      dispose$0: [function() {
        this._status_display$_subscription.cancel$0(0);
        this._statusbarTile.invoke$1("destroy");
        this._status_display$_disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _showJobsDialog$0: [function() {
        var t1, t2, t3, t4;
        if (this.dialog == null) {
          t1 = new E.JobsDialog(null, null);
          t2 = K.TitledModelDialog$("", "list-dialog");
          t1.dialog = t2;
          t2 = t2.content;
          t3 = K.CoreElement$("div", null, "select-list", null);
          t4 = K.CoreElement$("ol", null, "list-group", null);
          t1._status_display$_listGroup = t4;
          t3.add$1(0, [t4]);
          t2.add$1(0, [t3]);
          this.dialog = t1;
          this._status_display$_disposables._disposables.push(t1);
        }
        this.dialog.dialog._elements$_panel.invoke$1("show");
        this.dialog.updateJobsDialog$0();
      }, "call$0", "get$_showJobsDialog", 0, 0, 2],
      StatusDisplay$1: function(statusBar, _box_0) {
        var statusElement, spinner, textLabel, countBadge, m;
        _box_0.spinner = null;
        _box_0.textLabel = null;
        _box_0.countBadge = null;
        statusElement = K.CoreElement$("div", null, "job-status-bar dartlang", null);
        statusElement.clazz$1("inline-block");
        statusElement.click$1(0, this.get$_showJobsDialog());
        spinner = K.CoreElement$("img", null, null, null);
        spinner.clazz$1("inline-block-tight");
        spinner.clazz$1("status-spinner");
        J.setAttribute$2$x(spinner.element, "src", "atom://dartlang/images/gear.svg");
        _box_0.spinner = spinner;
        textLabel = K.CoreElement$("div", null, "text-label", null);
        textLabel.clazz$1("inline-block-tight");
        _box_0.textLabel = textLabel;
        countBadge = K.CoreElement$("span", null, "badge badge-info badge-count", null);
        _box_0.countBadge = countBadge;
        statusElement.add$1(0, [spinner, textLabel, countBadge]);
        m = P.LinkedHashMap__makeLiteral(["item", statusElement.element]);
        m.$indexSet(0, "priority", 1000);
        this._statusbarTile = new T.Tile(statusBar.invoke$2("addRightTile", m));
        this._status_display$_subscription = Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).get$onQueueChanged().listen$1(new E.StatusDisplay_closure(_box_0, this, statusElement));
        this._status_display$_disposables._disposables.push($.$get$atom()._commands.add$3(0, "atom-workspace", "dartlang:show-jobs", new E.StatusDisplay_closure0(this)));
      },
      $isDisposable: 1,
      static: {
        StatusDisplay$: function(statusBar) {
          var t1 = new E.StatusDisplay(new L.Disposables(true, []), null, null, null, null, null);
          t1.StatusDisplay$1(statusBar, {});
          return t1;
        }
      }
    },
    StatusDisplay_closure: {
      "^": "Closure:0;_box_0,$this,statusElement",
      call$1: [function(_) {
        var job, t1, shouldShow, t2, isShowing, t3, jobsLength;
        job = Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).get$activeJob();
        t1 = job == null;
        shouldShow = !t1;
        t2 = this.statusElement;
        isShowing = J.contains$1$asx(J.get$classes$x(t2.element), "showing");
        if (shouldShow && !isShowing) {
          t1 = this.$this;
          t3 = t1._hideTimer;
          if (!(t3 == null))
            t3.cancel$0(0);
          t1._hideTimer = null;
          if (t1._showTimer == null)
            t1._showTimer = P.Timer_Timer(C.Duration_200000, new E.StatusDisplay__closure(t1, t2));
        } else if (t1 && isShowing) {
          t1 = this.$this;
          t3 = t1._showTimer;
          if (!(t3 == null))
            t3.cancel$0(0);
          t1._showTimer = null;
          if (t1._hideTimer == null)
            t1._hideTimer = P.Timer_Timer(C.Duration_400000, new E.StatusDisplay__closure0(this._box_0, t1, t2));
        }
        if (shouldShow) {
          t1 = this._box_0.textLabel;
          t2 = H.S(job.name) + "\u2026";
          J.set$text$x(t1.element, t2);
        }
        jobsLength = Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).get$allJobs().length;
        t1 = this._box_0;
        t2 = t1.countBadge;
        t3 = jobsLength === 0 ? "" : "" + jobsLength + " " + M.pluralize("job", jobsLength);
        J.set$text$x(t2.element, t3);
        J.toggle$2$x(J.get$classes$x(t1.spinner.element), "showing", shouldShow);
        J.toggle$2$x(J.get$classes$x(t1.textLabel.element), "showing", shouldShow);
        J.toggle$2$x(J.get$classes$x(t1.countBadge.element), "showing", jobsLength > 1);
        t1 = this.$this.dialog;
        if (t1 != null)
          t1.updateJobsDialog$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    StatusDisplay__closure: {
      "^": "Closure:1;$this,statusElement",
      call$0: function() {
        J.toggle$2$x(J.get$classes$x(this.statusElement.element), "showing", true);
        this.$this._showTimer = null;
      }
    },
    StatusDisplay__closure0: {
      "^": "Closure:1;_box_0,$this,statusElement",
      call$0: function() {
        J.set$text$x(this._box_0.textLabel.element, "");
        J.toggle$2$x(J.get$classes$x(this.statusElement.element), "showing", false);
        this.$this._hideTimer = null;
      }
    },
    StatusDisplay_closure0: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        return this.$this._showJobsDialog$0();
      }
    },
    JobsDialog: {
      "^": "Object;dialog,_status_display$_listGroup",
      updateJobsDialog$0: function() {
        var t1, t2, _i, jobInstance, job, item, t3, t4, t5, t6;
        t1 = this.dialog.title;
        J.set$text$x(t1, Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).get$allJobs().length === 0 ? "No running jobs." : "" + Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).get$allJobs().length + " running " + M.pluralize("job", Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).get$allJobs().length));
        J.clear$0$ax(J.get$children$x(this._status_display$_listGroup.element));
        for (t1 = Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).get$allJobs(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          jobInstance = t1[_i];
          job = jobInstance.get$job();
          item = K.CoreElement$("li", null, "item-container", null);
          t3 = item.element;
          t4 = J.getInterceptor$x(t3);
          t4.setAttribute$2(t3, "layout", "");
          t4.setAttribute$2(t3, "horizontal", "");
          t3 = K.CoreElement$("div", null, null, null);
          if (C.JSString_methods.contains$1("inline-block", " "))
            H.throwExpression(P.ArgumentError$("spaces not allowed in class names"));
          t4 = t3.element;
          t5 = J.getInterceptor$x(t4);
          J.add$1$ax(t5.get$classes(t4), "inline-block");
          t3.flex$0(0);
          t6 = job.name;
          t5.set$text(t4, jobInstance.get$isRunning() ? H.S(t6) + "\u2026" : t6);
          item.add$1(0, [t3]);
          if (job.get$infoAction() != null) {
            t3 = K.CoreElement$("div", null, "info", null);
            if (C.JSString_methods.contains$1("inline-block", " "))
              H.throwExpression(P.ArgumentError$("spaces not allowed in class names"));
            t4 = t3.element;
            t5 = J.getInterceptor$x(t4);
            J.add$1$ax(t5.get$classes(t4), "inline-block");
            J.addAll$1$ax(t5.get$classes(t4), ["icon", "icon-question"]);
            t3.click$1(0, job.get$infoAction());
            item.add$1(0, [t3]);
          }
          if (jobInstance.get$isRunning()) {
            t3 = K.CoreElement$("div", null, "jobs-progress", null);
            if (C.JSString_methods.contains$1("inline-block", " "))
              H.throwExpression(P.ArgumentError$("spaces not allowed in class names"));
            J.add$1$ax(J.get$classes$x(t3.element), "inline-block");
            t4 = W._ElementFactoryProvider_createElement_tag("div", null);
            t5 = new K.ProgressElement(null, t4);
            t5.CoreElement$4$attributes$classes$text("div", null, null, null);
            if (C.JSString_methods.contains$1("block", " "))
              H.throwExpression(P.ArgumentError$("spaces not allowed in class names"));
            J.add$1$ax(J.get$classes$x(t4), "block");
            t4 = K.CoreElement$("progress", null, null, null);
            if (C.JSString_methods.contains$1("inline-block", " "))
              H.throwExpression(P.ArgumentError$("spaces not allowed in class names"));
            J.add$1$ax(J.get$classes$x(t4.element), "inline-block");
            t5._progress = t5.add$1(0, t4);
            t3.add$1(0, [t5]);
            item.add$1(0, [t3]);
          }
          this._status_display$_listGroup.add$1(0, item);
        }
      },
      dispose$0: [function() {
        var t1 = this.dialog;
        t1._elements$_panel.invoke$1("destroy");
        t1._cancelCommand.invoke$1("dispose");
        return;
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    }
  }], ["atom.testing", "package:atom_dartlang/impl/testing.dart",, K, {
    "^": "",
    TestManager: {
      "^": "Object;disposables,runners",
      isRunnableTest$2$allowWithoutTestName: function(path, allowWithoutTestName) {
        var t1, project, t2;
        t1 = {};
        t1.path = path;
        if (!(path == null ? false : J.endsWith$1$s(path, ".dart")))
          return false;
        if (J.endsWith$1$s(path, "_test.dart"))
          return true;
        project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
        if (project == null)
          return false;
        path = this._findAssociatedTest$2(project, path);
        t1.path = path;
        if (!allowWithoutTestName)
          if (!J.endsWith$1$s(path, "_test.dart")) {
            t2 = $.$get$_sep();
            if (!(J.contains$1$asx(path, H.S(t2) + "test" + H.S(t2)) === true && J.endsWith$1$s(path, H.S(t2) + "all.dart")))
              return false;
          }
        return C.JSArray_methods.any$1(this.runners, new K.TestManager_isRunnableTest_closure(t1, project));
      },
      isRunnableTest$1: function(path) {
        return this.isRunnableTest$2$allowWithoutTestName(path, false);
      },
      runTestFile$2$allowWithoutTestName: function(path, allowWithoutTestName) {
        var t1, project, _i, runner;
        if (!(path == null ? false : J.endsWith$1$s(path, ".dart"))) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "Unable to run tests - not a Dart file.", t1._options$5$buttons$description$detail$dismissable$icon(null, path, null, null, null));
          return;
        }
        if (!this.isRunnableTest$2$allowWithoutTestName(path, allowWithoutTestName)) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "Unable to run tests - not a valid test file.", t1._options$5$buttons$description$detail$dismissable$icon(null, path, null, null, null));
          return;
        }
        $.$get$atom()._workspace.saveAll$0();
        project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
        path = this._findAssociatedTest$2(project, path);
        for (t1 = this.runners, _i = 0; _i < 3; ++_i) {
          runner = t1[_i];
          if (runner.canRun$2(project, path) === true)
            return runner.run$2(project, path);
        }
        t1 = $.$get$atom()._notifications;
        t1.invoke$3("addWarning", "Unable to run test file.", t1._options$5$buttons$description$detail$dismissable$icon(null, path, null, null, null));
        return;
      },
      runTestFile$1: function(path) {
        return this.runTestFile$2$allowWithoutTestName(path, false);
      },
      _runTests$1: [function($event) {
        var t1, path;
        t1 = $.$get$atom();
        path = t1._workspace.getActiveTextEditor$0();
        path = path == null ? path : path.invoke$1("getPath");
        if (Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path) == null) {
          t1 = t1._notifications;
          t1.invoke$3("addWarning", "Unable to run tests - no Dart project selected.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          return;
        }
        this.runTestFile$2$allowWithoutTestName(path, true);
      }, "call$1", "get$_runTests", 2, 0, 6],
      _findAssociatedTest$2: function(project, path) {
        var prefix, pathFragment, t1, t2, t3, _i, testPath;
        if (path == null || J.endsWith$1$s(path, "_test.dart"))
          return path;
        prefix = J.get$path$x(project);
        pathFragment = J.substring$1$s(path, J.$add$ns(J.get$length$asx(prefix), 1));
        for (t1 = $.$get$fs(), t2 = F.getPossibleTestPaths(pathFragment, t1.separator), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          testPath = t1.join$2(0, prefix, t2[_i]);
          if (t1.invoke$2("existsSync", testPath) === true)
            return testPath;
        }
        return path;
      },
      _createTest$1: [function(_) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, path, project, pathFragment, t3, t4, testPath, packageName, groupName;
        var $async$_createTest$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                t2 = $.$get$atom();
                path = t2._workspace.getActiveTextEditor$0();
                path = path == null ? path : path.invoke$1("getPath");
                if (path == null) {
                  t1 = t2._notifications;
                  t1.invoke$3("addInfo", "No active editor.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
                  // goto return
                  $async$goto = 1;
                  break;
                }
                project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
                if (project == null) {
                  t1 = t2._notifications;
                  t1.invoke$3("addInfo", "No active Dart project.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if (!J.endsWith$1$s(path, ".dart")) {
                  t1 = t2._notifications;
                  t1.invoke$3("addInfo", "Current editor is not a Dart file.", t1._options$5$buttons$description$detail$dismissable$icon(null, path, null, null, null));
                  // goto return
                  $async$goto = 1;
                  break;
                }
                pathFragment = project.getRelative$1(path);
                t3 = $.$get$fs();
                t4 = J.getInterceptor$s(pathFragment);
                if (!t4.startsWith$1(pathFragment, "lib" + t3.separator)) {
                  t1 = t2._notifications;
                  t1.invoke$3("addInfo", "This action requires the file to be in the 'lib' folder.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
                  // goto return
                  $async$goto = 1;
                  break;
                }
                pathFragment = t4.substring$1(pathFragment, 4);
                testPath = C.JSString_methods.substring$2(pathFragment, 0, pathFragment.length - 5) + "_test.dart";
                t1.testPath = testPath;
                testPath = t3.join$3(0, J.get$path$x(project), "test", testPath);
                t1.testPath = testPath;
                if (t3.invoke$2("existsSync", testPath) === true) {
                  t2._workspace.open$1(0, testPath);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                packageName = project.getSelfRefName$0();
                groupName = t3.basename$1(pathFragment);
                t3 = J.getInterceptor$asx(groupName);
                groupName = t3.substring$2(groupName, 0, J.$sub$n(t3.get$length(groupName), 5));
                new F.File(F._create("File", testPath, null)).invoke$2("writeSync", "import 'package:" + H.S(packageName) + "/" + pathFragment + "';\nimport 'package:test/test.dart';\n\nmain() => defineTests();\n\ndefineTests() {\n  group('" + groupName + "', () {\n    test('todo', () {\n      // TODO: Implement test.\n\n    });\n  });\n}\n");
                $async$goto = 3;
                return P._asyncHelper(P.Future_Future$delayed(C.Duration_0, null, null), $async$_createTest$1, $async$completer);
              case 3:
                // returning from await.
                t2._workspace.open$1(0, testPath).then$1(new K.TestManager__createTest_closure(t1, $async$self));
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_createTest$1, $async$completer);
      }, function() {
        return this._createTest$1(null);
      }, "_createTest$0", "call$1", "call$0", "get$_createTest", 0, 2, 79, 2],
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    TestManager_isRunnableTest_closure: {
      "^": "Closure:181;_box_0,project",
      call$1: function(runner) {
        return runner.canRun$2(this.project, this._box_0.path);
      }
    },
    TestManager__createTest_closure: {
      "^": "Closure:0;_box_0,$this",
      call$1: [function(_) {
        this.$this.runTestFile$1(this._box_0.testPath);
      }, null, null, 2, 0, null, 1, "call"]
    },
    TestRunner: {
      "^": "Object;"
    },
    FlutterTestRunner: {
      "^": "TestRunner;",
      canRun$2: function(project, path) {
        return project.importsPackage$1("flutter") && project.importsPackage$1("test");
      },
      run$2: function(project, path) {
        var relativePath, args, t1, t2, t3, t4, t5, t6, runner, description, t7, t8, launch;
        relativePath = project.getRelative$1(path);
        args = ["--no-color", "test"];
        if (J.$eq$($.$get$atom()._config.getValue$2$scope("flutter.mergeCoverage", null), true))
          args.push("--merge-coverage");
        args.push(relativePath);
        t1 = $.$get$_flutterSdk().get$sdk().get$flutterToolPath();
        t2 = J.getInterceptor$x(project);
        t3 = t2.get$path(project);
        t4 = new P._Future(0, $.Zone__current, null, [null]);
        t5 = P.StreamController_StreamController(null, null, null, null, false, null);
        t6 = P.StreamController_StreamController(null, null, null, null, false, null);
        runner = new X.ProcessRunner(t1, args, t3, null, null, new P._AsyncCompleter(t4, [null]), null, t5, t6);
        description = "flutter test " + H.S(relativePath);
        t3 = Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK);
        t2 = t2.get$path(project);
        t1 = $.Launch__id + 1;
        $.Launch__id = t1;
        t7 = [null];
        t8 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t7);
        t8._utils$_value = null;
        t7 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t7);
        t7._utils$_value = null;
        launch = new X.Launch(null, null, relativePath, description, null, t3, t1, new K.FlutterTestRunner_run_closure(runner), t2, t8, t7, P.StreamController_StreamController$broadcast(null, null, false, null), null, null);
        if (t2 != null)
          launch._pathResolver = new X._PathResolver(t2);
        Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).addLaunch$1(launch);
        runner.execStreaming$0();
        new P._ControllerStream(t5, [H.getTypeArgumentByIndex(t5, 0)]).listen$1(new K.FlutterTestRunner_run_closure0(launch));
        new P._ControllerStream(t6, [H.getTypeArgumentByIndex(t6, 0)]).listen$1(new K.FlutterTestRunner_run_closure1(launch));
        t4.then$1(new K.FlutterTestRunner_run_closure2(launch));
        return launch;
      }
    },
    FlutterTestRunner_run_closure: {
      "^": "Closure:1;runner",
      call$0: [function() {
        return this.runner.kill$0();
      }, null, null, 0, 0, null, "call"]
    },
    FlutterTestRunner_run_closure0: {
      "^": "Closure:0;launch",
      call$1: [function(str) {
        var t1 = this.launch._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, false, false, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    FlutterTestRunner_run_closure1: {
      "^": "Closure:0;launch",
      call$1: [function(str) {
        var t1 = this.launch._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, true, false, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    FlutterTestRunner_run_closure2: {
      "^": "Closure:0;launch",
      call$1: [function(code) {
        return this.launch.launchTerminated$1(code);
      }, null, null, 2, 0, null, 14, "call"]
    },
    TestPackageTestRunner: {
      "^": "TestRunner;",
      canRun$2: function(project, path) {
        var t1;
        if (project.importsPackage$1("test")) {
          t1 = $.$get$fs();
          return t1.invoke$2("existsSync", t1.join$2(0, J.get$path$x(project), "packages"));
        } else
          return false;
      },
      run$2: function(project, path) {
        var relativePath, t1, t2, t3, t4, t5, t6, runner, description, t7, t8, launch;
        relativePath = project.getRelative$1(path);
        t1 = Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk().getToolPath$1("pub");
        t2 = J.getInterceptor$x(project);
        t3 = t2.get$path(project);
        t4 = new P._Future(0, $.Zone__current, null, [null]);
        t5 = P.StreamController_StreamController(null, null, null, null, false, null);
        t6 = P.StreamController_StreamController(null, null, null, null, false, null);
        runner = new X.ProcessRunner(t1, ["run", "test", "-rexpanded", "--no-color", relativePath], t3, null, null, new P._AsyncCompleter(t4, [null]), null, t5, t6);
        description = "pub run test " + H.S(relativePath);
        t3 = Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK);
        t2 = t2.get$path(project);
        t1 = $.Launch__id + 1;
        $.Launch__id = t1;
        t7 = [null];
        t8 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t7);
        t8._utils$_value = null;
        t7 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t7);
        t7._utils$_value = null;
        launch = new X.Launch(null, null, relativePath, description, null, t3, t1, new K.TestPackageTestRunner_run_closure(runner), t2, t8, t7, P.StreamController_StreamController$broadcast(null, null, false, null), null, null);
        if (t2 != null)
          launch._pathResolver = new X._PathResolver(t2);
        Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).addLaunch$1(launch);
        runner.execStreaming$0();
        new P._ControllerStream(t5, [H.getTypeArgumentByIndex(t5, 0)]).listen$1(new K.TestPackageTestRunner_run_closure0(launch));
        new P._ControllerStream(t6, [H.getTypeArgumentByIndex(t6, 0)]).listen$1(new K.TestPackageTestRunner_run_closure1(launch));
        t4.then$1(new K.TestPackageTestRunner_run_closure2(launch));
        return launch;
      }
    },
    TestPackageTestRunner_run_closure: {
      "^": "Closure:1;runner",
      call$0: [function() {
        return this.runner.kill$0();
      }, null, null, 0, 0, null, "call"]
    },
    TestPackageTestRunner_run_closure0: {
      "^": "Closure:0;launch",
      call$1: [function(str) {
        var t1 = this.launch._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, false, false, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    TestPackageTestRunner_run_closure1: {
      "^": "Closure:0;launch",
      call$1: [function(str) {
        var t1 = this.launch._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, true, false, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    TestPackageTestRunner_run_closure2: {
      "^": "Closure:0;launch",
      call$1: [function(code) {
        return this.launch.launchTerminated$1(code);
      }, null, null, 2, 0, null, 14, "call"]
    },
    CliTestRunner: {
      "^": "TestRunner;",
      canRun$2: function(project, path) {
        return project.importsPackage$1("test");
      },
      run$2: function(project, path) {
        var relativePath, t1, t2, t3, t4, t5, t6, runner, description, t7, t8, launch;
        relativePath = project.getRelative$1(path);
        t1 = J.$index$asx(Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk().get$dartVm().obj, "path");
        t2 = J.getInterceptor$x(project);
        t3 = t2.get$path(project);
        t4 = new P._Future(0, $.Zone__current, null, [null]);
        t5 = P.StreamController_StreamController(null, null, null, null, false, null);
        t6 = P.StreamController_StreamController(null, null, null, null, false, null);
        runner = new X.ProcessRunner(t1, [relativePath], t3, null, null, new P._AsyncCompleter(t4, [null]), null, t5, t6);
        description = "dart " + H.S(relativePath);
        t3 = Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK);
        t2 = t2.get$path(project);
        t1 = $.Launch__id + 1;
        $.Launch__id = t1;
        t7 = [null];
        t8 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t7);
        t8._utils$_value = null;
        t7 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t7);
        t7._utils$_value = null;
        launch = new X.Launch(null, null, relativePath, description, null, t3, t1, new K.CliTestRunner_run_closure(runner), t2, t8, t7, P.StreamController_StreamController$broadcast(null, null, false, null), null, null);
        if (t2 != null)
          launch._pathResolver = new X._PathResolver(t2);
        Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).addLaunch$1(launch);
        runner.execStreaming$0();
        new P._ControllerStream(t5, [H.getTypeArgumentByIndex(t5, 0)]).listen$1(new K.CliTestRunner_run_closure0(launch));
        new P._ControllerStream(t6, [H.getTypeArgumentByIndex(t6, 0)]).listen$1(new K.CliTestRunner_run_closure1(launch));
        t4.then$1(new K.CliTestRunner_run_closure2(launch));
        return launch;
      }
    },
    CliTestRunner_run_closure: {
      "^": "Closure:1;runner",
      call$0: [function() {
        return this.runner.kill$0();
      }, null, null, 0, 0, null, "call"]
    },
    CliTestRunner_run_closure0: {
      "^": "Closure:0;launch",
      call$1: [function(str) {
        var t1 = this.launch._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, false, false, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    CliTestRunner_run_closure1: {
      "^": "Closure:0;launch",
      call$1: [function(str) {
        var t1 = this.launch._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, true, false, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    CliTestRunner_run_closure2: {
      "^": "Closure:0;launch",
      call$1: [function(code) {
        return this.launch.launchTerminated$1(code);
      }, null, null, 2, 0, null, 14, "call"]
    }
  }], ["", "package:atom_dartlang/impl/testing_utils.dart",, F, {
    "^": "",
    getPossibleTestPaths: function(path, separator) {
      var result, t1, index;
      if (!C.JSString_methods.startsWith$1(path, "lib" + separator))
        return [];
      path = C.JSString_methods.substring$1(path, 4);
      result = [];
      path = C.JSString_methods.substring$2(path, 0, path.length - 5) + "_test.dart";
      result.push("test" + separator + path);
      if (C.JSString_methods.startsWith$1(path, "src" + separator)) {
        path = C.JSString_methods.substring$1(path, 4);
        result.push("test" + separator + path);
      }
      if (C.JSString_methods.contains$1(path, "/")) {
        t1 = "test" + separator;
        index = C.JSString_methods.lastIndexOf$1(path, separator);
        result.push(t1 + (index === -1 ? path : C.JSString_methods.substring$1(path, index + 1)));
      }
      return result;
    }
  }], ["", "package:atom_dartlang/impl/toolbar.dart",, M, {
    "^": "",
    Toolbar: {
      "^": "ProxyHolder;obj",
      addLeftTile$2$item$priority: function(item, priority) {
        var m = P.LinkedHashMap__makeLiteral(["item", item]);
        return new M.ToolbarTile(this.invoke$2("addLeftTile", m));
      },
      addLeftTile$1$item: function(item) {
        return this.addLeftTile$2$item$priority(item, null);
      }
    },
    ToolbarTile: {
      "^": "ProxyHolder;obj"
    }
  }], ["", "package:atom_dartlang/impl/toolbar_impl.dart",, U, {
    "^": "",
    DartToolbarContribution: {
      "^": "Object;leftTile,flutterTile,rightTile,subs",
      _buildFlutterTile$0: function() {
        var t1, e, flutterDiv, t2, t3, t4, deviceList, runModeList;
        t1 = {};
        t1.flutterDiv = null;
        e = K.CoreElement$("div", null, "btn-group btn-group dartlang-toolbar settings-view", null);
        flutterDiv = K.CoreElement$("div", null, "btn-group btn-group dartlang-toolbar", null);
        t2 = K.CoreElement$("div", null, "icon icon-device-mobile", null);
        t3 = t2.element;
        t4 = J.getInterceptor$x(t3);
        t4.setAttribute$2(t3, "id", "toolbar-mobile-icon");
        t4.set$title(t3, "Available devices");
        deviceList = K.CoreElement$("select", null, "form-control", null);
        runModeList = K.CoreElement$("select", null, "form-control", null);
        J.set$width$x(J.get$style$x(runModeList.element), "120px");
        flutterDiv.add$1(0, [t2, deviceList, runModeList]);
        t1.flutterDiv = flutterDiv;
        e.add$1(0, [flutterDiv]);
        this._bindDevicesToSelect$3(Q.Dependencies_instance().getDependency$1(C.Type_FlutterDeviceManager_zjY), deviceList, runModeList);
        t1 = new U.DartToolbarContribution__buildFlutterTile_updateToolbar(t1);
        t1.call$0();
        t2 = Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).get$dartProjectEditors()._activeEditorController;
        t3 = this.subs._subscriptions;
        t3.push(new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(new U.DartToolbarContribution__buildFlutterTile_closure(t1)));
        t3.push(Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).get$onProjectsChanged().listen$1(new U.DartToolbarContribution__buildFlutterTile_closure0(t1)));
        t3.push(Q.Dependencies_instance().getDependency$1(C.Type_WorkspaceLaunchManager_G7N).get$onSelectedRunnableChanged().listen$1(new U.DartToolbarContribution__buildFlutterTile_closure1(t1)));
        return e;
      },
      _buildRightTile$0: function() {
        var t1, e, t2, t3, runTestsDiv, t4, t5, outlineToggleDiv;
        t1 = {};
        t1.runTestsDiv = null;
        t1.outlineToggleDiv = null;
        e = K.CoreElement$("div", "flex-center", "settings-view", null);
        t2 = K.CoreElement$("div", null, "btn-group btn-group dartlang-toolbar", null);
        t3 = K.CoreElement$("div", null, null, null);
        runTestsDiv = K.CoreElement$("button", null, "btn icon icon-pulse", null);
        runTestsDiv.click$1(0, this.get$_toolbar_impl$_runTests());
        t4 = runTestsDiv.element;
        t5 = J.getInterceptor$x(t4);
        t5.set$title(t4, "Run Tests");
        J.set$display$x(t5.get$style(t4), "none");
        t1.runTestsDiv = runTestsDiv;
        t3.add$1(0, [runTestsDiv]);
        t4 = K.CoreElement$("div", null, null, null);
        outlineToggleDiv = K.CoreElement$("button", null, "btn icon icon-list-unordered", null);
        outlineToggleDiv.click$1(0, this.get$_toggleOutline());
        J.set$title$x(outlineToggleDiv.element, "Toggle Dart Outline View");
        t1.outlineToggleDiv = outlineToggleDiv;
        t4.add$1(0, [outlineToggleDiv]);
        t2.add$1(0, [t3, t4]);
        e.add$1(0, [t2]);
        t1 = new U.DartToolbarContribution__buildRightTile_updateToolbar(t1);
        t1.call$0();
        t2 = Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).get$dartProjectEditors()._activeEditorController;
        this.subs._subscriptions.push(new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(new U.DartToolbarContribution__buildRightTile_closure(t1)));
        return e;
      },
      _bindLaunchManager$3: function(runButton, selectList, configureButton) {
        var t1, element, updateUI, t2;
        t1 = {};
        element = H.interceptedTypeCast(selectList.element, "$isSelectElement");
        t1.runnables = [];
        updateUI = new U.DartToolbarContribution__bindLaunchManager_closure(t1, runButton, selectList, configureButton, element);
        t2 = this.subs._subscriptions;
        t2.push(Q.Dependencies_instance().getDependency$1(C.Type_WorkspaceLaunchManager_G7N).get$onRunnablesChanged().listen$1(new U.DartToolbarContribution__bindLaunchManager_closure0(updateUI)));
        t2.push(Q.Dependencies_instance().getDependency$1(C.Type_WorkspaceLaunchManager_G7N).get$onSelectedRunnableChanged().listen$1(new U.DartToolbarContribution__bindLaunchManager_closure1(updateUI)));
        element.toString;
        new W._EventStreamSubscription(0, element, "change", W._wrapZone(new U.DartToolbarContribution__bindLaunchManager_closure2(t1, element)), false, [W.Event])._tryResume$0();
        updateUI.call$0();
      },
      _bindDevicesToSelect$3: function(deviceManager, deviceList, runModeList) {
        var deviceElement, updateSelect, t1, runModeElement, t2, _i, mode, t3;
        deviceElement = H.interceptedTypeCast(deviceList.element, "$isSelectElement");
        updateSelect = new U.DartToolbarContribution__bindDevicesToSelect_closure(deviceManager, deviceList, deviceElement);
        updateSelect.call$0();
        t1 = this.subs._subscriptions;
        t1.push(deviceManager.get$onDevicesChanged().listen$1(new U.DartToolbarContribution__bindDevicesToSelect_closure0(updateSelect)));
        t1.push(deviceManager.get$onSelectedChanged().listen$1(new U.DartToolbarContribution__bindDevicesToSelect_closure1(updateSelect)));
        deviceElement.toString;
        t1 = [W.Event];
        new W._EventStreamSubscription(0, deviceElement, "change", W._wrapZone(new U.DartToolbarContribution__bindDevicesToSelect_closure2(deviceManager, deviceElement)), false, t1)._tryResume$0();
        runModeElement = H.interceptedTypeCast(runModeList.element, "$isSelectElement");
        for (t2 = $.$get$FlutterDeviceManager_runModes(), _i = 0; _i < 3; ++_i) {
          mode = t2[_i];
          t3 = K.CoreElement$("option", null, null, null);
          J.set$text$x(t3.element, mode.name);
          runModeList.add$1(0, t3);
        }
        runModeElement.selectedIndex = 0;
        new W._EventStreamSubscription(0, runModeElement, "change", W._wrapZone(new U.DartToolbarContribution__bindDevicesToSelect_closure3(deviceManager, runModeElement)), false, t1)._tryResume$0();
      },
      _handleRunLaunch$0: [function() {
        var runnable, t1;
        runnable = Q.Dependencies_instance().getDependency$1(C.Type_WorkspaceLaunchManager_G7N).get$selectedRunnable();
        if (runnable != null)
          Q.Dependencies_instance().getDependency$1(C.Type_RunApplicationManager_vVm).run$1(runnable.getCreateLaunchConfig$0());
        else {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "No current launchable resource.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        }
      }, "call$0", "get$_handleRunLaunch", 0, 0, 2],
      _handleConfigureLaunch$0: [function() {
        var runnable, config, t1;
        runnable = Q.Dependencies_instance().getDependency$1(C.Type_WorkspaceLaunchManager_G7N).get$selectedRunnable();
        if (runnable != null) {
          config = runnable.getCreateLaunchConfig$0();
          $.$get$atom()._workspace.openPending$1(config.get$configYamlPath());
        } else {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "No current launchable resource.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        }
      }, "call$0", "get$_handleConfigureLaunch", 0, 0, 2],
      _toolbar_impl$_runTests$0: [function() {
        var t1, path;
        t1 = $.$get$atom();
        path = t1._workspace.getActiveTextEditor$0();
        path = path == null ? path : path.invoke$1("getPath");
        if (path == null) {
          t1 = t1._notifications;
          t1.invoke$3("addWarning", "No active editor.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        } else
          Q.Dependencies_instance().getDependency$1(C.Type_TestManager_KlB).runTestFile$1(path);
      }, "call$0", "get$_toolbar_impl$_runTests", 0, 0, 2],
      _toggleOutline$0: [function() {
        var t1 = $.$get$atom()._config;
        t1.invoke$3("set", "dartlang.showOutlineView", !J.$eq$(t1.getValue$2$scope("dartlang.showOutlineView", null), true));
      }, "call$0", "get$_toggleOutline", 0, 0, 2],
      dispose$0: [function() {
        this.leftTile.invoke$1("destroy");
        this.flutterTile.invoke$1("destroy");
        this.rightTile.invoke$1("destroy");
        this.subs.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      DartToolbarContribution$1: function($toolbar) {
        P.Timer_Timer(C.Duration_0, new U.DartToolbarContribution_closure(this, $toolbar));
      },
      $isDisposable: 1,
      static: {
        DartToolbarContribution$: function($toolbar) {
          var t1 = new U.DartToolbarContribution(null, null, null, new L.StreamSubscriptions(true, []));
          t1.DartToolbarContribution$1($toolbar);
          return t1;
        }
      }
    },
    DartToolbarContribution_closure: {
      "^": "Closure:1;$this,toolbar",
      call$0: function() {
        var t1, t2, e, runButton, configureLaunchButton, appSelectList, m;
        t1 = this.$this;
        t2 = this.toolbar;
        e = K.CoreElement$("div", null, "btn-group btn-group dartlang-toolbar settings-view", null);
        runButton = K.CoreElement$("button", null, "btn icon icon-playback-play", null);
        runButton.click$1(0, t1.get$_handleRunLaunch());
        J.set$title$x(runButton.element, "Run");
        configureLaunchButton = K.CoreElement$("button", null, "btn icon icon-gear", null);
        configureLaunchButton.click$1(0, t1.get$_handleConfigureLaunch());
        J.set$title$x(configureLaunchButton.element, "Configure launch");
        appSelectList = K.CoreElement$("select", null, "form-control", null);
        e.add$1(0, [runButton, configureLaunchButton, appSelectList]);
        t1._bindLaunchManager$3(runButton, appSelectList, configureLaunchButton);
        t1.leftTile = t2.addLeftTile$1$item(e.element);
        t1.flutterTile = t2.addLeftTile$1$item(t1._buildFlutterTile$0().element);
        m = P.LinkedHashMap__makeLiteral(["item", t1._buildRightTile$0().element]);
        t1.rightTile = new M.ToolbarTile(t2.invoke$2("addRightTile", m));
      }
    },
    DartToolbarContribution__buildFlutterTile_updateToolbar: {
      "^": "Closure:2;_box_0",
      call$0: function() {
        var path, project, isFlutterProject, t1, isFlutterRunnable;
        path = $.$get$atom()._workspace.getActiveTextEditor$0();
        path = path == null ? path : path.invoke$1("getPath");
        project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
        isFlutterProject = project != null && project.isFlutterProject$0();
        t1 = Q.Dependencies_instance().getDependency$1(C.Type_WorkspaceLaunchManager_G7N).get$selectedRunnable();
        isFlutterRunnable = t1 == null ? t1 : t1.get$isFlutterRunnable();
        if (isFlutterRunnable == null)
          isFlutterRunnable = false;
        t1 = this._box_0.flutterDiv;
        t1.attribute$2("hidden", !isFlutterProject && isFlutterRunnable !== true);
      }
    },
    DartToolbarContribution__buildFlutterTile_closure: {
      "^": "Closure:8;updateToolbar",
      call$1: [function(editor) {
        this.updateToolbar.call$0();
      }, null, null, 2, 0, null, 9, "call"]
    },
    DartToolbarContribution__buildFlutterTile_closure0: {
      "^": "Closure:38;updateToolbar",
      call$1: [function(projects) {
        this.updateToolbar.call$0();
      }, null, null, 2, 0, null, 29, "call"]
    },
    DartToolbarContribution__buildFlutterTile_closure1: {
      "^": "Closure:52;updateToolbar",
      call$1: [function(config) {
        this.updateToolbar.call$0();
      }, null, null, 2, 0, null, 74, "call"]
    },
    DartToolbarContribution__buildRightTile_updateToolbar: {
      "^": "Closure:2;_box_0",
      call$0: function() {
        var path, t1, t2, t3;
        path = $.$get$atom()._workspace.getActiveTextEditor$0();
        path = path == null ? path : path.invoke$1("getPath");
        t1 = this._box_0;
        t2 = t1.runTestsDiv;
        t3 = Q.Dependencies_instance().getDependency$1(C.Type_TestManager_KlB).isRunnableTest$1(path) ? "inline-block" : "none";
        J.set$display$x(J.get$style$x(t2.element), t3);
        t1 = t1.outlineToggleDiv;
        t1.attribute$2("disabled", !(path == null ? false : J.endsWith$1$s(path, ".dart")));
      }
    },
    DartToolbarContribution__buildRightTile_closure: {
      "^": "Closure:8;updateToolbar",
      call$1: [function(editor) {
        this.updateToolbar.call$0();
      }, null, null, 2, 0, null, 9, "call"]
    },
    DartToolbarContribution__bindLaunchManager_closure: {
      "^": "Closure:1;_box_0,runButton,selectList,configureButton,element",
      call$0: function() {
        var runnables, t1, t2, t3, t4, _i, runnable, t5, index;
        runnables = Q.Dependencies_instance().getDependency$1(C.Type_WorkspaceLaunchManager_G7N).get$runnables();
        t1 = this._box_0;
        t1.runnables = runnables;
        this.runButton.attribute$2("disabled", runnables.length === 0);
        t2 = this.selectList;
        t2.attribute$2("disabled", t1.runnables.length === 0);
        this.configureButton.attribute$2("disabled", t1.runnables.length === 0);
        J.clear$0$ax(J.get$children$x(t2.element));
        t3 = t1.runnables;
        if (t3.length === 0) {
          t1 = K.CoreElement$("option", null, null, null);
          J.set$text$x(t1.element, "No runnable apps");
          t2.add$1(0, t1);
        } else {
          C.JSArray_methods.sort$0(t3);
          for (t3 = t1.runnables, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
            runnable = t3[_i];
            t5 = K.CoreElement$("option", null, null, null);
            J.set$text$x(t5.element, runnable.getDisplayName$0());
            t2.add$1(0, t5);
          }
          index = C.JSArray_methods.indexOf$1(t1.runnables, Q.Dependencies_instance().getDependency$1(C.Type_WorkspaceLaunchManager_G7N).get$selectedRunnable());
          if (!J.$eq$(index, -1))
            this.element.selectedIndex = index;
        }
      }
    },
    DartToolbarContribution__bindLaunchManager_closure0: {
      "^": "Closure:184;updateUI",
      call$1: [function(runnables) {
        return this.updateUI.call$0();
      }, null, null, 2, 0, null, 146, "call"]
    },
    DartToolbarContribution__bindLaunchManager_closure1: {
      "^": "Closure:52;updateUI",
      call$1: [function(runnable) {
        return this.updateUI.call$0();
      }, null, null, 2, 0, null, 147, "call"]
    },
    DartToolbarContribution__bindLaunchManager_closure2: {
      "^": "Closure:0;_box_0,element",
      call$1: [function(e) {
        var index, t1, t2;
        index = this.element.selectedIndex;
        if (typeof index !== "number")
          return index.$ge();
        if (index >= 0 && index < this._box_0.runnables.length) {
          t1 = Q.Dependencies_instance().getDependency$1(C.Type_WorkspaceLaunchManager_G7N);
          t2 = this._box_0.runnables;
          if (index < 0 || index >= t2.length)
            return H.ioore(t2, index);
          t1.setSelectedRunnable$1(t2[index]);
        }
      }, null, null, 2, 0, null, 0, "call"]
    },
    DartToolbarContribution__bindDevicesToSelect_closure: {
      "^": "Closure:1;deviceManager,deviceList,deviceElement",
      call$0: function() {
        var t1, t2, devices, t3, t4, index, _i, device, t5;
        t1 = this.deviceList;
        J.clear$0$ax(J.get$children$x(t1.element));
        t2 = this.deviceManager;
        devices = t2.get$devices();
        t1.attribute$2("disabled", devices.length === 0);
        t3 = devices.length;
        if (t3 === 0) {
          t2 = K.CoreElement$("option", null, null, null);
          J.set$text$x(t2.element, "No devices connected");
          t1.add$1(0, t2);
        } else
          for (t4 = this.deviceElement, index = 0, _i = 0; _i < devices.length; devices.length === t3 || (0, H.throwConcurrentModificationError)(devices), ++_i) {
            device = devices[_i];
            t5 = K.CoreElement$("option", null, null, null);
            J.set$text$x(t5.element, device.getLabel$0());
            t1.add$1(0, t5);
            if (J.$eq$(t2.get$currentSelectedDevice(), device))
              t4.selectedIndex = index;
            ++index;
          }
      }
    },
    DartToolbarContribution__bindDevicesToSelect_closure0: {
      "^": "Closure:57;updateSelect",
      call$1: [function(devices) {
        return this.updateSelect.call$0();
      }, null, null, 2, 0, null, 148, "call"]
    },
    DartToolbarContribution__bindDevicesToSelect_closure1: {
      "^": "Closure:24;updateSelect",
      call$1: [function(device) {
        return this.updateSelect.call$0();
      }, null, null, 2, 0, null, 17, "call"]
    },
    DartToolbarContribution__bindDevicesToSelect_closure2: {
      "^": "Closure:0;deviceManager,deviceElement",
      call$1: [function(e) {
        this.deviceManager.setSelectedDeviceIndex$1(this.deviceElement.selectedIndex);
      }, null, null, 2, 0, null, 0, "call"]
    },
    DartToolbarContribution__bindDevicesToSelect_closure3: {
      "^": "Closure:0;deviceManager,runModeElement",
      call$1: [function(e) {
        var t1, t2;
        t1 = $.$get$FlutterDeviceManager_runModes();
        t2 = this.runModeElement.selectedIndex;
        if (t2 >>> 0 !== t2 || t2 >= 3)
          return H.ioore(t1, t2);
        this.deviceManager.set$runMode(t1[t2]);
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["atom.jobs", "package:atom_dartlang/jobs.dart",, S, {
    "^": "",
    Job: {
      "^": "Object;name>",
      get$schedulingRule: function() {
        return this._schedulingRule;
      },
      get$quiet: function() {
        return false;
      },
      get$infoAction: function() {
        return;
      },
      cancel$0: function(_) {
        return this.dispose$0();
      },
      dispose$0: [function() {
      }, "call$0", "get$dispose", 0, 0, 2],
      toString$0: function(_) {
        return this.name;
      },
      $isDisposable: 1
    },
    Status: {
      "^": "Object;index>",
      toString$0: function(_) {
        return C.Map_O9WfA.$index(0, this.index);
      }
    },
    JobStatus: {
      "^": "Object;status,result>",
      get$isOk: function() {
        return this.status === C.Status_0;
      },
      get$isError: function() {
        return this.status === C.Status_1;
      },
      toString$0: function(_) {
        var t1, t2;
        t1 = this.result;
        t2 = this.status.index;
        return t1 == null ? C.Map_O9WfA.$index(0, t2) : C.Map_O9WfA.$index(0, t2) + ": " + H.S(t1);
      }
    },
    JobManager: {
      "^": "Object;_activeJobController,_queueController,_jobs,_toasts,_lastNotifiedJob",
      get$activeJob: function() {
        var instance = C.JSArray_methods.firstWhere$2$orElse(this._jobs, new S.JobManager_activeJob_closure(), new S.JobManager_activeJob_closure0());
        return instance == null ? null : instance.get$job();
      },
      get$runningJobs: function() {
        var t1, t2;
        t1 = this._jobs;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        return P.List_List$from(new H.WhereIterable(t1, new S.JobManager_runningJobs_closure(), [t2]), true, t2);
      },
      get$allJobs: function() {
        var t1 = this._jobs;
        return H.setRuntimeTypeInfo(t1.slice(), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onQueueChanged: function() {
        var t1 = this._queueController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      schedule$1: function(job) {
        var t1, t2;
        $.$get$_logger1().fine$1("scheduling job " + H.S(job.name));
        t1 = new P._Future(0, $.Zone__current, null, [null]);
        H.Primitives_initTicker();
        $.Stopwatch__frequency = $.Primitives_timerFrequency;
        this._jobs.push(new S.JobInstance(this, job, new P._AsyncCompleter(t1, [null]), new P.Stopwatch(null, null), false));
        this._checkForRunnableJobs$0();
        this._checkNotifyJobChanged$0();
        t2 = this._queueController;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(null);
        return t1;
      },
      dispose$0: [function() {
        var list, t1, _i;
        list = P.List_List$from(this.get$runningJobs(), true, null);
        for (t1 = list.length, _i = 0; _i < list.length; list.length === t1 || (0, H.throwConcurrentModificationError)(list), ++_i)
          list[_i].get$job();
      }, "call$0", "get$dispose", 0, 0, 2],
      _checkForRunnableJobs$0: function() {
        var rules, jobsCopy, t1, _i, jobInstance, rule;
        rules = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        jobsCopy = P.List_List$from(this._jobs, true, null);
        for (t1 = jobsCopy.length, _i = 0; _i < jobsCopy.length; jobsCopy.length === t1 || (0, H.throwConcurrentModificationError)(jobsCopy), ++_i) {
          jobInstance = jobsCopy[_i];
          if (jobInstance.get$isRunning())
            rules.add$1(0, jobInstance.get$job().get$schedulingRule());
          else {
            rule = jobInstance.get$job().get$schedulingRule();
            if (rule == null || !rules.contains$1(0, rule)) {
              rules.add$1(0, rule);
              this._exec$1(jobInstance);
            }
          }
        }
      },
      _exec$1: function(jobInstance) {
        var job, current, t1;
        job = jobInstance.get$job();
        $.$get$_logger1().fine$1("starting job " + H.S(job.name));
        jobInstance.set$running(true);
        current = this.get$activeJob();
        t1 = this._lastNotifiedJob;
        if (t1 == null ? current != null : t1 !== current) {
          t1 = this._activeJobController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(current);
          this._lastNotifiedJob = current;
        }
        P.Future_Future$sync(job.get$run(), null).then$1(new S.JobManager__exec_closure(this, jobInstance, job)).whenComplete$1(new S.JobManager__exec_closure0(this, jobInstance)).catchError$1(new S.JobManager__exec_closure1(this, jobInstance, job));
      },
      _checkNotifyJobChanged$0: function() {
        var current, t1;
        current = this.get$activeJob();
        t1 = this._lastNotifiedJob;
        if (t1 == null ? current != null : t1 !== current) {
          t1 = this._activeJobController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(current);
          this._lastNotifiedJob = current;
        }
      },
      $isDisposable: 1
    },
    JobManager_activeJob_closure: {
      "^": "Closure:0;",
      call$1: function(j) {
        return j.get$isRunning();
      }
    },
    JobManager_activeJob_closure0: {
      "^": "Closure:1;",
      call$0: function() {
        return;
      }
    },
    JobManager_runningJobs_closure: {
      "^": "Closure:0;",
      call$1: function(j) {
        return j.get$isRunning();
      }
    },
    JobManager__exec_closure: {
      "^": "Closure:0;$this,jobInstance,job",
      call$1: [function(result) {
        var detail, t1, t2;
        if (!this.job.get$quiet()) {
          detail = result == null ? null : H.S(result);
          t1 = this.$this._toasts;
          t2 = H.S(J.get$name$x(this.jobInstance)) + " completed.";
          if (detail != null)
            detail.length !== 0;
          t1.invoke$3("addSuccess", t2, t1._options$5$buttons$description$detail$dismissable$icon(null, null, detail, false, null));
        }
        this.jobInstance.get$_completer().complete$1(0, new S.JobStatus(C.Status_0, result));
      }, null, null, 2, 0, null, 3, "call"]
    },
    JobManager__exec_closure0: {
      "^": "Closure:1;$this,jobInstance",
      call$0: [function() {
        var t1, t2;
        t1 = this.$this;
        t2 = this.jobInstance;
        t2.set$running(false);
        $.$get$_logger1().fine$1("finished job " + H.S(J.get$name$x(t2)) + " (" + H.S(J.$tdiv$n(J.$mul$ns(t2.get$stopwatch().get$elapsedTicks(), 1000), $.Stopwatch__frequency)) + "ms)");
        C.JSArray_methods.remove$1(t1._jobs, t2);
        t1._checkForRunnableJobs$0();
        t1._checkNotifyJobChanged$0();
        t1 = t1._queueController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    JobManager__exec_closure1: {
      "^": "Closure:0;$this,jobInstance,job",
      call$1: [function(e) {
        var t1;
        this.jobInstance.get$_completer().complete$1(0, new S.JobStatus(C.Status_1, e));
        t1 = this.$this._toasts;
        t1.invoke$3("addError", H.S(this.job.name) + " failed.", t1._options$5$buttons$description$detail$dismissable$icon(null, H.S(e), null, true, null));
      }, null, null, 2, 0, null, 0, "call"]
    },
    JobInstance: {
      "^": "Object;jobs,job<,_completer<,stopwatch<,_running",
      get$name: function(_) {
        return this.job.name;
      },
      get$isRunning: function() {
        return this._running;
      },
      set$running: function(value) {
        var t1 = this.stopwatch;
        if (value) {
          t1.reset$0(0);
          t1.start$0(0);
        } else
          t1.stop$0(0);
        this._running = value;
      },
      get$whenComplete: function() {
        return this._completer.future;
      },
      whenComplete$1: function(arg0) {
        return this.get$whenComplete().call$1(arg0);
      }
    }
  }], ["atom.console", "package:atom_dartlang/launch/console.dart",, Y, {
    "^": "",
    ConsoleController: {
      "^": "Object;statusElement,disposables,_console$_subs,_allViews,_errorsView",
      _console$_launchAdded$1: [function(launch) {
        var group, t1, t2, view;
        group = Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).getGroup$1("bottom");
        t1 = group.views;
        if (t1._items.length === 1 && group.getViewById$1("errors") != null) {
          t2 = group.getViewById$1("errors");
          this._errorsView = t2;
          if (t2 != null)
            t1.remove$1(0, t2);
        }
        view = Y.ConsoleView$(this, launch);
        this._allViews.push(view);
        Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).addView$2("bottom", view);
      }, "call$1", "get$_console$_launchAdded", 2, 0, 17, 75],
      _console$_launchRemoved$1: [function(launch) {
        if (this._errorsView != null && Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).get$launches().length === 0) {
          if (!Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).hasViewId$1("errors"))
            Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).addView$2("bottom", this._errorsView);
          this._errorsView = null;
        }
      }, "call$1", "get$_console$_launchRemoved", 2, 0, 17, 75],
      _toggleViews$0: [function() {
        var t1, anyActive, t2, viewShown, _i, view;
        t1 = this._allViews;
        if (t1.length === 0)
          return;
        anyActive = C.JSArray_methods.any$1(t1, new Y.ConsoleController__toggleViews_closure());
        for (t2 = t1.length, viewShown = false, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          view = t1[_i];
          $.Zone__current.toString;
          if (!$.Dependencies__global.getDependency$1(C.Type_ViewGroupManager_GZ8).hasViewId$1(view.get$id(view))) {
            $.Zone__current.toString;
            $.Dependencies__global.getDependency$1(C.Type_ViewGroupManager_GZ8).addView$2("bottom", view);
            viewShown = true;
          }
        }
        if (!anyActive)
          J.activate$1$x(Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8), C.JSArray_methods.get$first(t1));
        else if (!viewShown) {
          t1 = H.setRuntimeTypeInfo(t1.slice(), [H.getTypeArgumentByIndex(t1, 0)]);
          t2 = t1.length;
          _i = 0;
          for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            view = t1[_i];
            $.Zone__current.toString;
            $.Dependencies__global.getDependency$1(C.Type_ViewGroupManager_GZ8).removeViewId$1(J.get$id$x(view));
          }
        }
      }, "call$0", "get$_toggleViews", 0, 0, 2],
      _handleDoubleEscape$0: [function() {
        var t1, t2, _i, launch;
        t1 = Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).get$launches();
        t1 = H.setRuntimeTypeInfo(t1.slice(), [H.getTypeArgumentByIndex(t1, 0)]);
        t2 = t1.length;
        _i = 0;
        for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          launch = t1[_i];
          if (launch.get$isTerminated()) {
            $.Zone__current.toString;
            $.Dependencies__global.getDependency$1(C.Type_LaunchManager_mXK).removeLaunch$1(launch);
          }
        }
      }, "call$0", "get$_handleDoubleEscape", 0, 0, 2],
      dispose$0: [function() {
        this.statusElement.dispose$0();
        this.disposables.dispose$0();
        this._console$_subs.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      ConsoleController$0: function() {
        var t1, t2, t3;
        t1 = [];
        t2 = new Y.ConsoleStatusElement(this, false, new L.StreamSubscriptions(true, t1), null, null, null);
        t3 = t2.get$_handleLaunchesChanged();
        t1.push(Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).get$onLaunchAdded().listen$1(t3));
        t1.push(Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).get$onLaunchTerminated().listen$1(t3));
        t1.push(Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).get$onLaunchRemoved().listen$1(t3));
        this.statusElement = t2;
        t2 = $.$get$atom();
        t3 = this.disposables._disposables;
        t3.push(t2._commands.add$3(0, "atom-workspace", "dartlang:toggle-console", new Y.ConsoleController_closure(this)));
        t1 = new T.DoubleCancelCommand(this.get$_handleDoubleEscape(), null, null);
        t1._views$_command = t2._commands.add$3(0, "atom-workspace", "core:cancel", t1.get$_handleCancel());
        t3.push(t1);
        t1 = this._console$_subs._subscriptions;
        t1.push(Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).get$onLaunchAdded().listen$1(this.get$_console$_launchAdded()));
        t1.push(Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).get$onLaunchRemoved().listen$1(this.get$_console$_launchRemoved()));
      },
      $isDisposable: 1,
      static: {
        ConsoleController$: function() {
          var t1 = new Y.ConsoleController(null, new L.Disposables(true, []), new L.StreamSubscriptions(true, []), [], null);
          t1.ConsoleController$0();
          return t1;
        }
      }
    },
    ConsoleController_closure: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        this.$this._toggleViews$0();
      }
    },
    ConsoleController__toggleViews_closure: {
      "^": "Closure:0;",
      call$1: function(view) {
        return Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).isActiveId$1(J.get$id$x(view));
      }
    },
    ConsoleView: {
      "^": "View;controller,launch<,_launchId,_console$_subs,output,_lastText,_terminateButton,_reloadButton,_observatoryButton,_console$_text,_console$_timer,root,toolbar,content,tabElement,_closeButton,group",
      get$label: function(_) {
        var t1, t2;
        t1 = this.launch;
        t2 = t1.get$launchConfiguration();
        t2 = t2 == null ? t2 : t2.get$shortResourceName();
        return t2 == null ? J.get$name$x(t1) : t2;
      },
      get$id: function(_) {
        return "console." + H.S(this._launchId);
      },
      _console$_launchActivated$1: [function(l) {
        if (J.$eq$(this.launch, l))
          if (Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).hasViewId$1("console." + H.S(this._launchId)))
            J.activate$1$x(Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8), this);
          else
            Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).addView$2("bottom", this);
      }, "call$1", "get$_console$_launchActivated", 2, 0, 17, 32],
      _watchServicePort$1: [function(port) {
        var t1, t2;
        if (!this.launch.get$isRunning())
          return;
        t1 = this._observatoryButton;
        t2 = t1 == null;
        if (!t2 && port == null) {
          t1.dispose$0();
          this._observatoryButton = null;
        } else if (t2 && port != null) {
          t1 = this.toolbar.add$1(0, K.CoreElement$("button", null, "btn icon icon-dashboard", "Observatory"));
          this._observatoryButton = t1;
          t1.set$tooltip("Open the Observatory");
          J.click$1$x(this._observatoryButton, new Y.ConsoleView__watchServicePort_closure(this));
        }
      }, "call$1", "get$_watchServicePort", 2, 0, 186, 151],
      _console$_launchTerminated$1: [function(l) {
        var t1 = this.launch;
        if (J.$eq$(t1, l)) {
          J.toggle$2$x(J.get$classes$x(this.tabElement.element), "launch-terminated", null);
          if (!J.endsWith$1$s(this._lastText, "\n"))
            this._emitText$1("\n");
          this._emitText$1("process finished \u2022 exit code " + H.S(t1.get$exitCode()._utils$_value));
          t1 = this._terminateButton;
          if (!(t1 == null))
            J.set$disabled$x(t1, true);
          t1 = this._reloadButton;
          if (!(t1 == null))
            J.set$disabled$x(t1, true);
          t1 = this._observatoryButton;
          if (!(t1 == null))
            J.set$disabled$x(t1, true);
        }
      }, "call$1", "get$_console$_launchTerminated", 2, 0, 17, 32],
      _console$_launchRemoved$1: [function(l) {
        if (J.$eq$(this.launch, l)) {
          Q.Dependencies_instance().getDependency$1(C.Type_ViewGroupManager_GZ8).removeViewId$1("console." + H.S(this._launchId));
          C.JSArray_methods.remove$1(this.controller._allViews, this);
          this._console$_subs.cancel$0(0);
        }
      }, "call$1", "get$_console$_launchRemoved", 2, 0, 17, 32],
      handleClose$0: [function() {
        this.super$View$handleClose();
        var t1 = this.launch;
        if (t1.get$isTerminated())
          Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).removeLaunch$1(t1);
      }, "call$0", "get$handleClose", 0, 0, 2],
      dispose$0: [function() {
      }, "call$0", "get$dispose", 0, 0, 2],
      _emitText$4$error$highlight$subtle: function(str, error, highlight, subtle) {
        this._lastText = str;
        this._console$_text = C.JSString_methods.$add(this._console$_text, str);
        if (this._console$_timer == null)
          this._console$_timer = P.Timer_Timer(P.Duration$(0, 0, 0, 250, 0, 0), new Y.ConsoleView__emitText_closure(this));
      },
      _emitText$1: function(str) {
        return this._emitText$4$error$highlight$subtle(str, false, false, false);
      },
      ConsoleView$2: function(controller, launch) {
        var t1, t2, t3, t4, t5, t6, e, header;
        t1 = $.ConsoleView__idCount;
        $.ConsoleView__idCount = t1 + 1;
        this._launchId = t1;
        t1 = this.root;
        t2 = t1.element;
        t3 = J.getInterceptor$x(t2);
        J.toggle$2$x(t3.get$classes(t2), "console-view", null);
        t4 = this.toolbar;
        t5 = t4.element;
        t6 = J.getInterceptor$x(t5);
        J.toggle$2$x(t6.get$classes(t5), "btn-group", null);
        J.toggle$2$x(t6.get$classes(t5), "btn-group-sm", null);
        t5 = this.content;
        J.toggle$2$x(J.get$classes$x(t5.element), "tab-scrollable-container", null);
        this.output = t5.add$1(0, K.CoreElement$("pre", null, "console-line tab-scrollable", null));
        t5 = this._console$_subs._subscriptions;
        t5.push(Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).get$onLaunchActivated().listen$1(this.get$_console$_launchActivated()));
        t5.push(Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).get$onLaunchTerminated().listen$1(this.get$_console$_launchTerminated()));
        t5.push(Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).get$onLaunchRemoved().listen$1(this.get$_console$_launchRemoved()));
        t3.get$onKeyDown(t2).listen$1(t1.get$_handleCopyKeyPress());
        J.set$tabIndex$x(this.output.get$element(), -1);
        t1 = this.launch;
        t5.push(t1.get$onStdio().listen$1(new Y.ConsoleView_closure(this)));
        if (t1.canKill$0()) {
          t2 = t4.add$1(0, K.CoreElement$("button", null, "btn icon icon-primitive-square", "Stop"));
          this._terminateButton = t2;
          t2.set$tooltip("Terminate process");
          J.click$1$x(this._terminateButton, new Y.ConsoleView_closure0(this));
        }
        if (t1.get$supportsRestart() === true) {
          t2 = t4.add$1(0, K.CoreElement$("button", null, "btn icon icon-sync", "Reload"));
          this._reloadButton = t2;
          t2.set$tooltip("Reload application");
          J.click$2$x(this._reloadButton, new Y.ConsoleView_closure1(this), new Y.ConsoleView_closure2(this));
        }
        if (t1.get$launchConfiguration() != null) {
          e = t4.add$1(0, K.CoreElement$("button", null, "btn icon icon-gear", "Configure"));
          e.set$tooltip("Configure this application launch");
          J.click$1$x(e, new Y.ConsoleView_closure3(this));
        }
        t2 = t1.get$servicePort();
        t3 = this.get$_watchServicePort();
        t3.call$1(t2._utils$_value);
        t2 = t2._utils$_controller;
        new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(t3);
        t2 = J.getInterceptor$x(t1);
        header = t2.get$title(t1) != null ? t2.get$title(t1) : t2.get$name(t1);
        this._emitText$1(J.$add$ns(header, " \u2022 " + H.S(t1.get$subtitle()) + "\n"));
      },
      static: {
        ConsoleView$: function(controller, launch) {
          var t1 = new Y.ConsoleView(controller, launch, null, new L.StreamSubscriptions(true, []), null, "", null, null, null, "", null, K.CoreElement$("div", null, "tab-content", null), K.CoreElement$("div", null, null, null), K.CoreElement$("div", null, null, null), null, null, null);
          t1.View$0();
          t1.ConsoleView$2(controller, launch);
          return t1;
        }
      }
    },
    ConsoleView_closure: {
      "^": "Closure:187;$this",
      call$1: [function(text) {
        var t1, t2, t3, t4;
        t1 = J.getInterceptor$x(text);
        t2 = t1.get$text(text);
        t3 = t1.get$error(text);
        t4 = t1.get$subtle(text);
        this.$this._emitText$4$error$highlight$subtle(t2, t3, t1.get$highlight(text), t4);
      }, null, null, 2, 0, null, 152, "call"]
    },
    ConsoleView_closure0: {
      "^": "Closure:1;$this",
      call$0: function() {
        return this.$this.launch.kill$0();
      }
    },
    ConsoleView_closure1: {
      "^": "Closure:1;$this",
      call$0: function() {
        $.$get$atom()._workspace.saveAll$0();
        this.$this.launch.restart$0();
      }
    },
    ConsoleView_closure2: {
      "^": "Closure:1;$this",
      call$0: function() {
        $.$get$atom()._workspace.saveAll$0();
        this.$this.launch.restart$1$fullRestart(true);
      }
    },
    ConsoleView_closure3: {
      "^": "Closure:1;$this",
      call$0: function() {
        $.$get$atom()._workspace.openPending$1(this.$this.launch.get$launchConfiguration().get$configYamlPath());
      }
    },
    ConsoleView__watchServicePort_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        $.$get$shell().invoke$2("openExternal", "http://localhost:" + H.S(this.$this.launch.get$servicePort()._utils$_value) + "/");
      }
    },
    ConsoleView__emitText_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        var t1, lines, t2, newText, span;
        t1 = this.$this;
        t1._console$_timer = null;
        lines = t1._console$_text.split("\n");
        t2 = lines.length;
        if (t2 > 300)
          C.JSArray_methods.removeRange$2(lines, 0, t2 - 300);
        newText = C.JSArray_methods.join$1(lines, "\n");
        if (C.JSString_methods.endsWith$1(t1._console$_text, "\n"))
          newText += "\n";
        t1._console$_text = newText;
        if (J.get$isEmpty$asx(J.get$children$x(t1.output.get$element()))) {
          span = W._ElementFactoryProvider_createElement_tag("span", null);
          t2 = J.getInterceptor$x(span);
          t2.set$text(span, newText);
          J.add$1$ax(J.get$children$x(t1.output.get$element()), span);
          t2.scrollIntoView$1(span, C.ScrollAlignment_BOTTOM);
        } else {
          span = J.elementAt$1$ax(J.get$children$x(t1.output.get$element()), 0);
          t1 = J.getInterceptor$x(span);
          t1.set$text(span, newText);
          t1.scrollIntoView$1(span, C.ScrollAlignment_BOTTOM);
        }
      }
    },
    ConsoleStatusElement: {
      "^": "Object;parent>,_showing,subs,statusTile,_console$_element,_badgeSpan",
      dispose$0: [function() {
        var t1 = this.statusTile;
        if (t1 != null)
          t1.invoke$1("destroy");
        this.subs.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleLaunchesChanged$1: [function(_) {
        var count, t1, t2;
        if (this._console$_element == null)
          return;
        count = Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).get$launches().length;
        if (count > 0) {
          if (!this._showing) {
            J.set$display$x(J.get$style$x(this._console$_element.element), "inline-block");
            this._showing = true;
          }
          t1 = this._badgeSpan;
          t2 = "" + count + " " + M.pluralize("process", count);
          J.set$text$x(t1.element, t2);
        } else {
          J.set$display$x(J.get$style$x(this._console$_element.element), "none");
          this._showing = false;
          J.set$text$x(this._badgeSpan.element, "no processes");
        }
      }, function() {
        return this._handleLaunchesChanged$1(null);
      }, "_handleLaunchesChanged$0", "call$1", "call$0", "get$_handleLaunchesChanged", 0, 2, 188, 2, 1],
      $isDisposable: 1
    }
  }], ["atom.launch", "package:atom_dartlang/launch/launch.dart",, X, {
    "^": "",
    LaunchManager: {
      "^": "Object;_launchAdded,_launchActivated,_launchTerminated<,_launchRemoved,launchTypes,_activeLaunch,_launches",
      get$activeLaunch: function() {
        return this._activeLaunch;
      },
      get$launches: function() {
        return this._launches;
      },
      addLaunch$1: function(launch) {
        var t1, removed, activated;
        t1 = this._launches;
        t1.push(launch);
        removed = [];
        C.JSArray_methods.checkGrowable$1(t1, "removeWhere");
        C.JSArray_methods._removeWhere$2(t1, new X.LaunchManager_addLaunch_closure(this, removed), true);
        if (this._activeLaunch == null) {
          this._activeLaunch = launch;
          activated = true;
        } else
          activated = false;
        C.JSArray_methods.forEach$1(removed, new X.LaunchManager_addLaunch_closure0(this));
        t1 = this._launchAdded;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(launch);
        if (activated) {
          t1 = this._launchActivated;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(launch);
        }
      },
      removeLaunch$1: function(launch) {
        var t1, activeChanged, t2;
        t1 = this._launches;
        if (!C.JSArray_methods.contains$1(t1, launch))
          return;
        C.JSArray_methods.remove$1(t1, launch);
        if (J.$eq$(launch, this._activeLaunch)) {
          this._activeLaunch = null;
          if (t1.length !== 0)
            this._activeLaunch = C.JSArray_methods.get$first(t1);
          activeChanged = true;
        } else
          activeChanged = false;
        t1 = this._launchRemoved;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(launch);
        if (activeChanged) {
          t1 = this._launchActivated;
          t2 = this._activeLaunch;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(t2);
        }
      },
      get$onLaunchAdded: function() {
        var t1 = this._launchAdded;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onLaunchActivated: function() {
        var t1 = this._launchActivated;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onLaunchTerminated: function() {
        var t1 = this._launchTerminated;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onLaunchRemoved: function() {
        var t1 = this._launchRemoved;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      registerLaunchType$1: function(type) {
        var t1 = this.launchTypes;
        C.JSArray_methods.remove$1(t1, type);
        t1.push(type);
      },
      getHandlerFor$2: function(path, data) {
        var t1, t2, _i, type;
        if (path == null)
          return;
        for (t1 = this.launchTypes, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          type = t1[_i];
          if (type.canLaunch$2(path, data) === true)
            return type;
        }
        return;
      },
      getLaunchType$1: function(typeCode) {
        var t1, t2, _i, t3, type;
        for (t1 = this.launchTypes, t2 = t1.length, _i = 0; t3 = t1.length, _i < t3; t3 === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          type = t1[_i];
          if (type.type === typeCode)
            return type;
        }
        return;
      },
      getAllLaunchables$2: function(path, data) {
        var results, t1, t2, _i, type, project, relPath;
        results = [];
        for (t1 = this.launchTypes, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          type = t1[_i];
          if (type.canLaunch$2(path, data) === true) {
            $.Zone__current.toString;
            project = $.Dependencies__global.getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
            if (project == null)
              continue;
            relPath = project.getRelative$1(path);
            results.push(new X.Launchable(type, J.get$path$x(project), relPath));
          }
        }
        return results;
      },
      dispose$0: [function() {
        var t1, t2, _i;
        t1 = this._launches;
        t1 = H.setRuntimeTypeInfo(t1.slice(), [H.getTypeArgumentByIndex(t1, 0)]);
        t2 = t1.length;
        _i = 0;
        for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    LaunchManager_addLaunch_closure: {
      "^": "Closure:189;$this,removed",
      call$1: function(l) {
        var t1, t2;
        if (l.get$isTerminated()) {
          t1 = this.$this;
          t2 = t1._activeLaunch;
          if (t2 == null ? l == null : t2 === l)
            t1._activeLaunch = null;
          this.removed.push(l);
        }
        return l.get$isTerminated();
      }
    },
    LaunchManager_addLaunch_closure0: {
      "^": "Closure:0;$this",
      call$1: function(l) {
        var t1 = this.$this._launchRemoved;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(l);
        return;
      }
    },
    LaunchType: {
      "^": "Object;type>",
      get$supportsChecked: function() {
        return true;
      },
      get$supportsDebugArg: function() {
        return true;
      },
      $eq: function(_, obj) {
        if (obj == null)
          return false;
        return obj instanceof X.LaunchType && obj.type === this.type;
      },
      get$hashCode: function(_) {
        return C.JSString_methods.get$hashCode(this.type);
      },
      toString$0: function(_) {
        return this.type;
      }
    },
    LaunchData: {
      "^": "Object;fileContents,_hasMain",
      get$hasMain: function() {
        var t1 = this._hasMain;
        if (t1 == null) {
          t1 = this.fileContents;
          if (t1 != null) {
            t1 = J.contains$1$asx(t1, $.$get$LaunchData__mainRegex());
            this._hasMain = t1;
          } else {
            this._hasMain = false;
            t1 = false;
          }
        }
        return t1;
      }
    },
    Launchable: {
      "^": "Object;type>,projectPath<,relativePath>",
      get$path: function(_) {
        return $.$get$fs().join$2(0, this.projectPath, this.relativePath);
      },
      getDisplayName$0: function() {
        return H.S(this.relativePath) + " (" + H.S(this.type) + ")";
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof X.Launchable && J.$eq$(this.type, other.type) && J.$eq$(this.relativePath, other.relativePath);
      },
      get$hashCode: function(_) {
        return J.$xor$n(J.get$hashCode$(this.type), J.$shl$n(J.get$hashCode$(this.relativePath), 37));
      },
      toString$0: function(_) {
        return H.S(this.relativePath) + " (" + H.S(this.type) + ")";
      }
    },
    Launch: {
      "^": "Object;launchType,launchConfiguration<,name>,title>,targetName<,manager,id>,killHandler,cwd<,exitCode<,servicePort<,_stdio,_debugConnection,_pathResolver",
      get$isRunning: function() {
        return this.exitCode._utils$_value == null;
      },
      get$isTerminated: function() {
        return this.exitCode._utils$_value != null;
      },
      get$isActive: function() {
        return this.manager.get$activeLaunch() === this;
      },
      get$onStdio: function() {
        var t1 = this._stdio;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$primaryResource: function() {
        return this.launchConfiguration.get$primaryResource();
      },
      get$locationLabel: function() {
        var t1, $home, t2;
        t1 = this.cwd;
        if (t1 == null)
          return;
        $home = $.$get$fs()._os.callMethod$1("homedir");
        t2 = J.getInterceptor$s(t1);
        if (t2.startsWith$1(t1, $home))
          return "~" + t2.substring$1(t1, J.get$length$asx($home));
        else
          return t1;
      },
      get$subtitle: function() {
        var desc, t1, t2;
        desc = [];
        if (this.get$locationLabel() != null)
          desc.push(this.get$locationLabel());
        t1 = this.launchConfiguration;
        if (t1 != null) {
          t2 = this.launchType;
          if (t2 != null)
            if (t2.get$supportsChecked() && J.get$checked$x(t1) === true)
              desc.push("checked mode");
          if (t2.get$supportsDebugArg())
            if (t1.get$debug() === true)
              desc.push("debug");
        }
        return desc.length === 0 ? null : C.JSArray_methods.join$1(desc, " \u2022 ");
      },
      canKill$0: function() {
        return this.killHandler != null;
      },
      kill$0: function() {
        var t1, f;
        t1 = this.killHandler;
        if (t1 != null) {
          f = t1.call$0();
          if (!!J.getInterceptor(f).$isFuture)
            t1 = f;
          else {
            t1 = new P._Future(0, $.Zone__current, null, [null]);
            t1._asyncComplete$1(null);
          }
          return t1;
        } else {
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
      },
      get$supportsRestart: function() {
        return false;
      },
      restart$1$fullRestart: function(fullRestart) {
        return P.Future_Future$error("unsupported", null, null);
      },
      restart$0: function() {
        return this.restart$1$fullRestart(false);
      },
      launchTerminated$2$quiet: function(code, quiet) {
        var t1, t2;
        t1 = this.exitCode;
        if (t1._utils$_value != null)
          return;
        t1.set$value(0, code);
        if (this._debugConnection != null)
          Q.Dependencies_instance().getDependency$1(C.Type_DebugManager_QDz).removeConnection$1(this._debugConnection);
        if (!quiet) {
          t2 = t1._utils$_value;
          if (t2 != null && !J.$eq$(t2, 0)) {
            t2 = $.$get$atom()._notifications;
            t2.invoke$3("addError", H.S(this) + " exited with error code " + H.S(t1._utils$_value) + ".", t2._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          } else {
            t1 = $.$get$atom()._notifications;
            t1.invoke$3("addSuccess", H.S(this) + " finished.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          }
        }
        t1 = this.manager.get$_launchTerminated();
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(this);
      },
      launchTerminated$1: function(code) {
        return this.launchTerminated$2$quiet(code, false);
      },
      dispose$0: [function() {
        if (this.canKill$0() && this.exitCode._utils$_value != null)
          this.kill$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      toString$0: function(_) {
        var t1, t2;
        t1 = this.launchType;
        t2 = this.name;
        return t1 != null ? J.toString$0$(t1) + ": " + H.S(t2) : t2;
      },
      $isDisposable: 1
    },
    TextFragment: {
      "^": "Object;text>,error>,subtle>,highlight>",
      toString$0: function(_) {
        return this.text;
      }
    },
    CachingServerResolver: {
      "^": "Object;_pathResolver,_serverResolver,_cache",
      dispose$0: [function() {
        this._pathResolver == null;
        var t1 = this._serverResolver;
        if (!(t1 == null))
          t1.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      CachingServerResolver$2$cwd$server: function(cwd, server) {
        if (cwd != null) {
          this._pathResolver = new X._PathResolver(cwd);
          if (server.get$isActive())
            this._serverResolver = X._ServerResolver$(cwd, server);
        }
      },
      $isDisposable: 1,
      static: {
        CachingServerResolver$: function(cwd, server) {
          var t1 = new X.CachingServerResolver(null, null, P.LinkedHashMap__makeEmpty());
          t1.CachingServerResolver$2$cwd$server(cwd, server);
          return t1;
        }
      }
    },
    _PathResolver: {
      "^": "Object;cwd<",
      dispose$0: [function() {
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    _ServerResolver: {
      "^": "Object;path>,server<,_contextCompleter",
      dispose$0: [function() {
        this._contextCompleter.future.then$1(new X._ServerResolver_dispose_closure());
      }, "call$0", "get$dispose", 0, 0, 2],
      _ServerResolver$2: function(path, server) {
        Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server().get$execution().createContext$1(this.path).then$1(new X._ServerResolver_closure(this)).catchError$1(new X._ServerResolver_closure0(this));
      },
      $isDisposable: 1,
      static: {
        _ServerResolver$: function(path, server) {
          var t1 = new X._ServerResolver(path, server, new P._AsyncCompleter(new P._Future(0, $.Zone__current, null, [null]), [null]));
          t1._ServerResolver$2(path, server);
          return t1;
        }
      }
    },
    _ServerResolver_closure: {
      "^": "Closure:190;$this",
      call$1: [function(result) {
        return this.$this._contextCompleter.complete$1(0, J.get$id$x(result));
      }, null, null, 2, 0, null, 3, "call"]
    },
    _ServerResolver_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        return this.$this._contextCompleter.complete$1(0, null);
      }, null, null, 2, 0, null, 1, "call"]
    },
    _ServerResolver_dispose_closure: {
      "^": "Closure:3;",
      call$1: [function(id) {
        var t1, t2;
        if (id != null) {
          t1 = Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$server().get$execution();
          t1.toString;
          t2 = P.LinkedHashMap__makeLiteral(["id", id]);
          t1.server._call$2(0, "execution.deleteContext", t2).catchError$1(new X._ServerResolver_dispose__closure());
        }
      }, null, null, 2, 0, null, 153, "call"]
    },
    _ServerResolver_dispose__closure: {
      "^": "Closure:0;",
      call$1: [function(_) {
        return;
      }, null, null, 2, 0, null, 1, "call"]
    }
  }], ["atom.launch_cli", "package:atom_dartlang/launch/launch_cli.dart",, Z, {
    "^": "",
    CliLaunchType: {
      "^": "LaunchType;type",
      canLaunch$2: function(path, data) {
        var project, t1, t2, t3;
        if (!J.endsWith$1$s(path, ".dart"))
          return false;
        project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
        if (project == null)
          return data.get$hasMain();
        else {
          t1 = $.$get$fs();
          t2 = J.getInterceptor$x(project);
          if (J.startsWith$1$s(t1.relativize$2(t2.get$path(project), path), "lib" + t1.separator))
            return false;
          t3 = $.$get$dartino();
          t2 = J.get$path$x(t2.get$directory(project));
          t3.toString;
          if (t1.invoke$2("existsSync", t1.join$2(0, t2, "dartino.yaml")) === true)
            return false;
          return data.get$hasMain();
        }
      },
      performLaunch$2: function(manager, configuration) {
        var t1, sdk, withDebug, path, cwd, args, project, paths, t2, cwd0, _args, observatoryPort, description, runner, launch;
        t1 = {};
        sdk = Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$sdk();
        if (sdk == null)
          P.Future_Future$error("No Dart SDK configured", null, null);
        withDebug = configuration.get$debug();
        path = configuration.get$primaryResource();
        cwd = configuration.get$cwd();
        args = configuration.get$argsAsList();
        project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
        if (cwd == null)
          if (project == null) {
            paths = P.List_List$from($.$get$atom()._project.invoke$2("relativizePath", path), true, null);
            t2 = paths.length;
            if (0 >= t2)
              return H.ioore(paths, 0);
            cwd0 = paths[0];
            if (cwd0 != null) {
              if (1 >= t2)
                return H.ioore(paths, 1);
              path = paths[1];
              cwd = cwd0;
            }
          } else {
            cwd = J.get$path$x(project);
            path = $.$get$fs().relativize$2(cwd, path);
          }
        else
          path = $.$get$fs().relativize$2(cwd, path);
        _args = [];
        t1.observatoryPort = null;
        if (withDebug === true) {
          observatoryPort = 16161 + $.$get$_rand().nextInt$1(100);
          t1.observatoryPort = observatoryPort;
          _args.push("--enable-vm-service:" + observatoryPort);
          _args.push("--pause_isolates_on_start=true");
        }
        if (J.get$checked$x(configuration) === true)
          _args.push("--checked");
        _args.push(path);
        C.JSArray_methods.addAll$1(_args, args);
        description = args.length === 0 ? path : H.S(path) + " " + C.JSArray_methods.join$1(args, " ");
        runner = X.ProcessRunner_ProcessRunner$underShell(J.$index$asx(sdk.get$dartVm().obj, "path"), _args, cwd, null);
        launch = Z._CliLaunch$(manager, this, configuration, path, cwd, new Z.CliLaunchType_performLaunch_closure(runner), project, description);
        manager.addLaunch$1(launch);
        runner.execStreaming$0();
        t2 = runner._stdoutController;
        new P._ControllerStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(new Z.CliLaunchType_performLaunch_closure0(t1, launch));
        t1 = runner._stderrController;
        new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new Z.CliLaunchType_performLaunch_closure1(launch));
        runner._exitCompleter.future.then$1(new Z.CliLaunchType_performLaunch_closure2(launch));
        t1 = new P._Future(0, $.Zone__current, null, [null]);
        t1._asyncComplete$1(launch);
        return t1;
      },
      getDefaultConfigText$0: function() {
        return "# Additional args for the application.\nargs:\n# The working directory to use for the launch.\ncwd:\n# Enable or disable checked mode.\nchecked: true\n# Enable or disable debugging.\ndebug: true\n";
      }
    },
    CliLaunchType_performLaunch_closure: {
      "^": "Closure:1;runner",
      call$0: [function() {
        return this.runner.kill$0();
      }, null, null, 0, 0, null, "call"]
    },
    CliLaunchType_performLaunch_closure0: {
      "^": "Closure:0;_box_0,launch",
      call$1: [function(str) {
        var t1, t2;
        t1 = J.getInterceptor$s(str);
        t2 = this.launch;
        if (t1.startsWith$1(str, "Observatory listening on ")) {
          C.JSString_methods.trim$0(t1.substring$1(str, 25));
          t1 = this._box_0;
          t2.servicePort.set$value(0, t1.observatoryPort);
          D.ObservatoryDebugger_connect(t2, "localhost", t1.observatoryPort, false, null).catchError$1(new Z.CliLaunchType_performLaunch__closure(t1, t2));
        } else {
          t1 = t2._stdio;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(new X.TextFragment(str, false, false, false));
        }
      }, null, null, 2, 0, null, 4, "call"]
    },
    CliLaunchType_performLaunch__closure: {
      "^": "Closure:0;_box_0,launch",
      call$1: [function(e) {
        var t1, t2;
        t1 = "Unable to connect to the observatory (port " + H.S(this._box_0.observatoryPort) + ").\n";
        t2 = this.launch._stdio;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(new X.TextFragment(t1, true, false, false));
      }, null, null, 2, 0, null, 0, "call"]
    },
    CliLaunchType_performLaunch_closure1: {
      "^": "Closure:0;launch",
      call$1: [function(str) {
        var t1 = this.launch._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, true, false, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    CliLaunchType_performLaunch_closure2: {
      "^": "Closure:19;launch",
      call$1: [function(code) {
        return this.launch.launchTerminated$1(code);
      }, null, null, 2, 0, null, 14, "call"]
    },
    _CliLaunch: {
      "^": "Launch;_resolver,launchType,launchConfiguration,name,title,targetName,manager,id,killHandler,cwd,exitCode,servicePort,_stdio,_debugConnection,_pathResolver",
      _CliLaunch$8$cwd$killHandler$project$title: function(manager, launchType, launchConfiguration, $name, cwd, killHandler, project, title) {
        var t1 = project == null ? project : J.get$path$x(project);
        this._resolver = X.CachingServerResolver$(t1, Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC));
        t1 = this.exitCode._utils$_controller;
        t1 = new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
        t1.get$first(t1).then$1(new Z._CliLaunch_closure(this));
      },
      static: {
        _CliLaunch$: function(manager, launchType, launchConfiguration, $name, cwd, killHandler, project, title) {
          var t1, t2, t3;
          t1 = $.Launch__id + 1;
          $.Launch__id = t1;
          t2 = [null];
          t3 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t2);
          t3._utils$_value = null;
          t2 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t2);
          t2._utils$_value = null;
          t2 = new Z._CliLaunch(null, launchType, launchConfiguration, $name, title, null, manager, t1, killHandler, cwd, t3, t2, P.StreamController_StreamController$broadcast(null, null, false, null), null, null);
          if (cwd != null)
            t2._pathResolver = new X._PathResolver(cwd);
          t2._CliLaunch$8$cwd$killHandler$project$title(manager, launchType, launchConfiguration, $name, cwd, killHandler, project, title);
          return t2;
        }
      }
    },
    _CliLaunch_closure: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        var t1 = this.$this._resolver;
        t1._pathResolver == null;
        t1 = t1._serverResolver;
        if (!(t1 == null))
          t1.dispose$0();
        return;
      }, null, null, 2, 0, null, 1, "call"]
    }
  }], ["atom.launch_configs", "package:atom_dartlang/launch/launch_configs.dart",, Q, {
    "^": "",
    _createUniqueFilename: function(dir, $name, ext) {
      var names, fullName, i;
      names = P.LinkedHashSet_LinkedHashSet$from(new H.MappedListIterable(dir.getEntriesSync$0(), new Q._createUniqueFilename_closure(), [null, null]), null);
      fullName = H.S($name) + "." + ext;
      if (!names.contains$1(0, fullName))
        return fullName;
      for (i = 2; true;) {
        fullName = H.S($name) + "_" + i + ".{ext}";
        if (!names.contains$1(0, fullName))
          return fullName;
        ++i;
      }
    },
    LaunchConfigurationManager: {
      "^": "Object;_projectConfigs,_launchTimestamps<,_launch_configs$_changeController",
      getConfigsForProject$1: function(path) {
        if (path == null)
          return [];
        return this._getCreateProjectConfig$1(path).getConfigs$0();
      },
      getAllConfigs$0: function() {
        var t1 = this._projectConfigs;
        t1 = t1.get$values(t1);
        return P.List_List$from(new H.ExpandIterable(t1, new Q.LaunchConfigurationManager_getAllConfigs_closure(), [H.getRuntimeTypeArgument(t1, "Iterable", 0), null]), true, null);
      },
      createNewConfig$4: function(projectPath, type, primaryResource, defaultTypeParams) {
        var $content, configs, $name, t1, config;
        $content = "# " + H.S(M.toTitleCase(type)) + " launch configuration for " + H.S(primaryResource) + ".\ntype: " + H.S(type) + "\npath: " + H.S(primaryResource) + "\n\n";
        $content = C.JSString_methods.trim$0($content + (H.S(type) + ":\n  " + H.stringReplaceAllUnchecked(defaultTypeParams, "\n", "\n  "))) + "\n";
        configs = this._getCreateProjectConfig$1(projectPath);
        $name = $.$get$fs().basename$1(primaryResource);
        t1 = J.getInterceptor$asx($name);
        if (t1.contains$1($name, ".") === true)
          $name = t1.substring$2($name, 0, t1.indexOf$1($name, "."));
        config = configs.createConfig$2(Q._createUniqueFilename(configs.launchDir, $name, "yaml"), $content);
        t1 = $.$get$atom()._notifications;
        t1.invoke$3("addInfo", "Created a " + H.S(type) + " launch configuration for `" + H.S(primaryResource) + "`.", t1._options$5$buttons$description$detail$dismissable$icon(null, "Created " + H.S(config._getRelativeConfigPath$0()) + ".", null, null, null));
        t1 = this._launch_configs$_changeController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(null);
        return config;
      },
      get$onChange: function(_) {
        var t1 = this._launch_configs$_changeController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      dispose$0: [function() {
        var t1, t2, configs, _i;
        t1 = this._projectConfigs;
        t2 = t1.get$values(t1);
        configs = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0));
        t1.clear$0(0);
        for (t1 = configs.length, _i = 0; _i < configs.length; configs.length === t1 || (0, H.throwConcurrentModificationError)(configs), ++_i)
          configs[_i].dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _getCreateProjectConfig$1: function(path) {
        var t1, t2;
        t1 = this._projectConfigs;
        if (!t1.containsKey$1(0, path)) {
          t2 = new Q._ProjectConfigurations(path, new F.Directory(F._create("Directory", $.$get$fs().join$3(0, path, ".atom", "launches"), null)), null, null);
          t2._listenToLaunchDir$0();
          t1.$indexSet(0, path, t2);
          t2 = this._launch_configs$_changeController;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(null);
        }
        return t1.$index(0, path);
      },
      _handleProjectAdded$1: [function(project) {
        this._getCreateProjectConfig$1(J.get$path$x(project));
      }, "call$1", "get$_handleProjectAdded", 2, 0, 37, 24],
      _handleProjectRemoved$1: [function(project) {
        var config, t1;
        config = this._projectConfigs.remove$1(0, J.get$path$x(project));
        if (!(config == null))
          config.dispose$0();
        t1 = this._launch_configs$_changeController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(null);
      }, "call$1", "get$_handleProjectRemoved", 2, 0, 37, 24],
      initFromStored$1: function(storedData) {
        if (!!J.getInterceptor(storedData).$isMap)
          this._launchTimestamps = P.LinkedHashMap_LinkedHashMap$from(storedData, null, null);
        else
          this._launchTimestamps = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.$int);
      },
      toStorable$0: function() {
        return this._launchTimestamps;
      },
      $isDisposable: 1
    },
    LaunchConfigurationManager_getAllConfigs_closure: {
      "^": "Closure:191;",
      call$1: function(configs) {
        return configs.getConfigs$0();
      }
    },
    _createUniqueFilename_closure: {
      "^": "Closure:0;",
      call$1: [function(entry) {
        return J.get$path$x(entry);
      }, null, null, 2, 0, null, 46, "call"]
    },
    LaunchConfiguration: {
      "^": "Object;projectPath<,_launch_configs$_file,_launch_configs$_map",
      get$configYamlPath: function() {
        return J.get$path$x(this._launch_configs$_file);
      },
      get$type: function(_) {
        return J.$index$asx(this._launch_configs$_map, "type");
      },
      get$shortResourceName: function() {
        return J.$index$asx(this._launch_configs$_map, "path");
      },
      get$primaryResource: function() {
        return J.$index$asx(this._launch_configs$_map, "path") == null ? null : $.$get$fs().join$2(0, this.projectPath, J.$index$asx(this._launch_configs$_map, "path"));
      },
      get$typeArgs: function() {
        var t1, t2, data;
        t1 = this._launch_configs$_map;
        t2 = J.getInterceptor$asx(t1);
        data = t2.$index(t1, t2.$index(t1, "type"));
        return !!J.getInterceptor(data).$isMap ? P.LinkedHashMap_LinkedHashMap$from(data, null, null) : P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      },
      get$cwd: function() {
        var t1, str, t2;
        t1 = this.get$typeArgs().$index(0, "cwd");
        if (typeof t1 === "string") {
          str = J.trim$0$s(this.get$typeArgs().$index(0, "cwd"));
          t1 = str.length;
          if (t1 === 0)
            return;
          t2 = $.$get$fs();
          if (C.JSString_methods.startsWith$1(str, t2.separator) || C.JSString_methods.startsWith$1(str, "/"))
            return str;
          if ($.$get$isWindows() === true && t1 >= 2 && str[1] === ":")
            return str;
          return t2.join$2(0, this.projectPath, str);
        } else
          return;
      },
      get$debug: function() {
        var t1 = this.get$typeArgs().$index(0, "debug");
        return typeof t1 !== "boolean" || this.get$typeArgs().$index(0, "debug");
      },
      get$checked: function(_) {
        var t1 = this.get$typeArgs().$index(0, "checked");
        return typeof t1 !== "boolean" || this.get$typeArgs().$index(0, "checked");
      },
      get$argsAsList: function() {
        var val = this.get$typeArgs().$index(0, "args");
        if (val == null)
          return H.setRuntimeTypeInfo([], [P.String]);
        if (!!J.getInterceptor(val).$isList)
          return P.List_List$from(val, true, P.String);
        return H.S(val).split(" ");
      },
      getDisplayName$0: function() {
        return H.S(J.$index$asx(this._launch_configs$_map, "path")) + " (" + H.S(J.$index$asx(this._launch_configs$_map, "type")) + ")";
      },
      touch$0: function() {
        var t1 = Date.now();
        Q.Dependencies_instance().getDependency$1(C.Type_LaunchConfigurationManager_6Be).get$_launchTimestamps().$indexSet(0, $.$get$fs().basename$1(J.get$path$x(this._launch_configs$_file)), t1);
      },
      get$timestamp: function(_) {
        var time = Q.Dependencies_instance().getDependency$1(C.Type_LaunchConfigurationManager_6Be).get$_launchTimestamps().$index(0, $.$get$fs().basename$1(J.get$path$x(this._launch_configs$_file)));
        return time == null ? 0 : time;
      },
      toString$0: function(_) {
        return H.S($.$get$fs().basename$1(J.get$path$x(this._launch_configs$_file))) + ": " + H.S(J.$index$asx(this._launch_configs$_map, "type")) + ", " + H.S(J.$index$asx(this._launch_configs$_map, "path")) + ", " + H.S(J.$index$asx(this._launch_configs$_map, "type")) + ": " + this.get$typeArgs().toString$0(0);
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (!(other instanceof Q.LaunchConfiguration))
          return false;
        t1 = this.get$primaryResource();
        t2 = other.get$primaryResource();
        return (t1 == null ? t2 == null : t1 === t2) && J.$eq$(J.$index$asx(this._launch_configs$_map, "type"), J.$index$asx(other._launch_configs$_map, "type"));
      },
      get$hashCode: function(_) {
        var t1 = this.get$primaryResource();
        t1 = t1 == null ? t1 : C.JSString_methods.get$hashCode(t1);
        return t1 == null ? 0 : t1;
      },
      _getRelativeConfigPath$0: function() {
        var path, t1, $parent, t2;
        path = J.get$path$x(this._launch_configs$_file);
        t1 = $.$get$fs();
        $parent = t1.dirname$1(this.projectPath);
        t2 = J.getInterceptor$s(path);
        if (t2.startsWith$1(path, $parent)) {
          path = t2.substring$1(path, J.get$length$asx($parent));
          return C.JSString_methods.startsWith$1(path, t1.separator) ? C.JSString_methods.substring$1(path, 1) : path;
        } else
          return path;
      },
      reparse$1: function(contents) {
        var parsed, t1, exception;
        t1 = contents == null;
        if (!t1 || this._launch_configs$_file.existsSync$0() === true)
          try {
            parsed = J.get$value$x(B.loadYamlDocument(t1 ? this._launch_configs$_file.readSync$1(true) : contents, null).contents);
            this._launch_configs$_map = !!J.getInterceptor(parsed).$isMap ? parsed : P.LinkedHashMap__makeEmpty();
          } catch (exception) {
            H.unwrapException(exception);
            this._launch_configs$_map = P.LinkedHashMap__makeEmpty();
          }
      },
      reparse$0: function() {
        return this.reparse$1(null);
      }
    },
    _ProjectConfigurations: {
      "^": "Object;projectPath<,launchDir,_configs,_launch_configs$_sub",
      getConfigs$0: function() {
        var t1, t2, _i;
        t1 = this._configs;
        if (t1 == null)
          this._reparse$0();
        else
          for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
            t1[_i].reparse$0();
        return this._configs;
      },
      createConfig$2: function(filename, contents) {
        var file, t1;
        this._configs = null;
        file = new F.File(F._cvt0(this.launchDir.invoke$2("getFile", filename)));
        if (file.invoke$1("existsSync") === true)
          file.invoke$2("writeSync", contents);
        else
          K.promiseToFuture(file.invoke$1("create")).then$1(new Q._ProjectConfigurations_createConfig_closure(this, contents, file));
        t1 = new Q.LaunchConfiguration(this.projectPath, null, null);
        t1._launch_configs$_file = file;
        t1.reparse$1(contents);
        return t1;
      },
      _listenToLaunchDir$0: function() {
        if (this._launch_configs$_sub == null && this.launchDir.invoke$1("existsSync") === true)
          this._launch_configs$_sub = this.launchDir.eventStream$1("onDidChange").listen$1(new Q._ProjectConfigurations__listenToLaunchDir_closure(this));
      },
      _reparse$0: function() {
        var entry, e, t1, t2, t3, _i, t4, t5, exception;
        this._configs = [];
        t1 = this.launchDir;
        if (t1.invoke$1("existsSync") === true)
          for (t1 = t1.getEntriesSync$0(), t2 = t1.length, t3 = this.projectPath, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            entry = t1[_i];
            if (!(entry instanceof F.File) || !J.endsWith$1$s(J.$index$asx(entry.get$obj(), "path"), ".yaml"))
              continue;
            try {
              t4 = this._configs;
              t5 = new Q.LaunchConfiguration(t3, null, null);
              t5._launch_configs$_file = entry;
              t5.reparse$1(null);
              t4.push(t5);
            } catch (exception) {
              t4 = H.unwrapException(exception);
              e = t4;
              $.$get$_logger14().info$2("Error parsing " + H.S(J.get$path$x(entry)), e);
            }
          }
      },
      dispose$0: [function() {
        var t1 = this._launch_configs$_sub;
        if (!(t1 == null))
          t1.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    _ProjectConfigurations_createConfig_closure: {
      "^": "Closure:0;$this,contents,file",
      call$1: [function(_) {
        this.file.invoke$2("writeSync", this.contents);
        this.$this._listenToLaunchDir$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    _ProjectConfigurations__listenToLaunchDir_closure: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        this.$this._configs = null;
        return;
      }, null, null, 2, 0, null, 1, "call"]
    }
  }], ["atom.launch_shell", "package:atom_dartlang/launch/launch_shell.dart",, S, {
    "^": "",
    ShellLaunchType: {
      "^": "LaunchType;type",
      canLaunch$2: function(path, data) {
        var t1 = J.getInterceptor$s(path);
        return t1.endsWith$1(path, ".sh") || t1.endsWith$1(path, ".bat");
      },
      get$supportsChecked: function() {
        return false;
      },
      performLaunch$2: function(manager, configuration) {
        var script, cwd, args, paths, t1, cwd0, launchName, t2, t3, t4, runner, description, t5, t6, t7, launch;
        script = configuration.get$primaryResource();
        cwd = configuration.get$cwd();
        args = configuration.get$argsAsList();
        if (cwd == null) {
          paths = P.List_List$from($.$get$atom()._project.invoke$2("relativizePath", script), true, null);
          t1 = paths.length;
          if (0 >= t1)
            return H.ioore(paths, 0);
          cwd0 = paths[0];
          if (cwd0 != null) {
            if (1 >= t1)
              return H.ioore(paths, 1);
            launchName = paths[1];
            cwd = cwd0;
          } else
            launchName = script;
        } else
          launchName = $.$get$fs().relativize$2(cwd, script);
        t1 = [null];
        t2 = new P._Future(0, $.Zone__current, null, t1);
        t3 = P.StreamController_StreamController(null, null, null, null, false, null);
        t4 = P.StreamController_StreamController(null, null, null, null, false, null);
        runner = new X.ProcessRunner(script, args, cwd, null, null, new P._AsyncCompleter(t2, [null]), null, t3, t4);
        description = args.length === 0 ? launchName : H.S(launchName) + " " + C.JSArray_methods.join$1(args, " ");
        t5 = $.Launch__id + 1;
        $.Launch__id = t5;
        t6 = [null];
        t7 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t6);
        t7._utils$_value = null;
        t6 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), t6);
        t6._utils$_value = null;
        launch = new X.Launch(this, configuration, launchName, description, null, manager, t5, new S.ShellLaunchType_performLaunch_closure(runner), cwd, t7, t6, P.StreamController_StreamController$broadcast(null, null, false, null), null, null);
        if (cwd != null)
          launch._pathResolver = new X._PathResolver(cwd);
        manager.addLaunch$1(launch);
        runner.execStreaming$0();
        new P._ControllerStream(t3, [H.getTypeArgumentByIndex(t3, 0)]).listen$1(new S.ShellLaunchType_performLaunch_closure0(launch));
        new P._ControllerStream(t4, [H.getTypeArgumentByIndex(t4, 0)]).listen$1(new S.ShellLaunchType_performLaunch_closure1(launch));
        t2.then$1(new S.ShellLaunchType_performLaunch_closure2(launch));
        t1 = new P._Future(0, $.Zone__current, null, t1);
        t1._asyncComplete$1(launch);
        return t1;
      },
      getDefaultConfigText$0: function() {
        return "# Additional args for the application.\nargs:\n";
      }
    },
    ShellLaunchType_performLaunch_closure: {
      "^": "Closure:1;runner",
      call$0: [function() {
        return this.runner.kill$0();
      }, null, null, 0, 0, null, "call"]
    },
    ShellLaunchType_performLaunch_closure0: {
      "^": "Closure:0;launch",
      call$1: [function(str) {
        var t1 = this.launch._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, false, false, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    ShellLaunchType_performLaunch_closure1: {
      "^": "Closure:0;launch",
      call$1: [function(str) {
        var t1 = this.launch._stdio;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(new X.TextFragment(str, true, false, false));
        return;
      }, null, null, 2, 0, null, 4, "call"]
    },
    ShellLaunchType_performLaunch_closure2: {
      "^": "Closure:0;launch",
      call$1: [function(code) {
        return this.launch.launchTerminated$1(code);
      }, null, null, 2, 0, null, 14, "call"]
    }
  }], ["atom.run", "package:atom_dartlang/launch/run.dart",, L, {
    "^": "",
    RunApplicationManager: {
      "^": "Object;disposables",
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleRunCommand$3$explicitFile: function(path, data, explicitFile) {
        var t1, project, runnable, t2, configs, t3, config, _i, c, launchables, launchable, displayPath;
        if (path == null)
          return;
        t1 = $.$get$atom();
        t1._workspace.saveAll$0();
        project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
        runnable = Q.Dependencies_instance().getDependency$1(C.Type_WorkspaceLaunchManager_G7N).get$selectedRunnable();
        if (explicitFile)
          if (runnable != null && J.$eq$(J.get$path$x(runnable), path))
            this.run$1(runnable.getCreateLaunchConfig$0());
          else {
            project = Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path);
            t2 = project == null;
            configs = t2 ? [] : Q.Dependencies_instance().getDependency$1(C.Type_LaunchConfigurationManager_6Be).getConfigsForProject$1(J.get$path$x(project));
            configs.toString;
            t3 = H.getTypeArgumentByIndex(configs, 0);
            configs = P.List_List$from(new H.WhereIterable(configs, new L.RunApplicationManager__handleRunCommand_closure(path), [t3]), true, t3);
            if (configs.length !== 0) {
              config = C.JSArray_methods.get$first(configs);
              for (t1 = configs.length, _i = 0; _i < configs.length; configs.length === t1 || (0, H.throwConcurrentModificationError)(configs), ++_i) {
                c = configs[_i];
                if (J.$gt$n(J.get$timestamp$x(c), J.get$timestamp$x(config)))
                  config = c;
              }
              this.run$1(config);
            } else {
              launchables = Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).getAllLaunchables$2(path, data);
              if (launchables.length !== 0) {
                launchable = C.JSArray_methods.get$first(launchables);
                t1 = launchable.type;
                this.run$1(Q.Dependencies_instance().getDependency$1(C.Type_LaunchConfigurationManager_6Be).createNewConfig$4(launchable.projectPath, J.get$type$x(t1), launchable.relativePath, t1.getDefaultConfigText$0()));
              } else {
                displayPath = t2 ? path : project.getRelative$1(path);
                t1 = t1._notifications;
                t1.invoke$3("addWarning", "Unable to locate a suitable execution handler for file " + H.S(displayPath) + ".", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
              }
            }
          }
        else if (runnable != null)
          this.run$1(runnable.getCreateLaunchConfig$0());
        else {
          displayPath = project == null ? path : project.getRelative$1(path);
          t1 = t1._notifications;
          t1.invoke$3("addWarning", "Unable to locate a suitable execution handler for file " + H.S(displayPath) + ".", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        }
      },
      _handleRunCommand$2: function(path, data) {
        return this._handleRunCommand$3$explicitFile(path, data, false);
      },
      _handleFullRestartCommand$2: function(path, data) {
        var launch, t1;
        launch = Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).get$activeLaunch();
        if (launch == null) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addError", "No application running to restart.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          return;
        }
        if (!launch.get$supportsRestart()) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addError", "The currently running application does not support restart.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          return;
        }
        launch.restart$1$fullRestart(true).catchError$1(new L.RunApplicationManager__handleFullRestartCommand_closure());
      },
      run$1: function(config) {
        var t1, t2, launchType;
        t1 = $.$get$atom();
        t1._workspace.saveAll$0();
        config.reparse$0();
        $.$get$_logger27().info$1("Launching '" + H.S(config) + "'.");
        t2 = J.getInterceptor$x(config);
        launchType = Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).getLaunchType$1(t2.get$type(config));
        if (launchType == null) {
          t1 = t1._notifications;
          t1.invoke$3("addError", "No handler for launch type '" + H.S(t2.get$type(config)) + "' found.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        } else {
          config.touch$0();
          launchType.performLaunch$2(Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK), config).catchError$1(new L.RunApplicationManager_run_closure(config));
        }
      },
      RunApplicationManager$0: function() {
        var $stop, t1, t2;
        $stop = new L.RunApplicationManager_closure();
        t1 = $.$get$atom();
        t2 = this.disposables._disposables;
        t2.push(t1._commands.add$3(0, ".tree-view", "dartlang:run-application", new L.RunApplicationManager_closure0(this, $stop)));
        t2.push(t1._commands.add$3(0, ".tree-view", "dartlang:app-full-restart", new L.RunApplicationManager_closure1(this, $stop)));
        t2.push(t1._commands.add$3(0, "atom-text-editor", "dartlang:run-application", new L.RunApplicationManager_closure2(this, $stop)));
        t2.push(t1._commands.add$3(0, "atom-text-editor", "dartlang:app-full-restart", new L.RunApplicationManager_closure3(this, $stop)));
      },
      $isDisposable: 1,
      static: {
        RunApplicationManager$: function() {
          var t1 = new L.RunApplicationManager(new L.Disposables(true, []));
          t1.RunApplicationManager$0();
          return t1;
        }
      }
    },
    RunApplicationManager_closure: {
      "^": "Closure:16;",
      call$1: function($event) {
        $event.invoke$1("stopImmediatePropagation");
        $event.invoke$1("preventDefault");
      }
    },
    RunApplicationManager_closure0: {
      "^": "Closure:0;$this,stop",
      call$1: function($event) {
        var t1;
        this.stop.call$1($event);
        t1 = $event.get$targetFilePath();
        this.$this._handleRunCommand$3$explicitFile(t1, new X.LaunchData(new F.File(F._create("File", t1, null)).invoke$2("readSync", null), null), true);
      }
    },
    RunApplicationManager_closure1: {
      "^": "Closure:0;$this,stop",
      call$1: function($event) {
        var t1;
        this.stop.call$1($event);
        t1 = $event.get$targetFilePath();
        this.$this._handleFullRestartCommand$2(t1, new X.LaunchData(new F.File(F._create("File", t1, null)).invoke$2("readSync", null), null));
      }
    },
    RunApplicationManager_closure2: {
      "^": "Closure:0;$this,stop",
      call$1: function($event) {
        var editor;
        this.stop.call$1($event);
        editor = $event.get$editor();
        this.$this._handleRunCommand$2(editor.invoke$1("getPath"), new X.LaunchData(editor.invoke$1("getText"), null));
      }
    },
    RunApplicationManager_closure3: {
      "^": "Closure:0;$this,stop",
      call$1: function($event) {
        var editor;
        this.stop.call$1($event);
        editor = $event.get$editor();
        this.$this._handleFullRestartCommand$2(editor.invoke$1("getPath"), new X.LaunchData(editor.invoke$1("getText"), null));
      }
    },
    RunApplicationManager__handleRunCommand_closure: {
      "^": "Closure:71;path",
      call$1: function(c) {
        return J.$eq$(this.path, c.get$primaryResource());
      }
    },
    RunApplicationManager__handleFullRestartCommand_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        var t1 = $.$get$atom()._notifications;
        t1.invoke$3("addWarning", J.toString$0$(e), t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
      }, null, null, 2, 0, null, 0, "call"]
    },
    RunApplicationManager_run_closure: {
      "^": "Closure:0;config",
      call$1: [function(e) {
        var t1 = $.$get$atom()._notifications;
        t1.invoke$3("addError", "Error running '" + H.S(this.config.get$shortResourceName()) + "'.", t1._options$5$buttons$description$detail$dismissable$icon(null, H.S(e), null, true, null));
      }, null, null, 2, 0, null, 0, "call"]
    },
    WorkspaceLaunchManager: {
      "^": "Object;disposeable,subs,_selectedRunnable,_runnables,_currentFile,_selectedRunnableController,_runnablesController",
      get$selectedRunnable: function() {
        return this._selectedRunnable;
      },
      get$runnables: function() {
        return this._runnables;
      },
      get$onSelectedRunnableChanged: function() {
        var t1 = this._selectedRunnableController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onRunnablesChanged: function() {
        var t1 = this._runnablesController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      setSelectedRunnable$1: function(runnable) {
        var t1;
        this._selectedRunnable = runnable;
        t1 = this._selectedRunnableController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(runnable);
      },
      _updateFromActiveEditor$0: function() {
        var editor, configs, launchables, t1, _i, config, t2;
        editor = $.$get$atom()._workspace.getActiveTextEditor$0();
        this._currentFile = editor == null ? editor : editor.invoke$1("getPath");
        configs = Q.Dependencies_instance().getDependency$1(C.Type_LaunchConfigurationManager_6Be).getAllConfigs$0();
        launchables = [];
        if (this._currentFile != null)
          launchables = Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).getAllLaunchables$2(this._currentFile, new X.LaunchData(editor.invoke$1("getText"), null));
        for (t1 = configs.length, _i = 0; _i < configs.length; configs.length === t1 || (0, H.throwConcurrentModificationError)(configs), ++_i) {
          config = configs[_i];
          $.Zone__current.toString;
          C.JSArray_methods.remove$1(launchables, new X.Launchable($.Dependencies__global.getDependency$1(C.Type_LaunchManager_mXK).getLaunchType$1(J.get$type$x(config)), config.get$projectPath(), config.get$shortResourceName()));
        }
        t1 = this._runnables;
        C.JSArray_methods.set$length(t1, 0);
        t2 = [null, null];
        C.JSArray_methods.addAll$1(t1, new H.MappedListIterable(configs, new L.WorkspaceLaunchManager__updateFromActiveEditor_closure(), t2));
        C.JSArray_methods.addAll$1(t1, new H.MappedListIterable(launchables, new L.WorkspaceLaunchManager__updateFromActiveEditor_closure0(), t2));
        C.JSArray_methods.sort$0(t1);
        t2 = this._runnablesController;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(t1);
        t2 = this._selectedRunnable;
        if (t2 != null && !C.JSArray_methods.contains$1(t1, t2)) {
          t1 = t1.length !== 0 ? C.JSArray_methods.get$first(t1) : null;
          this._selectedRunnable = t1;
          t2 = this._selectedRunnableController;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(t1);
        } else if (this._selectedRunnable == null && t1.length !== 0) {
          t1 = C.JSArray_methods.get$first(t1);
          this._selectedRunnable = t1;
          t2 = this._selectedRunnableController;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(t1);
        }
      },
      dispose$0: [function() {
        this.disposeable.invoke$1("dispose");
        this.subs.cancel$0(0);
      }, "call$0", "get$dispose", 0, 0, 2],
      WorkspaceLaunchManager$0: function() {
        this.disposeable = $.$get$atom()._workspace.observeActivePaneItem$1(new L.WorkspaceLaunchManager_closure(this));
        var t1 = this.subs._subscriptions;
        t1.push(Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).get$onProjectsChanged().listen$1(new L.WorkspaceLaunchManager_closure0(this)));
        t1.push(J.get$onChange$x(Q.Dependencies_instance().getDependency$1(C.Type_LaunchConfigurationManager_6Be)).listen$1(new L.WorkspaceLaunchManager_closure1(this)));
        this._updateFromActiveEditor$0();
      },
      $isDisposable: 1,
      static: {
        WorkspaceLaunchManager$: function() {
          var t1 = new L.WorkspaceLaunchManager(null, new L.StreamSubscriptions(true, []), null, [], null, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null));
          t1.WorkspaceLaunchManager$0();
          return t1;
        }
      }
    },
    WorkspaceLaunchManager_closure: {
      "^": "Closure:0;$this",
      call$1: function(item) {
        this.$this._updateFromActiveEditor$0();
      }
    },
    WorkspaceLaunchManager_closure0: {
      "^": "Closure:38;$this",
      call$1: [function(projects) {
        this.$this._updateFromActiveEditor$0();
      }, null, null, 2, 0, null, 29, "call"]
    },
    WorkspaceLaunchManager_closure1: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        this.$this._updateFromActiveEditor$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    WorkspaceLaunchManager__updateFromActiveEditor_closure: {
      "^": "Closure:71;",
      call$1: [function(config) {
        return new L.RunnableConfig(null, config);
      }, null, null, 2, 0, null, 74, "call"]
    },
    WorkspaceLaunchManager__updateFromActiveEditor_closure0: {
      "^": "Closure:193;",
      call$1: [function(launchable) {
        return new L.RunnableConfig(launchable, null);
      }, null, null, 2, 0, null, 154, "call"]
    },
    RunnableConfig: {
      "^": "Object;_launchable,_run$_config",
      get$projectPath: function() {
        var t1 = this._run$_config;
        if (t1 != null)
          return t1.get$projectPath();
        else
          return this._launchable.get$projectPath();
      },
      get$path: function(_) {
        var t1 = this._run$_config;
        return t1 != null ? t1.get$primaryResource() : J.get$path$x(this._launchable);
      },
      getDisplayName$0: function() {
        var t1, t2;
        t1 = this._run$_config;
        if (t1 != null)
          return H.S($.$get$fs().basename$1(t1.get$projectPath())) + ": " + H.S(this._run$_config.get$shortResourceName()) + " (" + H.S(J.get$type$x(this._run$_config)) + ")";
        else {
          t1 = this._launchable;
          t2 = J.getInterceptor$x(t1);
          return H.S($.$get$fs().basename$1(t1.get$projectPath())) + ": " + H.S(t2.get$relativePath(t1)) + " (" + H.S(t2.get$type(t1)) + ") \u2022";
        }
      },
      getCreateLaunchConfig$0: function() {
        var t1, t2;
        t1 = this._run$_config;
        if (t1 == null) {
          t1 = this._launchable;
          t2 = J.getInterceptor$x(t1);
          t1 = Q.Dependencies_instance().getDependency$1(C.Type_LaunchConfigurationManager_6Be).createNewConfig$4(this.get$projectPath(), J.get$type$x(t2.get$type(t1)), t2.get$relativePath(t1), t2.get$type(t1).getDefaultConfigText$0());
          this._run$_config = t1;
        }
        return t1;
      },
      get$isFlutterRunnable: function() {
        var t1 = this._run$_config;
        return J.$eq$(t1 != null ? J.get$type$x(t1) : J.get$type$x(this._launchable), "flutter");
      },
      get$type: function(_) {
        var t1 = this._run$_config;
        return t1 != null ? J.get$type$x(t1) : J.get$type$x(this._launchable);
      },
      compareTo$1: function(_, other) {
        return C.JSString_methods.compareTo$1(this.getDisplayName$0().toLowerCase(), other.getDisplayName$0().toLowerCase());
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (!(other instanceof L.RunnableConfig))
          return false;
        t1 = this._run$_config;
        if (t1 != null) {
          t2 = other._run$_config;
          if (t2 == null)
            return false;
          return J.$eq$(t1, t2);
        } else {
          if (other._run$_config != null)
            return false;
          return J.$eq$(this._launchable, other._launchable);
        }
      },
      get$hashCode: function(_) {
        return C.JSString_methods.get$hashCode(this.getDisplayName$0());
      },
      toString$0: function(_) {
        return this.getDisplayName$0();
      },
      $isComparable: 1,
      $asComparable: function() {
        return [L.RunnableConfig];
      }
    },
    _RunAppContextCommand: {
      "^": "ContextMenuItem;label,command",
      shouldDisplay$1: function($event) {
        var filePath, contents;
        filePath = $event.get$targetFilePath();
        if (Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(filePath) == null)
          return false;
        if (new F.Stats($.$get$fs().invoke$2("statSync", filePath)).invoke$1("isFile") !== true)
          return false;
        contents = new F.File(F._create("File", filePath, null)).invoke$2("readSync", null);
        return Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).getHandlerFor$2(filePath, new X.LaunchData(contents, null)) != null;
      }
    }
  }], ["atom.linter_impl", "package:atom_dartlang/linter.dart",, D, {
    "^": "",
    _errorComparer: [function(a, b) {
      var aloc, bloc, t1, t2;
      if (!J.$eq$(a.get$severity(), b.get$severity()))
        return D._sev(b.get$severity()) - D._sev(a.get$severity());
      aloc = J.get$location$x(a);
      bloc = J.get$location$x(b);
      t1 = J.getInterceptor$x(aloc);
      t2 = J.getInterceptor$x(bloc);
      if (!J.$eq$(t1.get$file(aloc), t2.get$file(bloc)))
        return J.compareTo$1$ns(t1.get$file(aloc), t2.get$file(bloc));
      return J.$sub$n(t1.get$offset(aloc), t2.get$offset(bloc));
    }, "call$2", "linter___errorComparer$closure", 4, 0, 258],
    _sev: function(sev) {
      var t1 = J.getInterceptor(sev);
      if (t1.$eq(sev, "ERROR"))
        return 3;
      if (t1.$eq(sev, "WARNING"))
        return 2;
      if (t1.$eq(sev, "INFO"))
        return 1;
      return 0;
    },
    DartLinterProvider: {
      "^": "LinterProvider;grammarScopes,scope,lintOnFly,_key"
    },
    DartLinterConsumer: {
      "^": "LinterConsumer;_errorRepository,_reportingDelay,_provider,_service,_linter$_disposables,_oldIssues",
      get$errors: function() {
        return this._oldIssues;
      },
      _regenErrors$0: function() {
        var t1, issuesMap, projects, projectErrorCount, t2, t3, _i, newIssues, project, t4, _i0, issue, t5, line;
        t1 = {};
        issuesMap = this._errorRepository.get$knownErrors();
        t1.allIssues = [];
        issuesMap.forEach$1(0, new D.DartLinterConsumer__regenErrors_closure(t1, this));
        C.JSArray_methods.sort$1(t1.allIssues, D.linter___errorComparer$closure());
        projects = P.List_List$from($.$get$atom()._project.invoke$1("getPaths"), true, null);
        projectErrorCount = P.LinkedHashMap__makeEmpty();
        t2 = t1.allIssues.length;
        t3 = projects.length;
        if (t2 > t3 * 500) {
          for (_i = 0; t2 = projects.length, _i < t2; projects.length === t3 || (0, H.throwConcurrentModificationError)(projects), ++_i)
            projectErrorCount.$indexSet(0, projects[_i], 0);
          newIssues = [];
          for (_i = 0; _i < projects.length; projects.length === t2 || (0, H.throwConcurrentModificationError)(projects), ++_i) {
            project = projects[_i];
            for (t3 = t1.allIssues, t4 = t3.length, _i0 = 0; _i0 < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i0) {
              issue = t3[_i0];
              t5 = J.getInterceptor$x(issue);
              if (J.startsWith$1$s(J.get$file$x(t5.get$location(issue)), project)) {
                projectErrorCount.$indexSet(0, project, J.$add$ns(projectErrorCount.$index(0, project), 1));
                if (J.$lt$n(projectErrorCount.$index(0, project), 500)) {
                  line = H.S(J.$add$ns(J.$add$ns(issue.get$severity(), " "), t5.get$type(issue)));
                  H.printString(line);
                  newIssues.push(issue);
                } else if (projectErrorCount.$index(0, project) === 500)
                  newIssues.push(new E.AnalysisError("ERROR", "ERROR", new E.Location(J.get$file$x(t5.get$location(issue)), 0, 1, 1, 1), "Maximum project issue count of 500 hit.", null, null, null));
              }
            }
          }
          t1.allIssues = newIssues;
          C.JSArray_methods.sort$1(newIssues, D.linter___errorComparer$closure());
        }
        this._emit$1(t1.allIssues);
      },
      _filter$1: function(issues) {
        var t1, pref, t2, showInfos;
        t1 = $.$get$atom();
        pref = t1._config.getValue$1($._configureErrorsPrefPath);
        t2 = J.getInterceptor(pref);
        showInfos = t2.$eq(pref, "infos") || t2.$eq(pref, "todos");
        return J.where$1$ax(issues, new D.DartLinterConsumer__filter_closure(showInfos, J.$eq$(t1._config.getValue$1($._configureErrorsPrefPath), "todos"))).toList$0(0);
      },
      _emit$1: function(newIssues) {
        var t1, t2;
        if (!G.listIdentical(this._oldIssues, newIssues)) {
          this._oldIssues = newIssues;
          t1 = $.$get$_processedErrorsController();
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(newIssues);
          t1 = this._service;
          if (t1 != null) {
            t2 = this._provider;
            t1.invoke$2("deleteMessages", t2._key);
            this._service.setMessages$2(t2, new H.MappedListIterable(newIssues, new D.DartLinterConsumer__emit_closure(), [null, null]).toList$0(0));
          }
        }
      },
      dispose$0: [function() {
        return this._linter$_disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      DartLinterConsumer$1: function(_errorRepository) {
        var regen = new D.DartLinterConsumer_closure(this);
        this._linter$_disposables._disposables.push($.$get$atom()._config.observe$3(0, $._configureErrorsPrefPath, null, regen));
        new M.Debounce(this._reportingDelay, [null]).bind$1(J.get$onChange$x(this._errorRepository)).listen$1(regen);
      },
      $isDisposable: 1,
      static: {
        DartLinterConsumer$: function(_errorRepository) {
          var t1 = new D.DartLinterConsumer(_errorRepository, P.Duration$(0, 0, 0, 750, 0, 0), new D.DartLinterProvider(["source.dart"], "project", false, K.jsify(P.LinkedHashMap__makeLiteral(["scope", "project"]))), null, new L.Disposables(true, []), []);
          t1.DartLinterConsumer$1(_errorRepository);
          return t1;
        }
      }
    },
    DartLinterConsumer_closure: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        return this.$this._regenErrors$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    DartLinterConsumer__regenErrors_closure: {
      "^": "Closure:194;_box_0,$this",
      call$2: function(path, issues) {
        var t1, first, t2, t3, t4, t5;
        issues = this.$this._filter$1(issues);
        t1 = J.getInterceptor$ax(issues);
        t1.sort$1(issues, D.linter___errorComparer$closure());
        if (t1.get$length(issues) > 200) {
          first = t1.get$first(issues);
          t2 = first.get$severity();
          t3 = J.getInterceptor$x(first);
          t4 = t3.get$type(first);
          t3 = J.get$file$x(t3.get$location(first));
          t5 = "" + (t1.get$length(issues) - 200 + 1) + " additional issues not shown";
          issues = t1.sublist$2(issues, 0, 199);
          C.JSArray_methods.insert$2(issues, 0, new E.AnalysisError(t2, t4, new E.Location(t3, 0, 1, 1, 1), t5, null, null, null));
        }
        C.JSArray_methods.addAll$1(this._box_0.allIssues, issues);
      }
    },
    DartLinterConsumer__filter_closure: {
      "^": "Closure:56;showInfos,showTodos",
      call$1: function(issue) {
        if (!this.showInfos && J.$eq$(issue.get$severity(), "INFO"))
          return false;
        if (!this.showTodos && J.$eq$(J.get$type$x(issue), "TODO"))
          return false;
        if (J.endsWith$1$s(J.get$message$x(issue), "cannot both be unnamed"))
          return false;
        return true;
      }
    },
    DartLinterConsumer__emit_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        var t1, t2, text, t3;
        t1 = J.getInterceptor$x(e);
        t2 = J.get$file$x(t1.get$location(e));
        text = t1.get$code(e) == null ? t1.get$message(e) : H.S(t1.get$message(e)) + " (" + H.S(t1.get$code(e)) + ")";
        t3 = $.$get$_severityMap().$index(0, e.get$severity());
        t1 = t1.get$location(e);
        return new E.LintMessage(t3, text, null, t2, new E.Rn(new E.Pt(J.$sub$n(t1.get$startLine(), 1), J.$sub$n(t1.get$startColumn(), 1)), new E.Pt(J.$sub$n(t1.get$startLine(), 1), J.$add$ns(J.$sub$n(t1.get$startColumn(), 1), J.get$length$asx(t1)))));
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["", "package:atom_dartlang/material.dart",, M, {
    "^": "",
    MIconButton: {
      "^": "CoreElement;iconName,element",
      MIconButton$1: function(iconName) {
        this.add$1(0, [K.CoreElement$("span", null, this.iconName, null)]);
      },
      static: {
        MIconButton$: function(iconName) {
          var t1 = new M.MIconButton(iconName, W._ElementFactoryProvider_createElement_tag("div", null));
          t1.CoreElement$4$attributes$classes$text("div", null, "material-icon-button", null);
          t1.MIconButton$1(iconName);
          return t1;
        }
      }
    },
    MTabGroup: {
      "^": "CoreElement;tabs,_tabContainer,_contentContainer,_activeTab,element",
      _handleTabAdd$1: [function(tab) {
        var t1;
        this._tabContainer.add$1(0, tab.get$_tabElement().element);
        t1 = J.getInterceptor$x(tab);
        this._contentContainer.add$1(0, t1.get$content(tab));
        J.hidden$1$x(t1.get$content(tab), true);
        tab.get$_tabElement().click$1(0, new M.MTabGroup__handleTabAdd_closure(this, tab));
      }, "call$1", "get$_handleTabAdd", 2, 0, 66, 76],
      _handleTabActivate$1: [function(tab) {
        var t1;
        if (J.$eq$(this._activeTab, tab))
          return;
        t1 = this._activeTab;
        if (t1 != null) {
          J.hidden$1$x(J.get$content$x(t1), true);
          J.toggle$2$x(J.get$classes$x(this._activeTab.get$_tabElement().element), "tab-selected", false);
          J.set$value$x(J.get$active$x(this._activeTab), false);
        }
        this._activeTab = tab;
        if (tab != null) {
          J.hidden$1$x(J.get$content$x(tab), false);
          J.toggle$2$x(J.get$classes$x(this._activeTab.get$_tabElement().element), "tab-selected", true);
          J.scrollIntoView$0$x(this._activeTab.get$_tabElement().element);
          J.set$value$x(J.get$active$x(this._activeTab), true);
        }
      }, "call$1", "get$_handleTabActivate", 2, 0, 66, 76],
      hasTabId$1: function(id) {
        return C.JSArray_methods.any$1(this.tabs._items, new M.MTabGroup_hasTabId_closure(id));
      },
      activateTabId$1: function(id) {
        var t1, t2, t3, t4, _i, tab;
        for (t1 = this.tabs, t2 = t1._items, t3 = t2.length, t4 = t1._selectionChangedController, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          tab = t2[_i];
          if (J.$eq$(J.get$id$x(tab), id))
            if (!J.$eq$(t1._selection, tab)) {
              t1._selection = tab;
              if (!t4.get$_mayAddEvent())
                H.throwExpression(t4._addEventError$0());
              t4._sendData$1(tab);
            }
        }
      },
      MTabGroup$0: function() {
        var t1, t2, t3, t4;
        t1 = this.element;
        t2 = J.getInterceptor$x(t1);
        t2.setAttribute$2(t1, "layout", "");
        t2.setAttribute$2(t1, "vertical", "");
        t1 = K.CoreElement$("div", null, "material-tab-container", null);
        this._tabContainer = t1;
        t2 = K.CoreElement$("div", null, null, null);
        t3 = t2.element;
        t4 = J.getInterceptor$x(t3);
        t4.setAttribute$2(t3, "layout", "");
        t4.setAttribute$2(t3, "vertical", "");
        t2.flex$0(0);
        this._contentContainer = t2;
        this.add$1(0, [t1, t2]);
        t2 = this.tabs;
        t1 = t2._addedController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(this.get$_handleTabAdd());
        t2 = t2._selectionChangedController;
        new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(this.get$_handleTabActivate());
      },
      static: {
        MTabGroup$: function() {
          var t1 = new M.MTabGroup(new G.SelectionGroup(null, [], P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), [null]), null, null, null, W._ElementFactoryProvider_createElement_tag("div", null));
          t1.CoreElement$4$attributes$classes$text("div", null, "material-tabgroup", null);
          t1.MTabGroup$0();
          return t1;
        }
      }
    },
    MTabGroup__handleTabAdd_closure: {
      "^": "Closure:1;$this,tab",
      call$0: function() {
        return this.$this.tabs.setSelection$1(this.tab);
      }
    },
    MTabGroup_hasTabId_closure: {
      "^": "Closure:0;id",
      call$1: function(tab) {
        return J.$eq$(J.get$id$x(tab), this.id);
      }
    },
    MTab: {
      "^": "Object;id>,name>,_tabElement<,content>,active>",
      toString$0: function(_) {
        return this.id + " " + this.name;
      },
      MTab$2: function(id, $name) {
        var t1;
        J.set$text$x(this._tabElement.element, this.name);
        t1 = this.enabled._utils$_controller;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new M.MTab_closure(this));
      },
      $isDisposable: 1
    },
    MTab_closure: {
      "^": "Closure:0;$this",
      call$1: [function(val) {
        this.$this._tabElement.attribute$2("disabled", val !== true);
      }, null, null, 2, 0, null, 15, "call"]
    },
    MList: {
      "^": "CoreElement;renderer,sort,filter,selectedItem,_ul,_itemToElement,_singleClick,_material$_doubleClick,element,$ti",
      update$1: function(_, modelObjects) {
        var t1, t2, _sel;
        t1 = this.filter == null;
        if (!t1 || this.sort != null) {
          t2 = J.getInterceptor$ax(modelObjects);
          if (!t1) {
            t1 = t2.where$1(modelObjects, new M.MList_update_closure(this));
            modelObjects = P.List_List$from(t1, true, H.getTypeArgumentByIndex(t1, 0));
          } else
            modelObjects = t2.toList$0(modelObjects);
          t1 = this.sort;
          if (t1 != null)
            C.JSArray_methods.sort$1(modelObjects, t1);
        }
        J.clear$0$ax(J.get$children$x(this._ul.element));
        t1 = this._itemToElement;
        t1.clear$0(0);
        t2 = this.selectedItem;
        _sel = t2._utils$_value;
        this._populateChildren$2(modelObjects, this._ul);
        if (_sel != null)
          if (t1.$index(0, _sel) != null)
            t1.$index(0, _sel).toggleClass$2("material-list-selected", true);
          else
            t2.set$value(0, null);
      },
      selectItem$1: function(item) {
        var t1, t2, oldSelected, element;
        t1 = this.selectedItem;
        t2 = t1._utils$_value;
        if (t2 != null) {
          oldSelected = this._itemToElement.$index(0, t2);
          if (oldSelected != null)
            oldSelected.toggleClass$2("material-list-selected", false);
        }
        element = this._itemToElement.$index(0, item);
        t2 = element == null;
        t1.set$value(0, t2 ? null : item);
        if (!t2)
          element.toggleClass$2("material-list-selected", true);
      },
      _populateChildren$2: function(modelObjects, container) {
        var item, element, e, st, t1, t2, exception, t3, line;
        for (t1 = J.get$iterator$ax(modelObjects), t2 = this._itemToElement; t1.moveNext$0();) {
          item = t1.get$current();
          element = container.add$1(0, K.CoreElement$("li", null, null, null));
          try {
            this._material$_render$2(item, element);
          } catch (exception) {
            t3 = H.unwrapException(exception);
            e = t3;
            st = H.getTraceFromException(exception);
            line = H.S(e) + ": " + H.S(st);
            H.printString(line);
          }
          t2.$indexSet(0, item, element);
          J.click$1$x(element, new M.MList__populateChildren_closure(this, item));
          element.dblclick$1(new M.MList__populateChildren_closure0(this, item));
        }
      },
      _material$_render$2: ["super$MList$_render", function(item, element) {
        this.renderer.call$2(item, element);
      }],
      get$onDoubleClick: function(_) {
        var t1 = this._material$_doubleClick;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      MList$3$filter$sort: function(renderer, filter, sort, $T) {
        var t1, t2;
        t1 = this.element;
        t2 = J.getInterceptor$x(t1);
        t2.setAttribute$2(t1, "layout", "");
        t2.setAttribute$2(t1, "vertical", "");
        t1 = K.CoreElement$("ul", null, null, null);
        t1.flex$0(0);
        this._ul = t1;
        this.add$1(0, [t1]);
        this.click$1(0, new M.MList_closure(this));
      },
      sort$1: function($receiver, arg0) {
        return this.sort.call$1(arg0);
      },
      static: {
        MList$: function(renderer, filter, sort, $T) {
          var t1 = new G.Property(null, P.StreamController_StreamController$broadcast(null, null, false, null), [null]);
          t1._utils$_value = null;
          t1 = new M.MList(renderer, sort, filter, t1, null, P.LinkedHashMap__makeEmpty(), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), W._ElementFactoryProvider_createElement_tag("div", null), [$T]);
          t1.CoreElement$4$attributes$classes$text("div", null, "material-list", null);
          t1.MList$3$filter$sort(renderer, filter, sort, $T);
          return t1;
        }
      }
    },
    MList_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        return this.$this.selectItem$1(null);
      }
    },
    MList_update_closure: {
      "^": "Closure:0;$this",
      call$1: function(o) {
        return this.$this.filter.call$1(o) !== true;
      }
    },
    MList__populateChildren_closure: {
      "^": "Closure:1;$this,item",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = this.item;
        t1.selectItem$1(t2);
        t1 = t1._singleClick;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(t2);
      }
    },
    MList__populateChildren_closure0: {
      "^": "Closure:1;$this,item",
      call$0: function() {
        var t1 = this.$this._material$_doubleClick;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(this.item);
      }
    },
    TreeModel: {
      "^": "Object;$ti"
    },
    MTree: {
      "^": "MList;treeModel,renderer,sort,filter,selectedItem,_ul,_itemToElement,_singleClick,_material$_doubleClick,element,$ti",
      _material$_render$2: function(item, element) {
        var t1, t2, expansionTriangle, toggleExpand;
        t1 = {};
        t2 = J.getInterceptor$ax(element);
        if (J.get$value$x(item).get$isPrimitive() !== true) {
          t1.expansionTriangle = null;
          t1.childContainer = null;
          expansionTriangle = K.CoreElement$("span", null, "icon-triangle-right", null);
          t1.expansionTriangle = expansionTriangle;
          t2.add$1(element, expansionTriangle);
          toggleExpand = new M.MTree__render_closure(t1, this, item, element);
          element.dblclick$1(toggleExpand);
          t1.expansionTriangle.click$1(0, toggleExpand);
        } else
          t2.add$1(element, K.CoreElement$("span", null, "icon-triangle-right visibility-hidden", null));
        this.super$MList$_render(item, element);
      },
      _makeFirstChildVisible$1: function(element) {
        var children, t1;
        children = J.get$children$x(element.element);
        t1 = J.getInterceptor$asx(children);
        if (t1.get$isNotEmpty(children))
          J.scrollIntoView$0$x(t1.get$first(children));
      }
    },
    MTree__render_closure: {
      "^": "Closure:1;_box_0,$this,item,element",
      call$0: function() {
        var t1, t2, index;
        t1 = this._box_0;
        J.toggle$2$x(J.get$classes$x(t1.expansionTriangle.element), "icon-triangle-right", null);
        J.toggle$2$x(J.get$classes$x(t1.expansionTriangle.element), "icon-triangle-down", null);
        t2 = t1.childContainer;
        if (t2 == null) {
          t1.childContainer = K.CoreElement$("ul", null, "material-list-indent", null);
          J.get$value$x(this.item).getChildren$0().then$1(new M.MTree__render__closure(t1, this.$this)).catchError$1(new M.MTree__render__closure0());
          t2 = this.element;
          index = J.indexOf$1$asx(J.get$children$x(J.get$parent$x(t2.get$element())), t2.get$element());
          J.insert$2$ax(J.get$children$x(J.get$parent$x(t2.get$element())), J.$add$ns(index, 1), t1.childContainer.element);
        } else {
          t2.attribute$2("hidden", J.get$attributes$x(t2.element).containsKey$1(0, "hidden") !== true);
          if (J.get$attributes$x(t1.childContainer.element).containsKey$1(0, "hidden") !== true)
            this.$this._makeFirstChildVisible$1(t1.childContainer);
        }
      }
    },
    MTree__render__closure: {
      "^": "Closure;_box_0,$this",
      call$1: [function(items) {
        var t1, t2;
        t1 = this.$this;
        t2 = this._box_0;
        t1._populateChildren$2(items, t2.childContainer);
        t1._makeFirstChildVisible$1(t2.childContainer);
      }, null, null, 2, 0, null, 156, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P.List, T]]};
        }, this.$this, "MTree");
      }
    },
    MTree__render__closure0: {
      "^": "Closure:4;",
      call$2: [function(e, st) {
        var t1 = $.$get$atom()._notifications;
        t1.invoke$3("addError", H.S(e), t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        $.$get$_logger29().info$3("unable to expand child", e, st);
      }, null, null, 4, 0, null, 0, 73, "call"]
    }
  }], ["atom.plugin", "package:atom_dartlang/plugin.dart",, R, {
    "^": "",
    AtomDartPackage: {
      "^": "AtomPackage;disposables,subscriptions,errorsController,consoleController,_consumer,_registeredMethods,id",
      activate$1: function(_, pluginState) {
        var t1, t2, t3, t4, t5, t6, t7, pubManager, runAppManager, treeItems;
        this._setupLogging$0();
        t1 = $.$get$_logger();
        t1.info$1("activated");
        t1.fine$1("Running on Chrome version " + H.S(J.$index$asx(J.$index$asx($.$get$process().obj, "versions"), "chrome")) + ".");
        if (Q.Dependencies_instance() == null)
          $.Dependencies__global = new Q.Dependencies(P.LinkedHashMap__makeEmpty());
        t1 = $.$get$state();
        t1.toString;
        t1._pluginState = pluginState == null ? P.LinkedHashMap__makeEmpty() : pluginState;
        $._package.getPackageVersion$0().then$1(G.changelog___checkChangelog$closure());
        $._package.getPackageVersion$0().then$1(new R.AtomDartPackage_activate_closure());
        t2 = $.$get$atom();
        if (C.JSArray_methods.contains$1(P.List_List$from(t2._packages.invoke$1("getAvailablePackageNames"), true, null), "flutter"))
          V.SdkManager_minVersion(T.Version_Version$parse("1.15.0"));
        t3 = $.$get$dartino();
        t4 = this.disposables._disposables;
        t4.push(t3);
        t5 = Q.Dependencies_instance();
        t6 = new S.JobManager(P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), [], null, null);
        t6._toasts = t2._notifications;
        t5._instances.$indexSet(0, C.Type_JobManager_cMb, t6);
        t4.push(t6);
        t6 = Q.Dependencies_instance();
        t5 = V.SdkManager$();
        t6._instances.$indexSet(0, C.Type_SdkManager_OHH, t5);
        t4.push(t5);
        t5 = Q.Dependencies_instance();
        t6 = L.ProjectManager$();
        t5._instances.$indexSet(0, C.Type_ProjectManager_CvJ, t6);
        t4.push(t6);
        t6 = Q.Dependencies_instance();
        t5 = X.AnalysisServer$();
        t6._instances.$indexSet(0, C.Type_AnalysisServer_bhC, t5);
        t4.push(t5);
        t5 = Q.Dependencies_instance();
        t6 = new F.EditorManager(F.Editors$_allDartEditors(), F.Editors$_allDartEditors());
        t5._instances.$indexSet(0, C.Type_EditorManager_25m, t6);
        t4.push(t6);
        t6 = Q.Dependencies_instance();
        t5 = new E.ErrorRepository(P.LinkedHashMap__makeEmpty(), new L.StreamSubscriptions(true, []), P.StreamController_StreamController$broadcast(null, null, false, null), null, null);
        t6._instances.$indexSet(0, C.Type_ErrorRepository_jfx, t5);
        t4.push(t5);
        t5 = Q.Dependencies_instance();
        t6 = new X.LaunchManager(P.StreamController_StreamController$broadcast(null, null, true, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), [], null, []);
        t5._instances.$indexSet(0, C.Type_LaunchManager_mXK, t6);
        t4.push(t6);
        t6 = Q.Dependencies_instance();
        t5 = new Q.LaunchConfigurationManager(P.LinkedHashMap__makeEmpty(), P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.$int), P.StreamController_StreamController$broadcast(null, null, false, null));
        t1.registerStorable$2("launchConfigs", t5);
        t1 = t5.get$_handleProjectAdded();
        C.JSArray_methods.forEach$1(Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).get$projects(), t1);
        Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).get$onProjectAdd().listen$1(t1);
        Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).get$onProjectRemove().listen$1(t5.get$_handleProjectRemoved());
        t6._instances.$indexSet(0, C.Type_LaunchConfigurationManager_6Be, t5);
        t4.push(t5);
        t5 = Q.Dependencies_instance();
        t6 = L.WorkspaceLaunchManager$();
        t5._instances.$indexSet(0, C.Type_WorkspaceLaunchManager_G7N, t6);
        t4.push(t6);
        t6 = Q.Dependencies_instance();
        t5 = A.BreakpointManager$();
        t6._instances.$indexSet(0, C.Type_BreakpointManager_erm, t5);
        t4.push(t5);
        t5 = Q.Dependencies_instance();
        t6 = Z.DebugManager$();
        t5._instances.$indexSet(0, C.Type_DebugManager_QDz, t6);
        t4.push(t6);
        t6 = Q.Dependencies_instance();
        t5 = new T.ViewGroupManager(P.LinkedHashMap__makeEmpty());
        t6._instances.$indexSet(0, C.Type_ViewGroupManager_GZ8, t5);
        t4.push(t5);
        t5 = Q.Dependencies_instance();
        t6 = [];
        t1 = new O.NavigationManager(new L.Disposables(true, t6), P.StreamController_StreamController$broadcast(null, null, false, null), [], []);
        t7 = t1.get$_handleNavigateReturn();
        t6.push(t2._commands.add$3(0, "atom-text-editor", "dartlang:return-from-declaration", t7));
        t6.push(t2._commands.add$3(0, 'atom-text-editor[data-grammar~="dart"]', "symbols-view:return-from-declaration", t7));
        t5._instances.$indexSet(0, C.Type_NavigationManager_X8s, t1);
        t4.push(t1);
        pubManager = R.PubManager$();
        runAppManager = L.RunApplicationManager$();
        Q.Dependencies_instance()._instances.$indexSet(0, C.Type_RunApplicationManager_vVm, runAppManager);
        t4.push(runAppManager);
        t4.push(new S.AnalysisOptionsManager(new L.Disposables(true, [])));
        t4.push(G.ChangelogManager$());
        t1 = Q.Dependencies_instance();
        t5 = E.StatusViewManager$();
        t1._instances.$indexSet(0, C.Type_StatusViewManager_tnX, t5);
        t4.push(t5);
        t5 = [];
        t1 = new D.FlutterToolsManager(new L.Disposables(true, t5), null);
        if (C.JSArray_methods.contains$1(P.List_List$from(t2._packages.invoke$1("getAvailablePackageNames"), true, null), "flutter")) {
          t5.push(t2._commands.add$3(0, "atom-workspace", "flutter:screenshot", t1.get$_screenshot()));
          t5.push(t2._commands.add$3(0, "atom-workspace", "flutter:create-project", t1.get$_createProject()));
          t5.push(t2._commands.add$3(0, "atom-workspace", "flutter:doctor", t1.get$_doctor()));
          t5.push(t2._commands.add$3(0, "atom-workspace", "flutter:upgrade", t1.get$_upgrade()));
          t5.push(t2._commands.add$3(0, "atom-workspace", "flutter:connect-remote-debugger", t1.get$_connect(t1)));
          t6 = new K.FlutterConnectManager(new L.Disposables(true, []), null);
          t1.connectManager = t6;
          t5.push(t6);
        }
        t4.push(t1);
        t4.push(T.DartdocHelper$());
        t1 = G.ErrorsController$();
        this.errorsController = t1;
        t4.push(t1);
        t4.push(F.FormattingManager$());
        t1 = [];
        t5 = new D.NavigationHelper(new L.Disposables(true, t1), new D._NavCompleterHelper([], P.LinkedHashMap__makeEmpty()), new L.Disposables(true, []));
        t6 = t5.get$_handleNavigate();
        t1.push(t2._commands.add$3(0, "atom-text-editor", "dartlang:jump-to-declaration", t6));
        t1.push(t2._commands.add$3(0, 'atom-text-editor[data-grammar~="dart"]', "symbols-view:go-to-declaration", t6));
        Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$onNavigaton().listen$1(t5.get$_navigationEvent());
        t6 = Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).get$dartProjectEditors()._activeEditorController;
        new P._BroadcastStream(t6, [H.getTypeArgumentByIndex(t6, 0)]).listen$1(t5.get$_activate());
        t5._activate$1(Q.Dependencies_instance().getDependency$1(C.Type_EditorManager_25m).get$dartProjectEditors()._activeEditor);
        t4.push(t5);
        t5 = new T.OrganizeFileManager(new L.Disposables(true, []));
        t5._addEditorCommand$2("dartlang:sort-members", t5.get$_handleSortMembers());
        t5._addEditorCommand$2("dartlang:organize-directives", t5.get$_handleOrganizeDirectives());
        t4.push(t5);
        t4.push(A.OutlineController$());
        t4.push(pubManager);
        t4.push(runAppManager);
        t5 = new F.RefactoringHelper(new L.Disposables(true, []));
        t5._addCommand$2("dartlang:refactor-extract-local", t5.get$_handleExtractLocal());
        t5._addCommand$2("dartlang:refactor-inline-local", t5.get$_handleInlineLocal());
        t5._addCommand$2("dartlang:refactor-rename", t5.get$_handleRenameRefactor());
        t4.push(t5);
        t5 = new V.FindReferencesHelper(null);
        t5._command = t2._commands.add$3(0, "atom-text-editor", "dartlang:find-references", t5.get$_handleReferences());
        t4.push(t5);
        t4.push(G.FindTypeHelper$());
        t5 = new E.TypeHierarchyHelper(null);
        t5._type_hierarchy$_command = t2._commands.add$3(0, "atom-text-editor", "dartlang:type-hierarchy", t5.get$_handleHierarchy());
        t4.push(t5);
        t5 = Q.Dependencies_instance();
        t6 = M.QuickFixHelper$();
        t5._instances.$indexSet(0, C.Type_QuickFixHelper_idk, t6);
        t4.push(t6);
        t6 = Y.ConsoleController$();
        this.consoleController = t6;
        t4.push(t6);
        t6 = Q.Dependencies_instance();
        t5 = [];
        t1 = new K.TestManager(new L.Disposables(true, t5), [new K.FlutterTestRunner(), new K.TestPackageTestRunner(), new K.CliTestRunner()]);
        t5.push(t2._commands.add$3(0, "atom-workspace", "dartlang:run-tests", t1.get$_runTests()));
        t5.push(t2._commands.add$3(0, "atom-workspace", "dartlang:create-test", t1.get$_createTest()));
        t6._instances.$indexSet(0, C.Type_TestManager_KlB, t1);
        t4.push(t1);
        t1 = Q.Dependencies_instance();
        t6 = Y.FlutterSdkManager$();
        t1._instances.$indexSet(0, C.Type_FlutterSdkManager_Ag3, t6);
        t4.push(t6);
        t6 = Q.Dependencies_instance();
        t1 = T.FlutterDaemonManager$();
        t6._instances.$indexSet(0, C.Type_FlutterDaemonManager_8Wd, t1);
        t4.push(t1);
        t1 = Q.Dependencies_instance();
        t6 = [];
        t5 = new R.FlutterDeviceManager(new L.StreamSubscriptions(true, t6), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), null, P.LinkedHashSet_LinkedHashSet(null, null, null, T.Device), C.JSArray_methods.get$first($.$get$FlutterDeviceManager_runModes()));
        t5._updateForDaemon$1(Q.Dependencies_instance().getDependency$1(C.Type_FlutterDaemonManager_8Wd).get$daemon());
        t6.push(Q.Dependencies_instance().getDependency$1(C.Type_FlutterDaemonManager_8Wd).get$onDaemonAvailable().listen$1(t5.get$_updateForDaemon()));
        t1._instances.$indexSet(0, C.Type_FlutterDeviceManager_zjY, t5);
        t4.push(t5);
        t4.push(E.UsageManager$());
        t4.push(Z.RebuildManager$());
        this._registerLinter$0();
        if (C.JSArray_methods.contains$1(P.List_List$from(t2._packages.invoke$1("getAvailablePackageNames"), true, null), "flutter")) {
          Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).registerLaunchType$1(new O.FlutterLaunchType(null, "flutter"));
          Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).registerLaunchType$1(new T.MojoLaunchType(null, "mojo"));
        }
        Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).registerLaunchType$1(new Z.CliLaunchType("cli"));
        Q.Dependencies_instance().getDependency$1(C.Type_LaunchManager_mXK).registerLaunchType$1(new S.ShellLaunchType("shell"));
        t4.push(t2._commands.add$3(0, "atom-workspace", "dartlang:settings", new R.AtomDartPackage_activate_closure0()));
        t4.push(t2._commands.add$3(0, "atom-workspace", "dartlang:reanalyze-sources", new R.AtomDartPackage_activate_closure1()));
        t1 = $.$get$flutter();
        t1 = t1.get$enable(t1);
        t4.push(t2._commands.add$3(0, "atom-workspace", "flutter:enable", t1));
        t3 = t3.get$enable(t3);
        t4.push(t2._commands.add$3(0, "atom-workspace", "dartino:enable", t3));
        t4.push(t2._commands.add$3(0, "atom-workspace", "dartlang:send-feedback", new R.AtomDartPackage_activate_closure2(this)));
        t4.push(t2._commands.add$3(0, "atom-text-editor", "dartlang:newline", B.editing__handleEnterKey$closure()));
        t3 = $.$get$ContextMenuItem_separator();
        treeItems = [t3];
        C.JSArray_methods.addAll$1(treeItems, [new L._RunAppContextCommand("Run Application", "dartlang:run-application")]);
        C.JSArray_methods.addAll$1(treeItems, [new R.PubContextCommand(true, "Pub Get", "dartlang:pub-get"), new R.PubContextCommand(true, "Pub Upgrade", "dartlang:pub-upgrade"), new R.PubContextCommand(false, "Pub Run\u2026", "dartlang:pub-run"), new R.PubContextCommand(false, "Pub Global Run\u2026", "dartlang:pub-global-run")]);
        C.JSArray_methods.addAll$1(treeItems, []);
        treeItems.push(t3);
        t4.push(t2._contextMenu.add$2(0, ".tree-view", treeItems));
        t4.push(K.BufferObserverManager$());
        P.Timer_Timer(C.Duration_0, this.get$_initPlugin());
      },
      _initPlugin$0: [function() {
        F.install();
        this.loadPackageJson$0().then$1(this.get$_verifyPackages());
        this._validateSettings$0();
      }, "call$0", "get$_initPlugin", 0, 0, 2],
      _validateSettings$0: function() {
        new R.AtomDartPackage__validateSettings_closure().call$2("_firstRun", new R.AtomDartPackage__validateSettings_closure0(this));
      },
      _verifyPackages$1: [function(m) {
        var t1, t2;
        t1 = $.$get$atom();
        if (C.JSArray_methods.contains$1(P.List_List$from(t1._packages.invoke$1("getAvailablePackageNames"), true, null), "emmet") && t1._packages.invoke$2("isPackageDisabled", "emmet") !== true) {
          t2 = $.$get$state();
          if (J.$index$asx(t2._pluginState, "emmet") == null) {
            t2.$indexSet(0, "emmet", true);
            t1 = t1._notifications;
            t1.invoke$3("addWarning", "The emmet package has severe performance issues when editing Dart files. It is recommended to disable emmet until issue https://github.com/emmetio/emmet-atom/issues/319 is fixed.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, true, null));
          }
        }
      }, "call$1", "get$_verifyPackages", 2, 0, 196, 6],
      _handleSendFeedback$0: function() {
        S.getSystemDescription(false).then$1(new R.AtomDartPackage__handleSendFeedback_closure());
      },
      serialize$0: [function() {
        return $.$get$state().saveState$0();
      }, "call$0", "get$serialize", 0, 0, 1],
      _registerLinter$0: function() {
        var errorController, flushController, t1, t2, registerListeners;
        errorController = P.StreamController_StreamController$broadcast(null, null, false, E.AnalysisErrors);
        flushController = P.StreamController_StreamController$broadcast(null, null, false, E.AnalysisFlushResults);
        Q.Dependencies_instance().getDependency$1(C.Type_ErrorRepository_jfx).initStreams$2(new P._BroadcastStream(errorController, [H.getTypeArgumentByIndex(errorController, 0)]), new P._BroadcastStream(flushController, [H.getTypeArgumentByIndex(flushController, 0)]));
        this._consumer = D.DartLinterConsumer$(Q.Dependencies_instance().getDependency$1(C.Type_ErrorRepository_jfx));
        t1 = Q.Dependencies_instance();
        t2 = this._consumer;
        t1._instances.$indexSet(0, C.Type_DartLinterConsumer_B8J, t2);
        registerListeners = new R.AtomDartPackage__registerLinter_closure(errorController, flushController);
        if (Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive())
          registerListeners.call$0();
        t1 = Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$onActive();
        new P._WhereStream(new R.AtomDartPackage__registerLinter_closure0(), t1, [H.getTypeArgumentByIndex(t1, 0)])._createSubscription$4(new R.AtomDartPackage__registerLinter_closure1(registerListeners), null, null, false);
      },
      _setupLogging$0: function() {
        this.disposables._disposables.push($.$get$atom()._config.observe$3(0, "dartlang.logging", null, new R.AtomDartPackage__setupLogging_closure()));
      },
      AtomDartPackage$0: function() {
        this.registerServiceConsumer$2("consumeStatusBar", new R.AtomDartPackage_closure(this));
        this.registerServiceConsumer$2("consumeToolbar", new R.AtomDartPackage_closure0(this));
        this.registerServiceConsumer$2("consumeLinter", new R.AtomDartPackage_closure1(this));
        J.$indexSet$ax(J.$index$asx(J.$index$asx($.$get$context(), "module"), "exports"), "provideAutocomplete", new R.AtomDartPackage_closure2(new G.DartAutocompleteProvider(".source.dart", null, 100, true, true)));
      },
      static: {
        AtomDartPackage$: function() {
          var t1 = new R.AtomDartPackage(new L.Disposables(true, []), new L.StreamSubscriptions(true, []), null, null, null, P.LinkedHashMap__makeEmpty(), "dartlang");
          t1.AtomDartPackage$0();
          return t1;
        }
      }
    },
    AtomDartPackage_closure: {
      "^": "Closure:13;$this",
      call$1: [function(obj) {
        var statusBar, t1, t2, t3, t4, statusDisplay;
        statusBar = new T.StatusBar(obj);
        t1 = this.$this;
        t2 = t1.errorsController;
        if (t2 != null) {
          t2 = t2.statusElement;
          t2.toString;
          t3 = K.CoreElement$("div", null, "dartlang", null);
          t3.clazz$1("inline-block");
          t4 = K.CoreElement$("span", null, "badge subtle", null);
          t2._errors$_badgeSpan = t4;
          t3.add$1(0, [t4]);
          t2._errors$_element = t3;
          t3.click$1(0, t2.parent.get$toggleView());
          t2.statusTile = statusBar.addLeftTile$2$item$priority(t2._errors$_element.element, -100);
          if (t2._errors$_showing !== true)
            J.set$display$x(J.get$style$x(t2._errors$_element.element), "none");
          t2._errors$_handleErrorsChanged$1([]);
        }
        t2 = t1.consoleController;
        if (t2 != null) {
          t2 = t2.statusElement;
          t2.toString;
          t3 = K.CoreElement$("div", null, "dartlang process-status-bar", null);
          t3.clazz$1("inline-block");
          t4 = K.CoreElement$("span", null, "badge", null);
          t2._badgeSpan = t4;
          t3.add$1(0, [t4]);
          t2._console$_element = t3;
          t3.click$1(0, t2.parent.get$_toggleViews());
          t2.statusTile = statusBar.addLeftTile$2$item$priority(t2._console$_element.element, -99);
          if (!t2._showing)
            J.set$display$x(J.get$style$x(t2._console$_element.element), "none");
          t2._handleLaunchesChanged$0();
        }
        statusDisplay = E.StatusDisplay$(statusBar);
        t1.disposables._disposables.push(statusDisplay);
        return statusDisplay;
      }, null, null, 2, 0, null, 5, "call"]
    },
    AtomDartPackage_closure0: {
      "^": "Closure:13;$this",
      call$1: [function(obj) {
        var $toolbar = U.DartToolbarContribution$(new M.Toolbar(obj));
        this.$this.disposables._disposables.push($toolbar);
        return $toolbar;
      }, null, null, 2, 0, null, 5, "call"]
    },
    AtomDartPackage_closure1: {
      "^": "Closure:13;$this",
      call$1: [function(obj) {
        var t1 = this.$this._consumer;
        t1._service = new E.LinterService(obj);
        return t1;
      }, null, null, 2, 0, null, 5, "call"]
    },
    AtomDartPackage_closure2: {
      "^": "Closure:1;dartCompleterProvider",
      call$0: [function() {
        return this.dartCompleterProvider.toProxy$0();
      }, null, null, 0, 0, null, "call"]
    },
    AtomDartPackage_activate_closure: {
      "^": "Closure:3;",
      call$1: [function(version) {
        $.pluginVersion = version;
      }, null, null, 2, 0, null, 77, "call"]
    },
    AtomDartPackage_activate_closure0: {
      "^": "Closure:0;",
      call$1: function(_) {
        $.$get$atom()._workspace.openConfigPage$1$packageID("dartlang");
      }
    },
    AtomDartPackage_activate_closure1: {
      "^": "Closure:0;",
      call$1: function(_) {
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new L.ProjectScanJob("Refresh Dart project list", null)).then$1(new R.AtomDartPackage_activate__closure()).then$1(new R.AtomDartPackage_activate__closure0());
      }
    },
    AtomDartPackage_activate__closure: {
      "^": "Closure:0;",
      call$1: [function(_) {
        return P.Future_Future$delayed(P.Duration$(0, 0, 0, 100, 0, 0), null, null);
      }, null, null, 2, 0, null, 1, "call"]
    },
    AtomDartPackage_activate__closure0: {
      "^": "Closure:0;",
      call$1: [function(_) {
        var t1;
        if (Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$isActive())
          Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).reanalyzeSources$0();
        else {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "Analysis server not active.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
        }
      }, null, null, 2, 0, null, 1, "call"]
    },
    AtomDartPackage_activate_closure2: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        return this.$this._handleSendFeedback$0();
      }
    },
    AtomDartPackage__validateSettings_closure: {
      "^": "Closure:74;",
      call$2: function($name, fn) {
        var t1 = $.$get$atom();
        if (!J.$eq$(t1._config.getValue$2$scope("_dartlang." + $name, null), true)) {
          t1._config.invoke$3("set", "_dartlang." + $name, true);
          fn.call$0();
        }
      }
    },
    AtomDartPackage__validateSettings_closure0: {
      "^": "Closure:1;$this",
      call$0: [function() {
        Q.Dependencies_instance().getDependency$1(C.Type_StatusViewManager_tnX).toggleView$0();
        var t1 = $.$get$atom();
        t1._config.invoke$3("set", "autocomplete-plus.autoActivationDelay", 500);
        t1._config.invoke$3("set", "core.followSymlinks", false);
      }, null, null, 0, 0, null, "call"]
    },
    AtomDartPackage__handleSendFeedback_closure: {
      "^": "Closure:3;",
      call$1: [function(description) {
        $.$get$shell().invoke$2("openExternal", "https://github.com/dart-atom/dartlang/issues/new?body=" + H.S(P._Uri__uriEncode(C.List_KIf, description, C.Utf8Codec_false, false)));
      }, null, null, 2, 0, null, 72, "call"]
    },
    AtomDartPackage__registerLinter_closure: {
      "^": "Closure:1;errorController,flushController",
      call$0: function() {
        var t1 = this.errorController;
        Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$onAnalysisErrors()._createSubscription$4(t1.get$add(t1), null, null, false);
        t1 = this.flushController;
        Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$onAnalysisFlushResults()._createSubscription$4(t1.get$add(t1), null, null, false);
      }
    },
    AtomDartPackage__registerLinter_closure0: {
      "^": "Closure:0;",
      call$1: function(active) {
        return active;
      }
    },
    AtomDartPackage__registerLinter_closure1: {
      "^": "Closure:0;registerListeners",
      call$1: [function(_) {
        this.registerListeners.call$0();
      }, null, null, 2, 0, null, 1, "call"]
    },
    AtomDartPackage__setupLogging_closure: {
      "^": "Closure:0;",
      call$1: [function(val) {
        var t1, _i, level;
        if (val == null)
          return;
        for (t1 = J.getInterceptor$s(val), _i = 0; _i < 10; ++_i) {
          level = C.List_O1R[_i];
          if (t1.toUpperCase$0(val) === level.name) {
            J.set$level$x($.$get$Logger_root(), level);
            break;
          }
        }
        $.$get$_logger().info$1("logging level: " + H.S(J.get$level$x($.$get$Logger_root())));
      }, null, null, 2, 0, null, 15, "call"]
    }
  }], ["atom.projects", "package:atom_dartlang/projects.dart",, L, {
    "^": "",
    isDartBuildFile: function(path) {
      var contents, t1, exception;
      try {
        t1 = $.$get$fs();
        t1.toString;
        contents = t1.invoke$3("readFileSync", path, P.LinkedHashMap__makeLiteral(["encoding", "utf8"]));
        t1 = $.$get$_bazelDartRegex()._nativeRegExp.test(H.checkString(contents)) || $.$get$_bazelFlutterRegex()._nativeRegExp.test(H.checkString(contents));
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return false;
      }
    },
    _isHomeDir: function(dir) {
      var t1, exception;
      try {
        t1 = J.$eq$($.$get$fs()._os.callMethod$1("homedir"), J.get$path$x(dir));
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return false;
      }
    },
    ProjectManager: {
      "^": "Object;_projectsController,_projectAddController,_projectRemoveController,_nonProjectController,_projects$_sub,disposables,_directoryListeners,projects<,_warnedProjects",
      getProjectFor$1: function(path) {
        var t1, t2, _i, project, dir, t3;
        if (path == null)
          return;
        for (t1 = this.projects, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          project = t1[_i];
          dir = J.get$directory$x(project);
          t3 = J.getInterceptor$x(dir);
          if (J.$eq$(t3.get$path(dir), path) || t3.contains$1(dir, path) === true)
            return project;
        }
        return;
      },
      rescanForProjects$0: function() {
        return this._fullScanForProjects$0();
      },
      get$onProjectsChanged: function() {
        var t1 = this._projectsController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onProjectAdd: function() {
        var t1 = this._projectAddController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onProjectRemove: function() {
        var t1 = this._projectRemoveController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onNonProject: function() {
        var t1 = this._nonProjectController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      dispose$0: [function() {
        $.$get$_logger2().fine$1("dispose()");
        this._projects$_sub.cancel$0(0);
        var t1 = this._directoryListeners;
        t1.get$values(t1).forEach$1(0, new L.ProjectManager_dispose_closure());
      }, "call$0", "get$dispose", 0, 0, 2],
      _fullScanForProjects$0: function() {
        var t1, previousDirs, allDirs, t2, t3, t4, _i, dir, projDirs, changed, newDirs;
        t1 = this.projects;
        previousDirs = P.LinkedHashSet_LinkedHashSet$from(new H.MappedListIterable(t1, new L.ProjectManager__fullScanForProjects_closure(), [null, null]), null);
        allDirs = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        for (t2 = $.$get$atom()._project.getDirectories$0(), t3 = t2.length, t4 = this._nonProjectController, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          dir = t2[_i];
          if (dir.existsSync$0() === true) {
            projDirs = this._findDartProjects$2(dir, 4);
            if (projDirs.length !== 0)
              allDirs.addAll$1(0, projDirs);
            else {
              if (!t4.get$_mayAddEvent())
                H.throwExpression(t4._addEventError$0());
              t4._sendData$1(dir);
            }
          }
        }
        for (t2 = new P._LinkedHashSetIterator(previousDirs, previousDirs._collection$_modifications, null, null, [null]), t2._collection$_cell = previousDirs._collection$_first, changed = false; t2.moveNext$0();) {
          dir = t2._collection$_current;
          if (!allDirs.contains$1(0, dir)) {
            C.JSArray_methods._removeWhere$2(t1, new L.ProjectManager__fullScanForProjects_closure0(dir), true);
            $.$get$_logger2().info$1("removed project " + H.S(dir));
            changed = true;
          }
        }
        newDirs = allDirs.difference$1(previousDirs);
        if (newDirs._collection$_length !== 0) {
          newDirs.forEach$1(0, new L.ProjectManager__fullScanForProjects_closure1());
          changed = true;
        }
        C.JSArray_methods.addAll$1(t1, new H.EfficientLengthMappedIterable(newDirs, new L.ProjectManager__fullScanForProjects_closure2(), [H.getTypeArgumentByIndex(newDirs, 0), null]));
        if (changed) {
          $.$get$_logger2().fine$1(H.S(t1));
          t2 = this._projectsController;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(t1);
        }
      },
      _handleProjectPathsChanged$1: [function(allPaths) {
        this._updateChangeListeners$1(allPaths);
        this._fullScanForProjects$0();
      }, "call$1", "get$_handleProjectPathsChanged", 2, 0, 197, 158],
      _updateChangeListeners$1: function(allPaths) {
        var t1, previousPaths, currentPaths, removedPaths, addedPaths, t2, t3, addedPath, dir;
        t1 = this._directoryListeners;
        previousPaths = P.LinkedHashSet_LinkedHashSet$from(t1.get$keys(t1), null);
        currentPaths = P.LinkedHashSet_LinkedHashSet$from(allPaths, null);
        removedPaths = previousPaths.difference$1(currentPaths);
        addedPaths = currentPaths.difference$1(previousPaths);
        for (t2 = [null], t3 = new P._LinkedHashSetIterator(removedPaths, removedPaths._collection$_modifications, null, null, t2), t3._collection$_cell = removedPaths._collection$_first; t3.moveNext$0();)
          J.cancel$0$x(t1.remove$1(0, t3._collection$_current));
        for (t2 = new P._LinkedHashSetIterator(addedPaths, addedPaths._collection$_modifications, null, null, t2), t2._collection$_cell = addedPaths._collection$_first; t2.moveNext$0();) {
          addedPath = t2._collection$_current;
          dir = new F.Directory(F._create("Directory", addedPath, null));
          if (dir.invoke$1("existsSync") === true)
            t1.$indexSet(0, addedPath, dir.eventStream$1("onDidChange")._async$_controller._subscribe$4(new L.ProjectManager__updateChangeListeners_closure(this, dir), null, null, false));
        }
      },
      _handleDirectoryChanged$1: function(dir) {
        if (C.JSArray_methods.any$1(this.projects, new L.ProjectManager__handleDirectoryChanged_closure(dir)) !== L.ProjectManager_isDartProject(dir))
          this._fullScanForProjects$0();
      },
      _findDartProjects$2: function(dir, recurse) {
        var found, entry, e, t1, t2, t3, _i, exception;
        if (L.ProjectManager_isDartProject(dir))
          return [dir];
        if (L._isHomeDir(dir) === true)
          return [];
        t1 = $.$get$fs();
        if (t1.invoke$2("existsSync", t1.join$2(0, J.get$path$x(dir), ".dartignore")) === true)
          return [];
        if (recurse > 0) {
          found = [];
          try {
            for (t1 = dir.getEntriesSync$0(), t2 = t1.length, t3 = recurse - 1, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
              entry = t1[_i];
              if (J.isDirectory$0$x(entry) === true)
                J.addAll$1$ax(found, this._findDartProjects$2(entry, t3));
            }
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            $.$get$_logger2().info$2("Error scanning atom projects", e);
          }
          return found;
        } else
          return [];
      },
      _initProjectControllers$0: function() {
        var t1 = this._projectsController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new L.ProjectManager__initProjectControllers_closure(this, P.LinkedHashMap__makeEmpty()));
        t1 = this._nonProjectController;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new L.ProjectManager__initProjectControllers_closure0(this));
      },
      ProjectManager$0: function() {
        this._projects$_sub = H.subtypeCast($.$get$atom()._project.eventStream$1("onDidChangePaths"), "$isStream", [[P.List, P.String]], "$asStream").listen$1(this.get$_handleProjectPathsChanged());
        P.Timer_Timer(C.Duration_0, new L.ProjectManager_closure(this));
        this._initProjectControllers$0();
      },
      $isDisposable: 1,
      static: {
        ProjectManager_isDartProject: function(dir) {
          var t1, t2, buildFilePath;
          t1 = $.$get$fs();
          t2 = J.getInterceptor$x(dir);
          if (t1.invoke$2("existsSync", t1.join$2(0, t2.get$path(dir), ".dartignore")) === true)
            return false;
          if (t1.invoke$2("existsSync", t1.join$2(0, t2.get$path(dir), "pubspec.yaml")) === true)
            return true;
          if (t1.invoke$2("existsSync", t1.join$2(0, t2.get$path(dir), ".packages")) === true)
            return true;
          if (t1.invoke$2("existsSync", t1.join$2(0, t2.get$path(dir), "analysis_options.yaml")) === true)
            return true;
          buildFilePath = t1.join$2(0, t2.get$path(dir), "BUILD");
          if (t1.invoke$2("existsSync", buildFilePath) === true)
            if (L.isDartBuildFile(buildFilePath) === true)
              return true;
          $.$get$dartino().toString;
          if (t1.invoke$2("existsSync", t1.join$2(0, dir, "dartino.yaml")) === true)
            return true;
          return false;
        },
        ProjectManager$: function() {
          var t1 = new L.ProjectManager(P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), null, new L.Disposables(true, []), P.LinkedHashMap__makeEmpty(), [], P.LinkedHashSet_LinkedHashSet(null, null, null, null));
          t1.ProjectManager$0();
          return t1;
        }
      }
    },
    ProjectManager_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        var t1 = this.$this;
        t1._fullScanForProjects$0();
        t1._updateChangeListeners$1(P.List_List$from($.$get$atom()._project.invoke$1("getPaths"), true, null));
      }
    },
    ProjectManager_dispose_closure: {
      "^": "Closure:198;",
      call$1: function(sub) {
        return J.cancel$0$x(sub);
      }
    },
    ProjectManager__fullScanForProjects_closure: {
      "^": "Closure:0;",
      call$1: [function(p) {
        return J.get$directory$x(p);
      }, null, null, 2, 0, null, 159, "call"]
    },
    ProjectManager__fullScanForProjects_closure0: {
      "^": "Closure:0;dir",
      call$1: function(p) {
        return J.$eq$(J.get$directory$x(p), this.dir);
      }
    },
    ProjectManager__fullScanForProjects_closure1: {
      "^": "Closure:0;",
      call$1: function(dir) {
        return $.$get$_logger2().info$1("added project " + H.S(dir));
      }
    },
    ProjectManager__fullScanForProjects_closure2: {
      "^": "Closure:0;",
      call$1: [function(dir) {
        var t1, t2;
        t1 = new L.DartProject(dir, null, null, null, null, null);
        t2 = J.getInterceptor$x(dir);
        t1.pubspecFile = t2.getFile$1(dir, "pubspec.yaml");
        t1.dotPackages = t2.getFile$1(dir, ".packages");
        return t1;
      }, null, null, 2, 0, null, 21, "call"]
    },
    ProjectManager__updateChangeListeners_closure: {
      "^": "Closure:0;$this,dir",
      call$1: [function(_) {
        return this.$this._handleDirectoryChanged$1(this.dir);
      }, null, null, 2, 0, null, 1, "call"]
    },
    ProjectManager__handleDirectoryChanged_closure: {
      "^": "Closure:78;dir",
      call$1: function(project) {
        return J.$eq$(J.get$directory$x(project), this.dir);
      }
    },
    ProjectManager__initProjectControllers_closure: {
      "^": "Closure:38;$this,knownProjects",
      call$1: [function(projects) {
        var current, t1, t2, t3, t4, project, path, _i, projectPath;
        current = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        for (t1 = J.get$iterator$ax(projects), t2 = this.knownProjects, t3 = this.$this, t4 = t3._projectAddController; t1.moveNext$0();) {
          project = t1.get$current();
          path = J.get$path$x(project);
          current.add$1(0, path);
          if (!t2.containsKey$1(0, path)) {
            t2.$indexSet(0, path, project);
            if (!t4.get$_mayAddEvent())
              H.throwExpression(t4._addEventError$0());
            t4._sendData$1(project);
          }
        }
        for (t1 = t2.get$keys(t2).toList$0(0), t4 = t1.length, t3 = t3._projectRemoveController, _i = 0; _i < t1.length; t1.length === t4 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          projectPath = t1[_i];
          if (!current.contains$1(0, projectPath)) {
            project = t2.remove$1(0, projectPath);
            if (!t3.get$_mayAddEvent())
              H.throwExpression(t3._addEventError$0());
            t3._sendData$1(project);
          }
        }
      }, null, null, 2, 0, null, 29, "call"]
    },
    ProjectManager__initProjectControllers_closure0: {
      "^": "Closure:199;$this",
      call$1: [function(dir) {
        var t1, path, t2, t3, t4;
        t1 = J.getInterceptor$x(dir);
        if (L.ProjectManager_isDartProject(t1.getParent$0(dir))) {
          path = t1.get$path(dir);
          t2 = this.$this._warnedProjects;
          if (!t2.contains$1(0, path)) {
            t2.add$1(0, path);
            t2 = $.$get$atom()._notifications;
            t3 = "'" + H.S(dir.getBaseName$0()) + "/' directory opened";
            t4 = "You've opened the '" + H.S(dir.getBaseName$0()) + "/' directory directly.\n" + H.S(path) + "\n\nFor Dart analysis to work well, you should open the parent instead.\n";
            t1 = t1.getParent$0(dir);
            t2.invoke$3("addWarning", t3, t2._options$5$buttons$description$detail$dismissable$icon(null, t4 + H.S(t1.get$path(t1)), null, true, null));
          }
        }
      }, null, null, 2, 0, null, 21, "call"]
    },
    DartProject: {
      "^": "Object;directory>,pubspecFile,dotPackages,_analysisOptions,_pubspecDigest,_pubspecContents",
      get$path: function(_) {
        return J.get$path$x(this.directory);
      },
      get$name: function(_) {
        return this.directory.getBaseName$0();
      },
      get$workspaceRelativeName: function() {
        var t1, relPaths, t2, t3;
        t1 = this.directory;
        relPaths = P.List_List$from($.$get$atom()._project.invoke$2("relativizePath", J.get$path$x(t1)), true, null);
        t2 = relPaths.length;
        if (0 >= t2)
          return H.ioore(relPaths, 0);
        t3 = relPaths[0];
        if (t3 == null)
          return t1.getBaseName$0();
        t1 = $.$get$fs();
        if (0 >= t2)
          return H.ioore(relPaths, 0);
        t3 = t1.basename$1(t3);
        if (1 >= relPaths.length)
          return H.ioore(relPaths, 1);
        return t1.join$2(0, t3, relPaths[1]);
      },
      getSelfRefName$0: function() {
        var contents = this.getPubspecContents$0();
        return contents == null ? null : J.$index$asx(contents, "name");
      },
      getPubspecContents$0: function() {
        var newDigest, exception;
        if (this.pubspecFile.existsSync$0() !== true)
          return;
        newDigest = this.pubspecFile.readSync$0();
        if (this._pubspecContents == null || !J.$eq$(this._pubspecDigest, newDigest))
          try {
            this._pubspecContents = J.get$value$x(B.loadYamlDocument(newDigest, null).contents);
            this._pubspecDigest = newDigest;
          } catch (exception) {
            H.unwrapException(exception);
            this._pubspecContents = null;
          }
        return this._pubspecContents;
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this.directory);
      },
      contains$1: function(_, path) {
        return J.contains$1$asx(this.directory, path);
      },
      getRelative$1: function(p) {
        return $.$get$fs().relativize$2(J.get$path$x(this.directory), p);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof L.DartProject && J.$eq$(this.directory, other.directory);
      },
      toString$0: function(_) {
        return "[Project " + H.S(this.directory.getBaseName$0()) + "]";
      },
      importsPackage$1: function(packageName) {
        var lines, t1, exception;
        if (this.dotPackages.existsSync$0() === true)
          try {
            lines = J.split$1$s(this.dotPackages.readSync$0(), "\n");
            t1 = new H.MappedListIterable(lines, new L.DartProject_importsPackage_closure(), [null, null]).any$1(0, new L.DartProject_importsPackage_closure0(packageName));
            return t1;
          } catch (exception) {
            H.unwrapException(exception);
          }
        return false;
      },
      directlyImportsPackage$1: function(packageName) {
        var pubspec, t1;
        pubspec = this.getPubspecContents$0();
        if (pubspec == null)
          return false;
        t1 = J.getInterceptor$asx(pubspec);
        if (t1.$index(pubspec, "dependencies") != null)
          if (J.$index$asx(t1.$index(pubspec, "dependencies"), packageName) != null)
            return true;
        if (t1.$index(pubspec, "dev_dependencies") != null)
          if (J.$index$asx(t1.$index(pubspec, "dev_dependencies"), packageName) != null)
            return true;
        return false;
      },
      isFlutterProject$0: function() {
        return this.directlyImportsPackage$1("flutter");
      },
      isDartinoProject$0: function() {
        $.$get$dartino().toString;
        var t1 = $.$get$fs();
        return t1.invoke$2("existsSync", t1.join$2(0, this.directory, "dartino.yaml"));
      }
    },
    DartProject_importsPackage_closure: {
      "^": "Closure:0;",
      call$1: [function(line) {
        return J.trim$0$s(line);
      }, null, null, 2, 0, null, 47, "call"]
    },
    DartProject_importsPackage_closure0: {
      "^": "Closure:3;packageName",
      call$1: function(line) {
        return J.startsWith$1$s(line, this.packageName + ":");
      }
    },
    ProjectScanJob: {
      "^": "Job;name,_schedulingRule",
      run$0: [function() {
        Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).rescanForProjects$0();
        return P.Future_Future$delayed(P.Duration$(0, 0, 0, 0, 0, 1), null, null);
      }, "call$0", "get$run", 0, 0, 5]
    }
  }], ["atom.sdk", "package:atom_dartlang/sdk.dart",, V, {
    "^": "",
    SdkManager: {
      "^": "Object;_sdk$_controller,_sdk$_prefSub,_sdk$_commands,_sdk$_sdk,_alreadyWarned",
      get$hasSdk: function() {
        return this._sdk$_sdk != null;
      },
      get$sdk: function() {
        return this._sdk$_sdk;
      },
      get$noSdkPathConfigured: function() {
        var currentPath = $.$get$atom()._config.getValue$1("dartlang.sdkLocation");
        return currentPath == null || J.get$isEmpty$asx(currentPath) === true;
      },
      showNoSdkMessage$1$messagePrefix: function(messagePrefix) {
        var t1 = $.$get$atom()._notifications;
        t1.invoke$3("addInfo", "No Dart SDK found.", t1._options$5$buttons$description$detail$dismissable$icon(null, "You can configure your SDK location in Settings > Packages > dart-lang > Settings.", null, true, null));
      },
      showNoSdkMessage$0: function() {
        return this.showNoSdkMessage$1$messagePrefix(null);
      },
      tryToAutoConfigure$1$verbose: function(verbose) {
        return new V.SdkDiscovery().discoverSdk$0().then$1(new V.SdkManager_tryToAutoConfigure_closure(true));
      },
      tryToAutoConfigure$0: function() {
        return this.tryToAutoConfigure$1$verbose(true);
      },
      get$onSdkChange: function() {
        var t1 = this._sdk$_controller;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      setSdkPath$1: function(path) {
        $.$get$atom()._config.invoke$3("set", "dartlang.sdkLocation", path);
      },
      _sdk$_setSdk$2$verbose: function(sdk, verbose) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, path, t1, version, t2;
        var $async$_sdk$_setSdk$2$verbose = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (sdk != null && !sdk.get$isValidSdk()) {
                  path = J.$index$asx(sdk.directory.obj, "path");
                  if (verbose)
                    if (path == null || J.get$isEmpty$asx(path) === true) {
                      t1 = $.$get$atom()._notifications;
                      t1.invoke$3("addWarning", "No Dart SDK configured.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
                    } else {
                      t1 = $.$get$atom()._notifications;
                      t1.invoke$3("addWarning", "Unable to locate Dart SDK.", t1._options$5$buttons$description$detail$dismissable$icon(null, "No SDK at " + H.S(path) + ".", null, null, null));
                    }
                  sdk = null;
                }
                t1 = $async$self._sdk$_sdk;
                if (sdk == null ? t1 == null : sdk === t1) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$self._sdk$_sdk = sdk;
                $async$goto = sdk != null ? 3 : 5;
                break;
              case 3:
                // then
                $async$goto = 6;
                return P._asyncHelper(sdk.getVersion$0(), $async$_sdk$_setSdk$2$verbose, $async$completer);
              case 6:
                // returning from await.
                version = $async$result;
                $.$get$_logger32().info$1("version " + H.S(version) + " (" + H.S(J.$index$asx($async$self._sdk$_sdk.directory.obj, "path")) + ")");
                if (verbose) {
                  t1 = $.$get$atom()._notifications;
                  t1.invoke$3("addSuccess", "Found Dart SDK version " + H.S(version) + ".", t1._options$5$buttons$description$detail$dismissable$icon(null, null, J.$index$asx(sdk.directory.obj, "path"), null, null));
                }
                $async$self._verifyMinVersion$2($async$self._sdk$_sdk, version);
                t1 = $async$self._sdk$_controller;
                t2 = $async$self._sdk$_sdk;
                if (!t1.get$_mayAddEvent())
                  H.throwExpression(t1._addEventError$0());
                t1._sendData$1(t2);
                // goto join
                $async$goto = 4;
                break;
              case 5:
                // else
                t1 = $async$self._sdk$_controller;
                if (!t1.get$_mayAddEvent())
                  H.throwExpression(t1._addEventError$0());
                t1._sendData$1(sdk);
              case 4:
                // join
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_sdk$_setSdk$2$verbose, $async$completer);
      },
      _sdk$_setSdk$1: function(sdk) {
        return this._sdk$_setSdk$2$verbose(sdk, false);
      },
      dispose$0: [function() {
        this._sdk$_prefSub.cancel$0(0);
        this._sdk$_commands.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _verifyMinVersion$2: function(currentSdk, version) {
        var installedVersion, t1, exception;
        if (version == null)
          return;
        try {
          installedVersion = T.Version_Version$parse(version);
          t1 = $.SdkManager__minVersion;
          if (t1 != null && J.$lt$n(J.compareTo$1$ns(installedVersion, t1), 0))
            if (!this._alreadyWarned) {
              this._alreadyWarned = true;
              t1 = $.$get$atom()._notifications;
              t1.invoke$3("addWarning", "SDK version " + H.S(installedVersion) + " is older than the recommended version of " + H.S($.SdkManager__minVersion) + ". Please visit www.dartlang.org to download a recent SDK.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, "Using SDK at " + H.S(J.$index$asx(currentSdk.directory.obj, "path")) + ".", true, null));
            }
        } catch (exception) {
          H.unwrapException(exception);
        }
      },
      SdkManager$0: function() {
        var t1, currentPath, sdk, t2;
        t1 = $.$get$atom();
        currentPath = t1._config.getValue$1("dartlang.sdkLocation");
        if (currentPath == null || J.get$isEmpty$asx(currentPath) === true)
          P.Future_Future$delayed(P.Duration$(0, 0, 0, 0, 0, 4), new V.SdkManager_closure(this), null);
        else {
          sdk = V.Sdk_Sdk$fromPath(currentPath);
          if (sdk != null && sdk.get$isValidSdk())
            this._sdk$_setSdk$1(sdk);
        }
        t2 = t1._config.onDidChange$1("dartlang.sdkLocation");
        this._sdk$_prefSub = new M.Debounce(P.Duration$(0, 0, 0, 0, 0, 1), [null]).bind$1(t2).listen$1(new V.SdkManager_closure0(this));
        this._sdk$_commands._disposables.push(t1._commands.add$3(0, "atom-workspace", "dartlang:auto-locate-sdk", new V.SdkManager_closure1()));
      },
      $isDisposable: 1,
      static: {
        SdkManager_minVersion: function(minVersion) {
          var t1 = $.SdkManager__minVersion;
          if (t1 == null || J.$lt$n(t1.compareTo$1(0, minVersion), 0))
            $.SdkManager__minVersion = minVersion;
        },
        SdkManager$: function() {
          var t1 = new V.SdkManager(P.StreamController_StreamController$broadcast(null, null, true, null), null, new L.Disposables(true, []), null, false);
          t1.SdkManager$0();
          return t1;
        }
      }
    },
    SdkManager_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        if (!Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH).get$hasSdk())
          this.$this.tryToAutoConfigure$0();
      }
    },
    SdkManager_closure0: {
      "^": "Closure:0;$this",
      call$1: [function(value) {
        this.$this._sdk$_setSdk$2$verbose(V.Sdk_Sdk$fromPath(value), true);
        return;
      }, null, null, 2, 0, null, 7, "call"]
    },
    SdkManager_closure1: {
      "^": "Closure:0;",
      call$1: function(_) {
        var t1 = Q.Dependencies_instance().getDependency$1(C.Type_SdkManager_OHH);
        Q.Dependencies_instance().getDependency$1(C.Type_JobManager_cMb).schedule$1(new V.SdkLocationJob(t1, "Auto locate SDK", null));
      }
    },
    SdkManager_tryToAutoConfigure_closure: {
      "^": "Closure:3;verbose",
      call$1: [function(sdkPath) {
        var t1;
        if (sdkPath != null) {
          $.$get$atom()._config.invoke$3("set", "dartlang.sdkLocation", sdkPath);
          return true;
        } else {
          if (this.verbose) {
            t1 = $.$get$atom()._notifications;
            t1.invoke$3("addWarning", "Unable to auto-locate a Dart SDK.", t1._options$5$buttons$description$detail$dismissable$icon(null, null, null, null, null));
          }
          return false;
        }
      }, null, null, 2, 0, null, 41, "call"]
    },
    Sdk: {
      "^": "Object;directory>",
      get$isValidSdk: function() {
        var t1 = this.directory;
        return new F.File(F._cvt0(t1.invoke$2("getFile", "version"))).invoke$1("existsSync") === true && new F.Directory(t1.invoke$2("getSubdirectory", "bin")).invoke$1("existsSync") === true;
      },
      get$path: function(_) {
        return J.$index$asx(this.directory.obj, "path");
      },
      getVersion$0: function() {
        var file, t1;
        file = new F.File(F._cvt0(this.directory.invoke$2("getFile", "version")));
        if (file.invoke$1("existsSync") === true)
          return H.subtypeCast(K.promiseToFuture(file.invoke$2("read", null)), "$isFuture", [P.String], "$asFuture").then$1(new V.Sdk_getVersion_closure());
        else {
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
      },
      get$dartVm: function() {
        var t1 = this.directory;
        if ($.$get$isWindows() === true)
          return new F.File(F._create("File", $.$get$fs().join$3(0, t1, "bin", "dart.exe"), null));
        else
          return new F.File(F._create("File", $.$get$fs().join$3(0, t1, "bin", "dart"), null));
      },
      getSnapshotPath$1: function(snapshotName) {
        return J.$index$asx(F._create("File", $.$get$fs().join$4(0, this.directory, "bin", "snapshots", snapshotName), null), "path");
      },
      execBin$4$cwd$startProcess: function(binName, args, cwd, startProcess) {
        var runner;
        if (cwd instanceof F.Directory)
          cwd = J.$index$asx(cwd.obj, "path");
        runner = X.ProcessRunner_ProcessRunner$underShell(this.getToolPath$1(binName), args, cwd, null);
        runner.execStreaming$0();
        return runner;
      },
      execBin$2: function(binName, args) {
        return this.execBin$4$cwd$startProcess(binName, args, null, true);
      },
      execBin$3$cwd: function(binName, args, cwd) {
        return this.execBin$4$cwd$startProcess(binName, args, cwd, true);
      },
      execBinSimple$3$cwd: function(binName, args, cwd) {
        return X.ProcessRunner_ProcessRunner$underShell(this.getToolPath$1(binName), args, cwd, null).execSimple$0();
      },
      execBinSimple$2: function(binName, args) {
        return this.execBinSimple$3$cwd(binName, args, null);
      },
      getToolPath$1: function(toolName) {
        var t1, t2;
        t1 = $.$get$fs();
        t2 = $.$get$isWindows() === true ? toolName + ".bat" : toolName;
        return t1.join$3(0, this.directory, "bin", t2);
      },
      toString$0: function(_) {
        return this.directory.invoke$1("getPath");
      },
      static: {
        Sdk_Sdk$fromPath: function(path) {
          if (path == null)
            return;
          return new V.Sdk(new F.Directory(F._create("Directory", $.$get$fs().resolveTilde$1(path), null)));
        }
      }
    },
    Sdk_getVersion_closure: {
      "^": "Closure:0;",
      call$1: [function(data) {
        return J.trim$0$s(data);
      }, null, null, 2, 0, null, 11, "call"]
    },
    SdkDiscovery: {
      "^": "Object;",
      discoverSdk$0: function() {
        return this._discoverSdk$0().then$1(new V.SdkDiscovery_discoverSdk_closure(this));
      },
      _discoverSdk$0: function() {
        if ($.$get$isMac() === true)
          return M.which("dart", false).then$1(new V.SdkDiscovery__discoverSdk_closure(this)).catchError$1(new V.SdkDiscovery__discoverSdk_closure0());
        else if ($.$get$isWindows() === true)
          return M.which("dart", false).then$1(new V.SdkDiscovery__discoverSdk_closure1(this)).catchError$1(new V.SdkDiscovery__discoverSdk_closure2());
        else
          return M.which("dart", false).then$1(new V.SdkDiscovery__discoverSdk_closure3(this)).catchError$1(new V.SdkDiscovery__discoverSdk_closure4());
      },
      _tryFlutterSdk$0: function() {
        if (!Q.Dependencies_instance().getDependency$1(C.Type_FlutterSdkManager_Ag3).get$hasSdk())
          return;
        return Q.Dependencies_instance().getDependency$1(C.Type_FlutterSdkManager_Ag3).get$sdk().get$dartSdkPath();
      },
      _resolveSdkFromVm$1: function(vmPath) {
        if (vmPath == null || J.get$isEmpty$asx(vmPath) === true)
          return;
        return J.$index$asx(new F.Directory(new F.File(F._create("File", new F.File(F._create("File", J.trim$0$s(vmPath), null)).invoke$1("getRealPathSync"), null)).invoke$1("getParent")).invoke$1("getParent"), "path");
      }
    },
    SdkDiscovery_discoverSdk_closure: {
      "^": "Closure:3;$this",
      call$1: [function(sdkPath) {
        return sdkPath != null ? sdkPath : this.$this._tryFlutterSdk$0();
      }, null, null, 2, 0, null, 41, "call"]
    },
    SdkDiscovery__discoverSdk_closure: {
      "^": "Closure:3;$this",
      call$1: [function(result) {
        var t1, index;
        result = this.$this._resolveSdkFromVm$1(result);
        if (result != null) {
          t1 = J.getInterceptor$asx(result);
          index = t1.indexOf$1(result, "/Cellar/dart/");
          if (!J.$eq$(index, -1) && t1.endsWith$1(result, "/libexec"))
            result = t1.substring$2(result, 0, index) + "/opt/dart/libexec";
        }
        return result;
      }, null, null, 2, 0, null, 3, "call"]
    },
    SdkDiscovery__discoverSdk_closure0: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return;
      }, null, null, 2, 0, null, 0, "call"]
    },
    SdkDiscovery__discoverSdk_closure1: {
      "^": "Closure:3;$this",
      call$1: [function(result) {
        return this.$this._resolveSdkFromVm$1(result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    SdkDiscovery__discoverSdk_closure2: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return;
      }, null, null, 2, 0, null, 0, "call"]
    },
    SdkDiscovery__discoverSdk_closure3: {
      "^": "Closure:3;$this",
      call$1: [function(result) {
        return this.$this._resolveSdkFromVm$1(result);
      }, null, null, 2, 0, null, 3, "call"]
    },
    SdkDiscovery__discoverSdk_closure4: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return;
      }, null, null, 2, 0, null, 0, "call"]
    },
    SdkLocationJob: {
      "^": "Job;sdkManager,name,_schedulingRule",
      get$quiet: function() {
        return true;
      },
      run$0: [function() {
        this.sdkManager.tryToAutoConfigure$1$verbose(true);
        return P.Future_Future$delayed(P.Duration$(0, 0, 0, 500, 0, 0), null, null);
      }, "call$0", "get$run", 0, 0, 5]
    }
  }], ["atom.state", "package:atom_dartlang/state.dart",, K, {
    "^": "",
    State: {
      "^": "Object;_pluginState,_storables,_state$_controllers",
      $index: function(_, key) {
        return J.$index$asx(this._pluginState, key);
      },
      $indexSet: function(_, key, value) {
        var t1;
        J.$indexSet$ax(this._pluginState, key, value);
        t1 = this._state$_controllers;
        if (t1.$index(0, key) != null) {
          t1 = t1.$index(0, key);
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(value);
        }
      },
      registerStorable$2: function(key, storable) {
        var data, e, t1, exception;
        try {
          this._storables.$indexSet(0, key, storable);
          data = J.$index$asx(this._pluginState, key);
          t1 = data;
          storable.initFromStored$1(typeof t1 === "string" ? C.JsonCodec_null_null.decode$1(data) : null);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          P.print("Exception restoring state: " + H.S(e));
        }
      },
      onValueChanged$1: function(key) {
        var t1, controller;
        t1 = this._state$_controllers;
        if (t1.$index(0, key) != null) {
          t1 = t1.$index(0, key);
          t1.toString;
          return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
        } else {
          controller = P.StreamController_StreamController$broadcast(new K.State_onValueChanged_closure(this, key), null, true, null);
          t1.$indexSet(0, key, controller);
          return new P._BroadcastStream(controller, [H.getTypeArgumentByIndex(controller, 0)]);
        }
      },
      saveState$0: function() {
        this._storables.forEach$1(0, new K.State_saveState_closure(this));
        return this._pluginState;
      }
    },
    State_onValueChanged_closure: {
      "^": "Closure:1;$this,key",
      call$0: function() {
        return this.$this._state$_controllers.remove$1(0, this.key);
      }
    },
    State_saveState_closure: {
      "^": "Closure:200;$this",
      call$2: function(key, storable) {
        J.$indexSet$ax(this.$this._pluginState, key, C.JsonCodec_null_null.encode$1(storable.toStorable$0()));
      }
    },
    StateStorable: {
      "^": "Object;"
    }
  }], ["atom.usage", "package:atom_dartlang/usage.dart",, E, {
    "^": "",
    trackCommand: [function(command) {
      var list, category;
      list = J.split$1$s(command, ":");
      if (list.length >= 2) {
        category = list[0];
        command = list[1];
      } else
        category = "dartlang";
      if (J.$eq$(category, "core"))
        return;
      if (J.$eq$(command, "newline"))
        return;
      $.$get$_ga().sendEvent$2(category, command);
    }, "call$1", "usage__trackCommand$closure", 2, 0, 10, 160],
    _activePaneItemChanged: [function(_) {
      var editor, path, t1, index, t2, extension;
      editor = $.$get$atom()._workspace.getActiveTextEditor$0();
      if (editor == null || editor.invoke$1("getPath") == null)
        return;
      path = editor.invoke$1("getPath");
      if ((path == null ? false : J.endsWith$1$s(path, ".dart")) || Q.Dependencies_instance().getDependency$1(C.Type_ProjectManager_CvJ).getProjectFor$1(path) != null) {
        t1 = J.getInterceptor$asx(path);
        index = t1.lastIndexOf$1(path, ".");
        t2 = J.getInterceptor(index);
        if (t2.$eq(index, -1))
          $.$get$_ga().sendScreenView$1("editor");
        else {
          extension = t1.substring$1(path, t2.$add(index, 1));
          $.$get$_ga().sendScreenView$1("editor/" + extension.toLowerCase());
        }
      }
    }, "call$1", "usage___activePaneItemChanged$closure", 2, 0, 15],
    _handleLogRecord: [function(log) {
      var t1, fatal, message, t2, desc;
      t1 = J.getInterceptor$x(log);
      if (J.$ge$n(t1.get$level(log), C.Level_WARNING_900)) {
        fatal = J.$ge$n(t1.get$level(log), C.Level_SEVERE_1000);
        message = t1.get$message(log);
        t2 = J.getInterceptor$asx(message);
        if (t2.contains$1(message, "/Users/") === true)
          message = t2.substring$2(message, 0, t2.indexOf$1(message, "/Users/"));
        desc = log.get$loggerName() + ":" + H.S(message);
        if (t1.get$error(log) != null)
          desc += "," + H.S(J.get$runtimeType$(t1.get$error(log)));
        if (log.get$stackTrace() != null)
          desc += "," + F.sanitizeStacktrace(log.get$stackTrace(), true);
        $.$get$_ga().sendException$2$fatal(desc, fatal);
      }
    }, "call$1", "usage___handleLogRecord$closure", 2, 0, 259, 40],
    UsageManager: {
      "^": "Object;_subs,_editorObserve",
      _usage$_init$0: function() {
        return $._package.getPackageVersion$0().then$1(new E.UsageManager__init_closure(this));
      },
      dispose$0: [function() {
        E.trackCommand("auto-shutdown");
        this._subs.cancel$0(0);
        var t1 = this._editorObserve;
        if (t1 != null)
          t1.invoke$1("dispose");
      }, "call$0", "get$dispose", 0, 0, 2],
      UsageManager$0: function() {
        this._usage$_init$0().then$1(new E.UsageManager_closure());
      },
      $isDisposable: 1,
      static: {
        UsageManager$: function() {
          var t1 = new E.UsageManager(new L.StreamSubscriptions(true, []), null);
          t1.UsageManager$0();
          return t1;
        }
      }
    },
    UsageManager_closure: {
      "^": "Closure:0;",
      call$1: [function(_) {
        return E.trackCommand("auto-startup");
      }, null, null, 2, 0, null, 1, "call"]
    },
    UsageManager__init_closure: {
      "^": "Closure:3;$this",
      call$1: [function(version) {
        var t1, t2, t3, t4;
        t1 = $.$get$atom();
        t1._config.observe$3(0, "dartlang.sendUsage", null, new E.UsageManager__init__closure(version));
        t2 = this.$this;
        t3 = t2._subs._subscriptions;
        t3.push($.$get$Logger_root().get$onRecord().listen$1(E.usage___handleLogRecord$closure()));
        t4 = t1._commands._dispatchedController;
        t3.push(new P._BroadcastStream(t4, [H.getTypeArgumentByIndex(t4, 0)]).listen$1(E.usage__trackCommand$closure()));
        t2._editorObserve = t1._workspace.observeActivePaneItem$1(E.usage___activePaneItemChanged$closure());
        Q.Dependencies_instance().getDependency$1(C.Type_AnalysisServer_bhC).get$onActive().listen$1(new E.UsageManager__init__closure0());
      }, null, null, 2, 0, null, 77, "call"]
    },
    UsageManager__init__closure: {
      "^": "Closure:0;version",
      call$1: [function(value) {
        var t1, str, t2, t3, screenWidth, screenHeight;
        if (J.$eq$(C.JSString_methods.startsWith$1("UA-26406144-22", "UA-0000") ? false : value, true)) {
          t1 = new V.HtmlPersistentProperties(null, "dartlang");
          str = window.localStorage.getItem("dartlang");
          t1._usage_impl_html$_map = C.JsonCodec_null_null.decode$1(str == null || str.length === 0 ? "{}" : str);
          t2 = new V.HtmlPostHandler(null);
          t3 = new Z.ThrottlingBucket(20, null, null);
          t3.drops = 20;
          t3._lastReplenish = Date.now();
          t3 = new L.AnalyticsHtml("UA-26406144-22", t1, t2, t3, P.LinkedHashMap__makeEmpty(), [], null);
          t3.AnalyticsImpl$6$analyticsUrl$applicationName$applicationVersion("UA-26406144-22", t1, t2, null, "dartlang", this.version);
          screenWidth = window.screen.width;
          screenHeight = window.screen.height;
          t3.setSessionValue$2("sr", H.S(screenWidth) + "x" + H.S(screenHeight));
          t3.setSessionValue$2("sd", H.S(window.screen.pixelDepth) + "-bits");
          t2 = window.navigator;
          t2.toString;
          t3.setSessionValue$2("ul", t2.language || t2.userLanguage);
          $._ga = t3;
          t3.set$optIn(true);
          $.$get$_ga().sendScreenView$1("editor");
        } else
          $._ga = new F.AnalyticsMock(false, false, true);
      }, null, null, 2, 0, null, 7, "call"]
    },
    UsageManager__init__closure0: {
      "^": "Closure:0;",
      call$1: [function(val) {
        E.trackCommand(val === true ? "auto-analysis-server-start" : "auto-analysis-server-stop");
      }, null, null, 2, 0, null, 15, "call"]
    }
  }], ["atom.utils", "package:atom_dartlang/utils.dart",, G, {
    "^": "",
    listIdentical: function(a, b) {
      var i, _a, _b, t1;
      if (a.length !== b.length)
        return false;
      for (i = 0; i < a.length; ++i) {
        _a = a[i];
        if (i >= b.length)
          return H.ioore(b, i);
        _b = b[i];
        t1 = _a == null;
        if (t1 && _b != null)
          return false;
        if (!t1 && _b == null)
          return false;
        if (!J.$eq$(_a, _b))
          return false;
      }
      return true;
    },
    Property: {
      "^": "Object;_utils$_value,_utils$_controller,$ti",
      get$value: function(_) {
        return this._utils$_value;
      },
      set$value: function(_, v) {
        var t1;
        if (!J.$eq$(this._utils$_value, v)) {
          this._utils$_value = v;
          t1 = this._utils$_controller;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(v);
        }
      },
      toString$0: function(_) {
        return H.S(this._utils$_value);
      }
    },
    SelectionGroup: {
      "^": "Object;_selection,_items,_addedController,_selectionChangedController,_removedController,_mutationController,$ti",
      get$items: function(_) {
        return this._items;
      },
      get$isEmpty: function(_) {
        return this._items.length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._items.length !== 0;
      },
      get$length: function(_) {
        return this._items.length;
      },
      get$onAdded: function() {
        var t1 = this._addedController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onRemoved: function() {
        var t1 = this._removedController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      observeMutation$1: function(callback) {
        var t1, t2;
        callback.call$1(this._items);
        t1 = this._mutationController;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        return new P._MapStream(new G.SelectionGroup_observeMutation_closure(this), new P._BroadcastStream(t1, [t2]), [t2, null])._createSubscription$4(callback, null, null, false);
      },
      add$1: function(_, item) {
        var t1;
        this._items.push(item);
        t1 = this._addedController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(item);
        t1 = this._mutationController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(item);
        if (this._selection == null) {
          this._selection = item;
          t1 = this._selectionChangedController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(item);
        }
      },
      setSelection$1: function(sel) {
        var t1;
        if (!J.$eq$(this._selection, sel)) {
          this._selection = sel;
          t1 = this._selectionChangedController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(sel);
        }
      },
      remove$1: function(_, item) {
        var t1 = this._items;
        if (!C.JSArray_methods.contains$1(t1, item))
          return;
        C.JSArray_methods.remove$1(t1, item);
        t1 = this._removedController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(item);
        t1 = this._mutationController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(item);
        if (J.$eq$(this._selection, item)) {
          this._selection = null;
          t1 = this._selectionChangedController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(null);
        }
      }
    },
    SelectionGroup_observeMutation_closure: {
      "^": "Closure:0;$this",
      call$1: [function(_) {
        return this.$this._items;
      }, null, null, 2, 0, null, 1, "call"]
    }
  }], ["atom.views", "package:atom_dartlang/views.dart",, T, {
    "^": "",
    ViewResizer: {
      "^": "CoreElement;_views$_controller,_views$_offset,_moveSub,_upSub,element",
      set$position: function(_, value) {
        this.set$_targetSize(value);
      },
      _init$0: function() {
        var t1, t2;
        t1 = this.element;
        t2 = J.getInterceptor$x(t1);
        J.toggle$2$x(t2.get$classes(t1), "view-resize", true);
        if (t2.get$attributes(t1).containsKey$1(0, "horizontal") !== true && t2.get$attributes(t1).containsKey$1(0, "vertical") !== true) {
          t2.get$attributes(t1).remove$1(0, "vertical");
          this.attribute$1("horizontal");
        }
        t2.get$onMouseDown(t1).listen$1(new T.ViewResizer__init_closure(this, new T.ViewResizer__init_closure0(this)));
      },
      _minSize$1: function(e) {
        var style, str, t1;
        style = J.getComputedStyle$0$x(e);
        str = J.get$attributes$x(this.element).containsKey$1(0, "vertical") === true ? style.minWidth : style.minHeight;
        t1 = str.length;
        if (t1 === 0)
          return 0;
        if (C.JSString_methods.endsWith$1(str, "px"))
          str = C.JSString_methods.substring$2(str, 0, t1 - 2);
        return P.num_parse(str, new T.ViewResizer__minSize_closure());
      },
      get$_targetSize: function() {
        var t1, t2, style, str;
        t1 = this.element;
        t2 = J.getInterceptor$x(t1);
        style = J.getComputedStyle$0$x(t2.get$parent(t1));
        str = t2.get$attributes(t1).containsKey$1(0, "vertical") === true ? style.width : style.height;
        if (C.JSString_methods.endsWith$1(str, "px"))
          str = C.JSString_methods.substring$2(str, 0, str.length - 2);
        return P.num_parse(str, new T.ViewResizer__targetSize_closure());
      },
      set$_targetSize: function(size) {
        var t1, t2;
        t1 = this.element;
        size = P.max(size, this._minSize$1(t1));
        t2 = J.getInterceptor$x(t1);
        if (t2.get$attributes(t1).containsKey$1(0, "vertical") === true)
          J.set$width$x(J.get$style$x(t2.get$parent(t1)), H.S(size) + "px");
        else
          J.set$height$x(J.get$style$x(t2.get$parent(t1)), H.S(size) + "px");
      },
      ViewResizer$createHorizontal$1$top: function($top) {
        J.get$attributes$x(this.element).remove$1(0, "vertical");
        this.attribute$1("horizontal");
        if ($top)
          this.attribute$1("top");
        this._init$0();
      },
      static: {
        ViewResizer$createHorizontal: function($top) {
          var t1 = new T.ViewResizer(P.StreamController_StreamController$broadcast(null, null, false, null), new P.Point(0, 0, [null]), null, null, W._ElementFactoryProvider_createElement_tag("div", null));
          t1.CoreElement$4$attributes$classes$text("div", null, null, null);
          t1.ViewResizer$createHorizontal$1$top($top);
          return t1;
        }
      }
    },
    ViewResizer__init_closure0: {
      "^": "Closure:1;$this",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._moveSub;
        if (t2 != null)
          t2.cancel$0(0);
        t1 = t1._upSub;
        if (t1 != null)
          t1.cancel$0(0);
      }
    },
    ViewResizer__init_closure: {
      "^": "Closure:12;$this,cancel",
      call$1: [function(e) {
        var t1, t2, t3, t4, t5;
        t1 = J.getInterceptor$x(e);
        if (t1.get$button(e) !== 0)
          return;
        t1.preventDefault$0(e);
        t2 = this.$this;
        t2._views$_offset = H.subtypeCast(t1.get$offset(e), "$isPoint", [P.num], "$asPoint");
        t1 = document;
        t3 = this.cancel;
        t4 = [W.MouseEvent];
        t5 = new W._EventStreamSubscription(0, t1, "mousemove", W._wrapZone(new T.ViewResizer__init__closure(t2, t3)), false, t4);
        t5._tryResume$0();
        t2._moveSub = t5;
        t4 = new W._EventStreamSubscription(0, t1, "mouseup", W._wrapZone(new T.ViewResizer__init__closure0(t3)), false, t4);
        t4._tryResume$0();
        t2._upSub = t4;
      }, null, null, 2, 0, null, 0, "call"]
    },
    ViewResizer__init__closure: {
      "^": "Closure:12;$this,cancel",
      call$1: [function(e) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, current, currentPos, newPos;
        t1 = J.getInterceptor$x(e);
        if (t1.get$button(e) !== 0)
          this.cancel.call$0();
        else {
          t2 = this.$this;
          t3 = t2.element;
          t4 = J.getInterceptor$x(t3);
          t5 = J.get$marginEdge$x(t4.get$parent(t3));
          t6 = t5._html$_element;
          t7 = J.get$left$x(t6.getBoundingClientRect());
          t8 = t5._addOrSubtractToBoxModel$2(["left"], "margin");
          if (typeof t7 !== "number")
            return t7.$sub();
          t9 = C.JSNumber_methods.round$0(t6.offsetWidth);
          t10 = t5._addOrSubtractToBoxModel$2($.$get$_WIDTH(), "margin");
          t11 = J.get$top$x(t6.getBoundingClientRect());
          t12 = t5._addOrSubtractToBoxModel$2(["top"], "margin");
          if (typeof t11 !== "number")
            return t11.$sub();
          t13 = [P.num];
          current = new P.Point(t7 - t8 + (t9 + t10), t11 - t12 + (C.JSNumber_methods.round$0(t6.offsetHeight) + t5._addOrSubtractToBoxModel$2($.$get$_HEIGHT(), "margin")), t13).$sub(0, H.subtypeCast(t1.get$client(e), "$isPoint", t13, "$asPoint")).$add(0, t2._views$_offset);
          t1 = t2._views$_controller;
          currentPos = t1._firstSubscription != null ? t2.get$_targetSize() : null;
          t2.set$_targetSize(t4.get$attributes(t3).containsKey$1(0, "vertical") === true ? current.x : current.y);
          if (t1._firstSubscription != null) {
            newPos = t2.get$_targetSize();
            if (!J.$eq$(currentPos, newPos)) {
              if (!t1.get$_mayAddEvent())
                H.throwExpression(t1._addEventError$0());
              t1._sendData$1(newPos);
            }
          }
        }
      }, null, null, 2, 0, null, 0, "call"]
    },
    ViewResizer__init__closure0: {
      "^": "Closure:0;cancel",
      call$1: [function(e) {
        this.cancel.call$0();
      }, null, null, 2, 0, null, 0, "call"]
    },
    ViewResizer__minSize_closure: {
      "^": "Closure:0;",
      call$1: function(_) {
        return 0;
      }
    },
    ViewResizer__targetSize_closure: {
      "^": "Closure:0;",
      call$1: function(_) {
        return 0;
      }
    },
    ViewGroupManager: {
      "^": "Object;_groups",
      getGroup$1: function(groupName) {
        var t1, t2, t3, t4, t5, rightPanel, t6, t7, t8, t9, t10, t11, resizer;
        t1 = this._groups;
        if (!t1.containsKey$1(0, groupName)) {
          t2 = P.StreamController_StreamController$broadcast(null, null, false, null);
          t3 = P.StreamController_StreamController$broadcast(null, null, false, null);
          t4 = P.StreamController_StreamController$broadcast(null, null, false, null);
          t5 = new T.ViewGroup(groupName, new G.SelectionGroup(null, [], t2, t3, t4, P.StreamController_StreamController$broadcast(null, null, false, null), [null]), null, null, null, null, null, []);
          rightPanel = groupName === "right";
          t6 = K.CoreElement$("div", null, "atom-view tree-view", null);
          t7 = t6.element;
          t8 = J.getInterceptor$x(t7);
          t8.setAttribute$2(t7, "layout", "");
          t8.setAttribute$2(t7, "vertical", "");
          t5.root = t6;
          t8 = K.CoreElement$("ul", null, "list-inline tab-bar inset-panel", null);
          t8.attribute$2("hidden", null);
          t5.tabHeader = t8;
          t9 = K.CoreElement$("div", null, "tab-container", null);
          t9.flex$0(0);
          t5.tabContainer = t9;
          if (rightPanel) {
            t10 = P.StreamController_StreamController$broadcast(null, null, false, null);
            t11 = W._ElementFactoryProvider_createElement_tag("div", null);
            resizer = new T.ViewResizer(t10, new P.Point(0, 0, [null]), null, null, t11);
            resizer.CoreElement$4$attributes$classes$text("div", null, null, null);
            J.get$attributes$x(t11).remove$1(0, "horizontal");
            resizer.attribute$1("vertical");
            resizer._init$0();
          } else
            resizer = T.ViewResizer$createHorizontal(groupName !== "bottom");
          t6.add$1(0, [t8, t9, resizer]);
          if (rightPanel) {
            t6 = $.$get$atom()._workspace;
            t5._panel = new Y.Panel(t6.invoke$2("addRightPanel", t6._panelOptions$3(t7, false, null)));
          } else if (groupName === "top") {
            t6 = $.$get$atom()._workspace;
            t5._panel = new Y.Panel(t6.invoke$2("addTopPanel", t6._panelOptions$3(t7, false, null)));
          } else {
            t6 = $.$get$atom()._workspace;
            t5._panel = new Y.Panel(t6.invoke$2("addBottomPanel", t6._panelOptions$3(t7, false, null)));
          }
          t6 = H.S(groupName) + "Panel";
          t5._setupResizer$3(t6, resizer, rightPanel ? 300 : 125);
          new P._BroadcastStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$1(t5.get$_onViewAdded());
          new P._BroadcastStream(t3, [H.getTypeArgumentByIndex(t3, 0)]).listen$1(t5.get$_onActiveChanged());
          new P._BroadcastStream(t4, [H.getTypeArgumentByIndex(t4, 0)]).listen$1(t5.get$_onViewRemoved());
          t1.$indexSet(0, groupName, t5);
        }
        return t1.$index(0, groupName);
      },
      addView$3$activate: function(groupName, view, activate) {
        this.getGroup$1(groupName).addView$2$activate(view, true);
      },
      addView$2: function(groupName, view) {
        return this.addView$3$activate(groupName, view, true);
      },
      activateView$1: function(viewId) {
        var t1, group;
        for (t1 = this._groups, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          group = t1.get$current();
          if (group.hasViewId$1(viewId))
            group.activateViewById$1(viewId);
        }
      },
      activate$1: function(_, view) {
        var t1, group;
        for (t1 = this._groups, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          group = t1.get$current();
          if (group.hasView$1(view))
            group.activateView$1(view);
        }
      },
      isActiveId$1: function(viewId) {
        var t1 = this._groups;
        return t1.get$values(t1).any$1(0, new T.ViewGroupManager_isActiveId_closure(viewId));
      },
      hasViewId$1: function(viewId) {
        var t1 = this._groups;
        return t1.get$values(t1).any$1(0, new T.ViewGroupManager_hasViewId_closure(viewId));
      },
      getViewById$1: function(id) {
        var t1, group;
        for (t1 = this._groups, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          group = t1.get$current();
          if (group.hasViewId$1(id))
            return group.getViewById$1(id);
        }
        return;
      },
      dispose$0: [function() {
        var t1, t2, _i;
        for (t1 = this._groups, t1 = t1.get$values(t1), t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0)), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      removeViewId$1: function(id) {
        var t1, group;
        for (t1 = this._groups, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          group = t1.get$current();
          if (group.hasViewId$1(id))
            group.removeView$1(group.getViewById$1(id));
        }
      },
      $isDisposable: 1
    },
    ViewGroupManager_isActiveId_closure: {
      "^": "Closure:0;viewId",
      call$1: function(group) {
        return group.isActiveId$1(this.viewId);
      }
    },
    ViewGroupManager_hasViewId_closure: {
      "^": "Closure:0;viewId",
      call$1: function(group) {
        return group.hasViewId$1(this.viewId);
      }
    },
    ViewGroup: {
      "^": "Object;name>,views,root>,tabHeader,tabContainer,_panel,_active,_history",
      get$hidden: function(_) {
        return this._panel.invoke$1("isVisible") !== true;
      },
      addView$2$activate: function(view, activate) {
        var t1, t2;
        t1 = this.views;
        t2 = t1._items;
        if (C.JSArray_methods.contains$1(t2, view))
          return;
        view.set$group(this);
        view.handleDeactivate$0();
        this.tabContainer.add$1(0, J.get$root$x(view));
        t1.add$1(0, view);
        if (t2.length > 1 && true)
          t1.setSelection$1(view);
      },
      hasViewId$1: function(viewId) {
        return this.getViewById$1(viewId) != null;
      },
      hasView$1: function(view) {
        return C.JSArray_methods.contains$1(this.views._items, view);
      },
      getViewById$1: function(viewId) {
        return C.JSArray_methods.firstWhere$2$orElse(this.views._items, new T.ViewGroup_getViewById_closure(viewId), new T.ViewGroup_getViewById_closure0());
      },
      activateViewById$1: function(viewId) {
        var view = this.getViewById$1(viewId);
        if (view != null)
          this.views.setSelection$1(view);
      },
      activateView$1: function(view) {
        this.views.setSelection$1(view);
      },
      isActiveId$1: function(viewId) {
        var t1 = this._active;
        return t1 != null && J.$eq$(J.get$id$x(t1), viewId);
      },
      removeView$1: function(view) {
        if (view != null)
          this.views.remove$1(0, view);
      },
      _onViewAdded$1: [function(view) {
        var t1, t2, _i;
        if (this._panel.invoke$1("isVisible") !== true && this.views._items.length !== 0)
          this._panel.invoke$1("show");
        t1 = this.views._items;
        this.tabHeader.attribute$2("hidden", t1.length < 2);
        for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].get$_closeButton().attribute$2("hidden", t1.length !== 1);
        this.tabHeader.add$1(0, view.get$tabElement());
      }, "call$1", "get$_onViewAdded", 2, 0, 32, 35],
      _onActiveChanged$1: [function(view) {
        var t1, t2;
        t1 = this._active;
        if (!(t1 == null))
          t1.handleDeactivate$0();
        this._active = view;
        if (!(view == null))
          view.handleActivate$0();
        t1 = this._active;
        if (t1 != null) {
          t2 = this._history;
          C.JSArray_methods.remove$1(t2, t1);
          t2.push(this._active);
        }
        if (this._active == null && this._history.length !== 0)
          this.views.setSelection$1(C.JSArray_methods.get$last(this._history));
      }, "call$1", "get$_onActiveChanged", 2, 0, 32, 35],
      _onViewRemoved$1: [function(view) {
        var t1, t2, _i;
        C.JSArray_methods.remove$1(this._history, view);
        if (this._panel.invoke$1("isVisible") === true && this.views._items.length === 0)
          this._panel.invoke$1("hide");
        t1 = this.views._items;
        this.tabHeader.attribute$2("hidden", t1.length < 2);
        for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].get$_closeButton().attribute$2("hidden", t1.length !== 1);
        J.get$root$x(view).dispose$0();
        view.get$tabElement().dispose$0();
        view.dispose$0();
      }, "call$1", "get$_onViewRemoved", 2, 0, 32, 35],
      _setupResizer$3: function(prefName, resizer, defaultSize) {
        var t1 = $.$get$state();
        resizer.set$_targetSize(J.$index$asx(t1._pluginState, prefName) == null ? defaultSize : J.$index$asx(t1._pluginState, prefName));
        t1 = resizer._views$_controller;
        new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new T.ViewGroup__setupResizer_closure(prefName));
      },
      dispose$0: [function() {
        var t1, t2, _i;
        this._panel.invoke$1("destroy");
        for (t1 = this.views._items, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      hidden$1: function($receiver, arg0) {
        return this.get$hidden(this).call$1(arg0);
      },
      $isDisposable: 1
    },
    ViewGroup_getViewById_closure: {
      "^": "Closure:0;viewId",
      call$1: function(view) {
        return J.$eq$(J.get$id$x(view), this.viewId);
      }
    },
    ViewGroup_getViewById_closure0: {
      "^": "Closure:1;",
      call$0: function() {
        return;
      }
    },
    ViewGroup__setupResizer_closure: {
      "^": "Closure:0;prefName",
      call$1: [function(pos) {
        $.$get$state().$indexSet(0, this.prefName, pos);
        return pos;
      }, null, null, 2, 0, null, 26, "call"]
    },
    View: {
      "^": "Object;root>,content>,tabElement<,_closeButton<,group?",
      handleActivate$0: function() {
        this.root.attribute$2("hidden", false);
        J.toggle$2$x(J.get$classes$x(this.tabElement.element), "active", true);
      },
      handleDeactivate$0: function() {
        this.root.attribute$2("hidden", true);
        J.toggle$2$x(J.get$classes$x(this.tabElement.element), "active", false);
      },
      _handleTab$0: [function() {
        this.group.views.setSelection$1(this);
      }, "call$0", "get$_handleTab", 0, 0, 2],
      handleClose$0: ["super$View$handleClose", function() {
        var t1 = this.group;
        t1.views.remove$1(0, this);
      }, "call$0", "get$handleClose", 0, 0, 2],
      toString$0: function(_) {
        return "[" + H.S(this.get$label(this)) + " " + this.get$id(this) + "]";
      },
      View$0: function() {
        var t1, t2, t3;
        t1 = K.CoreElement$("div", null, "button-bar", null);
        t1.flex$0(0);
        t2 = new K.CloseButton(W._ElementFactoryProvider_createElement_tag("div", null));
        t2.CoreElement$4$attributes$classes$text("div", null, "close-button", null);
        t2.click$1(0, this.get$handleClose());
        this._closeButton = t2;
        t1.add$1(0, [this.toolbar, t2]);
        this.root.add$1(0, [t1, this.content]);
        t1 = K.CoreElement$("li", null, "tab", null);
        t2 = K.CoreElement$("div", null, "title", this.get$label(this));
        t3 = K.CoreElement$("div", null, "close-icon", null);
        t3.click$1(0, this.get$handleClose());
        t1.add$1(0, [t2, t3]);
        t1.click$1(0, this.get$_handleTab());
        J.get$attributes$x(t1.element).$indexSet(0, "data-type", "ViewPartEditor");
        this.tabElement = t1;
      },
      group$1: function(arg0) {
        return this.group.call$1(arg0);
      },
      $isDisposable: 1
    },
    ListTreeBuilder: {
      "^": "CoreElement;_clickController,_doubleClickController,render,hasToggle,nodes>,_selectedNodes,_nodeToElementMap,_selectionClass,element",
      _addNode$2: function($parent, node) {
        var t1, t2, t3, element, e, d, u;
        this.nodes.push(node);
        t1 = J.getInterceptor$x(node);
        t2 = this.render;
        t3 = this._nodeToElementMap;
        if (node.get$canHaveChildren() !== true) {
          element = K.CoreElement$("li", null, "list-item", null);
          e = element.element;
          t2.call$2(t1.get$data(node), e);
          t3.$indexSet(0, node, e);
          t1 = J.getInterceptor$x(e);
          t1.get$onClick(e).listen$1(new T.ListTreeBuilder__addNode_closure(this, node));
          t1.get$onDoubleClick(e).listen$1(new T.ListTreeBuilder__addNode_closure0(this, node));
          $parent.add$1(0, element);
        } else {
          element = K.CoreElement$("li", null, "list-nested-item", null);
          $parent.add$1(0, element);
          d = K.CoreElement$("div", null, "list-item", null);
          e = d.element;
          t2.call$2(t1.get$data(node), e);
          t3.$indexSet(0, node, e);
          if (this.hasToggle)
            J.get$onClick$x(e).listen$1(new T.ListTreeBuilder__addNode_closure1(element));
          t2 = J.getInterceptor$x(e);
          t2.get$onClick(e).listen$1(new T.ListTreeBuilder__addNode_closure2(this, node));
          t2.get$onDoubleClick(e).listen$1(new T.ListTreeBuilder__addNode_closure3(this, node));
          element.add$1(0, d);
          u = K.CoreElement$("ul", null, "list-tree", null);
          element.add$1(0, u);
          for (t1 = J.get$iterator$ax(t1.get$children(node)); t1.moveNext$0();)
            this._addNode$2(u, t1.get$current());
        }
      },
      selectNodes$1: function(selected) {
        var t1, t2, t3, _i, e;
        t1 = this._selectedNodes;
        t2 = t1.length;
        if (t2 !== 0)
          for (t3 = this._nodeToElementMap, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            e = t3.$index(0, t1[_i]);
            if (e != null)
              J.toggle$2$x(J.get$classes$x(e), this._selectionClass, false);
          }
        C.JSArray_methods.set$length(t1, 0);
        C.JSArray_methods.addAll$1(t1, selected);
        t2 = t1.length;
        if (t2 !== 0)
          for (t3 = this._nodeToElementMap, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            e = t3.$index(0, t1[_i]);
            if (e != null)
              J.toggle$2$x(J.get$classes$x(e), this._selectionClass, true);
          }
      },
      clear$0: function(_) {
        C.JSArray_methods.set$length(this.nodes, 0);
        C.JSArray_methods.set$length(this._selectedNodes, 0);
        this._nodeToElementMap.clear$0(0);
        J.clear$0$ax(J.get$children$x(this.element));
      },
      get$onDoubleClick: function(_) {
        var t1 = this._doubleClickController;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      }
    },
    ListTreeBuilder__addNode_closure: {
      "^": "Closure:0;$this,node",
      call$1: [function(_) {
        var t1 = this.$this._clickController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(this.node);
        return;
      }, null, null, 2, 0, null, 1, "call"]
    },
    ListTreeBuilder__addNode_closure0: {
      "^": "Closure:0;$this,node",
      call$1: [function(_) {
        var t1 = this.$this._doubleClickController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(this.node);
        return;
      }, null, null, 2, 0, null, 1, "call"]
    },
    ListTreeBuilder__addNode_closure1: {
      "^": "Closure:12;element",
      call$1: [function(e) {
        var t1, t2;
        t1 = J.getInterceptor$x(e);
        t2 = J.get$x$x(t1.get$offset(e));
        if (typeof t2 !== "number")
          return t2.$lt();
        if (t2 < 12) {
          J.toggle$2$x(J.get$classes$x(this.element.element), "collapsed", null);
          t1.preventDefault$0(e);
          t1.stopPropagation$0(e);
        }
      }, null, null, 2, 0, null, 0, "call"]
    },
    ListTreeBuilder__addNode_closure2: {
      "^": "Closure:60;$this,node",
      call$1: [function($event) {
        var t1;
        if (J.get$defaultPrevented$x($event) !== true) {
          t1 = this.$this._clickController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(this.node);
        }
      }, null, null, 2, 0, null, 12, "call"]
    },
    ListTreeBuilder__addNode_closure3: {
      "^": "Closure:60;$this,node",
      call$1: [function($event) {
        var t1;
        if (J.get$defaultPrevented$x($event) !== true) {
          t1 = this.$this._doubleClickController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(this.node);
        }
      }, null, null, 2, 0, null, 12, "call"]
    },
    Node0: {
      "^": "Object;data>,canHaveChildren<,children>,$ti",
      add$1: function(_, node) {
        return this.children.push(node);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof T.Node0 && J.$eq$(this.data, other.data);
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this.data);
      },
      get$decendentCount: function() {
        return C.JSArray_methods.fold$2(this.children, 1, new T.Node_decendentCount_closure());
      },
      toString$0: function(_) {
        return J.toString$0$(this.data);
      }
    },
    Node_decendentCount_closure: {
      "^": "Closure:203;",
      call$2: function(val, n) {
        return J.$add$ns(val, n.get$decendentCount());
      }
    },
    DoubleCancelCommand: {
      "^": "Object;handleCancel,_views$_command,_views$_timer",
      _handleCancel$1: [function(_) {
        if (this._views$_timer != null)
          this.handleCancel.call$0();
        else
          this._views$_timer = P.Timer_Timer(P.Duration$(0, 0, 0, 750, 0, 0), new T.DoubleCancelCommand__handleCancel_closure(this));
      }, "call$1", "get$_handleCancel", 2, 0, 6],
      dispose$0: [function() {
        return this._views$_command.invoke$1("dispose");
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    DoubleCancelCommand__handleCancel_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        this.$this._views$_timer = null;
        return;
      }
    }
  }], ["", "package:collection/src/equality.dart",, U, {
    "^": "",
    DefaultEquality: {
      "^": "Object;$ti",
      hash$1: [function(_, e) {
        return J.get$hashCode$(e);
      }, null, "get$hash", 2, 0, null, 0]
    },
    IterableEquality: {
      "^": "Object;_elementEquality,$ti",
      equals$2: function(elements1, elements2) {
        var it1, it2, hasNext;
        if (elements1 === elements2)
          return true;
        it1 = new J.ArrayIterator(elements1, elements1.length, 0, null, [H.getTypeArgumentByIndex(elements1, 0)]);
        it2 = new J.ArrayIterator(elements2, elements2.length, 0, null, [H.getTypeArgumentByIndex(elements2, 0)]);
        for (; true;) {
          hasNext = it1.moveNext$0();
          if (hasNext !== it2.moveNext$0())
            return false;
          if (!hasNext)
            return true;
          if (!J.$eq$(it1.__interceptors$_current, it2.__interceptors$_current))
            return false;
        }
      },
      hash$1: function(_, elements) {
        var t1, hash, c;
        for (t1 = J.get$iterator$ax(elements), hash = 0; t1.moveNext$0();) {
          c = J.get$hashCode$(t1.get$current());
          if (typeof c !== "number")
            return H.iae(c);
          hash = hash + c & 2147483647;
          hash = hash + (hash << 10 >>> 0) & 2147483647;
          hash ^= hash >>> 6;
        }
        hash = hash + (hash << 3 >>> 0) & 2147483647;
        hash ^= hash >>> 11;
        return hash + (hash << 15 >>> 0) & 2147483647;
      }
    },
    _UnorderedEquality: {
      "^": "Object;$ti",
      hash$1: function(_, e) {
        var t1, hash, c;
        for (t1 = e.get$iterator(e), hash = 0; t1.moveNext$0();) {
          c = J.get$hashCode$(t1.get$current());
          if (typeof c !== "number")
            return H.iae(c);
          hash = hash + c & 2147483647;
        }
        hash = hash + (hash << 3 >>> 0) & 2147483647;
        hash ^= hash >>> 11;
        return hash + (hash << 15 >>> 0) & 2147483647;
      }
    },
    UnorderedIterableEquality: {
      "^": "_UnorderedEquality;_elementEquality,$ti",
      $as_UnorderedEquality: function($E) {
        return [$E, [P.Iterable, $E]];
      }
    }
  }], ["", "package:collection/src/queue_list.dart",, Q, {
    "^": "",
    QueueList: {
      "^": "Object_ListMixin0;_queue_list$_table,_queue_list$_head,_queue_list$_tail,$ti",
      add$1: function(_, element) {
        this._queue_list$_add$1(0, element);
      },
      addAll$1: function(_, elements) {
        var t1, addCount, $length, t2, t3, endSpace, preSpace;
        t1 = J.getInterceptor(elements);
        if (!!t1.$isList) {
          addCount = t1.get$length(elements);
          $length = this.get$length(this);
          if (typeof addCount !== "number")
            return H.iae(addCount);
          t1 = $length + addCount;
          t2 = this._queue_list$_table;
          t3 = t2.length;
          if (t1 >= t3) {
            this._preGrow$1(t1);
            C.JSArray_methods.setRange$4(this._queue_list$_table, $length, t1, elements, 0);
            this._queue_list$_tail = J.$add$ns(this._queue_list$_tail, addCount);
          } else {
            t1 = this._queue_list$_tail;
            if (typeof t1 !== "number")
              return H.iae(t1);
            endSpace = t3 - t1;
            if (addCount < endSpace) {
              C.JSArray_methods.setRange$4(t2, t1, t1 + addCount, elements, 0);
              this._queue_list$_tail = J.$add$ns(this._queue_list$_tail, addCount);
            } else {
              preSpace = addCount - endSpace;
              C.JSArray_methods.setRange$4(t2, t1, t1 + endSpace, elements, 0);
              C.JSArray_methods.setRange$4(this._queue_list$_table, 0, preSpace, elements, endSpace);
              this._queue_list$_tail = preSpace;
            }
          }
        } else
          for (t1 = t1.get$iterator(elements); t1.moveNext$0();)
            this._queue_list$_add$1(0, t1.get$current());
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      get$length: function(_) {
        return J.$and$n(J.$sub$n(this._queue_list$_tail, this._queue_list$_head), this._queue_list$_table.length - 1);
      },
      set$length: function(_, value) {
        var t1, delta, newTail, t2, t3;
        t1 = J.getInterceptor$n(value);
        if (t1.$lt(value, 0))
          throw H.wrapException(P.RangeError$("Length " + H.S(value) + " may not be negative."));
        delta = t1.$sub(value, J.$and$n(J.$sub$n(this._queue_list$_tail, this._queue_list$_head), this._queue_list$_table.length - 1));
        if (J.$ge$n(delta, 0)) {
          t1 = this._queue_list$_table;
          if (typeof value !== "number")
            return H.iae(value);
          if (t1.length <= value)
            this._preGrow$1(value);
          this._queue_list$_tail = J.$and$n(J.$add$ns(this._queue_list$_tail, delta), this._queue_list$_table.length - 1);
          return;
        }
        newTail = J.$add$ns(this._queue_list$_tail, delta);
        t1 = J.getInterceptor$n(newTail);
        t2 = t1.$ge(newTail, 0);
        t3 = this._queue_list$_table;
        if (t2)
          C.JSArray_methods.fillRange$3(t3, newTail, this._queue_list$_tail, null);
        else {
          newTail = t1.$add(newTail, t3.length);
          C.JSArray_methods.fillRange$3(this._queue_list$_table, 0, this._queue_list$_tail, null);
          t1 = this._queue_list$_table;
          C.JSArray_methods.fillRange$3(t1, newTail, t1.length, null);
        }
        this._queue_list$_tail = newTail;
      },
      $index: function(_, index) {
        var t1, t2, t3;
        t1 = J.getInterceptor$n(index);
        if (t1.$lt(index, 0) || t1.$ge(index, J.$and$n(J.$sub$n(this._queue_list$_tail, this._queue_list$_head), this._queue_list$_table.length - 1)))
          throw H.wrapException(P.RangeError$("Index " + H.S(index) + " must be in the range [0.." + this.get$length(this) + ")."));
        t1 = this._queue_list$_table;
        t2 = this._queue_list$_head;
        if (typeof index !== "number")
          return H.iae(index);
        t3 = t1.length;
        t2 = (t2 + index & t3 - 1) >>> 0;
        if (t2 < 0 || t2 >= t3)
          return H.ioore(t1, t2);
        return t1[t2];
      },
      $indexSet: function(_, index, value) {
        var t1, t2, t3;
        t1 = J.getInterceptor$n(index);
        if (t1.$lt(index, 0) || t1.$ge(index, J.$and$n(J.$sub$n(this._queue_list$_tail, this._queue_list$_head), this._queue_list$_table.length - 1)))
          throw H.wrapException(P.RangeError$("Index " + H.S(index) + " must be in the range [0.." + this.get$length(this) + ")."));
        t1 = this._queue_list$_table;
        t2 = this._queue_list$_head;
        if (typeof index !== "number")
          return H.iae(index);
        t3 = t1.length;
        t2 = (t2 + index & t3 - 1) >>> 0;
        if (t2 < 0 || t2 >= t3)
          return H.ioore(t1, t2);
        t1[t2] = value;
      },
      _queue_list$_add$1: function(_, element) {
        var t1, t2;
        t1 = this._queue_list$_table;
        t2 = this._queue_list$_tail;
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2] = element;
        t2 = (t2 + 1 & this._queue_list$_table.length - 1) >>> 0;
        this._queue_list$_tail = t2;
        if (this._queue_list$_head === t2)
          this._queue_list$_grow$0();
      },
      _queue_list$_grow$0: function() {
        var t1, newTable, t2, split;
        t1 = new Array(this._queue_list$_table.length * 2);
        t1.fixed$length = Array;
        newTable = H.setRuntimeTypeInfo(t1, this.$ti);
        t1 = this._queue_list$_table;
        t2 = this._queue_list$_head;
        split = t1.length - t2;
        C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        C.JSArray_methods.setRange$4(newTable, split, split + this._queue_list$_head, this._queue_list$_table, 0);
        this._queue_list$_head = 0;
        this._queue_list$_tail = this._queue_list$_table.length;
        this._queue_list$_table = newTable;
      },
      _writeToList$1: function(target) {
        var t1, t2, t3, $length, firstPartSize;
        t1 = this._queue_list$_head;
        t2 = this._queue_list$_tail;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = this._queue_list$_table;
        if (t1 <= t2) {
          $length = t2 - t1;
          C.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
          return $length;
        } else {
          firstPartSize = t3.length - t1;
          C.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
          t1 = this._queue_list$_tail;
          if (typeof t1 !== "number")
            return H.iae(t1);
          C.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + t1, this._queue_list$_table, 0);
          return J.$add$ns(this._queue_list$_tail, firstPartSize);
        }
      },
      _preGrow$1: function(newElementCount) {
        var t1, newCapacity, newTable;
        t1 = J.getInterceptor$n(newElementCount);
        newCapacity = Q.QueueList__nextPowerOf2(t1.$add(newElementCount, t1.$shr(newElementCount, 1)));
        if (typeof newCapacity !== "number")
          return H.iae(newCapacity);
        t1 = new Array(newCapacity);
        t1.fixed$length = Array;
        newTable = H.setRuntimeTypeInfo(t1, this.$ti);
        this._queue_list$_tail = this._writeToList$1(newTable);
        this._queue_list$_table = newTable;
        this._queue_list$_head = 0;
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null,
      static: {
        QueueList__nextPowerOf2: function(number) {
          var nextNumber;
          number = J.$shl$n(number, 1) - 1;
          for (; true; number = nextNumber) {
            nextNumber = (number & number - 1) >>> 0;
            if (nextNumber === 0)
              return number;
          }
        }
      }
    },
    Object_ListMixin0: {
      "^": "Object+ListMixin;$ti",
      $asList: null,
      $asIterable: null,
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    }
  }], ["", "package:collection/src/unmodifiable_wrappers.dart",, L, {
    "^": "",
    UnmodifiableMapMixin__throw: function() {
      throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable Map"));
    },
    UnmodifiableMapMixin: {
      "^": "Object;$ti",
      $indexSet: function(_, key, value) {
        return L.UnmodifiableMapMixin__throw();
      },
      addAll$1: function(_, other) {
        return L.UnmodifiableMapMixin__throw();
      },
      remove$1: function(_, key) {
        return L.UnmodifiableMapMixin__throw();
      },
      $isMap: 1,
      $asMap: null
    }
  }], ["haikunator", "package:haikunator/haikunator.dart",, D, {
    "^": "",
    Haikunator_haikunate: function(delimiter, tokenChars, tokenHex, tokenLength) {
      var t1, t2, t3, adjective, noun, token, i, sections;
      t1 = $.$get$Haikunator_ADJECTIVES();
      t2 = $.$get$Haikunator_rndm();
      t3 = t2.nextInt$1(94);
      if (t3 < 0 || t3 >= 94)
        return H.ioore(t1, t3);
      adjective = t1[t3];
      t3 = $.$get$Haikunator_NOUNS();
      t1 = t2.nextInt$1(106);
      if (t1 < 0 || t1 >= 106)
        return H.ioore(t3, t1);
      noun = t3[t1];
      for (t1 = tokenChars.length, token = "", i = 0; i < tokenLength; ++i) {
        t3 = t2.nextInt$1(t1);
        if (t3 < 0 || t3 >= t1)
          return H.ioore(tokenChars, t3);
        token += tokenChars[t3];
      }
      sections = [adjective, noun, token];
      C.JSArray_methods.checkGrowable$1(sections, "removeWhere");
      C.JSArray_methods._removeWhere$2(sections, new D.Haikunator_haikunate_closure(), true);
      return C.JSArray_methods.join$1(sections, delimiter);
    },
    Haikunator_haikunate_closure: {
      "^": "Closure:0;",
      call$1: function(item) {
        return J.get$isEmpty$asx(item);
      }
    }
  }], ["logging", "package:logging/logging.dart",, N, {
    "^": "",
    Logger: {
      "^": "Object;name>,parent>,_level,_children>,children>,_controller",
      get$fullName: function() {
        var t1, t2, t3;
        t1 = this.parent;
        t2 = t1 == null || J.$eq$(J.get$name$x(t1), "");
        t3 = this.name;
        return t2 ? t3 : t1.get$fullName() + "." + t3;
      },
      get$level: function(_) {
        var t1;
        if ($.hierarchicalLoggingEnabled) {
          t1 = this._level;
          if (t1 != null)
            return t1;
          t1 = this.parent;
          if (t1 != null)
            return J.get$level$x(t1);
        }
        return $._rootLevel;
      },
      set$level: function(_, value) {
        if ($.hierarchicalLoggingEnabled && this.parent != null)
          this._level = value;
        else {
          if (this.parent != null)
            throw H.wrapException(new P.UnsupportedError('Please set "hierarchicalLoggingEnabled" to true if you want to change the level on a non-root logger.'));
          $._rootLevel = value;
        }
      },
      get$onRecord: function() {
        return this._getStream$0();
      },
      isLoggable$1: function(value) {
        var t1 = J.get$value$x(this.get$level(this));
        if (typeof t1 !== "number")
          return H.iae(t1);
        return value.value >= t1;
      },
      log$5: [function(logLevel, message, error, stackTrace, zone) {
        var e, t, t1, t2, object, exception, t3, t4, t5, t6, record, target;
        t1 = logLevel.value;
        t2 = J.get$value$x(this.get$level(this));
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 >= t2) {
          if (!!J.getInterceptor(message).$isFunction)
            message = message.call$0();
          t2 = message;
          if (typeof t2 !== "string") {
            object = message;
            message = J.toString$0$(message);
          } else
            object = null;
          if (stackTrace == null && t1 >= $.recordStackTraceAtLevel.value)
            try {
              t1 = "autogenerated stack trace for " + logLevel.toString$0(0) + " " + H.S(message);
              throw H.wrapException(t1);
            } catch (exception) {
              t1 = H.unwrapException(exception);
              e = t1;
              t = H.getTraceFromException(exception);
              stackTrace = t;
              if (error == null)
                error = e;
            }
          zone = $.Zone__current;
          t1 = message;
          t2 = this.get$fullName();
          t3 = error;
          t4 = stackTrace;
          t5 = Date.now();
          t6 = $.LogRecord__nextNumber;
          $.LogRecord__nextNumber = t6 + 1;
          record = new N.LogRecord(logLevel, t1, object, t2, new P.DateTime(t5, false), t6, t3, t4, zone);
          if ($.hierarchicalLoggingEnabled)
            for (target = this; target != null;) {
              target._publish$1(record);
              target = J.get$parent$x(target);
            }
          else
            $.$get$Logger_root()._publish$1(record);
        }
      }, function(logLevel, message) {
        return this.log$5(logLevel, message, null, null, null);
      }, "log$2", function(logLevel, message, error) {
        return this.log$5(logLevel, message, error, null, null);
      }, "log$3", function(logLevel, message, error, stackTrace) {
        return this.log$5(logLevel, message, error, stackTrace, null);
      }, "log$4", "call$5", "call$2", "call$3", "call$4", "get$log", 4, 6, 204, 2, 2, 2],
      finer$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_FINER_400, message, error, stackTrace);
      },
      finer$1: function(message) {
        return this.finer$3(message, null, null);
      },
      fine$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_FINE_500, message, error, stackTrace);
      },
      fine$1: function(message) {
        return this.fine$3(message, null, null);
      },
      fine$2: function(message, error) {
        return this.fine$3(message, error, null);
      },
      info$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_INFO_800, message, error, stackTrace);
      },
      info$1: function(message) {
        return this.info$3(message, null, null);
      },
      info$2: function(message, error) {
        return this.info$3(message, error, null);
      },
      warning$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_WARNING_900, message, error, stackTrace);
      },
      warning$2: function(message, error) {
        return this.warning$3(message, error, null);
      },
      warning$1: function(message) {
        return this.warning$3(message, null, null);
      },
      severe$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_SEVERE_1000, message, error, stackTrace);
      },
      severe$1: function(message) {
        return this.severe$3(message, null, null);
      },
      severe$2: function(message, error) {
        return this.severe$3(message, error, null);
      },
      _getStream$0: function() {
        if ($.hierarchicalLoggingEnabled || this.parent == null) {
          var t1 = this._controller;
          if (t1 == null) {
            t1 = P.StreamController_StreamController$broadcast(null, null, true, N.LogRecord);
            this._controller = t1;
          }
          t1.toString;
          return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
        } else
          return $.$get$Logger_root()._getStream$0();
      },
      _publish$1: function(record) {
        var t1 = this._controller;
        if (t1 != null) {
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(record);
        }
      },
      static: {
        "^": "Logger_root<",
        Logger_Logger: function($name) {
          return $.$get$Logger__loggers().putIfAbsent$2(0, $name, new N.closure($name));
        }
      }
    },
    closure: {
      "^": "Closure:1;name",
      call$0: function() {
        var thisName, dot, $parent, t1;
        thisName = this.name;
        if (C.JSString_methods.startsWith$1(thisName, "."))
          H.throwExpression(P.ArgumentError$("name shouldn't start with a '.'"));
        dot = C.JSString_methods.lastIndexOf$1(thisName, ".");
        if (dot === -1)
          $parent = thisName !== "" ? N.Logger_Logger("") : null;
        else {
          $parent = N.Logger_Logger(C.JSString_methods.substring$2(thisName, 0, dot));
          thisName = C.JSString_methods.substring$1(thisName, dot + 1);
        }
        t1 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [P.String, N.Logger]);
        t1 = new N.Logger(thisName, $parent, null, t1, new P.UnmodifiableMapView(t1, [null, null]), null);
        if ($parent != null)
          J.get$_children$x($parent).$indexSet(0, thisName, t1);
        return t1;
      }
    },
    Level: {
      "^": "Object;name>,value>",
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof N.Level && this.value === other.value;
      },
      $lt: function(_, other) {
        var t1 = J.get$value$x(other);
        if (typeof t1 !== "number")
          return H.iae(t1);
        return this.value < t1;
      },
      $le: function(_, other) {
        var t1 = J.get$value$x(other);
        if (typeof t1 !== "number")
          return H.iae(t1);
        return this.value <= t1;
      },
      $gt: function(_, other) {
        var t1 = J.get$value$x(other);
        if (typeof t1 !== "number")
          return H.iae(t1);
        return this.value > t1;
      },
      $ge: function(_, other) {
        var t1 = J.get$value$x(other);
        if (typeof t1 !== "number")
          return H.iae(t1);
        return this.value >= t1;
      },
      compareTo$1: function(_, other) {
        var t1 = J.get$value$x(other);
        if (typeof t1 !== "number")
          return H.iae(t1);
        return this.value - t1;
      },
      get$hashCode: function(_) {
        return this.value;
      },
      toString$0: function(_) {
        return this.name;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [N.Level];
      }
    },
    LogRecord: {
      "^": "Object;level>,message>,object,loggerName<,time,sequenceNumber,error>,stackTrace<,zone",
      toString$0: function(_) {
        return "[" + this.level.name + "] " + this.loggerName + ": " + H.S(this.message);
      }
    }
  }], ["markdown.src.ast", "package:markdown/src/ast.dart",, T, {
    "^": "",
    Node1: {
      "^": "Object;"
    },
    Element1: {
      "^": "Object;tag,children>,attributes>,generatedId",
      get$isEmpty: function(_) {
        return this.children == null;
      },
      accept$1: function(_, visitor) {
        var t1, t2, _i;
        if (visitor.visitElementBefore$1(this)) {
          for (t1 = this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
            J.accept$1$x(t1[_i], visitor);
          visitor.buffer._contents += "</" + H.S(this.tag) + ">";
        }
      },
      get$textContent: function() {
        var t1 = this.children;
        if (t1 == null)
          t1 = "";
        else {
          t1.toString;
          t1 = new H.MappedListIterable(t1, new T.Element_textContent_closure(), [null, null]).join$1(0, "");
        }
        return t1;
      },
      $isNode1: 1
    },
    Element_textContent_closure: {
      "^": "Closure:58;",
      call$1: [function(child) {
        return child.get$textContent();
      }, null, null, 2, 0, null, 79, "call"]
    },
    Text: {
      "^": "Object;text>",
      accept$1: function(_, visitor) {
        var t1 = visitor.buffer;
        t1.toString;
        t1._contents += H.S(this.text);
        return;
      },
      get$textContent: function() {
        return this.text;
      },
      $isNode1: 1
    },
    UnparsedContent: {
      "^": "Object;textContent<",
      accept$1: function(_, visitor) {
        return;
      },
      $isNode1: 1
    }
  }], ["markdown.block_parser", "package:markdown/src/block_parser.dart",, U, {
    "^": "",
    BlockSyntax_isAtBlockEnd: function(parser) {
      if (parser._block_parser$_pos >= J.get$length$asx(parser.lines))
        return true;
      return C.JSArray_methods.any$1(parser.blockSyntaxes, new U.BlockSyntax_isAtBlockEnd_closure(parser));
    },
    BlockParser: {
      "^": "Object;lines<,document,blockSyntaxes,_block_parser$_pos,encounteredBlankLine,standardBlockSyntaxes",
      get$next: function(_) {
        var t1, t2;
        t1 = this.lines;
        t2 = J.getInterceptor$asx(t1);
        if (this._block_parser$_pos >= t2.get$length(t1) - 1)
          return;
        return t2.$index(t1, this._block_parser$_pos + 1);
      },
      peek$1: function(linesAhead) {
        var t1, t2;
        t1 = this.lines;
        t2 = J.getInterceptor$asx(t1);
        if (this._block_parser$_pos >= t2.get$length(t1) - linesAhead)
          return;
        return t2.$index(t1, this._block_parser$_pos + linesAhead);
      },
      matches$1: function(_, regex) {
        var t1, t2;
        t1 = this.lines;
        t2 = J.getInterceptor$asx(t1);
        if (this._block_parser$_pos >= t2.get$length(t1))
          return false;
        return regex.firstMatch$1(t2.$index(t1, this._block_parser$_pos)) != null;
      },
      parseLines$0: function() {
        var blocks, t1, t2, t3, t4, _i, syntax, block;
        blocks = H.setRuntimeTypeInfo([], [T.Node1]);
        for (t1 = this.lines, t2 = J.getInterceptor$asx(t1), t3 = this.blockSyntaxes; this._block_parser$_pos < t2.get$length(t1);)
          for (t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
            syntax = t3[_i];
            if (syntax.canParse$1(this) === true) {
              block = syntax.parse$1(this);
              if (block != null)
                blocks.push(block);
              break;
            }
          }
        return blocks;
      }
    },
    BlockSyntax: {
      "^": "Object;",
      get$pattern: function(_) {
        return;
      },
      get$canEndBlock: function() {
        return true;
      },
      canParse$1: function(parser) {
        return this.get$pattern(this).firstMatch$1(J.$index$asx(parser.lines, parser._block_parser$_pos)) != null;
      }
    },
    BlockSyntax_isAtBlockEnd_closure: {
      "^": "Closure:0;parser",
      call$1: function(s) {
        return s.canParse$1(this.parser) === true && s.get$canEndBlock();
      }
    },
    EmptyBlockSyntax: {
      "^": "BlockSyntax;",
      get$pattern: function(_) {
        return $.$get$_emptyPattern();
      },
      parse$1: function(parser) {
        parser.encounteredBlankLine = true;
        ++parser._block_parser$_pos;
        return;
      }
    },
    SetextHeaderSyntax: {
      "^": "BlockSyntax;",
      canParse$1: function(parser) {
        var i, nextLine, t1;
        if (!this._interperableAsParagraph$1(J.$index$asx(parser.lines, parser._block_parser$_pos)))
          return false;
        for (i = 1; true;) {
          nextLine = parser.peek$1(i);
          if (nextLine == null)
            return false;
          t1 = $.$get$_setextPattern()._nativeRegExp;
          if (typeof nextLine !== "string")
            H.throwExpression(H.argumentErrorValue(nextLine));
          if (t1.test(nextLine))
            return true;
          if (!this._interperableAsParagraph$1(nextLine))
            return false;
          ++i;
        }
      },
      parse$1: function(parser) {
        var t1, lines, tag, t2, t3, match;
        t1 = P.String;
        lines = H.setRuntimeTypeInfo([], [t1]);
        t2 = parser.lines;
        t3 = J.getInterceptor$asx(t2);
        while (true) {
          if (!(parser._block_parser$_pos < t3.get$length(t2))) {
            tag = null;
            break;
          }
          c$0: {
            match = $.$get$_setextPattern().firstMatch$1(t3.$index(t2, parser._block_parser$_pos));
            if (match == null) {
              lines.push(t3.$index(t2, parser._block_parser$_pos));
              ++parser._block_parser$_pos;
              break c$0;
            } else {
              t2 = match._match;
              if (1 >= t2.length)
                return H.ioore(t2, 1);
              tag = J.$eq$(J.$index$asx(t2[1], 0), "=") ? "h1" : "h2";
              ++parser._block_parser$_pos;
              break;
            }
          }
        }
        return new T.Element1(tag, [new T.UnparsedContent(C.JSArray_methods.join$1(lines, "\n"))], P.LinkedHashMap_LinkedHashMap$_empty(t1, t1), null);
      },
      _interperableAsParagraph$1: function(line) {
        var t1, t2;
        t1 = $.$get$_indentPattern()._nativeRegExp;
        t2 = typeof line !== "string";
        if (t2)
          H.throwExpression(H.argumentErrorValue(line));
        if (!t1.test(line)) {
          t1 = $.$get$_codePattern()._nativeRegExp;
          if (t2)
            H.throwExpression(H.argumentErrorValue(line));
          if (!t1.test(line)) {
            t1 = $.$get$_headerPattern()._nativeRegExp;
            if (t2)
              H.throwExpression(H.argumentErrorValue(line));
            if (!t1.test(line)) {
              t1 = $.$get$_blockquotePattern()._nativeRegExp;
              if (t2)
                H.throwExpression(H.argumentErrorValue(line));
              if (!t1.test(line)) {
                t1 = $.$get$_hrPattern()._nativeRegExp;
                if (t2)
                  H.throwExpression(H.argumentErrorValue(line));
                if (!t1.test(line)) {
                  t1 = $.$get$_ulPattern()._nativeRegExp;
                  if (t2)
                    H.throwExpression(H.argumentErrorValue(line));
                  if (!t1.test(line)) {
                    t1 = $.$get$_olPattern()._nativeRegExp;
                    if (t2)
                      H.throwExpression(H.argumentErrorValue(line));
                    if (!t1.test(line)) {
                      t1 = $.$get$_emptyPattern()._nativeRegExp;
                      if (t2)
                        H.throwExpression(H.argumentErrorValue(line));
                      t1 = t1.test(line);
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
          } else
            t1 = true;
        } else
          t1 = true;
        return !t1;
      }
    },
    HeaderSyntax: {
      "^": "BlockSyntax;",
      get$pattern: function(_) {
        return $.$get$_headerPattern();
      },
      parse$1: function(parser) {
        var match, t1, level, t2;
        match = $.$get$_headerPattern().firstMatch$1(J.$index$asx(parser.lines, parser._block_parser$_pos));
        ++parser._block_parser$_pos;
        t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        level = J.get$length$asx(t1[1]);
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        t1 = J.trim$0$s(t1[2]);
        t2 = P.String;
        return new T.Element1("h" + H.S(level), [new T.UnparsedContent(t1)], P.LinkedHashMap_LinkedHashMap$_empty(t2, t2), null);
      }
    },
    BlockquoteSyntax: {
      "^": "BlockSyntax;",
      get$pattern: function(_) {
        return $.$get$_blockquotePattern();
      },
      parseChildLines$1: function(parser) {
        var childLines, t1, t2, t3, match, t4, continuedLine;
        childLines = H.setRuntimeTypeInfo([], [P.String]);
        for (t1 = parser.lines, t2 = J.getInterceptor$asx(t1), t3 = parser.blockSyntaxes; parser._block_parser$_pos < t2.get$length(t1);) {
          match = $.$get$_blockquotePattern().firstMatch$1(t2.$index(t1, parser._block_parser$_pos));
          if (match != null) {
            t4 = match._match;
            if (1 >= t4.length)
              return H.ioore(t4, 1);
            childLines.push(t4[1]);
            ++parser._block_parser$_pos;
            continue;
          }
          if (C.JSArray_methods.firstWhere$1(t3, new U.BlockquoteSyntax_parseChildLines_closure(parser)) instanceof U.ParagraphSyntax) {
            continuedLine = J.$add$ns(C.JSArray_methods.get$last(childLines), t2.$index(t1, parser._block_parser$_pos));
            if (0 >= childLines.length)
              return H.ioore(childLines, -1);
            childLines.pop();
            childLines.push(continuedLine);
            ++parser._block_parser$_pos;
          } else
            break;
        }
        return childLines;
      },
      parse$1: function(parser) {
        var t1 = P.String;
        return new T.Element1("blockquote", parser.document.parseLines$1(this.parseChildLines$1(parser)), P.LinkedHashMap_LinkedHashMap$_empty(t1, t1), null);
      }
    },
    BlockquoteSyntax_parseChildLines_closure: {
      "^": "Closure:0;parser",
      call$1: function(s) {
        return s.canParse$1(this.parser);
      }
    },
    CodeBlockSyntax: {
      "^": "BlockSyntax;",
      get$pattern: function(_) {
        return $.$get$_indentPattern();
      },
      get$canEndBlock: function() {
        return false;
      },
      parseChildLines$1: function(parser) {
        var childLines, t1, t2, t3, match, nextMatch;
        childLines = H.setRuntimeTypeInfo([], [P.String]);
        for (t1 = parser.lines, t2 = J.getInterceptor$asx(t1); parser._block_parser$_pos < t2.get$length(t1);) {
          t3 = $.$get$_indentPattern();
          match = t3.firstMatch$1(t2.$index(t1, parser._block_parser$_pos));
          if (match != null) {
            t3 = match._match;
            if (1 >= t3.length)
              return H.ioore(t3, 1);
            childLines.push(t3[1]);
            ++parser._block_parser$_pos;
          } else {
            nextMatch = parser.get$next(parser) != null ? t3.firstMatch$1(parser.get$next(parser)) : null;
            if (J.trim$0$s(t2.$index(t1, parser._block_parser$_pos)) === "" && nextMatch != null) {
              childLines.push("");
              t3 = nextMatch._match;
              if (1 >= t3.length)
                return H.ioore(t3, 1);
              childLines.push(t3[1]);
              parser._block_parser$_pos = ++parser._block_parser$_pos + 1;
            } else
              break;
          }
        }
        return childLines;
      },
      parse$1: function(parser) {
        var childLines, t1;
        childLines = this.parseChildLines$1(parser);
        childLines.push("");
        t1 = P.String;
        return new T.Element1("pre", [new T.Element1("code", [new T.Text(H.stringReplaceAllUnchecked(H.stringReplaceAllUnchecked(C.JSString_methods.replaceAll$2(C.JSArray_methods.join$1(childLines, "\n"), "&", "&amp;"), "<", "&lt;"), ">", "&gt;"))], P.LinkedHashMap__makeEmpty(), null)], P.LinkedHashMap_LinkedHashMap$_empty(t1, t1), null);
      }
    },
    FencedCodeBlockSyntax: {
      "^": "BlockSyntax;",
      get$pattern: function(_) {
        return $.$get$_codePattern();
      },
      parseChildLines$2: function(parser, endBlock) {
        var childLines, t1, t2, t3, match, t4;
        if (endBlock == null)
          endBlock = "";
        childLines = H.setRuntimeTypeInfo([], [P.String]);
        t1 = ++parser._block_parser$_pos;
        for (t2 = parser.lines, t3 = J.getInterceptor$asx(t2); t1 < t3.get$length(t2);) {
          match = $.$get$_codePattern().firstMatch$1(t3.$index(t2, parser._block_parser$_pos));
          if (match != null) {
            t1 = match._match;
            if (1 >= t1.length)
              return H.ioore(t1, 1);
            t1 = !J.startsWith$1$s(t1[1], endBlock);
          } else
            t1 = true;
          t4 = parser._block_parser$_pos;
          if (t1) {
            childLines.push(t3.$index(t2, t4));
            t1 = ++parser._block_parser$_pos;
          } else {
            parser._block_parser$_pos = t4 + 1;
            break;
          }
        }
        return childLines;
      },
      parse$1: function(parser) {
        var t1, t2, endBlock, infoString, childLines, escaped;
        t1 = $.$get$_codePattern().firstMatch$1(J.$index$asx(parser.lines, parser._block_parser$_pos))._match;
        t2 = t1.length;
        if (1 >= t2)
          return H.ioore(t1, 1);
        endBlock = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        infoString = t1[2];
        childLines = this.parseChildLines$2(parser, endBlock);
        childLines.push("");
        escaped = H.stringReplaceAllUnchecked(H.stringReplaceAllUnchecked(C.JSString_methods.replaceAll$2(C.JSArray_methods.join$1(childLines, "\n"), "&", "&amp;"), "<", "&lt;"), ">", "&gt;");
        t1 = P.LinkedHashMap__makeEmpty();
        infoString = J.trim$0$s(infoString);
        if (infoString.length !== 0)
          t1.$indexSet(0, "class", "language-" + H.S(C.JSArray_methods.get$first(infoString.split(" "))));
        t2 = P.String;
        return new T.Element1("pre", [new T.Element1("code", [new T.Text(escaped)], t1, null)], P.LinkedHashMap_LinkedHashMap$_empty(t2, t2), null);
      }
    },
    HorizontalRuleSyntax: {
      "^": "BlockSyntax;",
      get$pattern: function(_) {
        return $.$get$_hrPattern();
      },
      parse$1: function(parser) {
        ++parser._block_parser$_pos;
        return new T.Element1("hr", null, P.LinkedHashMap__makeEmpty(), null);
      }
    },
    BlockHtmlSyntax: {
      "^": "BlockSyntax;",
      get$canEndBlock: function() {
        return true;
      }
    },
    BlockTagBlockHtmlSyntax: {
      "^": "BlockHtmlSyntax;",
      get$pattern: function(_) {
        return P.RegExp_RegExp("^ {0,3}</?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|>|/>|$)", true, false);
      },
      parse$1: function(parser) {
        var childLines, t1, t2;
        childLines = H.setRuntimeTypeInfo([], [P.String]);
        t1 = parser.lines;
        t2 = J.getInterceptor$asx(t1);
        while (true) {
          if (!(parser._block_parser$_pos < t2.get$length(t1) && !parser.matches$1(0, $.$get$_emptyPattern())))
            break;
          childLines.push(t2.$index(t1, parser._block_parser$_pos));
          ++parser._block_parser$_pos;
        }
        return new T.Text(C.JSArray_methods.join$1(childLines, "\n"));
      }
    },
    OtherTagBlockHtmlSyntax: {
      "^": "BlockTagBlockHtmlSyntax;",
      get$canEndBlock: function() {
        return false;
      },
      get$pattern: function(_) {
        return P.RegExp_RegExp("^ {0,3}</?\\w+(?:>|\\s+[^>]*>)\\s*$", true, false);
      }
    },
    LongBlockHtmlSyntax: {
      "^": "BlockHtmlSyntax;_block_parser$_pattern,_endPattern",
      get$pattern: function(_) {
        return this._block_parser$_pattern;
      },
      parse$1: function(parser) {
        var childLines, t1, t2;
        childLines = H.setRuntimeTypeInfo([], [P.String]);
        for (t1 = parser.lines, t2 = J.getInterceptor$asx(t1); parser._block_parser$_pos < t2.get$length(t1);) {
          childLines.push(t2.$index(t1, parser._block_parser$_pos));
          if (parser.matches$1(0, this._endPattern))
            break;
          ++parser._block_parser$_pos;
        }
        ++parser._block_parser$_pos;
        return new T.Text(C.JSArray_methods.join$1(childLines, "\n"));
      }
    },
    ListItem: {
      "^": "Object;forceBlock,lines<"
    },
    ListSyntax: {
      "^": "BlockSyntax;",
      get$canEndBlock: function() {
        return true;
      },
      parse$1: function(parser) {
        var t1, items, t2, t3, t4, t5, t6, listMarker, indent, startNumber, t7, t8, line, precedingWhitespace, digits, marker, firstWhitespace, restWhitespace, $content, isBlank, markerAsSpaces, continuedLine, itemNodes, anyEmptyLines, anyEmptyLinesBetweenBlocks, _i, item, t9, t10, t11, itemParser, i, child;
        t1 = {};
        items = H.setRuntimeTypeInfo([], [U.ListItem]);
        t2 = P.String;
        t1.childLines = H.setRuntimeTypeInfo([], [t2]);
        t3 = new U.ListSyntax_parse_endItem(t1, items);
        t1.match = null;
        t4 = new U.ListSyntax_parse_tryMatch(t1, parser);
        for (t5 = parser.lines, t6 = J.getInterceptor$asx(t5), listMarker = null, indent = null, startNumber = null; parser._block_parser$_pos < t6.get$length(t5);) {
          t7 = $.$get$_emptyPattern();
          if (t4.call$1(t7) === true) {
            t8 = parser.get$next(parser);
            if (t7.firstMatch$1(t8 == null ? "" : t8) != null)
              break;
            t1.childLines.push("");
          } else if (indent != null && J.startsWith$1$s(t6.$index(t5, parser._block_parser$_pos), indent)) {
            line = J.replaceFirst$2$s(t6.$index(t5, parser._block_parser$_pos), indent, "");
            t1.childLines.push(line);
          } else if (t4.call$1($.$get$_ulPattern()) === true || t4.call$1($.$get$_olPattern()) === true) {
            t7 = t1.match._match;
            t8 = t7.length;
            if (1 >= t8)
              return H.ioore(t7, 1);
            precedingWhitespace = t7[1];
            if (2 >= t8)
              return H.ioore(t7, 2);
            digits = t7[2];
            if (digits == null)
              digits = "";
            if (startNumber == null && J.get$isNotEmpty$asx(digits) === true)
              startNumber = H.Primitives_parseInt(digits, null, null);
            t7 = t1.match._match;
            t8 = t7.length;
            if (3 >= t8)
              return H.ioore(t7, 3);
            marker = t7[3];
            if (5 >= t8)
              return H.ioore(t7, 5);
            firstWhitespace = t7[5];
            if (firstWhitespace == null)
              firstWhitespace = "";
            if (6 >= t8)
              return H.ioore(t7, 6);
            restWhitespace = t7[6];
            if (restWhitespace == null)
              restWhitespace = "";
            if (7 >= t8)
              return H.ioore(t7, 7);
            $content = t7[7];
            if ($content == null)
              $content = "";
            isBlank = J.get$isEmpty$asx($content);
            if (listMarker != null && !J.$eq$(listMarker, marker))
              break;
            markerAsSpaces = C.JSString_methods.$mul(" ", J.$add$ns(J.get$length$asx(digits), J.get$length$asx(marker)));
            if (isBlank === true)
              indent = J.$add$ns(J.$add$ns(precedingWhitespace, markerAsSpaces), " ");
            else {
              t7 = J.getInterceptor$ns(precedingWhitespace);
              indent = J.$ge$n(J.get$length$asx(restWhitespace), 4) ? J.$add$ns(t7.$add(precedingWhitespace, markerAsSpaces), firstWhitespace) : J.$add$ns(J.$add$ns(t7.$add(precedingWhitespace, markerAsSpaces), firstWhitespace), restWhitespace);
            }
            t3.call$0();
            t1.childLines.push(J.$add$ns(restWhitespace, $content));
            listMarker = marker;
          } else if (U.BlockSyntax_isAtBlockEnd(parser))
            break;
          else {
            t7 = t1.childLines;
            if (t7.length !== 0 && J.$eq$(C.JSArray_methods.get$last(t7), "")) {
              parser.encounteredBlankLine = true;
              break;
            }
            continuedLine = J.$add$ns(C.JSArray_methods.get$last(t1.childLines), t6.$index(t5, parser._block_parser$_pos));
            t7 = t1.childLines;
            if (0 >= t7.length)
              return H.ioore(t7, -1);
            t7.pop();
            t7.push(continuedLine);
          }
          ++parser._block_parser$_pos;
        }
        t3.call$0();
        itemNodes = H.setRuntimeTypeInfo([], [T.Element1]);
        C.JSArray_methods.forEach$1(items, this.get$removeLeadingEmptyLine());
        anyEmptyLines = this.removeTrailingEmptyLines$1(items);
        for (t1 = items.length, t3 = parser.document, anyEmptyLinesBetweenBlocks = false, _i = 0; _i < items.length; items.length === t1 || (0, H.throwConcurrentModificationError)(items), ++_i) {
          item = items[_i];
          t4 = [];
          t5 = new U.LongBlockHtmlSyntax(null, null);
          t5._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<pre(?:\\s|>|$)", true, false);
          t5._endPattern = P.RegExp_RegExp("</pre>", true, false);
          t6 = new U.LongBlockHtmlSyntax(null, null);
          t6._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<script(?:\\s|>|$)", true, false);
          t6._endPattern = P.RegExp_RegExp("</script>", true, false);
          t7 = new U.LongBlockHtmlSyntax(null, null);
          t7._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<style(?:\\s|>|$)", true, false);
          t7._endPattern = P.RegExp_RegExp("</style>", true, false);
          t8 = new U.LongBlockHtmlSyntax(null, null);
          t8._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<!--", true, false);
          t8._endPattern = P.RegExp_RegExp("-->", true, false);
          t9 = new U.LongBlockHtmlSyntax(null, null);
          t9._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<\\?", true, false);
          t9._endPattern = P.RegExp_RegExp("\\?>", true, false);
          t10 = new U.LongBlockHtmlSyntax(null, null);
          t10._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<![A-Z]", true, false);
          t10._endPattern = P.RegExp_RegExp(">", true, false);
          t11 = new U.LongBlockHtmlSyntax(null, null);
          t11._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<!\\[CDATA\\[", true, false);
          t11._endPattern = P.RegExp_RegExp("\\]\\]>", true, false);
          t11 = [C.C_EmptyBlockSyntax, C.C_BlockTagBlockHtmlSyntax, t5, t6, t7, t8, t9, t10, t11, C.C_OtherTagBlockHtmlSyntax, C.C_SetextHeaderSyntax, C.C_HeaderSyntax, C.C_CodeBlockSyntax, C.C_BlockquoteSyntax, C.C_HorizontalRuleSyntax, C.C_UnorderedListSyntax, C.C_OrderedListSyntax, C.C_ParagraphSyntax];
          itemParser = new U.BlockParser(item.lines, t3, t4, 0, false, t11);
          C.JSArray_methods.addAll$1(t4, t3.blockSyntaxes);
          C.JSArray_methods.addAll$1(t4, t11);
          itemNodes.push(new T.Element1("li", itemParser.parseLines$0(), P.LinkedHashMap_LinkedHashMap$_empty(t2, t2), null));
          anyEmptyLinesBetweenBlocks = anyEmptyLinesBetweenBlocks || itemParser.encounteredBlankLine;
        }
        if (!anyEmptyLines && !anyEmptyLinesBetweenBlocks)
          for (t1 = itemNodes.length, _i = 0; _i < itemNodes.length; itemNodes.length === t1 || (0, H.throwConcurrentModificationError)(itemNodes), ++_i) {
            item = itemNodes[_i];
            t3 = J.getInterceptor$x(item);
            i = 0;
            while (true) {
              t4 = J.get$length$asx(t3.get$children(item));
              if (typeof t4 !== "number")
                return H.iae(t4);
              if (!(i < t4))
                break;
              child = J.$index$asx(t3.get$children(item), i);
              t4 = J.getInterceptor(child);
              if (!!t4.$isElement1 && child.tag === "p") {
                J.removeAt$1$ax(t3.get$children(item), i);
                J.insertAll$2$ax(t3.get$children(item), i, t4.get$children(child));
              }
              ++i;
            }
          }
        if (this.get$listTag() === "ol" && !J.$eq$(startNumber, 1)) {
          t1 = this.get$listTag();
          t2 = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
          t2.$indexSet(0, "start", H.S(startNumber));
          return new T.Element1(t1, itemNodes, t2, null);
        } else
          return new T.Element1(this.get$listTag(), itemNodes, P.LinkedHashMap_LinkedHashMap$_empty(t2, t2), null);
      },
      removeLeadingEmptyLine$1: [function(item) {
        var t1, t2;
        if (J.get$isNotEmpty$asx(item.get$lines())) {
          t1 = $.$get$_emptyPattern();
          t2 = J.get$first$ax(item.get$lines());
          t2 = t1._nativeRegExp.test(H.checkString(t2));
          t1 = t2;
        } else
          t1 = false;
        if (t1)
          J.removeAt$1$ax(item.get$lines(), 0);
      }, "call$1", "get$removeLeadingEmptyLine", 2, 0, 206],
      removeTrailingEmptyLines$1: function(items) {
        var anyEmpty, i, t1, t2, t3;
        for (anyEmpty = false, i = 0; i < items.length; ++i) {
          if (items[i].lines.length === 1)
            continue;
          while (true) {
            t1 = items.length;
            if (i >= t1)
              return H.ioore(items, i);
            t2 = items[i].lines;
            if (t2.length !== 0) {
              t3 = $.$get$_emptyPattern();
              if (i >= t1)
                return H.ioore(items, i);
              t2 = C.JSArray_methods.get$last(t2);
              t3 = t3._nativeRegExp;
              if (typeof t2 !== "string")
                H.throwExpression(H.argumentErrorValue(t2));
              t1 = t3.test(t2);
            } else
              t1 = false;
            if (!t1)
              break;
            t1 = items.length;
            if (i < t1 - 1)
              anyEmpty = true;
            if (i >= t1)
              return H.ioore(items, i);
            t1 = items[i].lines;
            if (0 >= t1.length)
              return H.ioore(t1, -1);
            t1.pop();
          }
        }
        return anyEmpty;
      }
    },
    ListSyntax_parse_endItem: {
      "^": "Closure:1;_box_0,items",
      call$0: function() {
        var t1, t2;
        t1 = this._box_0;
        t2 = t1.childLines;
        if (t2.length > 0) {
          this.items.push(new U.ListItem(false, t2));
          t1.childLines = H.setRuntimeTypeInfo([], [P.String]);
        }
      }
    },
    ListSyntax_parse_tryMatch: {
      "^": "Closure:207;_box_0,parser",
      call$1: function(pattern) {
        var t1, match;
        t1 = this.parser;
        match = pattern.firstMatch$1(J.$index$asx(t1.lines, t1._block_parser$_pos));
        this._box_0.match = match;
        return match != null;
      }
    },
    UnorderedListSyntax: {
      "^": "ListSyntax;",
      get$pattern: function(_) {
        return $.$get$_ulPattern();
      },
      get$listTag: function() {
        return "ul";
      }
    },
    OrderedListSyntax: {
      "^": "ListSyntax;",
      get$pattern: function(_) {
        return $.$get$_olPattern();
      },
      get$listTag: function() {
        return "ol";
      }
    },
    ParagraphSyntax: {
      "^": "BlockSyntax;",
      get$canEndBlock: function() {
        return false;
      },
      canParse$1: function(parser) {
        return true;
      },
      parse$1: function(parser) {
        var t1, childLines, t2, t3, paragraphLines;
        t1 = P.String;
        childLines = H.setRuntimeTypeInfo([], [t1]);
        for (t2 = parser.lines, t3 = J.getInterceptor$asx(t2); !U.BlockSyntax_isAtBlockEnd(parser);) {
          childLines.push(t3.$index(t2, parser._block_parser$_pos));
          ++parser._block_parser$_pos;
        }
        paragraphLines = this._extractReflinkDefinitions$2(parser, childLines);
        if (paragraphLines == null)
          return new T.Text("");
        else
          return new T.Element1("p", [new T.UnparsedContent(C.JSArray_methods.join$1(paragraphLines, "\n"))], P.LinkedHashMap_LinkedHashMap$_empty(t1, t1), null);
      },
      _extractReflinkDefinitions$2: function(parser, lines) {
        var t1, i, contents, j, t2;
        t1 = new U.ParagraphSyntax__extractReflinkDefinitions_lineStartsReflinkDefinition(lines);
        $loopOverDefinitions$0:
          for (i = 0; true; i = j) {
            if (t1.call$1(i) !== true)
              break;
            if (i < 0 || i >= lines.length)
              return H.ioore(lines, i);
            contents = lines[i];
            j = i + 1;
            for (; j < lines.length;)
              if (t1.call$1(j) === true)
                if (this._parseReflinkDefinition$2(parser, contents))
                  continue $loopOverDefinitions$0;
                else
                  break;
              else {
                t2 = J.$add$ns(contents, "\n");
                if (j >= lines.length)
                  return H.ioore(lines, j);
                contents = J.$add$ns(t2, lines[j]);
                ++j;
              }
            if (this._parseReflinkDefinition$2(parser, contents)) {
              i = j;
              break;
            }
            for (t1 = [H.getTypeArgumentByIndex(lines, 0)]; j >= i;) {
              P.RangeError_checkValidRange(i, j, lines.length, null, null, null);
              if (i < 0)
                H.throwExpression(P.RangeError$range(i, 0, null, "start", null));
              if (j < 0)
                H.throwExpression(P.RangeError$range(j, 0, null, "end", null));
              if (i > j)
                H.throwExpression(P.RangeError$range(i, 0, j, "start", null));
              if (this._parseReflinkDefinition$2(parser, new H.SubListIterable(lines, i, j, t1).join$1(0, "\n"))) {
                i = j;
                break;
              }
              --j;
            }
            break;
          }
        if (i === lines.length)
          return;
        else
          return C.JSArray_methods.sublist$1(lines, i);
      },
      _parseReflinkDefinition$2: function(parser, contents) {
        var t1, match, t2, t3, label, destination, title;
        t1 = {};
        match = P.RegExp_RegExp("^[ ]{0,3}\\[([^\\]]+)\\]:\\s+(?:<(\\S+)>|(\\S+))\\s*(\"[^\"]+\"|'[^']+'|\\([^)]+\\)|)\\s*$", true, true).firstMatch$1(contents);
        if (match == null)
          return false;
        t2 = match._match;
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        if (J.$lt$n(J.get$length$asx(t2[0]), J.get$length$asx(contents)))
          return false;
        t3 = t2.length;
        if (1 >= t3)
          return H.ioore(t2, 1);
        label = t2[1];
        t1.label = label;
        if (2 >= t3)
          return H.ioore(t2, 2);
        destination = t2[2];
        if (destination == null) {
          if (3 >= t3)
            return H.ioore(t2, 3);
          destination = t2[3];
        }
        if (4 >= t3)
          return H.ioore(t2, 4);
        title = t2[4];
        t1.title = title;
        t2 = $.$get$ParagraphSyntax__whitespacePattern()._nativeRegExp;
        if (typeof label !== "string")
          H.throwExpression(H.argumentErrorValue(label));
        if (t2.test(label))
          return false;
        if (J.$eq$(title, ""))
          t1.title = null;
        else {
          t2 = J.getInterceptor$asx(title);
          t1.title = t2.substring$2(title, 1, J.$sub$n(t2.get$length(title), 1));
        }
        label = C.JSString_methods.trim$0(J.toLowerCase$0$s(label));
        t1.label = label;
        parser.document.refLinks.putIfAbsent$2(0, label, new U.ParagraphSyntax__parseReflinkDefinition_closure(t1, destination));
        return true;
      }
    },
    ParagraphSyntax__extractReflinkDefinitions_lineStartsReflinkDefinition: {
      "^": "Closure:313;lines",
      call$1: function(i) {
        var t1 = this.lines;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        return J.startsWith$1$s(t1[i], $.$get$ParagraphSyntax__reflinkDefinitionStart());
      }
    },
    ParagraphSyntax__parseReflinkDefinition_closure: {
      "^": "Closure:1;_box_0,destination",
      call$0: function() {
        var t1 = this._box_0;
        return new L.Link(t1.label, this.destination, t1.title);
      }
    }
  }], ["markdown.src.document", "package:markdown/src/document.dart",, L, {
    "^": "",
    Document: {
      "^": "Object;refLinks,blockSyntaxes,inlineSyntaxes,extensionSet,linkResolver,imageLinkResolver",
      parseLines$1: function(lines) {
        var t1, t2, t3, t4, t5, t6, t7, t8, nodes;
        t1 = [];
        t2 = new U.LongBlockHtmlSyntax(null, null);
        t2._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<pre(?:\\s|>|$)", true, false);
        t2._endPattern = P.RegExp_RegExp("</pre>", true, false);
        t3 = new U.LongBlockHtmlSyntax(null, null);
        t3._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<script(?:\\s|>|$)", true, false);
        t3._endPattern = P.RegExp_RegExp("</script>", true, false);
        t4 = new U.LongBlockHtmlSyntax(null, null);
        t4._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<style(?:\\s|>|$)", true, false);
        t4._endPattern = P.RegExp_RegExp("</style>", true, false);
        t5 = new U.LongBlockHtmlSyntax(null, null);
        t5._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<!--", true, false);
        t5._endPattern = P.RegExp_RegExp("-->", true, false);
        t6 = new U.LongBlockHtmlSyntax(null, null);
        t6._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<\\?", true, false);
        t6._endPattern = P.RegExp_RegExp("\\?>", true, false);
        t7 = new U.LongBlockHtmlSyntax(null, null);
        t7._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<![A-Z]", true, false);
        t7._endPattern = P.RegExp_RegExp(">", true, false);
        t8 = new U.LongBlockHtmlSyntax(null, null);
        t8._block_parser$_pattern = P.RegExp_RegExp("^ {0,3}<!\\[CDATA\\[", true, false);
        t8._endPattern = P.RegExp_RegExp("\\]\\]>", true, false);
        t8 = [C.C_EmptyBlockSyntax, C.C_BlockTagBlockHtmlSyntax, t2, t3, t4, t5, t6, t7, t8, C.C_OtherTagBlockHtmlSyntax, C.C_SetextHeaderSyntax, C.C_HeaderSyntax, C.C_CodeBlockSyntax, C.C_BlockquoteSyntax, C.C_HorizontalRuleSyntax, C.C_UnorderedListSyntax, C.C_OrderedListSyntax, C.C_ParagraphSyntax];
        C.JSArray_methods.addAll$1(t1, this.blockSyntaxes);
        C.JSArray_methods.addAll$1(t1, t8);
        nodes = new U.BlockParser(lines, this, t1, 0, false, t8).parseLines$0();
        this._parseInlineContent$1(nodes);
        return nodes;
      },
      _parseInlineContent$1: function(nodes) {
        var i, t1, node, inlineNodes;
        for (i = 0; t1 = nodes.length, i < t1; ++i) {
          if (i < 0)
            return H.ioore(nodes, i);
          node = nodes[i];
          t1 = J.getInterceptor(node);
          if (!!t1.$isUnparsedContent) {
            inlineNodes = R.InlineParser$(node.textContent, this).parse$0();
            C.JSArray_methods.removeAt$1(nodes, i);
            C.JSArray_methods.insertAll$2(nodes, i, inlineNodes);
            i += inlineNodes.length - 1;
          } else if (!!t1.$isElement1 && node.children != null)
            this._parseInlineContent$1(t1.get$children(node));
        }
      }
    },
    Link: {
      "^": "Object;id>,url>,title>"
    }
  }], ["", "package:markdown/src/extension_set.dart",, E, {
    "^": "",
    ExtensionSet: {
      "^": "Object;blockSyntaxes,inlineSyntaxes"
    }
  }], ["markdown.src.html_renderer", "package:markdown/src/html_renderer.dart",, B, {
    "^": "",
    markdownToHtml: function(markdown, blockSyntaxes, extensionSet, imageLinkResolver, inlineOnly, inlineSyntaxes, linkResolver) {
      var $document, t1, t2;
      $document = new L.Document(P.LinkedHashMap__makeEmpty(), null, null, null, linkResolver, imageLinkResolver);
      t1 = $.$get$ExtensionSet_commonMark();
      $document.extensionSet = t1;
      t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
      t2.addAll$1(0, []);
      t2.addAll$1(0, t1.blockSyntaxes);
      $document.blockSyntaxes = t2;
      t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
      t2.addAll$1(0, []);
      t2.addAll$1(0, t1.inlineSyntaxes);
      $document.inlineSyntaxes = t2;
      return new B.HtmlRenderer(null, null).render$1($document.parseLines$1(J.replaceAll$2$s(markdown, "\r\n", "\n").split("\n"))) + "\n";
    },
    HtmlRenderer: {
      "^": "Object;buffer,uniqueIds",
      render$1: function(nodes) {
        var t1, _i;
        this.buffer = new P.StringBuffer("");
        this.uniqueIds = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        for (t1 = nodes.length, _i = 0; _i < nodes.length; nodes.length === t1 || (0, H.throwConcurrentModificationError)(nodes), ++_i)
          J.accept$1$x(nodes[_i], this);
        return J.toString$0$(this.buffer);
      },
      visitElementBefore$1: function(element) {
        var t1, t2, attributeNames, t3, _i, $name;
        if (this.buffer._contents.length !== 0 && $.$get$HtmlRenderer__blockTags().firstMatch$1(element.tag) != null)
          this.buffer._contents += "\n";
        t1 = element.tag;
        this.buffer._contents += "<" + H.S(t1);
        t2 = element.attributes;
        attributeNames = t2.get$keys(t2).toList$0(0);
        C.JSArray_methods.sort$1(attributeNames, new B.HtmlRenderer_visitElementBefore_closure());
        for (t3 = attributeNames.length, _i = 0; _i < attributeNames.length; attributeNames.length === t3 || (0, H.throwConcurrentModificationError)(attributeNames), ++_i) {
          $name = attributeNames[_i];
          this.buffer._contents += " " + H.S($name) + '="' + H.S(t2.$index(0, $name)) + '"';
        }
        t2 = this.buffer;
        if (element.children == null) {
          t3 = t2._contents += " />";
          if (t1 === "br")
            t2._contents = t3 + "\n";
          return false;
        } else {
          t2._contents += ">";
          return true;
        }
      }
    },
    HtmlRenderer_visitElementBefore_closure: {
      "^": "Closure:4;",
      call$2: function(a, b) {
        return J.compareTo$1$ns(a, b);
      }
    }
  }], ["markdown.src.inline_parser", "package:markdown/src/inline_parser.dart",, R, {
    "^": "",
    InlineParser: {
      "^": "Object;source,document,syntaxes,pos,start>,_stack",
      parse$0: function() {
        var t1, t2, t3, t4, matched, i, t5, _i;
        t1 = this._stack;
        t1.push(new R.TagState(0, 0, null, H.setRuntimeTypeInfo([], [T.Node1])));
        for (t2 = this.source, t3 = J.getInterceptor$asx(t2), t4 = this.syntaxes; this.pos !== t3.get$length(t2);) {
          i = t1.length - 1;
          while (true) {
            if (!(i > 0)) {
              matched = false;
              break;
            }
            if (i >= t1.length)
              return H.ioore(t1, i);
            if (t1[i].tryMatch$1(this)) {
              matched = true;
              break;
            }
            --i;
          }
          if (matched)
            continue;
          t5 = t4.length;
          _i = 0;
          while (true) {
            if (!(_i < t4.length)) {
              matched = false;
              break;
            }
            if (t4[_i].tryMatch$1(this)) {
              matched = true;
              break;
            }
            t4.length === t5 || (0, H.throwConcurrentModificationError)(t4);
            ++_i;
          }
          if (matched)
            continue;
          ++this.pos;
        }
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        return t1[0].close$2(0, this, null);
      },
      writeTextRange$2: function(start, end) {
        var text, nodes, textNode, t1, t2;
        if (J.$le$n(end, start))
          return;
        text = J.substring$2$s(this.source, start, end);
        nodes = C.JSArray_methods.get$last(this._stack).children;
        if (nodes.length > 0 && C.JSArray_methods.get$last(nodes) instanceof T.Text) {
          textNode = H.interceptedTypeCast(C.JSArray_methods.get$last(nodes), "$isText");
          t1 = nodes.length - 1;
          t2 = H.S(textNode.text) + text;
          if (t1 < 0 || t1 >= nodes.length)
            return H.ioore(nodes, t1);
          nodes[t1] = new T.Text(t2);
        } else
          nodes.push(new T.Text(text));
      },
      InlineParser$2: function(source, $document) {
        var t1, t2, t3, t4, t5;
        t1 = this.syntaxes;
        t2 = this.document;
        C.JSArray_methods.addAll$1(t1, t2.inlineSyntaxes);
        if (t2.inlineSyntaxes.any$1(0, new R.InlineParser_closure(this)))
          t1.push(new R.TextSyntax(null, P.RegExp_RegExp("[A-Za-z0-9]+\\b", true, true)));
        else
          t1.push(new R.TextSyntax(null, P.RegExp_RegExp("[ \\tA-Za-z0-9]*[A-Za-z0-9]", true, true)));
        C.JSArray_methods.addAll$1(t1, $.$get$InlineParser__defaultSyntaxes());
        t3 = R.LinkSyntax_linkPattern();
        t3 = P.RegExp_RegExp(t3, true, true);
        t4 = P.RegExp_RegExp("\\[", true, true);
        t5 = R.LinkSyntax_linkPattern();
        C.JSArray_methods.insertAll$2(t1, 1, [new R.LinkSyntax(t2.linkResolver, t3, null, t4), new R.ImageSyntax(t2.imageLinkResolver, P.RegExp_RegExp(t5, true, true), null, P.RegExp_RegExp("!\\[", true, true))]);
      },
      start$0: function($receiver) {
        return this.start.call$0();
      },
      static: {
        InlineParser$: function(source, $document) {
          var t1 = new R.InlineParser(source, $document, H.setRuntimeTypeInfo([], [R.InlineSyntax]), 0, 0, H.setRuntimeTypeInfo([], [R.TagState]));
          t1.InlineParser$2(source, $document);
          return t1;
        }
      }
    },
    InlineParser_closure: {
      "^": "Closure:0;$this",
      call$1: function(s) {
        return !C.JSArray_methods.contains$1(this.$this.document.extensionSet.inlineSyntaxes, s);
      }
    },
    InlineSyntax: {
      "^": "Object;",
      tryMatch$1: function(parser) {
        var startMatch, t1, t2;
        startMatch = this.pattern.matchAsPrefix$2(0, parser.source, parser.pos);
        if (startMatch != null) {
          parser.writeTextRange$2(parser.start, parser.pos);
          parser.start = parser.pos;
          if (this.onMatch$2(parser, startMatch)) {
            t1 = startMatch._match;
            if (0 >= t1.length)
              return H.ioore(t1, 0);
            t1 = J.get$length$asx(t1[0]);
            t2 = parser.pos;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = t2 + t1;
            parser.pos = t1;
            parser.start = t1;
          }
          return true;
        }
        return false;
      }
    },
    LineBreakSyntax: {
      "^": "InlineSyntax;pattern",
      onMatch$2: function(parser, match) {
        var t1 = P.LinkedHashMap__makeEmpty();
        C.JSArray_methods.get$last(parser._stack).children.push(new T.Element1("br", null, t1, null));
        return true;
      }
    },
    TextSyntax: {
      "^": "InlineSyntax;substitute,pattern",
      onMatch$2: function(parser, match) {
        var t1, t2;
        t1 = this.substitute;
        if (t1 == null) {
          t1 = match._match;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1 = J.get$length$asx(t1[0]);
          t2 = parser.pos;
          if (typeof t1 !== "number")
            return H.iae(t1);
          parser.pos = t2 + t1;
          return false;
        }
        C.JSArray_methods.get$last(parser._stack).children.push(new T.Text(t1));
        return true;
      },
      static: {
        TextSyntax$: function(pattern, sub) {
          return new R.TextSyntax(sub, P.RegExp_RegExp(pattern, true, true));
        }
      }
    },
    EscapeSyntax: {
      "^": "InlineSyntax;pattern",
      onMatch$2: function(parser, match) {
        var t1 = match._match;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1 = J.$index$asx(t1[0], 1);
        C.JSArray_methods.get$last(parser._stack).children.push(new T.Text(t1));
        return true;
      }
    },
    InlineHtmlSyntax: {
      "^": "TextSyntax;substitute,pattern"
    },
    AutolinkSyntax: {
      "^": "InlineSyntax;pattern",
      onMatch$2: function(parser, match) {
        var t1, url, t2;
        t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        url = t1[1];
        t1 = H.stringReplaceAllUnchecked(H.stringReplaceAllUnchecked(J.replaceAll$2$s(url, "&", "&amp;"), "<", "&lt;"), ">", "&gt;");
        t2 = P.LinkedHashMap__makeEmpty();
        t2.$indexSet(0, "href", url);
        C.JSArray_methods.get$last(parser._stack).children.push(new T.Element1("a", [new T.Text(t1)], t2, null));
        return true;
      }
    },
    TagSyntax: {
      "^": "InlineSyntax;endPattern,tag,pattern",
      onMatch$2: function(parser, match) {
        var t1, t2;
        t1 = parser.pos;
        t2 = match._match;
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        t2 = J.get$length$asx(t2[0]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        parser._stack.push(new R.TagState(t1, t1 + t2, this, H.setRuntimeTypeInfo([], [T.Node1])));
        return true;
      },
      onMatchEnd$3: function(parser, match, state) {
        var t1 = P.String;
        C.JSArray_methods.get$last(parser._stack).children.push(new T.Element1(this.tag, state.children, P.LinkedHashMap_LinkedHashMap$_empty(t1, t1), null));
        return true;
      },
      static: {
        TagSyntax$: function(pattern, end, tag) {
          return new R.TagSyntax(P.RegExp_RegExp(end != null ? end : pattern, true, true), tag, P.RegExp_RegExp(pattern, true, true));
        }
      }
    },
    LinkSyntax: {
      "^": "TagSyntax;linkResolver,endPattern,tag,pattern",
      createNode$3: function(parser, match, state) {
        var t1, element;
        t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        if (t1[1] == null) {
          element = this._createElement$3(0, parser, match, state);
          if (element != null)
            return element;
          t1 = this.linkResolver;
          if (t1 == null)
            return;
          return t1.call$1(J.substring$2$s(parser.source, state.endPos, parser.pos));
        } else
          return this._createElement$3(0, parser, match, state);
      },
      _createElement$3: function(_, parser, match, state) {
        var link, t1, t2;
        link = this.getLink$3(parser, match, state);
        if (link == null)
          return;
        t1 = P.String;
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        t2 = J.getInterceptor$x(link);
        t1.$indexSet(0, "href", H.stringReplaceAllUnchecked(H.stringReplaceAllUnchecked(J.replaceAll$2$s(t2.get$url(link), "&", "&amp;"), "<", "&lt;"), ">", "&gt;"));
        if (t2.get$title(link) != null)
          t1.$indexSet(0, "title", H.stringReplaceAllUnchecked(H.stringReplaceAllUnchecked(J.replaceAll$2$s(t2.get$title(link), "&", "&amp;"), "<", "&lt;"), ">", "&gt;"));
        return new T.Element1("a", state.children, t1, null);
      },
      getLink$3: function(parser, match, state) {
        var t1, t2, url, title, id;
        t1 = match._match;
        t2 = t1.length;
        if (3 >= t2)
          return H.ioore(t1, 3);
        url = t1[3];
        if (url != null) {
          if (4 >= t2)
            return H.ioore(t1, 4);
          title = t1[4];
          t1 = J.getInterceptor$s(url);
          return new L.Link(null, t1.startsWith$1(url, "<") && t1.endsWith$1(url, ">") ? t1.substring$2(url, 1, J.$sub$n(t1.get$length(url), 1)) : url, title);
        } else {
          t2 = new R.LinkSyntax_getLink__contents(this, parser, state);
          if (t1[1] == null)
            id = t2.call$0();
          else if (J.$eq$(t1[2], ""))
            id = t2.call$0();
          else {
            if (2 >= t1.length)
              return H.ioore(t1, 2);
            id = t1[2];
          }
          return parser.document.refLinks.$index(0, J.toLowerCase$0$s(id));
        }
      },
      onMatchEnd$3: function(parser, match, state) {
        var node = this.createNode$3(parser, match, state);
        if (node == null)
          return false;
        C.JSArray_methods.get$last(parser._stack).children.push(node);
        return true;
      },
      static: {
        LinkSyntax_linkPattern: function() {
          return '](?:(\\[([^\\]]*)\\]|\\((\\S*?)(?:\\s*"([^"]+?)"\\s*|)\\))|)';
        },
        LinkSyntax$: function(linkResolver, pattern) {
          var t1 = R.LinkSyntax_linkPattern();
          return new R.LinkSyntax(linkResolver, P.RegExp_RegExp(t1, true, true), null, P.RegExp_RegExp(pattern, true, true));
        }
      }
    },
    LinkSyntax_getLink__contents: {
      "^": "Closure:55;$this,parser,state",
      call$0: function() {
        var t1 = this.parser;
        return J.substring$2$s(t1.source, this.state.startPos + (this.$this.pattern.pattern.length - 1), t1.pos);
      }
    },
    ImageSyntax: {
      "^": "LinkSyntax;linkResolver,endPattern,tag,pattern",
      _createElement$3: function(_, parser, match, state) {
        var link, t1, t2, t3;
        link = this.getLink$3(parser, match, state);
        if (link == null)
          return;
        t1 = P.LinkedHashMap__makeEmpty();
        t2 = J.getInterceptor$x(link);
        t1.$indexSet(0, "src", H.stringReplaceAllUnchecked(H.stringReplaceAllUnchecked(J.replaceAll$2$s(t2.get$url(link), "&", "&amp;"), "<", "&lt;"), ">", "&gt;"));
        t3 = state.get$textContent();
        t1.$indexSet(0, "alt", t3);
        if (t2.get$title(link) != null)
          t1.$indexSet(0, "title", H.stringReplaceAllUnchecked(H.stringReplaceAllUnchecked(J.replaceAll$2$s(t2.get$title(link), "&", "&amp;"), "<", "&lt;"), ">", "&gt;"));
        return new T.Element1("img", null, t1, null);
      },
      static: {
        ImageSyntax$: function(linkResolver) {
          var t1 = R.LinkSyntax_linkPattern();
          return new R.ImageSyntax(linkResolver, P.RegExp_RegExp(t1, true, true), null, P.RegExp_RegExp("!\\[", true, true));
        }
      }
    },
    CodeSyntax: {
      "^": "InlineSyntax;pattern",
      tryMatch$1: function(parser) {
        var t1, match, t2;
        t1 = parser.pos;
        if (t1 > 0 && J.$eq$(J.$index$asx(parser.source, t1 - 1), "`"))
          return false;
        match = this.pattern.matchAsPrefix$2(0, parser.source, parser.pos);
        if (match == null)
          return false;
        parser.writeTextRange$2(parser.start, parser.pos);
        parser.start = parser.pos;
        this.onMatch$2(parser, match);
        t1 = match._match;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1 = J.get$length$asx(t1[0]);
        t2 = parser.pos;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = t2 + t1;
        parser.pos = t1;
        parser.start = t1;
        return true;
      },
      onMatch$2: function(parser, match) {
        var t1, t2;
        t1 = match._match;
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        t1 = H.stringReplaceAllUnchecked(H.stringReplaceAllUnchecked(C.JSString_methods.replaceAll$2(J.trim$0$s(t1[2]), "&", "&amp;"), "<", "&lt;"), ">", "&gt;");
        t2 = P.LinkedHashMap__makeEmpty();
        C.JSArray_methods.get$last(parser._stack).children.push(new T.Element1("code", [new T.Text(t1)], t2, null));
        return true;
      }
    },
    TagState: {
      "^": "Object;startPos<,endPos<,syntax,children>",
      tryMatch$1: function(parser) {
        var endMatch = this.syntax.endPattern.matchAsPrefix$2(0, parser.source, parser.pos);
        if (endMatch != null) {
          this.close$2(0, parser, endMatch);
          return true;
        }
        return false;
      },
      close$2: function(_, parser, endMatch) {
        var t1, index, t2, unmatchedTags, t3, _i, unmatched;
        t1 = parser._stack;
        index = C.JSArray_methods.indexOf$1(t1, this);
        t2 = J.getInterceptor$ns(index);
        unmatchedTags = C.JSArray_methods.sublist$1(t1, t2.$add(index, 1));
        C.JSArray_methods.removeRange$2(t1, t2.$add(index, 1), t1.length);
        for (t2 = unmatchedTags.length, t3 = this.children, _i = 0; _i < unmatchedTags.length; unmatchedTags.length === t2 || (0, H.throwConcurrentModificationError)(unmatchedTags), ++_i) {
          unmatched = unmatchedTags[_i];
          parser.writeTextRange$2(unmatched.get$startPos(), unmatched.get$endPos());
          C.JSArray_methods.addAll$1(t3, J.get$children$x(unmatched));
        }
        parser.writeTextRange$2(parser.start, parser.pos);
        parser.start = parser.pos;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        if (t1.length === 0)
          return t3;
        if (this.syntax.onMatchEnd$3(parser, endMatch, this)) {
          t1 = endMatch._match;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1 = J.get$length$asx(t1[0]);
          t2 = parser.pos;
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = t2 + t1;
          parser.pos = t1;
          parser.start = t1;
        } else {
          t1 = this.startPos;
          parser.start = t1;
          parser.pos = t1;
          t1 = endMatch._match;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1 = J.get$length$asx(t1[0]);
          t2 = parser.pos;
          if (typeof t1 !== "number")
            return H.iae(t1);
          parser.pos = t2 + t1;
        }
        return;
      },
      get$textContent: function() {
        return new H.MappedListIterable(this.children, new R.TagState_textContent_closure(), [null, null]).join$1(0, "");
      }
    },
    TagState_textContent_closure: {
      "^": "Closure:58;",
      call$1: [function(child) {
        return child.get$textContent();
      }, null, null, 2, 0, null, 79, "call"]
    }
  }], ["", "package:path/path.dart",, D, {
    "^": "",
    current: function() {
      var uri, t1, t2, path;
      uri = P.Uri_base();
      if (J.$eq$(uri, $._currentUriBase))
        return $._current;
      $._currentUriBase = uri;
      t1 = $.$get$Style_platform();
      t2 = $.$get$Style_url();
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = uri.resolve$1(".").toString$0(0);
        $._current = t1;
        return t1;
      } else {
        path = uri.toFilePath$0();
        t1 = C.JSString_methods.substring$2(path, 0, path.length - 1);
        $._current = t1;
        return t1;
      }
    }
  }], ["", "package:path/src/context.dart",, M, {
    "^": "",
    _validateArgList: function(method, args) {
      var numArgs, i, numArgs0, message, t1, t2;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new P.StringBuffer("");
        t1 = method + "(";
        message._contents = t1;
        t2 = H.getTypeArgumentByIndex(args, 0);
        if (numArgs < 0)
          H.throwExpression(P.RangeError$range(numArgs, 0, null, "end", null));
        if (0 > numArgs)
          H.throwExpression(P.RangeError$range(0, 0, numArgs, "start", null));
        t1 += new H.MappedListIterable(new H.SubListIterable(args, 0, numArgs, [t2]), new M._validateArgList_closure(), [t2, null]).join$1(0, ", ");
        message._contents = t1;
        message._contents = t1 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw H.wrapException(P.ArgumentError$(message.toString$0(0)));
      }
    },
    Context: {
      "^": "Object;style>,_context$_current",
      absolute$7: function(_, part1, part2, part3, part4, part5, part6, part7) {
        var t1;
        M._validateArgList("absolute", [part1, part2, part3, part4, part5, part6, part7]);
        t1 = this.style;
        t1 = J.$gt$n(t1.rootLength$1(part1), 0) && !t1.isRootRelative$1(part1);
        if (t1)
          return part1;
        t1 = this._context$_current;
        return this.join$8(0, t1 != null ? t1 : D.current(), part1, part2, part3, part4, part5, part6, part7);
      },
      absolute$1: function($receiver, part1) {
        return this.absolute$7($receiver, part1, null, null, null, null, null, null);
      },
      join$8: function(_, part1, part2, part3, part4, part5, part6, part7, part8) {
        var parts = H.setRuntimeTypeInfo([part1, part2, part3, part4, part5, part6, part7, part8], [P.String]);
        M._validateArgList("join", parts);
        return this.joinAll$1(new H.WhereIterable(parts, new M.Context_join_closure(), [H.getTypeArgumentByIndex(parts, 0)]));
      },
      joinAll$1: function(parts) {
        var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, part, parsed, t5;
        for (t1 = parts.get$iterator(parts), t2 = new H.WhereIterator(t1, new M.Context_joinAll_closure(), [H.getTypeArgumentByIndex(parts, 0)]), t3 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t2.moveNext$0();) {
          part = t1.get$current();
          if (t3.isRootRelative$1(part) && isAbsoluteAndNotRootRelative) {
            parsed = X.ParsedPath_ParsedPath$parse(part, t3);
            t4 = t4.charCodeAt(0) == 0 ? t4 : t4;
            t4 = C.JSString_methods.substring$2(t4, 0, t3.rootLength$1(t4));
            parsed.root = t4;
            if (t3.needsSeparator$1(t4)) {
              t4 = parsed.separators;
              t5 = t3.get$separator();
              if (0 >= t4.length)
                return H.ioore(t4, 0);
              t4[0] = t5;
            }
            t4 = parsed.toString$0(0);
          } else if (J.$gt$n(t3.rootLength$1(part), 0)) {
            isAbsoluteAndNotRootRelative = !t3.isRootRelative$1(part);
            t4 = H.S(part);
          } else {
            t5 = J.getInterceptor$asx(part);
            if (!(J.$gt$n(t5.get$length(part), 0) && t3.containsSeparator$1(t5.$index(part, 0)) === true))
              if (needsSeparator)
                t4 += t3.get$separator();
            t4 += H.S(part);
          }
          needsSeparator = t3.needsSeparator$1(part);
        }
        return t4.charCodeAt(0) == 0 ? t4 : t4;
      },
      split$1: function(_, path) {
        var parsed, t1, t2;
        parsed = X.ParsedPath_ParsedPath$parse(path, this.style);
        t1 = parsed.parts;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t2 = P.List_List$from(new H.WhereIterable(t1, new M.Context_split_closure(), [t2]), true, t2);
        parsed.parts = t2;
        t1 = parsed.root;
        if (t1 != null)
          C.JSArray_methods.insert$2(t2, 0, t1);
        return parsed.parts;
      },
      normalize$1: function(_, path) {
        var parsed;
        if (!this._needsNormalization$1(path))
          return path;
        parsed = X.ParsedPath_ParsedPath$parse(path, this.style);
        parsed.normalize$0(0);
        return parsed.toString$0(0);
      },
      _needsNormalization$1: function(path) {
        var codeUnits, t1, root, t2, i, start, previous, t3, previousPrevious, t4, codeUnit, t5;
        codeUnits = J.get$codeUnits$s(path);
        t1 = this.style;
        root = t1.rootLength$1(path);
        if (!J.$eq$(root, 0)) {
          if (t1 === $.$get$Style_windows()) {
            if (typeof root !== "number")
              return H.iae(root);
            t2 = codeUnits.__internal$_string;
            i = 0;
            for (; i < root; ++i)
              if (C.JSString_methods.codeUnitAt$1(t2, i) === 47)
                return true;
          }
          start = root;
          previous = 47;
        } else {
          start = 0;
          previous = null;
        }
        for (t2 = codeUnits.__internal$_string, t3 = t2.length, i = start, previousPrevious = null; t4 = J.getInterceptor$n(i), t4.$lt(i, t3); i = t4.$add(i, 1), previousPrevious = previous, previous = codeUnit) {
          codeUnit = C.JSString_methods.codeUnitAt$1(t2, i);
          if (t1.isSeparator$1(codeUnit)) {
            if (t1 === $.$get$Style_windows() && codeUnit === 47)
              return true;
            if (previous != null && t1.isSeparator$1(previous))
              return true;
            if (previous === 46)
              t5 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
            else
              t5 = false;
            if (t5)
              return true;
          }
        }
        if (previous == null)
          return true;
        if (t1.isSeparator$1(previous))
          return true;
        if (previous === 46)
          t1 = previousPrevious == null || previousPrevious === 47 || previousPrevious === 46;
        else
          t1 = false;
        if (t1)
          return true;
        return false;
      },
      relative$2$from: function(path, from) {
        var t1, fromParsed, pathParsed, t2, t3;
        t1 = from == null;
        if (t1 && !J.$gt$n(this.style.rootLength$1(path), 0))
          return this.normalize$1(0, path);
        if (t1) {
          t1 = this._context$_current;
          from = t1 != null ? t1 : D.current();
        } else
          from = this.absolute$1(0, from);
        t1 = this.style;
        if (!J.$gt$n(t1.rootLength$1(from), 0) && J.$gt$n(t1.rootLength$1(path), 0))
          return this.normalize$1(0, path);
        if (!J.$gt$n(t1.rootLength$1(path), 0) || t1.isRootRelative$1(path))
          path = this.absolute$1(0, path);
        if (!J.$gt$n(t1.rootLength$1(path), 0) && J.$gt$n(t1.rootLength$1(from), 0))
          throw H.wrapException(new X.PathException('Unable to find a path to "' + H.S(path) + '" from "' + H.S(from) + '".'));
        fromParsed = X.ParsedPath_ParsedPath$parse(from, t1);
        fromParsed.normalize$0(0);
        pathParsed = X.ParsedPath_ParsedPath$parse(path, t1);
        pathParsed.normalize$0(0);
        t2 = fromParsed.parts;
        if (t2.length > 0 && J.$eq$(t2[0], "."))
          return pathParsed.toString$0(0);
        if (!J.$eq$(fromParsed.root, pathParsed.root)) {
          t2 = fromParsed.root;
          t2 = t2 == null || pathParsed.root == null || !t1.pathsEqual$2(t2, pathParsed.root);
        } else
          t2 = false;
        if (t2)
          return pathParsed.toString$0(0);
        while (true) {
          t2 = fromParsed.parts;
          if (t2.length > 0) {
            t3 = pathParsed.parts;
            t2 = t3.length > 0 && t1.pathsEqual$2(t2[0], t3[0]);
          } else
            t2 = false;
          if (!t2)
            break;
          C.JSArray_methods.removeAt$1(fromParsed.parts, 0);
          C.JSArray_methods.removeAt$1(fromParsed.separators, 1);
          C.JSArray_methods.removeAt$1(pathParsed.parts, 0);
          C.JSArray_methods.removeAt$1(pathParsed.separators, 1);
        }
        t2 = fromParsed.parts;
        if (t2.length > 0 && J.$eq$(t2[0], ".."))
          throw H.wrapException(new X.PathException('Unable to find a path to "' + H.S(path) + '" from "' + H.S(from) + '".'));
        C.JSArray_methods.insertAll$2(pathParsed.parts, 0, P.List_List$filled(fromParsed.parts.length, "..", false, null));
        t2 = pathParsed.separators;
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        t2[0] = "";
        C.JSArray_methods.insertAll$2(t2, 1, P.List_List$filled(fromParsed.parts.length, t1.get$separator(), false, null));
        t1 = pathParsed.parts;
        t2 = t1.length;
        if (t2 === 0)
          return ".";
        if (t2 > 1 && J.$eq$(C.JSArray_methods.get$last(t1), ".")) {
          C.JSArray_methods.removeLast$0(pathParsed.parts);
          t1 = pathParsed.separators;
          C.JSArray_methods.removeLast$0(t1);
          C.JSArray_methods.removeLast$0(t1);
          C.JSArray_methods.add$1(t1, "");
        }
        pathParsed.root = "";
        pathParsed.removeTrailingSeparators$0();
        return pathParsed.toString$0(0);
      },
      relative$1: function(path) {
        return this.relative$2$from(path, null);
      },
      hash$1: function(_, path) {
        var result, parsed;
        path = this.absolute$1(0, path);
        result = this._hashFast$1(path);
        if (result != null)
          return result;
        parsed = X.ParsedPath_ParsedPath$parse(path, this.style);
        parsed.normalize$0(0);
        return this._hashFast$1(parsed.toString$0(0));
      },
      _hashFast$1: function(path) {
        var t1, t2, hash, beginning, wasSeparator, i, t3, codeUnit, next;
        t1 = J.getInterceptor$asx(path);
        t2 = this.style;
        hash = 4603;
        beginning = true;
        wasSeparator = true;
        i = 0;
        while (true) {
          t3 = t1.get$length(path);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          c$0: {
            codeUnit = t2.canonicalizeCodeUnit$1(t1.codeUnitAt$1(path, i));
            if (t2.isSeparator$1(codeUnit)) {
              wasSeparator = true;
              break c$0;
            }
            if (codeUnit === 46 && wasSeparator) {
              t3 = i + 1;
              if (t3 === t1.get$length(path))
                break;
              next = t1.codeUnitAt$1(path, t3);
              if (t2.isSeparator$1(next))
                break c$0;
              if (!beginning)
                if (next === 46) {
                  t3 = i + 2;
                  t3 = t3 === t1.get$length(path) || t2.isSeparator$1(t1.codeUnitAt$1(path, t3));
                } else
                  t3 = false;
              else
                t3 = false;
              if (t3)
                return;
            }
            hash = ((hash & 67108863) * 33 ^ codeUnit) >>> 0;
            beginning = false;
            wasSeparator = false;
          }
          ++i;
        }
        return hash;
      },
      prettyUri$1: function(uri) {
        var t1, t2, path, rel;
        if (uri.get$scheme() === "file") {
          t1 = this.style;
          t2 = $.$get$Style_url();
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        if (t1)
          return uri.toString$0(0);
        if (uri.get$scheme() !== "file")
          if (uri.get$scheme() !== "") {
            t1 = this.style;
            t2 = $.$get$Style_url();
            t2 = t1 == null ? t2 != null : t1 !== t2;
            t1 = t2;
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          return uri.toString$0(0);
        path = this.normalize$1(0, this.style.pathFromUri$1(uri));
        rel = this.relative$1(path);
        return this.split$1(0, rel).length > this.split$1(0, path).length ? path : rel;
      }
    },
    Context_join_closure: {
      "^": "Closure:0;",
      call$1: function(part) {
        return part != null;
      }
    },
    Context_joinAll_closure: {
      "^": "Closure:0;",
      call$1: function(part) {
        return !J.$eq$(part, "");
      }
    },
    Context_split_closure: {
      "^": "Closure:0;",
      call$1: function(part) {
        return J.get$isEmpty$asx(part) !== true;
      }
    },
    _validateArgList_closure: {
      "^": "Closure:0;",
      call$1: [function(arg) {
        return arg == null ? "null" : '"' + H.S(arg) + '"';
      }, null, null, 2, 0, null, 36, "call"]
    }
  }], ["", "package:path/src/internal_style.dart",, B, {
    "^": "",
    InternalStyle: {
      "^": "Style;",
      getRoot$1: function(path) {
        var $length = this.rootLength$1(path);
        if (J.$gt$n($length, 0))
          return J.substring$2$s(path, 0, $length);
        return this.isRootRelative$1(path) ? J.$index$asx(path, 0) : null;
      },
      pathsEqual$2: function(path1, path2) {
        return J.$eq$(path1, path2);
      },
      canonicalizeCodeUnit$1: function(codeUnit) {
        return codeUnit;
      }
    }
  }], ["", "package:path/src/parsed_path.dart",, X, {
    "^": "",
    ParsedPath: {
      "^": "Object;style>,root>,isRootRelative,parts,separators",
      removeTrailingSeparators$0: function() {
        var t1, t2;
        while (true) {
          t1 = this.parts;
          if (!(t1.length !== 0 && J.$eq$(C.JSArray_methods.get$last(t1), "")))
            break;
          C.JSArray_methods.removeLast$0(this.parts);
          C.JSArray_methods.removeLast$0(this.separators);
        }
        t1 = this.separators;
        t2 = t1.length;
        if (t2 > 0)
          t1[t2 - 1] = "";
      },
      normalize$1$canonicalize: function(_, canonicalize) {
        var t1, newParts, t2, t3, leadingDoubles, _i, part, t4, newSeparators;
        t1 = P.String;
        newParts = H.setRuntimeTypeInfo([], [t1]);
        for (t2 = this.parts, t3 = t2.length, leadingDoubles = 0, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          part = t2[_i];
          t4 = J.getInterceptor(part);
          if (!(t4.$eq(part, ".") || t4.$eq(part, "")))
            if (t4.$eq(part, ".."))
              if (newParts.length > 0)
                newParts.pop();
              else
                ++leadingDoubles;
            else
              newParts.push(part);
        }
        if (this.root == null)
          C.JSArray_methods.insertAll$2(newParts, 0, P.List_List$filled(leadingDoubles, "..", false, null));
        if (newParts.length === 0 && this.root == null)
          newParts.push(".");
        newSeparators = P.List_List$generate(newParts.length, new X.ParsedPath_normalize_closure(this), true, t1);
        t1 = this.root;
        C.JSArray_methods.insert$2(newSeparators, 0, t1 != null && newParts.length > 0 && this.style.needsSeparator$1(t1) ? this.style.get$separator() : "");
        this.parts = newParts;
        this.separators = newSeparators;
        t1 = this.root;
        if (t1 != null) {
          t2 = this.style;
          t3 = $.$get$Style_windows();
          t3 = t2 == null ? t3 == null : t2 === t3;
          t2 = t3;
        } else
          t2 = false;
        if (t2)
          this.root = J.replaceAll$2$s(t1, "/", "\\");
        this.removeTrailingSeparators$0();
      },
      normalize$0: function($receiver) {
        return this.normalize$1$canonicalize($receiver, false);
      },
      toString$0: function(_) {
        var t1, i, t2;
        t1 = this.root;
        t1 = t1 != null ? H.S(t1) : "";
        for (i = 0; i < this.parts.length; ++i) {
          t2 = this.separators;
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2 = t1 + H.S(t2[i]);
          t1 = this.parts;
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1 = t2 + H.S(t1[i]);
        }
        t1 += H.S(C.JSArray_methods.get$last(this.separators));
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      static: {
        ParsedPath_ParsedPath$parse: function(path, style) {
          var root, isRootRelative, t1, parts, separators, start, i, t2;
          root = style.getRoot$1(path);
          isRootRelative = style.isRootRelative$1(path);
          if (root != null)
            path = J.substring$1$s(path, J.get$length$asx(root));
          t1 = [P.String];
          parts = H.setRuntimeTypeInfo([], t1);
          separators = H.setRuntimeTypeInfo([], t1);
          t1 = J.getInterceptor$asx(path);
          if (t1.get$isNotEmpty(path) === true && style.isSeparator$1(t1.codeUnitAt$1(path, 0))) {
            separators.push(t1.$index(path, 0));
            start = 1;
          } else {
            separators.push("");
            start = 0;
          }
          i = start;
          while (true) {
            t2 = t1.get$length(path);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            if (style.isSeparator$1(t1.codeUnitAt$1(path, i))) {
              parts.push(t1.substring$2(path, start, i));
              separators.push(t1.$index(path, i));
              start = i + 1;
            }
            ++i;
          }
          t2 = t1.get$length(path);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (start < t2) {
            parts.push(t1.substring$1(path, start));
            separators.push("");
          }
          return new X.ParsedPath(style, root, isRootRelative, parts, separators);
        }
      }
    },
    ParsedPath_normalize_closure: {
      "^": "Closure:0;$this",
      call$1: function(_) {
        return this.$this.style.get$separator();
      }
    }
  }], ["", "package:path/src/path_exception.dart",, X, {
    "^": "",
    PathException: {
      "^": "Object;message>",
      toString$0: function(_) {
        return "PathException: " + this.message;
      }
    }
  }], ["", "package:path/src/style.dart",, O, {
    "^": "",
    Style__getPlatformStyle: function() {
      if (P.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      var t1 = P.Uri_base();
      if (!C.JSString_methods.endsWith$1(t1.get$path(t1), "/"))
        return $.$get$Style_url();
      if (P._Uri__Uri(null, null, "a/b", null, null, null, null, null, null).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: {
      "^": "Object;",
      toString$0: function(_) {
        return this.get$name(this);
      },
      static: {
        "^": "Style_url<"
      }
    }
  }], ["", "package:path/src/style/posix.dart",, E, {
    "^": "",
    PosixStyle: {
      "^": "InternalStyle;name>,separator<,separators,separatorPattern,needsSeparatorPattern,rootPattern,relativeRootPattern",
      containsSeparator$1: function(path) {
        return J.contains$1$asx(path, "/");
      },
      isSeparator$1: function(codeUnit) {
        return codeUnit === 47;
      },
      needsSeparator$1: function(path) {
        var t1 = J.getInterceptor$asx(path);
        return t1.get$isNotEmpty(path) === true && t1.codeUnitAt$1(path, J.$sub$n(t1.get$length(path), 1)) !== 47;
      },
      rootLength$1: function(path) {
        var t1 = J.getInterceptor$asx(path);
        if (t1.get$isNotEmpty(path) === true && t1.codeUnitAt$1(path, 0) === 47)
          return 1;
        return 0;
      },
      isRootRelative$1: function(path) {
        return false;
      },
      pathFromUri$1: function(uri) {
        var t1;
        if (uri.get$scheme() === "" || uri.get$scheme() === "file") {
          t1 = uri.get$path(uri);
          return P._Uri__uriDecode(t1, 0, t1.length, C.Utf8Codec_false, false);
        }
        throw H.wrapException(P.ArgumentError$("Uri " + H.S(uri) + " must have scheme 'file:'."));
      }
    }
  }], ["", "package:path/src/style/url.dart",, F, {
    "^": "",
    UrlStyle: {
      "^": "InternalStyle;name>,separator<,separators,separatorPattern,needsSeparatorPattern,rootPattern,relativeRootPattern",
      containsSeparator$1: function(path) {
        return J.contains$1$asx(path, "/");
      },
      isSeparator$1: function(codeUnit) {
        return codeUnit === 47;
      },
      needsSeparator$1: function(path) {
        var t1 = J.getInterceptor$asx(path);
        if (t1.get$isEmpty(path) === true)
          return false;
        if (t1.codeUnitAt$1(path, J.$sub$n(t1.get$length(path), 1)) !== 47)
          return true;
        return t1.endsWith$1(path, "://") && J.$eq$(this.rootLength$1(path), t1.get$length(path));
      },
      rootLength$1: function(path) {
        var t1, index, t2;
        t1 = J.getInterceptor$asx(path);
        if (t1.get$isEmpty(path) === true)
          return 0;
        if (t1.codeUnitAt$1(path, 0) === 47)
          return 1;
        index = t1.indexOf$1(path, "/");
        t2 = J.getInterceptor$n(index);
        if (t2.$gt(index, 0) && t1.startsWith$2(path, "://", t2.$sub(index, 1))) {
          index = t1.indexOf$2(path, "/", t2.$add(index, 2));
          if (J.$gt$n(index, 0))
            return index;
          return t1.get$length(path);
        }
        return 0;
      },
      isRootRelative$1: function(path) {
        var t1 = J.getInterceptor$asx(path);
        return t1.get$isNotEmpty(path) === true && t1.codeUnitAt$1(path, 0) === 47;
      },
      pathFromUri$1: function(uri) {
        return J.toString$0$(uri);
      }
    }
  }], ["", "package:path/src/style/windows.dart",, L, {
    "^": "",
    WindowsStyle: {
      "^": "InternalStyle;name>,separator<,separators,separatorPattern,needsSeparatorPattern,rootPattern,relativeRootPattern",
      containsSeparator$1: function(path) {
        return J.contains$1$asx(path, "/");
      },
      isSeparator$1: function(codeUnit) {
        return codeUnit === 47 || codeUnit === 92;
      },
      needsSeparator$1: function(path) {
        var t1 = J.getInterceptor$asx(path);
        if (t1.get$isEmpty(path) === true)
          return false;
        t1 = t1.codeUnitAt$1(path, J.$sub$n(t1.get$length(path), 1));
        return !(t1 === 47 || t1 === 92);
      },
      rootLength$1: function(path) {
        var t1, index, t2;
        t1 = J.getInterceptor$asx(path);
        if (t1.get$isEmpty(path) === true)
          return 0;
        if (t1.codeUnitAt$1(path, 0) === 47)
          return 1;
        if (t1.codeUnitAt$1(path, 0) === 92) {
          if (J.$lt$n(t1.get$length(path), 2) || t1.codeUnitAt$1(path, 1) !== 92)
            return 1;
          index = t1.indexOf$2(path, "\\", 2);
          t2 = J.getInterceptor$n(index);
          if (t2.$gt(index, 0)) {
            index = t1.indexOf$2(path, "\\", t2.$add(index, 1));
            if (J.$gt$n(index, 0))
              return index;
          }
          return t1.get$length(path);
        }
        if (J.$lt$n(t1.get$length(path), 3))
          return 0;
        t2 = t1.codeUnitAt$1(path, 0);
        if (!(t2 >= 65 && t2 <= 90))
          t2 = t2 >= 97 && t2 <= 122;
        else
          t2 = true;
        if (!t2)
          return 0;
        if (t1.codeUnitAt$1(path, 1) !== 58)
          return 0;
        t1 = t1.codeUnitAt$1(path, 2);
        if (!(t1 === 47 || t1 === 92))
          return 0;
        return 3;
      },
      isRootRelative$1: function(path) {
        return J.$eq$(this.rootLength$1(path), 1);
      },
      pathFromUri$1: function(uri) {
        var path, t1;
        if (uri.get$scheme() !== "" && uri.get$scheme() !== "file")
          throw H.wrapException(P.ArgumentError$("Uri " + H.S(uri) + " must have scheme 'file:'."));
        path = uri.get$path(uri);
        if (uri.get$host(uri) === "") {
          if (C.JSString_methods.startsWith$1(path, "/"))
            path = C.JSString_methods.replaceFirst$2(path, "/", "");
        } else
          path = "\\\\" + H.S(uri.get$host(uri)) + path;
        t1 = H.stringReplaceAllUnchecked(path, "/", "\\");
        return P._Uri__uriDecode(t1, 0, t1.length, C.Utf8Codec_false, false);
      },
      codeUnitsEqual$2: function(codeUnit1, codeUnit2) {
        var upperCase1;
        if (codeUnit1 === codeUnit2)
          return true;
        if (codeUnit1 === 47)
          return codeUnit2 === 92;
        if (codeUnit1 === 92)
          return codeUnit2 === 47;
        if ((codeUnit1 ^ codeUnit2) !== 32)
          return false;
        upperCase1 = codeUnit1 | 32;
        return upperCase1 >= 97 && upperCase1 <= 122;
      },
      pathsEqual$2: function(path1, path2) {
        var t1, t2, i, t3;
        if (path1 == null ? path2 == null : path1 === path2)
          return true;
        t1 = J.getInterceptor$asx(path1);
        t2 = J.getInterceptor$asx(path2);
        if (!J.$eq$(t1.get$length(path1), t2.get$length(path2)))
          return false;
        i = 0;
        while (true) {
          t3 = t1.get$length(path1);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          if (!this.codeUnitsEqual$2(t1.codeUnitAt$1(path1, i), t2.codeUnitAt$1(path2, i)))
            return false;
          ++i;
        }
        return true;
      },
      canonicalizeCodeUnit$1: function(codeUnit) {
        if (codeUnit === 47)
          return 92;
        if (codeUnit < 65)
          return codeUnit;
        if (codeUnit > 90)
          return codeUnit;
        return codeUnit | 32;
      }
    }
  }], ["", "package:pub_semver/src/patterns.dart",, O, {}], ["", "package:pub_semver/src/version.dart",, T, {
    "^": "",
    Version: {
      "^": "Object;major<,minor<,patch,preRelease,build,_version$_text",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof T.Version))
          return false;
        return J.$eq$(this.major, other.major) && J.$eq$(this.minor, other.minor) && J.$eq$(this.patch, other.patch) && C.IterableEquality_DefaultEquality.equals$2(this.preRelease, other.preRelease) === true && C.IterableEquality_DefaultEquality.equals$2(this.build, other.build) === true;
      },
      get$hashCode: function(_) {
        var t1, t2;
        t1 = J.$xor$n(this.major, this.minor);
        t2 = this.patch;
        if (typeof t2 !== "number")
          return H.iae(t2);
        return (t1 ^ t2 ^ C.IterableEquality_DefaultEquality.hash$1(0, this.preRelease) ^ C.IterableEquality_DefaultEquality.hash$1(0, this.build)) >>> 0;
      },
      $lt: function(_, other) {
        return J.$lt$n(this.compareTo$1(0, other), 0);
      },
      $gt: function(_, other) {
        return J.$gt$n(this.compareTo$1(0, other), 0);
      },
      $le: function(_, other) {
        return J.$le$n(this.compareTo$1(0, other), 0);
      },
      $ge: function(_, other) {
        return J.$ge$n(this.compareTo$1(0, other), 0);
      },
      get$isEmpty: function(_) {
        return false;
      },
      compareTo$1: function(_, other) {
        var t1, t2, t3, comparison;
        t1 = J.getInterceptor(other);
        if (!!t1.$isVersion) {
          t1 = this.major;
          t2 = other.major;
          t3 = J.getInterceptor(t1);
          if (!t3.$eq(t1, t2))
            return t3.compareTo$1(t1, t2);
          t1 = this.minor;
          t2 = other.minor;
          t3 = J.getInterceptor(t1);
          if (!t3.$eq(t1, t2))
            return t3.compareTo$1(t1, t2);
          t1 = this.patch;
          t2 = other.patch;
          t3 = J.getInterceptor(t1);
          if (!t3.$eq(t1, t2))
            return t3.compareTo$1(t1, t2);
          t1 = this.preRelease;
          t2 = t1.length === 0;
          if (t2 && other.preRelease.length !== 0)
            return 1;
          t3 = other.preRelease;
          if (t3.length === 0 && !t2)
            return -1;
          comparison = this._compareLists$2(t1, t3);
          if (!J.$eq$(comparison, 0))
            return comparison;
          t1 = this.build;
          t2 = t1.length === 0;
          if (t2 && other.build.length !== 0)
            return -1;
          t3 = other.build;
          if (t3.length === 0 && !t2)
            return 1;
          return this._compareLists$2(t1, t3);
        } else
          return J.$negate$n(t1.compareTo$1(other, this));
      },
      toString$0: function(_) {
        return this._version$_text;
      },
      _compareLists$2: function(a, b) {
        var i, aPart, bPart, t1;
        for (i = 0; i < P.max(a.length, b.length); ++i) {
          aPart = i < a.length ? a[i] : null;
          bPart = i < b.length ? b[i] : null;
          t1 = J.getInterceptor(aPart);
          if (t1.$eq(aPart, bPart))
            continue;
          if (aPart == null)
            return -1;
          if (bPart == null)
            return 1;
          if (typeof aPart === "number")
            if (typeof bPart === "number")
              return C.JSNumber_methods.compareTo$1(aPart, bPart);
            else
              return -1;
          else if (typeof bPart === "number")
            return 1;
          else
            return t1.compareTo$1(aPart, bPart);
        }
        return 0;
      },
      Version$_$6: function(major, minor, patch, preRelease, build, _text) {
        if (J.$lt$n(this.major, 0))
          throw H.wrapException(P.ArgumentError$("Major version must be non-negative."));
        if (J.$lt$n(this.minor, 0))
          throw H.wrapException(P.ArgumentError$("Minor version must be non-negative."));
        if (J.$lt$n(this.patch, 0))
          throw H.wrapException(P.ArgumentError$("Patch version must be non-negative."));
      },
      static: {
        Version$_: function(major, minor, patch, preRelease, build, _text) {
          var t1 = preRelease == null ? [] : T.Version__splitParts(preRelease);
          t1 = new T.Version(major, minor, patch, t1, build == null ? [] : T.Version__splitParts(build), _text);
          t1.Version$_$6(major, minor, patch, preRelease, build, _text);
          return t1;
        },
        Version_Version$parse: function(text) {
          var match, major, minor, patch, preRelease, build, t1, exception;
          match = $.$get$COMPLETE_VERSION().firstMatch$1(text);
          if (match == null)
            throw H.wrapException(new P.FormatException('Could not parse "' + H.S(text) + '".', null, null));
          try {
            t1 = match.get$_match();
            if (1 >= t1.length)
              return H.ioore(t1, 1);
            major = H.Primitives_parseInt(t1[1], null, null);
            t1 = match.get$_match();
            if (2 >= t1.length)
              return H.ioore(t1, 2);
            minor = H.Primitives_parseInt(t1[2], null, null);
            t1 = match.get$_match();
            if (3 >= t1.length)
              return H.ioore(t1, 3);
            patch = H.Primitives_parseInt(t1[3], null, null);
            t1 = match.get$_match();
            if (5 >= t1.length)
              return H.ioore(t1, 5);
            preRelease = t1[5];
            t1 = match.get$_match();
            if (8 >= t1.length)
              return H.ioore(t1, 8);
            build = t1[8];
            t1 = T.Version$_(major, minor, patch, preRelease, build, text);
            return t1;
          } catch (exception) {
            if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
              throw H.wrapException(new P.FormatException('Could not parse "' + H.S(text) + '".', null, null));
            else
              throw exception;
          }
        },
        Version__splitParts: function(text) {
          return new H.MappedListIterable(J.split$1$s(text, "."), new T.Version__splitParts_closure(), [null, null]).toList$0(0);
        }
      }
    },
    Version__splitParts_closure: {
      "^": "Closure:0;",
      call$1: [function(part) {
        var t1, exception;
        try {
          t1 = H.Primitives_parseInt(part, null, null);
          return t1;
        } catch (exception) {
          if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
            return part;
          else
            throw exception;
        }
      }, null, null, 2, 0, null, 163, "call"]
    }
  }], ["", "package:pub_semver/src/version_range.dart",, X, {
    "^": "",
    VersionRange: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [X.VersionRange];
      }
    }
  }], ["", "package:source_span/src/file.dart",, Y, {
    "^": "",
    SourceFile: {
      "^": "Object;url>,_lineStarts,_decodedChars,_cachedLine",
      get$length: function(_) {
        return this._decodedChars.length;
      },
      get$lines: function() {
        return this._lineStarts.length;
      },
      span$2: [function(_, start, end) {
        return Y._FileSpan$(this, start, end == null ? this._decodedChars.length - 1 : end);
      }, function($receiver, start) {
        return this.span$2($receiver, start, null);
      }, "span$1", "call$2", "call$1", "get$span", 2, 2, 209, 2, 164, 165],
      location$1: [function(_, offset) {
        return Y.FileLocation$_(this, offset);
      }, "call$1", "get$location", 2, 0, 210, 166],
      getLine$1: function(offset) {
        var t1, t2;
        t1 = J.getInterceptor$n(offset);
        if (t1.$lt(offset, 0))
          throw H.wrapException(P.RangeError$("Offset may not be negative, was " + H.S(offset) + "."));
        else if (t1.$gt(offset, this._decodedChars.length))
          throw H.wrapException(P.RangeError$("Offset " + H.S(offset) + " must not be greater than the number of characters in the file, " + this.get$length(this) + "."));
        t2 = this._lineStarts;
        if (t1.$lt(offset, C.JSArray_methods.get$first(t2)))
          return -1;
        if (t1.$ge(offset, C.JSArray_methods.get$last(t2)))
          return t2.length - 1;
        if (this._isNearCachedLine$1(offset))
          return this._cachedLine;
        t1 = this._binarySearch$1(offset) - 1;
        this._cachedLine = t1;
        return t1;
      },
      _isNearCachedLine$1: function(offset) {
        var t1, t2, t3, t4;
        t1 = this._cachedLine;
        if (t1 == null)
          return false;
        t2 = this._lineStarts;
        if (t1 >>> 0 !== t1 || t1 >= t2.length)
          return H.ioore(t2, t1);
        t3 = J.getInterceptor$n(offset);
        if (t3.$lt(offset, t2[t1]))
          return false;
        t1 = this._cachedLine;
        t4 = t2.length;
        if (typeof t1 !== "number")
          return t1.$ge();
        if (t1 < t4 - 1) {
          ++t1;
          if (t1 < 0 || t1 >= t4)
            return H.ioore(t2, t1);
          t1 = t3.$lt(offset, t2[t1]);
        } else
          t1 = true;
        if (t1)
          return true;
        t1 = this._cachedLine;
        t4 = t2.length;
        if (typeof t1 !== "number")
          return t1.$ge();
        if (t1 < t4 - 2) {
          t1 += 2;
          if (t1 < 0 || t1 >= t4)
            return H.ioore(t2, t1);
          t1 = t3.$lt(offset, t2[t1]);
        } else
          t1 = true;
        if (t1) {
          t1 = this._cachedLine;
          if (typeof t1 !== "number")
            return t1.$add();
          this._cachedLine = t1 + 1;
          return true;
        }
        return false;
      },
      _binarySearch$1: function(offset) {
        var t1, t2, max, min, half, t3;
        t1 = this._lineStarts;
        t2 = t1.length;
        max = t2 - 1;
        for (min = 0; min < max;) {
          half = min + C.JSInt_methods._tdivFast$1(max - min, 2);
          if (half < 0 || half >= t2)
            return H.ioore(t1, half);
          t3 = t1[half];
          if (typeof offset !== "number")
            return H.iae(offset);
          if (t3 > offset)
            max = half;
          else
            min = half + 1;
        }
        return max;
      },
      getColumn$2$line: function(offset, line) {
        var t1, lineStart;
        t1 = J.getInterceptor$n(offset);
        if (t1.$lt(offset, 0))
          throw H.wrapException(P.RangeError$("Offset may not be negative, was " + H.S(offset) + "."));
        else if (t1.$gt(offset, this._decodedChars.length))
          throw H.wrapException(P.RangeError$("Offset " + H.S(offset) + " must be not be greater than the number of characters in the file, " + this.get$length(this) + "."));
        line = this.getLine$1(offset);
        t1 = this._lineStarts;
        if (line >>> 0 !== line || line >= t1.length)
          return H.ioore(t1, line);
        lineStart = t1[line];
        if (typeof offset !== "number")
          return H.iae(offset);
        if (lineStart > offset)
          throw H.wrapException(P.RangeError$("Line " + line + " comes after offset " + H.S(offset) + "."));
        return offset - lineStart;
      },
      getColumn$1: function(offset) {
        return this.getColumn$2$line(offset, null);
      },
      getOffset$2: function(line, column) {
        var t1, t2, result, t3;
        if (typeof line !== "number")
          return line.$lt();
        if (line < 0)
          throw H.wrapException(P.RangeError$("Line may not be negative, was " + line + "."));
        else {
          t1 = this._lineStarts;
          t2 = t1.length;
          if (line >= t2)
            throw H.wrapException(P.RangeError$("Line " + line + " must be less than the number of lines in the file, " + this.get$lines() + "."));
        }
        result = t1[line];
        if (result <= this._decodedChars.length) {
          t3 = line + 1;
          t1 = t3 < t2 && result >= t1[t3];
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.RangeError$("Line " + line + " doesn't have 0 columns."));
        return result;
      },
      getOffset$1: function(line) {
        return this.getOffset$2(line, null);
      },
      SourceFile$decoded$2$url: function(decodedChars, url) {
        var t1, t2, t3, i, c, j, t4;
        for (t1 = this._decodedChars, t2 = t1.length, t3 = this._lineStarts, i = 0; i < t2; ++i) {
          c = t1[i];
          if (c === 13) {
            j = i + 1;
            if (j < t2) {
              if (j >= t2)
                return H.ioore(t1, j);
              t4 = t1[j] !== 10;
            } else
              t4 = true;
            if (t4)
              c = 10;
          }
          if (c === 10)
            t3.push(i + 1);
        }
      }
    },
    FileLocation: {
      "^": "SourceLocationMixin;file>,offset>",
      get$sourceUrl: function() {
        return this.file.url;
      },
      get$line: function(_) {
        return this.file.getLine$1(this.offset);
      },
      get$column: function() {
        return this.file.getColumn$1(this.offset);
      },
      pointSpan$0: function() {
        var t1 = this.offset;
        return Y._FileSpan$(this.file, t1, t1);
      },
      FileLocation$_$2: function(file, offset) {
        var t1, t2, t3;
        t1 = this.offset;
        t2 = J.getInterceptor$n(t1);
        if (t2.$lt(t1, 0))
          throw H.wrapException(P.RangeError$("Offset may not be negative, was " + H.S(t1) + "."));
        else {
          t3 = this.file;
          if (t2.$gt(t1, t3._decodedChars.length))
            throw H.wrapException(P.RangeError$("Offset " + H.S(t1) + " must not be greater than the number of characters in the file, " + t3.get$length(t3) + "."));
        }
      },
      $isComparable: 1,
      $asComparable: function() {
        return [V.SourceLocation];
      },
      $isSourceLocation: 1,
      static: {
        FileLocation$_: function(file, offset) {
          var t1 = new Y.FileLocation(file, offset);
          t1.FileLocation$_$2(file, offset);
          return t1;
        }
      }
    },
    FileSpan: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [V.SourceSpan];
      },
      $isSourceSpanWithContext: 1,
      $isSourceSpan: 1
    },
    _FileSpan: {
      "^": "SourceSpanMixin;file>,_file$_start,_end",
      get$sourceUrl: function() {
        return this.file.url;
      },
      get$length: function(_) {
        return J.$sub$n(this._end, this._file$_start);
      },
      get$start: function(_) {
        return Y.FileLocation$_(this.file, this._file$_start);
      },
      get$end: function(_) {
        return Y.FileLocation$_(this.file, this._end);
      },
      get$text: function(_) {
        return P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(this.file._decodedChars, this._file$_start, this._end), 0, null);
      },
      compareTo$1: function(_, other) {
        var result;
        if (!(other instanceof Y._FileSpan))
          return this.super$SourceSpanMixin$compareTo(0, other);
        result = J.compareTo$1$ns(this._file$_start, other._file$_start);
        return J.$eq$(result, 0) ? J.compareTo$1$ns(this._end, other._end) : result;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!J.getInterceptor(other).$isFileSpan)
          return this.super$SourceSpanMixin$$eq(0, other);
        return J.$eq$(this._file$_start, other._file$_start) && J.$eq$(this._end, other._end) && J.$eq$(this.file.url, other.file.url);
      },
      get$hashCode: function(_) {
        return Y.SourceSpanMixin.prototype.get$hashCode.call(this, this);
      },
      expand$1: function(_, other) {
        var t1, t2, t3, t4;
        t1 = this.file;
        if (!J.$eq$(t1.url, other.get$sourceUrl()))
          throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(this.get$sourceUrl()) + '" and  "' + H.S(other.get$sourceUrl()) + "\" don't match."));
        t2 = J.getInterceptor(other);
        t3 = this._file$_start;
        t4 = this._end;
        if (!!t2.$is_FileSpan)
          return Y._FileSpan$(t1, P.min(t3, other._file$_start), P.max(t4, other._end));
        else
          return Y._FileSpan$(t1, P.min(t3, t2.get$start(other).offset), P.max(t4, t2.get$end(other).offset));
      },
      _FileSpan$3: function(file, _start, _end) {
        var t1, t2, t3, t4;
        t1 = this._end;
        t2 = this._file$_start;
        t3 = J.getInterceptor$n(t1);
        if (t3.$lt(t1, t2))
          throw H.wrapException(P.ArgumentError$("End " + H.S(t1) + " must come after start " + H.S(t2) + "."));
        else {
          t4 = this.file;
          if (t3.$gt(t1, t4._decodedChars.length))
            throw H.wrapException(P.RangeError$("End " + H.S(t1) + " must not be greater than the number of characters in the file, " + t4.get$length(t4) + "."));
          else if (J.$lt$n(t2, 0))
            throw H.wrapException(P.RangeError$("Start may not be negative, was " + H.S(t2) + "."));
        }
      },
      start$0: function($receiver) {
        return this.get$start(this).call$0();
      },
      $isFileSpan: 1,
      $isSourceSpanWithContext: 1,
      $isSourceSpan: 1,
      static: {
        _FileSpan$: function(file, _start, _end) {
          var t1 = new Y._FileSpan(file, _start, _end);
          t1._FileSpan$3(file, _start, _end);
          return t1;
        }
      }
    }
  }], ["", "package:source_span/src/location.dart",, V, {
    "^": "",
    SourceLocation: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [V.SourceLocation];
      }
    }
  }], ["", "package:source_span/src/location_mixin.dart",, D, {
    "^": "",
    SourceLocationMixin: {
      "^": "Object;",
      get$toolString: function() {
        var t1, source, t2, t3, t4;
        t1 = this.file;
        source = t1.url;
        t2 = H.S(source == null ? "unknown source" : source) + ":";
        t3 = this.offset;
        t4 = t1.getLine$1(t3);
        if (typeof t4 !== "number")
          return t4.$add();
        return t2 + (t4 + 1) + ":" + H.S(J.$add$ns(t1.getColumn$1(t3), 1));
      },
      compareTo$1: function(_, other) {
        if (!J.$eq$(this.file.url, other.get$sourceUrl()))
          throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(this.get$sourceUrl()) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
        return J.$sub$n(this.offset, J.get$offset$x(other));
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return !!J.getInterceptor(other).$isSourceLocation && J.$eq$(this.file.url, other.file.url) && J.$eq$(this.offset, other.offset);
      },
      get$hashCode: function(_) {
        return J.$add$ns(J.get$hashCode$(this.file.url), this.offset);
      },
      toString$0: function(_) {
        return "<" + H.S(new H.TypeImpl(H.getRuntimeTypeString(this), null)) + ": " + H.S(this.offset) + " " + this.get$toolString() + ">";
      },
      $isSourceLocation: 1
    }
  }], ["", "package:source_span/src/span.dart",, V, {
    "^": "",
    SourceSpan: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [V.SourceSpan];
      }
    }
  }], ["", "package:source_span/src/span_exception.dart",, G, {
    "^": "",
    SourceSpanException: {
      "^": "Object;",
      get$message: function(_) {
        return this._span_exception$_message;
      },
      get$span: function(_) {
        return this._span_exception$_span;
      },
      toString$1$color: function(_, color) {
        var t1 = this._span_exception$_span;
        if (t1 == null)
          return this._span_exception$_message;
        return "Error on " + J.message$2$color$x(t1, this._span_exception$_message, color);
      },
      toString$0: function($receiver) {
        return this.toString$1$color($receiver, null);
      }
    },
    SourceSpanFormatException: {
      "^": "SourceSpanException;",
      get$offset: function(_) {
        var t1 = this._span_exception$_span;
        return t1 == null ? null : J.get$start$x(t1).offset;
      },
      $isFormatException: 1
    }
  }], ["", "package:source_span/src/span_mixin.dart",, Y, {
    "^": "",
    SourceSpanMixin: {
      "^": "Object;",
      get$sourceUrl: function() {
        return this.get$start(this).file.url;
      },
      get$length: function(_) {
        return J.$sub$n(this.get$end(this).offset, this.get$start(this).offset);
      },
      compareTo$1: ["super$SourceSpanMixin$compareTo", function(_, other) {
        var t1, result;
        t1 = J.getInterceptor$x(other);
        result = this.get$start(this).compareTo$1(0, t1.get$start(other));
        return J.$eq$(result, 0) ? this.get$end(this).compareTo$1(0, t1.get$end(other)) : result;
      }],
      message$2$color: [function(_, message, color) {
        var t1, t2, highlight;
        t1 = this.get$start(this);
        t1 = t1.file.getLine$1(t1.offset);
        if (typeof t1 !== "number")
          return t1.$add();
        t1 = "line " + (t1 + 1) + ", column ";
        t2 = this.get$start(this);
        t2 = t1 + H.S(J.$add$ns(t2.file.getColumn$1(t2.offset), 1));
        if (this.get$sourceUrl() != null) {
          t1 = this.get$sourceUrl();
          t1 = t2 + (" of " + H.S($.$get$context0().prettyUri$1(t1)));
        } else
          t1 = t2;
        t1 += ": " + H.S(message);
        highlight = this.highlight$1$color(0, color);
        if (highlight.length !== 0)
          t1 = t1 + "\n" + highlight;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }, function($receiver, message) {
        return this.message$2$color($receiver, message, null);
      }, "message$1", "call$2$color", "call$1", "get$message", 2, 3, 211, 2, 10, 167],
      highlight$1$color: [function(_, color) {
        var t1, column, t2, t3, t4, context, lineStart, endIndex, textLine, toColumn;
        if (J.$eq$(color, true))
          color = "\x1b[31m";
        if (J.$eq$(color, false))
          color = null;
        t1 = this.get$start(this);
        column = t1.file.getColumn$1(t1.offset);
        if (!!this.$isSourceSpanWithContext) {
          t1 = this.file;
          t2 = Y.FileLocation$_(t1, this._file$_start);
          t2 = t1.getOffset$1(t2.file.getLine$1(t2.offset));
          t3 = this._end;
          t4 = Y.FileLocation$_(t1, t3);
          if (t4.file.getLine$1(t4.offset) === t1._lineStarts.length - 1)
            t3 = null;
          else {
            t3 = Y.FileLocation$_(t1, t3);
            t3 = t3.file.getLine$1(t3.offset);
            if (typeof t3 !== "number")
              return t3.$add();
            t3 = t1.getOffset$1(t3 + 1);
          }
          context = P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(t1._decodedChars, t2, t3), 0, null);
          lineStart = B.findLineStart(context, this.get$text(this), column);
          if (lineStart != null && lineStart > 0) {
            t1 = C.JSString_methods.substring$2(context, 0, lineStart);
            context = C.JSString_methods.substring$1(context, lineStart);
          } else
            t1 = "";
          endIndex = C.JSString_methods.indexOf$1(context, "\n");
          textLine = endIndex === -1 ? context : C.JSString_methods.substring$2(context, 0, endIndex + 1);
          column = P.min(column, textLine.length);
        } else {
          if (J.$eq$(this.get$length(this), 0))
            return "";
          else
            textLine = C.JSArray_methods.get$first(this.get$text(this).split("\n"));
          column = 0;
          t1 = "";
        }
        t2 = this.get$end(this).offset;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = this.get$start(this).offset;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = J.getInterceptor$asx(textLine);
        toColumn = P.min(column + t2 - t3, t4.get$length(textLine));
        t2 = color != null;
        t1 = t2 ? t1 + t4.substring$2(textLine, 0, column) + H.S(color) + t4.substring$2(textLine, column, toColumn) + "\x1b[0m" + t4.substring$1(textLine, toColumn) : t1 + H.S(textLine);
        if (!t4.endsWith$1(textLine, "\n"))
          t1 += "\n";
        t1 += C.JSString_methods.$mul(" ", column);
        if (t2)
          t1 += H.S(color);
        t1 += C.JSString_methods.$mul("^", P.max(toColumn - column, 1));
        if (t2)
          t1 += "\x1b[0m";
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }, function($receiver) {
        return this.highlight$1$color($receiver, null);
      }, "highlight$0", "call$1$color", "call$0", "get$highlight", 0, 3, 212, 2],
      $eq: ["super$SourceSpanMixin$$eq", function(_, other) {
        var t1;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        return !!t1.$isSourceSpan && this.get$start(this).$eq(0, t1.get$start(other)) && this.get$end(this).$eq(0, t1.get$end(other));
      }],
      get$hashCode: function(_) {
        var t1, t2;
        t1 = this.get$start(this);
        t1 = J.$add$ns(J.get$hashCode$(t1.file.url), t1.offset);
        t2 = this.get$end(this);
        t2 = J.$add$ns(J.get$hashCode$(t2.file.url), t2.offset);
        if (typeof t2 !== "number")
          return H.iae(t2);
        return J.$add$ns(t1, 31 * t2);
      },
      toString$0: function(_) {
        var t1, t2;
        t1 = "<" + H.S(new H.TypeImpl(H.getRuntimeTypeString(this), null)) + ": from ";
        t2 = this.get$start(this);
        t2 = t1 + ("<" + H.S(new H.TypeImpl(H.getRuntimeTypeString(t2), null)) + ": " + H.S(t2.offset) + " " + t2.get$toolString() + ">") + " to ";
        t1 = this.get$end(this);
        return t2 + ("<" + H.S(new H.TypeImpl(H.getRuntimeTypeString(t1), null)) + ": " + H.S(t1.offset) + " " + t1.get$toolString() + ">") + ' "' + this.get$text(this) + '">';
      },
      $isSourceSpan: 1
    }
  }], ["", "package:source_span/src/utils.dart",, B, {
    "^": "",
    findLineStart: function(context, text, column) {
      var isEmpty, index, t1, lineStart, textColumn, t2;
      isEmpty = text === "";
      index = C.JSString_methods.indexOf$1(context, text);
      for (t1 = J.getInterceptor(column); index !== -1;) {
        lineStart = C.JSString_methods.lastIndexOf$2(context, "\n", index) + 1;
        textColumn = index - lineStart;
        if (!t1.$eq(column, textColumn))
          t2 = isEmpty && t1.$eq(column, textColumn + 1);
        else
          t2 = true;
        if (t2)
          return lineStart;
        index = C.JSString_methods.indexOf$2(context, text, index + 1);
      }
      return;
    }
  }], ["", "package:string_scanner/src/eager_span_scanner.dart",, D, {
    "^": "",
    EagerSpanScanner: {
      "^": "SpanScanner;_line,_column,_sourceFile,_lastSpan,sourceUrl,string,_string_scanner$_position,_lastMatch,_lastMatchPosition",
      get$line: function(_) {
        return this._line;
      },
      get$column: function() {
        return this._column;
      },
      get$_betweenCRLF: function() {
        return this.peekChar$1(-1) === 13 && this.peekChar$0() === 10;
      },
      set$position: function(_, newPosition) {
        var oldPosition, t1, newlines, t2, t3, t4;
        oldPosition = this._string_scanner$_position;
        this.super$StringScanner$position(0, newPosition);
        t1 = this.string;
        if (C.JSString_methods.$gt(newPosition, oldPosition)) {
          newlines = this._newlinesIn$1(J.substring$2$s(t1, oldPosition, newPosition));
          t1 = this._line;
          t2 = newlines.length;
          this._line = t1 + t2;
          if (t2 === 0)
            this._column = C.JSNumber_methods.$add(this._column, C.JSString_methods.$sub(newPosition, oldPosition));
          else
            this._column = C.JSString_methods.$sub(newPosition, J.get$end$x(C.JSArray_methods.get$last(newlines)));
        } else {
          t2 = J.getInterceptor$s(t1);
          newlines = this._newlinesIn$1(t2.substring$2(t1, newPosition, oldPosition));
          if (this.get$_betweenCRLF())
            C.JSArray_methods.removeLast$0(newlines);
          t3 = this._line;
          t4 = newlines.length;
          this._line = t3 - t4;
          if (t4 === 0) {
            t1 = this._column;
            t2 = J.$sub$n(oldPosition, newPosition);
            if (typeof t2 !== "number")
              return H.iae(t2);
            this._column = t1 - t2;
          } else
            this._column = C.JSString_methods.$sub(newPosition, t2.lastIndexOf$2(t1, $.$get$_newlineRegExp(), newPosition)).$sub(0, 1);
        }
      },
      readChar$0: function() {
        var character = this.super$StringScanner$readChar();
        this._adjustLineAndColumn$1(character);
        return character;
      },
      _adjustLineAndColumn$1: function(character) {
        var t1;
        if (character !== 10)
          t1 = character === 13 && this.peekChar$0() !== 10;
        else
          t1 = true;
        if (t1) {
          ++this._line;
          this._column = 0;
        } else
          ++this._column;
      },
      scan$1: function(pattern) {
        var newlines, t1, t2;
        if (!this.super$StringScanner$scan(pattern))
          return false;
        newlines = this._newlinesIn$1(this.get$lastMatch().group$1(0));
        t1 = this._line;
        t2 = newlines.length;
        this._line = t1 + t2;
        if (t2 === 0)
          this._column = this._column + this.get$lastMatch().group$1(0).length;
        else {
          t1 = this.get$lastMatch().group$1(0);
          t2 = J.get$end$x(C.JSArray_methods.get$last(newlines));
          if (typeof t2 !== "number")
            return H.iae(t2);
          this._column = t1.length - t2;
        }
        return true;
      },
      _newlinesIn$1: function(text) {
        var t1, newlines;
        t1 = $.$get$_newlineRegExp().allMatches$1(0, text);
        newlines = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        if (this.get$_betweenCRLF())
          C.JSArray_methods.removeLast$0(newlines);
        return newlines;
      }
    },
    _EagerSpanScannerState: {
      "^": "Object;_eager_span_scanner$_scanner,position,line>,column<"
    }
  }], ["", "package:string_scanner/src/exception.dart",, E, {
    "^": "",
    StringScannerException: {
      "^": "SourceSpanFormatException;_span_exception$_source,_span_exception$_message,_span_exception$_span",
      get$sourceUrl: function() {
        return this._span_exception$_span.get$sourceUrl();
      },
      static: {
        StringScannerException$: function(message, span, source) {
          return new E.StringScannerException(source, message, span);
        }
      }
    }
  }], ["", "package:string_scanner/src/span_scanner.dart",, S, {
    "^": "",
    SpanScanner: {
      "^": "StringScanner;",
      get$line: function(_) {
        return this._sourceFile.getLine$1(this._string_scanner$_position);
      },
      get$column: function() {
        return this._sourceFile.getColumn$1(this._string_scanner$_position);
      },
      get$location: function(_) {
        return Y.FileLocation$_(this._sourceFile, this._string_scanner$_position);
      },
      get$emptySpan: function() {
        var t1, t2;
        t1 = Y.FileLocation$_(this._sourceFile, this._string_scanner$_position);
        t2 = t1.offset;
        return Y._FileSpan$(t1.file, t2, t2);
      },
      spanFrom$2: function(startState, endState) {
        var endPosition = endState == null ? this._string_scanner$_position : endState.position;
        return this._sourceFile.span$2(0, startState.position, endPosition);
      },
      spanFrom$1: function(startState) {
        return this.spanFrom$2(startState, null);
      },
      matches$1: function(_, pattern) {
        var t1, t2;
        if (!this.super$StringScanner$matches(0, pattern)) {
          this._lastSpan = null;
          return false;
        }
        t1 = this._string_scanner$_position;
        t2 = this.get$lastMatch();
        this._lastSpan = this._sourceFile.span$2(0, t1, J.$add$ns(t2.start, t2.pattern.length));
        return true;
      },
      error$4$length$match$position: [function(_, message, $length, match, position) {
        var t1, t2;
        t1 = this.string;
        B.validateErrorArgs(t1, match, position, $length);
        if (match == null && position == null && $length == null)
          match = this.get$lastMatch();
        if (position == null)
          position = match == null ? this._string_scanner$_position : J.get$start$x(match);
        if ($length == null)
          if (match == null)
            $length = 0;
          else {
            t2 = J.getInterceptor$x(match);
            $length = J.$sub$n(t2.get$end(match), t2.get$start(match));
          }
        throw H.wrapException(E.StringScannerException$(message, this._sourceFile.span$2(0, position, J.$add$ns(position, $length)), t1));
      }, function($receiver, message) {
        return this.error$4$length$match$position($receiver, message, null, null, null);
      }, "error$1", function($receiver, message, $length, position) {
        return this.error$4$length$match$position($receiver, message, $length, null, position);
      }, "error$3$length$position", function($receiver, message, $length) {
        return this.error$4$length$match$position($receiver, message, $length, null, null);
      }, "error$2$length", "call$4$length$match$position", "call$1", "call$3$length$position", "call$2$length", "get$error", 2, 7, 53, 2, 2, 2, 10, 68, 37, 56]
    }
  }], ["", "package:string_scanner/src/string_scanner.dart",, X, {
    "^": "",
    StringScanner: {
      "^": "Object;sourceUrl<",
      set$position: ["super$StringScanner$position", function(_, position) {
        if (C.JSString_methods.$lt(position, 0) || C.JSString_methods.$gt(position, J.get$length$asx(this.string)))
          throw H.wrapException(P.ArgumentError$("Invalid position " + position));
        this._string_scanner$_position = position;
        this._lastMatch = null;
      }],
      get$lastMatch: function() {
        if (!J.$eq$(this._string_scanner$_position, this._lastMatchPosition))
          this._lastMatch = null;
        return this._lastMatch;
      },
      readChar$0: ["super$StringScanner$readChar", function() {
        var t1, t2, t3;
        t1 = this.string;
        t2 = J.getInterceptor$asx(t1);
        if (J.$eq$(this._string_scanner$_position, t2.get$length(t1)))
          this.error$3$length$position(0, "expected more input.", 0, this._string_scanner$_position);
        t3 = this._string_scanner$_position;
        this._string_scanner$_position = J.$add$ns(t3, 1);
        return t2.codeUnitAt$1(t1, t3);
      }],
      peekChar$1: function(offset) {
        var index, t1;
        if (offset == null)
          offset = 0;
        index = J.$add$ns(this._string_scanner$_position, offset);
        t1 = J.getInterceptor$n(index);
        if (t1.$lt(index, 0) || t1.$ge(index, J.get$length$asx(this.string)))
          return;
        return J.codeUnitAt$1$s(this.string, index);
      },
      peekChar$0: function() {
        return this.peekChar$1(null);
      },
      scan$1: ["super$StringScanner$scan", function(pattern) {
        var success, t1;
        success = this.matches$1(0, pattern);
        if (success) {
          t1 = this._lastMatch;
          t1 = J.$add$ns(t1.start, t1.pattern.length);
          this._string_scanner$_position = t1;
          this._lastMatchPosition = t1;
        }
        return success;
      }],
      expect$2$name: function(pattern, $name) {
        if (this.scan$1(pattern))
          return;
        $name = '"' + H.stringReplaceAllUnchecked(H.stringReplaceAllUnchecked(pattern, "\\", "\\\\"), '"', '\\"') + '"';
        this.error$3$length$position(0, "expected " + $name + ".", 0, this._string_scanner$_position);
      },
      expect$1: function(pattern) {
        return this.expect$2$name(pattern, null);
      },
      matches$1: ["super$StringScanner$matches", function(_, pattern) {
        var t1 = C.JSString_methods.matchAsPrefix$2(pattern, this.string, this._string_scanner$_position);
        this._lastMatch = t1;
        this._lastMatchPosition = this._string_scanner$_position;
        return t1 != null;
      }],
      substring$2: function(_, start, end) {
        if (end == null)
          end = this._string_scanner$_position;
        return J.substring$2$s(this.string, start, end);
      },
      substring$1: function($receiver, start) {
        return this.substring$2($receiver, start, null);
      },
      error$4$length$match$position: [function(_, message, $length, match, position) {
        var t1, t2, t3, t4, sourceFile;
        t1 = this.string;
        B.validateErrorArgs(t1, match, position, $length);
        if (match == null && position == null && $length == null)
          match = this.get$lastMatch();
        if (position == null)
          position = match == null ? this._string_scanner$_position : J.get$start$x(match);
        if ($length == null)
          if (match == null)
            $length = 0;
          else {
            t2 = J.getInterceptor$x(match);
            $length = J.$sub$n(t2.get$end(match), t2.get$start(match));
          }
        t2 = this.sourceUrl;
        t3 = J.get$runes$s(t1);
        t4 = H.setRuntimeTypeInfo([0], [P.$int]);
        sourceFile = new Y.SourceFile(t2, t4, new Uint32Array(H._ensureNativeList(P.List_List$from(t3, true, H.getRuntimeTypeArgument(t3, "Iterable", 0)))), null);
        sourceFile.SourceFile$decoded$2$url(t3, t2);
        throw H.wrapException(E.StringScannerException$(message, sourceFile.span$2(0, position, J.$add$ns(position, $length)), t1));
      }, function($receiver, message) {
        return this.error$4$length$match$position($receiver, message, null, null, null);
      }, "error$1", function($receiver, message, $length, position) {
        return this.error$4$length$match$position($receiver, message, $length, null, position);
      }, "error$3$length$position", function($receiver, message, $length) {
        return this.error$4$length$match$position($receiver, message, $length, null, null);
      }, "error$2$length", "call$4$length$match$position", "call$1", "call$3$length$position", "call$2$length", "get$error", 2, 7, 53, 2, 2, 2, 10, 68, 37, 56],
      StringScanner$3$position$sourceUrl: function(string, position, sourceUrl) {
      }
    }
  }], ["", "package:string_scanner/src/utils.dart",, B, {
    "^": "",
    validateErrorArgs: function(string, match, position, $length) {
      var t1, t2;
      if (match != null)
        t1 = position != null || $length != null;
      else
        t1 = false;
      if (t1)
        throw H.wrapException(P.ArgumentError$("Can't pass both match and position/length."));
      t1 = position != null;
      if (t1) {
        t2 = J.getInterceptor$n(position);
        if (t2.$lt(position, 0))
          throw H.wrapException(P.RangeError$("position must be greater than or equal to 0."));
        else if (t2.$gt(position, J.get$length$asx(string)))
          throw H.wrapException(P.RangeError$("position must be less than or equal to the string length."));
      }
      t2 = $length != null;
      if (t2 && J.$lt$n($length, 0))
        throw H.wrapException(P.RangeError$("length must be greater than or equal to 0."));
      if (t1 && t2 && J.$gt$n(J.$add$ns(position, $length), J.get$length$asx(string)))
        throw H.wrapException(P.RangeError$("position plus length must not go beyond the end of the string."));
    }
  }], ["usage_impl", "package:usage/src/usage_impl.dart",, Z, {
    "^": "",
    postEncode: function(map) {
      return map.get$keys(map).map$1(0, new Z.postEncode_closure(map)).join$1(0, "&");
    },
    postEncode_closure: {
      "^": "Closure:0;map",
      call$1: [function(key) {
        var value = H.S(this.map.$index(0, key));
        return H.S(key) + "=" + H.S(P._Uri__uriEncode(C.List_KIf, value, C.Utf8Codec_false, false));
      }, null, null, 2, 0, null, 50, "call"]
    },
    ThrottlingBucket: {
      "^": "Object;startingCount,drops,_lastReplenish",
      removeDrop$0: function() {
        var t1, t2, inc;
        t1 = Date.now();
        t2 = this._lastReplenish;
        if (t2 + 1000 >= t1) {
          inc = C.JSNumber_methods._tdivFast$1(t1 - t2, 1000);
          this.drops = P.min(this.drops + inc, this.startingCount);
          this._lastReplenish = this._lastReplenish + 1000 * inc;
        }
        t1 = this.drops;
        if (t1 <= 0)
          return false;
        else {
          this.drops = t1 - 1;
          return true;
        }
      }
    },
    AnalyticsImpl: {
      "^": "Analytics;",
      set$optIn: function(value) {
        this.properties.$indexSet(0, "optIn", true);
      },
      sendScreenView$1: function(viewName) {
        return this._sendPayload$2("screenview", P.LinkedHashMap__makeLiteral(["cd", viewName]));
      },
      sendEvent$4$label$value: function(category, action, label, value) {
        var t1, args;
        if (!J.$eq$(J.$index$asx(this.properties._usage_impl_html$_map, "optIn"), true)) {
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
        args = P.LinkedHashMap__makeLiteral(["ec", category, "ea", action]);
        return this._sendPayload$2("event", args);
      },
      sendEvent$2: function(category, action) {
        return this.sendEvent$4$label$value(category, action, null, null);
      },
      sendException$2$fatal: function(description, fatal) {
        var t1, args;
        if (!J.$eq$(J.$index$asx(this.properties._usage_impl_html$_map, "optIn"), true)) {
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
        if (C.JSString_methods.contains$1(description, "file:/"))
          description = C.JSString_methods.substring$2(description, 0, C.JSString_methods.indexOf$1(description, "file:/"));
        args = P.LinkedHashMap__makeLiteral(["exd", description.length > 100 ? C.JSString_methods.substring$2(description, 0, 100) : description]);
        if (fatal)
          args.$indexSet(0, "exf", "1");
        return this._sendPayload$2("exception", args);
      },
      setSessionValue$2: function(param, value) {
        var t1 = this._variableMap;
        if (value == null)
          t1.remove$1(0, param);
        else
          t1.$indexSet(0, param, value);
      },
      _sendPayload$2: function(hitType, args) {
        var t1, t2;
        if (this._bucket.removeDrop$0()) {
          t1 = this.properties;
          if (J.$index$asx(t1._usage_impl_html$_map, "clientId") == null) {
            t2 = C.C__JSRandom.nextInt$1(4);
            t1.$indexSet(0, "clientId", C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(C.C__JSRandom.nextInt$1(65536), 16), 4, "0") + C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(C.C__JSRandom.nextInt$1(65536), 16), 4, "0") + "-" + C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(C.C__JSRandom.nextInt$1(65536), 16), 4, "0") + "-4" + C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(C.C__JSRandom.nextInt$1(4096), 16), 3, "0") + "-" + C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(8 + t2, 16), 1, "0") + C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(C.C__JSRandom.nextInt$1(4096), 16), 3, "0") + "-" + C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(C.C__JSRandom.nextInt$1(65536), 16), 4, "0") + C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(C.C__JSRandom.nextInt$1(65536), 16), 4, "0") + C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(C.C__JSRandom.nextInt$1(65536), 16), 4, "0"));
          }
          this._variableMap.forEach$1(0, new Z.AnalyticsImpl__sendPayload_closure(args));
          args.$indexSet(0, "v", "1");
          args.$indexSet(0, "tid", this.trackingId);
          args.$indexSet(0, "cid", J.$index$asx(t1._usage_impl_html$_map, "clientId"));
          args.$indexSet(0, "t", hitType);
          return this._recordFuture$1(this.postHandler.sendPost$2(this._url, args));
        } else {
          t1 = new P._Future(0, $.Zone__current, null, [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
      },
      _recordFuture$1: function(f) {
        this._futures.push(f);
        return f.whenComplete$1(new Z.AnalyticsImpl__recordFuture_closure(this, f));
      },
      AnalyticsImpl$6$analyticsUrl$applicationName$applicationVersion: function(trackingId, properties, postHandler, analyticsUrl, applicationName, applicationVersion) {
        this.setSessionValue$2("an", applicationName);
        if (applicationVersion != null)
          this.setSessionValue$2("av", applicationVersion);
        this._url = "https://www.google-analytics.com/collect";
      }
    },
    AnalyticsImpl__sendPayload_closure: {
      "^": "Closure:4;args",
      call$2: function(key, value) {
        this.args.$indexSet(0, key, value);
      }
    },
    AnalyticsImpl__recordFuture_closure: {
      "^": "Closure:1;$this,f",
      call$0: [function() {
        return C.JSArray_methods.remove$1(this.$this._futures, this.f);
      }, null, null, 0, 0, null, "call"]
    },
    PersistentProperties: {
      "^": "Object;name>"
    },
    PostHandler: {
      "^": "Object;"
    }
  }], ["usage_impl_html", "package:usage/src/usage_impl_html.dart",, V, {
    "^": "",
    HtmlPostHandler: {
      "^": "PostHandler;mockRequestor",
      sendPost$2: function(url, parameters) {
        var t1, viewportWidth, viewportHeight, data;
        t1 = document.documentElement;
        viewportWidth = t1.clientWidth;
        viewportHeight = t1.clientHeight;
        parameters.$indexSet(0, "vp", H.S(viewportWidth) + "x" + H.S(viewportHeight));
        data = Z.postEncode(parameters);
        return W.html_HttpRequest_request$closure().call$3$method$sendData(url, "POST", data).catchError$1(new V.HtmlPostHandler_sendPost_closure());
      }
    },
    HtmlPostHandler_sendPost_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
      }, null, null, 2, 0, null, 0, "call"]
    },
    HtmlPersistentProperties: {
      "^": "PersistentProperties;_usage_impl_html$_map,name",
      $index: function(_, key) {
        return J.$index$asx(this._usage_impl_html$_map, key);
      },
      $indexSet: function(_, key, value) {
        var t1 = this._usage_impl_html$_map;
        if (value == null)
          J.remove$1$ax(t1, key);
        else
          J.$indexSet$ax(t1, key, value);
        window.localStorage.setItem(this.name, C.JsonCodec_null_null.encode$1(this._usage_impl_html$_map));
      }
    }
  }], ["usage", "package:usage/usage.dart",, F, {
    "^": "",
    sanitizeStacktrace: function(st, shorten) {
      var str, iter, t1, t2, match, replacement;
      str = H.S(st);
      iter = $.$get$_pathRegex().allMatches$1(0, str);
      t1 = P.List_List$from(iter, true, H.getRuntimeTypeArgument(iter, "Iterable", 0));
      t2 = H.getTypeArgumentByIndex(t1, 0);
      iter = new H.ReversedListIterable(t1, [t2]);
      for (t1 = new H.ListIterator(iter, iter.get$length(iter), 0, null, [t2]); t1.moveNext$0();) {
        match = t1.__internal$_current;
        replacement = match.group$1(1);
        t2 = J.getInterceptor$x(match);
        str = C.JSString_methods.$add(C.JSString_methods.substring$2(str, 0, t2.get$start(match)), replacement) + C.JSString_methods.substring$1(str, t2.get$end(match));
      }
      return H.stringReplaceAllUnchecked(H.stringReplaceAllUnchecked(H.stringReplaceAllUnchecked(str, "(package:", "("), "(dart:", "("), P.RegExp_RegExp("\\s+", true, false), " ");
    },
    Analytics: {
      "^": "Object;"
    },
    AnalyticsMock: {
      "^": "Object;logCalls,optIn,hasSetOptIn",
      sendScreenView$1: function(viewName) {
        return this._log$2("screenView", P.LinkedHashMap__makeLiteral(["viewName", viewName]));
      },
      sendEvent$4$label$value: function(category, action, label, value) {
        return this._log$2("event", P.LinkedHashMap__makeLiteral(["category", category, "action", action, "label", label, "value", value]));
      },
      sendEvent$2: function(category, action) {
        return this.sendEvent$4$label$value(category, action, null, null);
      },
      sendException$2$fatal: function(description, fatal) {
        return this._log$2("exception", P.LinkedHashMap__makeLiteral(["description", description, "fatal", fatal]));
      },
      _log$2: function(hitType, m) {
        var t1 = new P._Future(0, $.Zone__current, null, [null]);
        t1._asyncComplete$1(null);
        return t1;
      }
    }
  }], ["usage_html", "package:usage/usage_html.dart",, L, {
    "^": "",
    AnalyticsHtml: {
      "^": "AnalyticsImpl;trackingId,properties,postHandler,_bucket,_variableMap,_futures,_url"
    }
  }], ["vm_service_lib", "package:vm_service_lib/vm_service_lib.dart",, S, {
    "^": "",
    _createObject: function(json) {
      var t1, type;
      if (json == null)
        return;
      t1 = J.getInterceptor(json);
      if (!!t1.$isList)
        return t1.map$1(json, new S._createObject_closure()).toList$0(0);
      else if (!!t1.$isMap) {
        type = t1.$index(json, "type");
        if ($.$get$_typeFactories().$index(0, type) == null)
          return;
        else
          return $.$get$_typeFactories().$index(0, type).call$1(json);
      } else
        return json;
    },
    _createSpecificObject: function(json, creator) {
      var t1;
      if (json == null)
        return;
      t1 = J.getInterceptor(json);
      if (!!t1.$isList)
        return t1.map$1(json, new S._createSpecificObject_closure(creator)).toList$0(0);
      else if (!!t1.$isMap)
        return creator.call$1(json);
      else
        return json;
    },
    _createObject_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return S._createObject(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    _createSpecificObject_closure: {
      "^": "Closure:0;creator",
      call$1: [function(e) {
        return this.creator.call$1(e);
      }, null, null, 2, 0, null, 0, "call"]
    },
    VmService: {
      "^": "Object;_vm_service_lib$_streamSub,_vm_service_lib$_writeMessage,_vm_service_lib$_id,_vm_service_lib$_completers,_methodCalls,_vm_service_lib$_log,_vm_service_lib$_onSend,_vm_service_lib$_onReceive,_eventControllers,_disposeHandler",
      _getEventController$1: function(eventName) {
        var t1, controller;
        t1 = this._eventControllers;
        controller = t1.$index(0, eventName);
        if (controller == null) {
          controller = P.StreamController_StreamController$broadcast(null, null, false, null);
          t1.$indexSet(0, eventName, controller);
        }
        return controller;
      },
      addBreakpointWithScriptUri$4$column: function(isolateId, scriptUri, line, column) {
        var m = P.LinkedHashMap__makeLiteral(["isolateId", isolateId, "scriptUri", scriptUri, "line", line]);
        if (column != null)
          m.$indexSet(0, "column", column);
        return this._vm_service_lib$_call$2(0, "addBreakpointWithScriptUri", m);
      },
      getObject$4$count$offset: function(_, isolateId, objectId, count, offset) {
        var m = P.LinkedHashMap__makeLiteral(["isolateId", isolateId, "objectId", objectId]);
        return this._vm_service_lib$_call$2(0, "getObject", m);
      },
      getObject$2: function($receiver, isolateId, objectId) {
        return this.getObject$4$count$offset($receiver, isolateId, objectId, null, null);
      },
      getVersion$0: function() {
        return this._vm_service_lib$_call$1(0, "getVersion");
      },
      resume$2$step: function(_, isolateId, step) {
        var m = P.LinkedHashMap__makeLiteral(["isolateId", isolateId]);
        if (step != null)
          m.$indexSet(0, "step", step);
        return this._vm_service_lib$_call$2(0, "resume", m);
      },
      resume$1: function($receiver, isolateId) {
        return this.resume$2$step($receiver, isolateId, null);
      },
      callMethod$3$args$isolateId: function(method, args, isolateId) {
        return this.callServiceExtension$3$args$isolateId(method, args, isolateId);
      },
      callMethod$1: function(method) {
        return this.callMethod$3$args$isolateId(method, null, null);
      },
      callServiceExtension$3$args$isolateId: function(method, args, isolateId) {
        var t1 = args == null;
        if (t1 && isolateId == null)
          return this._vm_service_lib$_call$1(0, method);
        else if (t1)
          return this._vm_service_lib$_call$2(0, method, P.LinkedHashMap__makeLiteral(["isolateId", isolateId]));
        else {
          args = P.LinkedHashMap_LinkedHashMap$from(args, null, null);
          args.$indexSet(0, "isolateId", isolateId);
          return this._vm_service_lib$_call$2(0, method, args);
        }
      },
      get$onSend: function() {
        var t1 = this._vm_service_lib$_onSend;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onReceive: function() {
        var t1 = this._vm_service_lib$_onReceive;
        return new P._BroadcastStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      dispose$0: function() {
        this._vm_service_lib$_streamSub.cancel$0(0);
        var t1 = this._vm_service_lib$_completers;
        t1.get$values(t1).forEach$1(0, new S.VmService_dispose_closure());
      },
      _vm_service_lib$_call$2: function(_, method, args) {
        var id, t1, m, message, t2;
        id = "" + ++this._vm_service_lib$_id;
        t1 = new P._Future(0, $.Zone__current, null, [null]);
        this._vm_service_lib$_completers.$indexSet(0, id, new P._AsyncCompleter(t1, [null]));
        this._methodCalls.$indexSet(0, id, method);
        m = P.LinkedHashMap__makeLiteral(["id", id, "method", method]);
        if (args != null)
          m.$indexSet(0, "params", args);
        message = C.JsonCodec_null_null.encode$1(m);
        t2 = this._vm_service_lib$_onSend;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(message);
        this._vm_service_lib$_writeMessage.call$1(message);
        return t1;
      },
      _vm_service_lib$_call$1: function($receiver, method) {
        return this._vm_service_lib$_call$2($receiver, method, null);
      },
      _vm_service_lib$_processMessage$1: [function(message) {
        var json, params, streamId, completer, methodName, result, type, e, s, t1, t2, exception;
        try {
          t1 = this._vm_service_lib$_onReceive;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(message);
          json = C.JsonCodec_null_null.decode$1(message);
          if (J.$index$asx(json, "id") == null && J.$eq$(J.$index$asx(json, "method"), "streamNotify")) {
            params = J.$index$asx(json, "params");
            streamId = J.$index$asx(params, "streamId");
            t1 = this._getEventController$1(streamId);
            t2 = S._createObject(J.$index$asx(params, "event"));
            if (!t1.get$_mayAddEvent())
              H.throwExpression(t1._addEventError$0());
            t1._sendData$1(t2);
          } else if (J.$index$asx(json, "id") != null) {
            completer = this._vm_service_lib$_completers.remove$1(0, J.$index$asx(json, "id"));
            methodName = this._methodCalls.remove$1(0, J.$index$asx(json, "id"));
            if (completer == null)
              this._vm_service_lib$_log.severe$1("unmatched request response: " + H.S(message));
            else if (J.$index$asx(json, "error") != null) {
              t1 = J.$index$asx(json, "error");
              t2 = J.getInterceptor$asx(t1);
              completer.completeError$1(new S.RPCError(methodName, t2.$index(t1, "code"), t2.$index(t1, "message"), t2.$index(t1, "data")));
            } else {
              result = H.subtypeCast(J.$index$asx(json, "result"), "$isMap", [P.String, null], "$asMap");
              type = J.$index$asx(result, "type");
              if ($.$get$_typeFactories().$index(0, type) == null) {
                t1 = result;
                if (t1 == null)
                  t1 = null;
                else {
                  t2 = new S.Response(t1, null);
                  t2.type = J.$index$asx(t1, "type");
                  t1 = t2;
                }
                J.complete$1$x(completer, t1);
              } else
                J.complete$1$x(completer, S._createObject(result));
            }
          } else
            this._vm_service_lib$_log.severe$1("unknown message type: " + H.S(message));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this._vm_service_lib$_log.severe$1("unable to decode message: " + H.S(message) + ", " + H.S(e) + "\n" + H.S(s));
        }
      }, "call$1", "get$_vm_service_lib$_processMessage", 2, 0, 10, 10]
    },
    VmService_dispose_closure: {
      "^": "Closure:0;",
      call$1: function(c) {
        return c.completeError$1("disposed");
      }
    },
    RPCError: {
      "^": "Object;callingMethod,code>,message>,data>",
      toString$0: function(_) {
        var t1, t2, t3, t4, t5, t6;
        t1 = this.data;
        t2 = t1 == null;
        t3 = t2 ? null : J.$index$asx(t1, "details");
        t4 = this.message;
        t5 = this.code;
        t6 = this.callingMethod;
        if (t3 == null)
          return H.S(t4) + " (" + H.S(t5) + ") from " + H.S(t6) + "()";
        else {
          t3 = H.S(t4) + " (" + H.S(t5) + ") from " + H.S(t6) + "():\n";
          return t3 + H.S(t2 ? null : J.$index$asx(t1, "details"));
        }
      }
    },
    ExtensionData: {
      "^": "Object;data>",
      toString$0: function(_) {
        return "[ExtensionData " + H.S(this.data) + "]";
      },
      static: {
        ExtensionData_parse: [function(json) {
          return json == null ? null : new S.ExtensionData(json);
        }, "call$1", "vm_service_lib_ExtensionData_parse$closure", 2, 0, 260]
      }
    },
    Log: {
      "^": "Object;"
    },
    BoundField: {
      "^": "Object;decl<,value>",
      toString$0: function(_) {
        return "[BoundField decl: " + H.S(this.decl) + ", value: " + H.S(this.value) + "]";
      },
      static: {
        BoundField_parse: [function(json) {
          var t1, t2;
          t1 = new S.BoundField(null, null);
          t2 = J.getInterceptor$asx(json);
          t1.decl = S._createObject(t2.$index(json, "decl"));
          t1.value = S._createObject(t2.$index(json, "value"));
          return t1;
        }, "call$1", "vm_service_lib_BoundField_parse$closure", 2, 0, 261]
      }
    },
    BoundVariable: {
      "^": "Object;name>,value>,declarationTokenPos,scopeStartTokenPos,scopeEndTokenPos",
      toString$0: function(_) {
        return "[BoundVariable name: " + H.S(this.name) + ", value: " + H.S(this.value) + ", declarationTokenPos: " + H.S(this.declarationTokenPos) + ", scopeStartTokenPos: " + H.S(this.scopeStartTokenPos) + ", scopeEndTokenPos: " + H.S(this.scopeEndTokenPos) + "]";
      },
      static: {
        BoundVariable_parse: [function(json) {
          var t1, t2;
          t1 = new S.BoundVariable(null, null, null, null, null);
          t2 = J.getInterceptor$asx(json);
          t1.name = t2.$index(json, "name");
          t1.value = S._createObject(t2.$index(json, "value"));
          t1.declarationTokenPos = t2.$index(json, "declarationTokenPos");
          t1.scopeStartTokenPos = t2.$index(json, "scopeStartTokenPos");
          t1.scopeEndTokenPos = t2.$index(json, "scopeEndTokenPos");
          return t1;
        }, "call$1", "vm_service_lib_BoundVariable_parse$closure", 2, 0, 262]
      }
    },
    Breakpoint: {
      "^": "Obj;breakpointNumber,resolved<,isSyntheticAsyncContinuation,location>,id,classRef,size,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.Breakpoint && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[Breakpoint type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", breakpointNumber: " + H.S(this.breakpointNumber) + ", resolved: " + H.S(this.resolved) + ", location: " + H.S(this.location) + "]";
      },
      static: {
        Breakpoint_parse: [function(json) {
          var t1, t2;
          t1 = new S.Breakpoint(null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.Obj$_fromJson$1(json);
          t2 = J.getInterceptor$asx(json);
          t1.breakpointNumber = t2.$index(json, "breakpointNumber");
          t1.resolved = t2.$index(json, "resolved");
          t1.isSyntheticAsyncContinuation = t2.$index(json, "isSyntheticAsyncContinuation");
          t1.location = S._createObject(t2.$index(json, "location"));
          return t1;
        }, "call$1", "vm_service_lib_Breakpoint_parse$closure", 2, 0, 263]
      }
    },
    ClassRef: {
      "^": "ObjRef;name>,id,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.ClassRef && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[ClassRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", name: " + H.S(this.name) + "]";
      },
      static: {
        ClassRef_parse: [function(json) {
          var t1, t2;
          t1 = new S.ClassRef(null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.id = t2.$index(json, "id");
          t1.name = t2.$index(json, "name");
          return t1;
        }, "call$1", "vm_service_lib_ClassRef_parse$closure", 2, 0, 264]
      }
    },
    Class: {
      "^": "Obj;name>,error>,isAbstract,isConst,library,location>,superClass,superType,interfaces<,mixin,fields,functions,subclasses<,id,classRef,size,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.Class && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[Class]";
      },
      static: {
        Class_parse: [function(json) {
          var t1, t2;
          t1 = new S.Class(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.Obj$_fromJson$1(json);
          t2 = J.getInterceptor$asx(json);
          t1.name = t2.$index(json, "name");
          t1.error = S._createObject(t2.$index(json, "error"));
          t1.isAbstract = t2.$index(json, "abstract");
          t1.isConst = t2.$index(json, "const");
          t1.library = S._createObject(t2.$index(json, "library"));
          t1.location = S._createObject(t2.$index(json, "location"));
          t1.superClass = S._createObject(t2.$index(json, "super"));
          t1.superType = S._createObject(t2.$index(json, "superType"));
          t1.interfaces = H.subtypeCast(S._createObject(t2.$index(json, "interfaces")), "$isList", [S.InstanceRef], "$asList");
          t1.mixin = S._createObject(t2.$index(json, "mixin"));
          t1.fields = H.subtypeCast(S._createObject(t2.$index(json, "fields")), "$isList", [S.FieldRef], "$asList");
          t1.functions = H.subtypeCast(S._createObject(t2.$index(json, "functions")), "$isList", [S.FuncRef], "$asList");
          t1.subclasses = H.subtypeCast(S._createObject(t2.$index(json, "subclasses")), "$isList", [S.ClassRef], "$asList");
          return t1;
        }, "call$1", "vm_service_lib_Class_parse$closure", 2, 0, 265]
      }
    },
    ClassList: {
      "^": "Response;classes>,json,type",
      toString$0: function(_) {
        return "[ClassList type: " + H.S(this.type) + ", classes: " + H.S(this.classes) + "]";
      },
      static: {
        ClassList_parse: [function(json) {
          var t1 = new S.ClassList(null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.classes = H.subtypeCast(S._createObject(J.$index$asx(json, "classes")), "$isList", [S.ClassRef], "$asList");
          return t1;
        }, "call$1", "vm_service_lib_ClassList_parse$closure", 2, 0, 266]
      }
    },
    CodeRef: {
      "^": "ObjRef;name>,kind>,id,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.CodeRef && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[CodeRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", name: " + H.S(this.name) + ", kind: " + H.S(this.kind) + "]";
      },
      static: {
        CodeRef_parse: [function(json) {
          var t1, t2;
          t1 = new S.CodeRef(null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.id = t2.$index(json, "id");
          t1.name = t2.$index(json, "name");
          t1.kind = t2.$index(json, "kind");
          return t1;
        }, "call$1", "vm_service_lib_CodeRef_parse$closure", 2, 0, 267]
      }
    },
    Code: {
      "^": "ObjRef;name>,kind>,id,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.Code && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[Code type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", name: " + H.S(this.name) + ", kind: " + H.S(this.kind) + "]";
      },
      static: {
        Code_parse: [function(json) {
          var t1, t2;
          t1 = new S.Code(null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.id = t2.$index(json, "id");
          t1.name = t2.$index(json, "name");
          t1.kind = t2.$index(json, "kind");
          return t1;
        }, "call$1", "vm_service_lib_Code_parse$closure", 2, 0, 268]
      }
    },
    ContextRef: {
      "^": "ObjRef;length>,id,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.ContextRef && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[ContextRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", length: " + H.S(this.length) + "]";
      },
      static: {
        ContextRef_parse: [function(json) {
          var t1, t2;
          t1 = new S.ContextRef(null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.id = t2.$index(json, "id");
          t1.length = t2.$index(json, "length");
          return t1;
        }, "call$1", "vm_service_lib_ContextRef_parse$closure", 2, 0, 269]
      }
    },
    Context0: {
      "^": "Obj;length>,parent>,variables,id,classRef,size,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.Context0 && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[Context type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", length: " + H.S(this.length) + ", variables: " + H.S(this.variables) + "]";
      },
      static: {
        Context_parse: [function(json) {
          var t1, t2;
          t1 = new S.Context0(null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.Obj$_fromJson$1(json);
          t2 = J.getInterceptor$asx(json);
          t1.length = t2.$index(json, "length");
          t1.parent = S._createObject(t2.$index(json, "parent"));
          t1.variables = H.subtypeCast(S._createObject(t2.$index(json, "variables")), "$isList", [S.ContextElement], "$asList");
          return t1;
        }, "call$1", "vm_service_lib_Context_parse$closure", 2, 0, 270]
      }
    },
    ContextElement: {
      "^": "Object;value>",
      toString$0: function(_) {
        return "[ContextElement value: " + H.S(this.value) + "]";
      },
      static: {
        ContextElement_parse: [function(json) {
          var t1 = new S.ContextElement(null);
          t1.value = S._createObject(J.$index$asx(json, "value"));
          return t1;
        }, "call$1", "vm_service_lib_ContextElement_parse$closure", 2, 0, 271]
      }
    },
    ErrorRef: {
      "^": "ObjRef;kind>,message>,id,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.ErrorRef && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[ErrorRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", kind: " + H.S(this.kind) + ", message: " + H.S(this.message) + "]";
      },
      static: {
        ErrorRef_parse: [function(json) {
          var t1, t2;
          t1 = new S.ErrorRef(null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.id = t2.$index(json, "id");
          t1.kind = t2.$index(json, "kind");
          t1.message = t2.$index(json, "message");
          return t1;
        }, "call$1", "vm_service_lib_ErrorRef_parse$closure", 2, 0, 272]
      }
    },
    Error0: {
      "^": "Obj;kind>,message>,exception<,stacktrace,id,classRef,size,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.Error0 && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[Error type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", kind: " + H.S(this.kind) + ", message: " + H.S(this.message) + "]";
      },
      static: {
        Error_parse: [function(json) {
          var t1, t2;
          t1 = new S.Error0(null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.Obj$_fromJson$1(json);
          t2 = J.getInterceptor$asx(json);
          t1.kind = t2.$index(json, "kind");
          t1.message = t2.$index(json, "message");
          t1.exception = S._createObject(t2.$index(json, "exception"));
          t1.stacktrace = S._createObject(t2.$index(json, "stacktrace"));
          return t1;
        }, "call$1", "vm_service_lib_Error_parse$closure", 2, 0, 273]
      }
    },
    Event1: {
      "^": "Response;kind>,isolate<,vm,timestamp>,breakpoint,pauseBreakpoints,topFrame,exception<,bytes<,inspectee<,extensionRPC<,extensionKind,extensionData,timelineEvents,atAsyncSuspension<,json,type",
      toString$0: function(_) {
        return "[Event type: " + H.S(this.type) + ", kind: " + H.S(this.kind) + ", timestamp: " + H.S(this.timestamp) + "]";
      },
      static: {
        Event_parse: [function(json) {
          var t1, t2, t3;
          t1 = new S.Event1(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.kind = t2.$index(json, "kind");
          t1.isolate = S._createObject(t2.$index(json, "isolate"));
          t1.vm = S._createObject(t2.$index(json, "vm"));
          t1.timestamp = t2.$index(json, "timestamp");
          t1.breakpoint = S._createObject(t2.$index(json, "breakpoint"));
          t1.pauseBreakpoints = H.subtypeCast(S._createObject(t2.$index(json, "pauseBreakpoints")), "$isList", [S.Breakpoint], "$asList");
          t1.topFrame = S._createObject(t2.$index(json, "topFrame"));
          t1.exception = S._createObject(t2.$index(json, "exception"));
          t1.bytes = t2.$index(json, "bytes");
          t1.inspectee = S._createObject(t2.$index(json, "inspectee"));
          t1.extensionRPC = t2.$index(json, "extensionRPC");
          t1.extensionKind = t2.$index(json, "extensionKind");
          t3 = t2.$index(json, "extensionData");
          t1.extensionData = t3 == null ? null : new S.ExtensionData(t3);
          t1.timelineEvents = H.subtypeCast(S._createObject(t2.$index(json, "timelineEvents")), "$isList", [S.TimelineEvent], "$asList");
          t1.atAsyncSuspension = t2.$index(json, "atAsyncSuspension");
          return t1;
        }, "call$1", "vm_service_lib_Event_parse$closure", 2, 0, 274]
      }
    },
    FieldRef: {
      "^": "ObjRef;name>,owner<,declaredType,isConst,isFinal,isStatic,id,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.FieldRef && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[FieldRef]";
      },
      static: {
        FieldRef_parse: [function(json) {
          var t1, t2;
          t1 = new S.FieldRef(null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.id = t2.$index(json, "id");
          t1.name = t2.$index(json, "name");
          t1.owner = S._createObject(t2.$index(json, "owner"));
          t1.declaredType = S._createObject(t2.$index(json, "declaredType"));
          t1.isConst = t2.$index(json, "const");
          t1.isFinal = t2.$index(json, "final");
          t1.isStatic = t2.$index(json, "static");
          return t1;
        }, "call$1", "vm_service_lib_FieldRef_parse$closure", 2, 0, 275]
      }
    },
    Field: {
      "^": "Obj;name>,owner<,declaredType,isConst,isFinal,isStatic,staticValue,location>,id,classRef,size,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.Field && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[Field]";
      },
      static: {
        Field_parse: [function(json) {
          var t1, t2;
          t1 = new S.Field(null, null, null, null, null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.Obj$_fromJson$1(json);
          t2 = J.getInterceptor$asx(json);
          t1.name = t2.$index(json, "name");
          t1.owner = S._createObject(t2.$index(json, "owner"));
          t1.declaredType = S._createObject(t2.$index(json, "declaredType"));
          t1.isConst = t2.$index(json, "const");
          t1.isFinal = t2.$index(json, "final");
          t1.isStatic = t2.$index(json, "static");
          t1.staticValue = S._createObject(t2.$index(json, "staticValue"));
          t1.location = S._createObject(t2.$index(json, "location"));
          return t1;
        }, "call$1", "vm_service_lib_Field_parse$closure", 2, 0, 276]
      }
    },
    Flag: {
      "^": "Object;name>,comment,modified,valueAsString>",
      toString$0: function(_) {
        return "[Flag name: " + H.S(this.name) + ", comment: " + H.S(this.comment) + ", modified: " + H.S(this.modified) + "]";
      },
      static: {
        Flag_parse: [function(json) {
          var t1, t2;
          t1 = new S.Flag(null, null, null, null);
          t2 = J.getInterceptor$asx(json);
          t1.name = t2.$index(json, "name");
          t1.comment = t2.$index(json, "comment");
          t1.modified = t2.$index(json, "modified");
          t1.valueAsString = t2.$index(json, "valueAsString");
          return t1;
        }, "call$1", "vm_service_lib_Flag_parse$closure", 2, 0, 277]
      }
    },
    FlagList: {
      "^": "Response;flags<,json,type",
      toString$0: function(_) {
        return "[FlagList type: " + H.S(this.type) + ", flags: " + H.S(this.flags) + "]";
      },
      static: {
        FlagList_parse: [function(json) {
          var t1 = new S.FlagList(null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.flags = H.subtypeCast(S._createObject(J.$index$asx(json, "flags")), "$isList", [S.Flag], "$asList");
          return t1;
        }, "call$1", "vm_service_lib_FlagList_parse$closure", 2, 0, 278]
      }
    },
    Frame: {
      "^": "Response;index>,$function<,code>,location>,vars<,json,type",
      toString$0: function(_) {
        return "[Frame type: " + H.S(this.type) + ", index: " + H.S(this.index) + ", function: " + H.S(this.$function) + ", code: " + H.S(this.code) + ", location: " + H.S(this.location) + ", vars: " + H.S(this.vars) + "]";
      },
      static: {
        Frame_parse: [function(json) {
          var t1, t2;
          t1 = new S.Frame(null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.index = t2.$index(json, "index");
          t1.$function = S._createObject(t2.$index(json, "function"));
          t1.code = S._createObject(t2.$index(json, "code"));
          t1.location = S._createObject(t2.$index(json, "location"));
          t1.vars = H.subtypeCast(S._createObject(t2.$index(json, "vars")), "$isList", [S.BoundVariable], "$asList");
          return t1;
        }, "call$1", "vm_service_lib_Frame_parse$closure", 2, 0, 279]
      }
    },
    FuncRef: {
      "^": "ObjRef;name>,owner<,isStatic,isConst,id,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.FuncRef && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[FuncRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", name: " + H.S(this.name) + ", owner: " + H.S(this.owner) + ", isStatic: " + H.S(this.isStatic) + ", isConst: " + H.S(this.isConst) + "]";
      },
      static: {
        FuncRef_parse: [function(json) {
          var t1, t2;
          t1 = new S.FuncRef(null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.id = t2.$index(json, "id");
          t1.name = t2.$index(json, "name");
          t1.owner = S._createObject(t2.$index(json, "owner"));
          t1.isStatic = t2.$index(json, "static");
          t1.isConst = t2.$index(json, "const");
          return t1;
        }, "call$1", "vm_service_lib_FuncRef_parse$closure", 2, 0, 280]
      }
    },
    Func: {
      "^": "Obj;name>,owner<,location>,code>,id,classRef,size,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.Func && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[Func type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", name: " + H.S(this.name) + ", owner: " + H.S(this.owner) + "]";
      },
      static: {
        Func_parse: [function(json) {
          var t1, t2;
          t1 = new S.Func(null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.Obj$_fromJson$1(json);
          t2 = J.getInterceptor$asx(json);
          t1.name = t2.$index(json, "name");
          t1.owner = S._createObject(t2.$index(json, "owner"));
          t1.location = S._createObject(t2.$index(json, "location"));
          t1.code = S._createObject(t2.$index(json, "code"));
          return t1;
        }, "call$1", "vm_service_lib_Func_parse$closure", 2, 0, 281]
      }
    },
    InstanceRef: {
      "^": "ObjRef;kind>,classRef<,valueAsString>,valueAsStringIsTruncated<,length>,name>,typeClass,parameterizedClass,pattern,id,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.InstanceRef && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[InstanceRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", kind: " + H.S(this.kind) + ", classRef: " + H.S(this.classRef) + "]";
      },
      InstanceRef$_fromJson$1: function(json) {
        var t1, t2;
        t1 = J.getInterceptor$asx(json);
        this.kind = t1.$index(json, "kind");
        this.classRef = S._createObject(t1.$index(json, "class"));
        this.valueAsString = t1.$index(json, "valueAsString");
        t2 = t1.$index(json, "valueAsStringIsTruncated");
        this.valueAsStringIsTruncated = t2 == null ? false : t2;
        this.length = t1.$index(json, "length");
        this.name = t1.$index(json, "name");
        this.typeClass = S._createObject(t1.$index(json, "typeClass"));
        this.parameterizedClass = S._createObject(t1.$index(json, "parameterizedClass"));
        this.pattern = S._createObject(t1.$index(json, "pattern"));
      },
      static: {
        InstanceRef_parse: [function(json) {
          return S.InstanceRef$_fromJson(json);
        }, "call$1", "vm_service_lib_InstanceRef_parse$closure", 2, 0, 282],
        InstanceRef$_fromJson: function(json) {
          var t1 = new S.InstanceRef(null, null, null, null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.id = J.$index$asx(json, "id");
          t1.InstanceRef$_fromJson$1(json);
          return t1;
        }
      }
    },
    Instance: {
      "^": "Obj;kind>,valueAsString>,valueAsStringIsTruncated<,length>,offset>,count,name>,typeClass,parameterizedClass,fields,elements,associations,bytes<,closureFunction,closureContext,mirrorReferent,pattern,isCaseSensitive,isMultiLine,propertyKey,propertyValue,typeArguments,parameterIndex,targetType,bound,id,classRef,size,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.Instance && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[Instance type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", kind: " + H.S(this.kind) + "]";
      },
      Instance$_fromJson$1: function(json) {
        var t1, t2;
        t1 = J.getInterceptor$asx(json);
        this.kind = t1.$index(json, "kind");
        this.valueAsString = t1.$index(json, "valueAsString");
        t2 = t1.$index(json, "valueAsStringIsTruncated");
        this.valueAsStringIsTruncated = t2 == null ? false : t2;
        this.length = t1.$index(json, "length");
        this.offset = t1.$index(json, "offset");
        this.count = t1.$index(json, "count");
        this.name = t1.$index(json, "name");
        this.typeClass = S._createObject(t1.$index(json, "typeClass"));
        this.parameterizedClass = S._createObject(t1.$index(json, "parameterizedClass"));
        this.fields = H.subtypeCast(S._createObject(t1.$index(json, "fields")), "$isList", [S.BoundField], "$asList");
        this.elements = H.listTypeCast(S._createObject(t1.$index(json, "elements")));
        this.associations = H.subtypeCast(S._createSpecificObject(t1.$index(json, "associations"), S.vm_service_lib_MapAssociation_parse$closure()), "$isList", [S.MapAssociation], "$asList");
        this.bytes = t1.$index(json, "bytes");
        this.closureFunction = S._createObject(t1.$index(json, "closureFunction"));
        this.closureContext = S._createObject(t1.$index(json, "closureContext"));
        this.mirrorReferent = S._createObject(t1.$index(json, "mirrorReferent"));
        this.pattern = t1.$index(json, "pattern");
        this.isCaseSensitive = t1.$index(json, "isCaseSensitive");
        this.isMultiLine = t1.$index(json, "isMultiLine");
        this.propertyKey = S._createObject(t1.$index(json, "propertyKey"));
        this.propertyValue = S._createObject(t1.$index(json, "propertyValue"));
        this.typeArguments = S._createObject(t1.$index(json, "typeArguments"));
        this.parameterIndex = t1.$index(json, "parameterIndex");
        this.targetType = S._createObject(t1.$index(json, "targetType"));
        this.bound = S._createObject(t1.$index(json, "bound"));
      },
      static: {
        Instance_parse: [function(json) {
          return S.Instance$_fromJson(json);
        }, "call$1", "vm_service_lib_Instance_parse$closure", 2, 0, 283],
        Instance$_fromJson: function(json) {
          var t1 = new S.Instance(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.Obj$_fromJson$1(json);
          t1.Instance$_fromJson$1(json);
          return t1;
        }
      }
    },
    IsolateRef: {
      "^": "Response;id>,number,name>,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.IsolateRef && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[IsolateRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", number: " + H.S(this.number) + ", name: " + H.S(this.name) + "]";
      },
      static: {
        IsolateRef_parse: [function(json) {
          var t1, t2;
          t1 = new S.IsolateRef(null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.id = t2.$index(json, "id");
          t1.number = t2.$index(json, "number");
          t1.name = t2.$index(json, "name");
          return t1;
        }, "call$1", "vm_service_lib_IsolateRef_parse$closure", 2, 0, 284]
      }
    },
    Isolate: {
      "^": "Response;id>,number,name>,startTime,runnable@,livePorts,pauseOnExit,pauseEvent>,rootLib,libraries<,breakpoints<,error>,exceptionPauseMode,extensionRPCs<,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.Isolate && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[Isolate]";
      },
      static: {
        Isolate_parse: [function(json) {
          var t1, t2;
          t1 = new S.Isolate(null, null, null, null, null, null, null, null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.id = t2.$index(json, "id");
          t1.number = t2.$index(json, "number");
          t1.name = t2.$index(json, "name");
          t1.startTime = t2.$index(json, "startTime");
          t1.runnable = t2.$index(json, "runnable");
          t1.livePorts = t2.$index(json, "livePorts");
          t1.pauseOnExit = t2.$index(json, "pauseOnExit");
          t1.pauseEvent = S._createObject(t2.$index(json, "pauseEvent"));
          t1.rootLib = S._createObject(t2.$index(json, "rootLib"));
          t1.libraries = H.subtypeCast(S._createObject(t2.$index(json, "libraries")), "$isList", [S.LibraryRef], "$asList");
          t1.breakpoints = H.subtypeCast(S._createObject(t2.$index(json, "breakpoints")), "$isList", [S.Breakpoint], "$asList");
          t1.error = S._createObject(t2.$index(json, "error"));
          t1.exceptionPauseMode = t2.$index(json, "exceptionPauseMode");
          t1.extensionRPCs = H.subtypeCast(S._createObject(t2.$index(json, "extensionRPCs")), "$isList", [P.String], "$asList");
          return t1;
        }, "call$1", "vm_service_lib_Isolate_parse$closure", 2, 0, 285]
      }
    },
    LibraryRef: {
      "^": "ObjRef;name>,uri<,id,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.LibraryRef && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[LibraryRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", name: " + H.S(this.name) + ", uri: " + H.S(this.uri) + "]";
      },
      static: {
        LibraryRef_parse: [function(json) {
          var t1, t2;
          t1 = new S.LibraryRef(null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.id = t2.$index(json, "id");
          t1.name = t2.$index(json, "name");
          t1.uri = t2.$index(json, "uri");
          return t1;
        }, "call$1", "vm_service_lib_LibraryRef_parse$closure", 2, 0, 286]
      }
    },
    Library: {
      "^": "Obj;name>,uri<,debuggable,dependencies,scripts,variables,functions,classes>,id,classRef,size,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.Library && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[Library]";
      },
      static: {
        Library_parse: [function(json) {
          var t1, t2;
          t1 = new S.Library(null, null, null, null, null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.Obj$_fromJson$1(json);
          t2 = J.getInterceptor$asx(json);
          t1.name = t2.$index(json, "name");
          t1.uri = t2.$index(json, "uri");
          t1.debuggable = t2.$index(json, "debuggable");
          t1.dependencies = H.subtypeCast(S._createObject(t2.$index(json, "dependencies")), "$isList", [S.LibraryDependency], "$asList");
          t1.scripts = H.subtypeCast(S._createObject(t2.$index(json, "scripts")), "$isList", [S.ScriptRef], "$asList");
          t1.variables = H.subtypeCast(S._createObject(t2.$index(json, "variables")), "$isList", [S.FieldRef], "$asList");
          t1.functions = H.subtypeCast(S._createObject(t2.$index(json, "functions")), "$isList", [S.FuncRef], "$asList");
          t1.classes = H.subtypeCast(S._createObject(t2.$index(json, "classes")), "$isList", [S.ClassRef], "$asList");
          return t1;
        }, "call$1", "vm_service_lib_Library_parse$closure", 2, 0, 287]
      }
    },
    LibraryDependency: {
      "^": "Object;isImport,isDeferred,prefix<,target>",
      toString$0: function(_) {
        return "[LibraryDependency isImport: " + H.S(this.isImport) + ", isDeferred: " + H.S(this.isDeferred) + ", prefix: " + H.S(this.prefix) + ", target: " + H.S(this.target) + "]";
      },
      static: {
        LibraryDependency_parse: [function(json) {
          var t1, t2;
          t1 = new S.LibraryDependency(null, null, null, null);
          t2 = J.getInterceptor$asx(json);
          t1.isImport = t2.$index(json, "isImport");
          t1.isDeferred = t2.$index(json, "isDeferred");
          t1.prefix = t2.$index(json, "prefix");
          t1.target = S._createObject(t2.$index(json, "target"));
          return t1;
        }, "call$1", "vm_service_lib_LibraryDependency_parse$closure", 2, 0, 288]
      }
    },
    MapAssociation: {
      "^": "Object;key>,value>",
      toString$0: function(_) {
        return "[MapAssociation key: " + H.S(this.key) + ", value: " + H.S(this.value) + "]";
      },
      static: {
        MapAssociation_parse: [function(json) {
          var t1, t2;
          if (json == null)
            t1 = null;
          else {
            t1 = new S.MapAssociation(null, null);
            t2 = J.getInterceptor$asx(json);
            t1.key = S._createObject(t2.$index(json, "key"));
            t1.value = S._createObject(t2.$index(json, "value"));
          }
          return t1;
        }, "call$1", "vm_service_lib_MapAssociation_parse$closure", 2, 0, 289]
      }
    },
    Message: {
      "^": "Response;index>,name>,messageObjectId,size,handler,location>,json,type",
      toString$0: function(_) {
        return "[Message type: " + H.S(this.type) + ", index: " + H.S(this.index) + ", name: " + H.S(this.name) + ", messageObjectId: " + H.S(this.messageObjectId) + ", size: " + H.S(this.size) + "]";
      },
      static: {
        Message_parse: [function(json) {
          var t1, t2;
          t1 = new S.Message(null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.index = t2.$index(json, "index");
          t1.name = t2.$index(json, "name");
          t1.messageObjectId = t2.$index(json, "messageObjectId");
          t1.size = t2.$index(json, "size");
          t1.handler = S._createObject(t2.$index(json, "handler"));
          t1.location = S._createObject(t2.$index(json, "location"));
          return t1;
        }, "call$1", "vm_service_lib_Message_parse$closure", 2, 0, 290]
      }
    },
    NullRef: {
      "^": "InstanceRef;kind,classRef,valueAsString,valueAsStringIsTruncated,length,name,typeClass,parameterizedClass,pattern,id,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.NullRef && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[NullRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", kind: " + H.S(this.kind) + ", classRef: " + H.S(this.classRef) + "]";
      },
      static: {
        NullRef_parse: [function(json) {
          var t1 = new S.NullRef(null, null, null, null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.id = J.$index$asx(json, "id");
          t1.InstanceRef$_fromJson$1(json);
          return t1;
        }, "call$1", "vm_service_lib_NullRef_parse$closure", 2, 0, 291]
      }
    },
    Null0: {
      "^": "Instance;kind,valueAsString,valueAsStringIsTruncated,length,offset,count,name,typeClass,parameterizedClass,fields,elements,associations,bytes,closureFunction,closureContext,mirrorReferent,pattern,isCaseSensitive,isMultiLine,propertyKey,propertyValue,typeArguments,parameterIndex,targetType,bound,id,classRef,size,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.Null0 && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[Null type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", kind: " + H.S(this.kind) + "]";
      },
      static: {
        Null_parse: [function(json) {
          var t1 = new S.Null0(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.Obj$_fromJson$1(json);
          t1.Instance$_fromJson$1(json);
          return t1;
        }, "call$1", "vm_service_lib_Null_parse$closure", 2, 0, 292]
      }
    },
    ObjRef: {
      "^": "Response;id>,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.ObjRef && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[ObjRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + "]";
      },
      static: {
        ObjRef_parse: [function(json) {
          var t1 = new S.ObjRef(null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.id = J.$index$asx(json, "id");
          return t1;
        }, "call$1", "vm_service_lib_ObjRef_parse$closure", 2, 0, 293]
      }
    },
    Obj: {
      "^": "Response;id>,classRef<,size,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.Obj && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[Obj type: " + H.S(this.type) + ", id: " + H.S(this.id) + "]";
      },
      Obj$_fromJson$1: function(json) {
        var t1 = J.getInterceptor$asx(json);
        this.id = t1.$index(json, "id");
        this.classRef = S._createObject(t1.$index(json, "class"));
        this.size = t1.$index(json, "size");
      },
      static: {
        Obj_parse: [function(json) {
          return S.Obj$_fromJson(json);
        }, "call$1", "vm_service_lib_Obj_parse$closure", 2, 0, 294],
        Obj$_fromJson: function(json) {
          var t1 = new S.Obj(null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.Obj$_fromJson$1(json);
          return t1;
        }
      }
    },
    Response: {
      "^": "Object;json>,type>",
      toString$0: function(_) {
        return "[Response type: " + H.S(this.type) + "]";
      },
      static: {
        Response_parse: [function(json) {
          var t1;
          if (json == null)
            t1 = null;
          else {
            t1 = new S.Response(json, null);
            t1.type = J.$index$asx(json, "type");
          }
          return t1;
        }, "call$1", "vm_service_lib_Response_parse$closure", 2, 0, 295, 170]
      }
    },
    Sentinel: {
      "^": "Response;kind>,valueAsString>,json,type",
      toString$0: function(_) {
        return "[Sentinel type: " + H.S(this.type) + ", kind: " + H.S(this.kind) + ", valueAsString: " + H.S(this.valueAsString) + "]";
      },
      static: {
        Sentinel_parse: [function(json) {
          var t1, t2;
          t1 = new S.Sentinel(null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.kind = t2.$index(json, "kind");
          t1.valueAsString = t2.$index(json, "valueAsString");
          return t1;
        }, "call$1", "vm_service_lib_Sentinel_parse$closure", 2, 0, 296]
      }
    },
    ScriptRef: {
      "^": "ObjRef;uri<,id,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.ScriptRef && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[ScriptRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", uri: " + H.S(this.uri) + "]";
      },
      static: {
        ScriptRef_parse: [function(json) {
          var t1, t2;
          t1 = new S.ScriptRef(null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.id = t2.$index(json, "id");
          t1.uri = t2.$index(json, "uri");
          return t1;
        }, "call$1", "vm_service_lib_ScriptRef_parse$closure", 2, 0, 297]
      }
    },
    Script: {
      "^": "Obj;uri<,library,source,tokenPosTable,id,classRef,size,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.Script && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[Script type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", uri: " + H.S(this.uri) + ", library: " + H.S(this.library) + ", source: " + H.S(this.source) + ", tokenPosTable: " + H.S(this.tokenPosTable) + "]";
      },
      static: {
        Script_parse: [function(json) {
          var t1, t2;
          t1 = new S.Script(null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.Obj$_fromJson$1(json);
          t2 = J.getInterceptor$asx(json);
          t1.uri = t2.$index(json, "uri");
          t1.library = S._createObject(t2.$index(json, "library"));
          t1.source = t2.$index(json, "source");
          t1.tokenPosTable = H.subtypeCast(S._createObject(t2.$index(json, "tokenPosTable")), "$isList", [[P.List, P.$int]], "$asList");
          return t1;
        }, "call$1", "vm_service_lib_Script_parse$closure", 2, 0, 298]
      }
    },
    SourceLocation0: {
      "^": "Response;script<,tokenPos<,endTokenPos,json,type",
      toString$0: function(_) {
        return "[SourceLocation type: " + H.S(this.type) + ", script: " + H.S(this.script) + ", tokenPos: " + H.S(this.tokenPos) + "]";
      },
      static: {
        SourceLocation_parse: [function(json) {
          var t1, t2;
          t1 = new S.SourceLocation0(null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.script = S._createObject(t2.$index(json, "script"));
          t1.tokenPos = t2.$index(json, "tokenPos");
          t1.endTokenPos = t2.$index(json, "endTokenPos");
          return t1;
        }, "call$1", "vm_service_lib_SourceLocation_parse$closure", 2, 0, 299]
      }
    },
    SourceReport: {
      "^": "Response;ranges,scripts,json,type",
      toString$0: function(_) {
        return "[SourceReport type: " + H.S(this.type) + ", ranges: " + H.S(this.ranges) + ", scripts: " + H.S(this.scripts) + "]";
      },
      static: {
        SourceReport_parse: [function(json) {
          var t1, t2;
          t1 = new S.SourceReport(null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.ranges = H.subtypeCast(S._createObject(t2.$index(json, "ranges")), "$isList", [S.SourceReportRange], "$asList");
          t1.scripts = H.subtypeCast(S._createObject(t2.$index(json, "scripts")), "$isList", [S.ScriptRef], "$asList");
          return t1;
        }, "call$1", "vm_service_lib_SourceReport_parse$closure", 2, 0, 300]
      }
    },
    SourceReportCoverage: {
      "^": "Object;hits,misses",
      toString$0: function(_) {
        return "[SourceReportCoverage hits: " + H.S(this.hits) + ", misses: " + H.S(this.misses) + "]";
      },
      static: {
        SourceReportCoverage_parse: [function(json) {
          var t1, t2, t3;
          t1 = new S.SourceReportCoverage(null, null);
          t2 = J.getInterceptor$asx(json);
          t3 = [P.$int];
          t1.hits = H.subtypeCast(S._createObject(t2.$index(json, "hits")), "$isList", t3, "$asList");
          t1.misses = H.subtypeCast(S._createObject(t2.$index(json, "misses")), "$isList", t3, "$asList");
          return t1;
        }, "call$1", "vm_service_lib_SourceReportCoverage_parse$closure", 2, 0, 301]
      }
    },
    SourceReportRange: {
      "^": "Object;scriptIndex,startPos<,endPos<,compiled,error>,coverage,possibleBreakpoints",
      toString$0: function(_) {
        return "[SourceReportRange scriptIndex: " + H.S(this.scriptIndex) + ", startPos: " + H.S(this.startPos) + ", endPos: " + H.S(this.endPos) + ", compiled: " + H.S(this.compiled) + "]";
      },
      static: {
        SourceReportRange_parse: [function(json) {
          var t1, t2;
          t1 = new S.SourceReportRange(null, null, null, null, null, null, null);
          t2 = J.getInterceptor$asx(json);
          t1.scriptIndex = t2.$index(json, "scriptIndex");
          t1.startPos = t2.$index(json, "startPos");
          t1.endPos = t2.$index(json, "endPos");
          t1.compiled = t2.$index(json, "compiled");
          t1.error = S._createObject(t2.$index(json, "error"));
          t1.coverage = S._createObject(t2.$index(json, "coverage"));
          t1.possibleBreakpoints = H.subtypeCast(S._createObject(t2.$index(json, "possibleBreakpoints")), "$isList", [P.$int], "$asList");
          return t1;
        }, "call$1", "vm_service_lib_SourceReportRange_parse$closure", 2, 0, 302]
      }
    },
    Stack: {
      "^": "Response;frames<,messages,json,type",
      toString$0: function(_) {
        return "[Stack type: " + H.S(this.type) + ", frames: " + H.S(this.frames) + ", messages: " + H.S(this.messages) + "]";
      },
      static: {
        Stack_parse: [function(json) {
          var t1, t2;
          t1 = new S.Stack(null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.frames = H.subtypeCast(S._createObject(t2.$index(json, "frames")), "$isList", [S.Frame], "$asList");
          t1.messages = H.subtypeCast(S._createObject(t2.$index(json, "messages")), "$isList", [S.Message], "$asList");
          return t1;
        }, "call$1", "vm_service_lib_Stack_parse$closure", 2, 0, 303]
      }
    },
    Success: {
      "^": "Response;json,type",
      toString$0: function(_) {
        return "[Success type: " + H.S(this.type) + "]";
      },
      static: {
        Success_parse: [function(json) {
          var t1 = new S.Success(json, null);
          t1.type = J.$index$asx(json, "type");
          return t1;
        }, "call$1", "vm_service_lib_Success_parse$closure", 2, 0, 304]
      }
    },
    TimelineEvent: {
      "^": "Object;",
      toString$0: function(_) {
        return "[TimelineEvent ]";
      },
      static: {
        TimelineEvent_parse: [function(json) {
          return new S.TimelineEvent();
        }, "call$1", "vm_service_lib_TimelineEvent_parse$closure", 2, 0, 305]
      }
    },
    TypeArgumentsRef: {
      "^": "ObjRef;name>,id,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.TypeArgumentsRef && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[TypeArgumentsRef type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", name: " + H.S(this.name) + "]";
      },
      static: {
        TypeArgumentsRef_parse: [function(json) {
          var t1, t2;
          t1 = new S.TypeArgumentsRef(null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.id = t2.$index(json, "id");
          t1.name = t2.$index(json, "name");
          return t1;
        }, "call$1", "vm_service_lib_TypeArgumentsRef_parse$closure", 2, 0, 306]
      }
    },
    TypeArguments: {
      "^": "Obj;name>,types,id,classRef,size,json,type",
      get$hashCode: function(_) {
        return J.get$hashCode$(this.id);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof S.TypeArguments && J.$eq$(this.id, other.id);
      },
      toString$0: function(_) {
        return "[TypeArguments type: " + H.S(this.type) + ", id: " + H.S(this.id) + ", name: " + H.S(this.name) + ", types: " + H.S(this.types) + "]";
      },
      static: {
        TypeArguments_parse: [function(json) {
          var t1, t2;
          t1 = new S.TypeArguments(null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.Obj$_fromJson$1(json);
          t2 = J.getInterceptor$asx(json);
          t1.name = t2.$index(json, "name");
          t1.types = H.subtypeCast(S._createObject(t2.$index(json, "types")), "$isList", [S.InstanceRef], "$asList");
          return t1;
        }, "call$1", "vm_service_lib_TypeArguments_parse$closure", 2, 0, 307]
      }
    },
    UnresolvedSourceLocation: {
      "^": "Response;script<,scriptUri,tokenPos<,line>,column<,json,type",
      toString$0: function(_) {
        return "[UnresolvedSourceLocation type: " + H.S(this.type) + "]";
      },
      static: {
        UnresolvedSourceLocation_parse: [function(json) {
          var t1, t2;
          t1 = new S.UnresolvedSourceLocation(null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.script = S._createObject(t2.$index(json, "script"));
          t1.scriptUri = t2.$index(json, "scriptUri");
          t1.tokenPos = t2.$index(json, "tokenPos");
          t1.line = t2.$index(json, "line");
          t1.column = t2.$index(json, "column");
          return t1;
        }, "call$1", "vm_service_lib_UnresolvedSourceLocation_parse$closure", 2, 0, 308]
      }
    },
    Version0: {
      "^": "Response;major<,minor<,json,type",
      toString$0: function(_) {
        return "[Version type: " + H.S(this.type) + ", major: " + H.S(this.major) + ", minor: " + H.S(this.minor) + "]";
      },
      static: {
        Version_parse: [function(json) {
          var t1, t2;
          t1 = new S.Version0(null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.major = t2.$index(json, "major");
          t1.minor = t2.$index(json, "minor");
          return t1;
        }, "call$1", "vm_service_lib_Version_parse$closure", 2, 0, 309]
      }
    },
    VMRef: {
      "^": "Response;name>,json,type",
      toString$0: function(_) {
        return "[VMRef type: " + H.S(this.type) + ", name: " + H.S(this.name) + "]";
      },
      static: {
        VMRef_parse: [function(json) {
          var t1 = new S.VMRef(null, json, null);
          t1.type = J.$index$asx(json, "type");
          t1.name = J.$index$asx(json, "name");
          return t1;
        }, "call$1", "vm_service_lib_VMRef_parse$closure", 2, 0, 310]
      }
    },
    VM: {
      "^": "Response;architectureBits,targetCPU<,hostCPU<,version>,pid,startTime,isolates<,json,type",
      toString$0: function(_) {
        return "[VM]";
      },
      static: {
        VM_parse: [function(json) {
          var t1, t2;
          t1 = new S.VM(null, null, null, null, null, null, null, json, null);
          t1.type = J.$index$asx(json, "type");
          t2 = J.getInterceptor$asx(json);
          t1.architectureBits = t2.$index(json, "architectureBits");
          t1.targetCPU = t2.$index(json, "targetCPU");
          t1.hostCPU = t2.$index(json, "hostCPU");
          t1.version = t2.$index(json, "version");
          t1.pid = t2.$index(json, "pid");
          t1.startTime = t2.$index(json, "startTime");
          t1.isolates = H.subtypeCast(S._createObject(t2.$index(json, "isolates")), "$isList", [S.IsolateRef], "$asList");
          return t1;
        }, "call$1", "vm_service_lib_VM_parse$closure", 2, 0, 311]
      }
    }
  }], ["", "package:yaml/src/equality.dart",, U, {
    "^": "",
    deepEquals: [function(obj1, obj2) {
      return new U._DeepEquals([], []).equals$2(obj1, obj2);
    }, "call$2", "equality__deepEquals$closure", 4, 0, 312, 128, 114],
    deepHashCode: [function(obj) {
      return new U.deepHashCode__deepHashCode([]).call$1(obj);
    }, "call$1", "equality__deepHashCode$closure", 2, 0, 208, 5],
    _DeepEquals: {
      "^": "Object;_parents1,_parents2",
      equals$2: function(obj1, obj2) {
        var t1, t2, t3, t4, i, t5, t6, loop1, loop2;
        if (obj1 instanceof Z.YamlScalar)
          obj1 = J.get$value$x(obj1);
        if (obj2 instanceof Z.YamlScalar)
          obj2 = J.get$value$x(obj2);
        for (t1 = this._parents1, t2 = t1.length, t3 = this._parents2, t4 = t3.length, i = 0; i < t2; ++i) {
          t5 = obj1;
          t6 = t1[i];
          loop1 = t5 == null ? t6 == null : t5 === t6;
          t6 = obj2;
          if (i >= t4)
            return H.ioore(t3, i);
          t5 = t3[i];
          loop2 = t6 == null ? t5 == null : t6 === t5;
          if (loop1 && loop2)
            return true;
          if (loop1 || loop2)
            return false;
        }
        t1.push(obj1);
        t3.push(obj2);
        try {
          if (!!J.getInterceptor(obj1).$isList && !!J.getInterceptor(obj2).$isList) {
            t2 = this._listEquals$2(obj1, obj2);
            return t2;
          } else if (!!J.getInterceptor(obj1).$isMap && !!J.getInterceptor(obj2).$isMap) {
            t2 = this._mapEquals$2(obj1, obj2);
            return t2;
          } else {
            t2 = obj1;
            if (typeof t2 === "number") {
              t2 = obj2;
              t2 = typeof t2 === "number";
            } else
              t2 = false;
            if (t2) {
              t2 = this._numEquals$2(obj1, obj2);
              return t2;
            } else {
              t2 = J.$eq$(obj1, obj2);
              return t2;
            }
          }
        } finally {
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          if (0 >= t3.length)
            return H.ioore(t3, -1);
          t3.pop();
        }
      },
      _listEquals$2: function(list1, list2) {
        var t1, t2, i, t3;
        t1 = J.getInterceptor$asx(list1);
        t2 = J.getInterceptor$asx(list2);
        if (!J.$eq$(t1.get$length(list1), t2.get$length(list2)))
          return false;
        i = 0;
        while (true) {
          t3 = t1.get$length(list1);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          if (this.equals$2(t1.$index(list1, i), t2.$index(list2, i)) !== true)
            return false;
          ++i;
        }
        return true;
      },
      _mapEquals$2: function(map1, map2) {
        var t1, t2, t3, key;
        t1 = J.getInterceptor$asx(map1);
        t2 = J.getInterceptor$asx(map2);
        if (!J.$eq$(t1.get$length(map1), t2.get$length(map2)))
          return false;
        for (t3 = J.get$iterator$ax(t1.get$keys(map1)); t3.moveNext$0();) {
          key = t3.get$current();
          if (t2.containsKey$1(map2, key) !== true)
            return false;
          if (this.equals$2(t1.$index(map1, key), t2.$index(map2, key)) !== true)
            return false;
        }
        return true;
      },
      _numEquals$2: function(n1, n2) {
        if (isNaN(n1) && isNaN(n2))
          return true;
        return n1 === n2;
      }
    },
    deepHashCode__deepHashCode: {
      "^": "Closure:0;parents",
      call$1: [function(value) {
        var equality, t1, t2, t3;
        t1 = this.parents;
        if (C.JSArray_methods.any$1(t1, new U.deepHashCode__deepHashCode_closure(value)))
          return -1;
        t1.push(value);
        try {
          t2 = J.getInterceptor(value);
          if (!!t2.$isMap) {
            equality = C.UnorderedIterableEquality_DefaultEquality;
            t3 = J.hash$1$x(equality, J.map$1$ax(t2.get$keys(value), this));
            t2 = J.hash$1$x(equality, J.map$1$ax(t2.get$values(value), this));
            return t3 ^ t2;
          } else if (!!t2.$isIterable) {
            t2 = C.IterableEquality_DefaultEquality.hash$1(0, t2.map$1(value, U.equality__deepHashCode$closure()));
            return t2;
          } else if (!!t2.$isYamlScalar) {
            t2 = J.get$hashCode$(value.value);
            return t2;
          } else {
            t2 = t2.get$hashCode(value);
            return t2;
          }
        } finally {
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
        }
      }, null, null, 2, 0, null, 7, "call"]
    },
    deepHashCode__deepHashCode_closure: {
      "^": "Closure:0;value",
      call$1: function($parent) {
        var t1 = this.value;
        return $parent == null ? t1 == null : $parent === t1;
      }
    }
  }], ["", "package:yaml/src/event.dart",, X, {
    "^": "",
    Event0: {
      "^": "Object;type>,span>",
      toString$0: function(_) {
        return this.type.name;
      }
    },
    DocumentStartEvent: {
      "^": "Object;span>,versionDirective<,tagDirectives<,isImplicit<",
      get$type: function(_) {
        return C.EventType_DOCUMENT_START;
      },
      toString$0: function(_) {
        return "DOCUMENT_START";
      }
    },
    DocumentEndEvent: {
      "^": "Object;span>,isImplicit<",
      get$type: function(_) {
        return C.EventType_DOCUMENT_END;
      },
      toString$0: function(_) {
        return "DOCUMENT_END";
      }
    },
    AliasEvent: {
      "^": "Object;span>,name>",
      get$type: function(_) {
        return C.EventType_ALIAS;
      },
      toString$0: function(_) {
        return "ALIAS " + this.name;
      }
    },
    _ValueEvent: {
      "^": "Object;",
      toString$0: ["super$_ValueEvent$toString", function(_) {
        var t1 = this.get$type(this).name;
        if (this.get$anchor() != null)
          t1 += " &" + H.S(this.get$anchor());
        if (this.get$tag(this) != null)
          t1 += " " + H.S(this.get$tag(this));
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }]
    },
    ScalarEvent: {
      "^": "_ValueEvent;span>,anchor<,tag>,value>,style>",
      get$type: function(_) {
        return C.EventType_SCALAR;
      },
      toString$0: function(_) {
        return this.super$_ValueEvent$toString(0) + ' "' + this.value + '"';
      }
    },
    SequenceStartEvent: {
      "^": "_ValueEvent;span>,anchor<,tag>,style>",
      get$type: function(_) {
        return C.EventType_SEQUENCE_START;
      }
    },
    MappingStartEvent: {
      "^": "_ValueEvent;span>,anchor<,tag>,style>",
      get$type: function(_) {
        return C.EventType_MAPPING_START;
      }
    },
    EventType: {
      "^": "Object;name>",
      toString$0: function(_) {
        return this.name;
      }
    }
  }], ["", "package:yaml/src/loader.dart",, A, {
    "^": "",
    Loader: {
      "^": "Object;_parser,_aliases,_span",
      get$span: function(_) {
        return this._span;
      },
      load$0: function(_) {
        var t1, $event, contents, lastEvent, t2, t3, t4, t5;
        t1 = this._parser;
        if (J.$eq$(t1._parser$_state, C._State_END))
          return;
        $event = t1.parse$0();
        if ($event.get$type($event) === C.EventType_STREAM_END) {
          this._span = J.expand$1$ax(this._span, $event.get$span($event));
          return;
        }
        contents = this._loadNode$1(t1.parse$0());
        lastEvent = H.interceptedTypeCast(t1.parse$0(), "$isDocumentEndEvent");
        t1 = J.expand$1$ax($event.get$span($event), lastEvent.span);
        t2 = $event.get$versionDirective();
        t3 = $event.get$tagDirectives();
        t4 = $event.get$isImplicit();
        t5 = lastEvent.isImplicit;
        this._span = J.expand$1$ax(this._span, t1);
        this._aliases.clear$0(0);
        return new L.YamlDocument(contents, t1, t2, new P.UnmodifiableListView(t3, [null]), t4, t5);
      },
      _loadNode$1: function(firstEvent) {
        var node;
        switch (firstEvent.get$type(firstEvent)) {
          case C.EventType_ALIAS:
            return this._loadAlias$1(firstEvent);
          case C.EventType_SCALAR:
            if (J.$eq$(firstEvent.get$tag(firstEvent), "!")) {
              node = new Z.YamlScalar(firstEvent.get$value(firstEvent), firstEvent.get$style(firstEvent), null);
              node._yaml_node$_span = firstEvent.get$span(firstEvent);
            } else if (firstEvent.get$tag(firstEvent) != null)
              node = this._parseByTag$1(firstEvent);
            else {
              node = this._tryParseScalar$1(firstEvent);
              if (node == null) {
                node = new Z.YamlScalar(firstEvent.get$value(firstEvent), firstEvent.get$style(firstEvent), null);
                node._yaml_node$_span = firstEvent.get$span(firstEvent);
              }
            }
            this._registerAnchor$2(firstEvent.get$anchor(), node);
            return node;
          case C.EventType_SEQUENCE_START:
            return this._loadSequence$1(firstEvent);
          case C.EventType_MAPPING_START:
            return this._loadMapping$1(firstEvent);
          default:
            throw H.wrapException("Unreachable");
        }
      },
      _registerAnchor$2: function(anchor, node) {
        if (anchor == null)
          return;
        this._aliases.$indexSet(0, anchor, node);
      },
      _loadAlias$1: function($event) {
        var alias = this._aliases.$index(0, $event.get$name($event));
        if (alias != null)
          return alias;
        throw H.wrapException(Z.YamlException$("Undefined alias.", $event.get$span($event)));
      },
      _loadSequence$1: function(firstEvent) {
        var t1, children, t2, node, $event;
        if (!J.$eq$(firstEvent.get$tag(firstEvent), "!") && firstEvent.get$tag(firstEvent) != null && !J.$eq$(firstEvent.get$tag(firstEvent), "tag:yaml.org,2002:seq"))
          throw H.wrapException(Z.YamlException$("Invalid tag for sequence.", firstEvent.get$span(firstEvent)));
        t1 = Z.YamlNode;
        children = H.setRuntimeTypeInfo([], [t1]);
        t2 = firstEvent.get$span(firstEvent);
        node = new Z.YamlList(new P.UnmodifiableListView(children, [t1]), firstEvent.get$style(firstEvent), null);
        node._yaml_node$_span = t2;
        this._registerAnchor$2(firstEvent.get$anchor(), node);
        t2 = this._parser;
        $event = t2.parse$0();
        for (; $event.get$type($event) !== C.EventType_SEQUENCE_END;) {
          children.push(this._loadNode$1($event));
          $event = t2.parse$0();
        }
        node._yaml_node$_span = J.expand$1$ax(firstEvent.get$span(firstEvent), $event.get$span($event));
        return node;
      },
      _loadMapping$1: function(firstEvent) {
        var children, t1, node, $event, key, value;
        if (!J.$eq$(firstEvent.get$tag(firstEvent), "!") && firstEvent.get$tag(firstEvent) != null && !J.$eq$(firstEvent.get$tag(firstEvent), "tag:yaml.org,2002:map"))
          throw H.wrapException(Z.YamlException$("Invalid tag for mapping.", firstEvent.get$span(firstEvent)));
        children = P.HashMap_HashMap(U.equality__deepEquals$closure(), U.equality__deepHashCode$closure(), null, null, null);
        t1 = firstEvent.get$span(firstEvent);
        node = new Z.YamlMap(new P.UnmodifiableMapView(children, [null, Z.YamlNode]), firstEvent.get$style(firstEvent), null);
        node._yaml_node$_span = t1;
        this._registerAnchor$2(firstEvent.get$anchor(), node);
        t1 = this._parser;
        $event = t1.parse$0();
        for (; $event.get$type($event) !== C.EventType_MAPPING_END;) {
          key = this._loadNode$1($event);
          value = this._loadNode$1(t1.parse$0());
          if (children.containsKey$1(0, key))
            throw H.wrapException(Z.YamlException$("Duplicate mapping key.", J.get$span$x(key)));
          children.$indexSet(0, key, value);
          $event = t1.parse$0();
        }
        node._yaml_node$_span = J.expand$1$ax(firstEvent.get$span(firstEvent), $event.get$span($event));
        return node;
      },
      _parseByTag$1: function(scalar) {
        var result, t1;
        switch (scalar.get$tag(scalar)) {
          case "tag:yaml.org,2002:null":
            result = this._parseNull$1(scalar);
            if (result != null)
              return result;
            throw H.wrapException(Z.YamlException$("Invalid null scalar.", scalar.get$span(scalar)));
          case "tag:yaml.org,2002:bool":
            result = this._parseBool$1(scalar);
            if (result != null)
              return result;
            throw H.wrapException(Z.YamlException$("Invalid bool scalar.", scalar.get$span(scalar)));
          case "tag:yaml.org,2002:int":
            result = this._parseNumber$2$allowFloat(scalar, false);
            if (result != null)
              return result;
            throw H.wrapException(Z.YamlException$("Invalid int scalar.", scalar.get$span(scalar)));
          case "tag:yaml.org,2002:float":
            result = this._parseNumber$2$allowInt(scalar, false);
            if (result != null)
              return result;
            throw H.wrapException(Z.YamlException$("Invalid float scalar.", scalar.get$span(scalar)));
          case "tag:yaml.org,2002:str":
            t1 = new Z.YamlScalar(scalar.get$value(scalar), scalar.get$style(scalar), null);
            t1._yaml_node$_span = scalar.get$span(scalar);
            return t1;
          default:
            throw H.wrapException(Z.YamlException$("Undefined tag: " + H.S(scalar.get$tag(scalar)) + ".", scalar.get$span(scalar)));
        }
      },
      _tryParseScalar$1: function(scalar) {
        var $length, t1, firstChar;
        $length = scalar.get$value(scalar).length;
        if ($length === 0) {
          t1 = new Z.YamlScalar(null, scalar.get$style(scalar), null);
          t1._yaml_node$_span = scalar.get$span(scalar);
          return t1;
        }
        firstChar = C.JSString_methods.codeUnitAt$1(scalar.get$value(scalar), 0);
        switch (firstChar) {
          case 46:
          case 43:
          case 45:
            return this._parseNumber$1(scalar);
          case 110:
          case 78:
            return $length === 4 ? this._parseNull$1(scalar) : null;
          case 116:
          case 84:
            return $length === 4 ? this._parseBool$1(scalar) : null;
          case 102:
          case 70:
            return $length === 5 ? this._parseBool$1(scalar) : null;
          case 126:
            if ($length === 1) {
              t1 = new Z.YamlScalar(null, scalar.get$style(scalar), null);
              t1._yaml_node$_span = scalar.get$span(scalar);
            } else
              t1 = null;
            return t1;
          default:
            if (firstChar >= 48 && firstChar <= 57)
              return this._parseNumber$1(scalar);
            return;
        }
      },
      _parseNull$1: function(scalar) {
        var t1;
        switch (scalar.get$value(scalar)) {
          case "":
          case "null":
          case "Null":
          case "NULL":
          case "~":
            t1 = new Z.YamlScalar(null, scalar.get$style(scalar), null);
            t1._yaml_node$_span = scalar.get$span(scalar);
            return t1;
          default:
            return;
        }
      },
      _parseBool$1: function(scalar) {
        var t1;
        switch (scalar.get$value(scalar)) {
          case "true":
          case "True":
          case "TRUE":
            t1 = new Z.YamlScalar(true, scalar.get$style(scalar), null);
            t1._yaml_node$_span = scalar.get$span(scalar);
            return t1;
          case "false":
          case "False":
          case "FALSE":
            t1 = new Z.YamlScalar(false, scalar.get$style(scalar), null);
            t1._yaml_node$_span = scalar.get$span(scalar);
            return t1;
          default:
            return;
        }
      },
      _parseNumber$3$allowFloat$allowInt: function(scalar, allowFloat, allowInt) {
        var value, t1;
        value = this._parseNumberValue$3$allowFloat$allowInt(scalar.get$value(scalar), allowFloat, allowInt);
        if (value == null)
          t1 = null;
        else {
          t1 = new Z.YamlScalar(value, scalar.get$style(scalar), null);
          t1._yaml_node$_span = scalar.get$span(scalar);
        }
        return t1;
      },
      _parseNumber$1: function(scalar) {
        return this._parseNumber$3$allowFloat$allowInt(scalar, true, true);
      },
      _parseNumber$2$allowFloat: function(scalar, allowFloat) {
        return this._parseNumber$3$allowFloat$allowInt(scalar, allowFloat, true);
      },
      _parseNumber$2$allowInt: function(scalar, allowInt) {
        return this._parseNumber$3$allowFloat$allowInt(scalar, true, allowInt);
      },
      _parseNumberValue$3$allowFloat$allowInt: function(contents, allowFloat, allowInt) {
        var firstChar, $length, value, secondChar, t1, result, t2;
        firstChar = C.JSString_methods.codeUnitAt$1(contents, 0);
        $length = contents.length;
        if (allowInt && $length === 1) {
          value = firstChar - 48;
          return value >= 0 && value <= 9 ? value : null;
        }
        secondChar = C.JSString_methods.codeUnitAt$1(contents, 1);
        if (allowInt && firstChar === 48) {
          if (secondChar === 120)
            return H.Primitives_parseInt(contents, null, new A.Loader__parseNumberValue_closure());
          if (secondChar === 111)
            return H.Primitives_parseInt(C.JSString_methods.substring$1(contents, 2), 8, new A.Loader__parseNumberValue_closure0());
        }
        if (!(firstChar >= 48 && firstChar <= 57))
          t1 = (firstChar === 43 || firstChar === 45) && secondChar >= 48 && secondChar <= 57;
        else
          t1 = true;
        if (t1) {
          result = allowInt ? H.Primitives_parseInt(contents, 10, new A.Loader__parseNumberValue_closure1()) : null;
          return allowFloat ? result == null ? H.Primitives_parseDouble(contents, new A.Loader__parseNumberValue_closure2()) : result : result;
        }
        if (!allowFloat)
          return;
        t1 = firstChar === 46;
        if (!(t1 && secondChar >= 48 && secondChar <= 57))
          t2 = (firstChar === 45 || firstChar === 43) && secondChar === 46;
        else
          t2 = true;
        if (t2) {
          if ($length === 5)
            switch (contents) {
              case "+.inf":
              case "+.Inf":
              case "+.INF":
                return 1 / 0;
              case "-.inf":
              case "-.Inf":
              case "-.INF":
                return -1 / 0;
            }
          return H.Primitives_parseDouble(contents, new A.Loader__parseNumberValue_closure3());
        }
        if ($length === 4 && t1)
          switch (contents) {
            case ".inf":
            case ".Inf":
            case ".INF":
              return 1 / 0;
            case ".nan":
            case ".NaN":
            case ".NAN":
              return 0 / 0;
          }
        return;
      }
    },
    Loader__parseNumberValue_closure: {
      "^": "Closure:0;",
      call$1: function(_) {
        return;
      }
    },
    Loader__parseNumberValue_closure0: {
      "^": "Closure:0;",
      call$1: function(_) {
        return;
      }
    },
    Loader__parseNumberValue_closure1: {
      "^": "Closure:0;",
      call$1: function(_) {
        return;
      }
    },
    Loader__parseNumberValue_closure2: {
      "^": "Closure:0;",
      call$1: function(_) {
        return;
      }
    },
    Loader__parseNumberValue_closure3: {
      "^": "Closure:0;",
      call$1: function(_) {
        return;
      }
    }
  }], ["", "package:yaml/src/parser.dart",, G, {
    "^": "",
    Parser: {
      "^": "Object;_scanner,_states,_parser$_state,_tagDirectives",
      parse$0: function() {
        var $event, error, exception, t1;
        try {
          if (J.$eq$(this._parser$_state, C._State_END))
            throw H.wrapException(new P.StateError("No more events."));
          $event = this._stateMachine$0();
          return $event;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (t1 instanceof E.StringScannerException) {
            error = t1;
            throw H.wrapException(Z.YamlException$(J.get$message$x(error), J.get$span$x(error)));
          } else
            throw exception;
        }
      },
      _stateMachine$0: function() {
        var token, t1, t2;
        switch (this._parser$_state) {
          case C._State_STREAM_START:
            token = this._scanner.scan$0();
            this._parser$_state = C._State_DOCUMENT_START;
            return new X.Event0(C.EventType_STREAM_START, J.get$span$x(token));
          case C._State_DOCUMENT_START:
            return this._parseDocumentStart$0();
          case C._State_DOCUMENT_CONTENT:
            return this._parseDocumentContent$0();
          case C._State_DOCUMENT_END:
            return this._parseDocumentEnd$0();
          case C._State_BLOCK_NODE:
            return this._parseNode$1$block(true);
          case C._State_p8I:
            return this._parseNode$2$block$indentlessSequence(true, true);
          case C._State_FLOW_NODE:
            return this._parseNode$0();
          case C._State_BLOCK_SEQUENCE_FIRST_ENTRY:
            this._scanner.scan$0();
            return this._parseBlockSequenceEntry$0();
          case C._State_BLOCK_SEQUENCE_ENTRY:
            return this._parseBlockSequenceEntry$0();
          case C._State_INDENTLESS_SEQUENCE_ENTRY:
            return this._parseIndentlessSequenceEntry$0();
          case C._State_BLOCK_MAPPING_FIRST_KEY:
            this._scanner.scan$0();
            return this._parseBlockMappingKey$0();
          case C._State_BLOCK_MAPPING_KEY:
            return this._parseBlockMappingKey$0();
          case C._State_BLOCK_MAPPING_VALUE:
            return this._parseBlockMappingValue$0();
          case C._State_FLOW_SEQUENCE_FIRST_ENTRY:
            return this._parseFlowSequenceEntry$1$first(true);
          case C._State_FLOW_SEQUENCE_ENTRY:
            return this._parseFlowSequenceEntry$0();
          case C._State_oBX:
            return this._parseFlowSequenceEntryMappingKey$0();
          case C._State_hJ6:
            return this._parseFlowSequenceEntryMappingValue$0();
          case C._State_h3t:
            this._parser$_state = C._State_FLOW_SEQUENCE_ENTRY;
            t1 = J.get$start$x(J.get$span$x(this._scanner.peek$0()));
            t2 = t1.offset;
            return new X.Event0(C.EventType_MAPPING_END, Y._FileSpan$(t1.file, t2, t2));
          case C._State_FLOW_MAPPING_FIRST_KEY:
            return this._parseFlowMappingKey$1$first(true);
          case C._State_FLOW_MAPPING_KEY:
            return this._parseFlowMappingKey$0();
          case C._State_FLOW_MAPPING_VALUE:
            return this._parseFlowMappingValue$0();
          case C._State_FLOW_MAPPING_EMPTY_VALUE:
            return this._parseFlowMappingValue$1$empty(true);
          default:
            throw H.wrapException("Unreachable");
        }
      },
      _parseDocumentStart$0: function() {
        var t1, token, t2, start, pair;
        t1 = this._scanner;
        token = t1.peek$0();
        for (; t2 = J.getInterceptor$x(token), J.$eq$(t2.get$type(token), C.TokenType_DOCUMENT_END);) {
          t1.scan$0();
          token = t1.peek$0();
        }
        if (!J.$eq$(t2.get$type(token), C.TokenType_VERSION_DIRECTIVE) && !J.$eq$(t2.get$type(token), C.TokenType_TAG_DIRECTIVE) && !J.$eq$(t2.get$type(token), C.TokenType_DOCUMENT_START) && !J.$eq$(t2.get$type(token), C.TokenType_STREAM_END)) {
          this._processDirectives$0();
          this._states.push(C._State_DOCUMENT_END);
          this._parser$_state = C._State_BLOCK_NODE;
          t1 = J.get$start$x(t2.get$span(token));
          t2 = t1.offset;
          t2 = Y._FileSpan$(t1.file, t2, t2);
          return new X.DocumentStartEvent(t2, null, [], true);
        }
        if (J.$eq$(t2.get$type(token), C.TokenType_STREAM_END)) {
          this._parser$_state = C._State_END;
          t1.scan$0();
          return new X.Event0(C.EventType_STREAM_END, t2.get$span(token));
        }
        start = t2.get$span(token);
        pair = this._processDirectives$0();
        token = t1.peek$0();
        t2 = J.getInterceptor$x(token);
        if (!J.$eq$(t2.get$type(token), C.TokenType_DOCUMENT_START))
          throw H.wrapException(Z.YamlException$("Expected document start.", t2.get$span(token)));
        this._states.push(C._State_DOCUMENT_END);
        this._parser$_state = C._State_DOCUMENT_CONTENT;
        t1.scan$0();
        t1 = J.expand$1$ax(start, t2.get$span(token));
        return new X.DocumentStartEvent(t1, pair.first, pair.last, false);
      },
      _parseDocumentContent$0: function() {
        var token, t1, t2;
        token = this._scanner.peek$0();
        t1 = J.getInterceptor$x(token);
        switch (t1.get$type(token)) {
          case C.TokenType_VERSION_DIRECTIVE:
          case C.TokenType_TAG_DIRECTIVE:
          case C.TokenType_DOCUMENT_START:
          case C.TokenType_DOCUMENT_END:
          case C.TokenType_STREAM_END:
            t2 = this._states;
            if (0 >= t2.length)
              return H.ioore(t2, -1);
            this._parser$_state = t2.pop();
            t1 = J.get$start$x(t1.get$span(token));
            t2 = t1.offset;
            return new X.ScalarEvent(Y._FileSpan$(t1.file, t2, t2), null, null, "", C.ScalarStyle_PLAIN);
          default:
            return this._parseNode$1$block(true);
        }
      },
      _parseDocumentEnd$0: function() {
        var t1, token, t2;
        this._tagDirectives.clear$0(0);
        this._parser$_state = C._State_DOCUMENT_START;
        t1 = this._scanner;
        token = t1.peek$0();
        t2 = J.getInterceptor$x(token);
        if (J.$eq$(t2.get$type(token), C.TokenType_DOCUMENT_END)) {
          t1.scan$0();
          return new X.DocumentEndEvent(t2.get$span(token), false);
        } else {
          t1 = J.get$start$x(t2.get$span(token));
          t2 = t1.offset;
          return new X.DocumentEndEvent(Y._FileSpan$(t1.file, t2, t2), true);
        }
      },
      _parseNode$2$block$indentlessSequence: function(block, indentlessSequence) {
        var t1, t2, token, t3, t4, t5, tag, tagDirective;
        t1 = {};
        t2 = this._scanner;
        token = t2.peek$0();
        t3 = J.getInterceptor(token);
        if (!!t3.$isAliasToken) {
          t2.scan$0();
          t1 = this._states;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          this._parser$_state = t1.pop();
          return new X.AliasEvent(token.span, token.name);
        }
        t1.anchor = null;
        t1.tagToken = null;
        t4 = J.get$start$x(t3.get$span(token));
        t5 = t4.offset;
        t1.span = Y._FileSpan$(t4.file, t5, t5);
        t5 = new G.Parser__parseNode_parseAnchor(t1, this);
        t4 = new G.Parser__parseNode_parseTag(t1, this);
        if (!!t3.$isAnchorToken) {
          token = t5.call$1(token);
          if (token instanceof L.TagToken)
            token = t4.call$1(token);
        } else if (!!t3.$isTagToken) {
          token = t4.call$1(token);
          if (token instanceof L.AnchorToken)
            token = t5.call$1(token);
        }
        t3 = t1.tagToken;
        if (t3 != null) {
          t4 = t3.handle;
          if (t4 == null)
            tag = t3.suffix;
          else {
            tagDirective = this._tagDirectives.$index(0, t4);
            if (tagDirective == null)
              throw H.wrapException(Z.YamlException$("Undefined tag handle.", t1.tagToken.span));
            tag = J.$add$ns(tagDirective.get$prefix(), t1.tagToken.suffix);
          }
        } else
          tag = null;
        if (indentlessSequence && J.$eq$(J.get$type$x(token), C.TokenType_BLOCK_ENTRY)) {
          this._parser$_state = C._State_INDENTLESS_SEQUENCE_ENTRY;
          return new X.SequenceStartEvent(t1.span.expand$1(0, J.get$span$x(token)), t1.anchor, tag, C.CollectionStyle_BLOCK);
        }
        t3 = J.getInterceptor(token);
        if (!!t3.$isScalarToken) {
          if (tag == null && token.style !== C.ScalarStyle_PLAIN)
            tag = "!";
          t3 = this._states;
          if (0 >= t3.length)
            return H.ioore(t3, -1);
          this._parser$_state = t3.pop();
          t2.scan$0();
          t2 = t1.span.expand$1(0, token.span);
          t3 = token.value;
          t4 = token.style;
          return new X.ScalarEvent(t2, t1.anchor, tag, t3, t4);
        }
        if (J.$eq$(t3.get$type(token), C.TokenType_FLOW_SEQUENCE_START)) {
          this._parser$_state = C._State_FLOW_SEQUENCE_FIRST_ENTRY;
          return new X.SequenceStartEvent(t1.span.expand$1(0, t3.get$span(token)), t1.anchor, tag, C.CollectionStyle_FLOW);
        }
        if (J.$eq$(t3.get$type(token), C.TokenType_FLOW_MAPPING_START)) {
          this._parser$_state = C._State_FLOW_MAPPING_FIRST_KEY;
          return new X.MappingStartEvent(t1.span.expand$1(0, t3.get$span(token)), t1.anchor, tag, C.CollectionStyle_FLOW);
        }
        if (block && J.$eq$(t3.get$type(token), C.TokenType_BLOCK_SEQUENCE_START)) {
          this._parser$_state = C._State_BLOCK_SEQUENCE_FIRST_ENTRY;
          return new X.SequenceStartEvent(t1.span.expand$1(0, t3.get$span(token)), t1.anchor, tag, C.CollectionStyle_BLOCK);
        }
        if (block && J.$eq$(t3.get$type(token), C.TokenType_BLOCK_MAPPING_START)) {
          this._parser$_state = C._State_BLOCK_MAPPING_FIRST_KEY;
          return new X.MappingStartEvent(t1.span.expand$1(0, t3.get$span(token)), t1.anchor, tag, C.CollectionStyle_BLOCK);
        }
        if (t1.anchor != null || tag != null) {
          t2 = this._states;
          if (0 >= t2.length)
            return H.ioore(t2, -1);
          this._parser$_state = t2.pop();
          return new X.ScalarEvent(t1.span, t1.anchor, tag, "", C.ScalarStyle_PLAIN);
        }
        throw H.wrapException(Z.YamlException$("Expected node content.", t1.span));
      },
      _parseNode$1$block: function(block) {
        return this._parseNode$2$block$indentlessSequence(block, false);
      },
      _parseNode$0: function() {
        return this._parseNode$2$block$indentlessSequence(false, false);
      },
      _parseBlockSequenceEntry$0: function() {
        var t1, token, t2;
        t1 = this._scanner;
        token = t1.peek$0();
        t2 = J.getInterceptor$x(token);
        if (J.$eq$(t2.get$type(token), C.TokenType_BLOCK_ENTRY)) {
          t1.scan$0();
          token = t1.peek$0();
          t1 = J.getInterceptor$x(token);
          if (J.$eq$(t1.get$type(token), C.TokenType_BLOCK_ENTRY) || J.$eq$(t1.get$type(token), C.TokenType_BLOCK_END)) {
            this._parser$_state = C._State_BLOCK_SEQUENCE_ENTRY;
            t1 = J.get$end$x(t1.get$span(token));
            t2 = t1.offset;
            return new X.ScalarEvent(Y._FileSpan$(t1.file, t2, t2), null, null, "", C.ScalarStyle_PLAIN);
          } else {
            this._states.push(C._State_BLOCK_SEQUENCE_ENTRY);
            return this._parseNode$1$block(true);
          }
        }
        if (J.$eq$(t2.get$type(token), C.TokenType_BLOCK_END)) {
          t1.scan$0();
          t1 = this._states;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          this._parser$_state = t1.pop();
          return new X.Event0(C.EventType_SEQUENCE_END, t2.get$span(token));
        }
        throw H.wrapException(Z.YamlException$("While parsing a block collection, expected '-'.", J.get$start$x(t2.get$span(token)).pointSpan$0()));
      },
      _parseIndentlessSequenceEntry$0: function() {
        var t1, token, t2, start;
        t1 = this._scanner;
        token = t1.peek$0();
        t2 = J.getInterceptor$x(token);
        if (!J.$eq$(t2.get$type(token), C.TokenType_BLOCK_ENTRY)) {
          t1 = this._states;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          this._parser$_state = t1.pop();
          t2 = J.get$start$x(t2.get$span(token));
          t1 = t2.offset;
          return new X.Event0(C.EventType_SEQUENCE_END, Y._FileSpan$(t2.file, t1, t1));
        }
        start = J.get$start$x(t2.get$span(token));
        t1.scan$0();
        token = t1.peek$0();
        t1 = J.getInterceptor$x(token);
        if (J.$eq$(t1.get$type(token), C.TokenType_BLOCK_ENTRY) || J.$eq$(t1.get$type(token), C.TokenType_KEY) || J.$eq$(t1.get$type(token), C.TokenType_VALUE) || J.$eq$(t1.get$type(token), C.TokenType_BLOCK_END)) {
          this._parser$_state = C._State_INDENTLESS_SEQUENCE_ENTRY;
          t1 = start.offset;
          return new X.ScalarEvent(Y._FileSpan$(start.file, t1, t1), null, null, "", C.ScalarStyle_PLAIN);
        } else {
          this._states.push(C._State_INDENTLESS_SEQUENCE_ENTRY);
          return this._parseNode$1$block(true);
        }
      },
      _parseBlockMappingKey$0: function() {
        var t1, token, t2, start;
        t1 = this._scanner;
        token = t1.peek$0();
        t2 = J.getInterceptor$x(token);
        if (J.$eq$(t2.get$type(token), C.TokenType_KEY)) {
          start = J.get$start$x(t2.get$span(token));
          t1.scan$0();
          token = t1.peek$0();
          t1 = J.getInterceptor$x(token);
          if (J.$eq$(t1.get$type(token), C.TokenType_KEY) || J.$eq$(t1.get$type(token), C.TokenType_VALUE) || J.$eq$(t1.get$type(token), C.TokenType_BLOCK_END)) {
            this._parser$_state = C._State_BLOCK_MAPPING_VALUE;
            t1 = start.offset;
            return new X.ScalarEvent(Y._FileSpan$(start.file, t1, t1), null, null, "", C.ScalarStyle_PLAIN);
          } else {
            this._states.push(C._State_BLOCK_MAPPING_VALUE);
            return this._parseNode$2$block$indentlessSequence(true, true);
          }
        }
        if (J.$eq$(t2.get$type(token), C.TokenType_VALUE)) {
          this._parser$_state = C._State_BLOCK_MAPPING_VALUE;
          t1 = J.get$start$x(t2.get$span(token));
          t2 = t1.offset;
          return new X.ScalarEvent(Y._FileSpan$(t1.file, t2, t2), null, null, "", C.ScalarStyle_PLAIN);
        }
        if (J.$eq$(t2.get$type(token), C.TokenType_BLOCK_END)) {
          t1.scan$0();
          t1 = this._states;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          this._parser$_state = t1.pop();
          return new X.Event0(C.EventType_MAPPING_END, t2.get$span(token));
        }
        throw H.wrapException(Z.YamlException$("Expected a key while parsing a block mapping.", J.get$start$x(t2.get$span(token)).pointSpan$0()));
      },
      _parseBlockMappingValue$0: function() {
        var t1, token, t2, start;
        t1 = this._scanner;
        token = t1.peek$0();
        t2 = J.getInterceptor$x(token);
        if (!J.$eq$(t2.get$type(token), C.TokenType_VALUE)) {
          this._parser$_state = C._State_BLOCK_MAPPING_KEY;
          t1 = J.get$start$x(t2.get$span(token));
          t2 = t1.offset;
          return new X.ScalarEvent(Y._FileSpan$(t1.file, t2, t2), null, null, "", C.ScalarStyle_PLAIN);
        }
        start = J.get$start$x(t2.get$span(token));
        t1.scan$0();
        token = t1.peek$0();
        t1 = J.getInterceptor$x(token);
        if (J.$eq$(t1.get$type(token), C.TokenType_KEY) || J.$eq$(t1.get$type(token), C.TokenType_VALUE) || J.$eq$(t1.get$type(token), C.TokenType_BLOCK_END)) {
          this._parser$_state = C._State_BLOCK_MAPPING_KEY;
          t1 = start.offset;
          return new X.ScalarEvent(Y._FileSpan$(start.file, t1, t1), null, null, "", C.ScalarStyle_PLAIN);
        } else {
          this._states.push(C._State_BLOCK_MAPPING_KEY);
          return this._parseNode$2$block$indentlessSequence(true, true);
        }
      },
      _parseFlowSequenceEntry$1$first: function(first) {
        var t1, token, t2;
        if (first)
          this._scanner.scan$0();
        t1 = this._scanner;
        token = t1.peek$0();
        t2 = J.getInterceptor$x(token);
        if (!J.$eq$(t2.get$type(token), C.TokenType_FLOW_SEQUENCE_END)) {
          if (!first) {
            if (!J.$eq$(t2.get$type(token), C.TokenType_FLOW_ENTRY))
              throw H.wrapException(Z.YamlException$("While parsing a flow sequence, expected ',' or ']'.", J.get$start$x(t2.get$span(token)).pointSpan$0()));
            t1.scan$0();
            token = t1.peek$0();
          }
          t2 = J.getInterceptor$x(token);
          if (J.$eq$(t2.get$type(token), C.TokenType_KEY)) {
            this._parser$_state = C._State_oBX;
            t1.scan$0();
            return new X.MappingStartEvent(t2.get$span(token), null, null, C.CollectionStyle_FLOW);
          } else if (!J.$eq$(t2.get$type(token), C.TokenType_FLOW_SEQUENCE_END)) {
            this._states.push(C._State_FLOW_SEQUENCE_ENTRY);
            return this._parseNode$0();
          }
        }
        t1.scan$0();
        t1 = this._states;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        this._parser$_state = t1.pop();
        return new X.Event0(C.EventType_SEQUENCE_END, J.get$span$x(token));
      },
      _parseFlowSequenceEntry$0: function() {
        return this._parseFlowSequenceEntry$1$first(false);
      },
      _parseFlowSequenceEntryMappingKey$0: function() {
        var token, t1, start;
        token = this._scanner.peek$0();
        t1 = J.getInterceptor$x(token);
        if (J.$eq$(t1.get$type(token), C.TokenType_VALUE) || J.$eq$(t1.get$type(token), C.TokenType_FLOW_ENTRY) || J.$eq$(t1.get$type(token), C.TokenType_FLOW_SEQUENCE_END)) {
          start = J.get$start$x(t1.get$span(token));
          this._parser$_state = C._State_hJ6;
          t1 = start.offset;
          return new X.ScalarEvent(Y._FileSpan$(start.file, t1, t1), null, null, "", C.ScalarStyle_PLAIN);
        } else {
          this._states.push(C._State_hJ6);
          return this._parseNode$0();
        }
      },
      _parseFlowSequenceEntryMappingValue$0: function() {
        var t1, token, t2;
        t1 = this._scanner;
        token = t1.peek$0();
        if (J.$eq$(J.get$type$x(token), C.TokenType_VALUE)) {
          t1.scan$0();
          token = t1.peek$0();
          t1 = J.getInterceptor$x(token);
          if (!J.$eq$(t1.get$type(token), C.TokenType_FLOW_ENTRY) && !J.$eq$(t1.get$type(token), C.TokenType_FLOW_SEQUENCE_END)) {
            this._states.push(C._State_h3t);
            return this._parseNode$0();
          }
        }
        this._parser$_state = C._State_h3t;
        t1 = J.get$start$x(J.get$span$x(token));
        t2 = t1.offset;
        return new X.ScalarEvent(Y._FileSpan$(t1.file, t2, t2), null, null, "", C.ScalarStyle_PLAIN);
      },
      _parseFlowMappingKey$1$first: function(first) {
        var t1, token, t2;
        if (first)
          this._scanner.scan$0();
        t1 = this._scanner;
        token = t1.peek$0();
        t2 = J.getInterceptor$x(token);
        if (!J.$eq$(t2.get$type(token), C.TokenType_FLOW_MAPPING_END)) {
          if (!first) {
            if (!J.$eq$(t2.get$type(token), C.TokenType_FLOW_ENTRY))
              throw H.wrapException(Z.YamlException$("While parsing a flow mapping, expected ',' or '}'.", J.get$start$x(t2.get$span(token)).pointSpan$0()));
            t1.scan$0();
            token = t1.peek$0();
          }
          t2 = J.getInterceptor$x(token);
          if (J.$eq$(t2.get$type(token), C.TokenType_KEY)) {
            t1.scan$0();
            token = t1.peek$0();
            t1 = J.getInterceptor$x(token);
            if (!J.$eq$(t1.get$type(token), C.TokenType_VALUE) && !J.$eq$(t1.get$type(token), C.TokenType_FLOW_ENTRY) && !J.$eq$(t1.get$type(token), C.TokenType_FLOW_MAPPING_END)) {
              this._states.push(C._State_FLOW_MAPPING_VALUE);
              return this._parseNode$0();
            } else {
              this._parser$_state = C._State_FLOW_MAPPING_VALUE;
              t1 = J.get$start$x(t1.get$span(token));
              t2 = t1.offset;
              return new X.ScalarEvent(Y._FileSpan$(t1.file, t2, t2), null, null, "", C.ScalarStyle_PLAIN);
            }
          } else if (!J.$eq$(t2.get$type(token), C.TokenType_FLOW_MAPPING_END)) {
            this._states.push(C._State_FLOW_MAPPING_EMPTY_VALUE);
            return this._parseNode$0();
          }
        }
        t1.scan$0();
        t1 = this._states;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        this._parser$_state = t1.pop();
        return new X.Event0(C.EventType_MAPPING_END, J.get$span$x(token));
      },
      _parseFlowMappingKey$0: function() {
        return this._parseFlowMappingKey$1$first(false);
      },
      _parseFlowMappingValue$1$empty: function(empty) {
        var t1, token, t2;
        t1 = this._scanner;
        token = t1.peek$0();
        if (empty) {
          this._parser$_state = C._State_FLOW_MAPPING_KEY;
          t1 = J.get$start$x(J.get$span$x(token));
          t2 = t1.offset;
          return new X.ScalarEvent(Y._FileSpan$(t1.file, t2, t2), null, null, "", C.ScalarStyle_PLAIN);
        }
        if (J.$eq$(J.get$type$x(token), C.TokenType_VALUE)) {
          t1.scan$0();
          token = t1.peek$0();
          t1 = J.getInterceptor$x(token);
          if (!J.$eq$(t1.get$type(token), C.TokenType_FLOW_ENTRY) && !J.$eq$(t1.get$type(token), C.TokenType_FLOW_MAPPING_END)) {
            this._states.push(C._State_FLOW_MAPPING_KEY);
            return this._parseNode$0();
          }
        }
        this._parser$_state = C._State_FLOW_MAPPING_KEY;
        t1 = J.get$start$x(J.get$span$x(token));
        t2 = t1.offset;
        return new X.ScalarEvent(Y._FileSpan$(t1.file, t2, t2), null, null, "", C.ScalarStyle_PLAIN);
      },
      _parseFlowMappingValue$0: function() {
        return this._parseFlowMappingValue$1$empty(false);
      },
      _processDirectives$0: function() {
        var t1, token, tagDirectives, versionDirective, t2, t3, t4, tagDirective;
        t1 = this._scanner;
        token = t1.peek$0();
        tagDirectives = H.setRuntimeTypeInfo([], [L.TagDirective]);
        versionDirective = null;
        while (true) {
          t2 = J.getInterceptor$x(token);
          if (!(J.$eq$(t2.get$type(token), C.TokenType_VERSION_DIRECTIVE) || J.$eq$(t2.get$type(token), C.TokenType_TAG_DIRECTIVE)))
            break;
          if (!!t2.$isVersionDirectiveToken) {
            if (versionDirective != null)
              throw H.wrapException(Z.YamlException$("Duplicate %YAML directive.", token.span));
            t2 = token.major;
            if (!J.$eq$(t2, 1) || J.$eq$(token.minor, 0))
              throw H.wrapException(Z.YamlException$("Incompatible YAML document. This parser only supports YAML 1.1 and 1.2.", token.span));
            else {
              t3 = token.minor;
              if (J.$gt$n(t3, 2)) {
                t4 = token.span;
                $.$get$yamlWarningCallback().call$2("Warning: this parser only supports YAML 1.1 and 1.2.", t4);
              }
            }
            versionDirective = new L.VersionDirective(t2, t3);
          } else if (!!t2.$isTagDirectiveToken) {
            tagDirective = new L.TagDirective(token.handle, token.prefix);
            this._appendTagDirective$2(tagDirective, token.span);
            tagDirectives.push(tagDirective);
          }
          t1.scan$0();
          token = t1.peek$0();
        }
        t1 = J.get$start$x(t2.get$span(token));
        t3 = t1.offset;
        this._appendTagDirective$3$allowDuplicates(new L.TagDirective("!", "!"), Y._FileSpan$(t1.file, t3, t3), true);
        t2 = J.get$start$x(t2.get$span(token));
        t3 = t2.offset;
        this._appendTagDirective$3$allowDuplicates(new L.TagDirective("!!", "tag:yaml.org,2002:"), Y._FileSpan$(t2.file, t3, t3), true);
        return new B.Pair(versionDirective, tagDirectives, [null, null]);
      },
      _appendTagDirective$3$allowDuplicates: function(newDirective, span, allowDuplicates) {
        var t1, t2;
        t1 = this._tagDirectives;
        t2 = newDirective.handle;
        if (t1.containsKey$1(0, t2)) {
          if (allowDuplicates)
            return;
          throw H.wrapException(Z.YamlException$("Duplicate %TAG directive.", span));
        }
        t1.$indexSet(0, t2, newDirective);
      },
      _appendTagDirective$2: function(newDirective, span) {
        return this._appendTagDirective$3$allowDuplicates(newDirective, span, false);
      }
    },
    Parser__parseNode_parseAnchor: {
      "^": "Closure:0;_box_0,$this",
      call$1: function(token) {
        var t1 = this._box_0;
        t1.anchor = token.name;
        t1.span = t1.span.expand$1(0, token.span);
        t1 = this.$this._scanner;
        t1.scan$0();
        return t1.peek$0();
      }
    },
    Parser__parseNode_parseTag: {
      "^": "Closure:0;_box_0,$this",
      call$1: function(token) {
        var t1 = this._box_0;
        t1.tagToken = token;
        t1.span = t1.span.expand$1(0, token.span);
        t1 = this.$this._scanner;
        t1.scan$0();
        return t1.peek$0();
      }
    },
    _State: {
      "^": "Object;name>",
      toString$0: function(_) {
        return this.name;
      }
    }
  }], ["", "package:yaml/src/scanner.dart",, O, {
    "^": "",
    Scanner: {
      "^": "Object;_scanner$_scanner,_streamStartProduced,_streamEndProduced,_tokens,_tokensParsed,_tokenAvailable,_indents,_simpleKeyAllowed,_simpleKeys",
      get$_isTagChar: function() {
        var $char, t1;
        $char = this._scanner$_scanner.peekChar$0();
        if ($char == null)
          return false;
        switch ($char) {
          case 45:
          case 59:
          case 47:
          case 58:
          case 64:
          case 38:
          case 61:
          case 43:
          case 36:
          case 46:
          case 126:
          case 63:
          case 42:
          case 39:
          case 40:
          case 41:
          case 37:
            return true;
          default:
            if (!($char >= 48 && $char <= 57))
              if (!($char >= 97 && $char <= 122))
                t1 = $char >= 65 && $char <= 90;
              else
                t1 = true;
            else
              t1 = true;
            return t1;
        }
      },
      get$_isAnchorChar: function() {
        if (!this.get$_isNonSpace())
          return false;
        switch (this._scanner$_scanner.peekChar$0()) {
          case 44:
          case 91:
          case 93:
          case 123:
          case 125:
            return false;
          default:
            return true;
        }
      },
      get$_isDigit: function() {
        var $char = this._scanner$_scanner.peekChar$0();
        return $char != null && $char >= 48 && $char <= 57;
      },
      get$_isHex: function() {
        var $char, t1;
        $char = this._scanner$_scanner.peekChar$0();
        if ($char == null)
          return false;
        if (!($char >= 48 && $char <= 57))
          if (!($char >= 97 && $char <= 102))
            t1 = $char >= 65 && $char <= 70;
          else
            t1 = true;
        else
          t1 = true;
        return t1;
      },
      get$_isNonBreak: function() {
        var $char, t1;
        $char = this._scanner$_scanner.peekChar$0();
        if ($char == null)
          return false;
        switch ($char) {
          case 10:
          case 13:
          case 65279:
            return false;
          case 9:
          case 133:
            return true;
          default:
            if (!($char >= 32 && $char <= 126))
              if (!($char >= 160 && $char <= 55295))
                if (!($char >= 57344 && $char <= 65533))
                  t1 = $char >= 65536 && $char <= 1114111;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
            return t1;
        }
      },
      get$_isNonSpace: function() {
        var $char, t1;
        $char = this._scanner$_scanner.peekChar$0();
        if ($char == null)
          return false;
        switch ($char) {
          case 10:
          case 13:
          case 65279:
          case 32:
            return false;
          case 133:
            return true;
          default:
            if (!($char >= 32 && $char <= 126))
              if (!($char >= 160 && $char <= 55295))
                if (!($char >= 57344 && $char <= 65533))
                  t1 = $char >= 65536 && $char <= 1114111;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
            return t1;
        }
      },
      scan$0: function() {
        var t1, t2, t3, t4, result;
        if (this._streamEndProduced)
          throw H.wrapException(new P.StateError("Out of tokens."));
        if (!this._tokenAvailable)
          this._fetchMoreTokens$0();
        t1 = this._tokens;
        t2 = t1._queue_list$_head;
        if (t2 === t1._queue_list$_tail)
          H.throwExpression(new P.StateError("No element"));
        t3 = t1._queue_list$_table;
        t4 = t3.length;
        if (t2 >= t4)
          return H.ioore(t3, t2);
        result = t3[t2];
        t3[t2] = null;
        t1._queue_list$_head = (t2 + 1 & t4 - 1) >>> 0;
        this._tokenAvailable = false;
        ++this._tokensParsed;
        t1 = J.getInterceptor(result);
        this._streamEndProduced = !!t1.$isToken && t1.get$type(result) === C.TokenType_STREAM_END;
        return result;
      },
      peek$0: function() {
        if (this._streamEndProduced)
          return;
        if (!this._tokenAvailable)
          this._fetchMoreTokens$0();
        var t1 = this._tokens;
        return t1.get$first(t1);
      },
      _fetchMoreTokens$0: function() {
        var t1, t2;
        for (t1 = this._tokens, t2 = this._simpleKeys; true;) {
          if (!t1.get$isEmpty(t1)) {
            this._staleSimpleKeys$0();
            if (t1.get$length(t1) === 0)
              H.throwExpression(H.IterableElementError_noElement());
            if (J.$eq$(J.get$type$x(t1.$index(0, t1.get$length(t1) - 1)), C.TokenType_STREAM_END))
              break;
            if (!C.JSArray_methods.any$1(t2, new O.Scanner__fetchMoreTokens_closure(this)))
              break;
          }
          this._fetchNextToken$0();
        }
        this._tokenAvailable = true;
      },
      _fetchNextToken$0: function() {
        var t1, t2, directive, endPosition, suffix, handle, token;
        if (!this._streamStartProduced) {
          this._streamStartProduced = true;
          t1 = this._scanner$_scanner;
          t1 = Y.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
          t2 = t1.offset;
          this._tokens._queue_list$_add$1(0, new L.Token(C.TokenType_STREAM_START, Y._FileSpan$(t1.file, t2, t2)));
          return;
        }
        this._scanToNextToken$0();
        this._staleSimpleKeys$0();
        t1 = this._scanner$_scanner;
        this._unrollIndent$1(t1._column);
        if (J.$eq$(t1._string_scanner$_position, J.get$length$asx(t1.string))) {
          this._unrollIndent$1(-1);
          this._removeSimpleKey$0();
          this._simpleKeyAllowed = false;
          t1 = Y.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
          t2 = t1.offset;
          this._tokens._queue_list$_add$1(0, new L.Token(C.TokenType_STREAM_END, Y._FileSpan$(t1.file, t2, t2)));
          return;
        }
        if (t1._column === 0) {
          if (t1.peekChar$0() === 37) {
            this._unrollIndent$1(-1);
            this._removeSimpleKey$0();
            this._simpleKeyAllowed = false;
            directive = this._scanDirective$0();
            if (directive != null)
              this._tokens._queue_list$_add$1(0, directive);
            return;
          }
          if (this._isBlankOrEndAt$1(3)) {
            if (t1.matches$1(0, "---")) {
              this._fetchDocumentIndicator$1(C.TokenType_DOCUMENT_START);
              return;
            }
            if (t1.matches$1(0, "...")) {
              this._fetchDocumentIndicator$1(C.TokenType_DOCUMENT_END);
              return;
            }
          }
        }
        switch (t1.peekChar$0()) {
          case 91:
            this._saveSimpleKey$0();
            this._simpleKeys.push(null);
            this._simpleKeyAllowed = true;
            t2 = t1._string_scanner$_position;
            t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
            endPosition = t1._string_scanner$_position;
            this._tokens._queue_list$_add$1(0, new L.Token(C.TokenType_FLOW_SEQUENCE_START, Y._FileSpan$(t1._sourceFile, t2, endPosition)));
            return;
          case 123:
            this._saveSimpleKey$0();
            this._simpleKeys.push(null);
            this._simpleKeyAllowed = true;
            t2 = t1._string_scanner$_position;
            t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
            endPosition = t1._string_scanner$_position;
            this._tokens._queue_list$_add$1(0, new L.Token(C.TokenType_FLOW_MAPPING_START, Y._FileSpan$(t1._sourceFile, t2, endPosition)));
            return;
          case 93:
            this._removeSimpleKey$0();
            this._decreaseFlowLevel$0();
            this._simpleKeyAllowed = false;
            t2 = t1._string_scanner$_position;
            t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
            endPosition = t1._string_scanner$_position;
            this._tokens._queue_list$_add$1(0, new L.Token(C.TokenType_FLOW_SEQUENCE_END, Y._FileSpan$(t1._sourceFile, t2, endPosition)));
            return;
          case 125:
            this._removeSimpleKey$0();
            this._decreaseFlowLevel$0();
            this._simpleKeyAllowed = false;
            t2 = t1._string_scanner$_position;
            t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
            endPosition = t1._string_scanner$_position;
            this._tokens._queue_list$_add$1(0, new L.Token(C.TokenType_FLOW_MAPPING_END, Y._FileSpan$(t1._sourceFile, t2, endPosition)));
            return;
          case 44:
            this._removeSimpleKey$0();
            this._simpleKeyAllowed = true;
            t2 = t1._string_scanner$_position;
            t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
            endPosition = t1._string_scanner$_position;
            this._tokens._queue_list$_add$1(0, new L.Token(C.TokenType_FLOW_ENTRY, Y._FileSpan$(t1._sourceFile, t2, endPosition)));
            return;
          case 42:
            this._saveSimpleKey$0();
            this._simpleKeyAllowed = false;
            this._tokens._queue_list$_add$1(0, this._scanAnchor$1$anchor(false));
            return;
          case 38:
            this._saveSimpleKey$0();
            this._simpleKeyAllowed = false;
            this._tokens._queue_list$_add$1(0, this._scanAnchor$1$anchor(true));
            return;
          case 33:
            this._saveSimpleKey$0();
            this._simpleKeyAllowed = false;
            t2 = t1._string_scanner$_position;
            if (t1.peekChar$1(1) === 60) {
              t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
              t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
              suffix = this._scanTagUri$0();
              t1.expect$1(">");
              handle = "";
            } else {
              handle = this._scanTagHandle$0();
              if (handle.length > 1 && C.JSString_methods.startsWith$1(handle, "!") && C.JSString_methods.endsWith$1(handle, "!"))
                suffix = this._scanTagUri$1$flowSeparators(false);
              else {
                suffix = this._scanTagUri$2$flowSeparators$head(false, handle);
                if (suffix.length === 0) {
                  handle = null;
                  suffix = "!";
                } else
                  handle = "!";
              }
            }
            endPosition = t1._string_scanner$_position;
            this._tokens._queue_list$_add$1(0, new L.TagToken(Y._FileSpan$(t1._sourceFile, t2, endPosition), handle, suffix));
            return;
          case 39:
            this._saveSimpleKey$0();
            this._simpleKeyAllowed = false;
            this._tokens._queue_list$_add$1(0, this._scanFlowScalar$1$singleQuote(true));
            return;
          case 34:
            this._saveSimpleKey$0();
            this._simpleKeyAllowed = false;
            this._tokens._queue_list$_add$1(0, this._scanFlowScalar$1$singleQuote(false));
            return;
          case 124:
            if (this._simpleKeys.length !== 1)
              this._invalidScalarCharacter$0();
            this._removeSimpleKey$0();
            this._simpleKeyAllowed = true;
            this._tokens._queue_list$_add$1(0, this._scanBlockScalar$1$literal(true));
            return;
          case 62:
            if (this._simpleKeys.length !== 1)
              this._invalidScalarCharacter$0();
            this._removeSimpleKey$0();
            this._simpleKeyAllowed = true;
            this._tokens._queue_list$_add$1(0, this._scanBlockScalar$1$literal(false));
            return;
          case 37:
          case 64:
          case 96:
            this._invalidScalarCharacter$0();
            return;
          case 45:
            if (this._isPlainCharAt$1(1)) {
              this._saveSimpleKey$0();
              this._simpleKeyAllowed = false;
              this._tokens._queue_list$_add$1(0, this._scanPlainScalar$0());
            } else {
              if (this._simpleKeys.length === 1) {
                if (!this._simpleKeyAllowed)
                  H.throwExpression(Z.YamlException$("Block sequence entries are not allowed here.", t1.get$emptySpan()));
                this._rollIndent$3(t1._column, C.TokenType_BLOCK_SEQUENCE_START, Y.FileLocation$_(t1._sourceFile, t1._string_scanner$_position));
              }
              this._removeSimpleKey$0();
              this._simpleKeyAllowed = true;
              t2 = t1._string_scanner$_position;
              t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
              endPosition = t1._string_scanner$_position;
              this._tokens._queue_list$_add$1(0, new L.Token(C.TokenType_BLOCK_ENTRY, Y._FileSpan$(t1._sourceFile, t2, endPosition)));
            }
            return;
          case 63:
            if (this._isPlainCharAt$1(1)) {
              this._saveSimpleKey$0();
              this._simpleKeyAllowed = false;
              this._tokens._queue_list$_add$1(0, this._scanPlainScalar$0());
            } else {
              t2 = this._simpleKeys;
              if (t2.length === 1) {
                if (!this._simpleKeyAllowed)
                  H.throwExpression(Z.YamlException$("Mapping keys are not allowed here.", t1.get$emptySpan()));
                this._rollIndent$3(t1._column, C.TokenType_BLOCK_MAPPING_START, Y.FileLocation$_(t1._sourceFile, t1._string_scanner$_position));
              }
              this._simpleKeyAllowed = t2.length === 1;
              t2 = t1._string_scanner$_position;
              t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
              endPosition = t1._string_scanner$_position;
              this._tokens._queue_list$_add$1(0, new L.Token(C.TokenType_KEY, Y._FileSpan$(t1._sourceFile, t2, endPosition)));
            }
            return;
          case 58:
            if (this._simpleKeys.length !== 1) {
              t1 = this._tokens;
              t1 = !t1.get$isEmpty(t1);
            } else
              t1 = false;
            if (t1) {
              t1 = this._tokens;
              if (t1.get$length(t1) === 0)
                H.throwExpression(H.IterableElementError_noElement());
              token = t1.$index(0, t1.get$length(t1) - 1);
              t1 = J.getInterceptor$x(token);
              if (!J.$eq$(t1.get$type(token), C.TokenType_FLOW_SEQUENCE_END))
                if (!J.$eq$(t1.get$type(token), C.TokenType_FLOW_MAPPING_END))
                  if (J.$eq$(t1.get$type(token), C.TokenType_SCALAR)) {
                    t1 = H.interceptedTypeCast(token, "$isScalarToken").style;
                    t1 = t1 === C.ScalarStyle_SINGLE_QUOTED || t1 === C.ScalarStyle_DOUBLE_QUOTED;
                  } else
                    t1 = false;
                else
                  t1 = true;
              else
                t1 = true;
              if (t1) {
                this._fetchValue$0();
                return;
              }
            }
            if (this._isPlainCharAt$1(1)) {
              this._saveSimpleKey$0();
              this._simpleKeyAllowed = false;
              this._tokens._queue_list$_add$1(0, this._scanPlainScalar$0());
            } else
              this._fetchValue$0();
            return;
          default:
            if (!this.get$_isNonBreak())
              this._invalidScalarCharacter$0();
            this._saveSimpleKey$0();
            this._simpleKeyAllowed = false;
            this._tokens._queue_list$_add$1(0, this._scanPlainScalar$0());
            return;
        }
      },
      _invalidScalarCharacter$0: function() {
        return this._scanner$_scanner.error$2$length(0, "Unexpected character.", 1);
      },
      _staleSimpleKeys$0: function() {
        var t1, t2, t3, t4, t5, i, key;
        for (t1 = this._simpleKeys, t2 = t1.length, t3 = this._scanner$_scanner, t4 = t3._line, t5 = t2 !== 1, i = 0; i < t2; ++i) {
          key = t1[i];
          if (key == null)
            continue;
          if (t5)
            continue;
          if (key.line === t4)
            continue;
          if (key.required)
            throw H.wrapException(Z.YamlException$("Expected ':'.", t3.get$emptySpan()));
          t1[i] = null;
        }
      },
      _saveSimpleKey$0: function() {
        var t1, required, t2, t3, t4, t5, t6, t7;
        t1 = this._simpleKeys;
        required = t1.length === 1 && C.JSArray_methods.get$last(this._indents) === this._scanner$_scanner._column;
        if (!this._simpleKeyAllowed)
          return;
        this._removeSimpleKey$0();
        t2 = t1.length - 1;
        t3 = this._tokensParsed;
        t4 = this._tokens;
        t4 = t4.get$length(t4);
        t5 = this._scanner$_scanner;
        t6 = t5._line;
        t7 = t5._column;
        t5 = Y.FileLocation$_(t5._sourceFile, t5._string_scanner$_position);
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2] = new O._SimpleKey(t3 + t4, t5, t6, t7, required);
      },
      _removeSimpleKey$0: function() {
        var t1, key, t2, t3;
        t1 = this._simpleKeys;
        key = C.JSArray_methods.get$last(t1);
        if (key != null && key.required)
          throw H.wrapException(Z.YamlException$("Could not find expected ':' for simple key.", key.location.pointSpan$0()));
        t2 = t1.length;
        t3 = t2 - 1;
        if (t3 < 0)
          return H.ioore(t1, t3);
        t1[t3] = null;
      },
      _decreaseFlowLevel$0: function() {
        var t1, t2;
        t1 = this._simpleKeys;
        t2 = t1.length;
        if (t2 === 1)
          return;
        if (0 >= t2)
          return H.ioore(t1, -1);
        t1.pop();
      },
      _rollIndent$4$tokenNumber: function(column, type, $location, tokenNumber) {
        var t1, token;
        if (this._simpleKeys.length !== 1)
          return;
        t1 = this._indents;
        if (C.JSArray_methods.get$last(t1) !== -1 && C.JSArray_methods.get$last(t1) >= column)
          return;
        t1.push(column);
        t1 = $location.offset;
        token = new L.Token(type, Y._FileSpan$($location.file, t1, t1));
        t1 = this._tokens;
        if (tokenNumber == null)
          t1._queue_list$_add$1(0, token);
        else
          t1.insert$2(t1, tokenNumber - this._tokensParsed, token);
      },
      _rollIndent$3: function(column, type, $location) {
        return this._rollIndent$4$tokenNumber(column, type, $location, null);
      },
      _unrollIndent$1: function(column) {
        var t1, t2, t3, t4, t5, t6;
        if (this._simpleKeys.length !== 1)
          return;
        for (t1 = this._indents, t2 = this._tokens, t3 = this._scanner$_scanner, t4 = t3._sourceFile; C.JSArray_methods.get$last(t1) > column;) {
          t5 = Y.FileLocation$_(t4, t3._string_scanner$_position);
          t6 = t5.offset;
          t2._queue_list$_add$1(0, new L.Token(C.TokenType_BLOCK_END, Y._FileSpan$(t5.file, t6, t6)));
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
        }
      },
      _fetchDocumentIndicator$1: function(type) {
        var t1, t2, t3, t4;
        this._unrollIndent$1(-1);
        this._removeSimpleKey$0();
        this._simpleKeyAllowed = false;
        t1 = this._scanner$_scanner;
        t2 = t1._string_scanner$_position;
        t3 = t1._line;
        t4 = t1._column;
        t1.readChar$0();
        t1.readChar$0();
        t1.readChar$0();
        this._tokens._queue_list$_add$1(0, new L.Token(type, t1.spanFrom$1(new D._EagerSpanScannerState(t1, t2, t3, t4))));
      },
      _fetchValue$0: function() {
        var t1, simpleKey, t2, t3, t4, t5, t6;
        t1 = this._simpleKeys;
        simpleKey = C.JSArray_methods.get$last(t1);
        if (simpleKey != null) {
          t2 = this._tokens;
          t3 = simpleKey.tokenNumber;
          t4 = this._tokensParsed;
          t5 = simpleKey.location;
          t6 = t5.offset;
          t2.insert$2(t2, t3 - t4, new L.Token(C.TokenType_KEY, Y._FileSpan$(t5.file, t6, t6)));
          this._rollIndent$4$tokenNumber(simpleKey.column, C.TokenType_BLOCK_MAPPING_START, t5, t3);
          t3 = t1.length;
          t5 = t3 - 1;
          if (t5 < 0)
            return H.ioore(t1, t5);
          t1[t5] = null;
          this._simpleKeyAllowed = false;
        } else if (t1.length === 1) {
          if (!this._simpleKeyAllowed)
            throw H.wrapException(Z.YamlException$("Mapping values are not allowed here. Did you miss a colon earlier?", this._scanner$_scanner.get$emptySpan()));
          t1 = this._scanner$_scanner;
          this._rollIndent$3(t1._column, C.TokenType_BLOCK_MAPPING_START, Y.FileLocation$_(t1._sourceFile, t1._string_scanner$_position));
          this._simpleKeyAllowed = true;
        } else if (this._simpleKeyAllowed) {
          this._simpleKeyAllowed = false;
          this._addCharToken$1(C.TokenType_KEY);
        }
        this._addCharToken$1(C.TokenType_VALUE);
      },
      _addCharToken$1: function(type) {
        var t1, t2, t3, t4;
        t1 = this._scanner$_scanner;
        t2 = t1._string_scanner$_position;
        t3 = t1._line;
        t4 = t1._column;
        t1.readChar$0();
        this._tokens._queue_list$_add$1(0, new L.Token(type, t1.spanFrom$1(new D._EagerSpanScannerState(t1, t2, t3, t4))));
      },
      _scanToNextToken$0: function() {
        var t1, t2, afterLineBreak, t3, t4, $char;
        for (t1 = this._simpleKeys, t2 = this._scanner$_scanner, afterLineBreak = false; true; afterLineBreak = true) {
          if (t2._column === 0)
            t2.scan$1("\ufeff");
          t3 = !afterLineBreak;
          while (true) {
            if (t2.peekChar$0() !== 32)
              t4 = (t1.length !== 1 || t3) && t2.peekChar$0() === 9;
            else
              t4 = true;
            if (!t4)
              break;
            t2._adjustLineAndColumn$1(t2.super$StringScanner$readChar());
          }
          if (t2.peekChar$0() === 9)
            t2.error$2$length(0, "Tab characters are not allowed as indentation.", 1);
          this._skipComment$0();
          $char = t2.peekChar$1(0);
          if ($char === 13 || $char === 10) {
            this._skipLine$0();
            if (t1.length === 1)
              this._simpleKeyAllowed = true;
          } else
            break;
        }
      },
      _scanDirective$0: function() {
        var t1, start, $name, major, minor, token, handle, prefix, t2, t3, $char, t4;
        t1 = this._scanner$_scanner;
        start = new D._EagerSpanScannerState(t1, t1._string_scanner$_position, t1._line, t1._column);
        t1.readChar$0();
        $name = this._scanDirectiveName$0();
        if ($name === "YAML") {
          this._skipBlanks$0();
          major = this._scanVersionDirectiveNumber$0();
          t1.expect$1(".");
          minor = this._scanVersionDirectiveNumber$0();
          token = new L.VersionDirectiveToken(t1.spanFrom$1(start), major, minor);
        } else if ($name === "TAG") {
          this._skipBlanks$0();
          handle = this._scanTagHandle$1$directive(true);
          if (!this._isBlankAt$1(0))
            H.throwExpression(Z.YamlException$("Expected whitespace.", t1.get$emptySpan()));
          this._skipBlanks$0();
          prefix = this._scanTagUri$0();
          if (!this._isBlankOrEndAt$1(0))
            H.throwExpression(Z.YamlException$("Expected whitespace.", t1.get$emptySpan()));
          token = new L.TagDirectiveToken(t1.spanFrom$1(start), handle, prefix);
        } else {
          t2 = t1.spanFrom$1(start);
          $.$get$yamlWarningCallback().call$2("Warning: unknown directive.", t2);
          t2 = t1.string;
          t3 = J.getInterceptor$asx(t2);
          while (true) {
            if (!J.$eq$(t1._string_scanner$_position, t3.get$length(t2))) {
              $char = t1.peekChar$1(0);
              t4 = $char === 13 || $char === 10;
            } else
              t4 = true;
            if (!!t4)
              break;
            t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
          }
          return;
        }
        this._skipBlanks$0();
        this._skipComment$0();
        if (!(J.$eq$(t1._string_scanner$_position, J.get$length$asx(t1.string)) || this._isBreakAt$1(0)))
          throw H.wrapException(Z.YamlException$("Expected comment or line break after directive.", t1.spanFrom$1(start)));
        this._skipLine$0();
        return token;
      },
      _scanDirectiveName$0: function() {
        var t1, start, $name;
        t1 = this._scanner$_scanner;
        start = t1._string_scanner$_position;
        for (; this.get$_isNonSpace();)
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        $name = t1.substring$1(0, start);
        if ($name.length === 0)
          throw H.wrapException(Z.YamlException$("Expected directive name.", t1.get$emptySpan()));
        else if (!this._isBlankOrEndAt$1(0))
          throw H.wrapException(Z.YamlException$("Unexpected character in directive name.", t1.get$emptySpan()));
        return $name;
      },
      _scanVersionDirectiveNumber$0: function() {
        var t1, start, $char, number;
        t1 = this._scanner$_scanner;
        start = t1._string_scanner$_position;
        while (true) {
          $char = t1.peekChar$0();
          if (!($char != null && $char >= 48 && $char <= 57))
            break;
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        }
        number = t1.substring$1(0, start);
        if (number.length === 0)
          throw H.wrapException(Z.YamlException$("Expected version number.", t1.get$emptySpan()));
        return H.Primitives_parseInt(number, null, null);
      },
      _scanAnchor$1$anchor: function(anchor) {
        var t1, start, startPosition, $name, next, t2;
        t1 = this._scanner$_scanner;
        start = new D._EagerSpanScannerState(t1, t1._string_scanner$_position, t1._line, t1._column);
        t1.readChar$0();
        startPosition = t1._string_scanner$_position;
        for (; this.get$_isAnchorChar();)
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        $name = t1.substring$1(0, startPosition);
        next = t1.peekChar$0();
        if ($name.length !== 0)
          t2 = !this._isBlankOrEndAt$1(0) && next !== 63 && next !== 58 && next !== 44 && next !== 93 && next !== 125 && next !== 37 && next !== 64 && next !== 96;
        else
          t2 = true;
        if (t2)
          throw H.wrapException(Z.YamlException$("Expected alphanumeric character.", t1.get$emptySpan()));
        if (anchor)
          return new L.AnchorToken(t1.spanFrom$1(start), $name);
        else
          return new L.AliasToken(t1.spanFrom$1(start), $name);
      },
      _scanTagHandle$1$directive: function(directive) {
        var t1, buffer, start, t2;
        t1 = this._scanner$_scanner;
        t1.expect$1("!");
        buffer = new P.StringBuffer("!");
        start = t1._string_scanner$_position;
        for (; this.get$_isTagChar();)
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        t2 = buffer._contents += t1.substring$1(0, start);
        if (t1.peekChar$0() === 33) {
          t1 = t2 + H.Primitives_stringFromCharCode(t1.readChar$0());
          buffer._contents = t1;
        } else {
          if (directive && (t2.charCodeAt(0) == 0 ? t2 : t2) !== "!")
            t1.expect$1("!");
          t1 = t2;
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      _scanTagHandle$0: function() {
        return this._scanTagHandle$1$directive(false);
      },
      _scanTagUri$2$flowSeparators$head: function(flowSeparators, head) {
        var t1, start, $char, t2;
        if ((head == null ? 0 : head.length) > 1)
          J.substring$1$s(head, 1);
        t1 = this._scanner$_scanner;
        start = t1._string_scanner$_position;
        $char = t1.peekChar$0();
        while (true) {
          if (!this.get$_isTagChar())
            if (flowSeparators)
              t2 = $char === 44 || $char === 91 || $char === 93;
            else
              t2 = false;
          else
            t2 = true;
          if (!t2)
            break;
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
          $char = t1.peekChar$0();
        }
        t1 = t1.substring$1(0, start);
        return P._Uri__uriDecode(t1, 0, t1.length, C.Utf8Codec_false, false);
      },
      _scanTagUri$0: function() {
        return this._scanTagUri$2$flowSeparators$head(true, null);
      },
      _scanTagUri$1$flowSeparators: function(flowSeparators) {
        return this._scanTagUri$2$flowSeparators$head(flowSeparators, null);
      },
      _scanBlockScalar$1$literal: function(literal) {
        var t1, start, $char, t2, chomping, increment, t3, t4, indent, pair, trailingBreaks, buffer, end, leadingBreak, leadingBlank, t5, t6, trailingBlank, startPosition;
        t1 = this._scanner$_scanner;
        start = new D._EagerSpanScannerState(t1, t1._string_scanner$_position, t1._line, t1._column);
        t1.readChar$0();
        $char = t1.peekChar$0();
        t2 = $char === 43;
        if (t2 || $char === 45) {
          chomping = t2 ? C._Chomping_KEEP : C._Chomping_STRIP;
          t1.readChar$0();
          if (this.get$_isDigit()) {
            if (t1.peekChar$0() === 48)
              throw H.wrapException(Z.YamlException$("0 may not be used as an indentation indicator.", t1.spanFrom$1(start)));
            increment = t1.readChar$0() - 48;
          } else
            increment = 0;
        } else if (this.get$_isDigit()) {
          if (t1.peekChar$0() === 48)
            throw H.wrapException(Z.YamlException$("0 may not be used as an indentation indicator.", t1.spanFrom$1(start)));
          increment = t1.readChar$0() - 48;
          $char = t1.peekChar$0();
          t2 = $char === 43;
          if (t2 || $char === 45) {
            chomping = t2 ? C._Chomping_KEEP : C._Chomping_STRIP;
            t1.readChar$0();
          } else
            chomping = C._Chomping_CLIP;
        } else {
          chomping = C._Chomping_CLIP;
          increment = 0;
        }
        this._skipBlanks$0();
        this._skipComment$0();
        t2 = t1.string;
        t3 = J.getInterceptor$asx(t2);
        if (!(J.$eq$(t1._string_scanner$_position, t3.get$length(t2)) || this._isBreakAt$1(0)))
          throw H.wrapException(Z.YamlException$("Expected comment or line break.", t1.get$emptySpan()));
        this._skipLine$0();
        if (increment !== 0) {
          t4 = this._indents;
          indent = C.JSArray_methods.get$last(t4) >= 0 ? C.JSArray_methods.get$last(t4) + increment : increment;
        } else
          indent = 0;
        pair = this._scanBlockScalarBreaks$1(indent);
        indent = pair.first;
        trailingBreaks = pair.last;
        buffer = new P.StringBuffer("");
        end = new D._EagerSpanScannerState(t1, t1._string_scanner$_position, t1._line, t1._column);
        t4 = !literal;
        leadingBreak = "";
        leadingBlank = false;
        t5 = "";
        while (true) {
          if (!(t1._column === indent && !J.$eq$(t1._string_scanner$_position, t3.get$length(t2))))
            break;
          if (t1._column === 0)
            if (this._isBlankOrEndAt$1(3))
              t6 = t1.matches$1(0, "---") || t1.matches$1(0, "...");
            else
              t6 = false;
          else
            t6 = false;
          if (t6)
            break;
          $char = t1.peekChar$1(0);
          trailingBlank = $char === 32 || $char === 9;
          if (t4 && leadingBreak.length !== 0 && !leadingBlank && !trailingBlank) {
            if (J.get$isEmpty$asx(trailingBreaks)) {
              t5 += H.Primitives_stringFromCharCode(32);
              buffer._contents = t5;
            }
          } else {
            t5 += leadingBreak;
            buffer._contents = t5;
          }
          buffer._contents = t5 + H.S(trailingBreaks);
          $char = t1.peekChar$1(0);
          leadingBlank = $char === 32 || $char === 9;
          startPosition = t1._string_scanner$_position;
          while (true) {
            if (!J.$eq$(t1._string_scanner$_position, t3.get$length(t2))) {
              $char = t1.peekChar$1(0);
              t5 = $char === 13 || $char === 10;
            } else
              t5 = true;
            if (!!t5)
              break;
            t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
          }
          t5 = buffer._contents += t3.substring$2(t2, startPosition, t1._string_scanner$_position);
          t6 = t1._string_scanner$_position;
          end = new D._EagerSpanScannerState(t1, t6, t1._line, t1._column);
          leadingBreak = !J.$eq$(t6, t3.get$length(t2)) ? this._readLine$0() : "";
          pair = this._scanBlockScalarBreaks$1(indent);
          indent = pair.first;
          trailingBreaks = pair.last;
        }
        if (chomping !== C._Chomping_STRIP) {
          t2 = t5 + leadingBreak;
          buffer._contents = t2;
        } else
          t2 = t5;
        if (chomping === C._Chomping_KEEP) {
          t2 += H.S(trailingBreaks);
          buffer._contents = t2;
        }
        t1 = t1.spanFrom$2(start, end);
        t3 = literal ? C.ScalarStyle_LITERAL : C.ScalarStyle_FOLDED;
        return new L.ScalarToken(t1, t2.charCodeAt(0) == 0 ? t2 : t2, t3);
      },
      _scanBlockScalarBreaks$1: function(indent) {
        var breaks, t1, t2, t3, maxIndent, t4, maxIndent0, $char;
        breaks = new P.StringBuffer("");
        for (t1 = this._scanner$_scanner, t2 = indent === 0, t3 = !t2, maxIndent = 0; true;) {
          while (true) {
            if (t3) {
              t4 = t1._column;
              if (typeof indent !== "number")
                return H.iae(indent);
              t4 = t4 < indent;
            } else
              t4 = true;
            if (!(t4 && t1.peekChar$0() === 32))
              break;
            t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
          }
          maxIndent0 = t1._column;
          if (maxIndent0 > maxIndent)
            maxIndent = maxIndent0;
          $char = t1.peekChar$1(0);
          if (!($char === 13 || $char === 10))
            break;
          breaks._contents += this._readLine$0();
        }
        if (t2) {
          t1 = this._indents;
          indent = maxIndent < C.JSArray_methods.get$last(t1) + 1 ? C.JSArray_methods.get$last(t1) + 1 : maxIndent;
        }
        t1 = breaks._contents;
        return new B.Pair(indent, t1.charCodeAt(0) == 0 ? t1 : t1, [null, null]);
      },
      _scanFlowScalar$1$singleQuote: function(singleQuote) {
        var t1, t2, t3, t4, buffer, t5, t6, t7, t8, leadingBlanks, $char, char0, escapeStart, codeLength, value, i, character, whitespace, trailingBreaks, leadingBreak;
        t1 = this._scanner$_scanner;
        t2 = t1._string_scanner$_position;
        t3 = t1._line;
        t4 = t1._column;
        buffer = new P.StringBuffer("");
        t1.readChar$0();
        for (t5 = !singleQuote, t6 = t1.string, t7 = J.getInterceptor$asx(t6); true;) {
          if (t1._column === 0)
            if (this._isBlankOrEndAt$1(3))
              t8 = t1.matches$1(0, "---") || t1.matches$1(0, "...");
            else
              t8 = false;
          else
            t8 = false;
          if (t8)
            t1.error$1(0, "Unexpected document indicator.");
          if (J.$eq$(t1._string_scanner$_position, t7.get$length(t6)))
            throw H.wrapException(Z.YamlException$("Unexpected end of file.", t1.get$emptySpan()));
          while (true) {
            if (!!this._isBlankOrEndAt$1(0)) {
              leadingBlanks = false;
              break;
            }
            $char = t1.peekChar$0();
            if (singleQuote && $char === 39 && t1.peekChar$1(1) === 39) {
              t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
              t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
              buffer._contents += H.Primitives_stringFromCharCode(39);
            } else if ($char === (singleQuote ? 39 : 34)) {
              leadingBlanks = false;
              break;
            } else {
              if (t5)
                if ($char === 92) {
                  char0 = t1.peekChar$1(1);
                  t8 = char0 === 13 || char0 === 10;
                } else
                  t8 = false;
              else
                t8 = false;
              if (t8) {
                t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
                this._skipLine$0();
                leadingBlanks = true;
                break;
              } else if (t5 && $char === 92) {
                escapeStart = new D._EagerSpanScannerState(t1, t1._string_scanner$_position, t1._line, t1._column);
                switch (t1.peekChar$1(1)) {
                  case 48:
                    buffer._contents += H.Primitives_stringFromCharCode(0);
                    codeLength = null;
                    break;
                  case 97:
                    buffer._contents += H.Primitives_stringFromCharCode(7);
                    codeLength = null;
                    break;
                  case 98:
                    buffer._contents += H.Primitives_stringFromCharCode(8);
                    codeLength = null;
                    break;
                  case 116:
                  case 9:
                    buffer._contents += H.Primitives_stringFromCharCode(9);
                    codeLength = null;
                    break;
                  case 110:
                    buffer._contents += H.Primitives_stringFromCharCode(10);
                    codeLength = null;
                    break;
                  case 118:
                    buffer._contents += H.Primitives_stringFromCharCode(11);
                    codeLength = null;
                    break;
                  case 102:
                    buffer._contents += H.Primitives_stringFromCharCode(12);
                    codeLength = null;
                    break;
                  case 114:
                    buffer._contents += H.Primitives_stringFromCharCode(13);
                    codeLength = null;
                    break;
                  case 101:
                    buffer._contents += H.Primitives_stringFromCharCode(27);
                    codeLength = null;
                    break;
                  case 32:
                  case 34:
                  case 47:
                  case 92:
                    buffer._contents += H.Primitives_stringFromCharCode(t1.peekChar$1(1));
                    codeLength = null;
                    break;
                  case 78:
                    buffer._contents += H.Primitives_stringFromCharCode(133);
                    codeLength = null;
                    break;
                  case 95:
                    buffer._contents += H.Primitives_stringFromCharCode(160);
                    codeLength = null;
                    break;
                  case 76:
                    buffer._contents += H.Primitives_stringFromCharCode(8232);
                    codeLength = null;
                    break;
                  case 80:
                    buffer._contents += H.Primitives_stringFromCharCode(8233);
                    codeLength = null;
                    break;
                  case 120:
                    codeLength = 2;
                    break;
                  case 117:
                    codeLength = 4;
                    break;
                  case 85:
                    codeLength = 8;
                    break;
                  default:
                    throw H.wrapException(Z.YamlException$("Unknown escape character.", t1.spanFrom$1(escapeStart)));
                }
                t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
                t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
                if (codeLength != null) {
                  for (value = 0, i = 0; i < codeLength; ++i) {
                    if (!this.get$_isHex()) {
                      t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
                      throw H.wrapException(Z.YamlException$("Expected " + H.S(codeLength) + "-digit hexidecimal number.", t1.spanFrom$1(escapeStart)));
                    }
                    character = t1.super$StringScanner$readChar();
                    t1._adjustLineAndColumn$1(character);
                    value = (value << 4 >>> 0) + this._asHex$1(character);
                  }
                  if (value >= 55296 && value <= 57343 || value > 1114111)
                    throw H.wrapException(Z.YamlException$("Invalid Unicode character escape code.", t1.spanFrom$1(escapeStart)));
                  buffer._contents += H.Primitives_stringFromCharCode(value);
                }
              } else {
                character = t1.super$StringScanner$readChar();
                t1._adjustLineAndColumn$1(character);
                buffer._contents += H.Primitives_stringFromCharCode(character);
              }
            }
          }
          t8 = t1.peekChar$0();
          if (t8 === (singleQuote ? 39 : 34))
            break;
          whitespace = new P.StringBuffer("");
          trailingBreaks = new P.StringBuffer("");
          leadingBreak = "";
          while (true) {
            $char = t1.peekChar$1(0);
            if (!($char === 32 || $char === 9)) {
              $char = t1.peekChar$1(0);
              t8 = $char === 13 || $char === 10;
            } else
              t8 = true;
            if (!t8)
              break;
            $char = t1.peekChar$1(0);
            if ($char === 32 || $char === 9)
              if (!leadingBlanks) {
                character = t1.super$StringScanner$readChar();
                t1._adjustLineAndColumn$1(character);
                whitespace._contents += H.Primitives_stringFromCharCode(character);
              } else
                t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
            else if (!leadingBlanks) {
              whitespace._contents = "";
              leadingBreak = this._readLine$0();
              leadingBlanks = true;
            } else
              trailingBreaks._contents += this._readLine$0();
          }
          if (leadingBlanks)
            if (leadingBreak.length !== 0 && trailingBreaks._contents.length === 0)
              t8 = buffer._contents += H.Primitives_stringFromCharCode(32);
            else
              t8 = buffer._contents += trailingBreaks.toString$0(0);
          else {
            t8 = buffer._contents += whitespace.toString$0(0);
            whitespace._contents = "";
          }
        }
        t1.readChar$0();
        t1 = t1.spanFrom$1(new D._EagerSpanScannerState(t1, t2, t3, t4));
        t2 = buffer._contents;
        t3 = singleQuote ? C.ScalarStyle_SINGLE_QUOTED : C.ScalarStyle_DOUBLE_QUOTED;
        return new L.ScalarToken(t1, t2.charCodeAt(0) == 0 ? t2 : t2, t3);
      },
      _scanPlainScalar$0: function() {
        var t1, t2, t3, t4, end, buffer, whitespace, indent, t5, leadingBreak, trailingBreaks, t6, startPosition, $char, character;
        t1 = this._scanner$_scanner;
        t2 = t1._string_scanner$_position;
        t3 = t1._line;
        t4 = t1._column;
        end = new D._EagerSpanScannerState(t1, t2, t3, t4);
        buffer = new P.StringBuffer("");
        whitespace = new P.StringBuffer("");
        indent = C.JSArray_methods.get$last(this._indents) + 1;
        for (t5 = this._simpleKeys, leadingBreak = "", trailingBreaks = ""; true;) {
          if (t1._column === 0)
            if (this._isBlankOrEndAt$1(3))
              t6 = t1.matches$1(0, "---") || t1.matches$1(0, "...");
            else
              t6 = false;
          else
            t6 = false;
          if (t6)
            break;
          if (t1.peekChar$0() === 35)
            break;
          if (this._isPlainCharAt$1(0))
            if (leadingBreak.length !== 0) {
              if (trailingBreaks.length === 0)
                buffer._contents += H.Primitives_stringFromCharCode(32);
              else
                buffer._contents += trailingBreaks;
              leadingBreak = "";
              trailingBreaks = "";
            } else {
              buffer._contents += whitespace.toString$0(0);
              whitespace._contents = "";
            }
          startPosition = t1._string_scanner$_position;
          for (; this._isPlainCharAt$1(0);)
            t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
          end = t1._string_scanner$_position;
          buffer._contents += J.substring$2$s(t1.string, startPosition, end);
          end = new D._EagerSpanScannerState(t1, t1._string_scanner$_position, t1._line, t1._column);
          $char = t1.peekChar$1(0);
          if (!($char === 32 || $char === 9)) {
            $char = t1.peekChar$1(0);
            t6 = !($char === 13 || $char === 10);
          } else
            t6 = false;
          if (t6)
            break;
          while (true) {
            $char = t1.peekChar$1(0);
            if (!($char === 32 || $char === 9)) {
              $char = t1.peekChar$1(0);
              t6 = $char === 13 || $char === 10;
            } else
              t6 = true;
            if (!t6)
              break;
            $char = t1.peekChar$1(0);
            if ($char === 32 || $char === 9) {
              t6 = leadingBreak.length === 0;
              if (!t6 && t1._column < indent && t1.peekChar$0() === 9)
                t1.error$2$length(0, "Expected a space but found a tab.", 1);
              if (t6) {
                character = t1.super$StringScanner$readChar();
                t1._adjustLineAndColumn$1(character);
                whitespace._contents += H.Primitives_stringFromCharCode(character);
              } else
                t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
            } else if (leadingBreak.length === 0) {
              leadingBreak = this._readLine$0();
              whitespace._contents = "";
            } else
              trailingBreaks = this._readLine$0();
          }
          if (t5.length === 1 && t1._column < indent)
            break;
        }
        if (leadingBreak.length !== 0)
          this._simpleKeyAllowed = true;
        t1 = t1.spanFrom$2(new D._EagerSpanScannerState(t1, t2, t3, t4), end);
        t2 = buffer._contents;
        return new L.ScalarToken(t1, t2.charCodeAt(0) == 0 ? t2 : t2, C.ScalarStyle_PLAIN);
      },
      _skipLine$0: function() {
        var t1, $char, t2;
        t1 = this._scanner$_scanner;
        $char = t1.peekChar$0();
        t2 = $char === 13;
        if (!t2 && $char !== 10)
          return;
        t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        if (t2 && t1.peekChar$0() === 10)
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      },
      _readLine$0: function() {
        var t1, $char, t2;
        t1 = this._scanner$_scanner;
        $char = t1.peekChar$0();
        t2 = $char === 13;
        if (!t2 && $char !== 10)
          throw H.wrapException(Z.YamlException$("Expected newline.", t1.get$emptySpan()));
        t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        if (t2 && t1.peekChar$0() === 10)
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        return "\n";
      },
      _isBlankAt$1: function(offset) {
        var $char = this._scanner$_scanner.peekChar$1(offset);
        return $char === 32 || $char === 9;
      },
      _isBreakAt$1: function(offset) {
        var $char = this._scanner$_scanner.peekChar$1(offset);
        return $char === 13 || $char === 10;
      },
      _isBlankOrEndAt$1: function(offset) {
        var $char = this._scanner$_scanner.peekChar$1(offset);
        return $char == null || $char === 32 || $char === 9 || $char === 13 || $char === 10;
      },
      _isPlainCharAt$1: function(offset) {
        var t1, previous;
        t1 = this._scanner$_scanner;
        switch (t1.peekChar$1(offset)) {
          case 58:
            return this._isPlainSafeAt$1(offset + 1);
          case 35:
            previous = t1.peekChar$1(offset - 1);
            return previous !== 32 && previous !== 9;
          default:
            return this._isPlainSafeAt$1(offset);
        }
      },
      _isPlainSafeAt$1: function(offset) {
        var $char, t1;
        $char = this._scanner$_scanner.peekChar$1(offset);
        switch ($char) {
          case 44:
          case 91:
          case 93:
          case 123:
          case 125:
            return this._simpleKeys.length === 1;
          case 32:
          case 9:
          case 10:
          case 13:
          case 65279:
            return false;
          case 133:
            return true;
          default:
            if ($char != null)
              if (!($char >= 32 && $char <= 126))
                if (!($char >= 160 && $char <= 55295))
                  if (!($char >= 57344 && $char <= 65533))
                    t1 = $char >= 65536 && $char <= 1114111;
                  else
                    t1 = true;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = false;
            return t1;
        }
      },
      _asHex$1: function($char) {
        if ($char <= 57)
          return $char - 48;
        if ($char <= 70)
          return 10 + $char - 65;
        return 10 + $char - 97;
      },
      _skipBlanks$0: function() {
        var t1, $char;
        t1 = this._scanner$_scanner;
        while (true) {
          $char = t1.peekChar$1(0);
          if (!($char === 32 || $char === 9))
            break;
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        }
      },
      _skipComment$0: function() {
        var t1, t2, t3, $char, t4;
        t1 = this._scanner$_scanner;
        if (t1.peekChar$0() !== 35)
          return;
        t2 = t1.string;
        t3 = J.getInterceptor$asx(t2);
        while (true) {
          if (!J.$eq$(t1._string_scanner$_position, t3.get$length(t2))) {
            $char = t1.peekChar$1(0);
            t4 = $char === 13 || $char === 10;
          } else
            t4 = true;
          if (!!t4)
            break;
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        }
      }
    },
    Scanner__fetchMoreTokens_closure: {
      "^": "Closure:0;$this",
      call$1: function(key) {
        return key != null && key.get$tokenNumber() === this.$this._tokensParsed;
      }
    },
    _SimpleKey: {
      "^": "Object;tokenNumber<,location>,line>,column<,required"
    },
    _Chomping: {
      "^": "Object;name>",
      toString$0: function(_) {
        return this.name;
      }
    }
  }], ["", "package:yaml/src/style.dart",, O, {
    "^": "",
    ScalarStyle: {
      "^": "Object;name>",
      toString$0: function(_) {
        return this.name;
      }
    },
    CollectionStyle: {
      "^": "Object;name>",
      toString$0: function(_) {
        return this.name;
      }
    }
  }], ["", "package:yaml/src/token.dart",, L, {
    "^": "",
    Token: {
      "^": "Object;type>,span>",
      toString$0: function(_) {
        return this.type.name;
      }
    },
    VersionDirectiveToken: {
      "^": "Object;span>,major<,minor<",
      get$type: function(_) {
        return C.TokenType_VERSION_DIRECTIVE;
      },
      toString$0: function(_) {
        return "VERSION_DIRECTIVE " + H.S(this.major) + "." + H.S(this.minor);
      },
      $isToken: 1
    },
    TagDirectiveToken: {
      "^": "Object;span>,handle,prefix<",
      get$type: function(_) {
        return C.TokenType_TAG_DIRECTIVE;
      },
      toString$0: function(_) {
        return "TAG_DIRECTIVE " + this.handle + " " + this.prefix;
      },
      $isToken: 1
    },
    AnchorToken: {
      "^": "Object;span>,name>",
      get$type: function(_) {
        return C.TokenType_ANCHOR;
      },
      toString$0: function(_) {
        return "ANCHOR " + this.name;
      },
      $isToken: 1
    },
    AliasToken: {
      "^": "Object;span>,name>",
      get$type: function(_) {
        return C.TokenType_ALIAS;
      },
      toString$0: function(_) {
        return "ALIAS " + this.name;
      },
      $isToken: 1
    },
    TagToken: {
      "^": "Object;span>,handle,suffix",
      get$type: function(_) {
        return C.TokenType_TAG;
      },
      toString$0: function(_) {
        return "TAG " + H.S(this.handle) + " " + this.suffix;
      },
      $isToken: 1
    },
    ScalarToken: {
      "^": "Object;span>,value>,style>",
      get$type: function(_) {
        return C.TokenType_SCALAR;
      },
      toString$0: function(_) {
        return "SCALAR " + this.style.name + ' "' + this.value + '"';
      },
      $isToken: 1
    },
    TokenType: {
      "^": "Object;name>",
      toString$0: function(_) {
        return this.name;
      }
    }
  }], ["", "package:yaml/src/utils.dart",, B, {
    "^": "",
    Pair: {
      "^": "Object;first>,last,$ti",
      toString$0: function(_) {
        return "(" + H.S(this.first) + ", " + H.S(this.last) + ")";
      }
    },
    closure4: {
      "^": "Closure:48;",
      call$2: function(message, span) {
        P.print(span.message$1(0, message));
      },
      call$1: function(message) {
        return this.call$2(message, null);
      }
    }
  }], ["", "package:yaml/src/yaml_document.dart",, L, {
    "^": "",
    YamlDocument: {
      "^": "Object;contents,span>,versionDirective,tagDirectives,startImplicit,endImplicit",
      toString$0: function(_) {
        return J.toString$0$(this.contents);
      }
    },
    VersionDirective: {
      "^": "Object;major<,minor<",
      toString$0: function(_) {
        return "%YAML " + H.S(this.major) + "." + H.S(this.minor);
      }
    },
    TagDirective: {
      "^": "Object;handle,prefix<",
      toString$0: function(_) {
        return "%TAG " + this.handle + " " + this.prefix;
      }
    }
  }], ["", "package:yaml/src/yaml_exception.dart",, Z, {
    "^": "",
    YamlException: {
      "^": "SourceSpanFormatException;_span_exception$_source,_span_exception$_message,_span_exception$_span",
      static: {
        YamlException$: function(message, span) {
          return new Z.YamlException(null, message, span);
        }
      }
    }
  }], ["", "package:yaml/src/yaml_node.dart",, Z, {
    "^": "",
    YamlNode: {
      "^": "Object;",
      get$span: function(_) {
        return this._yaml_node$_span;
      }
    },
    YamlMap: {
      "^": "YamlNode_MapMixin_UnmodifiableMapMixin;nodes>,style>,_yaml_node$_span",
      get$value: function(_) {
        return this;
      },
      get$keys: function(_) {
        var t1 = this.nodes._collection$_map;
        t1 = t1.get$keys(t1);
        return H.MappedIterable_MappedIterable(t1, new Z.YamlMap_keys_closure(), H.getRuntimeTypeArgument(t1, "Iterable", 0), null);
      },
      $index: function(_, key) {
        var node = this.nodes._collection$_map.$index(0, key);
        return node == null ? null : J.get$value$x(node);
      }
    },
    YamlNode_MapMixin: {
      "^": "YamlNode+MapMixin;",
      $asMap: Isolate.functionThatReturnsNull,
      $isMap: 1
    },
    YamlNode_MapMixin_UnmodifiableMapMixin: {
      "^": "YamlNode_MapMixin+UnmodifiableMapMixin;",
      $asMap: Isolate.functionThatReturnsNull,
      $isMap: 1
    },
    YamlMap_keys_closure: {
      "^": "Closure:0;",
      call$1: [function(node) {
        return J.get$value$x(node);
      }, null, null, 2, 0, null, 22, "call"]
    },
    YamlList: {
      "^": "YamlNode_ListMixin;nodes>,style>,_yaml_node$_span",
      get$value: function(_) {
        return this;
      },
      get$length: function(_) {
        return this.nodes._collection$_source.length;
      },
      set$length: function(_, index) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable List"));
      },
      $index: function(_, index) {
        return J.get$value$x(J.elementAt$1$ax(this.nodes._collection$_source, index));
      },
      $indexSet: function(_, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable List"));
      }
    },
    YamlNode_ListMixin: {
      "^": "YamlNode+ListMixin;",
      $asList: Isolate.functionThatReturnsNull,
      $asIterable: Isolate.functionThatReturnsNull,
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    YamlScalar: {
      "^": "YamlNode;value>,style>,_yaml_node$_span",
      toString$0: function(_) {
        return J.toString$0$(this.value);
      }
    }
  }], ["", "package:yaml/yaml.dart",, B, {
    "^": "",
    loadYamlDocument: function(yaml, sourceUrl) {
      var t1, t2, t3, t4, t5, t6, t7, t8, loader, $event, $document, nextDocument;
      t1 = P.String;
      t2 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [t1, Z.YamlNode]);
      t3 = H.setRuntimeTypeInfo([], [G._State]);
      t1 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0, [t1, L.TagDirective]);
      t4 = L.Token;
      t5 = new Q.QueueList(null, 0, 0, [t4]);
      t6 = new Array(8);
      t6.fixed$length = Array;
      t5._queue_list$_table = H.setRuntimeTypeInfo(t6, [t4]);
      t4 = [P.$int];
      t6 = H.setRuntimeTypeInfo([-1], t4);
      t7 = H.setRuntimeTypeInfo([null], [O._SimpleKey]);
      t8 = J.get$runes$s(yaml);
      t4 = H.setRuntimeTypeInfo([0], t4);
      t4 = new Y.SourceFile(sourceUrl, t4, new Uint32Array(H._ensureNativeList(P.List_List$from(t8, true, H.getRuntimeTypeArgument(t8, "Iterable", 0)))), null);
      t4.SourceFile$decoded$2$url(t8, sourceUrl);
      t4 = new D.EagerSpanScanner(0, 0, t4, null, sourceUrl, yaml, 0, null, null);
      t4.StringScanner$3$position$sourceUrl(yaml, null, sourceUrl);
      t1 = new G.Parser(new O.Scanner(t4, false, false, t5, 0, false, t6, true, t7), t3, C._State_STREAM_START, t1);
      loader = new A.Loader(t1, t2, null);
      $event = t1.parse$0();
      loader._span = $event.get$span($event);
      $document = loader.load$0(0);
      if ($document == null) {
        t1 = loader._span;
        t2 = new Z.YamlScalar(null, C.ScalarStyle_ANY, null);
        t2._yaml_node$_span = t1;
        return new L.YamlDocument(t2, t1, null, new P.UnmodifiableListView(C.List_empty, [null]), false, false);
      }
      nextDocument = loader.load$0(0);
      if (nextDocument != null)
        throw H.wrapException(Z.YamlException$("Only expected one document.", nextDocument.span));
      return $document;
    }
  }], ["atom.entry", "entry.dart",, T, {
    "^": "",
    main: [function() {
      var t1 = $.$get$Logger_root();
      J.set$level$x(t1, C.Level_WARNING_900);
      t1.get$onRecord().listen$1(new T.main_closure());
      L.registerPackage(R.AtomDartPackage$());
    }, "call$0", "entry__main$closure", 0, 0, 1],
    main_closure: {
      "^": "Closure:214;",
      call$1: [function(r) {
        var t1, tag;
        t1 = J.getInterceptor$x(r);
        tag = J.toLowerCase$0$s(J.get$name$x(t1.get$level(r))) + " \u2022 " + r.get$loggerName() + ":";
        P.print(tag + " " + H.S(t1.get$message(r)));
        if (t1.get$error(r) != null)
          P.print(tag + "   " + H.S(t1.get$error(r)));
        if (r.get$stackTrace() != null)
          P.print(tag + "   " + H.S(r.get$stackTrace()));
      }, null, null, 2, 0, null, 42, "call"]
    }
  }, 1]];
  setupProgram(dart, 0);
  // getInterceptor methods
  J.getInterceptor = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$asx = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ax = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$n = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$ns = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$s = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$x = function(receiver) {
    if (receiver == null)
      return receiver;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.set$alignSelf$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$alignSelf(receiver, value);
  };
  J.set$checked$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$checked(receiver, value);
  };
  J.set$className$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$className(receiver, value);
  };
  J.set$disabled$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$disabled(receiver, value);
  };
  J.set$display$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$display(receiver, value);
  };
  J.set$height$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$height(receiver, value);
  };
  J.set$href$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$href(receiver, value);
  };
  J.set$innerHtml$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
  };
  J.set$level$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$level(receiver, value);
  };
  J.set$marginLeft$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$marginLeft(receiver, value);
  };
  J.set$next$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$next(receiver, value);
  };
  J.set$position$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$position(receiver, value);
  };
  J.set$tabIndex$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$tabIndex(receiver, value);
  };
  J.set$text$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$text(receiver, value);
  };
  J.set$title$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$title(receiver, value);
  };
  J.set$value$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$value(receiver, value);
  };
  J.set$width$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$width(receiver, value);
  };
  J.get$_children$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$_children(receiver);
  };
  J.get$active$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$active(receiver);
  };
  J.get$attributes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$attributes(receiver);
  };
  J.get$checked$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$checked(receiver);
  };
  J.get$children$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$children(receiver);
  };
  J.get$className$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$className(receiver);
  };
  J.get$classes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$classes(receiver);
  };
  J.get$codeUnits$s = function(receiver) {
    return J.getInterceptor$s(receiver).get$codeUnits(receiver);
  };
  J.get$content$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$content(receiver);
  };
  J.get$data$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$data(receiver);
  };
  J.get$defaultPrevented$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$defaultPrevented(receiver);
  };
  J.get$detail$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$detail(receiver);
  };
  J.get$directory$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$directory(receiver);
  };
  J.get$end$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$end(receiver);
  };
  J.get$error$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$error(receiver);
  };
  J.get$file$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$file(receiver);
  };
  J.get$files$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$files(receiver);
  };
  J.get$first$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$first(receiver);
  };
  J.get$href$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$href(receiver);
  };
  J.get$id$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$id(receiver);
  };
  J.get$index$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$index(receiver);
  };
  J.get$isEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
  };
  J.get$isNotEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
  };
  J.get$items$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$items(receiver);
  };
  J.get$iterator$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
  };
  J.get$json$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$json(receiver);
  };
  J.get$key$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$key(receiver);
  };
  J.get$keys$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$keys(receiver);
  };
  J.get$kind$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$kind(receiver);
  };
  J.get$kinds$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$kinds(receiver);
  };
  J.get$left$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$left(receiver);
  };
  J.get$length$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
  };
  J.get$level$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$level(receiver);
  };
  J.get$line$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$line(receiver);
  };
  J.get$location$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$location(receiver);
  };
  J.get$marginEdge$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$marginEdge(receiver);
  };
  J.get$message$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$message(receiver);
  };
  J.get$name$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$name(receiver);
  };
  J.get$next$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$next(receiver);
  };
  J.get$nodes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$nodes(receiver);
  };
  J.get$offset$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$offset(receiver);
  };
  J.get$onChange$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onChange(receiver);
  };
  J.get$onClick$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onClick(receiver);
  };
  J.get$onDoubleClick$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onDoubleClick(receiver);
  };
  J.get$parent$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$parent(receiver);
  };
  J.get$parentNode$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$parentNode(receiver);
  };
  J.get$path$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$path(receiver);
  };
  J.get$pauseEvent$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$pauseEvent(receiver);
  };
  J.get$port$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$port(receiver);
  };
  J.get$previousNode$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$previousNode(receiver);
  };
  J.get$responseText$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$responseText(receiver);
  };
  J.get$result$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$result(receiver);
  };
  J.get$results$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$results(receiver);
  };
  J.get$root$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$root(receiver);
  };
  J.get$runes$s = function(receiver) {
    return J.getInterceptor$s(receiver).get$runes(receiver);
  };
  J.get$search$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$search(receiver);
  };
  J.get$span$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$span(receiver);
  };
  J.get$start$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$start(receiver);
  };
  J.get$style$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$style(receiver);
  };
  J.get$text$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$text(receiver);
  };
  J.get$timestamp$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$timestamp(receiver);
  };
  J.get$top$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$top(receiver);
  };
  J.get$topLeft$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$topLeft(receiver);
  };
  J.get$type$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$type(receiver);
  };
  J.get$value$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$value(receiver);
  };
  J.get$valueAsString$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$valueAsString(receiver);
  };
  J.get$version$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$version(receiver);
  };
  J.get$view$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$view(receiver);
  };
  J.get$x$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$x(receiver);
  };
  J.$add$ns = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver + a0;
    return J.getInterceptor$ns(receiver).$add(receiver, a0);
  };
  J.$and$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return (receiver & a0) >>> 0;
    return J.getInterceptor$n(receiver).$and(receiver, a0);
  };
  J.$ge$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver >= a0;
    return J.getInterceptor$n(receiver).$ge(receiver, a0);
  };
  J.$gt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver > a0;
    return J.getInterceptor$n(receiver).$gt(receiver, a0);
  };
  J.$index$asx = function(receiver, a0) {
    if (typeof a0 === "number")
      if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
        if (a0 >>> 0 === a0 && a0 < receiver.length)
          return receiver[a0];
    return J.getInterceptor$asx(receiver).$index(receiver, a0);
  };
  J.$indexSet$ax = function(receiver, a0, a1) {
    if (typeof a0 === "number")
      if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
        return receiver[a0] = a1;
    return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
  };
  J.$le$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver <= a0;
    return J.getInterceptor$n(receiver).$le(receiver, a0);
  };
  J.$lt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver < a0;
    return J.getInterceptor$n(receiver).$lt(receiver, a0);
  };
  J.$mul$ns = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver * a0;
    return J.getInterceptor$ns(receiver).$mul(receiver, a0);
  };
  J.$negate$n = function(receiver) {
    if (typeof receiver == "number")
      return -receiver;
    return J.getInterceptor$n(receiver).$negate(receiver);
  };
  J.$shl$n = function(receiver, a0) {
    return J.getInterceptor$n(receiver).$shl(receiver, a0);
  };
  J.$sub$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver - a0;
    return J.getInterceptor$n(receiver).$sub(receiver, a0);
  };
  J.$tdiv$n = function(receiver, a0) {
    return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
  };
  J.$xor$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return (receiver ^ a0) >>> 0;
    return J.getInterceptor$n(receiver).$xor(receiver, a0);
  };
  J.__isolate_helper$_add$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).__isolate_helper$_add$1(receiver, a0);
  };
  J._clearChildren$0$x = function(receiver) {
    return J.getInterceptor$x(receiver)._clearChildren$0(receiver);
  };
  J._replaceChild$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
  };
  J.accept$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).accept$1(receiver, a0);
  };
  J.activate$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).activate$1(receiver, a0);
  };
  J.add$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).add$1(receiver, a0);
  };
  J.addAll$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
  };
  J.addEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
  };
  J.allMatches$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).allMatches$2(receiver, a0, a1);
  };
  J.any$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).any$1(receiver, a0);
  };
  J.append$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).append$1(receiver, a0);
  };
  J.cancel$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).cancel$0(receiver);
  };
  J.clear$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).clear$0(receiver);
  };
  J.click$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).click$1(receiver, a0);
  };
  J.click$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).click$2(receiver, a0, a1);
  };
  J.close$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).close$0(receiver);
  };
  J.codeUnitAt$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
  };
  J.compareTo$1$ns = function(receiver, a0) {
    return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
  };
  J.complete$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).complete$1(receiver, a0);
  };
  J.contains$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
  };
  J.contains$2$asx = function(receiver, a0, a1) {
    return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
  };
  J.containsKey$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).containsKey$1(receiver, a0);
  };
  J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
  };
  J.elementAt$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
  };
  J.endsWith$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
  };
  J.expand$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).expand$1(receiver, a0);
  };
  J.fillRange$3$ax = function(receiver, a0, a1, a2) {
    return J.getInterceptor$ax(receiver).fillRange$3(receiver, a0, a1, a2);
  };
  J.forEach$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
  };
  J.getAttribute$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).getAttribute$1(receiver, a0);
  };
  J.getBoundingClientRect$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
  };
  J.getComputedStyle$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).getComputedStyle$0(receiver);
  };
  J.getFile$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).getFile$1(receiver, a0);
  };
  J.getPropertyValue$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).getPropertyValue$1(receiver, a0);
  };
  J.hash$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).hash$1(receiver, a0);
  };
  J.hidden$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).hidden$1(receiver, a0);
  };
  J.indexOf$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
  };
  J.insert$2$ax = function(receiver, a0, a1) {
    return J.getInterceptor$ax(receiver).insert$2(receiver, a0, a1);
  };
  J.insertAll$2$ax = function(receiver, a0, a1) {
    return J.getInterceptor$ax(receiver).insertAll$2(receiver, a0, a1);
  };
  J.insertAllBefore$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).insertAllBefore$2(receiver, a0, a1);
  };
  J.insertBefore$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).insertBefore$2(receiver, a0, a1);
  };
  J.isDirectory$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).isDirectory$0(receiver);
  };
  J.map$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).map$1(receiver, a0);
  };
  J.matchAsPrefix$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
  };
  J.message$2$color$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).message$2$color(receiver, a0, a1);
  };
  J.modify$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).modify$1(receiver, a0);
  };
  J.preventDefault$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).preventDefault$0(receiver);
  };
  J.querySelector$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).querySelector$1(receiver, a0);
  };
  J.querySelectorAll$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).querySelectorAll$1(receiver, a0);
  };
  J.reduce$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).reduce$1(receiver, a0);
  };
  J.remove$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).remove$0(receiver);
  };
  J.remove$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
  };
  J.removeAt$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
  };
  J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
  };
  J.replaceAll$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
  };
  J.replaceFirst$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).replaceFirst$2(receiver, a0, a1);
  };
  J.replaceWith$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
  };
  J.reset$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).reset$0(receiver);
  };
  J.resume$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).resume$0(receiver);
  };
  J.save$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).save$0(receiver);
  };
  J.scrollIntoView$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).scrollIntoView$0(receiver);
  };
  J.scrollIntoView$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).scrollIntoView$1(receiver, a0);
  };
  J.send$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).send$1(receiver, a0);
  };
  J.setAttribute$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).setAttribute$2(receiver, a0, a1);
  };
  J.setInnerHtml$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).setInnerHtml$1(receiver, a0);
  };
  J.setInnerHtml$2$treeSanitizer$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).setInnerHtml$2$treeSanitizer(receiver, a0, a1);
  };
  J.setInnerHtml$2$validator$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).setInnerHtml$2$validator(receiver, a0, a1);
  };
  J.setProperty$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).setProperty$3(receiver, a0, a1, a2);
  };
  J.skip$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
  };
  J.sort$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
  };
  J.split$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).split$1(receiver, a0);
  };
  J.start$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).start$0(receiver);
  };
  J.startsWith$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
  };
  J.startsWith$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).startsWith$2(receiver, a0, a1);
  };
  J.stopImmediatePropagation$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).stopImmediatePropagation$0(receiver);
  };
  J.substring$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).substring$1(receiver, a0);
  };
  J.substring$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
  };
  J.terminate$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).terminate$0(receiver);
  };
  J.toInt$0$n = function(receiver) {
    return J.getInterceptor$n(receiver).toInt$0(receiver);
  };
  J.toList$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).toList$0(receiver);
  };
  J.toLowerCase$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
  };
  J.toRadixString$1$n = function(receiver, a0) {
    return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
  };
  J.toggle$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).toggle$2(receiver, a0, a1);
  };
  J.transform$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).transform$1(receiver, a0);
  };
  J.trim$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trim$0(receiver);
  };
  J.trimLeft$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trimLeft$0(receiver);
  };
  J.trimRight$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trimRight$0(receiver);
  };
  J.where$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).where$1(receiver, a0);
  };
  J.get$hashCode$ = function(receiver) {
    return J.getInterceptor(receiver).get$hashCode(receiver);
  };
  J.get$runtimeType$ = function(receiver) {
    return J.getInterceptor(receiver).get$runtimeType(receiver);
  };
  J.$eq$ = function(receiver, a0) {
    if (receiver == null)
      return a0 == null;
    if (typeof receiver != "object")
      return a0 != null && receiver === a0;
    return J.getInterceptor(receiver).$eq(receiver, a0);
  };
  J.noSuchMethod$1$ = function(receiver, a0) {
    return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
  };
  J.toString$0$ = function(receiver) {
    return J.getInterceptor(receiver).toString$0(receiver);
  };
  Isolate.makeConstantList = function(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  };
  var $ = Isolate.$isolateProperties;
  C.BodyElement_methods = W.BodyElement.prototype;
  C.CssStyleDeclaration_methods = W.CssStyleDeclaration.prototype;
  C.HttpRequest_methods = W.HttpRequest.prototype;
  C.Interceptor_methods = J.Interceptor.prototype;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNull_methods = J.JSNull.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
  C.NativeUint32List_methods = H.NativeUint32List.prototype;
  C.NativeUint8List_methods = H.NativeUint8List.prototype;
  C.NodeList_methods = W.NodeList.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.Base64Encoder_false = new P.Base64Encoder(false);
  C.Base64Codec_Base64Encoder_false = new P.Base64Codec(C.Base64Encoder_false);
  C.C_Base64Decoder = new P.Base64Decoder();
  C.C_BlockTagBlockHtmlSyntax = new U.BlockTagBlockHtmlSyntax();
  C.C_BlockquoteSyntax = new U.BlockquoteSyntax();
  C.C_CodeBlockSyntax = new U.CodeBlockSyntax();
  C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
  C.C_EmptyBlockSyntax = new U.EmptyBlockSyntax();
  C.C_EmptyIterable = new H.EmptyIterable([null]);
  C.C_EmptyIterator = new H.EmptyIterator([null]);
  C.C_FencedCodeBlockSyntax = new U.FencedCodeBlockSyntax();
  C.C_HeaderSyntax = new U.HeaderSyntax();
  C.C_HorizontalRuleSyntax = new U.HorizontalRuleSyntax();
  C.C_LineSplitter = new P.LineSplitter();
  C.C_OrderedListSyntax = new U.OrderedListSyntax();
  C.C_OtherTagBlockHtmlSyntax = new U.OtherTagBlockHtmlSyntax();
  C.C_OutOfMemoryError = new P.OutOfMemoryError();
  C.C_ParagraphSyntax = new U.ParagraphSyntax();
  C.C_SetextHeaderSyntax = new U.SetextHeaderSyntax();
  C.C_UnorderedListSyntax = new U.UnorderedListSyntax();
  C.C_Utf8Encoder = new P.Utf8Encoder();
  C.C__DelayedDone = new P._DelayedDone();
  C.C__JSRandom = new P._JSRandom();
  C.C__RootZone = new P._RootZone();
  C.CollectionStyle_BLOCK = new O.CollectionStyle("BLOCK");
  C.CollectionStyle_FLOW = new O.CollectionStyle("FLOW");
  C.Duration_0 = new P.Duration(0);
  C.Duration_100000 = new P.Duration(100000);
  C.Duration_200000 = new P.Duration(200000);
  C.Duration_400000 = new P.Duration(400000);
  C.EventType_ALIAS = new X.EventType("ALIAS");
  C.EventType_DOCUMENT_END = new X.EventType("DOCUMENT_END");
  C.EventType_DOCUMENT_START = new X.EventType("DOCUMENT_START");
  C.EventType_MAPPING_END = new X.EventType("MAPPING_END");
  C.EventType_MAPPING_START = new X.EventType("MAPPING_START");
  C.EventType_SCALAR = new X.EventType("SCALAR");
  C.EventType_SEQUENCE_END = new X.EventType("SEQUENCE_END");
  C.EventType_SEQUENCE_START = new X.EventType("SEQUENCE_START");
  C.EventType_STREAM_END = new X.EventType("STREAM_END");
  C.EventType_STREAM_START = new X.EventType("STREAM_START");
  C.ExceptionBreakType_0 = new A.ExceptionBreakType(0);
  C.ExceptionBreakType_1 = new A.ExceptionBreakType(1);
  C.ExceptionBreakType_2 = new A.ExceptionBreakType(2);
  C.C_DefaultEquality = new U.DefaultEquality([null]);
  C.IterableEquality_DefaultEquality = new U.IterableEquality(C.C_DefaultEquality, [null]);
  C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
  C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
  C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
  C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
  C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
  C.JS_CONST_gkc0 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
  C.JS_CONST_gkc = function() {
  function typeNameInChrome(o) {
    var constructor = o.constructor;
    if (constructor) {
      var name = constructor.name;
      if (name) return name;
    }
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
  C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
  C.JS_CONST_s8I = function(_, letter) { return letter.toUpperCase(); };
  C.JsonCodec_null_null = new P.JsonCodec(null, null);
  C.JsonDecoder_null = new P.JsonDecoder(null);
  C.JsonEncoder_null_null = new P.JsonEncoder(null, null);
  C.Level_FINER_400 = new N.Level("FINER", 400);
  C.Level_FINE_500 = new N.Level("FINE", 500);
  C.Level_INFO_800 = new N.Level("INFO", 800);
  C.Level_OFF_2000 = new N.Level("OFF", 2000);
  C.Level_SEVERE_1000 = new N.Level("SEVERE", 1000);
  C.Level_WARNING_900 = new N.Level("WARNING", 900);
  C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(Isolate.makeConstantList([127, 2047, 65535, 1114111]), [P.$int]);
  C.List_2Vk = Isolate.makeConstantList([0, 0, 32776, 33792, 1, 10240, 0, 0]);
  C.List_2Zi = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
  C.List_4QF = Isolate.makeConstantList(["file:///", "file:/"]);
  C.List_8Jr = Isolate.makeConstantList([";", "{", "}", "]", ")", ","]);
  C.List_CVk = Isolate.makeConstantList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]);
  C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
  C.List_KIf = Isolate.makeConstantList([0, 0, 26498, 1023, 65534, 34815, 65534, 18431]);
  C.Level_ALL_0 = new N.Level("ALL", 0);
  C.Level_FINEST_300 = new N.Level("FINEST", 300);
  C.Level_CONFIG_700 = new N.Level("CONFIG", 700);
  C.Level_SHOUT_1200 = new N.Level("SHOUT", 1200);
  C.List_O1R = Isolate.makeConstantList([C.Level_ALL_0, C.Level_FINEST_300, C.Level_FINER_400, C.Level_FINE_500, C.Level_CONFIG_700, C.Level_INFO_800, C.Level_WARNING_900, C.Level_SEVERE_1000, C.Level_SHOUT_1200, C.Level_OFF_2000]);
  C.List_WnV = Isolate.makeConstantList(["/", "\\"]);
  C.List_cSk = Isolate.makeConstantList(["/"]);
  C.List_ego = Isolate.makeConstantList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]);
  C.List_empty0 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.String]);
  C.List_empty = Isolate.makeConstantList([]);
  C.List_gRj = Isolate.makeConstantList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]);
  C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
  C.List_qNA = Isolate.makeConstantList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]);
  C.List_qg40 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
  C.List_qg4 = Isolate.makeConstantList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]);
  C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
  C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
  C.List_0rA = H.setRuntimeTypeInfo(Isolate.makeConstantList(["CLASS", "CLASS_TYPE_ALIAS", "CONSTRUCTOR", "SETTER", "GETTER", "FUNCTION", "METHOD", "LIBRARY", "LOCAL_VARIABLE", "FUNCTION_TYPE_ALIAS", "ENUM", "ENUM_CONSTANT", "FIELD", "PARAMETER", "TOP_LEVEL_VARIABLE"]), [P.String]);
  C.Map_0rsty = new H.ConstantStringMap(15, {CLASS: "class", CLASS_TYPE_ALIAS: "class", CONSTRUCTOR: "constant", SETTER: "function", GETTER: "function", FUNCTION: "function", METHOD: "method", LIBRARY: "import", LOCAL_VARIABLE: "variable", FUNCTION_TYPE_ALIAS: "function", ENUM: "constant", ENUM_CONSTANT: "constant", FIELD: "function", PARAMETER: "property", TOP_LEVEL_VARIABLE: "variable"}, C.List_0rA, [P.String, P.String]);
  C.Map_O9WfA = new H.GeneralConstantMap([0, "Status.OK", 1, "Status.ERROR"], [null, null]);
  C.List_empty1 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.Symbol0]);
  C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty1, [P.Symbol0, null]);
  C.List_iea = H.setRuntimeTypeInfo(Isolate.makeConstantList(["IDENTIFIER", "IMPORT", "KEYWORD", "PARAMETER", "NAMED_ARGUMENT"]), [P.String]);
  C.Map_iewa9 = new H.ConstantStringMap(5, {IDENTIFIER: "identifier", IMPORT: "import", KEYWORD: "keyword", PARAMETER: "property", NAMED_ARGUMENT: "property"}, C.List_iea, [P.String, P.String]);
  C.Map_sgJaw = new H.GeneralConstantMap([0, "ExceptionBreakType.all", 1, "ExceptionBreakType.uncaught", 2, "ExceptionBreakType.none"], [null, null]);
  C.ScalarStyle_ANY = new O.ScalarStyle("ANY");
  C.ScalarStyle_DOUBLE_QUOTED = new O.ScalarStyle("DOUBLE_QUOTED");
  C.ScalarStyle_FOLDED = new O.ScalarStyle("FOLDED");
  C.ScalarStyle_LITERAL = new O.ScalarStyle("LITERAL");
  C.ScalarStyle_PLAIN = new O.ScalarStyle("PLAIN");
  C.ScalarStyle_SINGLE_QUOTED = new O.ScalarStyle("SINGLE_QUOTED");
  C.ScrollAlignment_BOTTOM = new W.ScrollAlignment("BOTTOM");
  C.ScrollAlignment_CENTER = new W.ScrollAlignment("CENTER");
  C.ScrollAlignment_TOP = new W.ScrollAlignment("TOP");
  C.Status_0 = new S.Status(0);
  C.Status_1 = new S.Status(1);
  C.Symbol_call = new H.Symbol("call");
  C.TokenType_ALIAS = new L.TokenType("ALIAS");
  C.TokenType_ANCHOR = new L.TokenType("ANCHOR");
  C.TokenType_BLOCK_END = new L.TokenType("BLOCK_END");
  C.TokenType_BLOCK_ENTRY = new L.TokenType("BLOCK_ENTRY");
  C.TokenType_BLOCK_MAPPING_START = new L.TokenType("BLOCK_MAPPING_START");
  C.TokenType_BLOCK_SEQUENCE_START = new L.TokenType("BLOCK_SEQUENCE_START");
  C.TokenType_DOCUMENT_END = new L.TokenType("DOCUMENT_END");
  C.TokenType_DOCUMENT_START = new L.TokenType("DOCUMENT_START");
  C.TokenType_FLOW_ENTRY = new L.TokenType("FLOW_ENTRY");
  C.TokenType_FLOW_MAPPING_END = new L.TokenType("FLOW_MAPPING_END");
  C.TokenType_FLOW_MAPPING_START = new L.TokenType("FLOW_MAPPING_START");
  C.TokenType_FLOW_SEQUENCE_END = new L.TokenType("FLOW_SEQUENCE_END");
  C.TokenType_FLOW_SEQUENCE_START = new L.TokenType("FLOW_SEQUENCE_START");
  C.TokenType_KEY = new L.TokenType("KEY");
  C.TokenType_SCALAR = new L.TokenType("SCALAR");
  C.TokenType_STREAM_END = new L.TokenType("STREAM_END");
  C.TokenType_STREAM_START = new L.TokenType("STREAM_START");
  C.TokenType_TAG = new L.TokenType("TAG");
  C.TokenType_TAG_DIRECTIVE = new L.TokenType("TAG_DIRECTIVE");
  C.TokenType_VALUE = new L.TokenType("VALUE");
  C.TokenType_VERSION_DIRECTIVE = new L.TokenType("VERSION_DIRECTIVE");
  C.Type_AnalysisServer_bhC = H.createRuntimeType("AnalysisServer");
  C.Type_BreakpointManager_erm = H.createRuntimeType("BreakpointManager");
  C.Type_ByteBuffer_RkP = H.createRuntimeType("ByteBuffer");
  C.Type_ByteData_zNC = H.createRuntimeType("ByteData");
  C.Type_DartLinterConsumer_B8J = H.createRuntimeType("DartLinterConsumer");
  C.Type_DebugManager_QDz = H.createRuntimeType("DebugManager");
  C.Type_EditorManager_25m = H.createRuntimeType("EditorManager");
  C.Type_ErrorRepository_jfx = H.createRuntimeType("ErrorRepository");
  C.Type_Float32List_LB7 = H.createRuntimeType("Float32List");
  C.Type_Float64List_LB7 = H.createRuntimeType("Float64List");
  C.Type_FlutterDaemonManager_8Wd = H.createRuntimeType("FlutterDaemonManager");
  C.Type_FlutterDeviceManager_zjY = H.createRuntimeType("FlutterDeviceManager");
  C.Type_FlutterSdkManager_Ag3 = H.createRuntimeType("FlutterSdkManager");
  C.Type_Int16List_uXf = H.createRuntimeType("Int16List");
  C.Type_Int32List_O50 = H.createRuntimeType("Int32List");
  C.Type_Int8List_ekJ = H.createRuntimeType("Int8List");
  C.Type_JSObject_8k0 = H.createRuntimeType("JSObject");
  C.Type_JobManager_cMb = H.createRuntimeType("JobManager");
  C.Type_LaunchConfigurationManager_6Be = H.createRuntimeType("LaunchConfigurationManager");
  C.Type_LaunchManager_mXK = H.createRuntimeType("LaunchManager");
  C.Type_NavigationManager_X8s = H.createRuntimeType("NavigationManager");
  C.Type_Null_Yyn = H.createRuntimeType("Null");
  C.Type_ProjectManager_CvJ = H.createRuntimeType("ProjectManager");
  C.Type_QuickFixHelper_idk = H.createRuntimeType("QuickFixHelper");
  C.Type_RebuildJob_uti = H.createRuntimeType("RebuildJob");
  C.Type_RunApplicationManager_vVm = H.createRuntimeType("RunApplicationManager");
  C.Type_SdkManager_OHH = H.createRuntimeType("SdkManager");
  C.Type_StatusViewManager_tnX = H.createRuntimeType("StatusViewManager");
  C.Type_String_k8F = H.createRuntimeType("String");
  C.Type_TestManager_KlB = H.createRuntimeType("TestManager");
  C.Type_Uint16List_2bx = H.createRuntimeType("Uint16List");
  C.Type_Uint32List_2bx = H.createRuntimeType("Uint32List");
  C.Type_Uint8ClampedList_Jik = H.createRuntimeType("Uint8ClampedList");
  C.Type_Uint8List_WLA = H.createRuntimeType("Uint8List");
  C.Type_ViewGroupManager_GZ8 = H.createRuntimeType("ViewGroupManager");
  C.Type_WorkspaceLaunchManager_G7N = H.createRuntimeType("WorkspaceLaunchManager");
  C.Type_bool_lhE = H.createRuntimeType("bool");
  C.Type_double_K1J = H.createRuntimeType("$double");
  C.Type_int_tHn = H.createRuntimeType("$int");
  C.Type_num_cv7 = H.createRuntimeType("num");
  C.UnorderedIterableEquality_DefaultEquality = new U.UnorderedIterableEquality(C.C_DefaultEquality, [null]);
  C.Utf8Codec_false = new P.Utf8Codec(false);
  C._Chomping_CLIP = new O._Chomping("CLIP");
  C._Chomping_KEEP = new O._Chomping("KEEP");
  C._Chomping_STRIP = new O._Chomping("STRIP");
  C._IterationMarker_null_2 = new P._IterationMarker(null, 2);
  C._State_BLOCK_MAPPING_FIRST_KEY = new G._State("BLOCK_MAPPING_FIRST_KEY");
  C._State_BLOCK_MAPPING_KEY = new G._State("BLOCK_MAPPING_KEY");
  C._State_BLOCK_MAPPING_VALUE = new G._State("BLOCK_MAPPING_VALUE");
  C._State_BLOCK_NODE = new G._State("BLOCK_NODE");
  C._State_BLOCK_SEQUENCE_ENTRY = new G._State("BLOCK_SEQUENCE_ENTRY");
  C._State_BLOCK_SEQUENCE_FIRST_ENTRY = new G._State("BLOCK_SEQUENCE_FIRST_ENTRY");
  C._State_DOCUMENT_CONTENT = new G._State("DOCUMENT_CONTENT");
  C._State_DOCUMENT_END = new G._State("DOCUMENT_END");
  C._State_DOCUMENT_START = new G._State("DOCUMENT_START");
  C._State_END = new G._State("END");
  C._State_FLOW_MAPPING_EMPTY_VALUE = new G._State("FLOW_MAPPING_EMPTY_VALUE");
  C._State_FLOW_MAPPING_FIRST_KEY = new G._State("FLOW_MAPPING_FIRST_KEY");
  C._State_FLOW_MAPPING_KEY = new G._State("FLOW_MAPPING_KEY");
  C._State_FLOW_MAPPING_VALUE = new G._State("FLOW_MAPPING_VALUE");
  C._State_FLOW_NODE = new G._State("FLOW_NODE");
  C._State_FLOW_SEQUENCE_ENTRY = new G._State("FLOW_SEQUENCE_ENTRY");
  C._State_FLOW_SEQUENCE_FIRST_ENTRY = new G._State("FLOW_SEQUENCE_FIRST_ENTRY");
  C._State_INDENTLESS_SEQUENCE_ENTRY = new G._State("INDENTLESS_SEQUENCE_ENTRY");
  C._State_STREAM_START = new G._State("STREAM_START");
  C._State_h3t = new G._State("FLOW_SEQUENCE_ENTRY_MAPPING_END");
  C._State_hJ6 = new G._State("FLOW_SEQUENCE_ENTRY_MAPPING_VALUE");
  C._State_oBX = new G._State("FLOW_SEQUENCE_ENTRY_MAPPING_KEY");
  C._State_p8I = new G._State("BLOCK_NODE_OR_INDENTLESS_SEQUENCE");
  $.Primitives_mirrorFunctionCacheName = "$cachedFunction";
  $.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
  $.Primitives_timerFrequency = null;
  $.Primitives_timerTicks = null;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $._nextCallback = null;
  $._lastCallback = null;
  $._lastPriorityCallback = null;
  $._isInCallbackLoop = false;
  $.Zone__current = C.C__RootZone;
  $.Expando__keyCount = 0;
  $.Stopwatch__frequency = null;
  $.Element__parseDocument = null;
  $.Element__parseRange = null;
  $.Element__defaultValidator = null;
  $.Element__defaultSanitizer = null;
  $.Device__isOpera = null;
  $.Device__isIE = null;
  $.Device__isFirefox = null;
  $.Device__isWebKit = null;
  $.Device__cachedCssPrefix = null;
  $._shellWrangler = null;
  $._package = null;
  $.ProcessRunner__shellWrangler = null;
  $.ViewRegistry__instance = null;
  $.Dependencies__global = null;
  $._override = null;
  $._promptOptIntoAnalyticsStarted = false;
  $.ConsoleView__idCount = 0;
  $.Launch__id = 0;
  $._configureErrorsPrefPath = "dartlang.configureErrorsView";
  $.pluginVersion = null;
  $.SdkManager__minVersion = null;
  $._atomUsesShadowDOM = null;
  $.hierarchicalLoggingEnabled = false;
  $.recordStackTraceAtLevel = C.Level_OFF_2000;
  $._rootLevel = C.Level_INFO_800;
  $.LogRecord__nextNumber = 0;
  $.CodeSyntax__pattern = "(`+(?!`))((?:.|\\n)*?[^`])\\1(?!`)";
  $._currentUriBase = null;
  $._current = null;
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    $dart_deferred_initializers$[hunkHash]($globals$, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryUris = {};
  init.deferredLibraryHashes = {};
  // Empty type-to-interceptor map.
  (function(lazies) {
    for (var i = 0; i < lazies.length;) {
      var fieldName = lazies[i++];
      var getterName = lazies[i++];
      var lazyValue = lazies[i++];
      var staticName = lazies[i++];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartClosure");
  }, "DART_CLOSURE_PROPERTY_NAME", "IsolateNatives_thisScript", "$get$IsolateNatives_thisScript", function() {
    return H.IsolateNatives_computeThisScript();
  }, "IsolateNatives_thisScript", "IsolateNatives_workerIds", "$get$IsolateNatives_workerIds", function() {
    if (typeof WeakMap == "function")
      var t1 = new WeakMap();
    else {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      t1 = "expando$key$" + t1;
    }
    return new P.Expando(null, t1, [P.$int]);
  }, "IsolateNatives_workerIds", "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_noSuchMethodPattern", "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_notClosurePattern", "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
  }, "TypeErrorDecoder_nullCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralCallPattern", "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralCallPattern", "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
  }, "TypeErrorDecoder_nullPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
    return P._AsyncRun__initializeScheduleImmediate();
  }, "_AsyncRun__scheduleImmediateClosure", "Future__nullFuture", "$get$Future__nullFuture", function() {
    return P.Future_Future$value(null, null);
  }, "Future__nullFuture", "_toStringVisiting", "$get$_toStringVisiting", function() {
    return [];
  }, "_toStringVisiting", "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", function() {
    return H.NativeInt8List_NativeInt8List$fromList([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2]);
  }, "_Base64Decoder__inverseAlphabet", "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", function() {
    return P.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", true, false);
  }, "_Uri__needsNoEncoding", "_scannerTables", "$get$_scannerTables", function() {
    return P._createTables();
  }, "_scannerTables", "CssStyleDeclaration__propertyCache", "$get$CssStyleDeclaration__propertyCache", function() {
    return {};
  }, "CssStyleDeclaration__propertyCache", "_HEIGHT", "$get$_HEIGHT", function() {
    return ["top", "bottom"];
  }, "_HEIGHT", "_WIDTH", "$get$_WIDTH", function() {
    return ["right", "left"];
  }, "_WIDTH", "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", function() {
    return P.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], null);
  }, "_Html5NodeValidator__allowedElements", "_Html5NodeValidator__attributeValidators", "$get$_Html5NodeValidator__attributeValidators", function() {
    return P.LinkedHashMap__makeEmpty();
  }, "_Html5NodeValidator__attributeValidators", "CssClassSetImpl__validTokenRE", "$get$CssClassSetImpl__validTokenRE", function() {
    return P.RegExp_RegExp("^\\S+$", true, false);
  }, "CssClassSetImpl__validTokenRE", "context", "$get$context", function() {
    return P._wrapToDart(self);
  }, "context", "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartObject");
  }, "_DART_OBJECT_PROPERTY_NAME", "_dartProxyCtor", "$get$_dartProxyCtor", function() {
    return function DartObject(o) {
      this.o = o;
    };
  }, "_dartProxyCtor", "atom", "$get$atom", function() {
    var t1 = new E.Atom(null, null, null, null, null, null, null, null, null, J.$index$asx($.$get$context(), "atom"));
    t1.Atom$0();
    return t1;
  }, "atom", "_logger20", "$get$_logger20", function() {
    return N.Logger_Logger("command");
  }, "_logger20", "ContextMenuItem_separator", "$get$ContextMenuItem_separator", function() {
    return new D._SeparatorMenuItem("", "");
  }, "ContextMenuItem_separator", "fs", "$get$fs", function() {
    var t1, t2;
    t1 = Y.require("os");
    t2 = $.$get$isWindows() === true ? "\\" : "/";
    return new F.FS(t1, t2, Y.require("fs"));
  }, "fs", "process", "$get$process", function() {
    return new X.Process(Y.require("process"));
  }, "process", "isWindows", "$get$isWindows", function() {
    var t1 = $.$get$process();
    return J.startsWith$1$s(t1.get$platform(t1), "win");
  }, "isWindows", "isMac", "$get$isMac", function() {
    var t1 = $.$get$process();
    return J.$eq$(t1.get$platform(t1), "darwin");
  }, "isMac", "isLinux", "$get$isLinux", function() {
    return $.$get$isWindows() !== true && $.$get$isMac() !== true;
  }, "isLinux", "isPosix", "$get$isPosix", function() {
    return $.$get$isWindows() !== true;
  }, "isPosix", "_logger4", "$get$_logger4", function() {
    return N.Logger_Logger("process");
  }, "_logger4", "shell", "$get$shell", function() {
    return new F.Shell(Y.require("shell"));
  }, "shell", "_logger9", "$get$_logger9", function() {
    return N.Logger_Logger("workspace");
  }, "_logger9", "_browserWindow", "$get$_browserWindow", function() {
    return P.JsObject_JsObject$fromBrowserObject(J.$index$asx($.$get$context(), "window"));
  }, "_browserWindow", "_browserJson", "$get$_browserJson", function() {
    return J.$index$asx($.$get$_browserWindow(), "JSON");
  }, "_browserJson", "_logger8", "$get$_logger8", function() {
    return N.Logger_Logger("js");
  }, "_logger8", "_logger0", "$get$_logger0", function() {
    return N.Logger_Logger("disposable");
  }, "_logger0", "idRegex", "$get$idRegex", function() {
    return P.RegExp_RegExp("[_a-zA-Z0-9]", true, false);
  }, "idRegex", "_logger7", "$get$_logger7", function() {
    return N.Logger_Logger("analysis_server_lib");
  }, "_logger7", "_logger18", "$get$_logger18", function() {
    return N.Logger_Logger("atom.buffer_observer");
  }, "_logger18", "DartAutocompleteProvider__rightLabelMap", "$get$DartAutocompleteProvider__rightLabelMap", function() {
    return P.LinkedHashMap__makeLiteral([null, null, "FUNCTION_TYPE_ALIAS", "function type"]);
  }, "DartAutocompleteProvider__rightLabelMap", "DartAutocompleteProvider__elided", "$get$DartAutocompleteProvider__elided", function() {
    return P.LinkedHashSet_LinkedHashSet$from(["for ()"], null);
  }, "DartAutocompleteProvider__elided", "_htmlRegex", "$get$_htmlRegex", function() {
    return P.RegExp_RegExp("<[^>]+>", true, false);
  }, "_htmlRegex", "NavigationHelper__timeout", "$get$NavigationHelper__timeout", function() {
    return P.Duration$(0, 0, 0, 1000, 0, 0);
  }, "NavigationHelper__timeout", "_logger25", "$get$_logger25", function() {
    return N.Logger_Logger("find_type");
  }, "_logger25", "_logger19", "$get$_logger19", function() {
    return N.Logger_Logger("formatting");
  }, "_logger19", "FindReferencesView__cachePrefix", "$get$FindReferencesView__cachePrefix", function() {
    var t1 = $.$get$fs().separator;
    return t1 + ".pub-cache" + t1;
  }, "FindReferencesView__cachePrefix", "FindReferencesView__pubPrefix", "$get$FindReferencesView__pubPrefix", function() {
    var t1 = $.$get$fs().separator;
    return "hosted" + t1 + "pub.dartlang.org" + t1;
  }, "FindReferencesView__pubPrefix", "FindReferencesView__libPrefix", "$get$FindReferencesView__libPrefix", function() {
    var t1 = $.$get$fs().separator;
    return t1 + "lib" + t1;
  }, "FindReferencesView__libPrefix", "_logger5", "$get$_logger5", function() {
    return N.Logger_Logger("analysis-server");
  }, "_logger5", "_logger34", "$get$_logger34", function() {
    return N.Logger_Logger("atom.autocomplete");
  }, "_logger34", "_overrides", "$get$_overrides", function() {
    return [];
  }, "_overrides", "_logger17", "$get$_logger17", function() {
    return N.Logger_Logger("atom.atom_package_deps");
  }, "_logger17", "dartino", "$get$dartino", function() {
    return new A._Dartino(new L.Disposables(true, []), false);
  }, "dartino", "_logger3", "$get$_logger3", function() {
    return N.Logger_Logger("dartino");
  }, "_logger3", "_checkedDirectories", "$get$_checkedDirectories", function() {
    return P.LinkedHashSet_LinkedHashSet(null, null, null, F.Directory);
  }, "_checkedDirectories", "_logger28", "$get$_logger28", function() {
    return N.Logger_Logger("atom.dartino_launch");
  }, "_logger28", "_logger31", "$get$_logger31", function() {
    return N.Logger_Logger("atom.breakpoints");
  }, "_logger31", "_logger11", "$get$_logger11", function() {
    return N.Logger_Logger("atom.debugger");
  }, "_logger11", "_logger30", "$get$_logger30", function() {
    return N.Logger_Logger("atom.debugger_ui");
  }, "_logger30", "_logger10", "$get$_logger10", function() {
    return N.Logger_Logger("atom.observatory");
  }, "_logger10", "WebSocket__WebSocket", "$get$WebSocket__WebSocket", function() {
    return Y.require("ws");
  }, "WebSocket__WebSocket", "_flashDuration", "$get$_flashDuration", function() {
    return P.Duration$(0, 0, 0, 100, 0, 0);
  }, "_flashDuration", "Strobe__halfDuration", "$get$Strobe__halfDuration", function() {
    return P.Duration$(0, 0, 0, 100, 0, 0);
  }, "Strobe__halfDuration", "Strobe__fullDuration", "$get$Strobe__fullDuration", function() {
    return P.Duration$(0, 0, 0, 200, 0, 0);
  }, "Strobe__fullDuration", "_logger23", "$get$_logger23", function() {
    return N.Logger_Logger("error_repository");
  }, "_logger23", "_logger22", "$get$_logger22", function() {
    return N.Logger_Logger("flutter");
  }, "_logger22", "flutter", "$get$flutter", function() {
    return new V.Flutter();
  }, "flutter", "_logger15", "$get$_logger15", function() {
    return N.Logger_Logger("flutter_daemon");
  }, "_logger15", "OperationResult_ok", "$get$OperationResult_ok", function() {
    return new T.OperationResult(P.LinkedHashMap__makeLiteral(["code", 0, "message", "ok"]));
  }, "OperationResult_ok", "FlutterDeviceManager_runModes", "$get$FlutterDeviceManager_runModes", function() {
    return [new R.BuildMode("debug", true, true), new R.BuildMode("profile", true, false), new R.BuildMode("release", false, false)];
  }, "FlutterDeviceManager_runModes", "_logger13", "$get$_logger13", function() {
    return N.Logger_Logger("atom.flutter_ext");
  }, "_logger13", "_logger12", "$get$_logger12", function() {
    return N.Logger_Logger("atom.flutter_launch");
  }, "_logger12", "_flutterSdk1", "$get$_flutterSdk1", function() {
    return Q.deps().$index(0, C.Type_FlutterSdkManager_Ag3);
  }, "_flutterSdk1", "_logger24", "$get$_logger24", function() {
    return N.Logger_Logger("flutter.sdk");
  }, "_logger24", "_flutterSdk0", "$get$_flutterSdk0", function() {
    return Q.deps().$index(0, C.Type_FlutterSdkManager_Ag3);
  }, "_flutterSdk0", "_flutterSdk2", "$get$_flutterSdk2", function() {
    return Q.deps().$index(0, C.Type_FlutterSdkManager_Ag3);
  }, "_flutterSdk2", "_logger33", "$get$_logger33", function() {
    return N.Logger_Logger("changelog");
  }, "_logger33", "_logger21", "$get$_logger21", function() {
    return N.Logger_Logger("editing");
  }, "_logger21", "_logger16", "$get$_logger16", function() {
    return N.Logger_Logger("atom.navigation");
  }, "_logger16", "_logger26", "$get$_logger26", function() {
    return N.Logger_Logger("atom.outline");
  }, "_logger26", "_logger6", "$get$_logger6", function() {
    return N.Logger_Logger("atom.status");
  }, "_logger6", "_flutterSdk", "$get$_flutterSdk", function() {
    return Q.deps().$index(0, C.Type_FlutterSdkManager_Ag3);
  }, "_flutterSdk", "_sep", "$get$_sep", function() {
    return $.$get$fs().separator;
  }, "_sep", "_logger1", "$get$_logger1", function() {
    return N.Logger_Logger("jobs");
  }, "_logger1", "_rand", "$get$_rand", function() {
    return P.Random_Random(null);
  }, "_rand", "LaunchData__mainRegex", "$get$LaunchData__mainRegex", function() {
    return P.RegExp_RegExp("main *\\(", true, false);
  }, "LaunchData__mainRegex", "_logger14", "$get$_logger14", function() {
    return N.Logger_Logger("atom.launch_configs");
  }, "_logger14", "_logger27", "$get$_logger27", function() {
    return N.Logger_Logger("atom.run");
  }, "_logger27", "_severityMap", "$get$_severityMap", function() {
    return P.LinkedHashMap__makeLiteral(["ERROR", "Error", "WARNING", "Warning", "INFO", "Info"]);
  }, "_severityMap", "_processedErrorsController", "$get$_processedErrorsController", function() {
    return P.StreamController_StreamController$broadcast(null, null, false, null);
  }, "_processedErrorsController", "_logger29", "$get$_logger29", function() {
    return N.Logger_Logger("atom.material");
  }, "_logger29", "_logger", "$get$_logger", function() {
    return N.Logger_Logger("plugin");
  }, "_logger", "_logger2", "$get$_logger2", function() {
    return N.Logger_Logger("projects");
  }, "_logger2", "_bazelDartRegex", "$get$_bazelDartRegex", function() {
    return P.RegExp_RegExp("[\\W_]dart[\\W_]", true, false);
  }, "_bazelDartRegex", "_bazelFlutterRegex", "$get$_bazelFlutterRegex", function() {
    return P.RegExp_RegExp("[\\W_]flutter[\\W_]", true, false);
  }, "_bazelFlutterRegex", "_logger32", "$get$_logger32", function() {
    return N.Logger_Logger("sdk");
  }, "_logger32", "state", "$get$state", function() {
    return new K.State(P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
  }, "state", "_ga", "$get$_ga", function() {
    return new F.AnalyticsMock(false, false, true);
  }, "_ga", "Haikunator_rndm", "$get$Haikunator_rndm", function() {
    return P.Random_Random(null);
  }, "Haikunator_rndm", "Haikunator_ADJECTIVES", "$get$Haikunator_ADJECTIVES", function() {
    return ["autumn", "hidden", "bitter", "misty", "silent", "empty", "dry", "dark", "summer", "icy", "delicate", "quiet", "white", "cool", "spring", "winter", "patient", "twilight", "dawn", "crimson", "wispy", "weathered", "blue", "billowing", "broken", "cold", "damp", "falling", "frosty", "green", "long", "late", "lingering", "bold", "little", "morning", "muddy", "old", "red", "rough", "still", "small", "sparkling", "throbbing", "shy", "wandering", "withered", "wild", "black", "young", "holy", "solitary", "fragrant", "aged", "snowy", "proud", "floral", "restless", "divine", "polished", "ancient", "purple", "lively", "nameless", "lucky", "odd", "tiny", "free", "dry", "yellow", "orange", "gentle", "tight", "super", "royal", "broad", "steep", "flat", "square", "round", "mute", "noisy", "hushy", "raspy", "soft", "shrill", "rapid", "sweet", "curly", "calm", "jolly", "fancy", "plain", "shinny"];
  }, "Haikunator_ADJECTIVES", "Haikunator_NOUNS", "$get$Haikunator_NOUNS", function() {
    return ["waterfall", "river", "breeze", "moon", "rain", "wind", "sea", "morning", "snow", "lake", "sunset", "pine", "shadow", "leaf", "dawn", "glitter", "forest", "hill", "cloud", "meadow", "sun", "glade", "bird", "brook", "butterfly", "bush", "dew", "dust", "field", "fire", "flower", "firefly", "feather", "grass", "haze", "mountain", "night", "pond", "darkness", "snowflake", "silence", "sound", "sky", "shape", "surf", "thunder", "violet", "water", "wildflower", "wave", "water", "resonance", "sun", "wood", "dream", "cherry", "tree", "fog", "frost", "voice", "paper", "frog", "smoke", "star", "atom", "band", "bar", "base", "block", "boat", "term", "credit", "art", "fashion", "truth", "disk", "math", "unit", "cell", "scene", "heart", "recipe", "union", "limit", "bread", "toast", "bonus", "lab", "mud", "mode", "poetry", "tooth", "hall", "king", "queen", "lion", "tiger", "penguin", "kiwi", "cake", "mouse", "rice", "coke", "hola", "salad", "hat"];
  }, "Haikunator_NOUNS", "Logger_root", "$get$Logger_root", function() {
    return N.Logger_Logger("");
  }, "Logger_root", "Logger__loggers", "$get$Logger__loggers", function() {
    return P.LinkedHashMap_LinkedHashMap$_empty(P.String, N.Logger);
  }, "Logger__loggers", "_emptyPattern", "$get$_emptyPattern", function() {
    return P.RegExp_RegExp("^(?:[ \\t]*)$", true, false);
  }, "_emptyPattern", "_setextPattern", "$get$_setextPattern", function() {
    return P.RegExp_RegExp("^[ ]{0,3}(=+|-+)\\s*$", true, false);
  }, "_setextPattern", "_headerPattern", "$get$_headerPattern", function() {
    return P.RegExp_RegExp("^(#{1,6})[ \\x09\\x0b\\x0c](.*?)#*$", true, false);
  }, "_headerPattern", "_blockquotePattern", "$get$_blockquotePattern", function() {
    return P.RegExp_RegExp("^[ ]{0,3}>[ ]?(.*)$", true, false);
  }, "_blockquotePattern", "_indentPattern", "$get$_indentPattern", function() {
    return P.RegExp_RegExp("^(?:    |\\t)(.*)$", true, false);
  }, "_indentPattern", "_codePattern", "$get$_codePattern", function() {
    return P.RegExp_RegExp("^[ ]{0,3}(`{3,}|~{3,})(.*)$", true, false);
  }, "_codePattern", "_hrPattern", "$get$_hrPattern", function() {
    return P.RegExp_RegExp("^ {0,3}([-*_]) *\\1 *\\1(?:\\1| )*$", true, false);
  }, "_hrPattern", "_ulPattern", "$get$_ulPattern", function() {
    return P.RegExp_RegExp("^([ ]{0,3})()([*+-])(([ \\t])([ \\t]*)(.*))?$", true, false);
  }, "_ulPattern", "_olPattern", "$get$_olPattern", function() {
    return P.RegExp_RegExp("^([ ]{0,3})(\\d{1,9})([\\.)])(([ \\t])([ \\t]*)(.*))?$", true, false);
  }, "_olPattern", "ParagraphSyntax__reflinkDefinitionStart", "$get$ParagraphSyntax__reflinkDefinitionStart", function() {
    return P.RegExp_RegExp("[ ]{0,3}\\[", true, false);
  }, "ParagraphSyntax__reflinkDefinitionStart", "ParagraphSyntax__whitespacePattern", "$get$ParagraphSyntax__whitespacePattern", function() {
    return P.RegExp_RegExp("^\\s*$", true, false);
  }, "ParagraphSyntax__whitespacePattern", "ExtensionSet_commonMark", "$get$ExtensionSet_commonMark", function() {
    return new E.ExtensionSet([C.C_FencedCodeBlockSyntax], [new R.InlineHtmlSyntax(null, P.RegExp_RegExp("<[/!?]?[A-Za-z][A-Za-z0-9-]*(?: [^>]*)?>", true, true))]);
  }, "ExtensionSet_commonMark", "HtmlRenderer__blockTags", "$get$HtmlRenderer__blockTags", function() {
    return P.RegExp_RegExp("blockquote|h1|h2|h3|h4|h5|h6|hr|p|pre", true, false);
  }, "HtmlRenderer__blockTags", "InlineParser__defaultSyntaxes", "$get$InlineParser__defaultSyntaxes", function() {
    var t1 = R.InlineSyntax;
    return P.List_List$unmodifiable(H.setRuntimeTypeInfo([new R.AutolinkSyntax(P.RegExp_RegExp("<(([a-zA-Z][a-zA-Z\\-\\+\\.]+):(?://)?[^>]*)>", true, true)), new R.LineBreakSyntax(P.RegExp_RegExp("(?:\\\\|  +)\\n", true, true)), R.LinkSyntax$(null, "\\["), R.ImageSyntax$(null), new R.EscapeSyntax(P.RegExp_RegExp("\\\\[!\"#$%&'()*+,\\-./:;<=>?@\\[\\\\\\]^_`{|}~]", true, true)), R.TextSyntax$(" \\* ", null), R.TextSyntax$(" _ ", null), R.TextSyntax$("&[#a-zA-Z0-9]*;", null), R.TextSyntax$("&", "&amp;"), R.TextSyntax$("<", "&lt;"), R.TagSyntax$("\\*\\*", null, "strong"), R.TagSyntax$("\\b__", "__\\b", "strong"), R.TagSyntax$("\\*", null, "em"), R.TagSyntax$("\\b_", "_\\b", "em"), new R.CodeSyntax(P.RegExp_RegExp($.CodeSyntax__pattern, true, true))], [t1]), t1);
  }, "InlineParser__defaultSyntaxes", "context0", "$get$context0", function() {
    return new M.Context($.$get$Style_platform(), null);
  }, "context0", "Style_posix", "$get$Style_posix", function() {
    return new E.PosixStyle("posix", "/", C.List_cSk, P.RegExp_RegExp("/", true, false), P.RegExp_RegExp("[^/]$", true, false), P.RegExp_RegExp("^/", true, false), null);
  }, "Style_posix", "Style_windows", "$get$Style_windows", function() {
    return new L.WindowsStyle("windows", "\\", C.List_WnV, P.RegExp_RegExp("[/\\\\]", true, false), P.RegExp_RegExp("[^/\\\\]$", true, false), P.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", true, false), P.RegExp_RegExp("^[/\\\\](?![/\\\\])", true, false));
  }, "Style_windows", "Style_url", "$get$Style_url", function() {
    return new F.UrlStyle("url", "/", C.List_cSk, P.RegExp_RegExp("/", true, false), P.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", true, false), P.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", true, false), P.RegExp_RegExp("^/", true, false));
  }, "Style_url", "Style_platform", "$get$Style_platform", function() {
    return O.Style__getPlatformStyle();
  }, "Style_platform", "START_VERSION", "$get$START_VERSION", function() {
    return P.RegExp_RegExp("^(\\d+).(\\d+).(\\d+)(-([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?(\\+([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?", true, false);
  }, "START_VERSION", "COMPLETE_VERSION", "$get$COMPLETE_VERSION", function() {
    return P.RegExp_RegExp($.$get$START_VERSION().pattern + "$", true, false);
  }, "COMPLETE_VERSION", "_newlineRegExp", "$get$_newlineRegExp", function() {
    return P.RegExp_RegExp("\\r\\n?|\\n", true, false);
  }, "_newlineRegExp", "_pathRegex", "$get$_pathRegex", function() {
    return P.RegExp_RegExp("file:/\\S+/(\\S+\\.dart)", true, false);
  }, "_pathRegex", "_typeFactories", "$get$_typeFactories", function() {
    return P.LinkedHashMap__makeLiteral(["BoundField", S.vm_service_lib_BoundField_parse$closure(), "BoundVariable", S.vm_service_lib_BoundVariable_parse$closure(), "Breakpoint", S.vm_service_lib_Breakpoint_parse$closure(), "@Class", S.vm_service_lib_ClassRef_parse$closure(), "Class", S.vm_service_lib_Class_parse$closure(), "ClassList", S.vm_service_lib_ClassList_parse$closure(), "@Code", S.vm_service_lib_CodeRef_parse$closure(), "Code", S.vm_service_lib_Code_parse$closure(), "@Context", S.vm_service_lib_ContextRef_parse$closure(), "Context", S.vm_service_lib_Context_parse$closure(), "ContextElement", S.vm_service_lib_ContextElement_parse$closure(), "@Error", S.vm_service_lib_ErrorRef_parse$closure(), "Error", S.vm_service_lib_Error_parse$closure(), "Event", S.vm_service_lib_Event_parse$closure(), "ExtensionData", S.vm_service_lib_ExtensionData_parse$closure(), "@Field", S.vm_service_lib_FieldRef_parse$closure(), "Field", S.vm_service_lib_Field_parse$closure(), "Flag", S.vm_service_lib_Flag_parse$closure(), "FlagList", S.vm_service_lib_FlagList_parse$closure(), "Frame", S.vm_service_lib_Frame_parse$closure(), "@Function", S.vm_service_lib_FuncRef_parse$closure(), "Function", S.vm_service_lib_Func_parse$closure(), "@Instance", S.vm_service_lib_InstanceRef_parse$closure(), "Instance", S.vm_service_lib_Instance_parse$closure(), "@Isolate", S.vm_service_lib_IsolateRef_parse$closure(), "Isolate", S.vm_service_lib_Isolate_parse$closure(), "@Library", S.vm_service_lib_LibraryRef_parse$closure(), "Library", S.vm_service_lib_Library_parse$closure(), "LibraryDependency", S.vm_service_lib_LibraryDependency_parse$closure(), "MapAssociation", S.vm_service_lib_MapAssociation_parse$closure(), "Message", S.vm_service_lib_Message_parse$closure(), "@Null", S.vm_service_lib_NullRef_parse$closure(), "Null", S.vm_service_lib_Null_parse$closure(), "@Object", S.vm_service_lib_ObjRef_parse$closure(), "Object", S.vm_service_lib_Obj_parse$closure(), "Response", S.vm_service_lib_Response_parse$closure(), "Sentinel", S.vm_service_lib_Sentinel_parse$closure(), "@Script", S.vm_service_lib_ScriptRef_parse$closure(), "Script", S.vm_service_lib_Script_parse$closure(), "SourceLocation", S.vm_service_lib_SourceLocation_parse$closure(), "SourceReport", S.vm_service_lib_SourceReport_parse$closure(), "SourceReportCoverage", S.vm_service_lib_SourceReportCoverage_parse$closure(), "SourceReportRange", S.vm_service_lib_SourceReportRange_parse$closure(), "Stack", S.vm_service_lib_Stack_parse$closure(), "Success", S.vm_service_lib_Success_parse$closure(), "TimelineEvent", S.vm_service_lib_TimelineEvent_parse$closure(), "@TypeArguments", S.vm_service_lib_TypeArgumentsRef_parse$closure(), "TypeArguments", S.vm_service_lib_TypeArguments_parse$closure(), "UnresolvedSourceLocation", S.vm_service_lib_UnresolvedSourceLocation_parse$closure(), "Version", S.vm_service_lib_Version_parse$closure(), "@VM", S.vm_service_lib_VMRef_parse$closure(), "VM", S.vm_service_lib_VM_parse$closure()]);
  }, "_typeFactories", "yamlWarningCallback", "$get$yamlWarningCallback", function() {
    return new B.closure4();
  }, "yamlWarningCallback"]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = ["e", "_", null, "result", "str", "obj", "m", "value", "error", "editor", "message", "data", "event", "isolate", "code", "val", "stackTrace", "device", "v", "s", "element", "dir", "node", "name", "project", "bp", "pos", "response", "o", "projects", "change", "edit", "l", "exitCode", "status", "view", "arg", "position", "c", "each", "log", "sdkPath", "r", "options", "i", "item", "entry", "line", "invocation", "obsIsolate", "key", "active", "navInfo", "object", "x", "newName", "length", "attributeName", "context", "connection", "results", "index", false, "location", "frame", "ver", "uris", "vmBreakpoint", "match", "path", "sdk", "errors", "description", "st", "config", "launch", "tab", "version", "when", "child", "field", "g", "newSdk", 0, "busy", "encodedComponent", "grainOffset", "suggestions", "jsEditor", "info", "theError", "debugger", "nb", "xhr", "gutter", "evt", "errorCallback", "resolve", "reject", "_this", "theStackTrace", "variable", "attr", "grainDuration", "vm", "arg1", "didFormat", "arg4", "libraryRef", "stack", "ret", "association", "state", "map", "obj2", "n", "sender", "analysisErrors", "analysisFlushResults", "apps", "searchTerm", "quiet", "callback", true, "deviceId", "projectDirectory", "startPaused", "route", "obj1", "target", "enableHotReload", "app", "daemon", "captureThis", "self", "arguments", "currentVersion", "contents", "file", "arg2", "success", "choice", "ed", "pluginVer", "flags", "errorCode", "runnables", "runnable", "devices", "closure", "numberOfArguments", "port", "text", "id", "launchable", "a", "items", "b", "allPaths", "p", "command", "aIndex", "bIndex", "part", "start", "end", "offset", "color", "arg3", "currentProjects", "json", "mode", "k"];
  init.types = [{func: 1, args: [,]}, {func: 1}, {func: 1, v: true}, {func: 1, args: [P.String]}, {func: 1, args: [,,]}, {func: 1, ret: P.Future}, {func: 1, v: true, args: [D.AtomEvent]}, {func: 1, v: true, args: [Y.TextEditor]}, {func: 1, args: [Y.TextEditor]}, {func: 1, v: true, args: [Z.DebugIsolate]}, {func: 1, v: true, args: [P.String]}, {func: 1, args: [A.AtomBreakpoint]}, {func: 1, args: [W.MouseEvent]}, {func: 1, args: [P.JsObject]}, {func: 1, v: true, opt: [,]}, {func: 1, v: true, args: [,]}, {func: 1, args: [D.AtomEvent]}, {func: 1, v: true, args: [X.Launch]}, {func: 1, args: [P.bool]}, {func: 1, args: [P.$int]}, {func: 1, ret: P.bool}, {func: 1, args: [E.SourceFileEdit]}, {func: 1, v: true, args: [T.Node0]}, {func: 1, args: [S.Event1]}, {func: 1, args: [T.Device]}, {func: 1, args: [T.AppEvent]}, {func: 1, ret: W.Node}, {func: 1, args: [X.ProcessResult]}, {func: 1, v: true, args: [{func: 1, v: true}]}, {func: 1, v: true, args: [P.String, P.$int, P.$int, P.String]}, {func: 1, v: true, opt: [D.AtomEvent]}, {func: 1, args: [Z.DebugConnection]}, {func: 1, v: true, args: [T.View]}, {func: 1, args: [[P.List, P.String]]}, {func: 1, args: [Z.DebugLocation]}, {func: 1, v: true, args: [T.Device]}, {func: 1, ret: [P.Future, X.Launch]}, {func: 1, v: true, args: [L.DartProject]}, {func: 1, args: [[P.List, L.DartProject]]}, {func: 1, args: [E.AvailableRefactoringsResult]}, {func: 1, args: [T.ProgressAppEvent]}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, args: [, P.StackTrace]}, {func: 1, args: [P.Map]}, {func: 1, v: true, args: [P.Object], opt: [P.StackTrace]}, {func: 1, args: [P.Object]}, {func: 1, v: true, args: [,], opt: [P.StackTrace]}, {func: 1, v: true, args: [P.bool]}, {func: 1, args: [,], opt: [,]}, {func: 1, args: [E.SourceChange]}, {func: 1, args: [M._Change]}, {func: 1, args: [E.SourceEdit]}, {func: 1, args: [L.RunnableConfig]}, {func: 1, v: true, args: [P.String], named: {length: P.$int, match: P.Match, position: P.$int}}, {func: 1, ret: P.$double, args: [P.$int]}, {func: 1, ret: P.String}, {func: 1, args: [E.AnalysisError]}, {func: 1, args: [[P.List, T.Device]]}, {func: 1, args: [T.Node1]}, {func: 1, args: [T.LogAppEvent]}, {func: 1, args: [W.Event]}, {func: 1, args: [P.CssClassSetImpl]}, {func: 1, args: [T.DebugPortAppEvent]}, {func: 1, args: [[P.Map, P.String,,]]}, {func: 1, args: [S.BoundField]}, {func: 1, args: [D.ObservatoryIsolate]}, {func: 1, v: true, args: [M.MTab]}, {func: 1, args: [S.Breakpoint]}, {func: 1, v: true, args: [S.Event1]}, {func: 1, args: [Z.DebugValue]}, {func: 1, ret: P.bool, args: [W.Element, P.String, P.String, W._Html5NodeValidator]}, {func: 1, args: [Q.LaunchConfiguration]}, {func: 1, ret: P.bool, args: [,]}, {func: 1, v: true, args: [P.Uint8List, P.String, P.$int]}, {func: 1, args: [P.String, P.Function]}, {func: 1, args: [S.JobStatus]}, {func: 1, ret: P.String, args: [P.$int]}, {func: 1, args: [P.bool, P.CssClassSetImpl]}, {func: 1, args: [L.DartProject]}, {func: 1, ret: P.Future, opt: [D.AtomEvent]}, {func: 1, args: [[P.List, X.Suggestion]]}, {func: 1, ret: P.JsObject, args: [,]}, {func: 1, v: true, args: [E.TypeHierarchyItem, W.Element]}, {func: 1, args: [P.$int, P.$int]}, {func: 1, v: true, args: [[P.List, L.DartProject]]}, {func: 1, v: true, args: [V.Sdk]}, {func: 1, args: [E.SearchResults]}, {func: 1, args: [E.ServerStatus]}, {func: 1, args: [E.ServerError]}, {func: 1, args: [E.SearchResult, E.SearchResult]}, {func: 1, v: true, args: [P.$int, P.$int]}, {func: 1, ret: P.JsObject, args: [X.Suggestion]}, {func: 1, ret: P.$int, args: [, P.$int]}, {func: 1, v: true, args: [, W.Element]}, {func: 1, ret: P.Future, args: [D.AtomEvent]}, {func: 1, args: [P.Symbol0,,]}, {func: 1, ret: [P.Future, P.Null], opt: [D.AtomEvent]}, {func: 1, args: [E.FindElementReferencesResult]}, {func: 1, ret: [P.Future, P.bool], args: [A.DartinoSdk], opt: [P.String]}, {func: 1, args: [E.RefactoringResult]}, {func: 1, ret: P.Future, args: [Q.DartinoLaunch]}, {func: 1, ret: [P.Future, P.bool]}, {func: 1, args: [[P.EventSink, P.String]]}, {func: 1, v: true, args: [P.String, P.$int]}, {func: 1, v: true, args: [P.String], opt: [,]}, {func: 1, ret: P.$int, args: [P.$int, P.$int]}, {func: 1, v: true, args: [,], opt: [,]}, {func: 1, ret: P.Uint8List, args: [,,]}, {func: 1, v: true, args: [, P.StackTrace]}, {func: 1, args: [A.ExceptionBreakType]}, {func: 1, args: [Z.DebugIsolate]}, {func: 1, v: true, named: {fullRestart: P.bool}}, {func: 1, args: [, P.String]}, {func: 1, v: true, args: [Z.DebugFrame, K.CoreElement]}, {func: 1, v: true, args: [Z.DebugFrame]}, {func: 1, v: true, args: [Z.DebugVariable, K.CoreElement]}, {func: 1, v: true, args: [Z.DebugVariable]}, {func: 1, ret: P.bool, args: [Z.DebugVariable]}, {func: 1, args: [E.FormatResult]}, {func: 1, v: true, args: [D.ObservatoryLibrary, K.CoreElement]}, {func: 1, ret: P.$int, args: [D.ObservatoryLibrary, D.ObservatoryLibrary]}, {func: 1, ret: P.bool, args: [D.ObservatoryLibrary]}, {func: 1, v: true, args: [Z.DebugIsolate, K.CoreElement]}, {func: 1, v: true, opt: [A.AtomBreakpoint]}, {func: 1, v: true, args: [A.AtomBreakpoint, K.CoreElement]}, {func: 1, args: [F.MessageEvent]}, {func: 1, args: [E.SearchResult]}, {func: 1, ret: P.Object, opt: [P.Object]}, {func: 1, args: [S.Version0]}, {func: 1, args: [S.VM]}, {func: 1, args: [A.AtomBreakpoint, S.Breakpoint]}, {func: 1, args: [E.AnalysisNavigation]}, {func: 1, v: true, args: [E.AnalysisNavigation]}, {func: 1, opt: [D.ObservatoryIsolate]}, {func: 1, args: [S.Isolate]}, {func: 1, args: [S.Stack]}, {func: 1, args: [S.Frame]}, {func: 1, args: [S.BoundVariable]}, {func: 1, args: [S.MapAssociation]}, {func: 1, v: true, args: [P.String, P.String]}, {func: 1, args: [E.Position]}, {func: 1, args: [E.SourceEdit, E.SourceEdit]}, {func: 1, v: true, args: [P.String], opt: [P.bool]}, {func: 1, v: true, args: [W.KeyboardEvent]}, {func: 1, v: true, args: [E.AnalysisErrors]}, {func: 1, v: true, args: [E.AnalysisFlushResults]}, {func: 1, v: true, args: [[P.List, T.DiscoveredApp]]}, {func: 1, v: true, args: [Y.FlutterSdk], named: {quiet: P.bool}}, {func: 1, args: [T.LogMessage]}, {func: 1, ret: [P.Future, W.File0]}, {func: 1, ret: [P.Future, P.String]}, {func: 1, ret: [P.Future, T.AppStartedResult], args: [P.String, P.String], named: {enableHotReload: P.bool, mode: P.String, route: P.String, startPaused: P.bool, target: P.String}}, {func: 1, args: [E.HoverResult]}, {func: 1, args: [W.HttpRequest]}, {func: 1, args: [, K.OverlayInfo]}, {func: 1, args: [P.String,,]}, {func: 1, args: [Y.Gutter]}, {func: 1, args: [P.List]}, {func: 1, v: true, args: [T.FlutterDaemon]}, {func: 1, args: [{func: 1, v: true}]}, {func: 1, v: true, args: [{func: 1, v: true, args: [,]}]}, {func: 1, v: true, args: [D.ObservatoryIsolate]}, {func: 1, ret: P.Object}, {func: 1, args: [T.AppStartedResult]}, {func: 1, args: [T.OperationResult]}, {func: 1, args: [F.File]}, {func: 1, v: true, args: [[P.List, E.AnalysisError]]}, {func: 1, args: [Y.Range]}, {func: 1, ret: W.Element, args: [E.AnalysisError]}, {func: 1, v: true, args: [E.AnalysisOutline]}, {func: 1, v: true, opt: [[P.List, E.AnalysisError]]}, {func: 1, v: true, args: [Y.Point0]}, {func: 1, v: true, args: [E.Outline, W.Element]}, {func: 1, v: true, args: [,,]}, {func: 1, ret: [P.List, W.RtcStatsReport]}, {func: 1, args: [[P.List, P.bool]]}, {func: 1, args: [P.bool, P.bool]}, {func: 1, args: [V.Sdk]}, {func: 1, opt: [P.bool]}, {func: 1, args: [E.DiagnosticsResult]}, {func: 1, args: [E.ContextData]}, {func: 1, args: [K.TestRunner]}, {func: 1, ret: L.Disposable, args: [{func: 1, v: true}]}, {func: 1, args: [P.$int,,]}, {func: 1, args: [[P.List, L.RunnableConfig]]}, {func: 1, args: [W.Element]}, {func: 1, v: true, args: [P.$int]}, {func: 1, args: [X.TextFragment]}, {func: 1, v: true, opt: [X.Launch]}, {func: 1, args: [X.Launch]}, {func: 1, args: [E.CreateContextResult]}, {func: 1, args: [Q._ProjectConfigurations]}, {func: 1, opt: [,]}, {func: 1, args: [X.Launchable]}, {func: 1, args: [P.String, [P.List, E.AnalysisError]]}, {func: 1, args: [D.NotificationButton]}, {func: 1, v: true, args: [P.Map]}, {func: 1, v: true, args: [[P.List, P.String]]}, {func: 1, args: [P.StreamSubscription]}, {func: 1, args: [F.Directory]}, {func: 1, args: [P.String, K.StateStorable]}, {func: 1, ret: P.Stream, args: [P.String], opt: [P.Map]}, {func: 1, v: true, opt: [P.num]}, {func: 1, args: [P.$int, T.Node0]}, {func: 1, v: true, args: [N.Level,,], opt: [P.Object, P.StackTrace, P.Zone]}, {func: 1, v: true, args: [P.num], opt: [P.num, P.num]}, {func: 1, v: true, args: [U.ListItem]}, {func: 1, args: [P.RegExp]}, {func: 1, ret: P.$int, args: [,]}, {func: 1, ret: Y.FileSpan, args: [P.$int], opt: [P.$int]}, {func: 1, ret: Y.FileLocation, args: [P.$int]}, {func: 1, ret: P.String, args: [P.String], named: {color: null}}, {func: 1, ret: P.String, named: {color: null}}, {func: 1, ret: P.Index, args: [P.String]}, {func: 1, args: [N.LogRecord]}, {func: 1, ret: P.num}, {func: 1, v: true, opt: [P.Object]}, {func: 1, ret: P.$int, args: [P.Comparable, P.Comparable]}, {func: 1, ret: P.bool, args: [P.Object, P.Object]}, {func: 1, ret: P.$int, args: [P.Object]}, {func: 1, ret: P.$int, args: [P.String]}, {func: 1, ret: P.$double, args: [P.String]}, {func: 1, ret: [P.Future, W.HttpRequest], args: [P.String], named: {method: P.String, mimeType: P.String, onProgress: {func: 1, v: true, args: [W.ProgressEvent]}, requestHeaders: [P.Map, P.String, P.String], responseType: P.String, sendData: null, withCredentials: P.bool}}, {func: 1, v: true, args: [W.Node, W.Node]}, {func: 1, ret: P.Object, args: [,]}, {func: 1, ret: E.ServerError, args: [P.Map]}, {func: 1, ret: E.ServerStatus, args: [P.Map]}, {func: 1, ret: E.VersionResult, args: [P.Map]}, {func: 1, ret: E.AnalysisErrors, args: [P.Map]}, {func: 1, ret: E.AnalysisFlushResults, args: [P.Map]}, {func: 1, ret: E.AnalysisNavigation, args: [P.Map]}, {func: 1, ret: E.AnalysisOutline, args: [P.Map]}, {func: 1, ret: E.HoverResult, args: [P.Map]}, {func: 1, ret: E.CompletionResults, args: [P.Map]}, {func: 1, ret: E.SuggestionsResult, args: [P.Map]}, {func: 1, ret: E.SearchResults, args: [P.Map]}, {func: 1, ret: E.FindElementReferencesResult, args: [P.Map]}, {func: 1, ret: E.FindTopLevelDeclarationsResult, args: [P.Map]}, {func: 1, ret: E.TypeHierarchyResult, args: [P.Map]}, {func: 1, ret: E.FormatResult, args: [P.Map]}, {func: 1, ret: E.AssistsResult, args: [P.Map]}, {func: 1, ret: E.AvailableRefactoringsResult, args: [P.Map]}, {func: 1, ret: E.FixesResult, args: [P.Map]}, {func: 1, ret: E.RefactoringResult, args: [P.Map]}, {func: 1, ret: E.SortMembersResult, args: [P.Map]}, {func: 1, ret: E.OrganizeDirectivesResult, args: [P.Map]}, {func: 1, ret: E.CreateContextResult, args: [P.Map]}, {func: 1, ret: E.MapUriResult, args: [P.Map]}, {func: 1, ret: E.DiagnosticsResult, args: [P.Map]}, {func: 1, ret: T.Node1, args: [P.String]}, {func: 1, v: true, args: [F.Directory]}, {func: 1, ret: P.bool, args: [Y.TextEditor]}, {func: 1, ret: T.DebugPortAppEvent, args: [P.Map]}, {func: 1, ret: T.LogAppEvent, args: [P.Map]}, {func: 1, ret: T.ProgressAppEvent, args: [P.Map]}, {func: 1, ret: T.StopAppEvent, args: [P.Map]}, {func: 1, ret: T.Device, args: [P.Map]}, {func: 1, ret: T.LogMessage, args: [P.Map]}, {func: 1, ret: P.$int, args: [E.AnalysisError, E.AnalysisError]}, {func: 1, v: true, args: [N.LogRecord]}, {func: 1, ret: S.ExtensionData, args: [P.Map]}, {func: 1, ret: S.BoundField, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.BoundVariable, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Breakpoint, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.ClassRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Class, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.ClassList, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.CodeRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Code, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.ContextRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Context0, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.ContextElement, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.ErrorRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Error0, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Event1, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.FieldRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Field, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Flag, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.FlagList, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Frame, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.FuncRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Func, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.InstanceRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Instance, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.IsolateRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Isolate, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.LibraryRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Library, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.LibraryDependency, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.MapAssociation, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Message, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.NullRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Null0, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.ObjRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Obj, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Response, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Sentinel, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.ScriptRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Script, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.SourceLocation0, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.SourceReport, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.SourceReportCoverage, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.SourceReportRange, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Stack, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Success, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.TimelineEvent, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.TypeArgumentsRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.TypeArguments, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.UnresolvedSourceLocation, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.Version0, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.VMRef, args: [[P.Map, P.String,,]]}, {func: 1, ret: S.VM, args: [[P.Map, P.String,,]]}, {func: 1, ret: P.bool, args: [,,]}, {func: 1, ret: P.bool, args: [P.$int]}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = map();
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = map();
    init.leafTags = map();
    init.finishedClasses = map();
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          } else
            if (result === sentinelInProgress)
              H.throwCyclicInit(staticName || fieldName);
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.makeConstantList = oldIsolate.makeConstantList;
      Isolate.functionThatReturnsNull = oldIsolate.functionThatReturnsNull;
      return Isolate;
    };
  }
  !function() {
    var intern = function(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    };
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (true) {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(function(a) {
        H.startRootIsolate(T.entry__main$closure(), a);
      }, []);
    else
      (function(a) {
        H.startRootIsolate(T.entry__main$closure(), a);
      })([]);
  });
  // END invoke [main].
})();

//# sourceMappingURL=entry.dart.js.map
